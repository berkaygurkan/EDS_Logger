
USB TRANSMIT (inside while loop)
/*
		    if (buffer_ready_flag == 0)
		    {
		        for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++)
		        {
		            uint32_t header = 0xddccbbaa;
		            uint32_t values[7] = {header, packet_counter++, usb_buffer[0][0][i], usb_buffer[0][1][i], usb_buffer[0][2][i], usb_buffer[0][3][i], usb_buffer[0][4][i]}; // Include packet counter

		            uint8_t status;
		            uint32_t start_time = HAL_GetTick(); // Start time measurement
		            do {
		                status = CDC_Transmit_FS((uint8_t*)values, sizeof(values));
		            } while (status != USBD_OK);
		            uint32_t transmit_time = HAL_GetTick() - start_time; // End time measurement

		            // Optional: Add some delay if transmit_time is very short to avoid overwhelming USB host
		            // HAL_Delay(1); // Experiment with small delays if needed

		            if (transmit_time > 10) { // Example threshold - adjust as needed
		                // If transmit time is unexpectedly long, you might want to log/debug
		                // For now, let's just monitor in debugger if needed.
		                // printf("Transmit time exceeded threshold: %lu ms\r\n", transmit_time); // If you have UART debug
		            }
		        }
		        buffer_ready_flag = 3;
		    }
		    else if (buffer_ready_flag == 1)
		    {
		        for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++)
		        {
		            uint32_t header = 0xddccbbaa;
		            uint32_t values[7] = {header, packet_counter++, usb_buffer[1][0][i], usb_buffer[1][1][i], usb_buffer[1][2][i], usb_buffer[1][3][i], usb_buffer[1][4][i]}; // Include packet counter

		            uint8_t status;
		            uint32_t start_time = HAL_GetTick(); // Start time measurement
		            do {
		                status = CDC_Transmit_FS((uint8_t*)values, sizeof(values));
		            } while (status != USBD_OK);
		            uint32_t transmit_time = HAL_GetTick() - start_time; // End time measurement

		            // Optional: Add some delay if transmit_time is very short
		            // HAL_Delay(1); // Experiment with small delays if needed

		            if (transmit_time > 10) { // Example threshold - adjust as needed
		                // printf("Transmit time exceeded threshold: %lu ms\r\n", transmit_time); // If you have UART debug
		            }
		        }
		        buffer_ready_flag = 3;
		    }
		    else
		    {
		        // Idle state if needed
		    }*/
		    
		    
		    /*
		    
		    
		    


// Get data to run (before while loop)		    
uint8_t CDC_Receive_FS_App(uint8_t *Buf, uint32_t *Len)
{

  HAL_GPIO_TogglePin(GPIOB, LD2_Pin); // Example: Toggle an LED
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf); // Re-arm the receive buffer
  // Process received command
  if (*Len > 0) {
    if (Buf[0] == 'S') { // Start command
      if (!data_acquisition_running) {
        HAL_TIM_Base_Start_IT(&htim3); // Start TIM3 and interrupts
        HAL_TIM_Base_Start_IT(&htim2); // Start TIM2 and interrupts (if needed for toggling)
        data_acquisition_running = 1;
        buffer_ready_flag = 3; // Set to initial not ready value.
        packet_counter = 0; // Reset packet counter
        time_ms = 0;      // Reset time counter
        usb_buffer_cnt = 0;
        active_buffer = 0;
      } else {
      }
    } else if (Buf[0] == 'T') { // Stop command
      if (data_acquisition_running) {
        HAL_TIM_Base_Stop_IT(&htim3); // Stop TIM3 and interrupts
        HAL_TIM_Base_Stop_IT(&htim2); // Stop TIM2 and interrupts
        data_acquisition_running = 0;
        buffer_ready_flag = 3; // Ensure sending loop stops gracefully
      } else {
      }
    } else {
    }
  }
  return USBD_OK;
}
*/

/*HAL_TIM_IC_CaptureCallback iÃ§ine*/

	/*
	if (htim->Instance == TIM4)  // Check if it's TIM4 interrupt
	{
		uint32_t current_capture;

		// Determine which channel triggered the interrupt
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
			current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
		} else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
			current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
		} else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
			current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
		} else {
			return; // Invalid channel
		}

		// Handle overflow condition (timer wraps around)
		if (current_capture > last_capture)
			pulse_period = current_capture - last_capture;
		else
			pulse_period = (0xFFFF - last_capture) + current_capture;

		last_capture = current_capture;

		// Calculate RPM (APB1 Clock = 108MHz, Timer runs at 108MHz)
		if (pulse_period > 0)
		{
			if (pulse_period > 0)
			{
				rpm = (60000000.0f / (HALL_PULSES_PER_REV * pulse_period)); // Simplified calculation
			}
		}
		else
		{
			rpm = 0; // Avoid division by zero
		}
	}*/
	
	
	
	USB Buffer yazma
	
	
	/*
		HAL_GPIO_TogglePin(GPIOB,LD1_Pin);
		float set_rpm = Motor_Input() ;
		bldc_interface_set_rpm(Motor_Input());
		float current_speed = MotorSpeed_GetRPM();

        uint32_t scaled_set_rpm = (uint32_t)(set_rpm * 1000.0f);
        uint32_t scaled_current_speed = (uint32_t)(current_speed * 1000.0f);

		time_ms++;
		usb_buffer[active_buffer][0][usb_buffer_cnt] = time_ms;
		usb_buffer[active_buffer][1][usb_buffer_cnt] = adc_buffer[0]; 		// Panasonic
		usb_buffer[active_buffer][2][usb_buffer_cnt] = adc_buffer[1]; 		// Load Cell 1
		usb_buffer[active_buffer][3][usb_buffer_cnt] = scaled_set_rpm; 	// Load Cell 2
		usb_buffer[active_buffer][4][usb_buffer_cnt] = scaled_current_speed; 		// Load Cell 3
		usb_buffer_cnt++;

		if (usb_buffer_cnt>=USB_BUFFER_SIZE)
		{
			active_buffer = 1-active_buffer;
			usb_buffer_cnt = 0;
			if (active_buffer == 1)
				buffer_ready_flag = 0;
			else if (active_buffer == 0)
				buffer_ready_flag=1;
			else
				Error_Handler();
		}
	}
	*/
	
	
	
	/* main before while loop initialization
	
	"  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
  MotorSpeed_Init(&htim4);
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);  // Enable interrupts
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);  // Enable interrupts
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);  // Enable interrupts
  DataAcq_Init();
  bldc_interface_uart_init(send_packet);
	"