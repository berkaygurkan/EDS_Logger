
EDS_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae38  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800b030  0800b030  0000c030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b098  0800b098  0000d2a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b098  0800b098  0000c098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0a0  0800b0a0  0000d2a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0a0  0800b0a0  0000c0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0a4  0800b0a4  0000c0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800b0a8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000160  0800b208  0000d160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000200  0800b2a8  0000d200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0006f418  200002a0  0800b348  0000d2a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2006f6b8  0800b348  0000d6b8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000d2a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f712  00000000  00000000  0000d2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004368  00000000  00000000  0002c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001898  00000000  00000000  00030d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001300  00000000  00000000  000325e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cf39  00000000  00000000  000338e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002074e  00000000  00000000  00060819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010b49a  00000000  00000000  00080f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0018c401  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006ad8  00000000  00000000  0018c444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004b  00000000  00000000  00192f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200002a0 	.word	0x200002a0
 8000214:	00000000 	.word	0x00000000
 8000218:	0800b018 	.word	0x0800b018

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200002a4 	.word	0x200002a4
 8000234:	0800b018 	.word	0x0800b018

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b098      	sub	sp, #96	@ 0x60
 800052c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800052e:	f000 ff8e 	bl	800144e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000532:	f000 f90d 	bl	8000750 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000536:	f000 fb3d 	bl	8000bb4 <MX_GPIO_Init>
	MX_DMA_Init();
 800053a:	f000 fb1d 	bl	8000b78 <MX_DMA_Init>
	MX_ETH_Init();
 800053e:	f000 fa01 	bl	8000944 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000542:	f000 fae9 	bl	8000b18 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8000546:	f000 f973 	bl	8000830 <MX_ADC1_Init>
	MX_TIM2_Init();
 800054a:	f000 fa49 	bl	80009e0 <MX_TIM2_Init>
	MX_TIM3_Init();
 800054e:	f000 fa95 	bl	8000a7c <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 8000552:	f009 fe7f 	bl	800a254 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8000556:	486e      	ldr	r0, [pc, #440]	@ (8000710 <main+0x1e8>)
 8000558:	f005 fa12 	bl	8005980 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 800055c:	2205      	movs	r2, #5
 800055e:	496d      	ldr	r1, [pc, #436]	@ (8000714 <main+0x1ec>)
 8000560:	486d      	ldr	r0, [pc, #436]	@ (8000718 <main+0x1f0>)
 8000562:	f001 f839 	bl	80015d8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8000566:	486d      	ldr	r0, [pc, #436]	@ (800071c <main+0x1f4>)
 8000568:	f005 fa0a 	bl	8005980 <HAL_TIM_Base_Start_IT>
	//Test Purposes Only

	time_start_ms = time_ms;
 800056c:	4b6c      	ldr	r3, [pc, #432]	@ (8000720 <main+0x1f8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a6c      	ldr	r2, [pc, #432]	@ (8000724 <main+0x1fc>)
 8000572:	6013      	str	r3, [r2, #0]
	HAL_Delay(1000);
 8000574:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000578:	f000 ffc6 	bl	8001508 <HAL_Delay>
	time_end_ms = time_ms;
 800057c:	4b68      	ldr	r3, [pc, #416]	@ (8000720 <main+0x1f8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a69      	ldr	r2, [pc, #420]	@ (8000728 <main+0x200>)
 8000582:	6013      	str	r3, [r2, #0]
	time_elapsed_ms = time_end_ms-time_start_ms;
 8000584:	4b68      	ldr	r3, [pc, #416]	@ (8000728 <main+0x200>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	4b66      	ldr	r3, [pc, #408]	@ (8000724 <main+0x1fc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	4a67      	ldr	r2, [pc, #412]	@ (800072c <main+0x204>)
 8000590:	6013      	str	r3, [r2, #0]
	motor_pulse = 1000;
 8000592:	4b67      	ldr	r3, [pc, #412]	@ (8000730 <main+0x208>)
 8000594:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000598:	601a      	str	r2, [r3, #0]
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */



		    if (buffer_ready_flag == 0)
 800059a:	4b66      	ldr	r3, [pc, #408]	@ (8000734 <main+0x20c>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d158      	bne.n	8000654 <main+0x12c>
		    {
		        for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80005a8:	e04b      	b.n	8000642 <main+0x11a>
		        {
		            uint32_t header = 0xddccbbaa;
 80005aa:	4b63      	ldr	r3, [pc, #396]	@ (8000738 <main+0x210>)
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
		            uint32_t values[7] = {header, packet_counter++, usb_buffer[0][0][i], usb_buffer[0][1][i], usb_buffer[0][2][i], usb_buffer[0][3][i], usb_buffer[0][4][i]}; // Include packet counter
 80005ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80005b0:	623b      	str	r3, [r7, #32]
 80005b2:	4b62      	ldr	r3, [pc, #392]	@ (800073c <main+0x214>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	4960      	ldr	r1, [pc, #384]	@ (800073c <main+0x214>)
 80005ba:	600a      	str	r2, [r1, #0]
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80005be:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80005c2:	4a5f      	ldr	r2, [pc, #380]	@ (8000740 <main+0x218>)
 80005c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80005ca:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80005ce:	4a5c      	ldr	r2, [pc, #368]	@ (8000740 <main+0x218>)
 80005d0:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 80005d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80005da:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80005de:	4a58      	ldr	r2, [pc, #352]	@ (8000740 <main+0x218>)
 80005e0:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 80005e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80005ea:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80005ee:	4954      	ldr	r1, [pc, #336]	@ (8000740 <main+0x218>)
 80005f0:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 80005f4:	4413      	add	r3, r2
 80005f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80005fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8000600:	4a4f      	ldr	r2, [pc, #316]	@ (8000740 <main+0x218>)
 8000602:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8000606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800060a:	63bb      	str	r3, [r7, #56]	@ 0x38

		            uint8_t status;
		            uint32_t start_time = HAL_GetTick(); // Start time measurement
 800060c:	f000 ff70 	bl	80014f0 <HAL_GetTick>
 8000610:	6478      	str	r0, [r7, #68]	@ 0x44
		            do {
		                status = CDC_Transmit_FS((uint8_t*)values, sizeof(values));
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	211c      	movs	r1, #28
 8000618:	4618      	mov	r0, r3
 800061a:	f009 fed9 	bl	800a3d0 <CDC_Transmit_FS>
 800061e:	4603      	mov	r3, r0
 8000620:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		            } while (status != USBD_OK);
 8000624:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1f2      	bne.n	8000612 <main+0xea>
		            uint32_t transmit_time = HAL_GetTick() - start_time; // End time measurement
 800062c:	f000 ff60 	bl	80014f0 <HAL_GetTick>
 8000630:	4602      	mov	r2, r0
 8000632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
		        for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++)
 8000638:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800063c:	3301      	adds	r3, #1
 800063e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8000642:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8000646:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800064a:	d3ae      	bcc.n	80005aa <main+0x82>
		                // If transmit time is unexpectedly long, you might want to log/debug
		                // For now, let's just monitor in debugger if needed.
		                // printf("Transmit time exceeded threshold: %lu ms\r\n", transmit_time); // If you have UART debug
		            }
		        }
		        buffer_ready_flag = 3;
 800064c:	4b39      	ldr	r3, [pc, #228]	@ (8000734 <main+0x20c>)
 800064e:	2203      	movs	r2, #3
 8000650:	701a      	strb	r2, [r3, #0]
 8000652:	e7a2      	b.n	800059a <main+0x72>
		    }
		    else if (buffer_ready_flag == 1)
 8000654:	4b37      	ldr	r3, [pc, #220]	@ (8000734 <main+0x20c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d19e      	bne.n	800059a <main+0x72>
		    {
		        for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8000662:	e04c      	b.n	80006fe <main+0x1d6>
		        {
		            uint32_t header = 0xddccbbaa;
 8000664:	4b34      	ldr	r3, [pc, #208]	@ (8000738 <main+0x210>)
 8000666:	65bb      	str	r3, [r7, #88]	@ 0x58
		            uint32_t values[7] = {header, packet_counter++, usb_buffer[1][0][i], usb_buffer[1][1][i], usb_buffer[1][2][i], usb_buffer[1][3][i], usb_buffer[1][4][i]}; // Include packet counter
 8000668:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b33      	ldr	r3, [pc, #204]	@ (800073c <main+0x214>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	4932      	ldr	r1, [pc, #200]	@ (800073c <main+0x214>)
 8000674:	600a      	str	r2, [r1, #0]
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800067c:	4930      	ldr	r1, [pc, #192]	@ (8000740 <main+0x218>)
 800067e:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 8000682:	4413      	add	r3, r2
 8000684:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <main+0x218>)
 8000690:	f503 437a 	add.w	r3, r3, #64000	@ 0xfa00
 8000694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800069e:	4928      	ldr	r1, [pc, #160]	@ (8000740 <main+0x218>)
 80006a0:	4b28      	ldr	r3, [pc, #160]	@ (8000744 <main+0x21c>)
 80006a2:	4413      	add	r3, r2
 80006a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80006ae:	4924      	ldr	r1, [pc, #144]	@ (8000740 <main+0x218>)
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <main+0x220>)
 80006b2:	4413      	add	r3, r2
 80006b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006b8:	61bb      	str	r3, [r7, #24]
 80006ba:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80006be:	4920      	ldr	r1, [pc, #128]	@ (8000740 <main+0x218>)
 80006c0:	4b22      	ldr	r3, [pc, #136]	@ (800074c <main+0x224>)
 80006c2:	4413      	add	r3, r2
 80006c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006c8:	61fb      	str	r3, [r7, #28]

		            uint8_t status;
		            uint32_t start_time = HAL_GetTick(); // Start time measurement
 80006ca:	f000 ff11 	bl	80014f0 <HAL_GetTick>
 80006ce:	6578      	str	r0, [r7, #84]	@ 0x54
		            do {
		                status = CDC_Transmit_FS((uint8_t*)values, sizeof(values));
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	211c      	movs	r1, #28
 80006d4:	4618      	mov	r0, r3
 80006d6:	f009 fe7b 	bl	800a3d0 <CDC_Transmit_FS>
 80006da:	4603      	mov	r3, r0
 80006dc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		            } while (status != USBD_OK);
 80006e0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1f3      	bne.n	80006d0 <main+0x1a8>
		            uint32_t transmit_time = HAL_GetTick() - start_time; // End time measurement
 80006e8:	f000 ff02 	bl	80014f0 <HAL_GetTick>
 80006ec:	4602      	mov	r2, r0
 80006ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		        for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++)
 80006f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80006f8:	3301      	adds	r3, #1
 80006fa:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80006fe:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000702:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000706:	d3ad      	bcc.n	8000664 <main+0x13c>

		            if (transmit_time > 10) { // Example threshold - adjust as needed
		                // printf("Transmit time exceeded threshold: %lu ms\r\n", transmit_time); // If you have UART debug
		            }
		        }
		        buffer_ready_flag = 3;
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <main+0x20c>)
 800070a:	2203      	movs	r2, #3
 800070c:	701a      	strb	r2, [r3, #0]
		    if (buffer_ready_flag == 0)
 800070e:	e744      	b.n	800059a <main+0x72>
 8000710:	20000498 	.word	0x20000498
 8000714:	2000057c 	.word	0x2000057c
 8000718:	200002f4 	.word	0x200002f4
 800071c:	2000044c 	.word	0x2000044c
 8000720:	2006dba0 	.word	0x2006dba0
 8000724:	2000056c 	.word	0x2000056c
 8000728:	20000570 	.word	0x20000570
 800072c:	20000574 	.word	0x20000574
 8000730:	20000578 	.word	0x20000578
 8000734:	20000000 	.word	0x20000000
 8000738:	ddccbbaa 	.word	0xddccbbaa
 800073c:	2006db94 	.word	0x2006db94
 8000740:	20000594 	.word	0x20000594
 8000744:	00011940 	.word	0x00011940
 8000748:	00013880 	.word	0x00013880
 800074c:	000157c0 	.word	0x000157c0

08000750 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	@ 0x50
 8000754:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2234      	movs	r2, #52	@ 0x34
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f00a fbcc 	bl	800aefc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000774:	f003 ff50 	bl	8004618 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000778:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <SystemClock_Config+0xd8>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	4a2a      	ldr	r2, [pc, #168]	@ (8000828 <SystemClock_Config+0xd8>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	@ 0x40
 8000784:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <SystemClock_Config+0xd8>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	4b26      	ldr	r3, [pc, #152]	@ (800082c <SystemClock_Config+0xdc>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a25      	ldr	r2, [pc, #148]	@ (800082c <SystemClock_Config+0xdc>)
 8000796:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b23      	ldr	r3, [pc, #140]	@ (800082c <SystemClock_Config+0xdc>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ac:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007b0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 80007c0:	23d8      	movs	r3, #216	@ 0xd8
 80007c2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80007c8:	2309      	movs	r3, #9
 80007ca:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 ff7f 	bl	80046d8 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80007e0:	f000 fa8a 	bl	8000cf8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007e4:	f003 ff28 	bl	8004638 <HAL_PWREx_EnableOverDrive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 80007ee:	f000 fa83 	bl	8000cf8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000802:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000808:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2107      	movs	r1, #7
 8000810:	4618      	mov	r0, r3
 8000812:	f004 fa0f 	bl	8004c34 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 800081c:	f000 fa6c 	bl	8000cf8 <Error_Handler>
	}
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	@ 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000842:	4b3e      	ldr	r3, [pc, #248]	@ (800093c <MX_ADC1_Init+0x10c>)
 8000844:	4a3e      	ldr	r2, [pc, #248]	@ (8000940 <MX_ADC1_Init+0x110>)
 8000846:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000848:	4b3c      	ldr	r3, [pc, #240]	@ (800093c <MX_ADC1_Init+0x10c>)
 800084a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800084e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000850:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_ADC1_Init+0x10c>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000856:	4b39      	ldr	r3, [pc, #228]	@ (800093c <MX_ADC1_Init+0x10c>)
 8000858:	2201      	movs	r2, #1
 800085a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800085c:	4b37      	ldr	r3, [pc, #220]	@ (800093c <MX_ADC1_Init+0x10c>)
 800085e:	2201      	movs	r2, #1
 8000860:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_ADC1_Init+0x10c>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800086a:	4b34      	ldr	r3, [pc, #208]	@ (800093c <MX_ADC1_Init+0x10c>)
 800086c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000870:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000872:	4b32      	ldr	r3, [pc, #200]	@ (800093c <MX_ADC1_Init+0x10c>)
 8000874:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 8000878:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087a:	4b30      	ldr	r3, [pc, #192]	@ (800093c <MX_ADC1_Init+0x10c>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 5;
 8000880:	4b2e      	ldr	r3, [pc, #184]	@ (800093c <MX_ADC1_Init+0x10c>)
 8000882:	2205      	movs	r2, #5
 8000884:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000886:	4b2d      	ldr	r3, [pc, #180]	@ (800093c <MX_ADC1_Init+0x10c>)
 8000888:	2201      	movs	r2, #1
 800088a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800088e:	4b2b      	ldr	r3, [pc, #172]	@ (800093c <MX_ADC1_Init+0x10c>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000894:	4829      	ldr	r0, [pc, #164]	@ (800093c <MX_ADC1_Init+0x10c>)
 8000896:	f000 fe5b 	bl	8001550 <HAL_ADC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0x74>
	{
		Error_Handler();
 80008a0:	f000 fa2a 	bl	8000cf8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80008ac:	2304      	movs	r3, #4
 80008ae:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4821      	ldr	r0, [pc, #132]	@ (800093c <MX_ADC1_Init+0x10c>)
 80008b6:	f000 ff9d 	bl	80017f4 <HAL_ADC_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0x94>
	{
		Error_Handler();
 80008c0:	f000 fa1a 	bl	8000cf8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80008c4:	2303      	movs	r3, #3
 80008c6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	4619      	mov	r1, r3
 80008d0:	481a      	ldr	r0, [pc, #104]	@ (800093c <MX_ADC1_Init+0x10c>)
 80008d2:	f000 ff8f 	bl	80017f4 <HAL_ADC_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0xb0>
	{
		Error_Handler();
 80008dc:	f000 fa0c 	bl	8000cf8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80008e0:	2304      	movs	r3, #4
 80008e2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80008e4:	2303      	movs	r3, #3
 80008e6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4813      	ldr	r0, [pc, #76]	@ (800093c <MX_ADC1_Init+0x10c>)
 80008ee:	f000 ff81 	bl	80017f4 <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0xcc>
	{
		Error_Handler();
 80008f8:	f000 f9fe 	bl	8000cf8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 80008fc:	2305      	movs	r3, #5
 80008fe:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8000900:	2304      	movs	r3, #4
 8000902:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	@ (800093c <MX_ADC1_Init+0x10c>)
 800090a:	f000 ff73 	bl	80017f4 <HAL_ADC_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_ADC1_Init+0xe8>
	{
		Error_Handler();
 8000914:	f000 f9f0 	bl	8000cf8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000918:	2306      	movs	r3, #6
 800091a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 800091c:	2305      	movs	r3, #5
 800091e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_ADC1_Init+0x10c>)
 8000926:	f000 ff65 	bl	80017f4 <HAL_ADC_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC1_Init+0x104>
	{
		Error_Handler();
 8000930:	f000 f9e2 	bl	8000cf8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200002f4 	.word	0x200002f4
 8000940:	40012000 	.word	0x40012000

08000944 <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000948:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_ETH_Init+0x84>)
 800094a:	4a20      	ldr	r2, [pc, #128]	@ (80009cc <MX_ETH_Init+0x88>)
 800094c:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 800094e:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <MX_ETH_Init+0x8c>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000954:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_ETH_Init+0x8c>)
 8000956:	2280      	movs	r2, #128	@ 0x80
 8000958:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800095a:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <MX_ETH_Init+0x8c>)
 800095c:	22e1      	movs	r2, #225	@ 0xe1
 800095e:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000960:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_ETH_Init+0x8c>)
 8000962:	2200      	movs	r2, #0
 8000964:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000966:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_ETH_Init+0x8c>)
 8000968:	2200      	movs	r2, #0
 800096a:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_ETH_Init+0x8c>)
 800096e:	2200      	movs	r2, #0
 8000970:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <MX_ETH_Init+0x84>)
 8000974:	4a16      	ldr	r2, [pc, #88]	@ (80009d0 <MX_ETH_Init+0x8c>)
 8000976:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_ETH_Init+0x84>)
 800097a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800097e:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_ETH_Init+0x84>)
 8000982:	4a14      	ldr	r2, [pc, #80]	@ (80009d4 <MX_ETH_Init+0x90>)
 8000984:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_ETH_Init+0x84>)
 8000988:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <MX_ETH_Init+0x94>)
 800098a:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800098c:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_ETH_Init+0x84>)
 800098e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000992:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 8000994:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <MX_ETH_Init+0x84>)
 8000996:	f001 fe89 	bl	80026ac <HAL_ETH_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_ETH_Init+0x60>
	{
		Error_Handler();
 80009a0:	f000 f9aa 	bl	8000cf8 <Error_Handler>
	}

	memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009a4:	2238      	movs	r2, #56	@ 0x38
 80009a6:	2100      	movs	r1, #0
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <MX_ETH_Init+0x98>)
 80009aa:	f00a faa7 	bl	800aefc <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_ETH_Init+0x98>)
 80009b0:	2221      	movs	r2, #33	@ 0x21
 80009b2:	601a      	str	r2, [r3, #0]
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_ETH_Init+0x98>)
 80009b6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80009ba:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009bc:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <MX_ETH_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000039c 	.word	0x2000039c
 80009cc:	40028000 	.word	0x40028000
 80009d0:	2006db98 	.word	0x2006db98
 80009d4:	20000200 	.word	0x20000200
 80009d8:	20000160 	.word	0x20000160
 80009dc:	200002bc 	.word	0x200002bc

080009e0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b088      	sub	sp, #32
 80009e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000a78 <MX_TIM2_Init+0x98>)
 8000a00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a04:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 71;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <MX_TIM2_Init+0x98>)
 8000a08:	2247      	movs	r2, #71	@ 0x47
 8000a0a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_TIM2_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1499;
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <MX_TIM2_Init+0x98>)
 8000a14:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000a18:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_TIM2_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <MX_TIM2_Init+0x98>)
 8000a22:	2280      	movs	r2, #128	@ 0x80
 8000a24:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a26:	4814      	ldr	r0, [pc, #80]	@ (8000a78 <MX_TIM2_Init+0x98>)
 8000a28:	f004 ff52 	bl	80058d0 <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8000a32:	f000 f961 	bl	8000cf8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a3a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	@ (8000a78 <MX_TIM2_Init+0x98>)
 8000a44:	f005 f91c 	bl	8005c80 <HAL_TIM_ConfigClockSource>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8000a4e:	f000 f953 	bl	8000cf8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a52:	2320      	movs	r3, #32
 8000a54:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <MX_TIM2_Init+0x98>)
 8000a60:	f005 fb46 	bl	80060f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8000a6a:	f000 f945 	bl	8000cf8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000044c 	.word	0x2000044c

08000a7c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <MX_TIM3_Init+0x94>)
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b14 <MX_TIM3_Init+0x98>)
 8000a9e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 10799;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b10 <MX_TIM3_Init+0x94>)
 8000aa2:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8000aa6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa8:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <MX_TIM3_Init+0x94>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9;//9;
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <MX_TIM3_Init+0x94>)
 8000ab0:	2209      	movs	r2, #9
 8000ab2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <MX_TIM3_Init+0x94>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <MX_TIM3_Init+0x94>)
 8000abc:	2280      	movs	r2, #128	@ 0x80
 8000abe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ac0:	4813      	ldr	r0, [pc, #76]	@ (8000b10 <MX_TIM3_Init+0x94>)
 8000ac2:	f004 ff05 	bl	80058d0 <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8000acc:	f000 f914 	bl	8000cf8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ad6:	f107 0310 	add.w	r3, r7, #16
 8000ada:	4619      	mov	r1, r3
 8000adc:	480c      	ldr	r0, [pc, #48]	@ (8000b10 <MX_TIM3_Init+0x94>)
 8000ade:	f005 f8cf 	bl	8005c80 <HAL_TIM_ConfigClockSource>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8000ae8:	f000 f906 	bl	8000cf8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <MX_TIM3_Init+0x94>)
 8000afa:	f005 faf9 	bl	80060f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8000b04:	f000 f8f8 	bl	8000cf8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3720      	adds	r7, #32
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000498 	.word	0x20000498
 8000b14:	40000400 	.word	0x40000400

08000b18 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	@ (8000b74 <MX_USART3_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_USART3_UART_Init+0x58>)
 8000b5c:	f005 fb74 	bl	8006248 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8000b66:	f000 f8c7 	bl	8000cf8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200004e4 	.word	0x200004e4
 8000b74:	40004800 	.word	0x40004800

08000b78 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_DMA_Init+0x38>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb0 <MX_DMA_Init+0x38>)
 8000b84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_DMA_Init+0x38>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2038      	movs	r0, #56	@ 0x38
 8000b9c:	f001 f9d7 	bl	8001f4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ba0:	2038      	movs	r0, #56	@ 0x38
 8000ba2:	f001 f9f0 	bl	8001f86 <HAL_NVIC_EnableIRQ>

}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	@ 0x30
 8000bb8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b47      	ldr	r3, [pc, #284]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a46      	ldr	r2, [pc, #280]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b44      	ldr	r3, [pc, #272]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	61bb      	str	r3, [r7, #24]
 8000be0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000be2:	4b41      	ldr	r3, [pc, #260]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a40      	ldr	r2, [pc, #256]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b3e      	ldr	r3, [pc, #248]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a3a      	ldr	r2, [pc, #232]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b38      	ldr	r3, [pc, #224]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	4b35      	ldr	r3, [pc, #212]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a34      	ldr	r2, [pc, #208]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b32      	ldr	r3, [pc, #200]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a2e      	ldr	r2, [pc, #184]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000c42:	4b29      	ldr	r3, [pc, #164]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	4a28      	ldr	r2, [pc, #160]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ce8 <MX_GPIO_Init+0x134>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c60:	4822      	ldr	r0, [pc, #136]	@ (8000cec <MX_GPIO_Init+0x138>)
 8000c62:	f002 fa1d 	bl	80030a0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2140      	movs	r1, #64	@ 0x40
 8000c6a:	4821      	ldr	r0, [pc, #132]	@ (8000cf0 <MX_GPIO_Init+0x13c>)
 8000c6c:	f002 fa18 	bl	80030a0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c7a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	481b      	ldr	r0, [pc, #108]	@ (8000cf4 <MX_GPIO_Init+0x140>)
 8000c88:	f002 f85e 	bl	8002d48 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c8c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4811      	ldr	r0, [pc, #68]	@ (8000cec <MX_GPIO_Init+0x138>)
 8000ca6:	f002 f84f 	bl	8002d48 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000caa:	2340      	movs	r3, #64	@ 0x40
 8000cac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480b      	ldr	r0, [pc, #44]	@ (8000cf0 <MX_GPIO_Init+0x13c>)
 8000cc2:	f002 f841 	bl	8002d48 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cc6:	2380      	movs	r3, #128	@ 0x80
 8000cc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <MX_GPIO_Init+0x13c>)
 8000cda:	f002 f835 	bl	8002d48 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000cde:	bf00      	nop
 8000ce0:	3730      	adds	r7, #48	@ 0x30
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	40021800 	.word	0x40021800
 8000cf4:	40020800 	.word	0x40020800

08000cf8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <Error_Handler+0x8>

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_MspInit+0x44>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800

08000d4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a2d      	ldr	r2, [pc, #180]	@ (8000e20 <HAL_ADC_MspInit+0xd4>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d154      	bne.n	8000e18 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e24 <HAL_ADC_MspInit+0xd8>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d72:	4a2c      	ldr	r2, [pc, #176]	@ (8000e24 <HAL_ADC_MspInit+0xd8>)
 8000d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e24 <HAL_ADC_MspInit+0xd8>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <HAL_ADC_MspInit+0xd8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a26      	ldr	r2, [pc, #152]	@ (8000e24 <HAL_ADC_MspInit+0xd8>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b24      	ldr	r3, [pc, #144]	@ (8000e24 <HAL_ADC_MspInit+0xd8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000d9e:	2379      	movs	r3, #121	@ 0x79
 8000da0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da2:	2303      	movs	r3, #3
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	481d      	ldr	r0, [pc, #116]	@ (8000e28 <HAL_ADC_MspInit+0xdc>)
 8000db2:	f001 ffc9 	bl	8002d48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000db8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e30 <HAL_ADC_MspInit+0xe4>)
 8000dba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dce:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000dd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dd4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000dd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ddc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000de0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000de4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000de6:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000de8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000df0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000df4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dfc:	480b      	ldr	r0, [pc, #44]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000dfe:	f001 f8dd 	bl	8001fbc <HAL_DMA_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000e08:	f7ff ff76 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000e10:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e12:	4a06      	ldr	r2, [pc, #24]	@ (8000e2c <HAL_ADC_MspInit+0xe0>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e18:	bf00      	nop
 8000e1a:	3728      	adds	r7, #40	@ 0x28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40012000 	.word	0x40012000
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	2000033c 	.word	0x2000033c
 8000e30:	40026410 	.word	0x40026410

08000e34 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	@ 0x38
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a4e      	ldr	r2, [pc, #312]	@ (8000f8c <HAL_ETH_MspInit+0x158>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	f040 8096 	bne.w	8000f84 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e58:	4b4d      	ldr	r3, [pc, #308]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e64:	4b4a      	ldr	r3, [pc, #296]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e6c:	623b      	str	r3, [r7, #32]
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	4b47      	ldr	r3, [pc, #284]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e74:	4a46      	ldr	r2, [pc, #280]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7c:	4b44      	ldr	r3, [pc, #272]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	4b41      	ldr	r3, [pc, #260]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8c:	4a40      	ldr	r2, [pc, #256]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e94:	4b3e      	ldr	r3, [pc, #248]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea4:	4a3a      	ldr	r2, [pc, #232]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eac:	4b38      	ldr	r3, [pc, #224]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b35      	ldr	r3, [pc, #212]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebc:	4a34      	ldr	r2, [pc, #208]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec4:	4b32      	ldr	r3, [pc, #200]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000edc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee8:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eec:	4a28      	ldr	r2, [pc, #160]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef4:	4b26      	ldr	r3, [pc, #152]	@ (8000f90 <HAL_ETH_MspInit+0x15c>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f00:	2332      	movs	r3, #50	@ 0x32
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f10:	230b      	movs	r3, #11
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481e      	ldr	r0, [pc, #120]	@ (8000f94 <HAL_ETH_MspInit+0x160>)
 8000f1c:	f001 ff14 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f20:	2386      	movs	r3, #134	@ 0x86
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f30:	230b      	movs	r3, #11
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4817      	ldr	r0, [pc, #92]	@ (8000f98 <HAL_ETH_MspInit+0x164>)
 8000f3c:	f001 ff04 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f52:	230b      	movs	r3, #11
 8000f54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480f      	ldr	r0, [pc, #60]	@ (8000f9c <HAL_ETH_MspInit+0x168>)
 8000f5e:	f001 fef3 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f62:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f74:	230b      	movs	r3, #11
 8000f76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4808      	ldr	r0, [pc, #32]	@ (8000fa0 <HAL_ETH_MspInit+0x16c>)
 8000f80:	f001 fee2 	bl	8002d48 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f84:	bf00      	nop
 8000f86:	3738      	adds	r7, #56	@ 0x38
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40028000 	.word	0x40028000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40021800 	.word	0x40021800

08000fa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fb4:	d114      	bne.n	8000fe0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_TIM_Base_MspInit+0x78>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a18      	ldr	r2, [pc, #96]	@ (800101c <HAL_TIM_Base_MspInit+0x78>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_TIM_Base_MspInit+0x78>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	201c      	movs	r0, #28
 8000fd4:	f000 ffbb 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fd8:	201c      	movs	r0, #28
 8000fda:	f000 ffd4 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fde:	e018      	b.n	8001012 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8001020 <HAL_TIM_Base_MspInit+0x7c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d113      	bne.n	8001012 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <HAL_TIM_Base_MspInit+0x78>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <HAL_TIM_Base_MspInit+0x78>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <HAL_TIM_Base_MspInit+0x78>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	201d      	movs	r0, #29
 8001008:	f000 ffa1 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800100c:	201d      	movs	r0, #29
 800100e:	f000 ffba 	bl	8001f86 <HAL_NVIC_EnableIRQ>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40000400 	.word	0x40000400

08001024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0ae      	sub	sp, #184	@ 0xb8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2290      	movs	r2, #144	@ 0x90
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f009 ff59 	bl	800aefc <memset>
  if(huart->Instance==USART3)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a22      	ldr	r2, [pc, #136]	@ (80010d8 <HAL_UART_MspInit+0xb4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d13c      	bne.n	80010ce <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001058:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800105a:	2300      	movs	r3, #0
 800105c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4618      	mov	r0, r3
 8001064:	f004 f80c 	bl	8005080 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800106e:	f7ff fe43 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	4a19      	ldr	r2, [pc, #100]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 8001078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800107c:	6413      	str	r3, [r2, #64]	@ 0x40
 800107e:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800108a:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a13      	ldr	r2, [pc, #76]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <HAL_UART_MspInit+0xb8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010bc:	2307      	movs	r3, #7
 80010be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <HAL_UART_MspInit+0xbc>)
 80010ca:	f001 fe3d 	bl	8002d48 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80010ce:	bf00      	nop
 80010d0:	37b8      	adds	r7, #184	@ 0xb8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40004800 	.word	0x40004800
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020c00 	.word	0x40020c00

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <NMI_Handler+0x4>

080010ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <HardFault_Handler+0x4>

080010f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <MemManage_Handler+0x4>

080010fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <UsageFault_Handler+0x4>

0800110c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113a:	f000 f9c5 	bl	80014c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <TIM2_IRQHandler+0x10>)
 800114a:	f004 fc91 	bl	8005a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000044c 	.word	0x2000044c

08001158 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <TIM3_IRQHandler+0x10>)
 800115e:	f004 fc87 	bl	8005a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000498 	.word	0x20000498

0800116c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <DMA2_Stream0_IRQHandler+0x10>)
 8001172:	f001 f831 	bl	80021d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000033c 	.word	0x2000033c

08001180 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <OTG_FS_IRQHandler+0x10>)
 8001186:	f002 f8f6 	bl	8003376 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2006f090 	.word	0x2006f090

08001194 <HAL_TIM_PeriodElapsedCallback>:
uint16_t usb_buffer_cnt = 0;
extern uint8_t buffer_ready_flag;
extern uint32_t motor_pulse;
uint32_t overflow_count = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a62      	ldr	r2, [pc, #392]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x198>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	f040 80b5 	bne.w	8001312 <HAL_TIM_PeriodElapsedCallback+0x17e>
  {

	     time_ms++;
 80011a8:	4b61      	ldr	r3, [pc, #388]	@ (8001330 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a60      	ldr	r2, [pc, #384]	@ (8001330 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80011b0:	6013      	str	r3, [r2, #0]
	     usb_buffer[active_buffer][0][usb_buffer_cnt] = time_ms;
 80011b2:	4b60      	ldr	r3, [pc, #384]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	461c      	mov	r4, r3
 80011ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	4b5b      	ldr	r3, [pc, #364]	@ (8001330 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	495d      	ldr	r1, [pc, #372]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80011c6:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 80011ca:	fb04 f303 	mul.w	r3, r4, r3
 80011ce:	4403      	add	r3, r0
 80011d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 	 usb_buffer[active_buffer][1][usb_buffer_cnt] = adc_buffer[0]; // Panasonic
 80011d4:	4b57      	ldr	r3, [pc, #348]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	461c      	mov	r4, r3
 80011dc:	4b56      	ldr	r3, [pc, #344]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	4b57      	ldr	r3, [pc, #348]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4955      	ldr	r1, [pc, #340]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80011e8:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 80011ec:	fb04 f303 	mul.w	r3, r4, r3
 80011f0:	4403      	add	r3, r0
 80011f2:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 	 usb_buffer[active_buffer][2][usb_buffer_cnt] = adc_buffer[1]; // Load Cell 1
 80011fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	461c      	mov	r4, r3
 8001202:	4b4d      	ldr	r3, [pc, #308]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	4b4d      	ldr	r3, [pc, #308]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	494b      	ldr	r1, [pc, #300]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800120e:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 8001212:	fb04 f303 	mul.w	r3, r4, r3
 8001216:	4403      	add	r3, r0
 8001218:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 800121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 	 usb_buffer[active_buffer][3][usb_buffer_cnt] = adc_buffer[2]; // Load Cell 2
 8001220:	4b44      	ldr	r3, [pc, #272]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461c      	mov	r4, r3
 8001228:	4b43      	ldr	r3, [pc, #268]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	4b44      	ldr	r3, [pc, #272]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	4842      	ldr	r0, [pc, #264]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001234:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 8001238:	fb04 f303 	mul.w	r3, r4, r3
 800123c:	4419      	add	r1, r3
 800123e:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8001242:	440b      	add	r3, r1
 8001244:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	 	 usb_buffer[active_buffer][4][usb_buffer_cnt] = adc_buffer[3]; // Load Cell 3
 8001248:	4b3a      	ldr	r3, [pc, #232]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461c      	mov	r4, r3
 8001250:	4b39      	ldr	r3, [pc, #228]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	4b3a      	ldr	r3, [pc, #232]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	4938      	ldr	r1, [pc, #224]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800125c:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 8001260:	fb04 f303 	mul.w	r3, r4, r3
 8001264:	4403      	add	r3, r0
 8001266:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 	 usb_buffer[active_buffer][5][usb_buffer_cnt] = adc_buffer[4]; // Load Cell 4
 800126e:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	461c      	mov	r4, r3
 8001276:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	4619      	mov	r1, r3
 800127c:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	482e      	ldr	r0, [pc, #184]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001282:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 8001286:	fb04 f303 	mul.w	r3, r4, r3
 800128a:	4419      	add	r1, r3
 800128c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001290:	440b      	add	r3, r1
 8001292:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	 	 usb_buffer[active_buffer][6][usb_buffer_cnt] = motor_pulse; // PWM Signal
 8001296:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	461c      	mov	r4, r3
 800129e:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	4b27      	ldr	r3, [pc, #156]	@ (8001344 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4824      	ldr	r0, [pc, #144]	@ (800133c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80012aa:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 80012ae:	fb04 f303 	mul.w	r3, r4, r3
 80012b2:	4419      	add	r1, r3
 80012b4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80012b8:	440b      	add	r3, r1
 80012ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	 	 usb_buffer_cnt++;
 80012be:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012c8:	801a      	strh	r2, [r3, #0]

	  if (usb_buffer_cnt>=USB_BUFFER_SIZE)
 80012ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80012d2:	d31e      	bcc.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x17e>
	  {

	 	   active_buffer = 1-active_buffer;
 80012d4:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f1c3 0301 	rsb	r3, r3, #1
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012e2:	701a      	strb	r2, [r3, #0]
	 	   usb_buffer_cnt = 0;
 80012e4:	4b14      	ldr	r3, [pc, #80]	@ (8001338 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	801a      	strh	r2, [r3, #0]
	 	   if (active_buffer == 1)
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d103      	bne.n	80012fc <HAL_TIM_PeriodElapsedCallback+0x168>
	 		   buffer_ready_flag = 0;
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	e00a      	b.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x17e>
	 	   else if (active_buffer == 0)
 80012fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d103      	bne.n	800130e <HAL_TIM_PeriodElapsedCallback+0x17a>
	 		   buffer_ready_flag=1;
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	e001      	b.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x17e>
	 	   else
	 		   Error_Handler();
 800130e:	f7ff fcf3 	bl	8000cf8 <Error_Handler>
	  }



  }
  if (htim->Instance == TIM2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800131a:	d103      	bne.n	8001324 <HAL_TIM_PeriodElapsedCallback+0x190>
  {
	  HAL_GPIO_TogglePin(GPIOB,LD1_Pin);
 800131c:	2101      	movs	r1, #1
 800131e:	480b      	ldr	r0, [pc, #44]	@ (800134c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001320:	f001 fed7 	bl	80030d2 <HAL_GPIO_TogglePin>
  }
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bd90      	pop	{r4, r7, pc}
 800132c:	40000400 	.word	0x40000400
 8001330:	2006dba0 	.word	0x2006dba0
 8001334:	20000590 	.word	0x20000590
 8001338:	2006dba4 	.word	0x2006dba4
 800133c:	20000594 	.word	0x20000594
 8001340:	2000057c 	.word	0x2000057c
 8001344:	20000578 	.word	0x20000578
 8001348:	20000000 	.word	0x20000000
 800134c:	40020400 	.word	0x40020400

08001350 <HAL_ADC_ConvCpltCallback>:

/*ADC Measurement*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  // Called when DMA fills the ENTIRE buffer
	HAL_GPIO_TogglePin(GPIOB,LD2_Pin);
 8001358:	2180      	movs	r1, #128	@ 0x80
 800135a:	4803      	ldr	r0, [pc, #12]	@ (8001368 <HAL_ADC_ConvCpltCallback+0x18>)
 800135c:	f001 feb9 	bl	80030d2 <HAL_GPIO_TogglePin>

	  // Fill the buffer



	}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40020400 	.word	0x40020400

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d207      	bcs.n	80013ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800139c:	f009 fdc6 	bl	800af2c <__errno>
 80013a0:	4603      	mov	r3, r0
 80013a2:	220c      	movs	r2, #12
 80013a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e009      	b.n	80013c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013b2:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <_sbrk+0x64>)
 80013bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20080000 	.word	0x20080000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	2006dba8 	.word	0x2006dba8
 80013d4:	2006f6b8 	.word	0x2006f6b8

080013d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001434 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001400:	f7ff ffea 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001404:	480c      	ldr	r0, [pc, #48]	@ (8001438 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001406:	490d      	ldr	r1, [pc, #52]	@ (800143c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001408:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800140c:	e002      	b.n	8001414 <LoopCopyDataInit>

0800140e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800140e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001412:	3304      	adds	r3, #4

08001414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001418:	d3f9      	bcc.n	800140e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800141c:	4c0a      	ldr	r4, [pc, #40]	@ (8001448 <LoopFillZerobss+0x22>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001420:	e001      	b.n	8001426 <LoopFillZerobss>

08001422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001424:	3204      	adds	r2, #4

08001426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001428:	d3fb      	bcc.n	8001422 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800142a:	f009 fd85 	bl	800af38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800142e:	f7ff f87b 	bl	8000528 <main>
  bx  lr    
 8001432:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800143c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001440:	0800b0a8 	.word	0x0800b0a8
  ldr r2, =_sbss
 8001444:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8001448:	2006f6b8 	.word	0x2006f6b8

0800144c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC_IRQHandler>

0800144e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001452:	2003      	movs	r0, #3
 8001454:	f000 fd70 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001458:	2000      	movs	r0, #0
 800145a:	f000 f805 	bl	8001468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145e:	f7ff fc51 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_InitTick+0x54>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_InitTick+0x58>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4619      	mov	r1, r3
 800147a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800147e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001482:	fbb2 f3f3 	udiv	r3, r2, r3
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fd8b 	bl	8001fa2 <HAL_SYSTICK_Config>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e00e      	b.n	80014b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80a      	bhi.n	80014b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	2200      	movs	r2, #0
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f000 fd53 	bl	8001f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4a06      	ldr	r2, [pc, #24]	@ (80014c4 <HAL_InitTick+0x5c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000004 	.word	0x20000004
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	20000008 	.word	0x20000008

080014c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_IncTick+0x20>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x24>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <HAL_IncTick+0x24>)
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	2006dbac 	.word	0x2006dbac

080014f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b03      	ldr	r3, [pc, #12]	@ (8001504 <HAL_GetTick+0x14>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	2006dbac 	.word	0x2006dbac

08001508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff ffee 	bl	80014f0 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001520:	d005      	beq.n	800152e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	4b0a      	ldr	r3, [pc, #40]	@ (800154c <HAL_Delay+0x44>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152e:	bf00      	nop
 8001530:	f7ff ffde 	bl	80014f0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	429a      	cmp	r2, r3
 800153e:	d8f7      	bhi.n	8001530 <HAL_Delay+0x28>
  {
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000000c 	.word	0x2000000c

08001550 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e031      	b.n	80015ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fbec 	bl	8000d4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	2b00      	cmp	r3, #0
 800158c:	d116      	bne.n	80015bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <HAL_ADC_Init+0x84>)
 8001594:	4013      	ands	r3, r2
 8001596:	f043 0202 	orr.w	r2, r3, #2
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fa7e 	bl	8001aa0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	f023 0303 	bic.w	r3, r3, #3
 80015b2:	f043 0201 	orr.w	r2, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80015ba:	e001      	b.n	80015c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	ffffeefd 	.word	0xffffeefd

080015d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_Start_DMA+0x1e>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e0d4      	b.n	80017a0 <HAL_ADC_Start_DMA+0x1c8>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	d018      	beq.n	800163e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800161c:	4b62      	ldr	r3, [pc, #392]	@ (80017a8 <HAL_ADC_Start_DMA+0x1d0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a62      	ldr	r2, [pc, #392]	@ (80017ac <HAL_ADC_Start_DMA+0x1d4>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9a      	lsrs	r2, r3, #18
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001630:	e002      	b.n	8001638 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3b01      	subs	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f9      	bne.n	8001632 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	f040 809c 	bne.w	8001786 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001652:	4b57      	ldr	r3, [pc, #348]	@ (80017b0 <HAL_ADC_Start_DMA+0x1d8>)
 8001654:	4013      	ands	r3, r2
 8001656:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001674:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001688:	d106      	bne.n	8001698 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	f023 0206 	bic.w	r2, r3, #6
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	645a      	str	r2, [r3, #68]	@ 0x44
 8001696:	e002      	b.n	800169e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016aa:	4a42      	ldr	r2, [pc, #264]	@ (80017b4 <HAL_ADC_Start_DMA+0x1dc>)
 80016ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b2:	4a41      	ldr	r2, [pc, #260]	@ (80017b8 <HAL_ADC_Start_DMA+0x1e0>)
 80016b4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ba:	4a40      	ldr	r2, [pc, #256]	@ (80017bc <HAL_ADC_Start_DMA+0x1e4>)
 80016bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80016c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80016d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	334c      	adds	r3, #76	@ 0x4c
 80016f2:	4619      	mov	r1, r3
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f000 fd0e 	bl	8002118 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80016fc:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <HAL_ADC_Start_DMA+0x1e8>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 031f 	and.w	r3, r3, #31
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10f      	bne.n	8001728 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d143      	bne.n	800179e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	e03a      	b.n	800179e <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a25      	ldr	r2, [pc, #148]	@ (80017c4 <HAL_ADC_Start_DMA+0x1ec>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10e      	bne.n	8001750 <HAL_ADC_Start_DMA+0x178>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800174e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <HAL_ADC_Start_DMA+0x1e8>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	d120      	bne.n	800179e <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	@ (80017c8 <HAL_ADC_Start_DMA+0x1f0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d11b      	bne.n	800179e <HAL_ADC_Start_DMA+0x1c6>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d114      	bne.n	800179e <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	e00b      	b.n	800179e <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f043 0210 	orr.w	r2, r3, #16
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000004 	.word	0x20000004
 80017ac:	431bde83 	.word	0x431bde83
 80017b0:	fffff8fe 	.word	0xfffff8fe
 80017b4:	08001c95 	.word	0x08001c95
 80017b8:	08001d4f 	.word	0x08001d4f
 80017bc:	08001d6b 	.word	0x08001d6b
 80017c0:	40012300 	.word	0x40012300
 80017c4:	40012000 	.word	0x40012000
 80017c8:	40012200 	.word	0x40012200

080017cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1c>
 800180c:	2302      	movs	r3, #2
 800180e:	e136      	b.n	8001a7e <HAL_ADC_ConfigChannel+0x28a>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b09      	cmp	r3, #9
 800181e:	d93a      	bls.n	8001896 <HAL_ADC_ConfigChannel+0xa2>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001828:	d035      	beq.n	8001896 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68d9      	ldr	r1, [r3, #12]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	3b1e      	subs	r3, #30
 8001840:	2207      	movs	r2, #7
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	400a      	ands	r2, r1
 800184e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a8d      	ldr	r2, [pc, #564]	@ (8001a8c <HAL_ADC_ConfigChannel+0x298>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10a      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68d9      	ldr	r1, [r3, #12]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	061a      	lsls	r2, r3, #24
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800186e:	e035      	b.n	80018dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68d9      	ldr	r1, [r3, #12]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	4603      	mov	r3, r0
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4403      	add	r3, r0
 8001888:	3b1e      	subs	r3, #30
 800188a:	409a      	lsls	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001894:	e022      	b.n	80018dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6919      	ldr	r1, [r3, #16]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	2207      	movs	r2, #7
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43da      	mvns	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	400a      	ands	r2, r1
 80018b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6919      	ldr	r1, [r3, #16]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	4603      	mov	r3, r0
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4403      	add	r3, r0
 80018d2:	409a      	lsls	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b06      	cmp	r3, #6
 80018e2:	d824      	bhi.n	800192e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3b05      	subs	r3, #5
 80018f6:	221f      	movs	r2, #31
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43da      	mvns	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	400a      	ands	r2, r1
 8001904:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b29b      	uxth	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	3b05      	subs	r3, #5
 8001920:	fa00 f203 	lsl.w	r2, r0, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	635a      	str	r2, [r3, #52]	@ 0x34
 800192c:	e04c      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d824      	bhi.n	8001980 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b23      	subs	r3, #35	@ 0x23
 8001948:	221f      	movs	r2, #31
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	400a      	ands	r2, r1
 8001956:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	4618      	mov	r0, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	3b23      	subs	r3, #35	@ 0x23
 8001972:	fa00 f203 	lsl.w	r2, r0, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	631a      	str	r2, [r3, #48]	@ 0x30
 800197e:	e023      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b41      	subs	r3, #65	@ 0x41
 8001992:	221f      	movs	r2, #31
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43da      	mvns	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	400a      	ands	r2, r1
 80019a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	3b41      	subs	r3, #65	@ 0x41
 80019bc:	fa00 f203 	lsl.w	r2, r0, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a30      	ldr	r2, [pc, #192]	@ (8001a90 <HAL_ADC_ConfigChannel+0x29c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d10a      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x1f4>
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80019da:	d105      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80019dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001a94 <HAL_ADC_ConfigChannel+0x2a0>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001a94 <HAL_ADC_ConfigChannel+0x2a0>)
 80019e2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80019e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a28      	ldr	r2, [pc, #160]	@ (8001a90 <HAL_ADC_ConfigChannel+0x29c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10f      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x21e>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d10b      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80019fa:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <HAL_ADC_ConfigChannel+0x2a0>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4a25      	ldr	r2, [pc, #148]	@ (8001a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a00:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001a04:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001a06:	4b23      	ldr	r3, [pc, #140]	@ (8001a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a22      	ldr	r2, [pc, #136]	@ (8001a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a10:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1e      	ldr	r2, [pc, #120]	@ (8001a90 <HAL_ADC_ConfigChannel+0x29c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d12b      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x280>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1a      	ldr	r2, [pc, #104]	@ (8001a8c <HAL_ADC_ConfigChannel+0x298>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d003      	beq.n	8001a2e <HAL_ADC_ConfigChannel+0x23a>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b11      	cmp	r3, #17
 8001a2c:	d122      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a18      	ldr	r2, [pc, #96]	@ (8001a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a34:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001a38:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4a15      	ldr	r2, [pc, #84]	@ (8001a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a44:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a10      	ldr	r2, [pc, #64]	@ (8001a8c <HAL_ADC_ConfigChannel+0x298>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d111      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a11      	ldr	r2, [pc, #68]	@ (8001a9c <HAL_ADC_ConfigChannel+0x2a8>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	0c9a      	lsrs	r2, r3, #18
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a66:	e002      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f9      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	10000012 	.word	0x10000012
 8001a90:	40012000 	.word	0x40012000
 8001a94:	40012300 	.word	0x40012300
 8001a98:	20000004 	.word	0x20000004
 8001a9c:	431bde83 	.word	0x431bde83

08001aa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001aa8:	4b78      	ldr	r3, [pc, #480]	@ (8001c8c <ADC_Init+0x1ec>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4a77      	ldr	r2, [pc, #476]	@ (8001c8c <ADC_Init+0x1ec>)
 8001aae:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001ab2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ab4:	4b75      	ldr	r3, [pc, #468]	@ (8001c8c <ADC_Init+0x1ec>)
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4973      	ldr	r1, [pc, #460]	@ (8001c8c <ADC_Init+0x1ec>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	021a      	lsls	r2, r3, #8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001af4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6899      	ldr	r1, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2e:	4a58      	ldr	r2, [pc, #352]	@ (8001c90 <ADC_Init+0x1f0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d022      	beq.n	8001b7a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6899      	ldr	r1, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6899      	ldr	r1, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	e00f      	b.n	8001b9a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0202 	bic.w	r2, r2, #2
 8001ba8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6899      	ldr	r1, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	005a      	lsls	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d01b      	beq.n	8001c00 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001be6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6859      	ldr	r1, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	035a      	lsls	r2, r3, #13
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	e007      	b.n	8001c10 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	051a      	lsls	r2, r3, #20
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6899      	ldr	r1, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c52:	025a      	lsls	r2, r3, #9
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6899      	ldr	r1, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	029a      	lsls	r2, r3, #10
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	609a      	str	r2, [r3, #8]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40012300 	.word	0x40012300
 8001c90:	0f000001 	.word	0x0f000001

08001c94 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d13c      	bne.n	8001d28 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d12b      	bne.n	8001d20 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d127      	bne.n	8001d20 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d006      	beq.n	8001cec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d119      	bne.n	8001d20 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0220 	bic.w	r2, r2, #32
 8001cfa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d105      	bne.n	8001d20 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f7ff fb15 	bl	8001350 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d26:	e00e      	b.n	8001d46 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f7ff fd53 	bl	80017e0 <HAL_ADC_ErrorCallback>
}
 8001d3a:	e004      	b.n	8001d46 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	4798      	blx	r3
}
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff fd35 	bl	80017cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d76:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2240      	movs	r2, #64	@ 0x40
 8001d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f043 0204 	orr.w	r2, r3, #4
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff fd28 	bl	80017e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dc0:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00
 8001ddc:	05fa0000 	.word	0x05fa0000

08001de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db0b      	blt.n	8001e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4907      	ldr	r1, [pc, #28]	@ (8001e34 <__NVIC_EnableIRQ+0x38>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	@ (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	@ (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	@ 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	@ 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f04:	d301      	bcc.n	8001f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <SysTick_Config+0x40>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f12:	210f      	movs	r1, #15
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f7ff ff8e 	bl	8001e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <SysTick_Config+0x40>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f22:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <SysTick_Config+0x40>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	e000e010 	.word	0xe000e010

08001f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff29 	bl	8001d98 <__NVIC_SetPriorityGrouping>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff3e 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff8e 	bl	8001e8c <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5d 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff31 	bl	8001dfc <__NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffa2 	bl	8001ef4 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff fa92 	bl	80014f0 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e099      	b.n	800210c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff8:	e00f      	b.n	800201a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ffa:	f7ff fa79 	bl	80014f0 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b05      	cmp	r3, #5
 8002006:	d908      	bls.n	800201a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2203      	movs	r2, #3
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e078      	b.n	800210c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e8      	bne.n	8001ffa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4b38      	ldr	r3, [pc, #224]	@ (8002114 <HAL_DMA_Init+0x158>)
 8002034:	4013      	ands	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002046:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002070:	2b04      	cmp	r3, #4
 8002072:	d107      	bne.n	8002084 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	4313      	orrs	r3, r2
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f023 0307 	bic.w	r3, r3, #7
 800209a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d117      	bne.n	80020de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00e      	beq.n	80020de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fa77 	bl	80025b4 <DMA_CheckFifoParam>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2240      	movs	r2, #64	@ 0x40
 80020d0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020da:	2301      	movs	r3, #1
 80020dc:	e016      	b.n	800210c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fa2e 	bl	8002548 <DMA_CalcBaseAndBitshift>
 80020ec:	4603      	mov	r3, r0
 80020ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	223f      	movs	r2, #63	@ 0x3f
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	e010803f 	.word	0xe010803f

08002118 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_DMA_Start_IT+0x26>
 800213a:	2302      	movs	r3, #2
 800213c:	e048      	b.n	80021d0 <HAL_DMA_Start_IT+0xb8>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d137      	bne.n	80021c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2202      	movs	r2, #2
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f9c0 	bl	80024ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002170:	223f      	movs	r2, #63	@ 0x3f
 8002172:	409a      	lsls	r2, r3
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0216 	orr.w	r2, r2, #22
 8002186:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002196:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	d007      	beq.n	80021b0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0208 	orr.w	r2, r2, #8
 80021ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e005      	b.n	80021ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021ca:	2302      	movs	r3, #2
 80021cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80021e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002420 <HAL_DMA_IRQHandler+0x248>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a8e      	ldr	r2, [pc, #568]	@ (8002424 <HAL_DMA_IRQHandler+0x24c>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0a9b      	lsrs	r3, r3, #10
 80021f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002202:	2208      	movs	r2, #8
 8002204:	409a      	lsls	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01a      	beq.n	8002244 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0204 	bic.w	r2, r2, #4
 800222a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002230:	2208      	movs	r2, #8
 8002232:	409a      	lsls	r2, r3
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002248:	2201      	movs	r2, #1
 800224a:	409a      	lsls	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d012      	beq.n	800227a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00b      	beq.n	800227a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002266:	2201      	movs	r2, #1
 8002268:	409a      	lsls	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002272:	f043 0202 	orr.w	r2, r3, #2
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227e:	2204      	movs	r2, #4
 8002280:	409a      	lsls	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4013      	ands	r3, r2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d012      	beq.n	80022b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00b      	beq.n	80022b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229c:	2204      	movs	r2, #4
 800229e:	409a      	lsls	r2, r3
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a8:	f043 0204 	orr.w	r2, r3, #4
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b4:	2210      	movs	r2, #16
 80022b6:	409a      	lsls	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d043      	beq.n	8002348 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d03c      	beq.n	8002348 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d2:	2210      	movs	r2, #16
 80022d4:	409a      	lsls	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d018      	beq.n	800231a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d108      	bne.n	8002308 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d024      	beq.n	8002348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	4798      	blx	r3
 8002306:	e01f      	b.n	8002348 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01b      	beq.n	8002348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
 8002318:	e016      	b.n	8002348 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d107      	bne.n	8002338 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0208 	bic.w	r2, r2, #8
 8002336:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234c:	2220      	movs	r2, #32
 800234e:	409a      	lsls	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 808f 	beq.w	8002478 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8087 	beq.w	8002478 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	2220      	movs	r2, #32
 8002370:	409a      	lsls	r2, r3
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b05      	cmp	r3, #5
 8002380:	d136      	bne.n	80023f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0216 	bic.w	r2, r2, #22
 8002390:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <HAL_DMA_IRQHandler+0x1da>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0208 	bic.w	r2, r2, #8
 80023c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c6:	223f      	movs	r2, #63	@ 0x3f
 80023c8:	409a      	lsls	r2, r3
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d07e      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	4798      	blx	r3
        }
        return;
 80023ee:	e079      	b.n	80024e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d01d      	beq.n	800243a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10d      	bne.n	8002428 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002410:	2b00      	cmp	r3, #0
 8002412:	d031      	beq.n	8002478 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4798      	blx	r3
 800241c:	e02c      	b.n	8002478 <HAL_DMA_IRQHandler+0x2a0>
 800241e:	bf00      	nop
 8002420:	20000004 	.word	0x20000004
 8002424:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
 8002438:	e01e      	b.n	8002478 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10f      	bne.n	8002468 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0210 	bic.w	r2, r2, #16
 8002456:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247c:	2b00      	cmp	r3, #0
 800247e:	d032      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d022      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2205      	movs	r2, #5
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	3301      	adds	r3, #1
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d307      	bcc.n	80024c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f2      	bne.n	80024a4 <HAL_DMA_IRQHandler+0x2cc>
 80024be:	e000      	b.n	80024c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
 80024e2:	e000      	b.n	80024e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024e4:	bf00      	nop
    }
  }
}
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002508:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2b40      	cmp	r3, #64	@ 0x40
 8002518:	d108      	bne.n	800252c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800252a:	e007      	b.n	800253c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	60da      	str	r2, [r3, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	3b10      	subs	r3, #16
 8002558:	4a13      	ldr	r2, [pc, #76]	@ (80025a8 <DMA_CalcBaseAndBitshift+0x60>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002562:	4a12      	ldr	r2, [pc, #72]	@ (80025ac <DMA_CalcBaseAndBitshift+0x64>)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d908      	bls.n	8002588 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <DMA_CalcBaseAndBitshift+0x68>)
 800257e:	4013      	ands	r3, r2
 8002580:	1d1a      	adds	r2, r3, #4
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	659a      	str	r2, [r3, #88]	@ 0x58
 8002586:	e006      	b.n	8002596 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002590:	4013      	ands	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	aaaaaaab 	.word	0xaaaaaaab
 80025ac:	0800b090 	.word	0x0800b090
 80025b0:	fffffc00 	.word	0xfffffc00

080025b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d11f      	bne.n	800260e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d856      	bhi.n	8002682 <DMA_CheckFifoParam+0xce>
 80025d4:	a201      	add	r2, pc, #4	@ (adr r2, 80025dc <DMA_CheckFifoParam+0x28>)
 80025d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025da:	bf00      	nop
 80025dc:	080025ed 	.word	0x080025ed
 80025e0:	080025ff 	.word	0x080025ff
 80025e4:	080025ed 	.word	0x080025ed
 80025e8:	08002683 	.word	0x08002683
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d046      	beq.n	8002686 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fc:	e043      	b.n	8002686 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002602:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002606:	d140      	bne.n	800268a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260c:	e03d      	b.n	800268a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002616:	d121      	bne.n	800265c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d837      	bhi.n	800268e <DMA_CheckFifoParam+0xda>
 800261e:	a201      	add	r2, pc, #4	@ (adr r2, 8002624 <DMA_CheckFifoParam+0x70>)
 8002620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002624:	08002635 	.word	0x08002635
 8002628:	0800263b 	.word	0x0800263b
 800262c:	08002635 	.word	0x08002635
 8002630:	0800264d 	.word	0x0800264d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
      break;
 8002638:	e030      	b.n	800269c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d025      	beq.n	8002692 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264a:	e022      	b.n	8002692 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002654:	d11f      	bne.n	8002696 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800265a:	e01c      	b.n	8002696 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d903      	bls.n	800266a <DMA_CheckFifoParam+0xb6>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d003      	beq.n	8002670 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002668:	e018      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
      break;
 800266e:	e015      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002674:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00e      	beq.n	800269a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      break;
 8002680:	e00b      	b.n	800269a <DMA_CheckFifoParam+0xe6>
      break;
 8002682:	bf00      	nop
 8002684:	e00a      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      break;
 8002686:	bf00      	nop
 8002688:	e008      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      break;
 800268a:	bf00      	nop
 800268c:	e006      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      break;
 800268e:	bf00      	nop
 8002690:	e004      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      break;
 8002692:	bf00      	nop
 8002694:	e002      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      break;   
 8002696:	bf00      	nop
 8002698:	e000      	b.n	800269c <DMA_CheckFifoParam+0xe8>
      break;
 800269a:	bf00      	nop
    }
  } 
  
  return status; 
 800269c:	7bfb      	ldrb	r3, [r7, #15]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop

080026ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e086      	b.n	80027cc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d106      	bne.n	80026d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2223      	movs	r2, #35	@ 0x23
 80026cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7fe fbaf 	bl	8000e34 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	4b3f      	ldr	r3, [pc, #252]	@ (80027d4 <HAL_ETH_Init+0x128>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026da:	4a3e      	ldr	r2, [pc, #248]	@ (80027d4 <HAL_ETH_Init+0x128>)
 80026dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e2:	4b3c      	ldr	r3, [pc, #240]	@ (80027d4 <HAL_ETH_Init+0x128>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80026ee:	4b3a      	ldr	r3, [pc, #232]	@ (80027d8 <HAL_ETH_Init+0x12c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4a39      	ldr	r2, [pc, #228]	@ (80027d8 <HAL_ETH_Init+0x12c>)
 80026f4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80026f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80026fa:	4b37      	ldr	r3, [pc, #220]	@ (80027d8 <HAL_ETH_Init+0x12c>)
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	4935      	ldr	r1, [pc, #212]	@ (80027d8 <HAL_ETH_Init+0x12c>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002708:	4b33      	ldr	r3, [pc, #204]	@ (80027d8 <HAL_ETH_Init+0x12c>)
 800270a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002722:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002724:	f7fe fee4 	bl	80014f0 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800272a:	e011      	b.n	8002750 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800272c:	f7fe fee0 	bl	80014f0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800273a:	d909      	bls.n	8002750 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2204      	movs	r2, #4
 8002740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	22e0      	movs	r2, #224	@ 0xe0
 8002748:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e03d      	b.n	80027cc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1e4      	bne.n	800272c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f97a 	bl	8002a5c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fa25 	bl	8002bb8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fa7b 	bl	8002c6a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	461a      	mov	r2, r3
 800277a:	2100      	movs	r1, #0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f9e3 	bl	8002b48 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002790:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <HAL_ETH_Init+0x130>)
 80027a0:	430b      	orrs	r3, r1
 80027a2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80027b6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2210      	movs	r2, #16
 80027c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40013800 	.word	0x40013800
 80027dc:	00020060 	.word	0x00020060

080027e0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <ETH_SetMACConfig+0x164>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	7b9b      	ldrb	r3, [r3, #14]
 80027fe:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	7c12      	ldrb	r2, [r2, #16]
 8002804:	2a00      	cmp	r2, #0
 8002806:	d102      	bne.n	800280e <ETH_SetMACConfig+0x2e>
 8002808:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800280c:	e000      	b.n	8002810 <ETH_SetMACConfig+0x30>
 800280e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002810:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	7c52      	ldrb	r2, [r2, #17]
 8002816:	2a00      	cmp	r2, #0
 8002818:	d102      	bne.n	8002820 <ETH_SetMACConfig+0x40>
 800281a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800281e:	e000      	b.n	8002822 <ETH_SetMACConfig+0x42>
 8002820:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002822:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002828:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	7fdb      	ldrb	r3, [r3, #31]
 800282e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002830:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002836:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	7f92      	ldrb	r2, [r2, #30]
 800283c:	2a00      	cmp	r2, #0
 800283e:	d102      	bne.n	8002846 <ETH_SetMACConfig+0x66>
 8002840:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002844:	e000      	b.n	8002848 <ETH_SetMACConfig+0x68>
 8002846:	2200      	movs	r2, #0
                        macconf->Speed |
 8002848:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	7f1b      	ldrb	r3, [r3, #28]
 800284e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002850:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002856:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	791b      	ldrb	r3, [r3, #4]
 800285c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800285e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002866:	2a00      	cmp	r2, #0
 8002868:	d102      	bne.n	8002870 <ETH_SetMACConfig+0x90>
 800286a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800286e:	e000      	b.n	8002872 <ETH_SetMACConfig+0x92>
 8002870:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002872:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	7bdb      	ldrb	r3, [r3, #15]
 8002878:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800287a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002880:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002888:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800288a:	4313      	orrs	r3, r2
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028a2:	2001      	movs	r0, #1
 80028a4:	f7fe fe30 	bl	8001508 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80028be:	4013      	ands	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80028ce:	2a00      	cmp	r2, #0
 80028d0:	d101      	bne.n	80028d6 <ETH_SetMACConfig+0xf6>
 80028d2:	2280      	movs	r2, #128	@ 0x80
 80028d4:	e000      	b.n	80028d8 <ETH_SetMACConfig+0xf8>
 80028d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80028de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80028e6:	2a01      	cmp	r2, #1
 80028e8:	d101      	bne.n	80028ee <ETH_SetMACConfig+0x10e>
 80028ea:	2208      	movs	r2, #8
 80028ec:	e000      	b.n	80028f0 <ETH_SetMACConfig+0x110>
 80028ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80028f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80028f8:	2a01      	cmp	r2, #1
 80028fa:	d101      	bne.n	8002900 <ETH_SetMACConfig+0x120>
 80028fc:	2204      	movs	r2, #4
 80028fe:	e000      	b.n	8002902 <ETH_SetMACConfig+0x122>
 8002900:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002902:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800290a:	2a01      	cmp	r2, #1
 800290c:	d101      	bne.n	8002912 <ETH_SetMACConfig+0x132>
 800290e:	2202      	movs	r2, #2
 8002910:	e000      	b.n	8002914 <ETH_SetMACConfig+0x134>
 8002912:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002914:	4313      	orrs	r3, r2
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800292c:	2001      	movs	r0, #1
 800292e:	f7fe fdeb 	bl	8001508 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	619a      	str	r2, [r3, #24]
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	fd20810f 	.word	0xfd20810f

08002948 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4b3d      	ldr	r3, [pc, #244]	@ (8002a58 <ETH_SetDMAConfig+0x110>)
 8002962:	4013      	ands	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	7b1b      	ldrb	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <ETH_SetDMAConfig+0x2c>
 800296e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002972:	e000      	b.n	8002976 <ETH_SetDMAConfig+0x2e>
 8002974:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	7b5b      	ldrb	r3, [r3, #13]
 800297a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800297c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	7f52      	ldrb	r2, [r2, #29]
 8002982:	2a00      	cmp	r2, #0
 8002984:	d102      	bne.n	800298c <ETH_SetDMAConfig+0x44>
 8002986:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800298a:	e000      	b.n	800298e <ETH_SetDMAConfig+0x46>
 800298c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800298e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	7b9b      	ldrb	r3, [r3, #14]
 8002994:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002996:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800299c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	7f1b      	ldrb	r3, [r3, #28]
 80029a2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80029a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	7f9b      	ldrb	r3, [r3, #30]
 80029aa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029ac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029ba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029bc:	4313      	orrs	r3, r2
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029cc:	461a      	mov	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029de:	2001      	movs	r0, #1
 80029e0:	f7fe fd92 	bl	8001508 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ec:	461a      	mov	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	791b      	ldrb	r3, [r3, #4]
 80029f6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029fc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a02:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a08:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a10:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a12:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a18:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a1a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a20:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a2e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f7fe fd63 	bl	8001508 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	f8de3f23 	.word	0xf8de3f23

08002a5c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b0a6      	sub	sp, #152	@ 0x98
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a70:	2300      	movs	r3, #0
 8002a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ac4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002aca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ad6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ada:	4619      	mov	r1, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fe7f 	bl	80027e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b16:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b18:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b1c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b22:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b32:	f107 0308 	add.w	r3, r7, #8
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ff05 	bl	8002948 <ETH_SetDMAConfig>
}
 8002b3e:	bf00      	nop
 8002b40:	3798      	adds	r7, #152	@ 0x98
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3305      	adds	r3, #5
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	3204      	adds	r2, #4
 8002b60:	7812      	ldrb	r2, [r2, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <ETH_MACAddressConfig+0x68>)
 8002b6a:	4413      	add	r3, r2
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3303      	adds	r3, #3
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	061a      	lsls	r2, r3, #24
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3301      	adds	r3, #1
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	7812      	ldrb	r2, [r2, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <ETH_MACAddressConfig+0x6c>)
 8002b9a:	4413      	add	r3, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	6013      	str	r3, [r2, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40028040 	.word	0x40028040
 8002bb4:	40028044 	.word	0x40028044

08002bb8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e03e      	b.n	8002c44 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68d9      	ldr	r1, [r3, #12]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2200      	movs	r2, #0
 8002be2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2200      	movs	r2, #0
 8002bee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	3206      	adds	r2, #6
 8002bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d80c      	bhi.n	8002c28 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68d9      	ldr	r1, [r3, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	440b      	add	r3, r1
 8002c20:	461a      	mov	r2, r3
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	e004      	b.n	8002c32 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3301      	adds	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d9bd      	bls.n	8002bc6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c5c:	611a      	str	r2, [r3, #16]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	e048      	b.n	8002d0a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6919      	ldr	r1, [r3, #16]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	440b      	add	r3, r1
 8002c88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2200      	movs	r2, #0
 8002c94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2200      	movs	r2, #0
 8002cac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002cb4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	3212      	adds	r2, #18
 8002cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d80c      	bhi.n	8002cfa <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6919      	ldr	r1, [r3, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	60da      	str	r2, [r3, #12]
 8002cf8:	e004      	b.n	8002d04 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3301      	adds	r3, #1
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d9b3      	bls.n	8002c78 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d3a:	60da      	str	r2, [r3, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	@ 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e175      	b.n	8003054 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	f040 8164 	bne.w	800304e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d005      	beq.n	8002d9e <HAL_GPIO_Init+0x56>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d130      	bne.n	8002e00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2203      	movs	r2, #3
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 0201 	and.w	r2, r3, #1
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d017      	beq.n	8002e3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d123      	bne.n	8002e90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	08da      	lsrs	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3208      	adds	r2, #8
 8002e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	220f      	movs	r2, #15
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	08da      	lsrs	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3208      	adds	r2, #8
 8002e8a:	69b9      	ldr	r1, [r7, #24]
 8002e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0203 	and.w	r2, r3, #3
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80be 	beq.w	800304e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed2:	4b66      	ldr	r3, [pc, #408]	@ (800306c <HAL_GPIO_Init+0x324>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	4a65      	ldr	r2, [pc, #404]	@ (800306c <HAL_GPIO_Init+0x324>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ede:	4b63      	ldr	r3, [pc, #396]	@ (800306c <HAL_GPIO_Init+0x324>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002eea:	4a61      	ldr	r2, [pc, #388]	@ (8003070 <HAL_GPIO_Init+0x328>)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a58      	ldr	r2, [pc, #352]	@ (8003074 <HAL_GPIO_Init+0x32c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d037      	beq.n	8002f86 <HAL_GPIO_Init+0x23e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a57      	ldr	r2, [pc, #348]	@ (8003078 <HAL_GPIO_Init+0x330>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d031      	beq.n	8002f82 <HAL_GPIO_Init+0x23a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a56      	ldr	r2, [pc, #344]	@ (800307c <HAL_GPIO_Init+0x334>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d02b      	beq.n	8002f7e <HAL_GPIO_Init+0x236>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a55      	ldr	r2, [pc, #340]	@ (8003080 <HAL_GPIO_Init+0x338>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d025      	beq.n	8002f7a <HAL_GPIO_Init+0x232>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a54      	ldr	r2, [pc, #336]	@ (8003084 <HAL_GPIO_Init+0x33c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01f      	beq.n	8002f76 <HAL_GPIO_Init+0x22e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a53      	ldr	r2, [pc, #332]	@ (8003088 <HAL_GPIO_Init+0x340>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d019      	beq.n	8002f72 <HAL_GPIO_Init+0x22a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a52      	ldr	r2, [pc, #328]	@ (800308c <HAL_GPIO_Init+0x344>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <HAL_GPIO_Init+0x226>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a51      	ldr	r2, [pc, #324]	@ (8003090 <HAL_GPIO_Init+0x348>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00d      	beq.n	8002f6a <HAL_GPIO_Init+0x222>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a50      	ldr	r2, [pc, #320]	@ (8003094 <HAL_GPIO_Init+0x34c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <HAL_GPIO_Init+0x21e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4f      	ldr	r2, [pc, #316]	@ (8003098 <HAL_GPIO_Init+0x350>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_GPIO_Init+0x21a>
 8002f5e:	2309      	movs	r3, #9
 8002f60:	e012      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f62:	230a      	movs	r3, #10
 8002f64:	e010      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f66:	2308      	movs	r3, #8
 8002f68:	e00e      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f6a:	2307      	movs	r3, #7
 8002f6c:	e00c      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f6e:	2306      	movs	r3, #6
 8002f70:	e00a      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f72:	2305      	movs	r3, #5
 8002f74:	e008      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f76:	2304      	movs	r3, #4
 8002f78:	e006      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e004      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e002      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f86:	2300      	movs	r3, #0
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f002 0203 	and.w	r2, r2, #3
 8002f8e:	0092      	lsls	r2, r2, #2
 8002f90:	4093      	lsls	r3, r2
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f98:	4935      	ldr	r1, [pc, #212]	@ (8003070 <HAL_GPIO_Init+0x328>)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800309c <HAL_GPIO_Init+0x354>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fca:	4a34      	ldr	r2, [pc, #208]	@ (800309c <HAL_GPIO_Init+0x354>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd0:	4b32      	ldr	r3, [pc, #200]	@ (800309c <HAL_GPIO_Init+0x354>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ff4:	4a29      	ldr	r2, [pc, #164]	@ (800309c <HAL_GPIO_Init+0x354>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ffa:	4b28      	ldr	r3, [pc, #160]	@ (800309c <HAL_GPIO_Init+0x354>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800301e:	4a1f      	ldr	r2, [pc, #124]	@ (800309c <HAL_GPIO_Init+0x354>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003024:	4b1d      	ldr	r3, [pc, #116]	@ (800309c <HAL_GPIO_Init+0x354>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003048:	4a14      	ldr	r2, [pc, #80]	@ (800309c <HAL_GPIO_Init+0x354>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3301      	adds	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b0f      	cmp	r3, #15
 8003058:	f67f ae86 	bls.w	8002d68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3724      	adds	r7, #36	@ 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40013800 	.word	0x40013800
 8003074:	40020000 	.word	0x40020000
 8003078:	40020400 	.word	0x40020400
 800307c:	40020800 	.word	0x40020800
 8003080:	40020c00 	.word	0x40020c00
 8003084:	40021000 	.word	0x40021000
 8003088:	40021400 	.word	0x40021400
 800308c:	40021800 	.word	0x40021800
 8003090:	40021c00 	.word	0x40021c00
 8003094:	40022000 	.word	0x40022000
 8003098:	40022400 	.word	0x40022400
 800309c:	40013c00 	.word	0x40013c00

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030bc:	e003      	b.n	80030c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	041a      	lsls	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	619a      	str	r2, [r3, #24]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030e4:	887a      	ldrh	r2, [r7, #2]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4013      	ands	r3, r2
 80030ea:	041a      	lsls	r2, r3, #16
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	400b      	ands	r3, r1
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	619a      	str	r2, [r3, #24]
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b086      	sub	sp, #24
 800310a:	af02      	add	r7, sp, #8
 800310c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e108      	b.n	800332a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f007 faa6 	bl	800a684 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2203      	movs	r2, #3
 800313c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003146:	d102      	bne.n	800314e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f003 fe53 	bl	8006dfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	7c1a      	ldrb	r2, [r3, #16]
 8003160:	f88d 2000 	strb.w	r2, [sp]
 8003164:	3304      	adds	r3, #4
 8003166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003168:	f003 fd3c 	bl	8006be4 <USB_CoreInit>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d005      	beq.n	800317e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0d5      	b.n	800332a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f003 fe4b 	bl	8006e20 <USB_SetCurrentMode>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0c6      	b.n	800332a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
 80031a0:	e04a      	b.n	8003238 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	3315      	adds	r3, #21
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	3314      	adds	r3, #20
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	b298      	uxth	r0, r3
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	332e      	adds	r3, #46	@ 0x2e
 80031de:	4602      	mov	r2, r0
 80031e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031e2:	7bfa      	ldrb	r2, [r7, #15]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3318      	adds	r3, #24
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	331c      	adds	r3, #28
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	3320      	adds	r3, #32
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800321e:	7bfa      	ldrb	r2, [r7, #15]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3324      	adds	r3, #36	@ 0x24
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003232:	7bfb      	ldrb	r3, [r7, #15]
 8003234:	3301      	adds	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	791b      	ldrb	r3, [r3, #4]
 800323c:	7bfa      	ldrb	r2, [r7, #15]
 800323e:	429a      	cmp	r2, r3
 8003240:	d3af      	bcc.n	80031a2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
 8003246:	e044      	b.n	80032d2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003248:	7bfa      	ldrb	r2, [r7, #15]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800325e:	7bfa      	ldrb	r2, [r7, #15]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003270:	7bfa      	ldrb	r2, [r7, #15]
 8003272:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800328a:	7bfa      	ldrb	r2, [r7, #15]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032a0:	7bfa      	ldrb	r2, [r7, #15]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032b6:	7bfa      	ldrb	r2, [r7, #15]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	3301      	adds	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	791b      	ldrb	r3, [r3, #4]
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d3b5      	bcc.n	8003248 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7c1a      	ldrb	r2, [r3, #16]
 80032e4:	f88d 2000 	strb.w	r2, [sp]
 80032e8:	3304      	adds	r3, #4
 80032ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ec:	f003 fde4 	bl	8006eb8 <USB_DevInit>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e013      	b.n	800332a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	7b1b      	ldrb	r3, [r3, #12]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d102      	bne.n	800331e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f001 f959 	bl	80045d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f004 fe23 	bl	8007f6e <USB_DevDisconnect>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_PCD_Start+0x16>
 8003344:	2302      	movs	r3, #2
 8003346:	e012      	b.n	800336e <HAL_PCD_Start+0x3c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f003 fd41 	bl	8006ddc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f004 fde4 	bl	8007f2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003376:	b590      	push	{r4, r7, lr}
 8003378:	b08d      	sub	sp, #52	@ 0x34
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f004 fea2 	bl	80080d6 <USB_GetMode>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	f040 84b9 	bne.w	8003d0c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f004 fe06 	bl	8007fb0 <USB_ReadInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 84af 	beq.w	8003d0a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f004 fdf3 	bl	8007fb0 <USB_ReadInterrupts>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d107      	bne.n	80033e4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f002 0202 	and.w	r2, r2, #2
 80033e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f004 fde1 	bl	8007fb0 <USB_ReadInterrupts>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d161      	bne.n	80034bc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0210 	bic.w	r2, r2, #16
 8003406:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f003 020f 	and.w	r2, r3, #15
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	4413      	add	r3, r2
 8003424:	3304      	adds	r3, #4
 8003426:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	0c5b      	lsrs	r3, r3, #17
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	2b02      	cmp	r3, #2
 8003432:	d124      	bne.n	800347e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d035      	beq.n	80034ac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800344a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800344e:	b29b      	uxth	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	6a38      	ldr	r0, [r7, #32]
 8003454:	f004 fc18 	bl	8007c88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003464:	441a      	add	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003476:	441a      	add	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	615a      	str	r2, [r3, #20]
 800347c:	e016      	b.n	80034ac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	0c5b      	lsrs	r3, r3, #17
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	2b06      	cmp	r3, #6
 8003488:	d110      	bne.n	80034ac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003490:	2208      	movs	r2, #8
 8003492:	4619      	mov	r1, r3
 8003494:	6a38      	ldr	r0, [r7, #32]
 8003496:	f004 fbf7 	bl	8007c88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034a6:	441a      	add	r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0210 	orr.w	r2, r2, #16
 80034ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f004 fd75 	bl	8007fb0 <USB_ReadInterrupts>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034d0:	f040 80a7 	bne.w	8003622 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f004 fd7a 	bl	8007fd6 <USB_ReadDevAllOutEpInterrupt>
 80034e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80034e4:	e099      	b.n	800361a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 808e 	beq.w	800360e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f004 fd9e 	bl	800803e <USB_ReadDevOutEPInterrupt>
 8003502:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00c      	beq.n	8003528 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800351a:	461a      	mov	r2, r3
 800351c:	2301      	movs	r3, #1
 800351e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003520:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fece 	bl	80042c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00c      	beq.n	800354c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800353e:	461a      	mov	r2, r3
 8003540:	2308      	movs	r3, #8
 8003542:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003544:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 ffa4 	bl	8004494 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003562:	461a      	mov	r2, r3
 8003564:	2310      	movs	r3, #16
 8003566:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d030      	beq.n	80035d4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357a:	2b80      	cmp	r3, #128	@ 0x80
 800357c:	d109      	bne.n	8003592 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800358c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003590:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	3304      	adds	r3, #4
 80035a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	78db      	ldrb	r3, [r3, #3]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d108      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2200      	movs	r2, #0
 80035b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f007 f995 	bl	800a8ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ce:	461a      	mov	r2, r3
 80035d0:	2302      	movs	r3, #2
 80035d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ea:	461a      	mov	r2, r3
 80035ec:	2320      	movs	r3, #32
 80035ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003606:	461a      	mov	r2, r3
 8003608:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800360c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	3301      	adds	r3, #1
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800361a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	f47f af62 	bne.w	80034e6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f004 fcc2 	bl	8007fb0 <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003636:	f040 80db 	bne.w	80037f0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f004 fce3 	bl	800800a <USB_ReadDevAllInEpInterrupt>
 8003644:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800364a:	e0cd      	b.n	80037e8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80c2 	beq.w	80037dc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f004 fd09 	bl	800807a <USB_ReadDevInEPInterrupt>
 8003668:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d057      	beq.n	8003724 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	2201      	movs	r2, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	43db      	mvns	r3, r3
 800368e:	69f9      	ldr	r1, [r7, #28]
 8003690:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003694:	4013      	ands	r3, r2
 8003696:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036a4:	461a      	mov	r2, r3
 80036a6:	2301      	movs	r3, #1
 80036a8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	799b      	ldrb	r3, [r3, #6]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d132      	bne.n	8003718 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	3320      	adds	r3, #32
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4403      	add	r3, r0
 80036d2:	331c      	adds	r3, #28
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4419      	add	r1, r3
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4403      	add	r3, r0
 80036e6:	3320      	adds	r3, #32
 80036e8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d113      	bne.n	8003718 <HAL_PCD_IRQHandler+0x3a2>
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	3324      	adds	r3, #36	@ 0x24
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d108      	bne.n	8003718 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003710:	461a      	mov	r2, r3
 8003712:	2101      	movs	r1, #1
 8003714:	f004 fd12 	bl	800813c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4619      	mov	r1, r3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f007 f85f 	bl	800a7e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800373a:	461a      	mov	r2, r3
 800373c:	2308      	movs	r3, #8
 800373e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003756:	461a      	mov	r2, r3
 8003758:	2310      	movs	r3, #16
 800375a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003772:	461a      	mov	r2, r3
 8003774:	2340      	movs	r3, #64	@ 0x40
 8003776:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d023      	beq.n	80037ca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003782:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003784:	6a38      	ldr	r0, [r7, #32]
 8003786:	f003 fcf5 	bl	8007174 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800378a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	3310      	adds	r3, #16
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	3304      	adds	r3, #4
 800379c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	78db      	ldrb	r3, [r3, #3]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d108      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f007 f8ac 	bl	800a910 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037c4:	461a      	mov	r2, r3
 80037c6:	2302      	movs	r3, #2
 80037c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fce8 	bl	80041ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	3301      	adds	r3, #1
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f47f af2e 	bne.w	800364c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f004 fbdb 	bl	8007fb0 <USB_ReadInterrupts>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003800:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003804:	d122      	bne.n	800384c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003820:	2b01      	cmp	r3, #1
 8003822:	d108      	bne.n	8003836 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800382c:	2100      	movs	r1, #0
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f007 fa26 	bl	800ac80 <HAL_PCDEx_LPM_Callback>
 8003834:	e002      	b.n	800383c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f007 f84a 	bl	800a8d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800384a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f004 fbad 	bl	8007fb0 <USB_ReadInterrupts>
 8003856:	4603      	mov	r3, r0
 8003858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800385c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003860:	d112      	bne.n	8003888 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d102      	bne.n	8003878 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f007 f806 	bl	800a884 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003886:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f004 fb8f 	bl	8007fb0 <USB_ReadInterrupts>
 8003892:	4603      	mov	r3, r0
 8003894:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003898:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800389c:	d121      	bne.n	80038e2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80038ac:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	f003 020f 	and.w	r2, r3, #15
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80038d2:	2101      	movs	r1, #1
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f007 f9d3 	bl	800ac80 <HAL_PCDEx_LPM_Callback>
 80038da:	e002      	b.n	80038e2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f006 ffd1 	bl	800a884 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f004 fb62 	bl	8007fb0 <USB_ReadInterrupts>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f6:	f040 80b7 	bne.w	8003a68 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2110      	movs	r1, #16
 8003914:	4618      	mov	r0, r3
 8003916:	f003 fc2d 	bl	8007174 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800391a:	2300      	movs	r3, #0
 800391c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800391e:	e046      	b.n	80039ae <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800392c:	461a      	mov	r2, r3
 800392e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003932:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	440a      	add	r2, r1
 800394a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800394e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003952:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003960:	461a      	mov	r2, r3
 8003962:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003966:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003978:	0151      	lsls	r1, r2, #5
 800397a:	69fa      	ldr	r2, [r7, #28]
 800397c:	440a      	add	r2, r1
 800397e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003982:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003986:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003998:	0151      	lsls	r1, r2, #5
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	440a      	add	r2, r1
 800399e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80039a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039aa:	3301      	adds	r3, #1
 80039ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	791b      	ldrb	r3, [r3, #4]
 80039b2:	461a      	mov	r2, r3
 80039b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d3b2      	bcc.n	8003920 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039c8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80039cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	7bdb      	ldrb	r3, [r3, #15]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d016      	beq.n	8003a04 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039e6:	f043 030b 	orr.w	r3, r3, #11
 80039ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039fc:	f043 030b 	orr.w	r3, r3, #11
 8003a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a02:	e015      	b.n	8003a30 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a12:	4619      	mov	r1, r3
 8003a14:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a2a:	f043 030b 	orr.w	r3, r3, #11
 8003a2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a3e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003a42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a52:	461a      	mov	r2, r3
 8003a54:	f004 fb72 	bl	800813c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f004 fa9f 	bl	8007fb0 <USB_ReadInterrupts>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a7c:	d123      	bne.n	8003ac6 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f004 fb36 	bl	80080f4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f003 fbea 	bl	8007266 <USB_GetDevSpeed>
 8003a92:	4603      	mov	r3, r0
 8003a94:	461a      	mov	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681c      	ldr	r4, [r3, #0]
 8003a9e:	f001 fabb 	bl	8005018 <HAL_RCC_GetHCLKFreq>
 8003aa2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4620      	mov	r0, r4
 8003aac:	f003 f8f4 	bl	8006c98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f006 febe 	bl	800a832 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	695a      	ldr	r2, [r3, #20]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f004 fa70 	bl	8007fb0 <USB_ReadInterrupts>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d10a      	bne.n	8003af0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f006 fe9b 	bl	800a816 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f002 0208 	and.w	r2, r2, #8
 8003aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f004 fa5b 	bl	8007fb0 <USB_ReadInterrupts>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b00:	2b80      	cmp	r3, #128	@ 0x80
 8003b02:	d123      	bne.n	8003b4c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b10:	2301      	movs	r3, #1
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b14:	e014      	b.n	8003b40 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	4619      	mov	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fb08 	bl	800414a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	791b      	ldrb	r3, [r3, #4]
 8003b44:	461a      	mov	r2, r3
 8003b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d3e4      	bcc.n	8003b16 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f004 fa2d 	bl	8007fb0 <USB_ReadInterrupts>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b60:	d13c      	bne.n	8003bdc <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b62:	2301      	movs	r3, #1
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b66:	e02b      	b.n	8003bc0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	3318      	adds	r3, #24
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d115      	bne.n	8003bba <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	da12      	bge.n	8003bba <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3317      	adds	r3, #23
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fac8 	bl	800414a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	791b      	ldrb	r3, [r3, #4]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d3cd      	bcc.n	8003b68 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f004 f9e5 	bl	8007fb0 <USB_ReadInterrupts>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bf0:	d156      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf6:	e045      	b.n	8003c84 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d12e      	bne.n	8003c7e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c20:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	da2b      	bge.n	8003c7e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003c32:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d121      	bne.n	8003c7e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c7a:	6053      	str	r3, [r2, #4]
            break;
 8003c7c:	e008      	b.n	8003c90 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	3301      	adds	r3, #1
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	791b      	ldrb	r3, [r3, #4]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d3b3      	bcc.n	8003bf8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f004 f983 	bl	8007fb0 <USB_ReadInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb4:	d10a      	bne.n	8003ccc <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f006 fe3c 	bl	800a934 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 f96d 	bl	8007fb0 <USB_ReadInterrupts>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d115      	bne.n	8003d0c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f006 fe2c 	bl	800a950 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	e000      	b.n	8003d0c <HAL_PCD_IRQHandler+0x996>
      return;
 8003d0a:	bf00      	nop
    }
  }
}
 8003d0c:	3734      	adds	r7, #52	@ 0x34
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd90      	pop	{r4, r7, pc}

08003d12 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_PCD_SetAddress+0x1a>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e012      	b.n	8003d52 <HAL_PCD_SetAddress+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f004 f8cc 	bl	8007ee0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	4608      	mov	r0, r1
 8003d64:	4611      	mov	r1, r2
 8003d66:	461a      	mov	r2, r3
 8003d68:	4603      	mov	r3, r0
 8003d6a:	70fb      	strb	r3, [r7, #3]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	803b      	strh	r3, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	da0f      	bge.n	8003da0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	f003 020f 	and.w	r2, r3, #15
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	3310      	adds	r3, #16
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	4413      	add	r3, r2
 8003d94:	3304      	adds	r3, #4
 8003d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	705a      	strb	r2, [r3, #1]
 8003d9e:	e00f      	b.n	8003dc0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	f003 020f 	and.w	r2, r3, #15
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4413      	add	r3, r2
 8003db6:	3304      	adds	r3, #4
 8003db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dcc:	883a      	ldrh	r2, [r7, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	78ba      	ldrb	r2, [r7, #2]
 8003dd6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	785b      	ldrb	r3, [r3, #1]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d004      	beq.n	8003dea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003dea:	78bb      	ldrb	r3, [r7, #2]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d102      	bne.n	8003df6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_PCD_EP_Open+0xaa>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e00e      	b.n	8003e22 <HAL_PCD_EP_Open+0xc8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68f9      	ldr	r1, [r7, #12]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f003 fa4c 	bl	80072b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003e20:	7afb      	ldrb	r3, [r7, #11]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	da0f      	bge.n	8003e5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	f003 020f 	and.w	r2, r3, #15
 8003e44:	4613      	mov	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	3310      	adds	r3, #16
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	3304      	adds	r3, #4
 8003e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	705a      	strb	r2, [r3, #1]
 8003e5c:	e00f      	b.n	8003e7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 020f 	and.w	r2, r3, #15
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	3304      	adds	r3, #4
 8003e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	f003 030f 	and.w	r3, r3, #15
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_PCD_EP_Close+0x6e>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e00e      	b.n	8003eb6 <HAL_PCD_EP_Close+0x8c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68f9      	ldr	r1, [r7, #12]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f003 fa8a 	bl	80073c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b086      	sub	sp, #24
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	60f8      	str	r0, [r7, #12]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ece:	7afb      	ldrb	r3, [r7, #11]
 8003ed0:	f003 020f 	and.w	r2, r3, #15
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f00:	7afb      	ldrb	r3, [r7, #11]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	799b      	ldrb	r3, [r3, #6]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d102      	bne.n	8003f1a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	799b      	ldrb	r3, [r3, #6]
 8003f22:	461a      	mov	r2, r3
 8003f24:	6979      	ldr	r1, [r7, #20]
 8003f26:	f003 fb27 	bl	8007578 <USB_EPStartXfer>

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	f003 020f 	and.w	r2, r3, #15
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003f56:	681b      	ldr	r3, [r3, #0]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	603b      	str	r3, [r7, #0]
 8003f70:	460b      	mov	r3, r1
 8003f72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f74:	7afb      	ldrb	r3, [r7, #11]
 8003f76:	f003 020f 	and.w	r2, r3, #15
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	3310      	adds	r3, #16
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	3304      	adds	r3, #4
 8003f8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fa4:	7afb      	ldrb	r3, [r7, #11]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	799b      	ldrb	r3, [r3, #6]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d102      	bne.n	8003fbe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	799b      	ldrb	r3, [r3, #6]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6979      	ldr	r1, [r7, #20]
 8003fca:	f003 fad5 	bl	8007578 <USB_EPStartXfer>

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	7912      	ldrb	r2, [r2, #4]
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e04f      	b.n	8004096 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ff6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	da0f      	bge.n	800401e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ffe:	78fb      	ldrb	r3, [r7, #3]
 8004000:	f003 020f 	and.w	r2, r3, #15
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	3310      	adds	r3, #16
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	3304      	adds	r3, #4
 8004014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	705a      	strb	r2, [r3, #1]
 800401c:	e00d      	b.n	800403a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800401e:	78fa      	ldrb	r2, [r7, #3]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	3304      	adds	r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	b2da      	uxtb	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <HAL_PCD_EP_SetStall+0x82>
 8004056:	2302      	movs	r3, #2
 8004058:	e01d      	b.n	8004096 <HAL_PCD_EP_SetStall+0xbe>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68f9      	ldr	r1, [r7, #12]
 8004068:	4618      	mov	r0, r3
 800406a:	f003 fe65 	bl	8007d38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	2b00      	cmp	r3, #0
 8004076:	d109      	bne.n	800408c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	7999      	ldrb	r1, [r3, #6]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004086:	461a      	mov	r2, r3
 8004088:	f004 f858 	bl	800813c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	7912      	ldrb	r2, [r2, #4]
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e042      	b.n	8004142 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	da0f      	bge.n	80040e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	f003 020f 	and.w	r2, r3, #15
 80040ca:	4613      	mov	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	3310      	adds	r3, #16
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4413      	add	r3, r2
 80040d8:	3304      	adds	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	705a      	strb	r2, [r3, #1]
 80040e2:	e00f      	b.n	8004104 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 020f 	and.w	r2, r3, #15
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	3304      	adds	r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	b2da      	uxtb	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_PCD_EP_ClrStall+0x86>
 8004120:	2302      	movs	r3, #2
 8004122:	e00e      	b.n	8004142 <HAL_PCD_EP_ClrStall+0xa4>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68f9      	ldr	r1, [r7, #12]
 8004132:	4618      	mov	r0, r3
 8004134:	f003 fe6e 	bl	8007e14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	460b      	mov	r3, r1
 8004154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800415a:	2b00      	cmp	r3, #0
 800415c:	da0c      	bge.n	8004178 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	f003 020f 	and.w	r2, r3, #15
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	3310      	adds	r3, #16
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	3304      	adds	r3, #4
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	e00c      	b.n	8004192 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	f003 020f 	and.w	r2, r3, #15
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	3304      	adds	r3, #4
 8004190:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	4618      	mov	r0, r3
 800419a:	f003 fc8d 	bl	8007ab8 <USB_EPStopXfer>
 800419e:	4603      	mov	r3, r0
 80041a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041a2:	7afb      	ldrb	r3, [r7, #11]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	@ 0x28
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	3310      	adds	r3, #16
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4413      	add	r3, r2
 80041d0:	3304      	adds	r3, #4
 80041d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d901      	bls.n	80041e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e06b      	b.n	80042bc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d902      	bls.n	8004200 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	3303      	adds	r3, #3
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004208:	e02a      	b.n	8004260 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	69fa      	ldr	r2, [r7, #28]
 800421c:	429a      	cmp	r2, r3
 800421e:	d902      	bls.n	8004226 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	3303      	adds	r3, #3
 800422a:	089b      	lsrs	r3, r3, #2
 800422c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	68d9      	ldr	r1, [r3, #12]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	4603      	mov	r3, r0
 8004242:	6978      	ldr	r0, [r7, #20]
 8004244:	f003 fce2 	bl	8007c0c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	441a      	add	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	441a      	add	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	429a      	cmp	r2, r3
 8004274:	d809      	bhi.n	800428a <PCD_WriteEmptyTxFifo+0xde>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800427e:	429a      	cmp	r2, r3
 8004280:	d203      	bcs.n	800428a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1bf      	bne.n	800420a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	429a      	cmp	r2, r3
 8004294:	d811      	bhi.n	80042ba <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	2201      	movs	r2, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	43db      	mvns	r3, r3
 80042b0:	6939      	ldr	r1, [r7, #16]
 80042b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042b6:	4013      	ands	r3, r2
 80042b8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	333c      	adds	r3, #60	@ 0x3c
 80042dc:	3304      	adds	r3, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	799b      	ldrb	r3, [r3, #6]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d17b      	bne.n	80043f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d015      	beq.n	8004330 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	4a61      	ldr	r2, [pc, #388]	@ (800448c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	f240 80b9 	bls.w	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80b3 	beq.w	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004326:	461a      	mov	r2, r3
 8004328:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800432c:	6093      	str	r3, [r2, #8]
 800432e:	e0a7      	b.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004346:	461a      	mov	r2, r3
 8004348:	2320      	movs	r3, #32
 800434a:	6093      	str	r3, [r2, #8]
 800434c:	e098      	b.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004354:	2b00      	cmp	r3, #0
 8004356:	f040 8093 	bne.w	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	4a4b      	ldr	r2, [pc, #300]	@ (800448c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d90f      	bls.n	8004382 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004378:	461a      	mov	r2, r3
 800437a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800437e:	6093      	str	r3, [r2, #8]
 8004380:	e07e      	b.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	3304      	adds	r3, #4
 8004396:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1a      	ldr	r2, [r3, #32]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	0159      	lsls	r1, r3, #5
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	440b      	add	r3, r1
 80043a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ae:	1ad2      	subs	r2, r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d114      	bne.n	80043e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043cc:	461a      	mov	r2, r3
 80043ce:	2101      	movs	r1, #1
 80043d0:	f003 feb4 	bl	800813c <USB_EP0_OutStart>
 80043d4:	e006      	b.n	80043e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	441a      	add	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f006 f9de 	bl	800a7ac <HAL_PCD_DataOutStageCallback>
 80043f0:	e046      	b.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	4a26      	ldr	r2, [pc, #152]	@ (8004490 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d124      	bne.n	8004444 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00a      	beq.n	800441a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004410:	461a      	mov	r2, r3
 8004412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004416:	6093      	str	r3, [r2, #8]
 8004418:	e032      	b.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f003 0320 	and.w	r3, r3, #32
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004430:	461a      	mov	r2, r3
 8004432:	2320      	movs	r3, #32
 8004434:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	4619      	mov	r1, r3
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f006 f9b5 	bl	800a7ac <HAL_PCD_DataOutStageCallback>
 8004442:	e01d      	b.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d114      	bne.n	8004474 <PCD_EP_OutXfrComplete_int+0x1b0>
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d108      	bne.n	8004474 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800446c:	461a      	mov	r2, r3
 800446e:	2100      	movs	r1, #0
 8004470:	f003 fe64 	bl	800813c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	4619      	mov	r1, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f006 f996 	bl	800a7ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	4f54300a 	.word	0x4f54300a
 8004490:	4f54310a 	.word	0x4f54310a

08004494 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	333c      	adds	r3, #60	@ 0x3c
 80044ac:	3304      	adds	r3, #4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4a15      	ldr	r2, [pc, #84]	@ (800451c <PCD_EP_OutSetupPacket_int+0x88>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d90e      	bls.n	80044e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e0:	461a      	mov	r2, r3
 80044e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f006 f94d 	bl	800a788 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a0a      	ldr	r2, [pc, #40]	@ (800451c <PCD_EP_OutSetupPacket_int+0x88>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d90c      	bls.n	8004510 <PCD_EP_OutSetupPacket_int+0x7c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	799b      	ldrb	r3, [r3, #6]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d108      	bne.n	8004510 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004508:	461a      	mov	r2, r3
 800450a:	2101      	movs	r1, #1
 800450c:	f003 fe16 	bl	800813c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	4f54300a 	.word	0x4f54300a

08004520 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
 800452c:	4613      	mov	r3, r2
 800452e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d107      	bne.n	800454e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800453e:	883b      	ldrh	r3, [r7, #0]
 8004540:	0419      	lsls	r1, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	430a      	orrs	r2, r1
 800454a:	629a      	str	r2, [r3, #40]	@ 0x28
 800454c:	e028      	b.n	80045a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	4413      	add	r3, r2
 800455a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800455c:	2300      	movs	r3, #0
 800455e:	73fb      	strb	r3, [r7, #15]
 8004560:	e00d      	b.n	800457e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	7bfb      	ldrb	r3, [r7, #15]
 8004568:	3340      	adds	r3, #64	@ 0x40
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	4413      	add	r3, r2
 8004576:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	3301      	adds	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
 800457e:	7bfa      	ldrb	r2, [r7, #15]
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	3b01      	subs	r3, #1
 8004584:	429a      	cmp	r2, r3
 8004586:	d3ec      	bcc.n	8004562 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004588:	883b      	ldrh	r3, [r7, #0]
 800458a:	0418      	lsls	r0, r3, #16
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6819      	ldr	r1, [r3, #0]
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	3b01      	subs	r3, #1
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	4302      	orrs	r2, r0
 8004598:	3340      	adds	r3, #64	@ 0x40
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
 80045b6:	460b      	mov	r3, r1
 80045b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045fe:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <HAL_PCDEx_ActivateLPM+0x44>)
 8004600:	4313      	orrs	r3, r2
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	10000003 	.word	0x10000003

08004618 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a04      	ldr	r2, [pc, #16]	@ (8004634 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004626:	6013      	str	r3, [r2, #0]
}
 8004628:	bf00      	nop
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40007000 	.word	0x40007000

08004638 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800463e:	2300      	movs	r3, #0
 8004640:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004642:	4b23      	ldr	r3, [pc, #140]	@ (80046d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	4a22      	ldr	r2, [pc, #136]	@ (80046d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800464c:	6413      	str	r3, [r2, #64]	@ 0x40
 800464e:	4b20      	ldr	r3, [pc, #128]	@ (80046d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800465a:	4b1e      	ldr	r3, [pc, #120]	@ (80046d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1d      	ldr	r2, [pc, #116]	@ (80046d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004664:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004666:	f7fc ff43 	bl	80014f0 <HAL_GetTick>
 800466a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800466c:	e009      	b.n	8004682 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800466e:	f7fc ff3f 	bl	80014f0 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800467c:	d901      	bls.n	8004682 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e022      	b.n	80046c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004682:	4b14      	ldr	r3, [pc, #80]	@ (80046d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800468a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800468e:	d1ee      	bne.n	800466e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004690:	4b10      	ldr	r3, [pc, #64]	@ (80046d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a0f      	ldr	r2, [pc, #60]	@ (80046d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800469a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800469c:	f7fc ff28 	bl	80014f0 <HAL_GetTick>
 80046a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046a2:	e009      	b.n	80046b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046a4:	f7fc ff24 	bl	80014f0 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046b2:	d901      	bls.n	80046b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e007      	b.n	80046c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046b8:	4b06      	ldr	r3, [pc, #24]	@ (80046d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046c4:	d1ee      	bne.n	80046a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40007000 	.word	0x40007000

080046d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046e0:	2300      	movs	r3, #0
 80046e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e29b      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8087 	beq.w	800480a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046fc:	4b96      	ldr	r3, [pc, #600]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 030c 	and.w	r3, r3, #12
 8004704:	2b04      	cmp	r3, #4
 8004706:	d00c      	beq.n	8004722 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004708:	4b93      	ldr	r3, [pc, #588]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b08      	cmp	r3, #8
 8004712:	d112      	bne.n	800473a <HAL_RCC_OscConfig+0x62>
 8004714:	4b90      	ldr	r3, [pc, #576]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800471c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004720:	d10b      	bne.n	800473a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004722:	4b8d      	ldr	r3, [pc, #564]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d06c      	beq.n	8004808 <HAL_RCC_OscConfig+0x130>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d168      	bne.n	8004808 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e275      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004742:	d106      	bne.n	8004752 <HAL_RCC_OscConfig+0x7a>
 8004744:	4b84      	ldr	r3, [pc, #528]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a83      	ldr	r2, [pc, #524]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 800474a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	e02e      	b.n	80047b0 <HAL_RCC_OscConfig+0xd8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x9c>
 800475a:	4b7f      	ldr	r3, [pc, #508]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a7e      	ldr	r2, [pc, #504]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004760:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b7c      	ldr	r3, [pc, #496]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a7b      	ldr	r2, [pc, #492]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 800476c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e01d      	b.n	80047b0 <HAL_RCC_OscConfig+0xd8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800477c:	d10c      	bne.n	8004798 <HAL_RCC_OscConfig+0xc0>
 800477e:	4b76      	ldr	r3, [pc, #472]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a75      	ldr	r2, [pc, #468]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	4b73      	ldr	r3, [pc, #460]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a72      	ldr	r2, [pc, #456]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e00b      	b.n	80047b0 <HAL_RCC_OscConfig+0xd8>
 8004798:	4b6f      	ldr	r3, [pc, #444]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a6e      	ldr	r2, [pc, #440]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 800479e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a6b      	ldr	r2, [pc, #428]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 80047aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d013      	beq.n	80047e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fc fe9a 	bl	80014f0 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fc fe96 	bl	80014f0 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	@ 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e229      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	4b61      	ldr	r3, [pc, #388]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0xe8>
 80047de:	e014      	b.n	800480a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e0:	f7fc fe86 	bl	80014f0 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fc fe82 	bl	80014f0 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	@ 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e215      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fa:	4b57      	ldr	r3, [pc, #348]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0x110>
 8004806:	e000      	b.n	800480a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d069      	beq.n	80048ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004816:	4b50      	ldr	r3, [pc, #320]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004822:	4b4d      	ldr	r3, [pc, #308]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b08      	cmp	r3, #8
 800482c:	d11c      	bne.n	8004868 <HAL_RCC_OscConfig+0x190>
 800482e:	4b4a      	ldr	r3, [pc, #296]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d116      	bne.n	8004868 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483a:	4b47      	ldr	r3, [pc, #284]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_RCC_OscConfig+0x17a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d001      	beq.n	8004852 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e1e9      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004852:	4b41      	ldr	r3, [pc, #260]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	493d      	ldr	r1, [pc, #244]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004862:	4313      	orrs	r3, r2
 8004864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004866:	e040      	b.n	80048ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d023      	beq.n	80048b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004870:	4b39      	ldr	r3, [pc, #228]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a38      	ldr	r2, [pc, #224]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fc fe38 	bl	80014f0 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004884:	f7fc fe34 	bl	80014f0 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e1c7      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004896:	4b30      	ldr	r3, [pc, #192]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4929      	ldr	r1, [pc, #164]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]
 80048b6:	e018      	b.n	80048ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048b8:	4b27      	ldr	r3, [pc, #156]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a26      	ldr	r2, [pc, #152]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fc fe14 	bl	80014f0 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048cc:	f7fc fe10 	bl	80014f0 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e1a3      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048de:	4b1e      	ldr	r3, [pc, #120]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d038      	beq.n	8004968 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d019      	beq.n	8004932 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048fe:	4b16      	ldr	r3, [pc, #88]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004902:	4a15      	ldr	r2, [pc, #84]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490a:	f7fc fdf1 	bl	80014f0 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004910:	e008      	b.n	8004924 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004912:	f7fc fded 	bl	80014f0 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d901      	bls.n	8004924 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e180      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004924:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d0f0      	beq.n	8004912 <HAL_RCC_OscConfig+0x23a>
 8004930:	e01a      	b.n	8004968 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004932:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004936:	4a08      	ldr	r2, [pc, #32]	@ (8004958 <HAL_RCC_OscConfig+0x280>)
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800493e:	f7fc fdd7 	bl	80014f0 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004944:	e00a      	b.n	800495c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004946:	f7fc fdd3 	bl	80014f0 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d903      	bls.n	800495c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e166      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
 8004958:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800495c:	4b92      	ldr	r3, [pc, #584]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 800495e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1ee      	bne.n	8004946 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 80a4 	beq.w	8004abe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004976:	4b8c      	ldr	r3, [pc, #560]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10d      	bne.n	800499e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004982:	4b89      	ldr	r3, [pc, #548]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	4a88      	ldr	r2, [pc, #544]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800498c:	6413      	str	r3, [r2, #64]	@ 0x40
 800498e:	4b86      	ldr	r3, [pc, #536]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800499a:	2301      	movs	r3, #1
 800499c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800499e:	4b83      	ldr	r3, [pc, #524]	@ (8004bac <HAL_RCC_OscConfig+0x4d4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d118      	bne.n	80049dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80049aa:	4b80      	ldr	r3, [pc, #512]	@ (8004bac <HAL_RCC_OscConfig+0x4d4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a7f      	ldr	r2, [pc, #508]	@ (8004bac <HAL_RCC_OscConfig+0x4d4>)
 80049b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b6:	f7fc fd9b 	bl	80014f0 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049be:	f7fc fd97 	bl	80014f0 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b64      	cmp	r3, #100	@ 0x64
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e12a      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049d0:	4b76      	ldr	r3, [pc, #472]	@ (8004bac <HAL_RCC_OscConfig+0x4d4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d106      	bne.n	80049f2 <HAL_RCC_OscConfig+0x31a>
 80049e4:	4b70      	ldr	r3, [pc, #448]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e8:	4a6f      	ldr	r2, [pc, #444]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f0:	e02d      	b.n	8004a4e <HAL_RCC_OscConfig+0x376>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x33c>
 80049fa:	4b6b      	ldr	r3, [pc, #428]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fe:	4a6a      	ldr	r2, [pc, #424]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a06:	4b68      	ldr	r3, [pc, #416]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0a:	4a67      	ldr	r2, [pc, #412]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004a0c:	f023 0304 	bic.w	r3, r3, #4
 8004a10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a12:	e01c      	b.n	8004a4e <HAL_RCC_OscConfig+0x376>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b05      	cmp	r3, #5
 8004a1a:	d10c      	bne.n	8004a36 <HAL_RCC_OscConfig+0x35e>
 8004a1c:	4b62      	ldr	r3, [pc, #392]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a20:	4a61      	ldr	r2, [pc, #388]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004a22:	f043 0304 	orr.w	r3, r3, #4
 8004a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a28:	4b5f      	ldr	r3, [pc, #380]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a34:	e00b      	b.n	8004a4e <HAL_RCC_OscConfig+0x376>
 8004a36:	4b5c      	ldr	r3, [pc, #368]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3a:	4a5b      	ldr	r2, [pc, #364]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004a3c:	f023 0301 	bic.w	r3, r3, #1
 8004a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a42:	4b59      	ldr	r3, [pc, #356]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a46:	4a58      	ldr	r2, [pc, #352]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004a48:	f023 0304 	bic.w	r3, r3, #4
 8004a4c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d015      	beq.n	8004a82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a56:	f7fc fd4b 	bl	80014f0 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5c:	e00a      	b.n	8004a74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5e:	f7fc fd47 	bl	80014f0 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e0d8      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a74:	4b4c      	ldr	r3, [pc, #304]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0ee      	beq.n	8004a5e <HAL_RCC_OscConfig+0x386>
 8004a80:	e014      	b.n	8004aac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a82:	f7fc fd35 	bl	80014f0 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7fc fd31 	bl	80014f0 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e0c2      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa0:	4b41      	ldr	r3, [pc, #260]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1ee      	bne.n	8004a8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aac:	7dfb      	ldrb	r3, [r7, #23]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d105      	bne.n	8004abe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004ab8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004abc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 80ae 	beq.w	8004c24 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ac8:	4b37      	ldr	r3, [pc, #220]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d06d      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d14b      	bne.n	8004b74 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004adc:	4b32      	ldr	r3, [pc, #200]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a31      	ldr	r2, [pc, #196]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fc fd02 	bl	80014f0 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fc fcfe 	bl	80014f0 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e091      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b02:	4b29      	ldr	r3, [pc, #164]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	019b      	lsls	r3, r3, #6
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b24:	085b      	lsrs	r3, r3, #1
 8004b26:	3b01      	subs	r3, #1
 8004b28:	041b      	lsls	r3, r3, #16
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	061b      	lsls	r3, r3, #24
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b38:	071b      	lsls	r3, r3, #28
 8004b3a:	491b      	ldr	r1, [pc, #108]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b40:	4b19      	ldr	r3, [pc, #100]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a18      	ldr	r2, [pc, #96]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004b46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fc fcd0 	bl	80014f0 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fc fccc 	bl	80014f0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e05f      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b66:	4b10      	ldr	r3, [pc, #64]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x47c>
 8004b72:	e057      	b.n	8004c24 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b74:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a0b      	ldr	r2, [pc, #44]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fc fcb6 	bl	80014f0 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b88:	f7fc fcb2 	bl	80014f0 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e045      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b9a:	4b03      	ldr	r3, [pc, #12]	@ (8004ba8 <HAL_RCC_OscConfig+0x4d0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x4b0>
 8004ba6:	e03d      	b.n	8004c24 <HAL_RCC_OscConfig+0x54c>
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004c30 <HAL_RCC_OscConfig+0x558>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d030      	beq.n	8004c20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d129      	bne.n	8004c20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d122      	bne.n	8004c20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004be0:	4013      	ands	r3, r2
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004be6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d119      	bne.n	8004c20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	085b      	lsrs	r3, r3, #1
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d10f      	bne.n	8004c20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d107      	bne.n	8004c20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800

08004c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0d0      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 030f 	and.w	r3, r3, #15
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d910      	bls.n	8004c7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c5a:	4b67      	ldr	r3, [pc, #412]	@ (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f023 020f 	bic.w	r2, r3, #15
 8004c62:	4965      	ldr	r1, [pc, #404]	@ (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6a:	4b63      	ldr	r3, [pc, #396]	@ (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0b8      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d020      	beq.n	8004cca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c94:	4b59      	ldr	r3, [pc, #356]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	4a58      	ldr	r2, [pc, #352]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004c9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cac:	4b53      	ldr	r3, [pc, #332]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4a52      	ldr	r2, [pc, #328]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004cb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004cb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb8:	4b50      	ldr	r3, [pc, #320]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	494d      	ldr	r1, [pc, #308]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d040      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d107      	bne.n	8004cee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cde:	4b47      	ldr	r3, [pc, #284]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d115      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e07f      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d107      	bne.n	8004d06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf6:	4b41      	ldr	r3, [pc, #260]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d109      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e073      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d06:	4b3d      	ldr	r3, [pc, #244]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e06b      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d16:	4b39      	ldr	r3, [pc, #228]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f023 0203 	bic.w	r2, r3, #3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	4936      	ldr	r1, [pc, #216]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d28:	f7fc fbe2 	bl	80014f0 <HAL_GetTick>
 8004d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2e:	e00a      	b.n	8004d46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d30:	f7fc fbde 	bl	80014f0 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e053      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d46:	4b2d      	ldr	r3, [pc, #180]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 020c 	and.w	r2, r3, #12
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d1eb      	bne.n	8004d30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d58:	4b27      	ldr	r3, [pc, #156]	@ (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d210      	bcs.n	8004d88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d66:	4b24      	ldr	r3, [pc, #144]	@ (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f023 020f 	bic.w	r2, r3, #15
 8004d6e:	4922      	ldr	r1, [pc, #136]	@ (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d76:	4b20      	ldr	r3, [pc, #128]	@ (8004df8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e032      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d94:	4b19      	ldr	r3, [pc, #100]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	4916      	ldr	r1, [pc, #88]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004db2:	4b12      	ldr	r3, [pc, #72]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	490e      	ldr	r1, [pc, #56]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dc6:	f000 f821 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <HAL_RCC_ClockConfig+0x1c8>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	490a      	ldr	r1, [pc, #40]	@ (8004e00 <HAL_RCC_ClockConfig+0x1cc>)
 8004dd8:	5ccb      	ldrb	r3, [r1, r3]
 8004dda:	fa22 f303 	lsr.w	r3, r2, r3
 8004dde:	4a09      	ldr	r2, [pc, #36]	@ (8004e04 <HAL_RCC_ClockConfig+0x1d0>)
 8004de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004de2:	4b09      	ldr	r3, [pc, #36]	@ (8004e08 <HAL_RCC_ClockConfig+0x1d4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fc fb3e 	bl	8001468 <HAL_InitTick>

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40023c00 	.word	0x40023c00
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	0800b078 	.word	0x0800b078
 8004e04:	20000004 	.word	0x20000004
 8004e08:	20000008 	.word	0x20000008

08004e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e10:	b094      	sub	sp, #80	@ 0x50
 8004e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e18:	2300      	movs	r3, #0
 8004e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e24:	4b79      	ldr	r3, [pc, #484]	@ (800500c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 030c 	and.w	r3, r3, #12
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d00d      	beq.n	8004e4c <HAL_RCC_GetSysClockFreq+0x40>
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	f200 80e1 	bhi.w	8004ff8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_RCC_GetSysClockFreq+0x34>
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e3e:	e0db      	b.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e40:	4b73      	ldr	r3, [pc, #460]	@ (8005010 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e44:	e0db      	b.n	8004ffe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e46:	4b73      	ldr	r3, [pc, #460]	@ (8005014 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e4a:	e0d8      	b.n	8004ffe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e4c:	4b6f      	ldr	r3, [pc, #444]	@ (800500c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e56:	4b6d      	ldr	r3, [pc, #436]	@ (800500c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d063      	beq.n	8004f2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e62:	4b6a      	ldr	r3, [pc, #424]	@ (800500c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	099b      	lsrs	r3, r3, #6
 8004e68:	2200      	movs	r2, #0
 8004e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e74:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e76:	2300      	movs	r3, #0
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e7e:	4622      	mov	r2, r4
 8004e80:	462b      	mov	r3, r5
 8004e82:	f04f 0000 	mov.w	r0, #0
 8004e86:	f04f 0100 	mov.w	r1, #0
 8004e8a:	0159      	lsls	r1, r3, #5
 8004e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e90:	0150      	lsls	r0, r2, #5
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4621      	mov	r1, r4
 8004e98:	1a51      	subs	r1, r2, r1
 8004e9a:	6139      	str	r1, [r7, #16]
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004eb0:	4659      	mov	r1, fp
 8004eb2:	018b      	lsls	r3, r1, #6
 8004eb4:	4651      	mov	r1, sl
 8004eb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004eba:	4651      	mov	r1, sl
 8004ebc:	018a      	lsls	r2, r1, #6
 8004ebe:	4651      	mov	r1, sl
 8004ec0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ec4:	4659      	mov	r1, fp
 8004ec6:	eb63 0901 	sbc.w	r9, r3, r1
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	f04f 0300 	mov.w	r3, #0
 8004ed2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ed6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ede:	4690      	mov	r8, r2
 8004ee0:	4699      	mov	r9, r3
 8004ee2:	4623      	mov	r3, r4
 8004ee4:	eb18 0303 	adds.w	r3, r8, r3
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	462b      	mov	r3, r5
 8004eec:	eb49 0303 	adc.w	r3, r9, r3
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004efe:	4629      	mov	r1, r5
 8004f00:	024b      	lsls	r3, r1, #9
 8004f02:	4621      	mov	r1, r4
 8004f04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f08:	4621      	mov	r1, r4
 8004f0a:	024a      	lsls	r2, r1, #9
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f12:	2200      	movs	r2, #0
 8004f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f1c:	f7fb f98c 	bl	8000238 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4613      	mov	r3, r2
 8004f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f28:	e058      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f2a:	4b38      	ldr	r3, [pc, #224]	@ (800500c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	099b      	lsrs	r3, r3, #6
 8004f30:	2200      	movs	r2, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	4611      	mov	r1, r2
 8004f36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f3a:	623b      	str	r3, [r7, #32]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f44:	4642      	mov	r2, r8
 8004f46:	464b      	mov	r3, r9
 8004f48:	f04f 0000 	mov.w	r0, #0
 8004f4c:	f04f 0100 	mov.w	r1, #0
 8004f50:	0159      	lsls	r1, r3, #5
 8004f52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f56:	0150      	lsls	r0, r2, #5
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f62:	4649      	mov	r1, r9
 8004f64:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f7c:	ebb2 040a 	subs.w	r4, r2, sl
 8004f80:	eb63 050b 	sbc.w	r5, r3, fp
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	00eb      	lsls	r3, r5, #3
 8004f8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f92:	00e2      	lsls	r2, r4, #3
 8004f94:	4614      	mov	r4, r2
 8004f96:	461d      	mov	r5, r3
 8004f98:	4643      	mov	r3, r8
 8004f9a:	18e3      	adds	r3, r4, r3
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	eb45 0303 	adc.w	r3, r5, r3
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	028b      	lsls	r3, r1, #10
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	028a      	lsls	r2, r1, #10
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	61fa      	str	r2, [r7, #28]
 8004fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fd0:	f7fb f932 	bl	8000238 <__aeabi_uldivmod>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4613      	mov	r3, r2
 8004fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800500c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	0c1b      	lsrs	r3, r3, #16
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004fec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ff6:	e002      	b.n	8004ffe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ff8:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005000:	4618      	mov	r0, r3
 8005002:	3750      	adds	r7, #80	@ 0x50
 8005004:	46bd      	mov	sp, r7
 8005006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800500a:	bf00      	nop
 800500c:	40023800 	.word	0x40023800
 8005010:	00f42400 	.word	0x00f42400
 8005014:	007a1200 	.word	0x007a1200

08005018 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800501c:	4b03      	ldr	r3, [pc, #12]	@ (800502c <HAL_RCC_GetHCLKFreq+0x14>)
 800501e:	681b      	ldr	r3, [r3, #0]
}
 8005020:	4618      	mov	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	20000004 	.word	0x20000004

08005030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005034:	f7ff fff0 	bl	8005018 <HAL_RCC_GetHCLKFreq>
 8005038:	4602      	mov	r2, r0
 800503a:	4b05      	ldr	r3, [pc, #20]	@ (8005050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	0a9b      	lsrs	r3, r3, #10
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	4903      	ldr	r1, [pc, #12]	@ (8005054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005046:	5ccb      	ldrb	r3, [r1, r3]
 8005048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800504c:	4618      	mov	r0, r3
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40023800 	.word	0x40023800
 8005054:	0800b088 	.word	0x0800b088

08005058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800505c:	f7ff ffdc 	bl	8005018 <HAL_RCC_GetHCLKFreq>
 8005060:	4602      	mov	r2, r0
 8005062:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	0b5b      	lsrs	r3, r3, #13
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	4903      	ldr	r1, [pc, #12]	@ (800507c <HAL_RCC_GetPCLK2Freq+0x24>)
 800506e:	5ccb      	ldrb	r3, [r1, r3]
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005074:	4618      	mov	r0, r3
 8005076:	bd80      	pop	{r7, pc}
 8005078:	40023800 	.word	0x40023800
 800507c:	0800b088 	.word	0x0800b088

08005080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d012      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050a8:	4b69      	ldr	r3, [pc, #420]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	4a68      	ldr	r2, [pc, #416]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80050b2:	6093      	str	r3, [r2, #8]
 80050b4:	4b66      	ldr	r3, [pc, #408]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050bc:	4964      	ldr	r1, [pc, #400]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80050ca:	2301      	movs	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d017      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050da:	4b5d      	ldr	r3, [pc, #372]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e8:	4959      	ldr	r1, [pc, #356]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050f8:	d101      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80050fa:	2301      	movs	r3, #1
 80050fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005106:	2301      	movs	r3, #1
 8005108:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d017      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005116:	4b4e      	ldr	r3, [pc, #312]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005118:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800511c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	494a      	ldr	r1, [pc, #296]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005130:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005134:	d101      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005136:	2301      	movs	r3, #1
 8005138:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005142:	2301      	movs	r3, #1
 8005144:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005152:	2301      	movs	r3, #1
 8005154:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 808b 	beq.w	800527a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005164:	4b3a      	ldr	r3, [pc, #232]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005168:	4a39      	ldr	r2, [pc, #228]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800516e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005170:	4b37      	ldr	r3, [pc, #220]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800517c:	4b35      	ldr	r3, [pc, #212]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a34      	ldr	r2, [pc, #208]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005188:	f7fc f9b2 	bl	80014f0 <HAL_GetTick>
 800518c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800518e:	e008      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005190:	f7fc f9ae 	bl	80014f0 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b64      	cmp	r3, #100	@ 0x64
 800519c:	d901      	bls.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e38f      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051ae:	4b28      	ldr	r3, [pc, #160]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d035      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d02e      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051cc:	4b20      	ldr	r3, [pc, #128]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051da:	4a1d      	ldr	r2, [pc, #116]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80051ee:	4a18      	ldr	r2, [pc, #96]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051f4:	4b16      	ldr	r3, [pc, #88]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d114      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fc f976 	bl	80014f0 <HAL_GetTick>
 8005204:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005206:	e00a      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005208:	f7fc f972 	bl	80014f0 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e351      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521e:	4b0c      	ldr	r3, [pc, #48]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0ee      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005236:	d111      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005238:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005244:	4b04      	ldr	r3, [pc, #16]	@ (8005258 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005246:	400b      	ands	r3, r1
 8005248:	4901      	ldr	r1, [pc, #4]	@ (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
 800524e:	e00b      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005250:	40023800 	.word	0x40023800
 8005254:	40007000 	.word	0x40007000
 8005258:	0ffffcff 	.word	0x0ffffcff
 800525c:	4bac      	ldr	r3, [pc, #688]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	4aab      	ldr	r2, [pc, #684]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005262:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005266:	6093      	str	r3, [r2, #8]
 8005268:	4ba9      	ldr	r3, [pc, #676]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005274:	49a6      	ldr	r1, [pc, #664]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005276:	4313      	orrs	r3, r2
 8005278:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	d010      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005286:	4ba2      	ldr	r3, [pc, #648]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800528c:	4aa0      	ldr	r2, [pc, #640]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800528e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005292:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005296:	4b9e      	ldr	r3, [pc, #632]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005298:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a0:	499b      	ldr	r1, [pc, #620]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00a      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052b4:	4b96      	ldr	r3, [pc, #600]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052c2:	4993      	ldr	r1, [pc, #588]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052d6:	4b8e      	ldr	r3, [pc, #568]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052e4:	498a      	ldr	r1, [pc, #552]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052f8:	4b85      	ldr	r3, [pc, #532]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005306:	4982      	ldr	r1, [pc, #520]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800531a:	4b7d      	ldr	r3, [pc, #500]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005320:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	4979      	ldr	r1, [pc, #484]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800533c:	4b74      	ldr	r3, [pc, #464]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005342:	f023 0203 	bic.w	r2, r3, #3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	4971      	ldr	r1, [pc, #452]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800535e:	4b6c      	ldr	r3, [pc, #432]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005364:	f023 020c 	bic.w	r2, r3, #12
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800536c:	4968      	ldr	r1, [pc, #416]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005380:	4b63      	ldr	r3, [pc, #396]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005386:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800538e:	4960      	ldr	r1, [pc, #384]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b0:	4957      	ldr	r1, [pc, #348]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053c4:	4b52      	ldr	r3, [pc, #328]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d2:	494f      	ldr	r1, [pc, #316]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80053e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f4:	4946      	ldr	r1, [pc, #280]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005408:	4b41      	ldr	r3, [pc, #260]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005416:	493e      	ldr	r1, [pc, #248]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800542a:	4b39      	ldr	r3, [pc, #228]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005430:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005438:	4935      	ldr	r1, [pc, #212]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800544c:	4b30      	ldr	r3, [pc, #192]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005452:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800545a:	492d      	ldr	r1, [pc, #180]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d011      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800546e:	4b28      	ldr	r3, [pc, #160]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005474:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800547c:	4924      	ldr	r1, [pc, #144]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005488:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800548c:	d101      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800548e:	2301      	movs	r3, #1
 8005490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800549e:	2301      	movs	r3, #1
 80054a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ae:	4b18      	ldr	r3, [pc, #96]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054bc:	4914      	ldr	r1, [pc, #80]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054e0:	490b      	ldr	r1, [pc, #44]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00f      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80054f4:	4b06      	ldr	r3, [pc, #24]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054fa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005504:	4902      	ldr	r1, [pc, #8]	@ (8005510 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800550c:	e002      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800550e:	bf00      	nop
 8005510:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005520:	4b8a      	ldr	r3, [pc, #552]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005522:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005526:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005530:	4986      	ldr	r1, [pc, #536]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00b      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005544:	4b81      	ldr	r3, [pc, #516]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800554a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005554:	497d      	ldr	r1, [pc, #500]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005556:	4313      	orrs	r3, r2
 8005558:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d006      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80d6 	beq.w	800571c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005570:	4b76      	ldr	r3, [pc, #472]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a75      	ldr	r2, [pc, #468]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005576:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800557a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800557c:	f7fb ffb8 	bl	80014f0 <HAL_GetTick>
 8005580:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005582:	e008      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005584:	f7fb ffb4 	bl	80014f0 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b64      	cmp	r3, #100	@ 0x64
 8005590:	d901      	bls.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e195      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005596:	4b6d      	ldr	r3, [pc, #436]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d021      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d11d      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055b6:	4b65      	ldr	r3, [pc, #404]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055bc:	0c1b      	lsrs	r3, r3, #16
 80055be:	f003 0303 	and.w	r3, r3, #3
 80055c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055c4:	4b61      	ldr	r3, [pc, #388]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ca:	0e1b      	lsrs	r3, r3, #24
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	019a      	lsls	r2, r3, #6
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	041b      	lsls	r3, r3, #16
 80055dc:	431a      	orrs	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	061b      	lsls	r3, r3, #24
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	071b      	lsls	r3, r3, #28
 80055ea:	4958      	ldr	r1, [pc, #352]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005606:	d00a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005610:	2b00      	cmp	r3, #0
 8005612:	d02e      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005618:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800561c:	d129      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800561e:	4b4b      	ldr	r3, [pc, #300]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800562c:	4b47      	ldr	r3, [pc, #284]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800562e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005632:	0f1b      	lsrs	r3, r3, #28
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	019a      	lsls	r2, r3, #6
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	041b      	lsls	r3, r3, #16
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	061b      	lsls	r3, r3, #24
 800564c:	431a      	orrs	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	071b      	lsls	r3, r3, #28
 8005652:	493e      	ldr	r1, [pc, #248]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800565a:	4b3c      	ldr	r3, [pc, #240]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800565c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005660:	f023 021f 	bic.w	r2, r3, #31
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	3b01      	subs	r3, #1
 800566a:	4938      	ldr	r1, [pc, #224]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01d      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800567e:	4b33      	ldr	r3, [pc, #204]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005684:	0e1b      	lsrs	r3, r3, #24
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800568c:	4b2f      	ldr	r3, [pc, #188]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800568e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005692:	0f1b      	lsrs	r3, r3, #28
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	019a      	lsls	r2, r3, #6
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	041b      	lsls	r3, r3, #16
 80056a6:	431a      	orrs	r2, r3
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	061b      	lsls	r3, r3, #24
 80056ac:	431a      	orrs	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	071b      	lsls	r3, r3, #28
 80056b2:	4926      	ldr	r1, [pc, #152]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d011      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	019a      	lsls	r2, r3, #6
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	041b      	lsls	r3, r3, #16
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	061b      	lsls	r3, r3, #24
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	071b      	lsls	r3, r3, #28
 80056e2:	491a      	ldr	r1, [pc, #104]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056ea:	4b18      	ldr	r3, [pc, #96]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a17      	ldr	r2, [pc, #92]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f6:	f7fb fefb 	bl	80014f0 <HAL_GetTick>
 80056fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056fc:	e008      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056fe:	f7fb fef7 	bl	80014f0 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b64      	cmp	r3, #100	@ 0x64
 800570a:	d901      	bls.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e0d8      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005710:	4b0e      	ldr	r3, [pc, #56]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0f0      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	2b01      	cmp	r3, #1
 8005720:	f040 80ce 	bne.w	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005724:	4b09      	ldr	r3, [pc, #36]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a08      	ldr	r2, [pc, #32]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800572a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800572e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005730:	f7fb fede 	bl	80014f0 <HAL_GetTick>
 8005734:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005736:	e00b      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005738:	f7fb feda 	bl	80014f0 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b64      	cmp	r3, #100	@ 0x64
 8005744:	d904      	bls.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e0bb      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005750:	4b5e      	ldr	r3, [pc, #376]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005758:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800575c:	d0ec      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800577a:	2b00      	cmp	r3, #0
 800577c:	d02e      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d12a      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005786:	4b51      	ldr	r3, [pc, #324]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578c:	0c1b      	lsrs	r3, r3, #16
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005794:	4b4d      	ldr	r3, [pc, #308]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579a:	0f1b      	lsrs	r3, r3, #28
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	019a      	lsls	r2, r3, #6
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	041b      	lsls	r3, r3, #16
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	061b      	lsls	r3, r3, #24
 80057b4:	431a      	orrs	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	071b      	lsls	r3, r3, #28
 80057ba:	4944      	ldr	r1, [pc, #272]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057c2:	4b42      	ldr	r3, [pc, #264]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057c8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d0:	3b01      	subs	r3, #1
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	493d      	ldr	r1, [pc, #244]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d022      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057f0:	d11d      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057f2:	4b36      	ldr	r3, [pc, #216]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f8:	0e1b      	lsrs	r3, r3, #24
 80057fa:	f003 030f 	and.w	r3, r3, #15
 80057fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005800:	4b32      	ldr	r3, [pc, #200]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005806:	0f1b      	lsrs	r3, r3, #28
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	019a      	lsls	r2, r3, #6
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	041b      	lsls	r3, r3, #16
 800581a:	431a      	orrs	r2, r3
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	061b      	lsls	r3, r3, #24
 8005820:	431a      	orrs	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	071b      	lsls	r3, r3, #28
 8005826:	4929      	ldr	r1, [pc, #164]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d028      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800583a:	4b24      	ldr	r3, [pc, #144]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005840:	0e1b      	lsrs	r3, r3, #24
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005848:	4b20      	ldr	r3, [pc, #128]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800584a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584e:	0c1b      	lsrs	r3, r3, #16
 8005850:	f003 0303 	and.w	r3, r3, #3
 8005854:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	019a      	lsls	r2, r3, #6
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	041b      	lsls	r3, r3, #16
 8005860:	431a      	orrs	r2, r3
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	061b      	lsls	r3, r3, #24
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	071b      	lsls	r3, r3, #28
 800586e:	4917      	ldr	r1, [pc, #92]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005876:	4b15      	ldr	r3, [pc, #84]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800587c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005884:	4911      	ldr	r1, [pc, #68]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800588c:	4b0f      	ldr	r3, [pc, #60]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a0e      	ldr	r2, [pc, #56]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005898:	f7fb fe2a 	bl	80014f0 <HAL_GetTick>
 800589c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800589e:	e008      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058a0:	f7fb fe26 	bl	80014f0 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b64      	cmp	r3, #100	@ 0x64
 80058ac:	d901      	bls.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e007      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058b2:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058be:	d1ef      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3720      	adds	r7, #32
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	40023800 	.word	0x40023800

080058d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e049      	b.n	8005976 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fb fb54 	bl	8000fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3304      	adds	r3, #4
 800590c:	4619      	mov	r1, r3
 800590e:	4610      	mov	r0, r2
 8005910:	f000 faa8 	bl	8005e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	d001      	beq.n	8005998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e054      	b.n	8005a42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0201 	orr.w	r2, r2, #1
 80059ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a26      	ldr	r2, [pc, #152]	@ (8005a50 <HAL_TIM_Base_Start_IT+0xd0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d022      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x80>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c2:	d01d      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x80>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a22      	ldr	r2, [pc, #136]	@ (8005a54 <HAL_TIM_Base_Start_IT+0xd4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d018      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x80>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a21      	ldr	r2, [pc, #132]	@ (8005a58 <HAL_TIM_Base_Start_IT+0xd8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d013      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x80>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1f      	ldr	r2, [pc, #124]	@ (8005a5c <HAL_TIM_Base_Start_IT+0xdc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00e      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x80>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005a60 <HAL_TIM_Base_Start_IT+0xe0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d009      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x80>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005a64 <HAL_TIM_Base_Start_IT+0xe4>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d004      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x80>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005a68 <HAL_TIM_Base_Start_IT+0xe8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d115      	bne.n	8005a2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	4b19      	ldr	r3, [pc, #100]	@ (8005a6c <HAL_TIM_Base_Start_IT+0xec>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b06      	cmp	r3, #6
 8005a10:	d015      	beq.n	8005a3e <HAL_TIM_Base_Start_IT+0xbe>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a18:	d011      	beq.n	8005a3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0201 	orr.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2a:	e008      	b.n	8005a3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	e000      	b.n	8005a40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40000400 	.word	0x40000400
 8005a58:	40000800 	.word	0x40000800
 8005a5c:	40000c00 	.word	0x40000c00
 8005a60:	40010400 	.word	0x40010400
 8005a64:	40014000 	.word	0x40014000
 8005a68:	40001800 	.word	0x40001800
 8005a6c:	00010007 	.word	0x00010007

08005a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d020      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01b      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0202 	mvn.w	r2, #2
 8005aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9b4 	bl	8005e28 <HAL_TIM_IC_CaptureCallback>
 8005ac0:	e005      	b.n	8005ace <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9a6 	bl	8005e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f9b7 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d020      	beq.n	8005b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01b      	beq.n	8005b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0204 	mvn.w	r2, #4
 8005af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2202      	movs	r2, #2
 8005af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f98e 	bl	8005e28 <HAL_TIM_IC_CaptureCallback>
 8005b0c:	e005      	b.n	8005b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f980 	bl	8005e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f991 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d020      	beq.n	8005b6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01b      	beq.n	8005b6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0208 	mvn.w	r2, #8
 8005b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2204      	movs	r2, #4
 8005b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f968 	bl	8005e28 <HAL_TIM_IC_CaptureCallback>
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f95a 	bl	8005e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f96b 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d020      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d01b      	beq.n	8005bb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0210 	mvn.w	r2, #16
 8005b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2208      	movs	r2, #8
 8005b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f942 	bl	8005e28 <HAL_TIM_IC_CaptureCallback>
 8005ba4:	e005      	b.n	8005bb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f934 	bl	8005e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f945 	bl	8005e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00c      	beq.n	8005bdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d007      	beq.n	8005bdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0201 	mvn.w	r2, #1
 8005bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fb fadc 	bl	8001194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00c      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fb0b 	bl	8006220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00c      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d007      	beq.n	8005c2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fb03 	bl	8006234 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00c      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f8ff 	bl	8005e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f003 0320 	and.w	r3, r3, #32
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00c      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f06f 0220 	mvn.w	r2, #32
 8005c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 facb 	bl	800620c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c76:	bf00      	nop
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_TIM_ConfigClockSource+0x1c>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e0b4      	b.n	8005e06 <HAL_TIM_ConfigClockSource+0x186>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	4b56      	ldr	r3, [pc, #344]	@ (8005e10 <HAL_TIM_ConfigClockSource+0x190>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cd4:	d03e      	beq.n	8005d54 <HAL_TIM_ConfigClockSource+0xd4>
 8005cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cda:	f200 8087 	bhi.w	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ce2:	f000 8086 	beq.w	8005df2 <HAL_TIM_ConfigClockSource+0x172>
 8005ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cea:	d87f      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b70      	cmp	r3, #112	@ 0x70
 8005cee:	d01a      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0xa6>
 8005cf0:	2b70      	cmp	r3, #112	@ 0x70
 8005cf2:	d87b      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b60      	cmp	r3, #96	@ 0x60
 8005cf6:	d050      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x11a>
 8005cf8:	2b60      	cmp	r3, #96	@ 0x60
 8005cfa:	d877      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b50      	cmp	r3, #80	@ 0x50
 8005cfe:	d03c      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0xfa>
 8005d00:	2b50      	cmp	r3, #80	@ 0x50
 8005d02:	d873      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d04:	2b40      	cmp	r3, #64	@ 0x40
 8005d06:	d058      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x13a>
 8005d08:	2b40      	cmp	r3, #64	@ 0x40
 8005d0a:	d86f      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d0c:	2b30      	cmp	r3, #48	@ 0x30
 8005d0e:	d064      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d10:	2b30      	cmp	r3, #48	@ 0x30
 8005d12:	d86b      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d060      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d867      	bhi.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d05c      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d20:	2b10      	cmp	r3, #16
 8005d22:	d05a      	beq.n	8005dda <HAL_TIM_ConfigClockSource+0x15a>
 8005d24:	e062      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d36:	f000 f9bb 	bl	80060b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	609a      	str	r2, [r3, #8]
      break;
 8005d52:	e04f      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d64:	f000 f9a4 	bl	80060b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d76:	609a      	str	r2, [r3, #8]
      break;
 8005d78:	e03c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d86:	461a      	mov	r2, r3
 8005d88:	f000 f918 	bl	8005fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2150      	movs	r1, #80	@ 0x50
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f971 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005d98:	e02c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005da6:	461a      	mov	r2, r3
 8005da8:	f000 f937 	bl	800601a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2160      	movs	r1, #96	@ 0x60
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 f961 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005db8:	e01c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f000 f8f8 	bl	8005fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2140      	movs	r1, #64	@ 0x40
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 f951 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005dd8:	e00c      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f000 f948 	bl	800607a <TIM_ITRx_SetConfig>
      break;
 8005dea:	e003      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	73fb      	strb	r3, [r7, #15]
      break;
 8005df0:	e000      	b.n	8005df4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	fffeff88 	.word	0xfffeff88

08005e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a46      	ldr	r2, [pc, #280]	@ (8005f90 <TIM_Base_SetConfig+0x12c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d013      	beq.n	8005ea4 <TIM_Base_SetConfig+0x40>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e82:	d00f      	beq.n	8005ea4 <TIM_Base_SetConfig+0x40>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a43      	ldr	r2, [pc, #268]	@ (8005f94 <TIM_Base_SetConfig+0x130>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00b      	beq.n	8005ea4 <TIM_Base_SetConfig+0x40>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a42      	ldr	r2, [pc, #264]	@ (8005f98 <TIM_Base_SetConfig+0x134>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d007      	beq.n	8005ea4 <TIM_Base_SetConfig+0x40>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a41      	ldr	r2, [pc, #260]	@ (8005f9c <TIM_Base_SetConfig+0x138>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_Base_SetConfig+0x40>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a40      	ldr	r2, [pc, #256]	@ (8005fa0 <TIM_Base_SetConfig+0x13c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d108      	bne.n	8005eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a35      	ldr	r2, [pc, #212]	@ (8005f90 <TIM_Base_SetConfig+0x12c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d02b      	beq.n	8005f16 <TIM_Base_SetConfig+0xb2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec4:	d027      	beq.n	8005f16 <TIM_Base_SetConfig+0xb2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a32      	ldr	r2, [pc, #200]	@ (8005f94 <TIM_Base_SetConfig+0x130>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d023      	beq.n	8005f16 <TIM_Base_SetConfig+0xb2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a31      	ldr	r2, [pc, #196]	@ (8005f98 <TIM_Base_SetConfig+0x134>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d01f      	beq.n	8005f16 <TIM_Base_SetConfig+0xb2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a30      	ldr	r2, [pc, #192]	@ (8005f9c <TIM_Base_SetConfig+0x138>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01b      	beq.n	8005f16 <TIM_Base_SetConfig+0xb2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8005fa0 <TIM_Base_SetConfig+0x13c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d017      	beq.n	8005f16 <TIM_Base_SetConfig+0xb2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a2e      	ldr	r2, [pc, #184]	@ (8005fa4 <TIM_Base_SetConfig+0x140>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d013      	beq.n	8005f16 <TIM_Base_SetConfig+0xb2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8005fa8 <TIM_Base_SetConfig+0x144>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00f      	beq.n	8005f16 <TIM_Base_SetConfig+0xb2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8005fac <TIM_Base_SetConfig+0x148>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00b      	beq.n	8005f16 <TIM_Base_SetConfig+0xb2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2b      	ldr	r2, [pc, #172]	@ (8005fb0 <TIM_Base_SetConfig+0x14c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d007      	beq.n	8005f16 <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a2a      	ldr	r2, [pc, #168]	@ (8005fb4 <TIM_Base_SetConfig+0x150>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d003      	beq.n	8005f16 <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a29      	ldr	r2, [pc, #164]	@ (8005fb8 <TIM_Base_SetConfig+0x154>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d108      	bne.n	8005f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a10      	ldr	r2, [pc, #64]	@ (8005f90 <TIM_Base_SetConfig+0x12c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_Base_SetConfig+0xf8>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a12      	ldr	r2, [pc, #72]	@ (8005fa0 <TIM_Base_SetConfig+0x13c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d103      	bne.n	8005f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d105      	bne.n	8005f82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f023 0201 	bic.w	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]
  }
}
 8005f82:	bf00      	nop
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800
 8005f9c:	40000c00 	.word	0x40000c00
 8005fa0:	40010400 	.word	0x40010400
 8005fa4:	40014000 	.word	0x40014000
 8005fa8:	40014400 	.word	0x40014400
 8005fac:	40014800 	.word	0x40014800
 8005fb0:	40001800 	.word	0x40001800
 8005fb4:	40001c00 	.word	0x40001c00
 8005fb8:	40002000 	.word	0x40002000

08005fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f023 0201 	bic.w	r2, r3, #1
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 030a 	bic.w	r3, r3, #10
 8005ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	621a      	str	r2, [r3, #32]
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800601a:	b480      	push	{r7}
 800601c:	b087      	sub	sp, #28
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f023 0210 	bic.w	r2, r3, #16
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006044:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	031b      	lsls	r3, r3, #12
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006056:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	621a      	str	r2, [r3, #32]
}
 800606e:	bf00      	nop
 8006070:	371c      	adds	r7, #28
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	f043 0307 	orr.w	r3, r3, #7
 800609c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	021a      	lsls	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	609a      	str	r2, [r3, #8]
}
 80060e4:	bf00      	nop
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006100:	2b01      	cmp	r3, #1
 8006102:	d101      	bne.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006104:	2302      	movs	r3, #2
 8006106:	e06d      	b.n	80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a30      	ldr	r2, [pc, #192]	@ (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2f      	ldr	r2, [pc, #188]	@ (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d108      	bne.n	800614e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006142:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006154:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a20      	ldr	r2, [pc, #128]	@ (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d022      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617a:	d01d      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a1d      	ldr	r2, [pc, #116]	@ (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d018      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1c      	ldr	r2, [pc, #112]	@ (80061fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d013      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a1a      	ldr	r2, [pc, #104]	@ (8006200 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00e      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a15      	ldr	r2, [pc, #84]	@ (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d009      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a16      	ldr	r2, [pc, #88]	@ (8006204 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d004      	beq.n	80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a15      	ldr	r2, [pc, #84]	@ (8006208 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d10c      	bne.n	80061d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	40010000 	.word	0x40010000
 80061f4:	40010400 	.word	0x40010400
 80061f8:	40000400 	.word	0x40000400
 80061fc:	40000800 	.word	0x40000800
 8006200:	40000c00 	.word	0x40000c00
 8006204:	40014000 	.word	0x40014000
 8006208:	40001800 	.word	0x40001800

0800620c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e040      	b.n	80062dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fa feda 	bl	8001024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2224      	movs	r2, #36	@ 0x24
 8006274:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0201 	bic.w	r2, r2, #1
 8006284:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fa8c 	bl	80067ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f825 	bl	80062e4 <UART_SetConfig>
 800629a:	4603      	mov	r3, r0
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e01b      	b.n	80062dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fb0b 	bl	80068f0 <UART_CheckIdleState>
 80062da:	4603      	mov	r3, r0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	4313      	orrs	r3, r2
 8006306:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4ba6      	ldr	r3, [pc, #664]	@ (80065a8 <UART_SetConfig+0x2c4>)
 8006310:	4013      	ands	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	6979      	ldr	r1, [r7, #20]
 8006318:	430b      	orrs	r3, r1
 800631a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	430a      	orrs	r2, r1
 8006354:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a94      	ldr	r2, [pc, #592]	@ (80065ac <UART_SetConfig+0x2c8>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d120      	bne.n	80063a2 <UART_SetConfig+0xbe>
 8006360:	4b93      	ldr	r3, [pc, #588]	@ (80065b0 <UART_SetConfig+0x2cc>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b03      	cmp	r3, #3
 800636c:	d816      	bhi.n	800639c <UART_SetConfig+0xb8>
 800636e:	a201      	add	r2, pc, #4	@ (adr r2, 8006374 <UART_SetConfig+0x90>)
 8006370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006374:	08006385 	.word	0x08006385
 8006378:	08006391 	.word	0x08006391
 800637c:	0800638b 	.word	0x0800638b
 8006380:	08006397 	.word	0x08006397
 8006384:	2301      	movs	r3, #1
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	e150      	b.n	800662c <UART_SetConfig+0x348>
 800638a:	2302      	movs	r3, #2
 800638c:	77fb      	strb	r3, [r7, #31]
 800638e:	e14d      	b.n	800662c <UART_SetConfig+0x348>
 8006390:	2304      	movs	r3, #4
 8006392:	77fb      	strb	r3, [r7, #31]
 8006394:	e14a      	b.n	800662c <UART_SetConfig+0x348>
 8006396:	2308      	movs	r3, #8
 8006398:	77fb      	strb	r3, [r7, #31]
 800639a:	e147      	b.n	800662c <UART_SetConfig+0x348>
 800639c:	2310      	movs	r3, #16
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e144      	b.n	800662c <UART_SetConfig+0x348>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a83      	ldr	r2, [pc, #524]	@ (80065b4 <UART_SetConfig+0x2d0>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d132      	bne.n	8006412 <UART_SetConfig+0x12e>
 80063ac:	4b80      	ldr	r3, [pc, #512]	@ (80065b0 <UART_SetConfig+0x2cc>)
 80063ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b2:	f003 030c 	and.w	r3, r3, #12
 80063b6:	2b0c      	cmp	r3, #12
 80063b8:	d828      	bhi.n	800640c <UART_SetConfig+0x128>
 80063ba:	a201      	add	r2, pc, #4	@ (adr r2, 80063c0 <UART_SetConfig+0xdc>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063f5 	.word	0x080063f5
 80063c4:	0800640d 	.word	0x0800640d
 80063c8:	0800640d 	.word	0x0800640d
 80063cc:	0800640d 	.word	0x0800640d
 80063d0:	08006401 	.word	0x08006401
 80063d4:	0800640d 	.word	0x0800640d
 80063d8:	0800640d 	.word	0x0800640d
 80063dc:	0800640d 	.word	0x0800640d
 80063e0:	080063fb 	.word	0x080063fb
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	0800640d 	.word	0x0800640d
 80063ec:	0800640d 	.word	0x0800640d
 80063f0:	08006407 	.word	0x08006407
 80063f4:	2300      	movs	r3, #0
 80063f6:	77fb      	strb	r3, [r7, #31]
 80063f8:	e118      	b.n	800662c <UART_SetConfig+0x348>
 80063fa:	2302      	movs	r3, #2
 80063fc:	77fb      	strb	r3, [r7, #31]
 80063fe:	e115      	b.n	800662c <UART_SetConfig+0x348>
 8006400:	2304      	movs	r3, #4
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e112      	b.n	800662c <UART_SetConfig+0x348>
 8006406:	2308      	movs	r3, #8
 8006408:	77fb      	strb	r3, [r7, #31]
 800640a:	e10f      	b.n	800662c <UART_SetConfig+0x348>
 800640c:	2310      	movs	r3, #16
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e10c      	b.n	800662c <UART_SetConfig+0x348>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a68      	ldr	r2, [pc, #416]	@ (80065b8 <UART_SetConfig+0x2d4>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d120      	bne.n	800645e <UART_SetConfig+0x17a>
 800641c:	4b64      	ldr	r3, [pc, #400]	@ (80065b0 <UART_SetConfig+0x2cc>)
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006422:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006426:	2b30      	cmp	r3, #48	@ 0x30
 8006428:	d013      	beq.n	8006452 <UART_SetConfig+0x16e>
 800642a:	2b30      	cmp	r3, #48	@ 0x30
 800642c:	d814      	bhi.n	8006458 <UART_SetConfig+0x174>
 800642e:	2b20      	cmp	r3, #32
 8006430:	d009      	beq.n	8006446 <UART_SetConfig+0x162>
 8006432:	2b20      	cmp	r3, #32
 8006434:	d810      	bhi.n	8006458 <UART_SetConfig+0x174>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <UART_SetConfig+0x15c>
 800643a:	2b10      	cmp	r3, #16
 800643c:	d006      	beq.n	800644c <UART_SetConfig+0x168>
 800643e:	e00b      	b.n	8006458 <UART_SetConfig+0x174>
 8006440:	2300      	movs	r3, #0
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e0f2      	b.n	800662c <UART_SetConfig+0x348>
 8006446:	2302      	movs	r3, #2
 8006448:	77fb      	strb	r3, [r7, #31]
 800644a:	e0ef      	b.n	800662c <UART_SetConfig+0x348>
 800644c:	2304      	movs	r3, #4
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e0ec      	b.n	800662c <UART_SetConfig+0x348>
 8006452:	2308      	movs	r3, #8
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e0e9      	b.n	800662c <UART_SetConfig+0x348>
 8006458:	2310      	movs	r3, #16
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e0e6      	b.n	800662c <UART_SetConfig+0x348>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a56      	ldr	r2, [pc, #344]	@ (80065bc <UART_SetConfig+0x2d8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d120      	bne.n	80064aa <UART_SetConfig+0x1c6>
 8006468:	4b51      	ldr	r3, [pc, #324]	@ (80065b0 <UART_SetConfig+0x2cc>)
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006472:	2bc0      	cmp	r3, #192	@ 0xc0
 8006474:	d013      	beq.n	800649e <UART_SetConfig+0x1ba>
 8006476:	2bc0      	cmp	r3, #192	@ 0xc0
 8006478:	d814      	bhi.n	80064a4 <UART_SetConfig+0x1c0>
 800647a:	2b80      	cmp	r3, #128	@ 0x80
 800647c:	d009      	beq.n	8006492 <UART_SetConfig+0x1ae>
 800647e:	2b80      	cmp	r3, #128	@ 0x80
 8006480:	d810      	bhi.n	80064a4 <UART_SetConfig+0x1c0>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <UART_SetConfig+0x1a8>
 8006486:	2b40      	cmp	r3, #64	@ 0x40
 8006488:	d006      	beq.n	8006498 <UART_SetConfig+0x1b4>
 800648a:	e00b      	b.n	80064a4 <UART_SetConfig+0x1c0>
 800648c:	2300      	movs	r3, #0
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	e0cc      	b.n	800662c <UART_SetConfig+0x348>
 8006492:	2302      	movs	r3, #2
 8006494:	77fb      	strb	r3, [r7, #31]
 8006496:	e0c9      	b.n	800662c <UART_SetConfig+0x348>
 8006498:	2304      	movs	r3, #4
 800649a:	77fb      	strb	r3, [r7, #31]
 800649c:	e0c6      	b.n	800662c <UART_SetConfig+0x348>
 800649e:	2308      	movs	r3, #8
 80064a0:	77fb      	strb	r3, [r7, #31]
 80064a2:	e0c3      	b.n	800662c <UART_SetConfig+0x348>
 80064a4:	2310      	movs	r3, #16
 80064a6:	77fb      	strb	r3, [r7, #31]
 80064a8:	e0c0      	b.n	800662c <UART_SetConfig+0x348>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a44      	ldr	r2, [pc, #272]	@ (80065c0 <UART_SetConfig+0x2dc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d125      	bne.n	8006500 <UART_SetConfig+0x21c>
 80064b4:	4b3e      	ldr	r3, [pc, #248]	@ (80065b0 <UART_SetConfig+0x2cc>)
 80064b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064c2:	d017      	beq.n	80064f4 <UART_SetConfig+0x210>
 80064c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064c8:	d817      	bhi.n	80064fa <UART_SetConfig+0x216>
 80064ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ce:	d00b      	beq.n	80064e8 <UART_SetConfig+0x204>
 80064d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d4:	d811      	bhi.n	80064fa <UART_SetConfig+0x216>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <UART_SetConfig+0x1fe>
 80064da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064de:	d006      	beq.n	80064ee <UART_SetConfig+0x20a>
 80064e0:	e00b      	b.n	80064fa <UART_SetConfig+0x216>
 80064e2:	2300      	movs	r3, #0
 80064e4:	77fb      	strb	r3, [r7, #31]
 80064e6:	e0a1      	b.n	800662c <UART_SetConfig+0x348>
 80064e8:	2302      	movs	r3, #2
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e09e      	b.n	800662c <UART_SetConfig+0x348>
 80064ee:	2304      	movs	r3, #4
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	e09b      	b.n	800662c <UART_SetConfig+0x348>
 80064f4:	2308      	movs	r3, #8
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e098      	b.n	800662c <UART_SetConfig+0x348>
 80064fa:	2310      	movs	r3, #16
 80064fc:	77fb      	strb	r3, [r7, #31]
 80064fe:	e095      	b.n	800662c <UART_SetConfig+0x348>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a2f      	ldr	r2, [pc, #188]	@ (80065c4 <UART_SetConfig+0x2e0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d125      	bne.n	8006556 <UART_SetConfig+0x272>
 800650a:	4b29      	ldr	r3, [pc, #164]	@ (80065b0 <UART_SetConfig+0x2cc>)
 800650c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006510:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006514:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006518:	d017      	beq.n	800654a <UART_SetConfig+0x266>
 800651a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800651e:	d817      	bhi.n	8006550 <UART_SetConfig+0x26c>
 8006520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006524:	d00b      	beq.n	800653e <UART_SetConfig+0x25a>
 8006526:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800652a:	d811      	bhi.n	8006550 <UART_SetConfig+0x26c>
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <UART_SetConfig+0x254>
 8006530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006534:	d006      	beq.n	8006544 <UART_SetConfig+0x260>
 8006536:	e00b      	b.n	8006550 <UART_SetConfig+0x26c>
 8006538:	2301      	movs	r3, #1
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e076      	b.n	800662c <UART_SetConfig+0x348>
 800653e:	2302      	movs	r3, #2
 8006540:	77fb      	strb	r3, [r7, #31]
 8006542:	e073      	b.n	800662c <UART_SetConfig+0x348>
 8006544:	2304      	movs	r3, #4
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	e070      	b.n	800662c <UART_SetConfig+0x348>
 800654a:	2308      	movs	r3, #8
 800654c:	77fb      	strb	r3, [r7, #31]
 800654e:	e06d      	b.n	800662c <UART_SetConfig+0x348>
 8006550:	2310      	movs	r3, #16
 8006552:	77fb      	strb	r3, [r7, #31]
 8006554:	e06a      	b.n	800662c <UART_SetConfig+0x348>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1b      	ldr	r2, [pc, #108]	@ (80065c8 <UART_SetConfig+0x2e4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d138      	bne.n	80065d2 <UART_SetConfig+0x2ee>
 8006560:	4b13      	ldr	r3, [pc, #76]	@ (80065b0 <UART_SetConfig+0x2cc>)
 8006562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006566:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800656a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800656e:	d017      	beq.n	80065a0 <UART_SetConfig+0x2bc>
 8006570:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006574:	d82a      	bhi.n	80065cc <UART_SetConfig+0x2e8>
 8006576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800657a:	d00b      	beq.n	8006594 <UART_SetConfig+0x2b0>
 800657c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006580:	d824      	bhi.n	80065cc <UART_SetConfig+0x2e8>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <UART_SetConfig+0x2aa>
 8006586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800658a:	d006      	beq.n	800659a <UART_SetConfig+0x2b6>
 800658c:	e01e      	b.n	80065cc <UART_SetConfig+0x2e8>
 800658e:	2300      	movs	r3, #0
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e04b      	b.n	800662c <UART_SetConfig+0x348>
 8006594:	2302      	movs	r3, #2
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e048      	b.n	800662c <UART_SetConfig+0x348>
 800659a:	2304      	movs	r3, #4
 800659c:	77fb      	strb	r3, [r7, #31]
 800659e:	e045      	b.n	800662c <UART_SetConfig+0x348>
 80065a0:	2308      	movs	r3, #8
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e042      	b.n	800662c <UART_SetConfig+0x348>
 80065a6:	bf00      	nop
 80065a8:	efff69f3 	.word	0xefff69f3
 80065ac:	40011000 	.word	0x40011000
 80065b0:	40023800 	.word	0x40023800
 80065b4:	40004400 	.word	0x40004400
 80065b8:	40004800 	.word	0x40004800
 80065bc:	40004c00 	.word	0x40004c00
 80065c0:	40005000 	.word	0x40005000
 80065c4:	40011400 	.word	0x40011400
 80065c8:	40007800 	.word	0x40007800
 80065cc:	2310      	movs	r3, #16
 80065ce:	77fb      	strb	r3, [r7, #31]
 80065d0:	e02c      	b.n	800662c <UART_SetConfig+0x348>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a72      	ldr	r2, [pc, #456]	@ (80067a0 <UART_SetConfig+0x4bc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d125      	bne.n	8006628 <UART_SetConfig+0x344>
 80065dc:	4b71      	ldr	r3, [pc, #452]	@ (80067a4 <UART_SetConfig+0x4c0>)
 80065de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80065e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80065ea:	d017      	beq.n	800661c <UART_SetConfig+0x338>
 80065ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80065f0:	d817      	bhi.n	8006622 <UART_SetConfig+0x33e>
 80065f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065f6:	d00b      	beq.n	8006610 <UART_SetConfig+0x32c>
 80065f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065fc:	d811      	bhi.n	8006622 <UART_SetConfig+0x33e>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <UART_SetConfig+0x326>
 8006602:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006606:	d006      	beq.n	8006616 <UART_SetConfig+0x332>
 8006608:	e00b      	b.n	8006622 <UART_SetConfig+0x33e>
 800660a:	2300      	movs	r3, #0
 800660c:	77fb      	strb	r3, [r7, #31]
 800660e:	e00d      	b.n	800662c <UART_SetConfig+0x348>
 8006610:	2302      	movs	r3, #2
 8006612:	77fb      	strb	r3, [r7, #31]
 8006614:	e00a      	b.n	800662c <UART_SetConfig+0x348>
 8006616:	2304      	movs	r3, #4
 8006618:	77fb      	strb	r3, [r7, #31]
 800661a:	e007      	b.n	800662c <UART_SetConfig+0x348>
 800661c:	2308      	movs	r3, #8
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e004      	b.n	800662c <UART_SetConfig+0x348>
 8006622:	2310      	movs	r3, #16
 8006624:	77fb      	strb	r3, [r7, #31]
 8006626:	e001      	b.n	800662c <UART_SetConfig+0x348>
 8006628:	2310      	movs	r3, #16
 800662a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006634:	d15b      	bne.n	80066ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006636:	7ffb      	ldrb	r3, [r7, #31]
 8006638:	2b08      	cmp	r3, #8
 800663a:	d828      	bhi.n	800668e <UART_SetConfig+0x3aa>
 800663c:	a201      	add	r2, pc, #4	@ (adr r2, 8006644 <UART_SetConfig+0x360>)
 800663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006642:	bf00      	nop
 8006644:	08006669 	.word	0x08006669
 8006648:	08006671 	.word	0x08006671
 800664c:	08006679 	.word	0x08006679
 8006650:	0800668f 	.word	0x0800668f
 8006654:	0800667f 	.word	0x0800667f
 8006658:	0800668f 	.word	0x0800668f
 800665c:	0800668f 	.word	0x0800668f
 8006660:	0800668f 	.word	0x0800668f
 8006664:	08006687 	.word	0x08006687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006668:	f7fe fce2 	bl	8005030 <HAL_RCC_GetPCLK1Freq>
 800666c:	61b8      	str	r0, [r7, #24]
        break;
 800666e:	e013      	b.n	8006698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006670:	f7fe fcf2 	bl	8005058 <HAL_RCC_GetPCLK2Freq>
 8006674:	61b8      	str	r0, [r7, #24]
        break;
 8006676:	e00f      	b.n	8006698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006678:	4b4b      	ldr	r3, [pc, #300]	@ (80067a8 <UART_SetConfig+0x4c4>)
 800667a:	61bb      	str	r3, [r7, #24]
        break;
 800667c:	e00c      	b.n	8006698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800667e:	f7fe fbc5 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 8006682:	61b8      	str	r0, [r7, #24]
        break;
 8006684:	e008      	b.n	8006698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800668a:	61bb      	str	r3, [r7, #24]
        break;
 800668c:	e004      	b.n	8006698 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	77bb      	strb	r3, [r7, #30]
        break;
 8006696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d074      	beq.n	8006788 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	005a      	lsls	r2, r3, #1
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	085b      	lsrs	r3, r3, #1
 80066a8:	441a      	add	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b0f      	cmp	r3, #15
 80066b8:	d916      	bls.n	80066e8 <UART_SetConfig+0x404>
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c0:	d212      	bcs.n	80066e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f023 030f 	bic.w	r3, r3, #15
 80066ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	f003 0307 	and.w	r3, r3, #7
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	89fb      	ldrh	r3, [r7, #14]
 80066da:	4313      	orrs	r3, r2
 80066dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	89fa      	ldrh	r2, [r7, #14]
 80066e4:	60da      	str	r2, [r3, #12]
 80066e6:	e04f      	b.n	8006788 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	77bb      	strb	r3, [r7, #30]
 80066ec:	e04c      	b.n	8006788 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066ee:	7ffb      	ldrb	r3, [r7, #31]
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d828      	bhi.n	8006746 <UART_SetConfig+0x462>
 80066f4:	a201      	add	r2, pc, #4	@ (adr r2, 80066fc <UART_SetConfig+0x418>)
 80066f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fa:	bf00      	nop
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006729 	.word	0x08006729
 8006704:	08006731 	.word	0x08006731
 8006708:	08006747 	.word	0x08006747
 800670c:	08006737 	.word	0x08006737
 8006710:	08006747 	.word	0x08006747
 8006714:	08006747 	.word	0x08006747
 8006718:	08006747 	.word	0x08006747
 800671c:	0800673f 	.word	0x0800673f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006720:	f7fe fc86 	bl	8005030 <HAL_RCC_GetPCLK1Freq>
 8006724:	61b8      	str	r0, [r7, #24]
        break;
 8006726:	e013      	b.n	8006750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006728:	f7fe fc96 	bl	8005058 <HAL_RCC_GetPCLK2Freq>
 800672c:	61b8      	str	r0, [r7, #24]
        break;
 800672e:	e00f      	b.n	8006750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006730:	4b1d      	ldr	r3, [pc, #116]	@ (80067a8 <UART_SetConfig+0x4c4>)
 8006732:	61bb      	str	r3, [r7, #24]
        break;
 8006734:	e00c      	b.n	8006750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006736:	f7fe fb69 	bl	8004e0c <HAL_RCC_GetSysClockFreq>
 800673a:	61b8      	str	r0, [r7, #24]
        break;
 800673c:	e008      	b.n	8006750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800673e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006742:	61bb      	str	r3, [r7, #24]
        break;
 8006744:	e004      	b.n	8006750 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	77bb      	strb	r3, [r7, #30]
        break;
 800674e:	bf00      	nop
    }

    if (pclk != 0U)
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d018      	beq.n	8006788 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	085a      	lsrs	r2, r3, #1
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	441a      	add	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	fbb2 f3f3 	udiv	r3, r2, r3
 8006768:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b0f      	cmp	r3, #15
 800676e:	d909      	bls.n	8006784 <UART_SetConfig+0x4a0>
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006776:	d205      	bcs.n	8006784 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60da      	str	r2, [r3, #12]
 8006782:	e001      	b.n	8006788 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006794:	7fbb      	ldrb	r3, [r7, #30]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3720      	adds	r7, #32
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	40007c00 	.word	0x40007c00
 80067a4:	40023800 	.word	0x40023800
 80067a8:	00f42400 	.word	0x00f42400

080067ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00a      	beq.n	80067d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00a      	beq.n	80067f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681e:	f003 0304 	and.w	r3, r3, #4
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006840:	f003 0310 	and.w	r3, r3, #16
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00a      	beq.n	800685e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01a      	beq.n	80068c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068aa:	d10a      	bne.n	80068c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00a      	beq.n	80068e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	605a      	str	r2, [r3, #4]
  }
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b098      	sub	sp, #96	@ 0x60
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006900:	f7fa fdf6 	bl	80014f0 <HAL_GetTick>
 8006904:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b08      	cmp	r3, #8
 8006912:	d12e      	bne.n	8006972 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006914:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800691c:	2200      	movs	r2, #0
 800691e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f88c 	bl	8006a40 <UART_WaitOnFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d021      	beq.n	8006972 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800693c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800693e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006942:	653b      	str	r3, [r7, #80]	@ 0x50
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800694c:	647b      	str	r3, [r7, #68]	@ 0x44
 800694e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006950:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006954:	e841 2300 	strex	r3, r2, [r1]
 8006958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800695a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e6      	bne.n	800692e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2220      	movs	r2, #32
 8006964:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e062      	b.n	8006a38 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b04      	cmp	r3, #4
 800697e:	d149      	bne.n	8006a14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006980:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006988:	2200      	movs	r2, #0
 800698a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f856 	bl	8006a40 <UART_WaitOnFlagUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d03c      	beq.n	8006a14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	623b      	str	r3, [r7, #32]
   return(result);
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	461a      	mov	r2, r3
 80069b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80069ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069c0:	e841 2300 	strex	r3, r2, [r1]
 80069c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e6      	bne.n	800699a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3308      	adds	r3, #8
 80069d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	60fb      	str	r3, [r7, #12]
   return(result);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0301 	bic.w	r3, r3, #1
 80069e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3308      	adds	r3, #8
 80069ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069ec:	61fa      	str	r2, [r7, #28]
 80069ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	69b9      	ldr	r1, [r7, #24]
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	617b      	str	r3, [r7, #20]
   return(result);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e5      	bne.n	80069cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e011      	b.n	8006a38 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3758      	adds	r7, #88	@ 0x58
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a50:	e04f      	b.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a58:	d04b      	beq.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5a:	f7fa fd49 	bl	80014f0 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d302      	bcc.n	8006a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e04e      	b.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d037      	beq.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b80      	cmp	r3, #128	@ 0x80
 8006a86:	d034      	beq.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b40      	cmp	r3, #64	@ 0x40
 8006a8c:	d031      	beq.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d110      	bne.n	8006abe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f838 	bl	8006b1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2208      	movs	r2, #8
 8006aae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e029      	b.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006acc:	d111      	bne.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f81e 	bl	8006b1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e00f      	b.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69da      	ldr	r2, [r3, #28]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4013      	ands	r3, r2
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	bf0c      	ite	eq
 8006b02:	2301      	moveq	r3, #1
 8006b04:	2300      	movne	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	79fb      	ldrb	r3, [r7, #7]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d0a0      	beq.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b095      	sub	sp, #84	@ 0x54
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b40:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e6      	bne.n	8006b22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	3308      	adds	r3, #8
 8006b5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	e853 3f00 	ldrex	r3, [r3]
 8006b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3308      	adds	r3, #8
 8006b72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b7c:	e841 2300 	strex	r3, r2, [r1]
 8006b80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e5      	bne.n	8006b54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d118      	bne.n	8006bc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f023 0310 	bic.w	r3, r3, #16
 8006ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bae:	61bb      	str	r3, [r7, #24]
 8006bb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	6979      	ldr	r1, [r7, #20]
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	e841 2300 	strex	r3, r2, [r1]
 8006bba:	613b      	str	r3, [r7, #16]
   return(result);
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1e6      	bne.n	8006b90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006bd6:	bf00      	nop
 8006bd8:	3754      	adds	r7, #84	@ 0x54
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006be4:	b084      	sub	sp, #16
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	f107 001c 	add.w	r0, r7, #28
 8006bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bf6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d121      	bne.n	8006c42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	4b21      	ldr	r3, [pc, #132]	@ (8006c94 <USB_CoreInit+0xb0>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d105      	bne.n	8006c36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 fade 	bl	80081f8 <USB_CoreReset>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]
 8006c40:	e010      	b.n	8006c64 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 fad2 	bl	80081f8 <USB_CoreReset>
 8006c54:	4603      	mov	r3, r0
 8006c56:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c64:	7fbb      	ldrb	r3, [r7, #30]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d10b      	bne.n	8006c82 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f043 0206 	orr.w	r2, r3, #6
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f043 0220 	orr.w	r2, r3, #32
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c8e:	b004      	add	sp, #16
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	ffbdffbf 	.word	0xffbdffbf

08006c98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d165      	bne.n	8006d78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	4a41      	ldr	r2, [pc, #260]	@ (8006db4 <USB_SetTurnaroundTime+0x11c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d906      	bls.n	8006cc2 <USB_SetTurnaroundTime+0x2a>
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4a40      	ldr	r2, [pc, #256]	@ (8006db8 <USB_SetTurnaroundTime+0x120>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d202      	bcs.n	8006cc2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006cbc:	230f      	movs	r3, #15
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	e062      	b.n	8006d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8006db8 <USB_SetTurnaroundTime+0x120>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d306      	bcc.n	8006cd8 <USB_SetTurnaroundTime+0x40>
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	4a3b      	ldr	r2, [pc, #236]	@ (8006dbc <USB_SetTurnaroundTime+0x124>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d202      	bcs.n	8006cd8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006cd2:	230e      	movs	r3, #14
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	e057      	b.n	8006d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4a38      	ldr	r2, [pc, #224]	@ (8006dbc <USB_SetTurnaroundTime+0x124>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d306      	bcc.n	8006cee <USB_SetTurnaroundTime+0x56>
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4a37      	ldr	r2, [pc, #220]	@ (8006dc0 <USB_SetTurnaroundTime+0x128>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d202      	bcs.n	8006cee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ce8:	230d      	movs	r3, #13
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	e04c      	b.n	8006d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4a33      	ldr	r2, [pc, #204]	@ (8006dc0 <USB_SetTurnaroundTime+0x128>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d306      	bcc.n	8006d04 <USB_SetTurnaroundTime+0x6c>
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	4a32      	ldr	r2, [pc, #200]	@ (8006dc4 <USB_SetTurnaroundTime+0x12c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d802      	bhi.n	8006d04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006cfe:	230c      	movs	r3, #12
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	e041      	b.n	8006d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4a2f      	ldr	r2, [pc, #188]	@ (8006dc4 <USB_SetTurnaroundTime+0x12c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d906      	bls.n	8006d1a <USB_SetTurnaroundTime+0x82>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8006dc8 <USB_SetTurnaroundTime+0x130>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d802      	bhi.n	8006d1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d14:	230b      	movs	r3, #11
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	e036      	b.n	8006d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc8 <USB_SetTurnaroundTime+0x130>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d906      	bls.n	8006d30 <USB_SetTurnaroundTime+0x98>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	4a29      	ldr	r2, [pc, #164]	@ (8006dcc <USB_SetTurnaroundTime+0x134>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d802      	bhi.n	8006d30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d2a:	230a      	movs	r3, #10
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e02b      	b.n	8006d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4a26      	ldr	r2, [pc, #152]	@ (8006dcc <USB_SetTurnaroundTime+0x134>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d906      	bls.n	8006d46 <USB_SetTurnaroundTime+0xae>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4a25      	ldr	r2, [pc, #148]	@ (8006dd0 <USB_SetTurnaroundTime+0x138>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d202      	bcs.n	8006d46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d40:	2309      	movs	r3, #9
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	e020      	b.n	8006d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4a21      	ldr	r2, [pc, #132]	@ (8006dd0 <USB_SetTurnaroundTime+0x138>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d306      	bcc.n	8006d5c <USB_SetTurnaroundTime+0xc4>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	4a20      	ldr	r2, [pc, #128]	@ (8006dd4 <USB_SetTurnaroundTime+0x13c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d802      	bhi.n	8006d5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d56:	2308      	movs	r3, #8
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e015      	b.n	8006d88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd4 <USB_SetTurnaroundTime+0x13c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d906      	bls.n	8006d72 <USB_SetTurnaroundTime+0xda>
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4a1c      	ldr	r2, [pc, #112]	@ (8006dd8 <USB_SetTurnaroundTime+0x140>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d202      	bcs.n	8006d72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d6c:	2307      	movs	r3, #7
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	e00a      	b.n	8006d88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d72:	2306      	movs	r3, #6
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	e007      	b.n	8006d88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d102      	bne.n	8006d84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d7e:	2309      	movs	r3, #9
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	e001      	b.n	8006d88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d84:	2309      	movs	r3, #9
 8006d86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	029b      	lsls	r3, r3, #10
 8006d9c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006da0:	431a      	orrs	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	00d8acbf 	.word	0x00d8acbf
 8006db8:	00e4e1c0 	.word	0x00e4e1c0
 8006dbc:	00f42400 	.word	0x00f42400
 8006dc0:	01067380 	.word	0x01067380
 8006dc4:	011a499f 	.word	0x011a499f
 8006dc8:	01312cff 	.word	0x01312cff
 8006dcc:	014ca43f 	.word	0x014ca43f
 8006dd0:	016e3600 	.word	0x016e3600
 8006dd4:	01a6ab1f 	.word	0x01a6ab1f
 8006dd8:	01e84800 	.word	0x01e84800

08006ddc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f043 0201 	orr.w	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f023 0201 	bic.w	r2, r3, #1
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e3c:	78fb      	ldrb	r3, [r7, #3]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d115      	bne.n	8006e6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e4e:	200a      	movs	r0, #10
 8006e50:	f7fa fb5a 	bl	8001508 <HAL_Delay>
      ms += 10U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	330a      	adds	r3, #10
 8006e58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 f93b 	bl	80080d6 <USB_GetMode>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d01e      	beq.n	8006ea4 <USB_SetCurrentMode+0x84>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e6a:	d9f0      	bls.n	8006e4e <USB_SetCurrentMode+0x2e>
 8006e6c:	e01a      	b.n	8006ea4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d115      	bne.n	8006ea0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e80:	200a      	movs	r0, #10
 8006e82:	f7fa fb41 	bl	8001508 <HAL_Delay>
      ms += 10U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	330a      	adds	r3, #10
 8006e8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 f922 	bl	80080d6 <USB_GetMode>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <USB_SetCurrentMode+0x84>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e9c:	d9f0      	bls.n	8006e80 <USB_SetCurrentMode+0x60>
 8006e9e:	e001      	b.n	8006ea4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e005      	b.n	8006eb0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ea8:	d101      	bne.n	8006eae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3710      	adds	r7, #16
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006eb8:	b084      	sub	sp, #16
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	613b      	str	r3, [r7, #16]
 8006ed6:	e009      	b.n	8006eec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	3340      	adds	r3, #64	@ 0x40
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	613b      	str	r3, [r7, #16]
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2b0e      	cmp	r3, #14
 8006ef0:	d9f2      	bls.n	8006ed8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ef2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d11c      	bne.n	8006f34 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f08:	f043 0302 	orr.w	r3, r3, #2
 8006f0c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f12:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e005      	b.n	8006f40 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f46:	461a      	mov	r2, r3
 8006f48:	2300      	movs	r3, #0
 8006f4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d10d      	bne.n	8006f70 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d104      	bne.n	8006f66 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f968 	bl	8007234 <USB_SetDevSpeed>
 8006f64:	e008      	b.n	8006f78 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f66:	2101      	movs	r1, #1
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f963 	bl	8007234 <USB_SetDevSpeed>
 8006f6e:	e003      	b.n	8006f78 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f70:	2103      	movs	r1, #3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f95e 	bl	8007234 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f78:	2110      	movs	r1, #16
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f8fa 	bl	8007174 <USB_FlushTxFifo>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f924 	bl	80071d8 <USB_FlushRxFifo>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fac:	461a      	mov	r2, r3
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	613b      	str	r3, [r7, #16]
 8006fc2:	e043      	b.n	800704c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fda:	d118      	bne.n	800700e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	e013      	b.n	8007020 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007004:	461a      	mov	r2, r3
 8007006:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	e008      	b.n	8007020 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800701a:	461a      	mov	r2, r3
 800701c:	2300      	movs	r3, #0
 800701e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800702c:	461a      	mov	r2, r3
 800702e:	2300      	movs	r3, #0
 8007030:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800703e:	461a      	mov	r2, r3
 8007040:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007044:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	3301      	adds	r3, #1
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007050:	461a      	mov	r2, r3
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	4293      	cmp	r3, r2
 8007056:	d3b5      	bcc.n	8006fc4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007058:	2300      	movs	r3, #0
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	e043      	b.n	80070e6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007074:	d118      	bne.n	80070a8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007088:	461a      	mov	r2, r3
 800708a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	e013      	b.n	80070ba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800709e:	461a      	mov	r2, r3
 80070a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	e008      	b.n	80070ba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b4:	461a      	mov	r2, r3
 80070b6:	2300      	movs	r3, #0
 80070b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c6:	461a      	mov	r2, r3
 80070c8:	2300      	movs	r3, #0
 80070ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070d8:	461a      	mov	r2, r3
 80070da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	3301      	adds	r3, #1
 80070e4:	613b      	str	r3, [r7, #16]
 80070e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80070ea:	461a      	mov	r2, r3
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d3b5      	bcc.n	800705e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007104:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007112:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007114:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007118:	2b00      	cmp	r3, #0
 800711a:	d105      	bne.n	8007128 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	f043 0210 	orr.w	r2, r3, #16
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	4b0f      	ldr	r3, [pc, #60]	@ (800716c <USB_DevInit+0x2b4>)
 800712e:	4313      	orrs	r3, r2
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007134:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	f043 0208 	orr.w	r2, r3, #8
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007148:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800714c:	2b01      	cmp	r3, #1
 800714e:	d105      	bne.n	800715c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699a      	ldr	r2, [r3, #24]
 8007154:	4b06      	ldr	r3, [pc, #24]	@ (8007170 <USB_DevInit+0x2b8>)
 8007156:	4313      	orrs	r3, r2
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800715c:	7dfb      	ldrb	r3, [r7, #23]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007168:	b004      	add	sp, #16
 800716a:	4770      	bx	lr
 800716c:	803c3800 	.word	0x803c3800
 8007170:	40000004 	.word	0x40000004

08007174 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3301      	adds	r3, #1
 8007186:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800718e:	d901      	bls.n	8007194 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e01b      	b.n	80071cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	daf2      	bge.n	8007182 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	019b      	lsls	r3, r3, #6
 80071a4:	f043 0220 	orr.w	r2, r3, #32
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071b8:	d901      	bls.n	80071be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e006      	b.n	80071cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d0f0      	beq.n	80071ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3301      	adds	r3, #1
 80071e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071f0:	d901      	bls.n	80071f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e018      	b.n	8007228 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	daf2      	bge.n	80071e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2210      	movs	r2, #16
 8007206:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3301      	adds	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007214:	d901      	bls.n	800721a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e006      	b.n	8007228 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	f003 0310 	and.w	r3, r3, #16
 8007222:	2b10      	cmp	r3, #16
 8007224:	d0f0      	beq.n	8007208 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	78fb      	ldrb	r3, [r7, #3]
 800724e:	68f9      	ldr	r1, [r7, #12]
 8007250:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007254:	4313      	orrs	r3, r2
 8007256:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007266:	b480      	push	{r7}
 8007268:	b087      	sub	sp, #28
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 0306 	and.w	r3, r3, #6
 800727e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d102      	bne.n	800728c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007286:	2300      	movs	r3, #0
 8007288:	75fb      	strb	r3, [r7, #23]
 800728a:	e00a      	b.n	80072a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d002      	beq.n	8007298 <USB_GetDevSpeed+0x32>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b06      	cmp	r3, #6
 8007296:	d102      	bne.n	800729e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007298:	2302      	movs	r3, #2
 800729a:	75fb      	strb	r3, [r7, #23]
 800729c:	e001      	b.n	80072a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800729e:	230f      	movs	r3, #15
 80072a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80072a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	371c      	adds	r7, #28
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	785b      	ldrb	r3, [r3, #1]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d139      	bne.n	8007340 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	2101      	movs	r1, #1
 80072de:	fa01 f303 	lsl.w	r3, r1, r3
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	68f9      	ldr	r1, [r7, #12]
 80072e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072ea:	4313      	orrs	r3, r2
 80072ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d153      	bne.n	80073ac <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	791b      	ldrb	r3, [r3, #4]
 800731e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007320:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	059b      	lsls	r3, r3, #22
 8007326:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007328:	431a      	orrs	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	0159      	lsls	r1, r3, #5
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	440b      	add	r3, r1
 8007332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007336:	4619      	mov	r1, r3
 8007338:	4b20      	ldr	r3, [pc, #128]	@ (80073bc <USB_ActivateEndpoint+0x10c>)
 800733a:	4313      	orrs	r3, r2
 800733c:	600b      	str	r3, [r1, #0]
 800733e:	e035      	b.n	80073ac <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007346:	69da      	ldr	r2, [r3, #28]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	f003 030f 	and.w	r3, r3, #15
 8007350:	2101      	movs	r1, #1
 8007352:	fa01 f303 	lsl.w	r3, r1, r3
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	68f9      	ldr	r1, [r7, #12]
 800735a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800735e:	4313      	orrs	r3, r2
 8007360:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d119      	bne.n	80073ac <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	791b      	ldrb	r3, [r3, #4]
 8007392:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007394:	430b      	orrs	r3, r1
 8007396:	431a      	orrs	r2, r3
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	0159      	lsls	r1, r3, #5
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	440b      	add	r3, r1
 80073a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a4:	4619      	mov	r1, r3
 80073a6:	4b05      	ldr	r3, [pc, #20]	@ (80073bc <USB_ActivateEndpoint+0x10c>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	10008000 	.word	0x10008000

080073c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d161      	bne.n	80074a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073f2:	d11f      	bne.n	8007434 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800740e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007412:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	0151      	lsls	r1, r2, #5
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	440a      	add	r2, r1
 800742a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800742e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007432:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800743a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	f003 030f 	and.w	r3, r3, #15
 8007444:	2101      	movs	r1, #1
 8007446:	fa01 f303 	lsl.w	r3, r1, r3
 800744a:	b29b      	uxth	r3, r3
 800744c:	43db      	mvns	r3, r3
 800744e:	68f9      	ldr	r1, [r7, #12]
 8007450:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007454:	4013      	ands	r3, r2
 8007456:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	2101      	movs	r1, #1
 800746a:	fa01 f303 	lsl.w	r3, r1, r3
 800746e:	b29b      	uxth	r3, r3
 8007470:	43db      	mvns	r3, r3
 8007472:	68f9      	ldr	r1, [r7, #12]
 8007474:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007478:	4013      	ands	r3, r2
 800747a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	0159      	lsls	r1, r3, #5
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	440b      	add	r3, r1
 8007492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007496:	4619      	mov	r1, r3
 8007498:	4b35      	ldr	r3, [pc, #212]	@ (8007570 <USB_DeactivateEndpoint+0x1b0>)
 800749a:	4013      	ands	r3, r2
 800749c:	600b      	str	r3, [r1, #0]
 800749e:	e060      	b.n	8007562 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074b6:	d11f      	bne.n	80074f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	0151      	lsls	r1, r2, #5
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	440a      	add	r2, r1
 80074ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	f003 030f 	and.w	r3, r3, #15
 8007508:	2101      	movs	r1, #1
 800750a:	fa01 f303 	lsl.w	r3, r1, r3
 800750e:	041b      	lsls	r3, r3, #16
 8007510:	43db      	mvns	r3, r3
 8007512:	68f9      	ldr	r1, [r7, #12]
 8007514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007518:	4013      	ands	r3, r2
 800751a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007522:	69da      	ldr	r2, [r3, #28]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	f003 030f 	and.w	r3, r3, #15
 800752c:	2101      	movs	r1, #1
 800752e:	fa01 f303 	lsl.w	r3, r1, r3
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	43db      	mvns	r3, r3
 8007536:	68f9      	ldr	r1, [r7, #12]
 8007538:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800753c:	4013      	ands	r3, r2
 800753e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	0159      	lsls	r1, r3, #5
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	440b      	add	r3, r1
 8007556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800755a:	4619      	mov	r1, r3
 800755c:	4b05      	ldr	r3, [pc, #20]	@ (8007574 <USB_DeactivateEndpoint+0x1b4>)
 800755e:	4013      	ands	r3, r2
 8007560:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr
 8007570:	ec337800 	.word	0xec337800
 8007574:	eff37800 	.word	0xeff37800

08007578 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08a      	sub	sp, #40	@ 0x28
 800757c:	af02      	add	r7, sp, #8
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	785b      	ldrb	r3, [r3, #1]
 8007594:	2b01      	cmp	r3, #1
 8007596:	f040 8181 	bne.w	800789c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d132      	bne.n	8007608 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	0159      	lsls	r1, r3, #5
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	440b      	add	r3, r1
 80075b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075bc:	4619      	mov	r1, r3
 80075be:	4ba5      	ldr	r3, [pc, #660]	@ (8007854 <USB_EPStartXfer+0x2dc>)
 80075c0:	4013      	ands	r3, r2
 80075c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	0151      	lsls	r1, r2, #5
 80075d6:	69fa      	ldr	r2, [r7, #28]
 80075d8:	440a      	add	r2, r1
 80075da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f0:	691a      	ldr	r2, [r3, #16]
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	0159      	lsls	r1, r3, #5
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	440b      	add	r3, r1
 80075fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fe:	4619      	mov	r1, r3
 8007600:	4b95      	ldr	r3, [pc, #596]	@ (8007858 <USB_EPStartXfer+0x2e0>)
 8007602:	4013      	ands	r3, r2
 8007604:	610b      	str	r3, [r1, #16]
 8007606:	e092      	b.n	800772e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007614:	691a      	ldr	r2, [r3, #16]
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	0159      	lsls	r1, r3, #5
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	440b      	add	r3, r1
 800761e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007622:	4619      	mov	r1, r3
 8007624:	4b8c      	ldr	r3, [pc, #560]	@ (8007858 <USB_EPStartXfer+0x2e0>)
 8007626:	4013      	ands	r3, r2
 8007628:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	0159      	lsls	r1, r3, #5
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	440b      	add	r3, r1
 8007640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007644:	4619      	mov	r1, r3
 8007646:	4b83      	ldr	r3, [pc, #524]	@ (8007854 <USB_EPStartXfer+0x2dc>)
 8007648:	4013      	ands	r3, r2
 800764a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d11a      	bne.n	8007688 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	429a      	cmp	r2, r3
 800765c:	d903      	bls.n	8007666 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	0151      	lsls	r1, r2, #5
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	440a      	add	r2, r1
 800767c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007680:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007684:	6113      	str	r3, [r2, #16]
 8007686:	e01b      	b.n	80076c0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007694:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	6919      	ldr	r1, [r3, #16]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	440b      	add	r3, r1
 80076a0:	1e59      	subs	r1, r3, #1
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80076aa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80076ac:	4b6b      	ldr	r3, [pc, #428]	@ (800785c <USB_EPStartXfer+0x2e4>)
 80076ae:	400b      	ands	r3, r1
 80076b0:	69b9      	ldr	r1, [r7, #24]
 80076b2:	0148      	lsls	r0, r1, #5
 80076b4:	69f9      	ldr	r1, [r7, #28]
 80076b6:	4401      	add	r1, r0
 80076b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80076bc:	4313      	orrs	r3, r2
 80076be:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076cc:	691a      	ldr	r2, [r3, #16]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076d6:	69b9      	ldr	r1, [r7, #24]
 80076d8:	0148      	lsls	r0, r1, #5
 80076da:	69f9      	ldr	r1, [r7, #28]
 80076dc:	4401      	add	r1, r0
 80076de:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80076e2:	4313      	orrs	r3, r2
 80076e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	791b      	ldrb	r3, [r3, #4]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d11f      	bne.n	800772e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007708:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800770c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	0151      	lsls	r1, r2, #5
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	440a      	add	r2, r1
 8007724:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007728:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800772c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d14b      	bne.n	80077cc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d009      	beq.n	8007750 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007748:	461a      	mov	r2, r3
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	791b      	ldrb	r3, [r3, #4]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d128      	bne.n	80077aa <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007764:	2b00      	cmp	r3, #0
 8007766:	d110      	bne.n	800778a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	0151      	lsls	r1, r2, #5
 800777a:	69fa      	ldr	r2, [r7, #28]
 800777c:	440a      	add	r2, r1
 800777e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007782:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	e00f      	b.n	80077aa <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	0151      	lsls	r1, r2, #5
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	440a      	add	r2, r1
 80077c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	e16a      	b.n	8007aa2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	0151      	lsls	r1, r2, #5
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	440a      	add	r2, r1
 80077e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80077ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	791b      	ldrb	r3, [r3, #4]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d015      	beq.n	8007820 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 8152 	beq.w	8007aa2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	2101      	movs	r1, #1
 8007810:	fa01 f303 	lsl.w	r3, r1, r3
 8007814:	69f9      	ldr	r1, [r7, #28]
 8007816:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800781a:	4313      	orrs	r3, r2
 800781c:	634b      	str	r3, [r1, #52]	@ 0x34
 800781e:	e140      	b.n	8007aa2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800782c:	2b00      	cmp	r3, #0
 800782e:	d117      	bne.n	8007860 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	0151      	lsls	r1, r2, #5
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	440a      	add	r2, r1
 8007846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800784a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	e016      	b.n	8007880 <USB_EPStartXfer+0x308>
 8007852:	bf00      	nop
 8007854:	e007ffff 	.word	0xe007ffff
 8007858:	fff80000 	.word	0xfff80000
 800785c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	0151      	lsls	r1, r2, #5
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	440a      	add	r2, r1
 8007876:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800787a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800787e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	68d9      	ldr	r1, [r3, #12]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	781a      	ldrb	r2, [r3, #0]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	b298      	uxth	r0, r3
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	4603      	mov	r3, r0
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 f9b9 	bl	8007c0c <USB_WritePacket>
 800789a:	e102      	b.n	8007aa2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a8:	691a      	ldr	r2, [r3, #16]
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	0159      	lsls	r1, r3, #5
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	440b      	add	r3, r1
 80078b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b6:	4619      	mov	r1, r3
 80078b8:	4b7c      	ldr	r3, [pc, #496]	@ (8007aac <USB_EPStartXfer+0x534>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	0159      	lsls	r1, r3, #5
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	440b      	add	r3, r1
 80078d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d8:	4619      	mov	r1, r3
 80078da:	4b75      	ldr	r3, [pc, #468]	@ (8007ab0 <USB_EPStartXfer+0x538>)
 80078dc:	4013      	ands	r3, r2
 80078de:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d12f      	bne.n	8007946 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	689a      	ldr	r2, [r3, #8]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007914:	69b9      	ldr	r1, [r7, #24]
 8007916:	0148      	lsls	r0, r1, #5
 8007918:	69f9      	ldr	r1, [r7, #28]
 800791a:	4401      	add	r1, r0
 800791c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007920:	4313      	orrs	r3, r2
 8007922:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007924:	69bb      	ldr	r3, [r7, #24]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	0151      	lsls	r1, r2, #5
 8007936:	69fa      	ldr	r2, [r7, #28]
 8007938:	440a      	add	r2, r1
 800793a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800793e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007942:	6113      	str	r3, [r2, #16]
 8007944:	e05f      	b.n	8007a06 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d123      	bne.n	8007996 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	4413      	add	r3, r2
 8007956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800795a:	691a      	ldr	r2, [r3, #16]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007964:	69b9      	ldr	r1, [r7, #24]
 8007966:	0148      	lsls	r0, r1, #5
 8007968:	69f9      	ldr	r1, [r7, #28]
 800796a:	4401      	add	r1, r0
 800796c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007970:	4313      	orrs	r3, r2
 8007972:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	69fa      	ldr	r2, [r7, #28]
 8007988:	440a      	add	r2, r1
 800798a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800798e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007992:	6113      	str	r3, [r2, #16]
 8007994:	e037      	b.n	8007a06 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	4413      	add	r3, r2
 80079a0:	1e5a      	subs	r2, r3, #1
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079aa:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	8afa      	ldrh	r2, [r7, #22]
 80079b2:	fb03 f202 	mul.w	r2, r3, r2
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	015a      	lsls	r2, r3, #5
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4413      	add	r3, r2
 80079c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c6:	691a      	ldr	r2, [r3, #16]
 80079c8:	8afb      	ldrh	r3, [r7, #22]
 80079ca:	04d9      	lsls	r1, r3, #19
 80079cc:	4b39      	ldr	r3, [pc, #228]	@ (8007ab4 <USB_EPStartXfer+0x53c>)
 80079ce:	400b      	ands	r3, r1
 80079d0:	69b9      	ldr	r1, [r7, #24]
 80079d2:	0148      	lsls	r0, r1, #5
 80079d4:	69f9      	ldr	r1, [r7, #28]
 80079d6:	4401      	add	r1, r0
 80079d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80079dc:	4313      	orrs	r3, r2
 80079de:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ec:	691a      	ldr	r2, [r3, #16]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079f6:	69b9      	ldr	r1, [r7, #24]
 80079f8:	0148      	lsls	r0, r1, #5
 80079fa:	69f9      	ldr	r1, [r7, #28]
 80079fc:	4401      	add	r1, r0
 80079fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007a02:	4313      	orrs	r3, r2
 8007a04:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d10d      	bne.n	8007a28 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d009      	beq.n	8007a28 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	68d9      	ldr	r1, [r3, #12]
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a24:	460a      	mov	r2, r1
 8007a26:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	791b      	ldrb	r3, [r3, #4]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d128      	bne.n	8007a82 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d110      	bne.n	8007a62 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	0151      	lsls	r1, r2, #5
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	440a      	add	r2, r1
 8007a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a5a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	e00f      	b.n	8007a82 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	0151      	lsls	r1, r2, #5
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	440a      	add	r2, r1
 8007a78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a80:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	0151      	lsls	r1, r2, #5
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	440a      	add	r2, r1
 8007a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a9c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007aa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3720      	adds	r7, #32
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	fff80000 	.word	0xfff80000
 8007ab0:	e007ffff 	.word	0xe007ffff
 8007ab4:	1ff80000 	.word	0x1ff80000

08007ab8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	785b      	ldrb	r3, [r3, #1]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d14a      	bne.n	8007b6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007aea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007aee:	f040 8086 	bne.w	8007bfe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	7812      	ldrb	r2, [r2, #0]
 8007b06:	0151      	lsls	r1, r2, #5
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007b14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	7812      	ldrb	r2, [r2, #0]
 8007b2a:	0151      	lsls	r1, r2, #5
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d902      	bls.n	8007b50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b4e:	e056      	b.n	8007bfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	015a      	lsls	r2, r3, #5
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	4413      	add	r3, r2
 8007b5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b68:	d0e7      	beq.n	8007b3a <USB_EPStopXfer+0x82>
 8007b6a:	e048      	b.n	8007bfe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b84:	d13b      	bne.n	8007bfe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	015a      	lsls	r2, r3, #5
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	7812      	ldrb	r2, [r2, #0]
 8007b9a:	0151      	lsls	r1, r2, #5
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	440a      	add	r2, r1
 8007ba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ba4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ba8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	7812      	ldrb	r2, [r2, #0]
 8007bbe:	0151      	lsls	r1, r2, #5
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	440a      	add	r2, r1
 8007bc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d902      	bls.n	8007be4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	75fb      	strb	r3, [r7, #23]
          break;
 8007be2:	e00c      	b.n	8007bfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bfc:	d0e7      	beq.n	8007bce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b089      	sub	sp, #36	@ 0x24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	4611      	mov	r1, r2
 8007c18:	461a      	mov	r2, r3
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	71fb      	strb	r3, [r7, #7]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d123      	bne.n	8007c7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c32:	88bb      	ldrh	r3, [r7, #4]
 8007c34:	3303      	adds	r3, #3
 8007c36:	089b      	lsrs	r3, r3, #2
 8007c38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61bb      	str	r3, [r7, #24]
 8007c3e:	e018      	b.n	8007c72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	031a      	lsls	r2, r3, #12
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	3301      	adds	r3, #1
 8007c58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	3301      	adds	r3, #1
 8007c64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	61bb      	str	r3, [r7, #24]
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d3e2      	bcc.n	8007c40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3724      	adds	r7, #36	@ 0x24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b08b      	sub	sp, #44	@ 0x2c
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	4613      	mov	r3, r2
 8007c94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c9e:	88fb      	ldrh	r3, [r7, #6]
 8007ca0:	089b      	lsrs	r3, r3, #2
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ca6:	88fb      	ldrh	r3, [r7, #6]
 8007ca8:	f003 0303 	and.w	r3, r3, #3
 8007cac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007cae:	2300      	movs	r3, #0
 8007cb0:	623b      	str	r3, [r7, #32]
 8007cb2:	e014      	b.n	8007cde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	3301      	adds	r3, #1
 8007cca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cce:	3301      	adds	r3, #1
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	623b      	str	r3, [r7, #32]
 8007cde:	6a3a      	ldr	r2, [r7, #32]
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d3e6      	bcc.n	8007cb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ce6:	8bfb      	ldrh	r3, [r7, #30]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d01e      	beq.n	8007d2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f107 0310 	add.w	r3, r7, #16
 8007cfc:	6812      	ldr	r2, [r2, #0]
 8007cfe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d10:	701a      	strb	r2, [r3, #0]
      i++;
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	3301      	adds	r3, #1
 8007d16:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007d1e:	8bfb      	ldrh	r3, [r7, #30]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d24:	8bfb      	ldrh	r3, [r7, #30]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1ea      	bne.n	8007d00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	372c      	adds	r7, #44	@ 0x2c
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	785b      	ldrb	r3, [r3, #1]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d12c      	bne.n	8007dae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	db12      	blt.n	8007d8c <USB_EPSetStall+0x54>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00f      	beq.n	8007d8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007da6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	e02b      	b.n	8007e06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	db12      	blt.n	8007de6 <USB_EPSetStall+0xae>
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00f      	beq.n	8007de6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	0151      	lsls	r1, r2, #5
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	440a      	add	r2, r1
 8007ddc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007de0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007de4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68ba      	ldr	r2, [r7, #8]
 8007df6:	0151      	lsls	r1, r2, #5
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	440a      	add	r2, r1
 8007dfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	785b      	ldrb	r3, [r3, #1]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d128      	bne.n	8007e82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	0151      	lsls	r1, r2, #5
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	440a      	add	r2, r1
 8007e46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	791b      	ldrb	r3, [r3, #4]
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d003      	beq.n	8007e60 <USB_EPClearStall+0x4c>
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	791b      	ldrb	r3, [r3, #4]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d138      	bne.n	8007ed2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	0151      	lsls	r1, r2, #5
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	440a      	add	r2, r1
 8007e76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	e027      	b.n	8007ed2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	0151      	lsls	r1, r2, #5
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	440a      	add	r2, r1
 8007e98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e9c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ea0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	791b      	ldrb	r3, [r3, #4]
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d003      	beq.n	8007eb2 <USB_EPClearStall+0x9e>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	791b      	ldrb	r3, [r3, #4]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d10f      	bne.n	8007ed2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	0151      	lsls	r1, r2, #5
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	440a      	add	r2, r1
 8007ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ed0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007efe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007f02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007f14:	68f9      	ldr	r1, [r7, #12]
 8007f16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f46:	f023 0303 	bic.w	r3, r3, #3
 8007f4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f5a:	f023 0302 	bic.w	r3, r3, #2
 8007f5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b085      	sub	sp, #20
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007f88:	f023 0303 	bic.w	r3, r3, #3
 8007f8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f9c:	f043 0302 	orr.w	r3, r3, #2
 8007fa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b085      	sub	sp, #20
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ff2:	69db      	ldr	r3, [r3, #28]
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	0c1b      	lsrs	r3, r3, #16
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800800a:	b480      	push	{r7}
 800800c:	b085      	sub	sp, #20
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	4013      	ands	r3, r2
 800802c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	b29b      	uxth	r3, r3
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800803e:	b480      	push	{r7}
 8008040:	b085      	sub	sp, #20
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800804e:	78fb      	ldrb	r3, [r7, #3]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	4013      	ands	r3, r2
 800806a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800806c:	68bb      	ldr	r3, [r7, #8]
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800807a:	b480      	push	{r7}
 800807c:	b087      	sub	sp, #28
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	460b      	mov	r3, r1
 8008084:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800809a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800809c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800809e:	78fb      	ldrb	r3, [r7, #3]
 80080a0:	f003 030f 	and.w	r3, r3, #15
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	fa22 f303 	lsr.w	r3, r2, r3
 80080aa:	01db      	lsls	r3, r3, #7
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4013      	ands	r3, r2
 80080c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080c8:	68bb      	ldr	r3, [r7, #8]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80080d6:	b480      	push	{r7}
 80080d8:	b083      	sub	sp, #12
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	f003 0301 	and.w	r3, r3, #1
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
	...

080080f4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800810e:	4619      	mov	r1, r3
 8008110:	4b09      	ldr	r3, [pc, #36]	@ (8008138 <USB_ActivateSetup+0x44>)
 8008112:	4013      	ands	r3, r2
 8008114:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008128:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	fffff800 	.word	0xfffff800

0800813c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	460b      	mov	r3, r1
 8008146:	607a      	str	r2, [r7, #4]
 8008148:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	333c      	adds	r3, #60	@ 0x3c
 8008152:	3304      	adds	r3, #4
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	4a26      	ldr	r2, [pc, #152]	@ (80081f4 <USB_EP0_OutStart+0xb8>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d90a      	bls.n	8008176 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800816c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008170:	d101      	bne.n	8008176 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	e037      	b.n	80081e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800817c:	461a      	mov	r2, r3
 800817e:	2300      	movs	r3, #0
 8008180:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008190:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008194:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081a4:	f043 0318 	orr.w	r3, r3, #24
 80081a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081b8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80081bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80081be:	7afb      	ldrb	r3, [r7, #11]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d10f      	bne.n	80081e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ca:	461a      	mov	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081de:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80081e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	371c      	adds	r7, #28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	4f54300a 	.word	0x4f54300a

080081f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3301      	adds	r3, #1
 8008208:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008210:	d901      	bls.n	8008216 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e01b      	b.n	800824e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	daf2      	bge.n	8008204 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f043 0201 	orr.w	r2, r3, #1
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3301      	adds	r3, #1
 8008232:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800823a:	d901      	bls.n	8008240 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e006      	b.n	800824e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b01      	cmp	r3, #1
 800824a:	d0f0      	beq.n	800822e <USB_CoreReset+0x36>

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
	...

0800825c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008268:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800826c:	f002 fd88 	bl	800ad80 <malloc>
 8008270:	4603      	mov	r3, r0
 8008272:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d109      	bne.n	800828e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	32b0      	adds	r2, #176	@ 0xb0
 8008284:	2100      	movs	r1, #0
 8008286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800828a:	2302      	movs	r3, #2
 800828c:	e0d4      	b.n	8008438 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800828e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008292:	2100      	movs	r1, #0
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f002 fe31 	bl	800aefc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	32b0      	adds	r2, #176	@ 0xb0
 80082a4:	68f9      	ldr	r1, [r7, #12]
 80082a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	32b0      	adds	r2, #176	@ 0xb0
 80082b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	7c1b      	ldrb	r3, [r3, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d138      	bne.n	8008338 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80082c6:	4b5e      	ldr	r3, [pc, #376]	@ (8008440 <USBD_CDC_Init+0x1e4>)
 80082c8:	7819      	ldrb	r1, [r3, #0]
 80082ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082ce:	2202      	movs	r2, #2
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f002 fbb2 	bl	800aa3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80082d6:	4b5a      	ldr	r3, [pc, #360]	@ (8008440 <USBD_CDC_Init+0x1e4>)
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	f003 020f 	and.w	r2, r3, #15
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	3324      	adds	r3, #36	@ 0x24
 80082ec:	2201      	movs	r2, #1
 80082ee:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082f0:	4b54      	ldr	r3, [pc, #336]	@ (8008444 <USBD_CDC_Init+0x1e8>)
 80082f2:	7819      	ldrb	r1, [r3, #0]
 80082f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082f8:	2202      	movs	r2, #2
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f002 fb9d 	bl	800aa3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008300:	4b50      	ldr	r3, [pc, #320]	@ (8008444 <USBD_CDC_Init+0x1e8>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	f003 020f 	and.w	r2, r3, #15
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008318:	2201      	movs	r2, #1
 800831a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800831c:	4b4a      	ldr	r3, [pc, #296]	@ (8008448 <USBD_CDC_Init+0x1ec>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	f003 020f 	and.w	r2, r3, #15
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	440b      	add	r3, r1
 8008330:	3326      	adds	r3, #38	@ 0x26
 8008332:	2210      	movs	r2, #16
 8008334:	801a      	strh	r2, [r3, #0]
 8008336:	e035      	b.n	80083a4 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008338:	4b41      	ldr	r3, [pc, #260]	@ (8008440 <USBD_CDC_Init+0x1e4>)
 800833a:	7819      	ldrb	r1, [r3, #0]
 800833c:	2340      	movs	r3, #64	@ 0x40
 800833e:	2202      	movs	r2, #2
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f002 fb7a 	bl	800aa3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008346:	4b3e      	ldr	r3, [pc, #248]	@ (8008440 <USBD_CDC_Init+0x1e4>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	f003 020f 	and.w	r2, r3, #15
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4613      	mov	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	3324      	adds	r3, #36	@ 0x24
 800835c:	2201      	movs	r2, #1
 800835e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008360:	4b38      	ldr	r3, [pc, #224]	@ (8008444 <USBD_CDC_Init+0x1e8>)
 8008362:	7819      	ldrb	r1, [r3, #0]
 8008364:	2340      	movs	r3, #64	@ 0x40
 8008366:	2202      	movs	r2, #2
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f002 fb66 	bl	800aa3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800836e:	4b35      	ldr	r3, [pc, #212]	@ (8008444 <USBD_CDC_Init+0x1e8>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f003 020f 	and.w	r2, r3, #15
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	440b      	add	r3, r1
 8008382:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008386:	2201      	movs	r2, #1
 8008388:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800838a:	4b2f      	ldr	r3, [pc, #188]	@ (8008448 <USBD_CDC_Init+0x1ec>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	f003 020f 	and.w	r2, r3, #15
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	4613      	mov	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	440b      	add	r3, r1
 800839e:	3326      	adds	r3, #38	@ 0x26
 80083a0:	2210      	movs	r2, #16
 80083a2:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083a4:	4b28      	ldr	r3, [pc, #160]	@ (8008448 <USBD_CDC_Init+0x1ec>)
 80083a6:	7819      	ldrb	r1, [r3, #0]
 80083a8:	2308      	movs	r3, #8
 80083aa:	2203      	movs	r2, #3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f002 fb44 	bl	800aa3a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80083b2:	4b25      	ldr	r3, [pc, #148]	@ (8008448 <USBD_CDC_Init+0x1ec>)
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	f003 020f 	and.w	r2, r3, #15
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	3324      	adds	r3, #36	@ 0x24
 80083c8:	2201      	movs	r2, #1
 80083ca:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	33b0      	adds	r3, #176	@ 0xb0
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008402:	2302      	movs	r3, #2
 8008404:	e018      	b.n	8008438 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	7c1b      	ldrb	r3, [r3, #16]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800840e:	4b0d      	ldr	r3, [pc, #52]	@ (8008444 <USBD_CDC_Init+0x1e8>)
 8008410:	7819      	ldrb	r1, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008418:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f002 fbfb 	bl	800ac18 <USBD_LL_PrepareReceive>
 8008422:	e008      	b.n	8008436 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008424:	4b07      	ldr	r3, [pc, #28]	@ (8008444 <USBD_CDC_Init+0x1e8>)
 8008426:	7819      	ldrb	r1, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800842e:	2340      	movs	r3, #64	@ 0x40
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f002 fbf1 	bl	800ac18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20000097 	.word	0x20000097
 8008444:	20000098 	.word	0x20000098
 8008448:	20000099 	.word	0x20000099

0800844c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008458:	4b3a      	ldr	r3, [pc, #232]	@ (8008544 <USBD_CDC_DeInit+0xf8>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f002 fb11 	bl	800aa86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008464:	4b37      	ldr	r3, [pc, #220]	@ (8008544 <USBD_CDC_DeInit+0xf8>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	f003 020f 	and.w	r2, r3, #15
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	4613      	mov	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	440b      	add	r3, r1
 8008478:	3324      	adds	r3, #36	@ 0x24
 800847a:	2200      	movs	r2, #0
 800847c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800847e:	4b32      	ldr	r3, [pc, #200]	@ (8008548 <USBD_CDC_DeInit+0xfc>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f002 fafe 	bl	800aa86 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800848a:	4b2f      	ldr	r3, [pc, #188]	@ (8008548 <USBD_CDC_DeInit+0xfc>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	f003 020f 	and.w	r2, r3, #15
 8008492:	6879      	ldr	r1, [r7, #4]
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80084a2:	2200      	movs	r2, #0
 80084a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80084a6:	4b29      	ldr	r3, [pc, #164]	@ (800854c <USBD_CDC_DeInit+0x100>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f002 faea 	bl	800aa86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80084b2:	4b26      	ldr	r3, [pc, #152]	@ (800854c <USBD_CDC_DeInit+0x100>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	f003 020f 	and.w	r2, r3, #15
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	440b      	add	r3, r1
 80084c6:	3324      	adds	r3, #36	@ 0x24
 80084c8:	2200      	movs	r2, #0
 80084ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80084cc:	4b1f      	ldr	r3, [pc, #124]	@ (800854c <USBD_CDC_DeInit+0x100>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	f003 020f 	and.w	r2, r3, #15
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	440b      	add	r3, r1
 80084e0:	3326      	adds	r3, #38	@ 0x26
 80084e2:	2200      	movs	r2, #0
 80084e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	32b0      	adds	r2, #176	@ 0xb0
 80084f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d01f      	beq.n	8008538 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	33b0      	adds	r3, #176	@ 0xb0
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	32b0      	adds	r2, #176	@ 0xb0
 8008516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851a:	4618      	mov	r0, r3
 800851c:	f002 fc38 	bl	800ad90 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	32b0      	adds	r2, #176	@ 0xb0
 800852a:	2100      	movs	r1, #0
 800852c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000097 	.word	0x20000097
 8008548:	20000098 	.word	0x20000098
 800854c:	20000099 	.word	0x20000099

08008550 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	32b0      	adds	r2, #176	@ 0xb0
 8008564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008568:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800856a:	2300      	movs	r3, #0
 800856c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800857c:	2303      	movs	r3, #3
 800857e:	e0bf      	b.n	8008700 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008588:	2b00      	cmp	r3, #0
 800858a:	d050      	beq.n	800862e <USBD_CDC_Setup+0xde>
 800858c:	2b20      	cmp	r3, #32
 800858e:	f040 80af 	bne.w	80086f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	88db      	ldrh	r3, [r3, #6]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d03a      	beq.n	8008610 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	b25b      	sxtb	r3, r3
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	da1b      	bge.n	80085dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	33b0      	adds	r3, #176	@ 0xb0
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80085ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	88d2      	ldrh	r2, [r2, #6]
 80085c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	88db      	ldrh	r3, [r3, #6]
 80085c6:	2b07      	cmp	r3, #7
 80085c8:	bf28      	it	cs
 80085ca:	2307      	movcs	r3, #7
 80085cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	89fa      	ldrh	r2, [r7, #14]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f001 fdbd 	bl	800a154 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80085da:	e090      	b.n	80086fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	785a      	ldrb	r2, [r3, #1]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	88db      	ldrh	r3, [r3, #6]
 80085ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80085ec:	d803      	bhi.n	80085f6 <USBD_CDC_Setup+0xa6>
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	88db      	ldrh	r3, [r3, #6]
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	e000      	b.n	80085f8 <USBD_CDC_Setup+0xa8>
 80085f6:	2240      	movs	r2, #64	@ 0x40
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80085fe:	6939      	ldr	r1, [r7, #16]
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008606:	461a      	mov	r2, r3
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 fdcf 	bl	800a1ac <USBD_CtlPrepareRx>
      break;
 800860e:	e076      	b.n	80086fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	33b0      	adds	r3, #176	@ 0xb0
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	7850      	ldrb	r0, [r2, #1]
 8008626:	2200      	movs	r2, #0
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	4798      	blx	r3
      break;
 800862c:	e067      	b.n	80086fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	2b0b      	cmp	r3, #11
 8008634:	d851      	bhi.n	80086da <USBD_CDC_Setup+0x18a>
 8008636:	a201      	add	r2, pc, #4	@ (adr r2, 800863c <USBD_CDC_Setup+0xec>)
 8008638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863c:	0800866d 	.word	0x0800866d
 8008640:	080086e9 	.word	0x080086e9
 8008644:	080086db 	.word	0x080086db
 8008648:	080086db 	.word	0x080086db
 800864c:	080086db 	.word	0x080086db
 8008650:	080086db 	.word	0x080086db
 8008654:	080086db 	.word	0x080086db
 8008658:	080086db 	.word	0x080086db
 800865c:	080086db 	.word	0x080086db
 8008660:	080086db 	.word	0x080086db
 8008664:	08008697 	.word	0x08008697
 8008668:	080086c1 	.word	0x080086c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b03      	cmp	r3, #3
 8008676:	d107      	bne.n	8008688 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008678:	f107 030a 	add.w	r3, r7, #10
 800867c:	2202      	movs	r2, #2
 800867e:	4619      	mov	r1, r3
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f001 fd67 	bl	800a154 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008686:	e032      	b.n	80086ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 fce5 	bl	800a05a <USBD_CtlError>
            ret = USBD_FAIL;
 8008690:	2303      	movs	r3, #3
 8008692:	75fb      	strb	r3, [r7, #23]
          break;
 8008694:	e02b      	b.n	80086ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d107      	bne.n	80086b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80086a2:	f107 030d 	add.w	r3, r7, #13
 80086a6:	2201      	movs	r2, #1
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 fd52 	bl	800a154 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086b0:	e01d      	b.n	80086ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f001 fcd0 	bl	800a05a <USBD_CtlError>
            ret = USBD_FAIL;
 80086ba:	2303      	movs	r3, #3
 80086bc:	75fb      	strb	r3, [r7, #23]
          break;
 80086be:	e016      	b.n	80086ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d00f      	beq.n	80086ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f001 fcc3 	bl	800a05a <USBD_CtlError>
            ret = USBD_FAIL;
 80086d4:	2303      	movs	r3, #3
 80086d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80086d8:	e008      	b.n	80086ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 fcbc 	bl	800a05a <USBD_CtlError>
          ret = USBD_FAIL;
 80086e2:	2303      	movs	r3, #3
 80086e4:	75fb      	strb	r3, [r7, #23]
          break;
 80086e6:	e002      	b.n	80086ee <USBD_CDC_Setup+0x19e>
          break;
 80086e8:	bf00      	nop
 80086ea:	e008      	b.n	80086fe <USBD_CDC_Setup+0x1ae>
          break;
 80086ec:	bf00      	nop
      }
      break;
 80086ee:	e006      	b.n	80086fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f001 fcb1 	bl	800a05a <USBD_CtlError>
      ret = USBD_FAIL;
 80086f8:	2303      	movs	r3, #3
 80086fa:	75fb      	strb	r3, [r7, #23]
      break;
 80086fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800871a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	32b0      	adds	r2, #176	@ 0xb0
 8008726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800872e:	2303      	movs	r3, #3
 8008730:	e065      	b.n	80087fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	32b0      	adds	r2, #176	@ 0xb0
 800873c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008740:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008742:	78fb      	ldrb	r3, [r7, #3]
 8008744:	f003 020f 	and.w	r2, r3, #15
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	4613      	mov	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	440b      	add	r3, r1
 8008754:	3318      	adds	r3, #24
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d02f      	beq.n	80087bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800875c:	78fb      	ldrb	r3, [r7, #3]
 800875e:	f003 020f 	and.w	r2, r3, #15
 8008762:	6879      	ldr	r1, [r7, #4]
 8008764:	4613      	mov	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	440b      	add	r3, r1
 800876e:	3318      	adds	r3, #24
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	78fb      	ldrb	r3, [r7, #3]
 8008774:	f003 010f 	and.w	r1, r3, #15
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	460b      	mov	r3, r1
 800877c:	00db      	lsls	r3, r3, #3
 800877e:	440b      	add	r3, r1
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4403      	add	r3, r0
 8008784:	331c      	adds	r3, #28
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	fbb2 f1f3 	udiv	r1, r2, r3
 800878c:	fb01 f303 	mul.w	r3, r1, r3
 8008790:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008792:	2b00      	cmp	r3, #0
 8008794:	d112      	bne.n	80087bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008796:	78fb      	ldrb	r3, [r7, #3]
 8008798:	f003 020f 	and.w	r2, r3, #15
 800879c:	6879      	ldr	r1, [r7, #4]
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	440b      	add	r3, r1
 80087a8:	3318      	adds	r3, #24
 80087aa:	2200      	movs	r2, #0
 80087ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80087ae:	78f9      	ldrb	r1, [r7, #3]
 80087b0:	2300      	movs	r3, #0
 80087b2:	2200      	movs	r2, #0
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f002 fa0e 	bl	800abd6 <USBD_LL_Transmit>
 80087ba:	e01f      	b.n	80087fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2200      	movs	r2, #0
 80087c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	33b0      	adds	r3, #176	@ 0xb0
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	4413      	add	r3, r2
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d010      	beq.n	80087fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	33b0      	adds	r3, #176	@ 0xb0
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80087f8:	78fa      	ldrb	r2, [r7, #3]
 80087fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	32b0      	adds	r2, #176	@ 0xb0
 800881c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008820:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	32b0      	adds	r2, #176	@ 0xb0
 800882c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008834:	2303      	movs	r3, #3
 8008836:	e01a      	b.n	800886e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008838:	78fb      	ldrb	r3, [r7, #3]
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f002 fa0c 	bl	800ac5a <USBD_LL_GetRxDataSize>
 8008842:	4602      	mov	r2, r0
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	33b0      	adds	r3, #176	@ 0xb0
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008868:	4611      	mov	r1, r2
 800886a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	32b0      	adds	r2, #176	@ 0xb0
 8008888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008894:	2303      	movs	r3, #3
 8008896:	e024      	b.n	80088e2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	33b0      	adds	r3, #176	@ 0xb0
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d019      	beq.n	80088e0 <USBD_CDC_EP0_RxReady+0x6a>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80088b2:	2bff      	cmp	r3, #255	@ 0xff
 80088b4:	d014      	beq.n	80088e0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	33b0      	adds	r3, #176	@ 0xb0
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80088ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80088d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	22ff      	movs	r2, #255	@ 0xff
 80088dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088f4:	2182      	movs	r1, #130	@ 0x82
 80088f6:	4818      	ldr	r0, [pc, #96]	@ (8008958 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80088f8:	f000 fd4f 	bl	800939a <USBD_GetEpDesc>
 80088fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088fe:	2101      	movs	r1, #1
 8008900:	4815      	ldr	r0, [pc, #84]	@ (8008958 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008902:	f000 fd4a 	bl	800939a <USBD_GetEpDesc>
 8008906:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008908:	2181      	movs	r1, #129	@ 0x81
 800890a:	4813      	ldr	r0, [pc, #76]	@ (8008958 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800890c:	f000 fd45 	bl	800939a <USBD_GetEpDesc>
 8008910:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2210      	movs	r2, #16
 800891c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d006      	beq.n	8008932 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	2200      	movs	r2, #0
 8008928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800892c:	711a      	strb	r2, [r3, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d006      	beq.n	8008946 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008940:	711a      	strb	r2, [r3, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2243      	movs	r2, #67	@ 0x43
 800894a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800894c:	4b02      	ldr	r3, [pc, #8]	@ (8008958 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800894e:	4618      	mov	r0, r3
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20000054 	.word	0x20000054

0800895c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008964:	2182      	movs	r1, #130	@ 0x82
 8008966:	4818      	ldr	r0, [pc, #96]	@ (80089c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008968:	f000 fd17 	bl	800939a <USBD_GetEpDesc>
 800896c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800896e:	2101      	movs	r1, #1
 8008970:	4815      	ldr	r0, [pc, #84]	@ (80089c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008972:	f000 fd12 	bl	800939a <USBD_GetEpDesc>
 8008976:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008978:	2181      	movs	r1, #129	@ 0x81
 800897a:	4813      	ldr	r0, [pc, #76]	@ (80089c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800897c:	f000 fd0d 	bl	800939a <USBD_GetEpDesc>
 8008980:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	2210      	movs	r2, #16
 800898c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d006      	beq.n	80089a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	2200      	movs	r2, #0
 8008998:	711a      	strb	r2, [r3, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	f042 0202 	orr.w	r2, r2, #2
 80089a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d006      	beq.n	80089b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	711a      	strb	r2, [r3, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f042 0202 	orr.w	r2, r2, #2
 80089b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2243      	movs	r2, #67	@ 0x43
 80089ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089bc:	4b02      	ldr	r3, [pc, #8]	@ (80089c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3718      	adds	r7, #24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000054 	.word	0x20000054

080089cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089d4:	2182      	movs	r1, #130	@ 0x82
 80089d6:	4818      	ldr	r0, [pc, #96]	@ (8008a38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089d8:	f000 fcdf 	bl	800939a <USBD_GetEpDesc>
 80089dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089de:	2101      	movs	r1, #1
 80089e0:	4815      	ldr	r0, [pc, #84]	@ (8008a38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089e2:	f000 fcda 	bl	800939a <USBD_GetEpDesc>
 80089e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089e8:	2181      	movs	r1, #129	@ 0x81
 80089ea:	4813      	ldr	r0, [pc, #76]	@ (8008a38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80089ec:	f000 fcd5 	bl	800939a <USBD_GetEpDesc>
 80089f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	2210      	movs	r2, #16
 80089fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d006      	beq.n	8008a12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a0c:	711a      	strb	r2, [r3, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d006      	beq.n	8008a26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a20:	711a      	strb	r2, [r3, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2243      	movs	r2, #67	@ 0x43
 8008a2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a2c:	4b02      	ldr	r3, [pc, #8]	@ (8008a38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20000054 	.word	0x20000054

08008a3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	220a      	movs	r2, #10
 8008a48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008a4a:	4b03      	ldr	r3, [pc, #12]	@ (8008a58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	20000010 	.word	0x20000010

08008a5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d101      	bne.n	8008a70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	e009      	b.n	8008a84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	33b0      	adds	r3, #176	@ 0xb0
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	4413      	add	r3, r2
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b087      	sub	sp, #28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	32b0      	adds	r2, #176	@ 0xb0
 8008aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aaa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e008      	b.n	8008ac8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	32b0      	adds	r2, #176	@ 0xb0
 8008ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e004      	b.n	8008b02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
	...

08008b10 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	32b0      	adds	r2, #176	@ 0xb0
 8008b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b26:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e025      	b.n	8008b82 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d11f      	bne.n	8008b80 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008b48:	4b10      	ldr	r3, [pc, #64]	@ (8008b8c <USBD_CDC_TransmitPacket+0x7c>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	f003 020f 	and.w	r2, r3, #15
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4403      	add	r3, r0
 8008b62:	3318      	adds	r3, #24
 8008b64:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008b66:	4b09      	ldr	r3, [pc, #36]	@ (8008b8c <USBD_CDC_TransmitPacket+0x7c>)
 8008b68:	7819      	ldrb	r1, [r3, #0]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f002 f82d 	bl	800abd6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20000097 	.word	0x20000097

08008b90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	32b0      	adds	r2, #176	@ 0xb0
 8008ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	32b0      	adds	r2, #176	@ 0xb0
 8008bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e018      	b.n	8008bf0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	7c1b      	ldrb	r3, [r3, #16]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10a      	bne.n	8008bdc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf8 <USBD_CDC_ReceivePacket+0x68>)
 8008bc8:	7819      	ldrb	r1, [r3, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008bd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f002 f81f 	bl	800ac18 <USBD_LL_PrepareReceive>
 8008bda:	e008      	b.n	8008bee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bdc:	4b06      	ldr	r3, [pc, #24]	@ (8008bf8 <USBD_CDC_ReceivePacket+0x68>)
 8008bde:	7819      	ldrb	r1, [r3, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008be6:	2340      	movs	r3, #64	@ 0x40
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f002 f815 	bl	800ac18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	20000098 	.word	0x20000098

08008bfc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	4613      	mov	r3, r2
 8008c08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e01f      	b.n	8008c54 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	79fa      	ldrb	r2, [r7, #7]
 8008c46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f001 fe8f 	bl	800a96c <USBD_LL_Init>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e025      	b.n	8008cc0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	32ae      	adds	r2, #174	@ 0xae
 8008c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00f      	beq.n	8008cb0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	32ae      	adds	r2, #174	@ 0xae
 8008c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca0:	f107 020e 	add.w	r2, r7, #14
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4798      	blx	r3
 8008ca8:	4602      	mov	r2, r0
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008cb6:	1c5a      	adds	r2, r3, #1
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f001 fe97 	bl	800aa04 <USBD_LL_Start>
 8008cd6:	4603      	mov	r3, r0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ce8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d009      	beq.n	8008d24 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	78fa      	ldrb	r2, [r7, #3]
 8008d1a:	4611      	mov	r1, r2
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	4798      	blx	r3
 8008d20:	4603      	mov	r3, r0
 8008d22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	78fa      	ldrb	r2, [r7, #3]
 8008d48:	4611      	mov	r1, r2
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	4798      	blx	r3
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d54:	2303      	movs	r3, #3
 8008d56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f001 f936 	bl	8009fe6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008d88:	461a      	mov	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008d96:	f003 031f 	and.w	r3, r3, #31
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d01a      	beq.n	8008dd4 <USBD_LL_SetupStage+0x72>
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d822      	bhi.n	8008de8 <USBD_LL_SetupStage+0x86>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <USBD_LL_SetupStage+0x4a>
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d00a      	beq.n	8008dc0 <USBD_LL_SetupStage+0x5e>
 8008daa:	e01d      	b.n	8008de8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fb63 	bl	8009480 <USBD_StdDevReq>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008dbe:	e020      	b.n	8008e02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fbcb 	bl	8009564 <USBD_StdItfReq>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd2:	e016      	b.n	8008e02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008dda:	4619      	mov	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fc2d 	bl	800963c <USBD_StdEPReq>
 8008de2:	4603      	mov	r3, r0
 8008de4:	73fb      	strb	r3, [r7, #15]
      break;
 8008de6:	e00c      	b.n	8008e02 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008dee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f001 fe64 	bl	800aac4 <USBD_LL_StallEP>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8008e00:	bf00      	nop
  }

  return ret;
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	460b      	mov	r3, r1
 8008e16:	607a      	str	r2, [r7, #4]
 8008e18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e1e:	7afb      	ldrb	r3, [r7, #11]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d16e      	bne.n	8008f02 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008e2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	f040 8098 	bne.w	8008f68 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	689a      	ldr	r2, [r3, #8]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d913      	bls.n	8008e6c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	1ad2      	subs	r2, r2, r3
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	68da      	ldr	r2, [r3, #12]
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	bf28      	it	cs
 8008e5e:	4613      	movcs	r3, r2
 8008e60:	461a      	mov	r2, r3
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f001 f9be 	bl	800a1e6 <USBD_CtlContinueRx>
 8008e6a:	e07d      	b.n	8008f68 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d014      	beq.n	8008ea4 <USBD_LL_DataOutStage+0x98>
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d81d      	bhi.n	8008eba <USBD_LL_DataOutStage+0xae>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d002      	beq.n	8008e88 <USBD_LL_DataOutStage+0x7c>
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d003      	beq.n	8008e8e <USBD_LL_DataOutStage+0x82>
 8008e86:	e018      	b.n	8008eba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	75bb      	strb	r3, [r7, #22]
            break;
 8008e8c:	e018      	b.n	8008ec0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	4619      	mov	r1, r3
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f000 fa64 	bl	8009366 <USBD_CoreFindIF>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	75bb      	strb	r3, [r7, #22]
            break;
 8008ea2:	e00d      	b.n	8008ec0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	4619      	mov	r1, r3
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 fa66 	bl	8009380 <USBD_CoreFindEP>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	75bb      	strb	r3, [r7, #22]
            break;
 8008eb8:	e002      	b.n	8008ec0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	75bb      	strb	r3, [r7, #22]
            break;
 8008ebe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008ec0:	7dbb      	ldrb	r3, [r7, #22]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d119      	bne.n	8008efa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d113      	bne.n	8008efa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008ed2:	7dba      	ldrb	r2, [r7, #22]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	32ae      	adds	r2, #174	@ 0xae
 8008ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00b      	beq.n	8008efa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008ee2:	7dba      	ldrb	r2, [r7, #22]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008eea:	7dba      	ldrb	r2, [r7, #22]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	32ae      	adds	r2, #174	@ 0xae
 8008ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f001 f984 	bl	800a208 <USBD_CtlSendStatus>
 8008f00:	e032      	b.n	8008f68 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008f02:	7afb      	ldrb	r3, [r7, #11]
 8008f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fa37 	bl	8009380 <USBD_CoreFindEP>
 8008f12:	4603      	mov	r3, r0
 8008f14:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f16:	7dbb      	ldrb	r3, [r7, #22]
 8008f18:	2bff      	cmp	r3, #255	@ 0xff
 8008f1a:	d025      	beq.n	8008f68 <USBD_LL_DataOutStage+0x15c>
 8008f1c:	7dbb      	ldrb	r3, [r7, #22]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d122      	bne.n	8008f68 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d117      	bne.n	8008f5e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f2e:	7dba      	ldrb	r2, [r7, #22]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	32ae      	adds	r2, #174	@ 0xae
 8008f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00f      	beq.n	8008f5e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f3e:	7dba      	ldrb	r2, [r7, #22]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f46:	7dba      	ldrb	r2, [r7, #22]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	32ae      	adds	r2, #174	@ 0xae
 8008f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	7afa      	ldrb	r2, [r7, #11]
 8008f54:	4611      	mov	r1, r2
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	4798      	blx	r3
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f64:	7dfb      	ldrb	r3, [r7, #23]
 8008f66:	e000      	b.n	8008f6a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b086      	sub	sp, #24
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	607a      	str	r2, [r7, #4]
 8008f7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d16f      	bne.n	8009066 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	3314      	adds	r3, #20
 8008f8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d15a      	bne.n	800904c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	689a      	ldr	r2, [r3, #8]
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d914      	bls.n	8008fcc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	689a      	ldr	r2, [r3, #8]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	1ad2      	subs	r2, r2, r3
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	6879      	ldr	r1, [r7, #4]
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f001 f8e6 	bl	800a18a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f001 fe27 	bl	800ac18 <USBD_LL_PrepareReceive>
 8008fca:	e03f      	b.n	800904c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	68da      	ldr	r2, [r3, #12]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d11c      	bne.n	8009012 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d316      	bcc.n	8009012 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d20f      	bcs.n	8009012 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f001 f8c7 	bl	800a18a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009004:	2300      	movs	r3, #0
 8009006:	2200      	movs	r2, #0
 8009008:	2100      	movs	r1, #0
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f001 fe04 	bl	800ac18 <USBD_LL_PrepareReceive>
 8009010:	e01c      	b.n	800904c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b03      	cmp	r3, #3
 800901c:	d10f      	bne.n	800903e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d009      	beq.n	800903e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800903e:	2180      	movs	r1, #128	@ 0x80
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f001 fd3f 	bl	800aac4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f001 f8f1 	bl	800a22e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d03a      	beq.n	80090cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f7ff fe42 	bl	8008ce0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009064:	e032      	b.n	80090cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009066:	7afb      	ldrb	r3, [r7, #11]
 8009068:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800906c:	b2db      	uxtb	r3, r3
 800906e:	4619      	mov	r1, r3
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 f985 	bl	8009380 <USBD_CoreFindEP>
 8009076:	4603      	mov	r3, r0
 8009078:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800907a:	7dfb      	ldrb	r3, [r7, #23]
 800907c:	2bff      	cmp	r3, #255	@ 0xff
 800907e:	d025      	beq.n	80090cc <USBD_LL_DataInStage+0x15a>
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d122      	bne.n	80090cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b03      	cmp	r3, #3
 8009090:	d11c      	bne.n	80090cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009092:	7dfa      	ldrb	r2, [r7, #23]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	32ae      	adds	r2, #174	@ 0xae
 8009098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d014      	beq.n	80090cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80090a2:	7dfa      	ldrb	r2, [r7, #23]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80090aa:	7dfa      	ldrb	r2, [r7, #23]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	32ae      	adds	r2, #174	@ 0xae
 80090b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	7afa      	ldrb	r2, [r7, #11]
 80090b8:	4611      	mov	r1, r2
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	4798      	blx	r3
 80090be:	4603      	mov	r3, r0
 80090c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80090c2:	7dbb      	ldrb	r3, [r7, #22]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d001      	beq.n	80090cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80090c8:	7dbb      	ldrb	r3, [r7, #22]
 80090ca:	e000      	b.n	80090ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3718      	adds	r7, #24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800910e:	2b00      	cmp	r3, #0
 8009110:	d014      	beq.n	800913c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00e      	beq.n	800913c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	6852      	ldr	r2, [r2, #4]
 800912a:	b2d2      	uxtb	r2, r2
 800912c:	4611      	mov	r1, r2
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	4798      	blx	r3
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009138:	2303      	movs	r3, #3
 800913a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800913c:	2340      	movs	r3, #64	@ 0x40
 800913e:	2200      	movs	r2, #0
 8009140:	2100      	movs	r1, #0
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f001 fc79 	bl	800aa3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2240      	movs	r2, #64	@ 0x40
 8009154:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009158:	2340      	movs	r3, #64	@ 0x40
 800915a:	2200      	movs	r2, #0
 800915c:	2180      	movs	r1, #128	@ 0x80
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f001 fc6b 	bl	800aa3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2240      	movs	r2, #64	@ 0x40
 800916e:	621a      	str	r2, [r3, #32]

  return ret;
 8009170:	7bfb      	ldrb	r3, [r7, #15]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	78fa      	ldrb	r2, [r7, #3]
 800918a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d006      	beq.n	80091bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091b4:	b2da      	uxtb	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2204      	movs	r2, #4
 80091c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b083      	sub	sp, #12
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d106      	bne.n	80091f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b03      	cmp	r3, #3
 8009214:	d110      	bne.n	8009238 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00b      	beq.n	8009238 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d005      	beq.n	8009238 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	460b      	mov	r3, r1
 800924c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	32ae      	adds	r2, #174	@ 0xae
 8009258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009260:	2303      	movs	r3, #3
 8009262:	e01c      	b.n	800929e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b03      	cmp	r3, #3
 800926e:	d115      	bne.n	800929c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	32ae      	adds	r2, #174	@ 0xae
 800927a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800927e:	6a1b      	ldr	r3, [r3, #32]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00b      	beq.n	800929c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	32ae      	adds	r2, #174	@ 0xae
 800928e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009292:	6a1b      	ldr	r3, [r3, #32]
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	4611      	mov	r1, r2
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b082      	sub	sp, #8
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	460b      	mov	r3, r1
 80092b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	32ae      	adds	r2, #174	@ 0xae
 80092bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e01c      	b.n	8009302 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b03      	cmp	r3, #3
 80092d2:	d115      	bne.n	8009300 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	32ae      	adds	r2, #174	@ 0xae
 80092de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00b      	beq.n	8009300 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	32ae      	adds	r2, #174	@ 0xae
 80092f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f8:	78fa      	ldrb	r2, [r7, #3]
 80092fa:	4611      	mov	r1, r2
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009300:	2300      	movs	r3, #0
}
 8009302:	4618      	mov	r0, r3
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800930a:	b480      	push	{r7}
 800930c:	b083      	sub	sp, #12
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00e      	beq.n	800935c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	6852      	ldr	r2, [r2, #4]
 800934a:	b2d2      	uxtb	r2, r2
 800934c:	4611      	mov	r1, r2
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009358:	2303      	movs	r3, #3
 800935a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800935c:	7bfb      	ldrb	r3, [r7, #15]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009366:	b480      	push	{r7}
 8009368:	b083      	sub	sp, #12
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	460b      	mov	r3, r1
 8009370:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009372:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009374:	4618      	mov	r0, r3
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800938c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800938e:	4618      	mov	r0, r3
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b086      	sub	sp, #24
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	460b      	mov	r3, r1
 80093a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	885b      	ldrh	r3, [r3, #2]
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	7812      	ldrb	r2, [r2, #0]
 80093bc:	4293      	cmp	r3, r2
 80093be:	d91f      	bls.n	8009400 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80093c6:	e013      	b.n	80093f0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093c8:	f107 030a 	add.w	r3, r7, #10
 80093cc:	4619      	mov	r1, r3
 80093ce:	6978      	ldr	r0, [r7, #20]
 80093d0:	f000 f81b 	bl	800940a <USBD_GetNextDesc>
 80093d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	785b      	ldrb	r3, [r3, #1]
 80093da:	2b05      	cmp	r3, #5
 80093dc:	d108      	bne.n	80093f0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	789b      	ldrb	r3, [r3, #2]
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d008      	beq.n	80093fe <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80093ec:	2300      	movs	r3, #0
 80093ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	885b      	ldrh	r3, [r3, #2]
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	897b      	ldrh	r3, [r7, #10]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d8e5      	bhi.n	80093c8 <USBD_GetEpDesc+0x2e>
 80093fc:	e000      	b.n	8009400 <USBD_GetEpDesc+0x66>
          break;
 80093fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009400:	693b      	ldr	r3, [r7, #16]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800940a:	b480      	push	{r7}
 800940c:	b085      	sub	sp, #20
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	7812      	ldrb	r2, [r2, #0]
 8009420:	4413      	add	r3, r2
 8009422:	b29a      	uxth	r2, r3
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	461a      	mov	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4413      	add	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009434:	68fb      	ldr	r3, [r7, #12]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009442:	b480      	push	{r7}
 8009444:	b087      	sub	sp, #28
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	3301      	adds	r3, #1
 8009458:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009460:	8a3b      	ldrh	r3, [r7, #16]
 8009462:	021b      	lsls	r3, r3, #8
 8009464:	b21a      	sxth	r2, r3
 8009466:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800946a:	4313      	orrs	r3, r2
 800946c:	b21b      	sxth	r3, r3
 800946e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009470:	89fb      	ldrh	r3, [r7, #14]
}
 8009472:	4618      	mov	r0, r3
 8009474:	371c      	adds	r7, #28
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
	...

08009480 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009496:	2b40      	cmp	r3, #64	@ 0x40
 8009498:	d005      	beq.n	80094a6 <USBD_StdDevReq+0x26>
 800949a:	2b40      	cmp	r3, #64	@ 0x40
 800949c:	d857      	bhi.n	800954e <USBD_StdDevReq+0xce>
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00f      	beq.n	80094c2 <USBD_StdDevReq+0x42>
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	d153      	bne.n	800954e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	32ae      	adds	r2, #174	@ 0xae
 80094b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	4798      	blx	r3
 80094bc:	4603      	mov	r3, r0
 80094be:	73fb      	strb	r3, [r7, #15]
      break;
 80094c0:	e04a      	b.n	8009558 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	785b      	ldrb	r3, [r3, #1]
 80094c6:	2b09      	cmp	r3, #9
 80094c8:	d83b      	bhi.n	8009542 <USBD_StdDevReq+0xc2>
 80094ca:	a201      	add	r2, pc, #4	@ (adr r2, 80094d0 <USBD_StdDevReq+0x50>)
 80094cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d0:	08009525 	.word	0x08009525
 80094d4:	08009539 	.word	0x08009539
 80094d8:	08009543 	.word	0x08009543
 80094dc:	0800952f 	.word	0x0800952f
 80094e0:	08009543 	.word	0x08009543
 80094e4:	08009503 	.word	0x08009503
 80094e8:	080094f9 	.word	0x080094f9
 80094ec:	08009543 	.word	0x08009543
 80094f0:	0800951b 	.word	0x0800951b
 80094f4:	0800950d 	.word	0x0800950d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fa3c 	bl	8009978 <USBD_GetDescriptor>
          break;
 8009500:	e024      	b.n	800954c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fbcb 	bl	8009ca0 <USBD_SetAddress>
          break;
 800950a:	e01f      	b.n	800954c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fc0a 	bl	8009d28 <USBD_SetConfig>
 8009514:	4603      	mov	r3, r0
 8009516:	73fb      	strb	r3, [r7, #15]
          break;
 8009518:	e018      	b.n	800954c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fcad 	bl	8009e7c <USBD_GetConfig>
          break;
 8009522:	e013      	b.n	800954c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 fcde 	bl	8009ee8 <USBD_GetStatus>
          break;
 800952c:	e00e      	b.n	800954c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fd0d 	bl	8009f50 <USBD_SetFeature>
          break;
 8009536:	e009      	b.n	800954c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fd31 	bl	8009fa2 <USBD_ClrFeature>
          break;
 8009540:	e004      	b.n	800954c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fd88 	bl	800a05a <USBD_CtlError>
          break;
 800954a:	bf00      	nop
      }
      break;
 800954c:	e004      	b.n	8009558 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fd82 	bl	800a05a <USBD_CtlError>
      break;
 8009556:	bf00      	nop
  }

  return ret;
 8009558:	7bfb      	ldrb	r3, [r7, #15]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop

08009564 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800957a:	2b40      	cmp	r3, #64	@ 0x40
 800957c:	d005      	beq.n	800958a <USBD_StdItfReq+0x26>
 800957e:	2b40      	cmp	r3, #64	@ 0x40
 8009580:	d852      	bhi.n	8009628 <USBD_StdItfReq+0xc4>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <USBD_StdItfReq+0x26>
 8009586:	2b20      	cmp	r3, #32
 8009588:	d14e      	bne.n	8009628 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009590:	b2db      	uxtb	r3, r3
 8009592:	3b01      	subs	r3, #1
 8009594:	2b02      	cmp	r3, #2
 8009596:	d840      	bhi.n	800961a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	889b      	ldrh	r3, [r3, #4]
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d836      	bhi.n	8009610 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	889b      	ldrh	r3, [r3, #4]
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff fedb 	bl	8009366 <USBD_CoreFindIF>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	2bff      	cmp	r3, #255	@ 0xff
 80095b8:	d01d      	beq.n	80095f6 <USBD_StdItfReq+0x92>
 80095ba:	7bbb      	ldrb	r3, [r7, #14]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d11a      	bne.n	80095f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80095c0:	7bba      	ldrb	r2, [r7, #14]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	32ae      	adds	r2, #174	@ 0xae
 80095c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00f      	beq.n	80095f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80095d0:	7bba      	ldrb	r2, [r7, #14]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095d8:	7bba      	ldrb	r2, [r7, #14]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	32ae      	adds	r2, #174	@ 0xae
 80095de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	4798      	blx	r3
 80095ea:	4603      	mov	r3, r0
 80095ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095ee:	e004      	b.n	80095fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80095f0:	2303      	movs	r3, #3
 80095f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095f4:	e001      	b.n	80095fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80095f6:	2303      	movs	r3, #3
 80095f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	88db      	ldrh	r3, [r3, #6]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d110      	bne.n	8009624 <USBD_StdItfReq+0xc0>
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10d      	bne.n	8009624 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fdfd 	bl	800a208 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800960e:	e009      	b.n	8009624 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fd21 	bl	800a05a <USBD_CtlError>
          break;
 8009618:	e004      	b.n	8009624 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fd1c 	bl	800a05a <USBD_CtlError>
          break;
 8009622:	e000      	b.n	8009626 <USBD_StdItfReq+0xc2>
          break;
 8009624:	bf00      	nop
      }
      break;
 8009626:	e004      	b.n	8009632 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fd15 	bl	800a05a <USBD_CtlError>
      break;
 8009630:	bf00      	nop
  }

  return ret;
 8009632:	7bfb      	ldrb	r3, [r7, #15]
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	889b      	ldrh	r3, [r3, #4]
 800964e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009658:	2b40      	cmp	r3, #64	@ 0x40
 800965a:	d007      	beq.n	800966c <USBD_StdEPReq+0x30>
 800965c:	2b40      	cmp	r3, #64	@ 0x40
 800965e:	f200 817f 	bhi.w	8009960 <USBD_StdEPReq+0x324>
 8009662:	2b00      	cmp	r3, #0
 8009664:	d02a      	beq.n	80096bc <USBD_StdEPReq+0x80>
 8009666:	2b20      	cmp	r3, #32
 8009668:	f040 817a 	bne.w	8009960 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7ff fe85 	bl	8009380 <USBD_CoreFindEP>
 8009676:	4603      	mov	r3, r0
 8009678:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800967a:	7b7b      	ldrb	r3, [r7, #13]
 800967c:	2bff      	cmp	r3, #255	@ 0xff
 800967e:	f000 8174 	beq.w	800996a <USBD_StdEPReq+0x32e>
 8009682:	7b7b      	ldrb	r3, [r7, #13]
 8009684:	2b00      	cmp	r3, #0
 8009686:	f040 8170 	bne.w	800996a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800968a:	7b7a      	ldrb	r2, [r7, #13]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009692:	7b7a      	ldrb	r2, [r7, #13]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	32ae      	adds	r2, #174	@ 0xae
 8009698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 8163 	beq.w	800996a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80096a4:	7b7a      	ldrb	r2, [r7, #13]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	32ae      	adds	r2, #174	@ 0xae
 80096aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
 80096b6:	4603      	mov	r3, r0
 80096b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80096ba:	e156      	b.n	800996a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	785b      	ldrb	r3, [r3, #1]
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d008      	beq.n	80096d6 <USBD_StdEPReq+0x9a>
 80096c4:	2b03      	cmp	r3, #3
 80096c6:	f300 8145 	bgt.w	8009954 <USBD_StdEPReq+0x318>
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f000 809b 	beq.w	8009806 <USBD_StdEPReq+0x1ca>
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d03c      	beq.n	800974e <USBD_StdEPReq+0x112>
 80096d4:	e13e      	b.n	8009954 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d002      	beq.n	80096e8 <USBD_StdEPReq+0xac>
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d016      	beq.n	8009714 <USBD_StdEPReq+0xd8>
 80096e6:	e02c      	b.n	8009742 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00d      	beq.n	800970a <USBD_StdEPReq+0xce>
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
 80096f0:	2b80      	cmp	r3, #128	@ 0x80
 80096f2:	d00a      	beq.n	800970a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096f4:	7bbb      	ldrb	r3, [r7, #14]
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 f9e3 	bl	800aac4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096fe:	2180      	movs	r1, #128	@ 0x80
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f001 f9df 	bl	800aac4 <USBD_LL_StallEP>
 8009706:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009708:	e020      	b.n	800974c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fca4 	bl	800a05a <USBD_CtlError>
              break;
 8009712:	e01b      	b.n	800974c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	885b      	ldrh	r3, [r3, #2]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10e      	bne.n	800973a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800971c:	7bbb      	ldrb	r3, [r7, #14]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00b      	beq.n	800973a <USBD_StdEPReq+0xfe>
 8009722:	7bbb      	ldrb	r3, [r7, #14]
 8009724:	2b80      	cmp	r3, #128	@ 0x80
 8009726:	d008      	beq.n	800973a <USBD_StdEPReq+0xfe>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	88db      	ldrh	r3, [r3, #6]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d104      	bne.n	800973a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f001 f9c5 	bl	800aac4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fd64 	bl	800a208 <USBD_CtlSendStatus>

              break;
 8009740:	e004      	b.n	800974c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fc88 	bl	800a05a <USBD_CtlError>
              break;
 800974a:	bf00      	nop
          }
          break;
 800974c:	e107      	b.n	800995e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b02      	cmp	r3, #2
 8009758:	d002      	beq.n	8009760 <USBD_StdEPReq+0x124>
 800975a:	2b03      	cmp	r3, #3
 800975c:	d016      	beq.n	800978c <USBD_StdEPReq+0x150>
 800975e:	e04b      	b.n	80097f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00d      	beq.n	8009782 <USBD_StdEPReq+0x146>
 8009766:	7bbb      	ldrb	r3, [r7, #14]
 8009768:	2b80      	cmp	r3, #128	@ 0x80
 800976a:	d00a      	beq.n	8009782 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800976c:	7bbb      	ldrb	r3, [r7, #14]
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f001 f9a7 	bl	800aac4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009776:	2180      	movs	r1, #128	@ 0x80
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f001 f9a3 	bl	800aac4 <USBD_LL_StallEP>
 800977e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009780:	e040      	b.n	8009804 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fc68 	bl	800a05a <USBD_CtlError>
              break;
 800978a:	e03b      	b.n	8009804 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	885b      	ldrh	r3, [r3, #2]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d136      	bne.n	8009802 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800979a:	2b00      	cmp	r3, #0
 800979c:	d004      	beq.n	80097a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	4619      	mov	r1, r3
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f001 f9ad 	bl	800ab02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 fd2d 	bl	800a208 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7ff fde4 	bl	8009380 <USBD_CoreFindEP>
 80097b8:	4603      	mov	r3, r0
 80097ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097bc:	7b7b      	ldrb	r3, [r7, #13]
 80097be:	2bff      	cmp	r3, #255	@ 0xff
 80097c0:	d01f      	beq.n	8009802 <USBD_StdEPReq+0x1c6>
 80097c2:	7b7b      	ldrb	r3, [r7, #13]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d11c      	bne.n	8009802 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80097c8:	7b7a      	ldrb	r2, [r7, #13]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097d0:	7b7a      	ldrb	r2, [r7, #13]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	32ae      	adds	r2, #174	@ 0xae
 80097d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d010      	beq.n	8009802 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097e0:	7b7a      	ldrb	r2, [r7, #13]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	32ae      	adds	r2, #174	@ 0xae
 80097e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	4798      	blx	r3
 80097f2:	4603      	mov	r3, r0
 80097f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80097f6:	e004      	b.n	8009802 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fc2d 	bl	800a05a <USBD_CtlError>
              break;
 8009800:	e000      	b.n	8009804 <USBD_StdEPReq+0x1c8>
              break;
 8009802:	bf00      	nop
          }
          break;
 8009804:	e0ab      	b.n	800995e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b02      	cmp	r3, #2
 8009810:	d002      	beq.n	8009818 <USBD_StdEPReq+0x1dc>
 8009812:	2b03      	cmp	r3, #3
 8009814:	d032      	beq.n	800987c <USBD_StdEPReq+0x240>
 8009816:	e097      	b.n	8009948 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009818:	7bbb      	ldrb	r3, [r7, #14]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d007      	beq.n	800982e <USBD_StdEPReq+0x1f2>
 800981e:	7bbb      	ldrb	r3, [r7, #14]
 8009820:	2b80      	cmp	r3, #128	@ 0x80
 8009822:	d004      	beq.n	800982e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f000 fc17 	bl	800a05a <USBD_CtlError>
                break;
 800982c:	e091      	b.n	8009952 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800982e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009832:	2b00      	cmp	r3, #0
 8009834:	da0b      	bge.n	800984e <USBD_StdEPReq+0x212>
 8009836:	7bbb      	ldrb	r3, [r7, #14]
 8009838:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	3310      	adds	r3, #16
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	4413      	add	r3, r2
 800984a:	3304      	adds	r3, #4
 800984c:	e00b      	b.n	8009866 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009854:	4613      	mov	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	4413      	add	r3, r2
 8009864:	3304      	adds	r3, #4
 8009866:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2202      	movs	r2, #2
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fc6d 	bl	800a154 <USBD_CtlSendData>
              break;
 800987a:	e06a      	b.n	8009952 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800987c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009880:	2b00      	cmp	r3, #0
 8009882:	da11      	bge.n	80098a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009884:	7bbb      	ldrb	r3, [r7, #14]
 8009886:	f003 020f 	and.w	r2, r3, #15
 800988a:	6879      	ldr	r1, [r7, #4]
 800988c:	4613      	mov	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	440b      	add	r3, r1
 8009896:	3324      	adds	r3, #36	@ 0x24
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d117      	bne.n	80098ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fbda 	bl	800a05a <USBD_CtlError>
                  break;
 80098a6:	e054      	b.n	8009952 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
 80098aa:	f003 020f 	and.w	r2, r3, #15
 80098ae:	6879      	ldr	r1, [r7, #4]
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	440b      	add	r3, r1
 80098ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d104      	bne.n	80098ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098c4:	6839      	ldr	r1, [r7, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 fbc7 	bl	800a05a <USBD_CtlError>
                  break;
 80098cc:	e041      	b.n	8009952 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	da0b      	bge.n	80098ee <USBD_StdEPReq+0x2b2>
 80098d6:	7bbb      	ldrb	r3, [r7, #14]
 80098d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098dc:	4613      	mov	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	3310      	adds	r3, #16
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	4413      	add	r3, r2
 80098ea:	3304      	adds	r3, #4
 80098ec:	e00b      	b.n	8009906 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098ee:	7bbb      	ldrb	r3, [r7, #14]
 80098f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	4413      	add	r3, r2
 8009904:	3304      	adds	r3, #4
 8009906:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009908:	7bbb      	ldrb	r3, [r7, #14]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <USBD_StdEPReq+0x2d8>
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	2b80      	cmp	r3, #128	@ 0x80
 8009912:	d103      	bne.n	800991c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2200      	movs	r2, #0
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	e00e      	b.n	800993a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f001 f90d 	bl	800ab40 <USBD_LL_IsStallEP>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	2201      	movs	r2, #1
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	e002      	b.n	800993a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2200      	movs	r2, #0
 8009938:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	2202      	movs	r2, #2
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fc07 	bl	800a154 <USBD_CtlSendData>
              break;
 8009946:	e004      	b.n	8009952 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fb85 	bl	800a05a <USBD_CtlError>
              break;
 8009950:	bf00      	nop
          }
          break;
 8009952:	e004      	b.n	800995e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009954:	6839      	ldr	r1, [r7, #0]
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fb7f 	bl	800a05a <USBD_CtlError>
          break;
 800995c:	bf00      	nop
      }
      break;
 800995e:	e005      	b.n	800996c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fb79 	bl	800a05a <USBD_CtlError>
      break;
 8009968:	e000      	b.n	800996c <USBD_StdEPReq+0x330>
      break;
 800996a:	bf00      	nop
  }

  return ret;
 800996c:	7bfb      	ldrb	r3, [r7, #15]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
	...

08009978 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009982:	2300      	movs	r3, #0
 8009984:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009986:	2300      	movs	r3, #0
 8009988:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	885b      	ldrh	r3, [r3, #2]
 8009992:	0a1b      	lsrs	r3, r3, #8
 8009994:	b29b      	uxth	r3, r3
 8009996:	3b01      	subs	r3, #1
 8009998:	2b0e      	cmp	r3, #14
 800999a:	f200 8152 	bhi.w	8009c42 <USBD_GetDescriptor+0x2ca>
 800999e:	a201      	add	r2, pc, #4	@ (adr r2, 80099a4 <USBD_GetDescriptor+0x2c>)
 80099a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a4:	08009a15 	.word	0x08009a15
 80099a8:	08009a2d 	.word	0x08009a2d
 80099ac:	08009a6d 	.word	0x08009a6d
 80099b0:	08009c43 	.word	0x08009c43
 80099b4:	08009c43 	.word	0x08009c43
 80099b8:	08009be3 	.word	0x08009be3
 80099bc:	08009c0f 	.word	0x08009c0f
 80099c0:	08009c43 	.word	0x08009c43
 80099c4:	08009c43 	.word	0x08009c43
 80099c8:	08009c43 	.word	0x08009c43
 80099cc:	08009c43 	.word	0x08009c43
 80099d0:	08009c43 	.word	0x08009c43
 80099d4:	08009c43 	.word	0x08009c43
 80099d8:	08009c43 	.word	0x08009c43
 80099dc:	080099e1 	.word	0x080099e1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00b      	beq.n	8009a04 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	7c12      	ldrb	r2, [r2, #16]
 80099f8:	f107 0108 	add.w	r1, r7, #8
 80099fc:	4610      	mov	r0, r2
 80099fe:	4798      	blx	r3
 8009a00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a02:	e126      	b.n	8009c52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009a04:	6839      	ldr	r1, [r7, #0]
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fb27 	bl	800a05a <USBD_CtlError>
        err++;
 8009a0c:	7afb      	ldrb	r3, [r7, #11]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	72fb      	strb	r3, [r7, #11]
      break;
 8009a12:	e11e      	b.n	8009c52 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	7c12      	ldrb	r2, [r2, #16]
 8009a20:	f107 0108 	add.w	r1, r7, #8
 8009a24:	4610      	mov	r0, r2
 8009a26:	4798      	blx	r3
 8009a28:	60f8      	str	r0, [r7, #12]
      break;
 8009a2a:	e112      	b.n	8009c52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	7c1b      	ldrb	r3, [r3, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10d      	bne.n	8009a50 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3c:	f107 0208 	add.w	r2, r7, #8
 8009a40:	4610      	mov	r0, r2
 8009a42:	4798      	blx	r3
 8009a44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a4e:	e100      	b.n	8009c52 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a58:	f107 0208 	add.w	r2, r7, #8
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4798      	blx	r3
 8009a60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3301      	adds	r3, #1
 8009a66:	2202      	movs	r2, #2
 8009a68:	701a      	strb	r2, [r3, #0]
      break;
 8009a6a:	e0f2      	b.n	8009c52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	885b      	ldrh	r3, [r3, #2]
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b05      	cmp	r3, #5
 8009a74:	f200 80ac 	bhi.w	8009bd0 <USBD_GetDescriptor+0x258>
 8009a78:	a201      	add	r2, pc, #4	@ (adr r2, 8009a80 <USBD_GetDescriptor+0x108>)
 8009a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009a99 	.word	0x08009a99
 8009a84:	08009acd 	.word	0x08009acd
 8009a88:	08009b01 	.word	0x08009b01
 8009a8c:	08009b35 	.word	0x08009b35
 8009a90:	08009b69 	.word	0x08009b69
 8009a94:	08009b9d 	.word	0x08009b9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	7c12      	ldrb	r2, [r2, #16]
 8009ab0:	f107 0108 	add.w	r1, r7, #8
 8009ab4:	4610      	mov	r0, r2
 8009ab6:	4798      	blx	r3
 8009ab8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aba:	e091      	b.n	8009be0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 facb 	bl	800a05a <USBD_CtlError>
            err++;
 8009ac4:	7afb      	ldrb	r3, [r7, #11]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	72fb      	strb	r3, [r7, #11]
          break;
 8009aca:	e089      	b.n	8009be0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00b      	beq.n	8009af0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	7c12      	ldrb	r2, [r2, #16]
 8009ae4:	f107 0108 	add.w	r1, r7, #8
 8009ae8:	4610      	mov	r0, r2
 8009aea:	4798      	blx	r3
 8009aec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aee:	e077      	b.n	8009be0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fab1 	bl	800a05a <USBD_CtlError>
            err++;
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	3301      	adds	r3, #1
 8009afc:	72fb      	strb	r3, [r7, #11]
          break;
 8009afe:	e06f      	b.n	8009be0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00b      	beq.n	8009b24 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	7c12      	ldrb	r2, [r2, #16]
 8009b18:	f107 0108 	add.w	r1, r7, #8
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	4798      	blx	r3
 8009b20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b22:	e05d      	b.n	8009be0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fa97 	bl	800a05a <USBD_CtlError>
            err++;
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	72fb      	strb	r3, [r7, #11]
          break;
 8009b32:	e055      	b.n	8009be0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b3a:	691b      	ldr	r3, [r3, #16]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	7c12      	ldrb	r2, [r2, #16]
 8009b4c:	f107 0108 	add.w	r1, r7, #8
 8009b50:	4610      	mov	r0, r2
 8009b52:	4798      	blx	r3
 8009b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b56:	e043      	b.n	8009be0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fa7d 	bl	800a05a <USBD_CtlError>
            err++;
 8009b60:	7afb      	ldrb	r3, [r7, #11]
 8009b62:	3301      	adds	r3, #1
 8009b64:	72fb      	strb	r3, [r7, #11]
          break;
 8009b66:	e03b      	b.n	8009be0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	7c12      	ldrb	r2, [r2, #16]
 8009b80:	f107 0108 	add.w	r1, r7, #8
 8009b84:	4610      	mov	r0, r2
 8009b86:	4798      	blx	r3
 8009b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b8a:	e029      	b.n	8009be0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fa63 	bl	800a05a <USBD_CtlError>
            err++;
 8009b94:	7afb      	ldrb	r3, [r7, #11]
 8009b96:	3301      	adds	r3, #1
 8009b98:	72fb      	strb	r3, [r7, #11]
          break;
 8009b9a:	e021      	b.n	8009be0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00b      	beq.n	8009bc0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	7c12      	ldrb	r2, [r2, #16]
 8009bb4:	f107 0108 	add.w	r1, r7, #8
 8009bb8:	4610      	mov	r0, r2
 8009bba:	4798      	blx	r3
 8009bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bbe:	e00f      	b.n	8009be0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa49 	bl	800a05a <USBD_CtlError>
            err++;
 8009bc8:	7afb      	ldrb	r3, [r7, #11]
 8009bca:	3301      	adds	r3, #1
 8009bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8009bce:	e007      	b.n	8009be0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009bd0:	6839      	ldr	r1, [r7, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 fa41 	bl	800a05a <USBD_CtlError>
          err++;
 8009bd8:	7afb      	ldrb	r3, [r7, #11]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009bde:	bf00      	nop
      }
      break;
 8009be0:	e037      	b.n	8009c52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	7c1b      	ldrb	r3, [r3, #16]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d109      	bne.n	8009bfe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bf2:	f107 0208 	add.w	r2, r7, #8
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	4798      	blx	r3
 8009bfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bfc:	e029      	b.n	8009c52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009bfe:	6839      	ldr	r1, [r7, #0]
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fa2a 	bl	800a05a <USBD_CtlError>
        err++;
 8009c06:	7afb      	ldrb	r3, [r7, #11]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009c0c:	e021      	b.n	8009c52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	7c1b      	ldrb	r3, [r3, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d10d      	bne.n	8009c32 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c1e:	f107 0208 	add.w	r2, r7, #8
 8009c22:	4610      	mov	r0, r2
 8009c24:	4798      	blx	r3
 8009c26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	2207      	movs	r2, #7
 8009c2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c30:	e00f      	b.n	8009c52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fa10 	bl	800a05a <USBD_CtlError>
        err++;
 8009c3a:	7afb      	ldrb	r3, [r7, #11]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c40:	e007      	b.n	8009c52 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fa08 	bl	800a05a <USBD_CtlError>
      err++;
 8009c4a:	7afb      	ldrb	r3, [r7, #11]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	72fb      	strb	r3, [r7, #11]
      break;
 8009c50:	bf00      	nop
  }

  if (err != 0U)
 8009c52:	7afb      	ldrb	r3, [r7, #11]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11e      	bne.n	8009c96 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	88db      	ldrh	r3, [r3, #6]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d016      	beq.n	8009c8e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009c60:	893b      	ldrh	r3, [r7, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00e      	beq.n	8009c84 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	88da      	ldrh	r2, [r3, #6]
 8009c6a:	893b      	ldrh	r3, [r7, #8]
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	bf28      	it	cs
 8009c70:	4613      	movcs	r3, r2
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c76:	893b      	ldrh	r3, [r7, #8]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	68f9      	ldr	r1, [r7, #12]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fa69 	bl	800a154 <USBD_CtlSendData>
 8009c82:	e009      	b.n	8009c98 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f9e7 	bl	800a05a <USBD_CtlError>
 8009c8c:	e004      	b.n	8009c98 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 faba 	bl	800a208 <USBD_CtlSendStatus>
 8009c94:	e000      	b.n	8009c98 <USBD_GetDescriptor+0x320>
    return;
 8009c96:	bf00      	nop
  }
}
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop

08009ca0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	889b      	ldrh	r3, [r3, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d131      	bne.n	8009d16 <USBD_SetAddress+0x76>
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	88db      	ldrh	r3, [r3, #6]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d12d      	bne.n	8009d16 <USBD_SetAddress+0x76>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	885b      	ldrh	r3, [r3, #2]
 8009cbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8009cc0:	d829      	bhi.n	8009d16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	885b      	ldrh	r3, [r3, #2]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ccc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	d104      	bne.n	8009ce4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f9bc 	bl	800a05a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce2:	e01d      	b.n	8009d20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	7bfa      	ldrb	r2, [r7, #15]
 8009ce8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 ff51 	bl	800ab98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fa86 	bl	800a208 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d004      	beq.n	8009d0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2202      	movs	r2, #2
 8009d06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d0a:	e009      	b.n	8009d20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d14:	e004      	b.n	8009d20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f99e 	bl	800a05a <USBD_CtlError>
  }
}
 8009d1e:	bf00      	nop
 8009d20:	bf00      	nop
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	885b      	ldrh	r3, [r3, #2]
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8009e78 <USBD_SetConfig+0x150>)
 8009d3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d40:	4b4d      	ldr	r3, [pc, #308]	@ (8009e78 <USBD_SetConfig+0x150>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d905      	bls.n	8009d54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f985 	bl	800a05a <USBD_CtlError>
    return USBD_FAIL;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e08c      	b.n	8009e6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d002      	beq.n	8009d66 <USBD_SetConfig+0x3e>
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d029      	beq.n	8009db8 <USBD_SetConfig+0x90>
 8009d64:	e075      	b.n	8009e52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d66:	4b44      	ldr	r3, [pc, #272]	@ (8009e78 <USBD_SetConfig+0x150>)
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d020      	beq.n	8009db0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d6e:	4b42      	ldr	r3, [pc, #264]	@ (8009e78 <USBD_SetConfig+0x150>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d78:	4b3f      	ldr	r3, [pc, #252]	@ (8009e78 <USBD_SetConfig+0x150>)
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7fe ffb9 	bl	8008cf6 <USBD_SetClassConfig>
 8009d84:	4603      	mov	r3, r0
 8009d86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d008      	beq.n	8009da0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f962 	bl	800a05a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2202      	movs	r2, #2
 8009d9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d9e:	e065      	b.n	8009e6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fa31 	bl	800a208 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2203      	movs	r2, #3
 8009daa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009dae:	e05d      	b.n	8009e6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fa29 	bl	800a208 <USBD_CtlSendStatus>
      break;
 8009db6:	e059      	b.n	8009e6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009db8:	4b2f      	ldr	r3, [pc, #188]	@ (8009e78 <USBD_SetConfig+0x150>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d112      	bne.n	8009de6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8009e78 <USBD_SetConfig+0x150>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dd2:	4b29      	ldr	r3, [pc, #164]	@ (8009e78 <USBD_SetConfig+0x150>)
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7fe ffa8 	bl	8008d2e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 fa12 	bl	800a208 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009de4:	e042      	b.n	8009e6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009de6:	4b24      	ldr	r3, [pc, #144]	@ (8009e78 <USBD_SetConfig+0x150>)
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	461a      	mov	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d02a      	beq.n	8009e4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7fe ff96 	bl	8008d2e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009e02:	4b1d      	ldr	r3, [pc, #116]	@ (8009e78 <USBD_SetConfig+0x150>)
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8009e78 <USBD_SetConfig+0x150>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7fe ff6f 	bl	8008cf6 <USBD_SetClassConfig>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00f      	beq.n	8009e42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f918 	bl	800a05a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7fe ff7b 	bl	8008d2e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009e40:	e014      	b.n	8009e6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f9e0 	bl	800a208 <USBD_CtlSendStatus>
      break;
 8009e48:	e010      	b.n	8009e6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f9dc 	bl	800a208 <USBD_CtlSendStatus>
      break;
 8009e50:	e00c      	b.n	8009e6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009e52:	6839      	ldr	r1, [r7, #0]
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 f900 	bl	800a05a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009e5a:	4b07      	ldr	r3, [pc, #28]	@ (8009e78 <USBD_SetConfig+0x150>)
 8009e5c:	781b      	ldrb	r3, [r3, #0]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f7fe ff64 	bl	8008d2e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e66:	2303      	movs	r3, #3
 8009e68:	73fb      	strb	r3, [r7, #15]
      break;
 8009e6a:	bf00      	nop
  }

  return ret;
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	2006dbb0 	.word	0x2006dbb0

08009e7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	88db      	ldrh	r3, [r3, #6]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d004      	beq.n	8009e98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f8e2 	bl	800a05a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e96:	e023      	b.n	8009ee0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	dc02      	bgt.n	8009eaa <USBD_GetConfig+0x2e>
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	dc03      	bgt.n	8009eb0 <USBD_GetConfig+0x34>
 8009ea8:	e015      	b.n	8009ed6 <USBD_GetConfig+0x5a>
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	d00b      	beq.n	8009ec6 <USBD_GetConfig+0x4a>
 8009eae:	e012      	b.n	8009ed6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	3308      	adds	r3, #8
 8009eba:	2201      	movs	r2, #1
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f948 	bl	800a154 <USBD_CtlSendData>
        break;
 8009ec4:	e00c      	b.n	8009ee0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	3304      	adds	r3, #4
 8009eca:	2201      	movs	r2, #1
 8009ecc:	4619      	mov	r1, r3
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f940 	bl	800a154 <USBD_CtlSendData>
        break;
 8009ed4:	e004      	b.n	8009ee0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f8be 	bl	800a05a <USBD_CtlError>
        break;
 8009ede:	bf00      	nop
}
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	3b01      	subs	r3, #1
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d81e      	bhi.n	8009f3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	88db      	ldrh	r3, [r3, #6]
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d004      	beq.n	8009f12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009f08:	6839      	ldr	r1, [r7, #0]
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f8a5 	bl	800a05a <USBD_CtlError>
        break;
 8009f10:	e01a      	b.n	8009f48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d005      	beq.n	8009f2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	f043 0202 	orr.w	r2, r3, #2
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	330c      	adds	r3, #12
 8009f32:	2202      	movs	r2, #2
 8009f34:	4619      	mov	r1, r3
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f90c 	bl	800a154 <USBD_CtlSendData>
      break;
 8009f3c:	e004      	b.n	8009f48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009f3e:	6839      	ldr	r1, [r7, #0]
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f88a 	bl	800a05a <USBD_CtlError>
      break;
 8009f46:	bf00      	nop
  }
}
 8009f48:	bf00      	nop
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	885b      	ldrh	r3, [r3, #2]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d107      	bne.n	8009f72 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f94c 	bl	800a208 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f70:	e013      	b.n	8009f9a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	885b      	ldrh	r3, [r3, #2]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d10b      	bne.n	8009f92 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	889b      	ldrh	r3, [r3, #4]
 8009f7e:	0a1b      	lsrs	r3, r3, #8
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f93c 	bl	800a208 <USBD_CtlSendStatus>
}
 8009f90:	e003      	b.n	8009f9a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f860 	bl	800a05a <USBD_CtlError>
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d80b      	bhi.n	8009fd2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	885b      	ldrh	r3, [r3, #2]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d10c      	bne.n	8009fdc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f91c 	bl	800a208 <USBD_CtlSendStatus>
      }
      break;
 8009fd0:	e004      	b.n	8009fdc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f840 	bl	800a05a <USBD_CtlError>
      break;
 8009fda:	e000      	b.n	8009fde <USBD_ClrFeature+0x3c>
      break;
 8009fdc:	bf00      	nop
  }
}
 8009fde:	bf00      	nop
 8009fe0:	3708      	adds	r7, #8
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	781a      	ldrb	r2, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3301      	adds	r3, #1
 800a000:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	781a      	ldrb	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	3301      	adds	r3, #1
 800a00e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f7ff fa16 	bl	8009442 <SWAPBYTE>
 800a016:	4603      	mov	r3, r0
 800a018:	461a      	mov	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	3301      	adds	r3, #1
 800a022:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	3301      	adds	r3, #1
 800a028:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f7ff fa09 	bl	8009442 <SWAPBYTE>
 800a030:	4603      	mov	r3, r0
 800a032:	461a      	mov	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	3301      	adds	r3, #1
 800a03c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	3301      	adds	r3, #1
 800a042:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f7ff f9fc 	bl	8009442 <SWAPBYTE>
 800a04a:	4603      	mov	r3, r0
 800a04c:	461a      	mov	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	80da      	strh	r2, [r3, #6]
}
 800a052:	bf00      	nop
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a064:	2180      	movs	r1, #128	@ 0x80
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fd2c 	bl	800aac4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a06c:	2100      	movs	r1, #0
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fd28 	bl	800aac4 <USBD_LL_StallEP>
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a088:	2300      	movs	r3, #0
 800a08a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d042      	beq.n	800a118 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a096:	6938      	ldr	r0, [r7, #16]
 800a098:	f000 f842 	bl	800a120 <USBD_GetLen>
 800a09c:	4603      	mov	r3, r0
 800a09e:	3301      	adds	r3, #1
 800a0a0:	005b      	lsls	r3, r3, #1
 800a0a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0a6:	d808      	bhi.n	800a0ba <USBD_GetString+0x3e>
 800a0a8:	6938      	ldr	r0, [r7, #16]
 800a0aa:	f000 f839 	bl	800a120 <USBD_GetLen>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	e001      	b.n	800a0be <USBD_GetString+0x42>
 800a0ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	68ba      	ldr	r2, [r7, #8]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	7812      	ldrb	r2, [r2, #0]
 800a0cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	4413      	add	r3, r2
 800a0da:	2203      	movs	r2, #3
 800a0dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a0de:	7dfb      	ldrb	r3, [r7, #23]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a0e4:	e013      	b.n	800a10e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a0e6:	7dfb      	ldrb	r3, [r7, #23]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	7812      	ldrb	r2, [r2, #0]
 800a0f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	613b      	str	r3, [r7, #16]
    idx++;
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a0fe:	7dfb      	ldrb	r3, [r7, #23]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	4413      	add	r3, r2
 800a104:	2200      	movs	r2, #0
 800a106:	701a      	strb	r2, [r3, #0]
    idx++;
 800a108:	7dfb      	ldrb	r3, [r7, #23]
 800a10a:	3301      	adds	r3, #1
 800a10c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e7      	bne.n	800a0e6 <USBD_GetString+0x6a>
 800a116:	e000      	b.n	800a11a <USBD_GetString+0x9e>
    return;
 800a118:	bf00      	nop
  }
}
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a130:	e005      	b.n	800a13e <USBD_GetLen+0x1e>
  {
    len++;
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	3301      	adds	r3, #1
 800a136:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	3301      	adds	r3, #1
 800a13c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1f5      	bne.n	800a132 <USBD_GetLen+0x12>
  }

  return len;
 800a146:	7bfb      	ldrb	r3, [r7, #15]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2202      	movs	r2, #2
 800a164:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	2100      	movs	r1, #0
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 fd2b 	bl	800abd6 <USBD_LL_Transmit>

  return USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	2100      	movs	r1, #0
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 fd1a 	bl	800abd6 <USBD_LL_Transmit>

  return USBD_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2203      	movs	r2, #3
 800a1bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 fd1e 	bl	800ac18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3710      	adds	r7, #16
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fd0d 	bl	800ac18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2204      	movs	r2, #4
 800a214:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a218:	2300      	movs	r3, #0
 800a21a:	2200      	movs	r2, #0
 800a21c:	2100      	movs	r1, #0
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fcd9 	bl	800abd6 <USBD_LL_Transmit>

  return USBD_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b082      	sub	sp, #8
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2205      	movs	r2, #5
 800a23a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a23e:	2300      	movs	r3, #0
 800a240:	2200      	movs	r2, #0
 800a242:	2100      	movs	r1, #0
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fce7 	bl	800ac18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a258:	2200      	movs	r2, #0
 800a25a:	4912      	ldr	r1, [pc, #72]	@ (800a2a4 <MX_USB_DEVICE_Init+0x50>)
 800a25c:	4812      	ldr	r0, [pc, #72]	@ (800a2a8 <MX_USB_DEVICE_Init+0x54>)
 800a25e:	f7fe fccd 	bl	8008bfc <USBD_Init>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d001      	beq.n	800a26c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a268:	f7f6 fd46 	bl	8000cf8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a26c:	490f      	ldr	r1, [pc, #60]	@ (800a2ac <MX_USB_DEVICE_Init+0x58>)
 800a26e:	480e      	ldr	r0, [pc, #56]	@ (800a2a8 <MX_USB_DEVICE_Init+0x54>)
 800a270:	f7fe fcf4 	bl	8008c5c <USBD_RegisterClass>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a27a:	f7f6 fd3d 	bl	8000cf8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a27e:	490c      	ldr	r1, [pc, #48]	@ (800a2b0 <MX_USB_DEVICE_Init+0x5c>)
 800a280:	4809      	ldr	r0, [pc, #36]	@ (800a2a8 <MX_USB_DEVICE_Init+0x54>)
 800a282:	f7fe fbeb 	bl	8008a5c <USBD_CDC_RegisterInterface>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d001      	beq.n	800a290 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a28c:	f7f6 fd34 	bl	8000cf8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a290:	4805      	ldr	r0, [pc, #20]	@ (800a2a8 <MX_USB_DEVICE_Init+0x54>)
 800a292:	f7fe fd19 	bl	8008cc8 <USBD_Start>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a29c:	f7f6 fd2c 	bl	8000cf8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2a0:	bf00      	nop
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	200000b0 	.word	0x200000b0
 800a2a8:	2006dbb4 	.word	0x2006dbb4
 800a2ac:	2000001c 	.word	0x2000001c
 800a2b0:	2000009c 	.word	0x2000009c

0800a2b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	4905      	ldr	r1, [pc, #20]	@ (800a2d0 <CDC_Init_FS+0x1c>)
 800a2bc:	4805      	ldr	r0, [pc, #20]	@ (800a2d4 <CDC_Init_FS+0x20>)
 800a2be:	f7fe fbe7 	bl	8008a90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a2c2:	4905      	ldr	r1, [pc, #20]	@ (800a2d8 <CDC_Init_FS+0x24>)
 800a2c4:	4803      	ldr	r0, [pc, #12]	@ (800a2d4 <CDC_Init_FS+0x20>)
 800a2c6:	f7fe fc05 	bl	8008ad4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a2ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	2006e690 	.word	0x2006e690
 800a2d4:	2006dbb4 	.word	0x2006dbb4
 800a2d8:	2006de90 	.word	0x2006de90

0800a2dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a2e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	6039      	str	r1, [r7, #0]
 800a2f6:	71fb      	strb	r3, [r7, #7]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a2fc:	79fb      	ldrb	r3, [r7, #7]
 800a2fe:	2b23      	cmp	r3, #35	@ 0x23
 800a300:	d84a      	bhi.n	800a398 <CDC_Control_FS+0xac>
 800a302:	a201      	add	r2, pc, #4	@ (adr r2, 800a308 <CDC_Control_FS+0x1c>)
 800a304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a308:	0800a399 	.word	0x0800a399
 800a30c:	0800a399 	.word	0x0800a399
 800a310:	0800a399 	.word	0x0800a399
 800a314:	0800a399 	.word	0x0800a399
 800a318:	0800a399 	.word	0x0800a399
 800a31c:	0800a399 	.word	0x0800a399
 800a320:	0800a399 	.word	0x0800a399
 800a324:	0800a399 	.word	0x0800a399
 800a328:	0800a399 	.word	0x0800a399
 800a32c:	0800a399 	.word	0x0800a399
 800a330:	0800a399 	.word	0x0800a399
 800a334:	0800a399 	.word	0x0800a399
 800a338:	0800a399 	.word	0x0800a399
 800a33c:	0800a399 	.word	0x0800a399
 800a340:	0800a399 	.word	0x0800a399
 800a344:	0800a399 	.word	0x0800a399
 800a348:	0800a399 	.word	0x0800a399
 800a34c:	0800a399 	.word	0x0800a399
 800a350:	0800a399 	.word	0x0800a399
 800a354:	0800a399 	.word	0x0800a399
 800a358:	0800a399 	.word	0x0800a399
 800a35c:	0800a399 	.word	0x0800a399
 800a360:	0800a399 	.word	0x0800a399
 800a364:	0800a399 	.word	0x0800a399
 800a368:	0800a399 	.word	0x0800a399
 800a36c:	0800a399 	.word	0x0800a399
 800a370:	0800a399 	.word	0x0800a399
 800a374:	0800a399 	.word	0x0800a399
 800a378:	0800a399 	.word	0x0800a399
 800a37c:	0800a399 	.word	0x0800a399
 800a380:	0800a399 	.word	0x0800a399
 800a384:	0800a399 	.word	0x0800a399
 800a388:	0800a399 	.word	0x0800a399
 800a38c:	0800a399 	.word	0x0800a399
 800a390:	0800a399 	.word	0x0800a399
 800a394:	0800a399 	.word	0x0800a399
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a398:	bf00      	nop
  }

  return (USBD_OK);
 800a39a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a3b2:	6879      	ldr	r1, [r7, #4]
 800a3b4:	4805      	ldr	r0, [pc, #20]	@ (800a3cc <CDC_Receive_FS+0x24>)
 800a3b6:	f7fe fb8d 	bl	8008ad4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a3ba:	4804      	ldr	r0, [pc, #16]	@ (800a3cc <CDC_Receive_FS+0x24>)
 800a3bc:	f7fe fbe8 	bl	8008b90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a3c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	2006dbb4 	.word	0x2006dbb4

0800a3d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a3e0:	4b0d      	ldr	r3, [pc, #52]	@ (800a418 <CDC_Transmit_FS+0x48>)
 800a3e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a3e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e00b      	b.n	800a40e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a3f6:	887b      	ldrh	r3, [r7, #2]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	6879      	ldr	r1, [r7, #4]
 800a3fc:	4806      	ldr	r0, [pc, #24]	@ (800a418 <CDC_Transmit_FS+0x48>)
 800a3fe:	f7fe fb47 	bl	8008a90 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a402:	4805      	ldr	r0, [pc, #20]	@ (800a418 <CDC_Transmit_FS+0x48>)
 800a404:	f7fe fb84 	bl	8008b10 <USBD_CDC_TransmitPacket>
 800a408:	4603      	mov	r3, r0
 800a40a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	2006dbb4 	.word	0x2006dbb4

0800a41c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	4613      	mov	r3, r2
 800a428:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a42a:	2300      	movs	r3, #0
 800a42c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a42e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a432:	4618      	mov	r0, r3
 800a434:	371c      	adds	r7, #28
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
	...

0800a440 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	4603      	mov	r3, r0
 800a448:	6039      	str	r1, [r7, #0]
 800a44a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2212      	movs	r2, #18
 800a450:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a452:	4b03      	ldr	r3, [pc, #12]	@ (800a460 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a454:	4618      	mov	r0, r3
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	200000d0 	.word	0x200000d0

0800a464 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4603      	mov	r3, r0
 800a46c:	6039      	str	r1, [r7, #0]
 800a46e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2204      	movs	r2, #4
 800a474:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a476:	4b03      	ldr	r3, [pc, #12]	@ (800a484 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a478:	4618      	mov	r0, r3
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr
 800a484:	200000f0 	.word	0x200000f0

0800a488 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	4603      	mov	r3, r0
 800a490:	6039      	str	r1, [r7, #0]
 800a492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a494:	79fb      	ldrb	r3, [r7, #7]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d105      	bne.n	800a4a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	4907      	ldr	r1, [pc, #28]	@ (800a4bc <USBD_FS_ProductStrDescriptor+0x34>)
 800a49e:	4808      	ldr	r0, [pc, #32]	@ (800a4c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4a0:	f7ff fdec 	bl	800a07c <USBD_GetString>
 800a4a4:	e004      	b.n	800a4b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	4904      	ldr	r1, [pc, #16]	@ (800a4bc <USBD_FS_ProductStrDescriptor+0x34>)
 800a4aa:	4805      	ldr	r0, [pc, #20]	@ (800a4c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a4ac:	f7ff fde6 	bl	800a07c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4b0:	4b02      	ldr	r3, [pc, #8]	@ (800a4bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3708      	adds	r7, #8
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	2006ee90 	.word	0x2006ee90
 800a4c0:	0800b030 	.word	0x0800b030

0800a4c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	6039      	str	r1, [r7, #0]
 800a4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	4904      	ldr	r1, [pc, #16]	@ (800a4e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a4d4:	4804      	ldr	r0, [pc, #16]	@ (800a4e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a4d6:	f7ff fdd1 	bl	800a07c <USBD_GetString>
  return USBD_StrDesc;
 800a4da:	4b02      	ldr	r3, [pc, #8]	@ (800a4e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	2006ee90 	.word	0x2006ee90
 800a4e8:	0800b048 	.word	0x0800b048

0800a4ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	6039      	str	r1, [r7, #0]
 800a4f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	221a      	movs	r2, #26
 800a4fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a4fe:	f000 f855 	bl	800a5ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a502:	4b02      	ldr	r3, [pc, #8]	@ (800a50c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	200000f4 	.word	0x200000f4

0800a510 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	4603      	mov	r3, r0
 800a518:	6039      	str	r1, [r7, #0]
 800a51a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a51c:	79fb      	ldrb	r3, [r7, #7]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d105      	bne.n	800a52e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	4907      	ldr	r1, [pc, #28]	@ (800a544 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a526:	4808      	ldr	r0, [pc, #32]	@ (800a548 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a528:	f7ff fda8 	bl	800a07c <USBD_GetString>
 800a52c:	e004      	b.n	800a538 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	4904      	ldr	r1, [pc, #16]	@ (800a544 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a532:	4805      	ldr	r0, [pc, #20]	@ (800a548 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a534:	f7ff fda2 	bl	800a07c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a538:	4b02      	ldr	r3, [pc, #8]	@ (800a544 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	2006ee90 	.word	0x2006ee90
 800a548:	0800b05c 	.word	0x0800b05c

0800a54c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	4603      	mov	r3, r0
 800a554:	6039      	str	r1, [r7, #0]
 800a556:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a558:	79fb      	ldrb	r3, [r7, #7]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d105      	bne.n	800a56a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	4907      	ldr	r1, [pc, #28]	@ (800a580 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a562:	4808      	ldr	r0, [pc, #32]	@ (800a584 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a564:	f7ff fd8a 	bl	800a07c <USBD_GetString>
 800a568:	e004      	b.n	800a574 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a56a:	683a      	ldr	r2, [r7, #0]
 800a56c:	4904      	ldr	r1, [pc, #16]	@ (800a580 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a56e:	4805      	ldr	r0, [pc, #20]	@ (800a584 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a570:	f7ff fd84 	bl	800a07c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a574:	4b02      	ldr	r3, [pc, #8]	@ (800a580 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a576:	4618      	mov	r0, r3
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	2006ee90 	.word	0x2006ee90
 800a584:	0800b068 	.word	0x0800b068

0800a588 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	6039      	str	r1, [r7, #0]
 800a592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	220c      	movs	r2, #12
 800a598:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a59a:	4b03      	ldr	r3, [pc, #12]	@ (800a5a8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	200000e4 	.word	0x200000e4

0800a5ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a5b2:	4b0f      	ldr	r3, [pc, #60]	@ (800a5f0 <Get_SerialNum+0x44>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a5b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a5f4 <Get_SerialNum+0x48>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a5be:	4b0e      	ldr	r3, [pc, #56]	@ (800a5f8 <Get_SerialNum+0x4c>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d009      	beq.n	800a5e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a5d2:	2208      	movs	r2, #8
 800a5d4:	4909      	ldr	r1, [pc, #36]	@ (800a5fc <Get_SerialNum+0x50>)
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 f814 	bl	800a604 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a5dc:	2204      	movs	r2, #4
 800a5de:	4908      	ldr	r1, [pc, #32]	@ (800a600 <Get_SerialNum+0x54>)
 800a5e0:	68b8      	ldr	r0, [r7, #8]
 800a5e2:	f000 f80f 	bl	800a604 <IntToUnicode>
  }
}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	1ff0f420 	.word	0x1ff0f420
 800a5f4:	1ff0f424 	.word	0x1ff0f424
 800a5f8:	1ff0f428 	.word	0x1ff0f428
 800a5fc:	200000f6 	.word	0x200000f6
 800a600:	20000106 	.word	0x20000106

0800a604 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a604:	b480      	push	{r7}
 800a606:	b087      	sub	sp, #28
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	4613      	mov	r3, r2
 800a610:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a616:	2300      	movs	r3, #0
 800a618:	75fb      	strb	r3, [r7, #23]
 800a61a:	e027      	b.n	800a66c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	0f1b      	lsrs	r3, r3, #28
 800a620:	2b09      	cmp	r3, #9
 800a622:	d80b      	bhi.n	800a63c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	0f1b      	lsrs	r3, r3, #28
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	005b      	lsls	r3, r3, #1
 800a62e:	4619      	mov	r1, r3
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	440b      	add	r3, r1
 800a634:	3230      	adds	r2, #48	@ 0x30
 800a636:	b2d2      	uxtb	r2, r2
 800a638:	701a      	strb	r2, [r3, #0]
 800a63a:	e00a      	b.n	800a652 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	0f1b      	lsrs	r3, r3, #28
 800a640:	b2da      	uxtb	r2, r3
 800a642:	7dfb      	ldrb	r3, [r7, #23]
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	4619      	mov	r1, r3
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	440b      	add	r3, r1
 800a64c:	3237      	adds	r2, #55	@ 0x37
 800a64e:	b2d2      	uxtb	r2, r2
 800a650:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	011b      	lsls	r3, r3, #4
 800a656:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	005b      	lsls	r3, r3, #1
 800a65c:	3301      	adds	r3, #1
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	4413      	add	r3, r2
 800a662:	2200      	movs	r2, #0
 800a664:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a666:	7dfb      	ldrb	r3, [r7, #23]
 800a668:	3301      	adds	r3, #1
 800a66a:	75fb      	strb	r3, [r7, #23]
 800a66c:	7dfa      	ldrb	r2, [r7, #23]
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	429a      	cmp	r2, r3
 800a672:	d3d3      	bcc.n	800a61c <IntToUnicode+0x18>
  }
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
	...

0800a684 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b0ae      	sub	sp, #184	@ 0xb8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a68c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a690:	2200      	movs	r2, #0
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	605a      	str	r2, [r3, #4]
 800a696:	609a      	str	r2, [r3, #8]
 800a698:	60da      	str	r2, [r3, #12]
 800a69a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a69c:	f107 0314 	add.w	r3, r7, #20
 800a6a0:	2290      	movs	r2, #144	@ 0x90
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 fc29 	bl	800aefc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a6b2:	d161      	bne.n	800a778 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a6b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a6b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a6c0:	f107 0314 	add.w	r3, r7, #20
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fa fcdb 	bl	8005080 <HAL_RCCEx_PeriphCLKConfig>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a6d0:	f7f6 fb12 	bl	8000cf8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6d4:	4b2a      	ldr	r3, [pc, #168]	@ (800a780 <HAL_PCD_MspInit+0xfc>)
 800a6d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d8:	4a29      	ldr	r2, [pc, #164]	@ (800a780 <HAL_PCD_MspInit+0xfc>)
 800a6da:	f043 0301 	orr.w	r3, r3, #1
 800a6de:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6e0:	4b27      	ldr	r3, [pc, #156]	@ (800a780 <HAL_PCD_MspInit+0xfc>)
 800a6e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	613b      	str	r3, [r7, #16]
 800a6ea:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a6ec:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800a6f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a700:	2303      	movs	r3, #3
 800a702:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a706:	230a      	movs	r3, #10
 800a708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a70c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a710:	4619      	mov	r1, r3
 800a712:	481c      	ldr	r0, [pc, #112]	@ (800a784 <HAL_PCD_MspInit+0x100>)
 800a714:	f7f8 fb18 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a718:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a71c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a720:	2300      	movs	r3, #0
 800a722:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a726:	2300      	movs	r3, #0
 800a728:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a72c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a730:	4619      	mov	r1, r3
 800a732:	4814      	ldr	r0, [pc, #80]	@ (800a784 <HAL_PCD_MspInit+0x100>)
 800a734:	f7f8 fb08 	bl	8002d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a738:	4b11      	ldr	r3, [pc, #68]	@ (800a780 <HAL_PCD_MspInit+0xfc>)
 800a73a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a73c:	4a10      	ldr	r2, [pc, #64]	@ (800a780 <HAL_PCD_MspInit+0xfc>)
 800a73e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a742:	6353      	str	r3, [r2, #52]	@ 0x34
 800a744:	4b0e      	ldr	r3, [pc, #56]	@ (800a780 <HAL_PCD_MspInit+0xfc>)
 800a746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a74c:	60fb      	str	r3, [r7, #12]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	4b0b      	ldr	r3, [pc, #44]	@ (800a780 <HAL_PCD_MspInit+0xfc>)
 800a752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a754:	4a0a      	ldr	r2, [pc, #40]	@ (800a780 <HAL_PCD_MspInit+0xfc>)
 800a756:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a75a:	6453      	str	r3, [r2, #68]	@ 0x44
 800a75c:	4b08      	ldr	r3, [pc, #32]	@ (800a780 <HAL_PCD_MspInit+0xfc>)
 800a75e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a760:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a764:	60bb      	str	r3, [r7, #8]
 800a766:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a768:	2200      	movs	r2, #0
 800a76a:	2100      	movs	r1, #0
 800a76c:	2043      	movs	r0, #67	@ 0x43
 800a76e:	f7f7 fbee 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a772:	2043      	movs	r0, #67	@ 0x43
 800a774:	f7f7 fc07 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a778:	bf00      	nop
 800a77a:	37b8      	adds	r7, #184	@ 0xb8
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	40023800 	.word	0x40023800
 800a784:	40020000 	.word	0x40020000

0800a788 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a79c:	4619      	mov	r1, r3
 800a79e:	4610      	mov	r0, r2
 800a7a0:	f7fe fadf 	bl	8008d62 <USBD_LL_SetupStage>
}
 800a7a4:	bf00      	nop
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800a7be:	78fa      	ldrb	r2, [r7, #3]
 800a7c0:	6879      	ldr	r1, [r7, #4]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	00db      	lsls	r3, r3, #3
 800a7c6:	4413      	add	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	440b      	add	r3, r1
 800a7cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	78fb      	ldrb	r3, [r7, #3]
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	f7fe fb19 	bl	8008e0c <USBD_LL_DataOutStage>
}
 800a7da:	bf00      	nop
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b082      	sub	sp, #8
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
 800a7ea:	460b      	mov	r3, r1
 800a7ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800a7f4:	78fa      	ldrb	r2, [r7, #3]
 800a7f6:	6879      	ldr	r1, [r7, #4]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	00db      	lsls	r3, r3, #3
 800a7fc:	4413      	add	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	440b      	add	r3, r1
 800a802:	3320      	adds	r3, #32
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	78fb      	ldrb	r3, [r7, #3]
 800a808:	4619      	mov	r1, r3
 800a80a:	f7fe fbb2 	bl	8008f72 <USBD_LL_DataInStage>
}
 800a80e:	bf00      	nop
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b082      	sub	sp, #8
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a824:	4618      	mov	r0, r3
 800a826:	f7fe fcec 	bl	8009202 <USBD_LL_SOF>
}
 800a82a:	bf00      	nop
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b084      	sub	sp, #16
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a83a:	2301      	movs	r3, #1
 800a83c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	79db      	ldrb	r3, [r3, #7]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d102      	bne.n	800a84c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]
 800a84a:	e008      	b.n	800a85e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	79db      	ldrb	r3, [r3, #7]
 800a850:	2b02      	cmp	r3, #2
 800a852:	d102      	bne.n	800a85a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a854:	2301      	movs	r3, #1
 800a856:	73fb      	strb	r3, [r7, #15]
 800a858:	e001      	b.n	800a85e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a85a:	f7f6 fa4d 	bl	8000cf8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a864:	7bfa      	ldrb	r2, [r7, #15]
 800a866:	4611      	mov	r1, r2
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fe fc86 	bl	800917a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a874:	4618      	mov	r0, r3
 800a876:	f7fe fc2e 	bl	80090d6 <USBD_LL_Reset>
}
 800a87a:	bf00      	nop
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
	...

0800a884 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a892:	4618      	mov	r0, r3
 800a894:	f7fe fc81 	bl	800919a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	6812      	ldr	r2, [r2, #0]
 800a8a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8aa:	f043 0301 	orr.w	r3, r3, #1
 800a8ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	7adb      	ldrb	r3, [r3, #11]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d005      	beq.n	800a8c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8b8:	4b04      	ldr	r3, [pc, #16]	@ (800a8cc <HAL_PCD_SuspendCallback+0x48>)
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	4a03      	ldr	r2, [pc, #12]	@ (800a8cc <HAL_PCD_SuspendCallback+0x48>)
 800a8be:	f043 0306 	orr.w	r3, r3, #6
 800a8c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a8c4:	bf00      	nop
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	e000ed00 	.word	0xe000ed00

0800a8d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fe fc77 	bl	80091d2 <USBD_LL_Resume>
}
 800a8e4:	bf00      	nop
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a8fe:	78fa      	ldrb	r2, [r7, #3]
 800a900:	4611      	mov	r1, r2
 800a902:	4618      	mov	r0, r3
 800a904:	f7fe fccf 	bl	80092a6 <USBD_LL_IsoOUTIncomplete>
}
 800a908:	bf00      	nop
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	460b      	mov	r3, r1
 800a91a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a922:	78fa      	ldrb	r2, [r7, #3]
 800a924:	4611      	mov	r1, r2
 800a926:	4618      	mov	r0, r3
 800a928:	f7fe fc8b 	bl	8009242 <USBD_LL_IsoINIncomplete>
}
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a942:	4618      	mov	r0, r3
 800a944:	f7fe fce1 	bl	800930a <USBD_LL_DevConnected>
}
 800a948:	bf00      	nop
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fe fcde 	bl	8009320 <USBD_LL_DevDisconnected>
}
 800a964:	bf00      	nop
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b082      	sub	sp, #8
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d13c      	bne.n	800a9f6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a97c:	4a20      	ldr	r2, [pc, #128]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a1e      	ldr	r2, [pc, #120]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a988:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a98c:	4b1c      	ldr	r3, [pc, #112]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a98e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a992:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a994:	4b1a      	ldr	r3, [pc, #104]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a996:	2206      	movs	r2, #6
 800a998:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a99a:	4b19      	ldr	r3, [pc, #100]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a99c:	2202      	movs	r2, #2
 800a99e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a9a0:	4b17      	ldr	r3, [pc, #92]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a9a6:	4b16      	ldr	r3, [pc, #88]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a9ac:	4b14      	ldr	r3, [pc, #80]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a9b2:	4b13      	ldr	r3, [pc, #76]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a9b8:	4b11      	ldr	r3, [pc, #68]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a9be:	4b10      	ldr	r3, [pc, #64]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a9c4:	4b0e      	ldr	r3, [pc, #56]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a9ca:	480d      	ldr	r0, [pc, #52]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a9cc:	f7f8 fb9b 	bl	8003106 <HAL_PCD_Init>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d001      	beq.n	800a9da <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a9d6:	f7f6 f98f 	bl	8000cf8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a9da:	2180      	movs	r1, #128	@ 0x80
 800a9dc:	4808      	ldr	r0, [pc, #32]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a9de:	f7f9 fde6 	bl	80045ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a9e2:	2240      	movs	r2, #64	@ 0x40
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4806      	ldr	r0, [pc, #24]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a9e8:	f7f9 fd9a 	bl	8004520 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a9ec:	2280      	movs	r2, #128	@ 0x80
 800a9ee:	2101      	movs	r1, #1
 800a9f0:	4803      	ldr	r0, [pc, #12]	@ (800aa00 <USBD_LL_Init+0x94>)
 800a9f2:	f7f9 fd95 	bl	8004520 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	2006f090 	.word	0x2006f090

0800aa04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f8 fc89 	bl	8003332 <HAL_PCD_Start>
 800aa20:	4603      	mov	r3, r0
 800aa22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 f97e 	bl	800ad28 <USBD_Get_USB_Status>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	4608      	mov	r0, r1
 800aa44:	4611      	mov	r1, r2
 800aa46:	461a      	mov	r2, r3
 800aa48:	4603      	mov	r3, r0
 800aa4a:	70fb      	strb	r3, [r7, #3]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70bb      	strb	r3, [r7, #2]
 800aa50:	4613      	mov	r3, r2
 800aa52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa54:	2300      	movs	r3, #0
 800aa56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800aa62:	78bb      	ldrb	r3, [r7, #2]
 800aa64:	883a      	ldrh	r2, [r7, #0]
 800aa66:	78f9      	ldrb	r1, [r7, #3]
 800aa68:	f7f9 f977 	bl	8003d5a <HAL_PCD_EP_Open>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa70:	7bfb      	ldrb	r3, [r7, #15]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f000 f958 	bl	800ad28 <USBD_Get_USB_Status>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa96:	2300      	movs	r3, #0
 800aa98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aaa0:	78fa      	ldrb	r2, [r7, #3]
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7f9 f9c0 	bl	8003e2a <HAL_PCD_EP_Close>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 f939 	bl	800ad28 <USBD_Get_USB_Status>
 800aab6:	4603      	mov	r3, r0
 800aab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	460b      	mov	r3, r1
 800aace:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aad0:	2300      	movs	r3, #0
 800aad2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aad4:	2300      	movs	r3, #0
 800aad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aade:	78fa      	ldrb	r2, [r7, #3]
 800aae0:	4611      	mov	r1, r2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7f9 fa78 	bl	8003fd8 <HAL_PCD_EP_SetStall>
 800aae8:	4603      	mov	r3, r0
 800aaea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 f91a 	bl	800ad28 <USBD_Get_USB_Status>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab1c:	78fa      	ldrb	r2, [r7, #3]
 800ab1e:	4611      	mov	r1, r2
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7f9 fabc 	bl	800409e <HAL_PCD_EP_ClrStall>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 f8fb 	bl	800ad28 <USBD_Get_USB_Status>
 800ab32:	4603      	mov	r3, r0
 800ab34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab36:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	da0b      	bge.n	800ab74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab62:	68f9      	ldr	r1, [r7, #12]
 800ab64:	4613      	mov	r3, r2
 800ab66:	00db      	lsls	r3, r3, #3
 800ab68:	4413      	add	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	440b      	add	r3, r1
 800ab6e:	3316      	adds	r3, #22
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	e00b      	b.n	800ab8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab74:	78fb      	ldrb	r3, [r7, #3]
 800ab76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab7a:	68f9      	ldr	r1, [r7, #12]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	4413      	add	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	440b      	add	r3, r1
 800ab86:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ab8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba4:	2300      	movs	r3, #0
 800aba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800abb2:	78fa      	ldrb	r2, [r7, #3]
 800abb4:	4611      	mov	r1, r2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7f9 f8ab 	bl	8003d12 <HAL_PCD_SetAddress>
 800abbc:	4603      	mov	r3, r0
 800abbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 f8b0 	bl	800ad28 <USBD_Get_USB_Status>
 800abc8:	4603      	mov	r3, r0
 800abca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b086      	sub	sp, #24
 800abda:	af00      	add	r7, sp, #0
 800abdc:	60f8      	str	r0, [r7, #12]
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	603b      	str	r3, [r7, #0]
 800abe2:	460b      	mov	r3, r1
 800abe4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800abf4:	7af9      	ldrb	r1, [r7, #11]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	f7f9 f9b3 	bl	8003f64 <HAL_PCD_EP_Transmit>
 800abfe:	4603      	mov	r3, r0
 800ac00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac02:	7dfb      	ldrb	r3, [r7, #23]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 f88f 	bl	800ad28 <USBD_Get_USB_Status>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3718      	adds	r7, #24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b086      	sub	sp, #24
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	607a      	str	r2, [r7, #4]
 800ac22:	603b      	str	r3, [r7, #0]
 800ac24:	460b      	mov	r3, r1
 800ac26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ac36:	7af9      	ldrb	r1, [r7, #11]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	f7f9 f93f 	bl	8003ebe <HAL_PCD_EP_Receive>
 800ac40:	4603      	mov	r3, r0
 800ac42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac44:	7dfb      	ldrb	r3, [r7, #23]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f000 f86e 	bl	800ad28 <USBD_Get_USB_Status>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac50:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3718      	adds	r7, #24
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	460b      	mov	r3, r1
 800ac64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ac6c:	78fa      	ldrb	r2, [r7, #3]
 800ac6e:	4611      	mov	r1, r2
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7f9 f95f 	bl	8003f34 <HAL_PCD_EP_GetRxCount>
 800ac76:	4603      	mov	r3, r0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ac8c:	78fb      	ldrb	r3, [r7, #3]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d002      	beq.n	800ac98 <HAL_PCDEx_LPM_Callback+0x18>
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d01f      	beq.n	800acd6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ac96:	e03b      	b.n	800ad10 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	7adb      	ldrb	r3, [r3, #11]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d007      	beq.n	800acb0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800aca0:	f000 f83c 	bl	800ad1c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aca4:	4b1c      	ldr	r3, [pc, #112]	@ (800ad18 <HAL_PCDEx_LPM_Callback+0x98>)
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	4a1b      	ldr	r2, [pc, #108]	@ (800ad18 <HAL_PCDEx_LPM_Callback+0x98>)
 800acaa:	f023 0306 	bic.w	r3, r3, #6
 800acae:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	6812      	ldr	r2, [r2, #0]
 800acbe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acc2:	f023 0301 	bic.w	r3, r3, #1
 800acc6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe fa7f 	bl	80091d2 <USBD_LL_Resume>
    break;
 800acd4:	e01c      	b.n	800ad10 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	6812      	ldr	r2, [r2, #0]
 800ace4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ace8:	f043 0301 	orr.w	r3, r3, #1
 800acec:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe fa50 	bl	800919a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	7adb      	ldrb	r3, [r3, #11]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d005      	beq.n	800ad0e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad02:	4b05      	ldr	r3, [pc, #20]	@ (800ad18 <HAL_PCDEx_LPM_Callback+0x98>)
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	4a04      	ldr	r2, [pc, #16]	@ (800ad18 <HAL_PCDEx_LPM_Callback+0x98>)
 800ad08:	f043 0306 	orr.w	r3, r3, #6
 800ad0c:	6113      	str	r3, [r2, #16]
    break;
 800ad0e:	bf00      	nop
}
 800ad10:	bf00      	nop
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	e000ed00 	.word	0xe000ed00

0800ad1c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ad20:	f7f5 fd16 	bl	8000750 <SystemClock_Config>
}
 800ad24:	bf00      	nop
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	4603      	mov	r3, r0
 800ad30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad36:	79fb      	ldrb	r3, [r7, #7]
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d817      	bhi.n	800ad6c <USBD_Get_USB_Status+0x44>
 800ad3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad44 <USBD_Get_USB_Status+0x1c>)
 800ad3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad42:	bf00      	nop
 800ad44:	0800ad55 	.word	0x0800ad55
 800ad48:	0800ad5b 	.word	0x0800ad5b
 800ad4c:	0800ad61 	.word	0x0800ad61
 800ad50:	0800ad67 	.word	0x0800ad67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	73fb      	strb	r3, [r7, #15]
    break;
 800ad58:	e00b      	b.n	800ad72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad5e:	e008      	b.n	800ad72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad60:	2301      	movs	r3, #1
 800ad62:	73fb      	strb	r3, [r7, #15]
    break;
 800ad64:	e005      	b.n	800ad72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad66:	2303      	movs	r3, #3
 800ad68:	73fb      	strb	r3, [r7, #15]
    break;
 800ad6a:	e002      	b.n	800ad72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad70:	bf00      	nop
  }
  return usb_status;
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <malloc>:
 800ad80:	4b02      	ldr	r3, [pc, #8]	@ (800ad8c <malloc+0xc>)
 800ad82:	4601      	mov	r1, r0
 800ad84:	6818      	ldr	r0, [r3, #0]
 800ad86:	f000 b82d 	b.w	800ade4 <_malloc_r>
 800ad8a:	bf00      	nop
 800ad8c:	20000110 	.word	0x20000110

0800ad90 <free>:
 800ad90:	4b02      	ldr	r3, [pc, #8]	@ (800ad9c <free+0xc>)
 800ad92:	4601      	mov	r1, r0
 800ad94:	6818      	ldr	r0, [r3, #0]
 800ad96:	f000 b8f5 	b.w	800af84 <_free_r>
 800ad9a:	bf00      	nop
 800ad9c:	20000110 	.word	0x20000110

0800ada0 <sbrk_aligned>:
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	4e0f      	ldr	r6, [pc, #60]	@ (800ade0 <sbrk_aligned+0x40>)
 800ada4:	460c      	mov	r4, r1
 800ada6:	6831      	ldr	r1, [r6, #0]
 800ada8:	4605      	mov	r5, r0
 800adaa:	b911      	cbnz	r1, 800adb2 <sbrk_aligned+0x12>
 800adac:	f000 f8ae 	bl	800af0c <_sbrk_r>
 800adb0:	6030      	str	r0, [r6, #0]
 800adb2:	4621      	mov	r1, r4
 800adb4:	4628      	mov	r0, r5
 800adb6:	f000 f8a9 	bl	800af0c <_sbrk_r>
 800adba:	1c43      	adds	r3, r0, #1
 800adbc:	d103      	bne.n	800adc6 <sbrk_aligned+0x26>
 800adbe:	f04f 34ff 	mov.w	r4, #4294967295
 800adc2:	4620      	mov	r0, r4
 800adc4:	bd70      	pop	{r4, r5, r6, pc}
 800adc6:	1cc4      	adds	r4, r0, #3
 800adc8:	f024 0403 	bic.w	r4, r4, #3
 800adcc:	42a0      	cmp	r0, r4
 800adce:	d0f8      	beq.n	800adc2 <sbrk_aligned+0x22>
 800add0:	1a21      	subs	r1, r4, r0
 800add2:	4628      	mov	r0, r5
 800add4:	f000 f89a 	bl	800af0c <_sbrk_r>
 800add8:	3001      	adds	r0, #1
 800adda:	d1f2      	bne.n	800adc2 <sbrk_aligned+0x22>
 800addc:	e7ef      	b.n	800adbe <sbrk_aligned+0x1e>
 800adde:	bf00      	nop
 800ade0:	2006f570 	.word	0x2006f570

0800ade4 <_malloc_r>:
 800ade4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade8:	1ccd      	adds	r5, r1, #3
 800adea:	f025 0503 	bic.w	r5, r5, #3
 800adee:	3508      	adds	r5, #8
 800adf0:	2d0c      	cmp	r5, #12
 800adf2:	bf38      	it	cc
 800adf4:	250c      	movcc	r5, #12
 800adf6:	2d00      	cmp	r5, #0
 800adf8:	4606      	mov	r6, r0
 800adfa:	db01      	blt.n	800ae00 <_malloc_r+0x1c>
 800adfc:	42a9      	cmp	r1, r5
 800adfe:	d904      	bls.n	800ae0a <_malloc_r+0x26>
 800ae00:	230c      	movs	r3, #12
 800ae02:	6033      	str	r3, [r6, #0]
 800ae04:	2000      	movs	r0, #0
 800ae06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aee0 <_malloc_r+0xfc>
 800ae0e:	f000 f869 	bl	800aee4 <__malloc_lock>
 800ae12:	f8d8 3000 	ldr.w	r3, [r8]
 800ae16:	461c      	mov	r4, r3
 800ae18:	bb44      	cbnz	r4, 800ae6c <_malloc_r+0x88>
 800ae1a:	4629      	mov	r1, r5
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	f7ff ffbf 	bl	800ada0 <sbrk_aligned>
 800ae22:	1c43      	adds	r3, r0, #1
 800ae24:	4604      	mov	r4, r0
 800ae26:	d158      	bne.n	800aeda <_malloc_r+0xf6>
 800ae28:	f8d8 4000 	ldr.w	r4, [r8]
 800ae2c:	4627      	mov	r7, r4
 800ae2e:	2f00      	cmp	r7, #0
 800ae30:	d143      	bne.n	800aeba <_malloc_r+0xd6>
 800ae32:	2c00      	cmp	r4, #0
 800ae34:	d04b      	beq.n	800aece <_malloc_r+0xea>
 800ae36:	6823      	ldr	r3, [r4, #0]
 800ae38:	4639      	mov	r1, r7
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	eb04 0903 	add.w	r9, r4, r3
 800ae40:	f000 f864 	bl	800af0c <_sbrk_r>
 800ae44:	4581      	cmp	r9, r0
 800ae46:	d142      	bne.n	800aece <_malloc_r+0xea>
 800ae48:	6821      	ldr	r1, [r4, #0]
 800ae4a:	1a6d      	subs	r5, r5, r1
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	4630      	mov	r0, r6
 800ae50:	f7ff ffa6 	bl	800ada0 <sbrk_aligned>
 800ae54:	3001      	adds	r0, #1
 800ae56:	d03a      	beq.n	800aece <_malloc_r+0xea>
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	442b      	add	r3, r5
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae62:	685a      	ldr	r2, [r3, #4]
 800ae64:	bb62      	cbnz	r2, 800aec0 <_malloc_r+0xdc>
 800ae66:	f8c8 7000 	str.w	r7, [r8]
 800ae6a:	e00f      	b.n	800ae8c <_malloc_r+0xa8>
 800ae6c:	6822      	ldr	r2, [r4, #0]
 800ae6e:	1b52      	subs	r2, r2, r5
 800ae70:	d420      	bmi.n	800aeb4 <_malloc_r+0xd0>
 800ae72:	2a0b      	cmp	r2, #11
 800ae74:	d917      	bls.n	800aea6 <_malloc_r+0xc2>
 800ae76:	1961      	adds	r1, r4, r5
 800ae78:	42a3      	cmp	r3, r4
 800ae7a:	6025      	str	r5, [r4, #0]
 800ae7c:	bf18      	it	ne
 800ae7e:	6059      	strne	r1, [r3, #4]
 800ae80:	6863      	ldr	r3, [r4, #4]
 800ae82:	bf08      	it	eq
 800ae84:	f8c8 1000 	streq.w	r1, [r8]
 800ae88:	5162      	str	r2, [r4, r5]
 800ae8a:	604b      	str	r3, [r1, #4]
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	f000 f82f 	bl	800aef0 <__malloc_unlock>
 800ae92:	f104 000b 	add.w	r0, r4, #11
 800ae96:	1d23      	adds	r3, r4, #4
 800ae98:	f020 0007 	bic.w	r0, r0, #7
 800ae9c:	1ac2      	subs	r2, r0, r3
 800ae9e:	bf1c      	itt	ne
 800aea0:	1a1b      	subne	r3, r3, r0
 800aea2:	50a3      	strne	r3, [r4, r2]
 800aea4:	e7af      	b.n	800ae06 <_malloc_r+0x22>
 800aea6:	6862      	ldr	r2, [r4, #4]
 800aea8:	42a3      	cmp	r3, r4
 800aeaa:	bf0c      	ite	eq
 800aeac:	f8c8 2000 	streq.w	r2, [r8]
 800aeb0:	605a      	strne	r2, [r3, #4]
 800aeb2:	e7eb      	b.n	800ae8c <_malloc_r+0xa8>
 800aeb4:	4623      	mov	r3, r4
 800aeb6:	6864      	ldr	r4, [r4, #4]
 800aeb8:	e7ae      	b.n	800ae18 <_malloc_r+0x34>
 800aeba:	463c      	mov	r4, r7
 800aebc:	687f      	ldr	r7, [r7, #4]
 800aebe:	e7b6      	b.n	800ae2e <_malloc_r+0x4a>
 800aec0:	461a      	mov	r2, r3
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	42a3      	cmp	r3, r4
 800aec6:	d1fb      	bne.n	800aec0 <_malloc_r+0xdc>
 800aec8:	2300      	movs	r3, #0
 800aeca:	6053      	str	r3, [r2, #4]
 800aecc:	e7de      	b.n	800ae8c <_malloc_r+0xa8>
 800aece:	230c      	movs	r3, #12
 800aed0:	6033      	str	r3, [r6, #0]
 800aed2:	4630      	mov	r0, r6
 800aed4:	f000 f80c 	bl	800aef0 <__malloc_unlock>
 800aed8:	e794      	b.n	800ae04 <_malloc_r+0x20>
 800aeda:	6005      	str	r5, [r0, #0]
 800aedc:	e7d6      	b.n	800ae8c <_malloc_r+0xa8>
 800aede:	bf00      	nop
 800aee0:	2006f574 	.word	0x2006f574

0800aee4 <__malloc_lock>:
 800aee4:	4801      	ldr	r0, [pc, #4]	@ (800aeec <__malloc_lock+0x8>)
 800aee6:	f000 b84b 	b.w	800af80 <__retarget_lock_acquire_recursive>
 800aeea:	bf00      	nop
 800aeec:	2006f6b4 	.word	0x2006f6b4

0800aef0 <__malloc_unlock>:
 800aef0:	4801      	ldr	r0, [pc, #4]	@ (800aef8 <__malloc_unlock+0x8>)
 800aef2:	f000 b846 	b.w	800af82 <__retarget_lock_release_recursive>
 800aef6:	bf00      	nop
 800aef8:	2006f6b4 	.word	0x2006f6b4

0800aefc <memset>:
 800aefc:	4402      	add	r2, r0
 800aefe:	4603      	mov	r3, r0
 800af00:	4293      	cmp	r3, r2
 800af02:	d100      	bne.n	800af06 <memset+0xa>
 800af04:	4770      	bx	lr
 800af06:	f803 1b01 	strb.w	r1, [r3], #1
 800af0a:	e7f9      	b.n	800af00 <memset+0x4>

0800af0c <_sbrk_r>:
 800af0c:	b538      	push	{r3, r4, r5, lr}
 800af0e:	4d06      	ldr	r5, [pc, #24]	@ (800af28 <_sbrk_r+0x1c>)
 800af10:	2300      	movs	r3, #0
 800af12:	4604      	mov	r4, r0
 800af14:	4608      	mov	r0, r1
 800af16:	602b      	str	r3, [r5, #0]
 800af18:	f7f6 fa28 	bl	800136c <_sbrk>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_sbrk_r+0x1a>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_sbrk_r+0x1a>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	2006f6b0 	.word	0x2006f6b0

0800af2c <__errno>:
 800af2c:	4b01      	ldr	r3, [pc, #4]	@ (800af34 <__errno+0x8>)
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	20000110 	.word	0x20000110

0800af38 <__libc_init_array>:
 800af38:	b570      	push	{r4, r5, r6, lr}
 800af3a:	4d0d      	ldr	r5, [pc, #52]	@ (800af70 <__libc_init_array+0x38>)
 800af3c:	4c0d      	ldr	r4, [pc, #52]	@ (800af74 <__libc_init_array+0x3c>)
 800af3e:	1b64      	subs	r4, r4, r5
 800af40:	10a4      	asrs	r4, r4, #2
 800af42:	2600      	movs	r6, #0
 800af44:	42a6      	cmp	r6, r4
 800af46:	d109      	bne.n	800af5c <__libc_init_array+0x24>
 800af48:	4d0b      	ldr	r5, [pc, #44]	@ (800af78 <__libc_init_array+0x40>)
 800af4a:	4c0c      	ldr	r4, [pc, #48]	@ (800af7c <__libc_init_array+0x44>)
 800af4c:	f000 f864 	bl	800b018 <_init>
 800af50:	1b64      	subs	r4, r4, r5
 800af52:	10a4      	asrs	r4, r4, #2
 800af54:	2600      	movs	r6, #0
 800af56:	42a6      	cmp	r6, r4
 800af58:	d105      	bne.n	800af66 <__libc_init_array+0x2e>
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af60:	4798      	blx	r3
 800af62:	3601      	adds	r6, #1
 800af64:	e7ee      	b.n	800af44 <__libc_init_array+0xc>
 800af66:	f855 3b04 	ldr.w	r3, [r5], #4
 800af6a:	4798      	blx	r3
 800af6c:	3601      	adds	r6, #1
 800af6e:	e7f2      	b.n	800af56 <__libc_init_array+0x1e>
 800af70:	0800b0a0 	.word	0x0800b0a0
 800af74:	0800b0a0 	.word	0x0800b0a0
 800af78:	0800b0a0 	.word	0x0800b0a0
 800af7c:	0800b0a4 	.word	0x0800b0a4

0800af80 <__retarget_lock_acquire_recursive>:
 800af80:	4770      	bx	lr

0800af82 <__retarget_lock_release_recursive>:
 800af82:	4770      	bx	lr

0800af84 <_free_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4605      	mov	r5, r0
 800af88:	2900      	cmp	r1, #0
 800af8a:	d041      	beq.n	800b010 <_free_r+0x8c>
 800af8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af90:	1f0c      	subs	r4, r1, #4
 800af92:	2b00      	cmp	r3, #0
 800af94:	bfb8      	it	lt
 800af96:	18e4      	addlt	r4, r4, r3
 800af98:	f7ff ffa4 	bl	800aee4 <__malloc_lock>
 800af9c:	4a1d      	ldr	r2, [pc, #116]	@ (800b014 <_free_r+0x90>)
 800af9e:	6813      	ldr	r3, [r2, #0]
 800afa0:	b933      	cbnz	r3, 800afb0 <_free_r+0x2c>
 800afa2:	6063      	str	r3, [r4, #4]
 800afa4:	6014      	str	r4, [r2, #0]
 800afa6:	4628      	mov	r0, r5
 800afa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afac:	f7ff bfa0 	b.w	800aef0 <__malloc_unlock>
 800afb0:	42a3      	cmp	r3, r4
 800afb2:	d908      	bls.n	800afc6 <_free_r+0x42>
 800afb4:	6820      	ldr	r0, [r4, #0]
 800afb6:	1821      	adds	r1, r4, r0
 800afb8:	428b      	cmp	r3, r1
 800afba:	bf01      	itttt	eq
 800afbc:	6819      	ldreq	r1, [r3, #0]
 800afbe:	685b      	ldreq	r3, [r3, #4]
 800afc0:	1809      	addeq	r1, r1, r0
 800afc2:	6021      	streq	r1, [r4, #0]
 800afc4:	e7ed      	b.n	800afa2 <_free_r+0x1e>
 800afc6:	461a      	mov	r2, r3
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	b10b      	cbz	r3, 800afd0 <_free_r+0x4c>
 800afcc:	42a3      	cmp	r3, r4
 800afce:	d9fa      	bls.n	800afc6 <_free_r+0x42>
 800afd0:	6811      	ldr	r1, [r2, #0]
 800afd2:	1850      	adds	r0, r2, r1
 800afd4:	42a0      	cmp	r0, r4
 800afd6:	d10b      	bne.n	800aff0 <_free_r+0x6c>
 800afd8:	6820      	ldr	r0, [r4, #0]
 800afda:	4401      	add	r1, r0
 800afdc:	1850      	adds	r0, r2, r1
 800afde:	4283      	cmp	r3, r0
 800afe0:	6011      	str	r1, [r2, #0]
 800afe2:	d1e0      	bne.n	800afa6 <_free_r+0x22>
 800afe4:	6818      	ldr	r0, [r3, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	6053      	str	r3, [r2, #4]
 800afea:	4408      	add	r0, r1
 800afec:	6010      	str	r0, [r2, #0]
 800afee:	e7da      	b.n	800afa6 <_free_r+0x22>
 800aff0:	d902      	bls.n	800aff8 <_free_r+0x74>
 800aff2:	230c      	movs	r3, #12
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	e7d6      	b.n	800afa6 <_free_r+0x22>
 800aff8:	6820      	ldr	r0, [r4, #0]
 800affa:	1821      	adds	r1, r4, r0
 800affc:	428b      	cmp	r3, r1
 800affe:	bf04      	itt	eq
 800b000:	6819      	ldreq	r1, [r3, #0]
 800b002:	685b      	ldreq	r3, [r3, #4]
 800b004:	6063      	str	r3, [r4, #4]
 800b006:	bf04      	itt	eq
 800b008:	1809      	addeq	r1, r1, r0
 800b00a:	6021      	streq	r1, [r4, #0]
 800b00c:	6054      	str	r4, [r2, #4]
 800b00e:	e7ca      	b.n	800afa6 <_free_r+0x22>
 800b010:	bd38      	pop	{r3, r4, r5, pc}
 800b012:	bf00      	nop
 800b014:	2006f574 	.word	0x2006f574

0800b018 <_init>:
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01a:	bf00      	nop
 800b01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01e:	bc08      	pop	{r3}
 800b020:	469e      	mov	lr, r3
 800b022:	4770      	bx	lr

0800b024 <_fini>:
 800b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b026:	bf00      	nop
 800b028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b02a:	bc08      	pop	{r3}
 800b02c:	469e      	mov	lr, r3
 800b02e:	4770      	bx	lr
