
EDS_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea6c  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800ec68  0800ec68  0000fc68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f010  0800f010  000112a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f010  0800f010  00010010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f018  0800f018  000112a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f018  0800f018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f01c  0800f01c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800f020  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000168  0800f188  00011168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000208  0800f228  00011208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000702ec  200002a8  0800f2c8  000112a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20070594  0800f2c8  00011594  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000112a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024d89  00000000  00000000  000112d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005393  00000000  00000000  0003605f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c88  00000000  00000000  0003b3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015dc  00000000  00000000  0003d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e734  00000000  00000000  0003e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026d9d  00000000  00000000  0006cd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010e1b0  00000000  00000000  00093b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a1cdd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007c0c  00000000  00000000  001a1d20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004b  00000000  00000000  001a992c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200002a8 	.word	0x200002a8
 8000214:	00000000 	.word	0x00000000
 8000218:	0800ec4c 	.word	0x0800ec4c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200002ac 	.word	0x200002ac
 8000234:	0800ec4c 	.word	0x0800ec4c

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295
 80005c4:	f000 b96a 	b.w	800089c <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9d08      	ldr	r5, [sp, #32]
 80005e6:	460c      	mov	r4, r1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d14e      	bne.n	800068a <__udivmoddi4+0xaa>
 80005ec:	4694      	mov	ip, r2
 80005ee:	458c      	cmp	ip, r1
 80005f0:	4686      	mov	lr, r0
 80005f2:	fab2 f282 	clz	r2, r2
 80005f6:	d962      	bls.n	80006be <__udivmoddi4+0xde>
 80005f8:	b14a      	cbz	r2, 800060e <__udivmoddi4+0x2e>
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	4091      	lsls	r1, r2
 8000600:	fa20 f303 	lsr.w	r3, r0, r3
 8000604:	fa0c fc02 	lsl.w	ip, ip, r2
 8000608:	4319      	orrs	r1, r3
 800060a:	fa00 fe02 	lsl.w	lr, r0, r2
 800060e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000612:	fa1f f68c 	uxth.w	r6, ip
 8000616:	fbb1 f4f7 	udiv	r4, r1, r7
 800061a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061e:	fb07 1114 	mls	r1, r7, r4, r1
 8000622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000626:	fb04 f106 	mul.w	r1, r4, r6
 800062a:	4299      	cmp	r1, r3
 800062c:	d90a      	bls.n	8000644 <__udivmoddi4+0x64>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f104 30ff 	add.w	r0, r4, #4294967295
 8000636:	f080 8112 	bcs.w	800085e <__udivmoddi4+0x27e>
 800063a:	4299      	cmp	r1, r3
 800063c:	f240 810f 	bls.w	800085e <__udivmoddi4+0x27e>
 8000640:	3c02      	subs	r4, #2
 8000642:	4463      	add	r3, ip
 8000644:	1a59      	subs	r1, r3, r1
 8000646:	fa1f f38e 	uxth.w	r3, lr
 800064a:	fbb1 f0f7 	udiv	r0, r1, r7
 800064e:	fb07 1110 	mls	r1, r7, r0, r1
 8000652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000656:	fb00 f606 	mul.w	r6, r0, r6
 800065a:	429e      	cmp	r6, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x94>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 31ff 	add.w	r1, r0, #4294967295
 8000666:	f080 80fc 	bcs.w	8000862 <__udivmoddi4+0x282>
 800066a:	429e      	cmp	r6, r3
 800066c:	f240 80f9 	bls.w	8000862 <__udivmoddi4+0x282>
 8000670:	4463      	add	r3, ip
 8000672:	3802      	subs	r0, #2
 8000674:	1b9b      	subs	r3, r3, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	2100      	movs	r1, #0
 800067c:	b11d      	cbz	r5, 8000686 <__udivmoddi4+0xa6>
 800067e:	40d3      	lsrs	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	e9c5 3200 	strd	r3, r2, [r5]
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	428b      	cmp	r3, r1
 800068c:	d905      	bls.n	800069a <__udivmoddi4+0xba>
 800068e:	b10d      	cbz	r5, 8000694 <__udivmoddi4+0xb4>
 8000690:	e9c5 0100 	strd	r0, r1, [r5]
 8000694:	2100      	movs	r1, #0
 8000696:	4608      	mov	r0, r1
 8000698:	e7f5      	b.n	8000686 <__udivmoddi4+0xa6>
 800069a:	fab3 f183 	clz	r1, r3
 800069e:	2900      	cmp	r1, #0
 80006a0:	d146      	bne.n	8000730 <__udivmoddi4+0x150>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xcc>
 80006a6:	4290      	cmp	r0, r2
 80006a8:	f0c0 80f0 	bcc.w	800088c <__udivmoddi4+0x2ac>
 80006ac:	1a86      	subs	r6, r0, r2
 80006ae:	eb64 0303 	sbc.w	r3, r4, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d0e6      	beq.n	8000686 <__udivmoddi4+0xa6>
 80006b8:	e9c5 6300 	strd	r6, r3, [r5]
 80006bc:	e7e3      	b.n	8000686 <__udivmoddi4+0xa6>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f040 8090 	bne.w	80007e4 <__udivmoddi4+0x204>
 80006c4:	eba1 040c 	sub.w	r4, r1, ip
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa1f f78c 	uxth.w	r7, ip
 80006d0:	2101      	movs	r1, #1
 80006d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb08 4416 	mls	r4, r8, r6, r4
 80006de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e2:	fb07 f006 	mul.w	r0, r7, r6
 80006e6:	4298      	cmp	r0, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x11c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0x11a>
 80006f4:	4298      	cmp	r0, r3
 80006f6:	f200 80cd 	bhi.w	8000894 <__udivmoddi4+0x2b4>
 80006fa:	4626      	mov	r6, r4
 80006fc:	1a1c      	subs	r4, r3, r0
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb4 f0f8 	udiv	r0, r4, r8
 8000706:	fb08 4410 	mls	r4, r8, r0, r4
 800070a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070e:	fb00 f707 	mul.w	r7, r0, r7
 8000712:	429f      	cmp	r7, r3
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x148>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 34ff 	add.w	r4, r0, #4294967295
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x146>
 8000720:	429f      	cmp	r7, r3
 8000722:	f200 80b0 	bhi.w	8000886 <__udivmoddi4+0x2a6>
 8000726:	4620      	mov	r0, r4
 8000728:	1bdb      	subs	r3, r3, r7
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	e7a5      	b.n	800067c <__udivmoddi4+0x9c>
 8000730:	f1c1 0620 	rsb	r6, r1, #32
 8000734:	408b      	lsls	r3, r1
 8000736:	fa22 f706 	lsr.w	r7, r2, r6
 800073a:	431f      	orrs	r7, r3
 800073c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000740:	fa04 f301 	lsl.w	r3, r4, r1
 8000744:	ea43 030c 	orr.w	r3, r3, ip
 8000748:	40f4      	lsrs	r4, r6
 800074a:	fa00 f801 	lsl.w	r8, r0, r1
 800074e:	0c38      	lsrs	r0, r7, #16
 8000750:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000754:	fbb4 fef0 	udiv	lr, r4, r0
 8000758:	fa1f fc87 	uxth.w	ip, r7
 800075c:	fb00 441e 	mls	r4, r0, lr, r4
 8000760:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000764:	fb0e f90c 	mul.w	r9, lr, ip
 8000768:	45a1      	cmp	r9, r4
 800076a:	fa02 f201 	lsl.w	r2, r2, r1
 800076e:	d90a      	bls.n	8000786 <__udivmoddi4+0x1a6>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000776:	f080 8084 	bcs.w	8000882 <__udivmoddi4+0x2a2>
 800077a:	45a1      	cmp	r9, r4
 800077c:	f240 8081 	bls.w	8000882 <__udivmoddi4+0x2a2>
 8000780:	f1ae 0e02 	sub.w	lr, lr, #2
 8000784:	443c      	add	r4, r7
 8000786:	eba4 0409 	sub.w	r4, r4, r9
 800078a:	fa1f f983 	uxth.w	r9, r3
 800078e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000792:	fb00 4413 	mls	r4, r0, r3, r4
 8000796:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079a:	fb03 fc0c 	mul.w	ip, r3, ip
 800079e:	45a4      	cmp	ip, r4
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x1d2>
 80007a2:	193c      	adds	r4, r7, r4
 80007a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a8:	d267      	bcs.n	800087a <__udivmoddi4+0x29a>
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d965      	bls.n	800087a <__udivmoddi4+0x29a>
 80007ae:	3b02      	subs	r3, #2
 80007b0:	443c      	add	r4, r7
 80007b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007b6:	fba0 9302 	umull	r9, r3, r0, r2
 80007ba:	eba4 040c 	sub.w	r4, r4, ip
 80007be:	429c      	cmp	r4, r3
 80007c0:	46ce      	mov	lr, r9
 80007c2:	469c      	mov	ip, r3
 80007c4:	d351      	bcc.n	800086a <__udivmoddi4+0x28a>
 80007c6:	d04e      	beq.n	8000866 <__udivmoddi4+0x286>
 80007c8:	b155      	cbz	r5, 80007e0 <__udivmoddi4+0x200>
 80007ca:	ebb8 030e 	subs.w	r3, r8, lr
 80007ce:	eb64 040c 	sbc.w	r4, r4, ip
 80007d2:	fa04 f606 	lsl.w	r6, r4, r6
 80007d6:	40cb      	lsrs	r3, r1
 80007d8:	431e      	orrs	r6, r3
 80007da:	40cc      	lsrs	r4, r1
 80007dc:	e9c5 6400 	strd	r6, r4, [r5]
 80007e0:	2100      	movs	r1, #0
 80007e2:	e750      	b.n	8000686 <__udivmoddi4+0xa6>
 80007e4:	f1c2 0320 	rsb	r3, r2, #32
 80007e8:	fa20 f103 	lsr.w	r1, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	fa24 f303 	lsr.w	r3, r4, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	430c      	orrs	r4, r1
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000800:	fa1f f78c 	uxth.w	r7, ip
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3110 	mls	r1, r8, r0, r3
 800080c:	0c23      	lsrs	r3, r4, #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb00 f107 	mul.w	r1, r0, r7
 8000816:	4299      	cmp	r1, r3
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x24c>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000822:	d22c      	bcs.n	800087e <__udivmoddi4+0x29e>
 8000824:	4299      	cmp	r1, r3
 8000826:	d92a      	bls.n	800087e <__udivmoddi4+0x29e>
 8000828:	3802      	subs	r0, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f1f8 	udiv	r1, r3, r8
 8000834:	fb08 3311 	mls	r3, r8, r1, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb01 f307 	mul.w	r3, r1, r7
 8000840:	42a3      	cmp	r3, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x276>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f101 36ff 	add.w	r6, r1, #4294967295
 800084c:	d213      	bcs.n	8000876 <__udivmoddi4+0x296>
 800084e:	42a3      	cmp	r3, r4
 8000850:	d911      	bls.n	8000876 <__udivmoddi4+0x296>
 8000852:	3902      	subs	r1, #2
 8000854:	4464      	add	r4, ip
 8000856:	1ae4      	subs	r4, r4, r3
 8000858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800085c:	e739      	b.n	80006d2 <__udivmoddi4+0xf2>
 800085e:	4604      	mov	r4, r0
 8000860:	e6f0      	b.n	8000644 <__udivmoddi4+0x64>
 8000862:	4608      	mov	r0, r1
 8000864:	e706      	b.n	8000674 <__udivmoddi4+0x94>
 8000866:	45c8      	cmp	r8, r9
 8000868:	d2ae      	bcs.n	80007c8 <__udivmoddi4+0x1e8>
 800086a:	ebb9 0e02 	subs.w	lr, r9, r2
 800086e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000872:	3801      	subs	r0, #1
 8000874:	e7a8      	b.n	80007c8 <__udivmoddi4+0x1e8>
 8000876:	4631      	mov	r1, r6
 8000878:	e7ed      	b.n	8000856 <__udivmoddi4+0x276>
 800087a:	4603      	mov	r3, r0
 800087c:	e799      	b.n	80007b2 <__udivmoddi4+0x1d2>
 800087e:	4630      	mov	r0, r6
 8000880:	e7d4      	b.n	800082c <__udivmoddi4+0x24c>
 8000882:	46d6      	mov	lr, sl
 8000884:	e77f      	b.n	8000786 <__udivmoddi4+0x1a6>
 8000886:	4463      	add	r3, ip
 8000888:	3802      	subs	r0, #2
 800088a:	e74d      	b.n	8000728 <__udivmoddi4+0x148>
 800088c:	4606      	mov	r6, r0
 800088e:	4623      	mov	r3, r4
 8000890:	4608      	mov	r0, r1
 8000892:	e70f      	b.n	80006b4 <__udivmoddi4+0xd4>
 8000894:	3e02      	subs	r6, #2
 8000896:	4463      	add	r3, ip
 8000898:	e730      	b.n	80006fc <__udivmoddi4+0x11c>
 800089a:	bf00      	nop

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(void) = 0;

void bldc_interface_init(void(*func)(unsigned char *data, unsigned int len)) {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	send_func = func;
 80008a8:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <bldc_interface_init+0x1c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	2000098c 	.word	0x2000098c

080008c0 <bldc_interface_send_packet>:
 * The packet data.
 *
 * @param len
 * The data length.
 */
void bldc_interface_send_packet(unsigned char *data, unsigned int len) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	if (send_func) {
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <bldc_interface_send_packet+0x24>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d004      	beq.n	80008dc <bldc_interface_send_packet+0x1c>
		send_func(data, len);
 80008d2:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <bldc_interface_send_packet+0x24>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6839      	ldr	r1, [r7, #0]
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	4798      	blx	r3
	}
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000098c 	.word	0x2000098c

080008e8 <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	if (!len) {
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f001 8205 	beq.w	8001d04 <bldc_interface_process_packet+0x141c>
		return;
	}

	if (forward_func) {
 80008fa:	4bc1      	ldr	r3, [pc, #772]	@ (8000c00 <bldc_interface_process_packet+0x318>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d006      	beq.n	8000910 <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 8000902:	4bbf      	ldr	r3, [pc, #764]	@ (8000c00 <bldc_interface_process_packet+0x318>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6839      	ldr	r1, [r7, #0]
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	4798      	blx	r3
		return;
 800090c:	f001 ba13 	b.w	8001d36 <bldc_interface_process_packet+0x144e>
	}

	int32_t ind = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
	unsigned char id = data[0];
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	74fb      	strb	r3, [r7, #19]
	data++;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3301      	adds	r3, #1
 8000922:	607b      	str	r3, [r7, #4]
	len--;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	3b01      	subs	r3, #1
 8000928:	603b      	str	r3, [r7, #0]

	switch (id) {
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	2b21      	cmp	r3, #33	@ 0x21
 800092e:	f201 81eb 	bhi.w	8001d08 <bldc_interface_process_packet+0x1420>
 8000932:	a201      	add	r2, pc, #4	@ (adr r2, 8000938 <bldc_interface_process_packet+0x50>)
 8000934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000938:	080009c1 	.word	0x080009c1
 800093c:	08001d09 	.word	0x08001d09
 8000940:	08001d09 	.word	0x08001d09
 8000944:	08001d09 	.word	0x08001d09
 8000948:	08000a0b 	.word	0x08000a0b
 800094c:	08001d09 	.word	0x08001d09
 8000950:	08001d09 	.word	0x08001d09
 8000954:	08001d09 	.word	0x08001d09
 8000958:	08001d09 	.word	0x08001d09
 800095c:	08001d09 	.word	0x08001d09
 8000960:	08001d09 	.word	0x08001d09
 8000964:	08001d09 	.word	0x08001d09
 8000968:	08001d09 	.word	0x08001d09
 800096c:	08001ce5 	.word	0x08001ce5
 8000970:	08000c91 	.word	0x08000c91
 8000974:	08000c91 	.word	0x08000c91
 8000978:	08001cf5 	.word	0x08001cf5
 800097c:	0800153d 	.word	0x0800153d
 8000980:	0800153d 	.word	0x0800153d
 8000984:	08001d09 	.word	0x08001d09
 8000988:	08001d09 	.word	0x08001d09
 800098c:	08000c25 	.word	0x08000c25
 8000990:	08000c45 	.word	0x08000c45
 8000994:	08001d09 	.word	0x08001d09
 8000998:	08001b4d 	.word	0x08001b4d
 800099c:	08001d09 	.word	0x08001d09
 80009a0:	08001d09 	.word	0x08001d09
 80009a4:	08001d09 	.word	0x08001d09
 80009a8:	08001d09 	.word	0x08001d09
 80009ac:	08001d09 	.word	0x08001d09
 80009b0:	08001d09 	.word	0x08001d09
 80009b4:	08001bf5 	.word	0x08001bf5
 80009b8:	08001c51 	.word	0x08001c51
 80009bc:	08001cad 	.word	0x08001cad
	case COMM_FW_VERSION:
		if (len == 2) {
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d117      	bne.n	80009f6 <bldc_interface_process_packet+0x10e>
			ind = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	60fa      	str	r2, [r7, #12]
 80009d0:	461a      	mov	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b8a      	ldr	r3, [pc, #552]	@ (8000c04 <bldc_interface_process_packet+0x31c>)
 80009dc:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	60fa      	str	r2, [r7, #12]
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b86      	ldr	r3, [pc, #536]	@ (8000c08 <bldc_interface_process_packet+0x320>)
 80009f0:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 80009f2:	f001 b9a0 	b.w	8001d36 <bldc_interface_process_packet+0x144e>
			fw_major = -1;
 80009f6:	4b83      	ldr	r3, [pc, #524]	@ (8000c04 <bldc_interface_process_packet+0x31c>)
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 80009fe:	4b82      	ldr	r3, [pc, #520]	@ (8000c08 <bldc_interface_process_packet+0x320>)
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	601a      	str	r2, [r3, #0]
		break;
 8000a06:	f001 b996 	b.w	8001d36 <bldc_interface_process_packet+0x144e>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f001 fb32 	bl	8002082 <buffer_get_float16>
 8000a1e:	eef0 7a40 	vmov.f32	s15, s0
 8000a22:	4b7a      	ldr	r3, [pc, #488]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a24:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f001 fb25 	bl	8002082 <buffer_get_float16>
 8000a38:	eef0 7a40 	vmov.f32	s15, s0
 8000a3c:	4b73      	ldr	r3, [pc, #460]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a3e:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4619      	mov	r1, r3
 8000a48:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f001 fb33 	bl	80020b8 <buffer_get_float32>
 8000a52:	eef0 7a40 	vmov.f32	s15, s0
 8000a56:	4b6d      	ldr	r3, [pc, #436]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a58:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4619      	mov	r1, r3
 8000a62:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f001 fb26 	bl	80020b8 <buffer_get_float32>
 8000a6c:	eef0 7a40 	vmov.f32	s15, s0
 8000a70:	4b66      	ldr	r3, [pc, #408]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a72:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f001 fb19 	bl	80020b8 <buffer_get_float32>
 8000a86:	eef0 7a40 	vmov.f32	s15, s0
 8000a8a:	4b60      	ldr	r3, [pc, #384]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a8c:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f001 fb0c 	bl	80020b8 <buffer_get_float32>
 8000aa0:	eef0 7a40 	vmov.f32	s15, s0
 8000aa4:	4b59      	ldr	r3, [pc, #356]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000aa6:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8000c14 <bldc_interface_process_packet+0x32c>
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f001 fae4 	bl	8002082 <buffer_get_float16>
 8000aba:	eef0 7a40 	vmov.f32	s15, s0
 8000abe:	4b53      	ldr	r3, [pc, #332]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000ac0:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4619      	mov	r1, r3
 8000aca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f001 faf2 	bl	80020b8 <buffer_get_float32>
 8000ad4:	eef0 7a40 	vmov.f32	s15, s0
 8000ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000ada:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f001 faca 	bl	8002082 <buffer_get_float16>
 8000aee:	eef0 7a40 	vmov.f32	s15, s0
 8000af2:	4b46      	ldr	r3, [pc, #280]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000af4:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f001 fad8 	bl	80020b8 <buffer_get_float32>
 8000b08:	eef0 7a40 	vmov.f32	s15, s0
 8000b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b0e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f001 facb 	bl	80020b8 <buffer_get_float32>
 8000b22:	eef0 7a40 	vmov.f32	s15, s0
 8000b26:	4b39      	ldr	r3, [pc, #228]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b28:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f001 fabe 	bl	80020b8 <buffer_get_float32>
 8000b3c:	eef0 7a40 	vmov.f32	s15, s0
 8000b40:	4b32      	ldr	r3, [pc, #200]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b42:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f001 fab1 	bl	80020b8 <buffer_get_float32>
 8000b56:	eef0 7a40 	vmov.f32	s15, s0
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b5c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f001 fa2b 	bl	8001fc2 <buffer_get_int32>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a27      	ldr	r2, [pc, #156]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b70:	6353      	str	r3, [r2, #52]	@ 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4619      	mov	r1, r3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f001 fa22 	bl	8001fc2 <buffer_get_int32>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a22      	ldr	r2, [pc, #136]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b82:	6393      	str	r3, [r2, #56]	@ 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60fa      	str	r2, [r7, #12]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		if (ind < (int)len) {
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	da0d      	bge.n	8000bbc <bldc_interface_process_packet+0x2d4>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8000c1c <bldc_interface_process_packet+0x334>
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f001 fa84 	bl	80020b8 <buffer_get_float32>
 8000bb0:	eef0 7a40 	vmov.f32	s15, s0
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bb6:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
 8000bba:	e003      	b.n	8000bc4 <bldc_interface_process_packet+0x2dc>
		} else {
			values.pid_pos = 0.0;
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		if (ind < (int)len) {
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	da0a      	bge.n	8000be2 <bldc_interface_process_packet+0x2fa>
			values.vesc_id = data[ind++];
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60fa      	str	r2, [r7, #12]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000be0:	e003      	b.n	8000bea <bldc_interface_process_packet+0x302>
		} else {
			values.vesc_id = 255;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000be4:	22ff      	movs	r2, #255	@ 0xff
 8000be6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		}

		if (rx_value_func) {
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <bldc_interface_process_packet+0x338>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f001 808c 	beq.w	8001d0c <bldc_interface_process_packet+0x1424>
			rx_value_func(&values);
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <bldc_interface_process_packet+0x338>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bfa:	4798      	blx	r3
		}
		break;
 8000bfc:	f001 b886 	b.w	8001d0c <bldc_interface_process_packet+0x1424>
 8000c00:	20000990 	.word	0x20000990
 8000c04:	2000070c 	.word	0x2000070c
 8000c08:	20000710 	.word	0x20000710
 8000c0c:	200006c4 	.word	0x200006c4
 8000c10:	42c80000 	.word	0x42c80000
 8000c14:	447a0000 	.word	0x447a0000
 8000c18:	461c4000 	.word	0x461c4000
 8000c1c:	49742400 	.word	0x49742400
 8000c20:	20000994 	.word	0x20000994

	case COMM_PRINT:
		if (rx_printf_func) {
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <bldc_interface_process_packet+0x398>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f001 8071 	beq.w	8001d10 <bldc_interface_process_packet+0x1428>
			data[len] = '\0';
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <bldc_interface_process_packet+0x398>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	4798      	blx	r3
		}
		break;
 8000c40:	f001 b866 	b.w	8001d10 <bldc_interface_process_packet+0x1428>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000c84 <bldc_interface_process_packet+0x39c>
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f001 fa30 	bl	80020b8 <buffer_get_float32>
 8000c58:	eef0 7a40 	vmov.f32	s15, s0
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <bldc_interface_process_packet+0x3a0>)
 8000c5e:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <bldc_interface_process_packet+0x3a4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f001 8054 	beq.w	8001d14 <bldc_interface_process_packet+0x142c>
			rx_rotor_pos_func(rotor_pos);
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <bldc_interface_process_packet+0x3a4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <bldc_interface_process_packet+0x3a0>)
 8000c72:	edd2 7a00 	vldr	s15, [r2]
 8000c76:	eeb0 0a67 	vmov.f32	s0, s15
 8000c7a:	4798      	blx	r3
		}
		break;
 8000c7c:	f001 b84a 	b.w	8001d14 <bldc_interface_process_packet+0x142c>
 8000c80:	20000998 	.word	0x20000998
 8000c84:	47c35000 	.word	0x47c35000
 8000c88:	20000714 	.word	0x20000714
 8000c8c:	2000099c 	.word	0x2000099c
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
		mcconf.pwm_mode = data[ind++];
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60fa      	str	r2, [r7, #12]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781a      	ldrb	r2, [r3, #0]
 8000ca2:	4bc7      	ldr	r3, [pc, #796]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ca4:	701a      	strb	r2, [r3, #0]
		mcconf.comm_mode = data[ind++];
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	60fa      	str	r2, [r7, #12]
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4bc2      	ldr	r3, [pc, #776]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cb6:	705a      	strb	r2, [r3, #1]
		mcconf.motor_type = data[ind++];
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60fa      	str	r2, [r7, #12]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	4bbe      	ldr	r3, [pc, #760]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cc8:	709a      	strb	r2, [r3, #2]
		mcconf.sensor_mode = data[ind++];
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	60fa      	str	r2, [r7, #12]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	4bb9      	ldr	r3, [pc, #740]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cda:	70da      	strb	r2, [r3, #3]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f001 fa04 	bl	80020f0 <buffer_get_float32_auto>
 8000ce8:	eef0 7a40 	vmov.f32	s15, s0
 8000cec:	4bb4      	ldr	r3, [pc, #720]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cee:	edc3 7a01 	vstr	s15, [r3, #4]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f001 f9f9 	bl	80020f0 <buffer_get_float32_auto>
 8000cfe:	eef0 7a40 	vmov.f32	s15, s0
 8000d02:	4baf      	ldr	r3, [pc, #700]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d04:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f001 f9ee 	bl	80020f0 <buffer_get_float32_auto>
 8000d14:	eef0 7a40 	vmov.f32	s15, s0
 8000d18:	4ba9      	ldr	r3, [pc, #676]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d1a:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f001 f9e3 	bl	80020f0 <buffer_get_float32_auto>
 8000d2a:	eef0 7a40 	vmov.f32	s15, s0
 8000d2e:	4ba4      	ldr	r3, [pc, #656]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d30:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f001 f9d8 	bl	80020f0 <buffer_get_float32_auto>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
 8000d44:	4b9e      	ldr	r3, [pc, #632]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d46:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f001 f9cd 	bl	80020f0 <buffer_get_float32_auto>
 8000d56:	eef0 7a40 	vmov.f32	s15, s0
 8000d5a:	4b99      	ldr	r3, [pc, #612]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d5c:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f001 f9c2 	bl	80020f0 <buffer_get_float32_auto>
 8000d6c:	eef0 7a40 	vmov.f32	s15, s0
 8000d70:	4b93      	ldr	r3, [pc, #588]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d72:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f001 f9b7 	bl	80020f0 <buffer_get_float32_auto>
 8000d82:	eef0 7a40 	vmov.f32	s15, s0
 8000d86:	4b8e      	ldr	r3, [pc, #568]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d88:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f001 f9ac 	bl	80020f0 <buffer_get_float32_auto>
 8000d98:	eef0 7a40 	vmov.f32	s15, s0
 8000d9c:	4b88      	ldr	r3, [pc, #544]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d9e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f001 f9a1 	bl	80020f0 <buffer_get_float32_auto>
 8000dae:	eef0 7a40 	vmov.f32	s15, s0
 8000db2:	4b83      	ldr	r3, [pc, #524]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000db4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f001 f996 	bl	80020f0 <buffer_get_float32_auto>
 8000dc4:	eef0 7a40 	vmov.f32	s15, s0
 8000dc8:	4b7d      	ldr	r3, [pc, #500]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000dca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f001 f98b 	bl	80020f0 <buffer_get_float32_auto>
 8000dda:	eef0 7a40 	vmov.f32	s15, s0
 8000dde:	4b78      	ldr	r3, [pc, #480]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000de0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4619      	mov	r1, r3
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f001 f980 	bl	80020f0 <buffer_get_float32_auto>
 8000df0:	eef0 7a40 	vmov.f32	s15, s0
 8000df4:	4b72      	ldr	r3, [pc, #456]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000df6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f001 f975 	bl	80020f0 <buffer_get_float32_auto>
 8000e06:	eef0 7a40 	vmov.f32	s15, s0
 8000e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e0c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		mcconf.l_slow_abs_current = data[ind++];
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	60fa      	str	r2, [r7, #12]
 8000e16:	461a      	mov	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b65      	ldr	r3, [pc, #404]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f001 f95b 	bl	80020f0 <buffer_get_float32_auto>
 8000e3a:	eef0 7a40 	vmov.f32	s15, s0
 8000e3e:	4b60      	ldr	r3, [pc, #384]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e40:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4619      	mov	r1, r3
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f001 f950 	bl	80020f0 <buffer_get_float32_auto>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
 8000e54:	4b5a      	ldr	r3, [pc, #360]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e56:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f001 f945 	bl	80020f0 <buffer_get_float32_auto>
 8000e66:	eef0 7a40 	vmov.f32	s15, s0
 8000e6a:	4b55      	ldr	r3, [pc, #340]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e6c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f001 f93a 	bl	80020f0 <buffer_get_float32_auto>
 8000e7c:	eef0 7a40 	vmov.f32	s15, s0
 8000e80:	4b4f      	ldr	r3, [pc, #316]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e82:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f001 f92f 	bl	80020f0 <buffer_get_float32_auto>
 8000e92:	eef0 7a40 	vmov.f32	s15, s0
 8000e96:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e98:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f001 f924 	bl	80020f0 <buffer_get_float32_auto>
 8000ea8:	eef0 7a40 	vmov.f32	s15, s0
 8000eac:	4b44      	ldr	r3, [pc, #272]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000eae:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f001 f919 	bl	80020f0 <buffer_get_float32_auto>
 8000ebe:	eef0 7a40 	vmov.f32	s15, s0
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ec4:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f001 f90e 	bl	80020f0 <buffer_get_float32_auto>
 8000ed4:	eef0 7a40 	vmov.f32	s15, s0
 8000ed8:	4b39      	ldr	r3, [pc, #228]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000eda:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 f903 	bl	80020f0 <buffer_get_float32_auto>
 8000eea:	eef0 7a40 	vmov.f32	s15, s0
 8000eee:	4b34      	ldr	r3, [pc, #208]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ef0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

		mcconf.lo_current_max = mcconf.l_current_max;
 8000ef4:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4a31      	ldr	r2, [pc, #196]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000efa:	6653      	str	r3, [r2, #100]	@ 0x64
		mcconf.lo_current_min = mcconf.l_current_min;
 8000efc:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f02:	6693      	str	r3, [r2, #104]	@ 0x68
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 8000f04:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f0a:	66d3      	str	r3, [r2, #108]	@ 0x6c
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f12:	6713      	str	r3, [r2, #112]	@ 0x70
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 8000f14:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4a29      	ldr	r2, [pc, #164]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f1a:	6753      	str	r3, [r2, #116]	@ 0x74
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4a27      	ldr	r2, [pc, #156]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f22:	6793      	str	r3, [r2, #120]	@ 0x78

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 f8e0 	bl	80020f0 <buffer_get_float32_auto>
 8000f30:	eef0 7a40 	vmov.f32	s15, s0
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f36:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f001 f8d5 	bl	80020f0 <buffer_get_float32_auto>
 8000f46:	eef0 7a40 	vmov.f32	s15, s0
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f4c:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f001 f8ca 	bl	80020f0 <buffer_get_float32_auto>
 8000f5c:	eef0 7a40 	vmov.f32	s15, s0
 8000f60:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f62:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f001 f8bf 	bl	80020f0 <buffer_get_float32_auto>
 8000f72:	eef0 7a40 	vmov.f32	s15, s0
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f78:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f001 f8b4 	bl	80020f0 <buffer_get_float32_auto>
 8000f88:	eef0 7a40 	vmov.f32	s15, s0
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f8e:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f001 f8a9 	bl	80020f0 <buffer_get_float32_auto>
 8000f9e:	eef0 7a40 	vmov.f32	s15, s0
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000fa4:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4619      	mov	r1, r3
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f001 f89e 	bl	80020f0 <buffer_get_float32_auto>
 8000fb4:	eef0 7a40 	vmov.f32	s15, s0
 8000fb8:	4b01      	ldr	r3, [pc, #4]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000fba:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
 8000fbe:	e001      	b.n	8000fc4 <bldc_interface_process_packet+0x6dc>
 8000fc0:	20000718 	.word	0x20000718

		memcpy(mcconf.hall_table, data + ind, 8);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	441a      	add	r2, r3
 8000fcc:	4bc9      	ldr	r3, [pc, #804]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8000fce:	3398      	adds	r3, #152	@ 0x98
 8000fd0:	6810      	ldr	r0, [r2, #0]
 8000fd2:	6851      	ldr	r1, [r2, #4]
 8000fd4:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3308      	adds	r3, #8
 8000fda:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f001 f884 	bl	80020f0 <buffer_get_float32_auto>
 8000fe8:	eef0 7a40 	vmov.f32	s15, s0
 8000fec:	4bc1      	ldr	r3, [pc, #772]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8000fee:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f001 f879 	bl	80020f0 <buffer_get_float32_auto>
 8000ffe:	eef0 7a40 	vmov.f32	s15, s0
 8001002:	4bbc      	ldr	r3, [pc, #752]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001004:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f001 f86e 	bl	80020f0 <buffer_get_float32_auto>
 8001014:	eef0 7a40 	vmov.f32	s15, s0
 8001018:	4bb6      	ldr	r3, [pc, #728]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800101a:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4619      	mov	r1, r3
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f001 f863 	bl	80020f0 <buffer_get_float32_auto>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	4bb1      	ldr	r3, [pc, #708]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001030:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f001 f858 	bl	80020f0 <buffer_get_float32_auto>
 8001040:	eef0 7a40 	vmov.f32	s15, s0
 8001044:	4bab      	ldr	r3, [pc, #684]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001046:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
		mcconf.foc_encoder_inverted = data[ind++];
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	60fa      	str	r2, [r7, #12]
 8001050:	461a      	mov	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf14      	ite	ne
 800105c:	2301      	movne	r3, #1
 800105e:	2300      	moveq	r3, #0
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4ba4      	ldr	r3, [pc, #656]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001064:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f001 f83e 	bl	80020f0 <buffer_get_float32_auto>
 8001074:	eef0 7a40 	vmov.f32	s15, s0
 8001078:	4b9e      	ldr	r3, [pc, #632]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800107a:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4619      	mov	r1, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f001 f833 	bl	80020f0 <buffer_get_float32_auto>
 800108a:	eef0 7a40 	vmov.f32	s15, s0
 800108e:	4b99      	ldr	r3, [pc, #612]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001090:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		mcconf.foc_sensor_mode = data[ind++];
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	60fa      	str	r2, [r7, #12]
 800109a:	461a      	mov	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	4b94      	ldr	r3, [pc, #592]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010a4:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f001 f81e 	bl	80020f0 <buffer_get_float32_auto>
 80010b4:	eef0 7a40 	vmov.f32	s15, s0
 80010b8:	4b8e      	ldr	r3, [pc, #568]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010ba:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f001 f813 	bl	80020f0 <buffer_get_float32_auto>
 80010ca:	eef0 7a40 	vmov.f32	s15, s0
 80010ce:	4b89      	ldr	r3, [pc, #548]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010d0:	edc3 7a36 	vstr	s15, [r3, #216]	@ 0xd8
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f001 f808 	bl	80020f0 <buffer_get_float32_auto>
 80010e0:	eef0 7a40 	vmov.f32	s15, s0
 80010e4:	4b83      	ldr	r3, [pc, #524]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010e6:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fffd 	bl	80020f0 <buffer_get_float32_auto>
 80010f6:	eef0 7a40 	vmov.f32	s15, s0
 80010fa:	4b7e      	ldr	r3, [pc, #504]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010fc:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fff2 	bl	80020f0 <buffer_get_float32_auto>
 800110c:	eef0 7a40 	vmov.f32	s15, s0
 8001110:	4b78      	ldr	r3, [pc, #480]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001112:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 ffe7 	bl	80020f0 <buffer_get_float32_auto>
 8001122:	eef0 7a40 	vmov.f32	s15, s0
 8001126:	4b73      	ldr	r3, [pc, #460]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001128:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4619      	mov	r1, r3
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 ffdc 	bl	80020f0 <buffer_get_float32_auto>
 8001138:	eef0 7a40 	vmov.f32	s15, s0
 800113c:	4b6d      	ldr	r3, [pc, #436]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800113e:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	4619      	mov	r1, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 ffd1 	bl	80020f0 <buffer_get_float32_auto>
 800114e:	eef0 7a40 	vmov.f32	s15, s0
 8001152:	4b68      	ldr	r3, [pc, #416]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001154:	edc3 7a37 	vstr	s15, [r3, #220]	@ 0xdc
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 ffc6 	bl	80020f0 <buffer_get_float32_auto>
 8001164:	eef0 7a40 	vmov.f32	s15, s0
 8001168:	4b62      	ldr	r3, [pc, #392]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800116a:	edc3 7a38 	vstr	s15, [r3, #224]	@ 0xe0
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4619      	mov	r1, r3
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 ffbb 	bl	80020f0 <buffer_get_float32_auto>
 800117a:	eef0 7a40 	vmov.f32	s15, s0
 800117e:	4b5d      	ldr	r3, [pc, #372]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001180:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 ffb0 	bl	80020f0 <buffer_get_float32_auto>
 8001190:	eef0 7a40 	vmov.f32	s15, s0
 8001194:	4b57      	ldr	r3, [pc, #348]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001196:	edc3 7a3a 	vstr	s15, [r3, #232]	@ 0xe8
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 ffa5 	bl	80020f0 <buffer_get_float32_auto>
 80011a6:	eef0 7a40 	vmov.f32	s15, s0
 80011aa:	4b52      	ldr	r3, [pc, #328]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011ac:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 ff9a 	bl	80020f0 <buffer_get_float32_auto>
 80011bc:	eef0 7a40 	vmov.f32	s15, s0
 80011c0:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011c2:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 ff8f 	bl	80020f0 <buffer_get_float32_auto>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
 80011d6:	4b47      	ldr	r3, [pc, #284]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011d8:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	441a      	add	r2, r3
 80011e4:	4b43      	ldr	r3, [pc, #268]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011e6:	33f9      	adds	r3, #249	@ 0xf9
 80011e8:	6811      	ldr	r1, [r2, #0]
 80011ea:	6852      	ldr	r2, [r2, #4]
 80011ec:	6019      	str	r1, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
		ind += 8;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3308      	adds	r3, #8
 80011f4:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 ff77 	bl	80020f0 <buffer_get_float32_auto>
 8001202:	eef0 7a40 	vmov.f32	s15, s0
 8001206:	4b3b      	ldr	r3, [pc, #236]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001208:	edc3 7a41 	vstr	s15, [r3, #260]	@ 0x104
		mcconf.foc_sample_v0_v7 = data[ind++];
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	60fa      	str	r2, [r7, #12]
 8001212:	461a      	mov	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf14      	ite	ne
 800121e:	2301      	movne	r3, #1
 8001220:	2300      	moveq	r3, #0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b33      	ldr	r3, [pc, #204]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001226:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
		mcconf.foc_sample_high_current = data[ind++];
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	60fa      	str	r2, [r7, #12]
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001244:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 ff4e 	bl	80020f0 <buffer_get_float32_auto>
 8001254:	eef0 7a40 	vmov.f32	s15, s0
 8001258:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800125a:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
		mcconf.foc_temp_comp = data[ind++];
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	60fa      	str	r2, [r7, #12]
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf14      	ite	ne
 8001270:	2301      	movne	r3, #1
 8001272:	2300      	moveq	r3, #0
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001278:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 ff34 	bl	80020f0 <buffer_get_float32_auto>
 8001288:	eef0 7a40 	vmov.f32	s15, s0
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800128e:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 ff29 	bl	80020f0 <buffer_get_float32_auto>
 800129e:	eef0 7a40 	vmov.f32	s15, s0
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012a4:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 ff1e 	bl	80020f0 <buffer_get_float32_auto>
 80012b4:	eef0 7a40 	vmov.f32	s15, s0
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012ba:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 ff13 	bl	80020f0 <buffer_get_float32_auto>
 80012ca:	eef0 7a40 	vmov.f32	s15, s0
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012d0:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 ff08 	bl	80020f0 <buffer_get_float32_auto>
 80012e0:	eef0 7a40 	vmov.f32	s15, s0
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012e6:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	e002      	b.n	80012f8 <bldc_interface_process_packet+0xa10>
 80012f2:	bf00      	nop
 80012f4:	20000718 	.word	0x20000718
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 fef9 	bl	80020f0 <buffer_get_float32_auto>
 80012fe:	eef0 7a40 	vmov.f32	s15, s0
 8001302:	4b8c      	ldr	r3, [pc, #560]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001304:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 feee 	bl	80020f0 <buffer_get_float32_auto>
 8001314:	eef0 7a40 	vmov.f32	s15, s0
 8001318:	4b86      	ldr	r3, [pc, #536]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800131a:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
		mcconf.s_pid_allow_braking = data[ind++];
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	60fa      	str	r2, [r7, #12]
 8001324:	461a      	mov	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b7f      	ldr	r3, [pc, #508]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001338:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	4619      	mov	r1, r3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fed4 	bl	80020f0 <buffer_get_float32_auto>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	4b79      	ldr	r3, [pc, #484]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800134e:	edc3 7a4d 	vstr	s15, [r3, #308]	@ 0x134
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 fec9 	bl	80020f0 <buffer_get_float32_auto>
 800135e:	eef0 7a40 	vmov.f32	s15, s0
 8001362:	4b74      	ldr	r3, [pc, #464]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001364:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 febe 	bl	80020f0 <buffer_get_float32_auto>
 8001374:	eef0 7a40 	vmov.f32	s15, s0
 8001378:	4b6e      	ldr	r3, [pc, #440]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800137a:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4619      	mov	r1, r3
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 feb3 	bl	80020f0 <buffer_get_float32_auto>
 800138a:	eef0 7a40 	vmov.f32	s15, s0
 800138e:	4b69      	ldr	r3, [pc, #420]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001390:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fea8 	bl	80020f0 <buffer_get_float32_auto>
 80013a0:	eef0 7a40 	vmov.f32	s15, s0
 80013a4:	4b63      	ldr	r3, [pc, #396]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013a6:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 fe9d 	bl	80020f0 <buffer_get_float32_auto>
 80013b6:	eef0 7a40 	vmov.f32	s15, s0
 80013ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013bc:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 fe92 	bl	80020f0 <buffer_get_float32_auto>
 80013cc:	eef0 7a40 	vmov.f32	s15, s0
 80013d0:	4b58      	ldr	r3, [pc, #352]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013d2:	edc3 7a53 	vstr	s15, [r3, #332]	@ 0x14c
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	4619      	mov	r1, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fe87 	bl	80020f0 <buffer_get_float32_auto>
 80013e2:	eef0 7a40 	vmov.f32	s15, s0
 80013e6:	4b53      	ldr	r3, [pc, #332]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013e8:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fe7c 	bl	80020f0 <buffer_get_float32_auto>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013fe:	edc3 7a55 	vstr	s15, [r3, #340]	@ 0x154

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 fdda 	bl	8001fc2 <buffer_get_int32>
 800140e:	4603      	mov	r3, r0
 8001410:	4a48      	ldr	r2, [pc, #288]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001412:	f8c2 3158 	str.w	r3, [r2, #344]	@ 0x158
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	4619      	mov	r1, r3
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fe67 	bl	80020f0 <buffer_get_float32_auto>
 8001422:	eef0 7a40 	vmov.f32	s15, s0
 8001426:	4b43      	ldr	r3, [pc, #268]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001428:	edc3 7a57 	vstr	s15, [r3, #348]	@ 0x15c
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4619      	mov	r1, r3
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fe5c 	bl	80020f0 <buffer_get_float32_auto>
 8001438:	eef0 7a40 	vmov.f32	s15, s0
 800143c:	4b3d      	ldr	r3, [pc, #244]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800143e:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	4619      	mov	r1, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fdea 	bl	8002022 <buffer_get_uint32>
 800144e:	4603      	mov	r3, r0
 8001450:	4a38      	ldr	r2, [pc, #224]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001452:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
		mcconf.m_sensor_port_mode = data[ind++];
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	60fa      	str	r2, [r7, #12]
 800145c:	461a      	mov	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001466:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
		mcconf.m_invert_direction = data[ind++];
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	60fa      	str	r2, [r7, #12]
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf14      	ite	ne
 800147c:	2301      	movne	r3, #1
 800147e:	2300      	moveq	r3, #0
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001484:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
		mcconf.m_drv8301_oc_mode = data[ind++];
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60fa      	str	r2, [r7, #12]
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001498:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
		mcconf.m_drv8301_oc_adj = data[ind++];
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60fa      	str	r2, [r7, #12]
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014ae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4619      	mov	r1, r3
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fe19 	bl	80020f0 <buffer_get_float32_auto>
 80014be:	eef0 7a40 	vmov.f32	s15, s0
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014c4:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	4619      	mov	r1, r3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fe0e 	bl	80020f0 <buffer_get_float32_auto>
 80014d4:	eef0 7a40 	vmov.f32	s15, s0
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014da:	edc3 7a5d 	vstr	s15, [r3, #372]	@ 0x174
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fe03 	bl	80020f0 <buffer_get_float32_auto>
 80014ea:	eef0 7a40 	vmov.f32	s15, s0
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014f0:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fdf8 	bl	80020f0 <buffer_get_float32_auto>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001506:	edc3 7a5f 	vstr	s15, [r3, #380]	@ 0x17c
		mcconf.m_out_aux_mode = data[ind++];
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	60fa      	str	r2, [r7, #12]
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800151a:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180

		if (rx_mcconf_func) {
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <bldc_interface_process_packet+0xc50>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 83f8 	beq.w	8001d18 <bldc_interface_process_packet+0x1430>
			rx_mcconf_func(&mcconf);
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <bldc_interface_process_packet+0xc50>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4801      	ldr	r0, [pc, #4]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800152e:	4798      	blx	r3
		}
		break;
 8001530:	e3f2      	b.n	8001d18 <bldc_interface_process_packet+0x1430>
 8001532:	bf00      	nop
 8001534:	20000718 	.word	0x20000718
 8001538:	200009a0 	.word	0x200009a0

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
		appconf.controller_id = data[ind++];
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60fa      	str	r2, [r7, #12]
 8001546:	461a      	mov	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	4bba      	ldr	r3, [pc, #744]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001550:	701a      	strb	r2, [r3, #0]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4619      	mov	r1, r3
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fd62 	bl	8002022 <buffer_get_uint32>
 800155e:	4603      	mov	r3, r0
 8001560:	4ab5      	ldr	r2, [pc, #724]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001562:	6053      	str	r3, [r2, #4]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fdc0 	bl	80020f0 <buffer_get_float32_auto>
 8001570:	eef0 7a40 	vmov.f32	s15, s0
 8001574:	4bb0      	ldr	r3, [pc, #704]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001576:	edc3 7a02 	vstr	s15, [r3, #8]
		appconf.send_can_status = data[ind++];
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	60fa      	str	r2, [r7, #12]
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf14      	ite	ne
 800158c:	2301      	movne	r3, #1
 800158e:	2300      	moveq	r3, #0
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4ba9      	ldr	r3, [pc, #676]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001594:	731a      	strb	r2, [r3, #12]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4619      	mov	r1, r3
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fced 	bl	8001f7c <buffer_get_uint16>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4ba4      	ldr	r3, [pc, #656]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015a8:	611a      	str	r2, [r3, #16]
		appconf.can_baud_rate = data[ind++];
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	60fa      	str	r2, [r7, #12]
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b9f      	ldr	r3, [pc, #636]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015ba:	751a      	strb	r2, [r3, #20]

		appconf.app_to_use = data[ind++];
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60fa      	str	r2, [r7, #12]
 80015c2:	461a      	mov	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	4b9b      	ldr	r3, [pc, #620]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015cc:	755a      	strb	r2, [r3, #21]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	60fa      	str	r2, [r7, #12]
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	4b96      	ldr	r3, [pc, #600]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015de:	761a      	strb	r2, [r3, #24]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fd82 	bl	80020f0 <buffer_get_float32_auto>
 80015ec:	eef0 7a40 	vmov.f32	s15, s0
 80015f0:	4b91      	ldr	r3, [pc, #580]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015f2:	edc3 7a07 	vstr	s15, [r3, #28]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4619      	mov	r1, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fd77 	bl	80020f0 <buffer_get_float32_auto>
 8001602:	eef0 7a40 	vmov.f32	s15, s0
 8001606:	4b8c      	ldr	r3, [pc, #560]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001608:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 fd6c 	bl	80020f0 <buffer_get_float32_auto>
 8001618:	eef0 7a40 	vmov.f32	s15, s0
 800161c:	4b86      	ldr	r3, [pc, #536]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800161e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fd61 	bl	80020f0 <buffer_get_float32_auto>
 800162e:	eef0 7a40 	vmov.f32	s15, s0
 8001632:	4b81      	ldr	r3, [pc, #516]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001634:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fd56 	bl	80020f0 <buffer_get_float32_auto>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
 8001648:	4b7b      	ldr	r3, [pc, #492]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800164a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		appconf.app_ppm_conf.median_filter = data[ind++];
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	60fa      	str	r2, [r7, #12]
 8001654:	461a      	mov	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b74      	ldr	r3, [pc, #464]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		appconf.app_ppm_conf.safe_start = data[ind++];
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60fa      	str	r2, [r7, #12]
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf14      	ite	ne
 800167e:	2301      	movne	r3, #1
 8001680:	2300      	moveq	r3, #0
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b6c      	ldr	r3, [pc, #432]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001686:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4619      	mov	r1, r3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fd2d 	bl	80020f0 <buffer_get_float32_auto>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
 800169a:	4b67      	ldr	r3, [pc, #412]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800169c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fd22 	bl	80020f0 <buffer_get_float32_auto>
 80016ac:	eef0 7a40 	vmov.f32	s15, s0
 80016b0:	4b61      	ldr	r3, [pc, #388]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016b2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60fa      	str	r2, [r7, #12]
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fd0d 	bl	80020f0 <buffer_get_float32_auto>
 80016d6:	eef0 7a40 	vmov.f32	s15, s0
 80016da:	4b57      	ldr	r3, [pc, #348]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016dc:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fd02 	bl	80020f0 <buffer_get_float32_auto>
 80016ec:	eef0 7a40 	vmov.f32	s15, s0
 80016f0:	4b51      	ldr	r3, [pc, #324]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016f2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		appconf.app_ppm_conf.multi_esc = data[ind++];
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	60fa      	str	r2, [r7, #12]
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b4a      	ldr	r3, [pc, #296]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001710:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		appconf.app_ppm_conf.tc = data[ind++];
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60fa      	str	r2, [r7, #12]
 800171a:	461a      	mov	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	bf14      	ite	ne
 8001726:	2301      	movne	r3, #1
 8001728:	2300      	moveq	r3, #0
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b42      	ldr	r3, [pc, #264]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800172e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fcd9 	bl	80020f0 <buffer_get_float32_auto>
 800173e:	eef0 7a40 	vmov.f32	s15, s0
 8001742:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001744:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

		appconf.app_adc_conf.ctrl_type = data[ind++];
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60fa      	str	r2, [r7, #12]
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fcc4 	bl	80020f0 <buffer_get_float32_auto>
 8001768:	eef0 7a40 	vmov.f32	s15, s0
 800176c:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800176e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fcb9 	bl	80020f0 <buffer_get_float32_auto>
 800177e:	eef0 7a40 	vmov.f32	s15, s0
 8001782:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001784:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fcae 	bl	80020f0 <buffer_get_float32_auto>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800179a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fca3 	bl	80020f0 <buffer_get_float32_auto>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017b0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4619      	mov	r1, r3
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fc98 	bl	80020f0 <buffer_get_float32_auto>
 80017c0:	eef0 7a40 	vmov.f32	s15, s0
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017c6:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fc8d 	bl	80020f0 <buffer_get_float32_auto>
 80017d6:	eef0 7a40 	vmov.f32	s15, s0
 80017da:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017dc:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
		appconf.app_adc_conf.use_filter = data[ind++];
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60fa      	str	r2, [r7, #12]
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017fa:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
		appconf.app_adc_conf.safe_start = data[ind++];
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	60fa      	str	r2, [r7, #12]
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001818:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60fa      	str	r2, [r7, #12]
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2da      	uxtb	r2, r3
 8001834:	e002      	b.n	800183c <bldc_interface_process_packet+0xf54>
 8001836:	bf00      	nop
 8001838:	2000089c 	.word	0x2000089c
 800183c:	4bb6      	ldr	r3, [pc, #728]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800183e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	60fa      	str	r2, [r7, #12]
 8001848:	461a      	mov	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4baf      	ldr	r3, [pc, #700]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800185c:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60fa      	str	r2, [r7, #12]
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4ba7      	ldr	r3, [pc, #668]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800187a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	60fa      	str	r2, [r7, #12]
 8001884:	461a      	mov	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4ba0      	ldr	r3, [pc, #640]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001898:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fc24 	bl	80020f0 <buffer_get_float32_auto>
 80018a8:	eef0 7a40 	vmov.f32	s15, s0
 80018ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018ae:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4619      	mov	r1, r3
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fc19 	bl	80020f0 <buffer_get_float32_auto>
 80018be:	eef0 7a40 	vmov.f32	s15, s0
 80018c2:	4b95      	ldr	r3, [pc, #596]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018c4:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	60fa      	str	r2, [r7, #12]
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	4b90      	ldr	r3, [pc, #576]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018d8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	4619      	mov	r1, r3
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fc04 	bl	80020f0 <buffer_get_float32_auto>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	4b8a      	ldr	r3, [pc, #552]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018ee:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fbf9 	bl	80020f0 <buffer_get_float32_auto>
 80018fe:	eef0 7a40 	vmov.f32	s15, s0
 8001902:	4b85      	ldr	r3, [pc, #532]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001904:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
		appconf.app_adc_conf.multi_esc = data[ind++];
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60fa      	str	r2, [r7, #12]
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b7d      	ldr	r3, [pc, #500]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001922:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		appconf.app_adc_conf.tc = data[ind++];
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	60fa      	str	r2, [r7, #12]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b76      	ldr	r3, [pc, #472]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001940:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fbd0 	bl	80020f0 <buffer_get_float32_auto>
 8001950:	eef0 7a40 	vmov.f32	s15, s0
 8001954:	4b70      	ldr	r3, [pc, #448]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001956:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fb0b 	bl	8001f7c <buffer_get_uint16>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b6b      	ldr	r3, [pc, #428]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800196c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4619      	mov	r1, r3
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fb53 	bl	8002022 <buffer_get_uint32>
 800197c:	4603      	mov	r3, r0
 800197e:	4a66      	ldr	r2, [pc, #408]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001980:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60fa      	str	r2, [r7, #12]
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	4b61      	ldr	r3, [pc, #388]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001994:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fba6 	bl	80020f0 <buffer_get_float32_auto>
 80019a4:	eef0 7a40 	vmov.f32	s15, s0
 80019a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019aa:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fb9b 	bl	80020f0 <buffer_get_float32_auto>
 80019ba:	eef0 7a40 	vmov.f32	s15, s0
 80019be:	4b56      	ldr	r3, [pc, #344]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019c0:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	4619      	mov	r1, r3
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fb90 	bl	80020f0 <buffer_get_float32_auto>
 80019d0:	eef0 7a40 	vmov.f32	s15, s0
 80019d4:	4b50      	ldr	r3, [pc, #320]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019d6:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fb85 	bl	80020f0 <buffer_get_float32_auto>
 80019e6:	eef0 7a40 	vmov.f32	s15, s0
 80019ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019ec:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fb7a 	bl	80020f0 <buffer_get_float32_auto>
 80019fc:	eef0 7a40 	vmov.f32	s15, s0
 8001a00:	4b45      	ldr	r3, [pc, #276]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a02:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fb6f 	bl	80020f0 <buffer_get_float32_auto>
 8001a12:	eef0 7a40 	vmov.f32	s15, s0
 8001a16:	4b40      	ldr	r3, [pc, #256]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a18:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60fa      	str	r2, [r7, #12]
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a2c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
		appconf.app_chuk_conf.multi_esc = data[ind++];
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60fa      	str	r2, [r7, #12]
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a4a:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
		appconf.app_chuk_conf.tc = data[ind++];
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	60fa      	str	r2, [r7, #12]
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf14      	ite	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	2300      	moveq	r3, #0
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b2c      	ldr	r3, [pc, #176]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a68:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fb3c 	bl	80020f0 <buffer_get_float32_auto>
 8001a78:	eef0 7a40 	vmov.f32	s15, s0
 8001a7c:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a7e:	edc3 7a2e 	vstr	s15, [r3, #184]	@ 0xb8

		appconf.app_nrf_conf.speed = data[ind++];
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60fa      	str	r2, [r7, #12]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	4b21      	ldr	r3, [pc, #132]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a92:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
		appconf.app_nrf_conf.power = data[ind++];
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60fa      	str	r2, [r7, #12]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001aa6:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
		appconf.app_nrf_conf.crc_type = data[ind++];
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	60fa      	str	r2, [r7, #12]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001aba:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
		appconf.app_nrf_conf.retry_delay = data[ind++];
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	60fa      	str	r2, [r7, #12]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001ace:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
		appconf.app_nrf_conf.retries = data[ind++];
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	60fa      	str	r2, [r7, #12]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001ae2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		appconf.app_nrf_conf.channel = data[ind++];
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	60fa      	str	r2, [r7, #12]
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001af6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	461a      	mov	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	441a      	add	r2, r3
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001b04:	33c2      	adds	r3, #194	@ 0xc2
 8001b06:	8811      	ldrh	r1, [r2, #0]
 8001b08:	7892      	ldrb	r2, [r2, #2]
 8001b0a:	8019      	strh	r1, [r3, #0]
 8001b0c:	709a      	strb	r2, [r3, #2]
		ind += 3;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3303      	adds	r3, #3
 8001b12:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	e001      	b.n	8001b1c <bldc_interface_process_packet+0x1234>
 8001b18:	2000089c 	.word	0x2000089c
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	60fa      	str	r2, [r7, #12]
 8001b20:	461a      	mov	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b82      	ldr	r3, [pc, #520]	@ (8001d3c <bldc_interface_process_packet+0x1454>)
 8001b34:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

		if (rx_appconf_func) {
 8001b38:	4b81      	ldr	r3, [pc, #516]	@ (8001d40 <bldc_interface_process_packet+0x1458>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80ed 	beq.w	8001d1c <bldc_interface_process_packet+0x1434>
			rx_appconf_func(&appconf);
 8001b42:	4b7f      	ldr	r3, [pc, #508]	@ (8001d40 <bldc_interface_process_packet+0x1458>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	487d      	ldr	r0, [pc, #500]	@ (8001d3c <bldc_interface_process_packet+0x1454>)
 8001b48:	4798      	blx	r3
		}
		break;
 8001b4a:	e0e7      	b.n	8001d1c <bldc_interface_process_packet+0x1434>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 8001d44 <bldc_interface_process_packet+0x145c>
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 faac 	bl	80020b8 <buffer_get_float32>
 8001b60:	eef0 7a40 	vmov.f32	s15, s0
 8001b64:	4b78      	ldr	r3, [pc, #480]	@ (8001d48 <bldc_interface_process_packet+0x1460>)
 8001b66:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8001d44 <bldc_interface_process_packet+0x145c>
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fa9f 	bl	80020b8 <buffer_get_float32>
 8001b7a:	eef0 7a40 	vmov.f32	s15, s0
 8001b7e:	4b73      	ldr	r3, [pc, #460]	@ (8001d4c <bldc_interface_process_packet+0x1464>)
 8001b80:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e00f      	b.n	8001baa <bldc_interface_process_packet+0x12c2>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	60fa      	str	r2, [r7, #12]
 8001b90:	461a      	mov	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b259      	sxtb	r1, r3
 8001b9a:	4a6d      	ldr	r2, [pc, #436]	@ (8001d50 <bldc_interface_process_packet+0x1468>)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b07      	cmp	r3, #7
 8001bae:	ddec      	ble.n	8001b8a <bldc_interface_process_packet+0x12a2>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60fa      	str	r2, [r7, #12]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b25a      	sxtb	r2, r3
 8001bc0:	4b64      	ldr	r3, [pc, #400]	@ (8001d54 <bldc_interface_process_packet+0x146c>)
 8001bc2:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 8001bc4:	4b64      	ldr	r3, [pc, #400]	@ (8001d58 <bldc_interface_process_packet+0x1470>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a9 	beq.w	8001d20 <bldc_interface_process_packet+0x1438>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 8001bce:	4b62      	ldr	r3, [pc, #392]	@ (8001d58 <bldc_interface_process_packet+0x1470>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a5d      	ldr	r2, [pc, #372]	@ (8001d48 <bldc_interface_process_packet+0x1460>)
 8001bd4:	edd2 7a00 	vldr	s15, [r2]
 8001bd8:	4a5c      	ldr	r2, [pc, #368]	@ (8001d4c <bldc_interface_process_packet+0x1464>)
 8001bda:	ed92 7a00 	vldr	s14, [r2]
 8001bde:	4a5d      	ldr	r2, [pc, #372]	@ (8001d54 <bldc_interface_process_packet+0x146c>)
 8001be0:	f992 2000 	ldrsb.w	r2, [r2]
 8001be4:	4611      	mov	r1, r2
 8001be6:	485a      	ldr	r0, [pc, #360]	@ (8001d50 <bldc_interface_process_packet+0x1468>)
 8001be8:	eef0 0a47 	vmov.f32	s1, s14
 8001bec:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf0:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 8001bf2:	e095      	b.n	8001d20 <bldc_interface_process_packet+0x1438>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fa58 	bl	80020b8 <buffer_get_float32>
 8001c08:	eef0 7a40 	vmov.f32	s15, s0
 8001c0c:	4b54      	ldr	r3, [pc, #336]	@ (8001d60 <bldc_interface_process_packet+0x1478>)
 8001c0e:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4619      	mov	r1, r3
 8001c18:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fa4b 	bl	80020b8 <buffer_get_float32>
 8001c22:	eef0 7a40 	vmov.f32	s15, s0
 8001c26:	4b4f      	ldr	r3, [pc, #316]	@ (8001d64 <bldc_interface_process_packet+0x147c>)
 8001c28:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 8001c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001d68 <bldc_interface_process_packet+0x1480>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d077      	beq.n	8001d24 <bldc_interface_process_packet+0x143c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 8001c34:	4b4c      	ldr	r3, [pc, #304]	@ (8001d68 <bldc_interface_process_packet+0x1480>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a49      	ldr	r2, [pc, #292]	@ (8001d60 <bldc_interface_process_packet+0x1478>)
 8001c3a:	edd2 7a00 	vldr	s15, [r2]
 8001c3e:	4a49      	ldr	r2, [pc, #292]	@ (8001d64 <bldc_interface_process_packet+0x147c>)
 8001c40:	ed92 7a00 	vldr	s14, [r2]
 8001c44:	eef0 0a47 	vmov.f32	s1, s14
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	4798      	blx	r3
		}
		break;
 8001c4e:	e069      	b.n	8001d24 <bldc_interface_process_packet+0x143c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fa2a 	bl	80020b8 <buffer_get_float32>
 8001c64:	eef0 7a40 	vmov.f32	s15, s0
 8001c68:	4b40      	ldr	r3, [pc, #256]	@ (8001d6c <bldc_interface_process_packet+0x1484>)
 8001c6a:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4619      	mov	r1, r3
 8001c74:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fa1d 	bl	80020b8 <buffer_get_float32>
 8001c7e:	eef0 7a40 	vmov.f32	s15, s0
 8001c82:	4b3b      	ldr	r3, [pc, #236]	@ (8001d70 <bldc_interface_process_packet+0x1488>)
 8001c84:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 8001c88:	4b3a      	ldr	r3, [pc, #232]	@ (8001d74 <bldc_interface_process_packet+0x148c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d04b      	beq.n	8001d28 <bldc_interface_process_packet+0x1440>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 8001c90:	4b38      	ldr	r3, [pc, #224]	@ (8001d74 <bldc_interface_process_packet+0x148c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a35      	ldr	r2, [pc, #212]	@ (8001d6c <bldc_interface_process_packet+0x1484>)
 8001c96:	edd2 7a00 	vldr	s15, [r2]
 8001c9a:	4a35      	ldr	r2, [pc, #212]	@ (8001d70 <bldc_interface_process_packet+0x1488>)
 8001c9c:	ed92 7a00 	vldr	s14, [r2]
 8001ca0:	eef0 0a47 	vmov.f32	s1, s14
 8001ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca8:	4798      	blx	r3
		}
		break;
 8001caa:	e03d      	b.n	8001d28 <bldc_interface_process_packet+0x1440>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f9fc 	bl	80020b8 <buffer_get_float32>
 8001cc0:	eef0 7a40 	vmov.f32	s15, s0
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <bldc_interface_process_packet+0x1490>)
 8001cc6:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <bldc_interface_process_packet+0x1494>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d02c      	beq.n	8001d2c <bldc_interface_process_packet+0x1444>
			rx_dec_chuk_func(dec_chuk);
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <bldc_interface_process_packet+0x1494>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a28      	ldr	r2, [pc, #160]	@ (8001d78 <bldc_interface_process_packet+0x1490>)
 8001cd8:	edd2 7a00 	vldr	s15, [r2]
 8001cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce0:	4798      	blx	r3
		}
		break;
 8001ce2:	e023      	b.n	8001d2c <bldc_interface_process_packet+0x1444>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 8001ce4:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <bldc_interface_process_packet+0x1498>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d021      	beq.n	8001d30 <bldc_interface_process_packet+0x1448>
			rx_mcconf_received_func();
 8001cec:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <bldc_interface_process_packet+0x1498>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4798      	blx	r3
		}
		break;
 8001cf2:	e01d      	b.n	8001d30 <bldc_interface_process_packet+0x1448>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <bldc_interface_process_packet+0x149c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01b      	beq.n	8001d34 <bldc_interface_process_packet+0x144c>
			rx_appconf_received_func();
 8001cfc:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <bldc_interface_process_packet+0x149c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4798      	blx	r3
		}
		break;
 8001d02:	e017      	b.n	8001d34 <bldc_interface_process_packet+0x144c>
		return;
 8001d04:	bf00      	nop
 8001d06:	e016      	b.n	8001d36 <bldc_interface_process_packet+0x144e>

	default:
		break;
 8001d08:	bf00      	nop
 8001d0a:	e014      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d0c:	bf00      	nop
 8001d0e:	e012      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d10:	bf00      	nop
 8001d12:	e010      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d14:	bf00      	nop
 8001d16:	e00e      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d18:	bf00      	nop
 8001d1a:	e00c      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d1c:	bf00      	nop
 8001d1e:	e00a      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d20:	bf00      	nop
 8001d22:	e008      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d24:	bf00      	nop
 8001d26:	e006      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d28:	bf00      	nop
 8001d2a:	e004      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d2c:	bf00      	nop
 8001d2e:	e002      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d30:	bf00      	nop
 8001d32:	e000      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d34:	bf00      	nop
	}
}
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2000089c 	.word	0x2000089c
 8001d40:	200009a4 	.word	0x200009a4
 8001d44:	447a0000 	.word	0x447a0000
 8001d48:	20000964 	.word	0x20000964
 8001d4c:	20000968 	.word	0x20000968
 8001d50:	2000096c 	.word	0x2000096c
 8001d54:	20000974 	.word	0x20000974
 8001d58:	200009a8 	.word	0x200009a8
 8001d5c:	49742400 	.word	0x49742400
 8001d60:	20000978 	.word	0x20000978
 8001d64:	2000097c 	.word	0x2000097c
 8001d68:	200009ac 	.word	0x200009ac
 8001d6c:	20000980 	.word	0x20000980
 8001d70:	20000984 	.word	0x20000984
 8001d74:	200009b0 	.word	0x200009b0
 8001d78:	20000988 	.word	0x20000988
 8001d7c:	200009b4 	.word	0x200009b4
 8001d80:	200009b8 	.word	0x200009b8
 8001d84:	200009bc 	.word	0x200009bc

08001d88 <bldc_interface_set_rpm>:
	send_buffer[send_index++] = COMM_SET_CURRENT_BRAKE;
	buffer_append_float32(send_buffer, current, 1000.0, &send_index);
	send_packet_no_fwd(send_buffer, send_index);
}

void bldc_interface_set_rpm(int rpm) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	if (motor_control_set_func) {
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <bldc_interface_set_rpm+0x58>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <bldc_interface_set_rpm+0x28>
		motor_control_set_func(MOTOR_CONTROL_RPM, rpm);
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <bldc_interface_set_rpm+0x58>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	ee07 2a90 	vmov	s15, r2
 8001da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da6:	eeb0 0a67 	vmov.f32	s0, s15
 8001daa:	2003      	movs	r0, #3
 8001dac:	4798      	blx	r3
 8001dae:	e013      	b.n	8001dd8 <bldc_interface_set_rpm+0x50>
		return;
	}
	int32_t send_index = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
	send_buffer[send_index++] = COMM_SET_RPM;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60fa      	str	r2, [r7, #12]
 8001dba:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <bldc_interface_set_rpm+0x5c>)
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	54d1      	strb	r1, [r2, r3]
	buffer_append_int32(send_buffer, rpm, &send_index);
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4806      	ldr	r0, [pc, #24]	@ (8001de4 <bldc_interface_set_rpm+0x5c>)
 8001dca:	f000 f879 	bl	8001ec0 <buffer_append_int32>
	send_packet_no_fwd(send_buffer, send_index);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4804      	ldr	r0, [pc, #16]	@ (8001de4 <bldc_interface_set_rpm+0x5c>)
 8001dd4:	f000 f808 	bl	8001de8 <send_packet_no_fwd>
}
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200009c0 	.word	0x200009c0
 8001de4:	200002c4 	.word	0x200002c4

08001de8 <send_packet_no_fwd>:
	default: return "Unknown fault";
	}
}

// Private functions
void send_packet_no_fwd(unsigned char *data, unsigned int len) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
	if (!forward_func) {
 8001df2:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <send_packet_no_fwd+0x24>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <send_packet_no_fwd+0x1a>
		bldc_interface_send_packet(data, len);
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7fe fd5f 	bl	80008c0 <bldc_interface_send_packet>
	}
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000990 	.word	0x20000990

08001e10 <bldc_interface_uart_init>:
 * sending packets.
 *
 * @param func
 * Function provided for sending packets.
 */
void bldc_interface_uart_init(void(*func)(unsigned char *data, unsigned int len)) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	// Initialize packet handler
	packet_init(func, process_packet, PACKET_HANDLER);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4905      	ldr	r1, [pc, #20]	@ (8001e30 <bldc_interface_uart_init+0x20>)
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f001 f851 	bl	8002ec4 <packet_init>

	// Initialize the bldc interface and provide a send function
	bldc_interface_init(send_packet_bldc_interface);
 8001e22:	4804      	ldr	r0, [pc, #16]	@ (8001e34 <bldc_interface_uart_init+0x24>)
 8001e24:	f7fe fd3c 	bl	80008a0 <bldc_interface_init>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	08001e39 	.word	0x08001e39
 8001e34:	08001e53 	.word	0x08001e53

08001e38 <process_packet>:
 * @param data
 * Data array pointer
 * @param len
 * Data array length
 */
static void process_packet(unsigned char *data, unsigned int len) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
	// Let bldc_interface process the packet.
	bldc_interface_process_packet(data, len);
 8001e42:	6839      	ldr	r1, [r7, #0]
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7fe fd4f 	bl	80008e8 <bldc_interface_process_packet>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <send_packet_bldc_interface>:
 * @param data
 * Data array pointer
 * @param len
 * Data array length
 */
static void send_packet_bldc_interface(unsigned char *data, unsigned int len) {
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
	// Pass the packet to the packet handler to add checksum, length, start and stop bytes.
	packet_send_packet(data, len, PACKET_HANDLER);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6839      	ldr	r1, [r7, #0]
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f001 f851 	bl	8002f08 <packet_send_packet>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <send_packet>:


void send_packet(unsigned char *data, unsigned int len)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	if (len > (PACKET_MAX_PL_LEN + 5)) {
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f240 2205 	movw	r2, #517	@ 0x205
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d812      	bhi.n	8001eaa <send_packet+0x3a>
		return;
	}

	// Copy the data to a new buffer to ensure it's not overwritten
	static uint8_t buffer[PACKET_MAX_PL_LEN + 5];
	memcpy(buffer, data, len);
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	480a      	ldr	r0, [pc, #40]	@ (8001eb4 <send_packet+0x44>)
 8001e8a:	f00c fd13 	bl	800e8b4 <memcpy>

	HAL_GPIO_WritePin(GPIOB, LD3_Pin,GPIO_PIN_SET);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e94:	4808      	ldr	r0, [pc, #32]	@ (8001eb8 <send_packet+0x48>)
 8001e96:	f003 fcfb 	bl	8005890 <HAL_GPIO_WritePin>
	// Send the data over UART
	HAL_UART_Transmit_DMA(&huart2, buffer, len);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4904      	ldr	r1, [pc, #16]	@ (8001eb4 <send_packet+0x44>)
 8001ea2:	4806      	ldr	r0, [pc, #24]	@ (8001ebc <send_packet+0x4c>)
 8001ea4:	f007 fa1c 	bl	80092e0 <HAL_UART_Transmit_DMA>
 8001ea8:	e000      	b.n	8001eac <send_packet+0x3c>
		return;
 8001eaa:	bf00      	nop

}
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200009c4 	.word	0x200009c4
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	20000e58 	.word	0x20000e58

08001ec0 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1618      	asrs	r0, r3, #24
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	1c59      	adds	r1, r3, #1
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6011      	str	r1, [r2, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2c2      	uxtb	r2, r0
 8001ee2:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1418      	asrs	r0, r3, #16
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1c59      	adds	r1, r3, #1
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6011      	str	r1, [r2, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2c2      	uxtb	r2, r0
 8001efa:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1218      	asrs	r0, r3, #8
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	1c59      	adds	r1, r3, #1
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6011      	str	r1, [r2, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b2c2      	uxtb	r2, r0
 8001f12:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1c59      	adds	r1, r3, #1
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6011      	str	r1, [r2, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	440b      	add	r3, r1
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1c9a      	adds	r2, r3, #2
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	601a      	str	r2, [r3, #0]
	return res;
 8001f6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	440b      	add	r3, r1
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1c9a      	adds	r2, r3, #2
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	601a      	str	r2, [r3, #0]
	return res;
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	440b      	add	r3, r1
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8001fe8:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3302      	adds	r3, #2
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	440b      	add	r3, r1
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8001ff8:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	3203      	adds	r2, #3
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	440a      	add	r2, r1
 8002004:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 8002006:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8002008:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	1d1a      	adds	r2, r3, #4
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	601a      	str	r2, [r3, #0]
	return res;
 8002014:	68fb      	ldr	r3, [r7, #12]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	440b      	add	r3, r1
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8002048:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3302      	adds	r3, #2
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	440b      	add	r3, r1
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8002058:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	3203      	adds	r2, #3
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	440a      	add	r2, r1
 8002064:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1d1a      	adds	r2, r3, #4
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	601a      	str	r2, [r3, #0]
	return res;
 8002074:	68fb      	ldr	r3, [r7, #12]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	ed87 0a02 	vstr	s0, [r7, #8]
 800208e:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f7ff ff4f 	bl	8001f36 <buffer_get_int16>
 8002098:	4603      	mov	r3, r0
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80020a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80020ae:	eeb0 0a67 	vmov.f32	s0, s15
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80020c4:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff ff7a 	bl	8001fc2 <buffer_get_int32>
 80020ce:	ee07 0a90 	vmov	s15, r0
 80020d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80020da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020de:	eef0 7a66 	vmov.f32	s15, s13
}
 80020e2:	eeb0 0a67 	vmov.f32	s0, s15
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	0000      	movs	r0, r0
	...

080020f0 <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 80020fa:	6839      	ldr	r1, [r7, #0]
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff90 	bl	8002022 <buffer_get_uint32>
 8002102:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	0ddb      	lsrs	r3, r3, #23
 8002108:	b2db      	uxtb	r3, r3
 800210a:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002112:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	bf14      	ite	ne
 800211e:	2301      	movne	r3, #1
 8002120:	2300      	moveq	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <buffer_get_float32_auto+0x46>
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d015      	beq.n	8002162 <buffer_get_float32_auto+0x72>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002140:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002144:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8002190 <buffer_get_float32_auto+0xa0>
 8002148:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800214c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8002150:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002154:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002158:	edc7 7a06 	vstr	s15, [r7, #24]
		e -= 126;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	3b7e      	subs	r3, #126	@ 0x7e
 8002160:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <buffer_get_float32_auto+0x84>
		sig = -sig;
 8002168:	edd7 7a06 	vldr	s15, [r7, #24]
 800216c:	eef1 7a67 	vneg.f32	s15, s15
 8002170:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 8002174:	69f8      	ldr	r0, [r7, #28]
 8002176:	ed97 0a06 	vldr	s0, [r7, #24]
 800217a:	f00c fba9 	bl	800e8d0 <ldexpf>
 800217e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002182:	eeb0 0a67 	vmov.f32	s0, s15
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	f3af 8000 	nop.w
 8002190:	00000000 	.word	0x00000000
 8002194:	41700000 	.word	0x41700000

08002198 <Motor_Input>:
float sine_amplitude = 1000.0f;
float set_rpm;


float Motor_Input(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
	/*EXAMPLE Sine Wave */
	float time = Get_MilliSecond()/1000.0f; // Time in seconds
 800219e:	f000 f9b3 	bl	8002508 <Get_MilliSecond>
 80021a2:	ee07 0a90 	vmov	s15, r0
 80021a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021aa:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002280 <Motor_Input+0xe8>
 80021ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b2:	edc7 7a01 	vstr	s15, [r7, #4]
	sine1 = sinf(2*M_PI*f_sine*time);
 80021b6:	4b33      	ldr	r3, [pc, #204]	@ (8002284 <Motor_Input+0xec>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021c0:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8002278 <Motor_Input+0xe0>
 80021c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021d8:	eeb0 0a67 	vmov.f32	s0, s15
 80021dc:	f00c fc80 	bl	800eae0 <sinf>
 80021e0:	eef0 7a40 	vmov.f32	s15, s0
 80021e4:	4b28      	ldr	r3, [pc, #160]	@ (8002288 <Motor_Input+0xf0>)
 80021e6:	edc3 7a00 	vstr	s15, [r3]
	sine2 = sinf(2*M_PI*f_sine*time);
 80021ea:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <Motor_Input+0xec>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021f4:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8002278 <Motor_Input+0xe0>
 80021f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002200:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002204:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002208:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800220c:	eeb0 0a67 	vmov.f32	s0, s15
 8002210:	f00c fc66 	bl	800eae0 <sinf>
 8002214:	eef0 7a40 	vmov.f32	s15, s0
 8002218:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <Motor_Input+0xf4>)
 800221a:	edc3 7a00 	vstr	s15, [r3]
	set_rpm = sine_bias+ sine_amplitude*sine1 + sine_amplitude/2*sine2;
 800221e:	4b1c      	ldr	r3, [pc, #112]	@ (8002290 <Motor_Input+0xf8>)
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <Motor_Input+0xf0>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222e:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <Motor_Input+0xfc>)
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <Motor_Input+0xf8>)
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8002242:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002246:	4b11      	ldr	r3, [pc, #68]	@ (800228c <Motor_Input+0xf4>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <Motor_Input+0x100>)
 8002256:	edc3 7a00 	vstr	s15, [r3]

	set_rpm = 1500.0f;
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <Motor_Input+0x100>)
 800225c:	4a0f      	ldr	r2, [pc, #60]	@ (800229c <Motor_Input+0x104>)
 800225e:	601a      	str	r2, [r3, #0]

	return set_rpm;
 8002260:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <Motor_Input+0x100>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	ee07 3a90 	vmov	s15, r3
}
 8002268:	eeb0 0a67 	vmov.f32	s0, s15
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	f3af 8000 	nop.w
 8002278:	54442d18 	.word	0x54442d18
 800227c:	401921fb 	.word	0x401921fb
 8002280:	447a0000 	.word	0x447a0000
 8002284:	20000000 	.word	0x20000000
 8002288:	20000bcc 	.word	0x20000bcc
 800228c:	20000bd0 	.word	0x20000bd0
 8002290:	20000008 	.word	0x20000008
 8002294:	20000004 	.word	0x20000004
 8002298:	20000bd4 	.word	0x20000bd4
 800229c:	44bb8000 	.word	0x44bb8000

080022a0 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e016      	b.n	80022e2 <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 80022b4:	897b      	ldrh	r3, [r7, #10]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	404b      	eors	r3, r1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4a0b      	ldr	r2, [pc, #44]	@ (80022f8 <crc16+0x58>)
 80022ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022ce:	b21a      	sxth	r2, r3
 80022d0:	897b      	ldrh	r3, [r7, #10]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4053      	eors	r3, r2
 80022d8:	b21b      	sxth	r3, r3
 80022da:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3301      	adds	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3e4      	bcc.n	80022b4 <crc16+0x14>
	}
	return cksum;
 80022ea:	897b      	ldrh	r3, [r7, #10]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	0800ecb0 	.word	0x0800ecb0

080022fc <DataAcq_Init>:
extern volatile uint32_t last_chunk_sent;
/**
 * @brief Initialize the data acquisition module
 */
HAL_StatusTypeDef DataAcq_Init(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
    // Initialize counters and flags
    usb_buffer_cnt = 0;
 8002300:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <DataAcq_Init+0x28>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    active_buffer = 0;
 8002306:	4b08      	ldr	r3, [pc, #32]	@ (8002328 <DataAcq_Init+0x2c>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
    buffer_ready_flag = BUFFER_STATE_BUSY;
 800230c:	4b07      	ldr	r3, [pc, #28]	@ (800232c <DataAcq_Init+0x30>)
 800230e:	2203      	movs	r2, #3
 8002310:	701a      	strb	r2, [r3, #0]
    time_ms = 0;
 8002312:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <DataAcq_Init+0x34>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	20000bd8 	.word	0x20000bd8
 8002328:	20000bdc 	.word	0x20000bdc
 800232c:	20000bdd 	.word	0x20000bdd
 8002330:	20000be0 	.word	0x20000be0

08002334 <DataAcq_ScaleFloatValue>:

/**
 * @brief Scale float value to uint32_t with defined scaling factor
 */
static uint32_t DataAcq_ScaleFloatValue(float value)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	ed87 0a01 	vstr	s0, [r7, #4]
    return (uint32_t)(value * SCALING_FACTOR);
 800233e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002342:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002360 <DataAcq_ScaleFloatValue+0x2c>
 8002346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800234a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800234e:	ee17 3a90 	vmov	r3, s15
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	447a0000 	.word	0x447a0000

08002364 <DataAcq_SwitchBuffers>:

/**
 * @brief Switch between double buffers
 */
static void DataAcq_SwitchBuffers(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0

	if (last_chunk_sent < USB_BUFFER_SIZE) {
 8002368:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <DataAcq_SwitchBuffers+0x48>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002370:	d20b      	bcs.n	800238a <DataAcq_SwitchBuffers+0x26>
		process_and_transmit_chunk(active_buffer, last_chunk_sent, USB_BUFFER_SIZE - last_chunk_sent);
 8002372:	4b0f      	ldr	r3, [pc, #60]	@ (80023b0 <DataAcq_SwitchBuffers+0x4c>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b2d8      	uxtb	r0, r3
 8002378:	4b0c      	ldr	r3, [pc, #48]	@ (80023ac <DataAcq_SwitchBuffers+0x48>)
 800237a:	6819      	ldr	r1, [r3, #0]
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <DataAcq_SwitchBuffers+0x48>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f5c3 53fa 	rsb	r3, r3, #8000	@ 0x1f40
 8002384:	461a      	mov	r2, r3
 8002386:	f001 fb19 	bl	80039bc <process_and_transmit_chunk>
	}

    active_buffer = 1 - active_buffer;  // Toggle between 0 and 1
 800238a:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <DataAcq_SwitchBuffers+0x4c>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f1c3 0301 	rsb	r3, r3, #1
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <DataAcq_SwitchBuffers+0x4c>)
 8002398:	701a      	strb	r2, [r3, #0]
    usb_buffer_cnt = 0;
 800239a:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <DataAcq_SwitchBuffers+0x50>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
    last_chunk_sent = 0;  // Reset the chunk tracker
 80023a0:	4b02      	ldr	r3, [pc, #8]	@ (80023ac <DataAcq_SwitchBuffers+0x48>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
    // Update buffer ready flag
    //buffer_ready_flag = active_buffer ? BUFFER_STATE_READY_0 : BUFFER_STATE_READY_1;
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	2006ea84 	.word	0x2006ea84
 80023b0:	20000bdc 	.word	0x20000bdc
 80023b4:	20000bd8 	.word	0x20000bd8

080023b8 <DataAcq_ProcessSamples>:

/**
 * @brief Process new data samples in timer interrupt
 */
void DataAcq_ProcessSamples(TIM_HandleTypeDef* htim)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM3) {
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a49      	ldr	r2, [pc, #292]	@ (80024ec <DataAcq_ProcessSamples+0x134>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	f040 808b 	bne.w	80024e2 <DataAcq_ProcessSamples+0x12a>
        return;
    }

    // Toggle LED to indicate sampling
    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80023cc:	2101      	movs	r1, #1
 80023ce:	4848      	ldr	r0, [pc, #288]	@ (80024f0 <DataAcq_ProcessSamples+0x138>)
 80023d0:	f003 fa77 	bl	80058c2 <HAL_GPIO_TogglePin>


    // Get motor data
    float set_rpm = Motor_Input();
 80023d4:	f7ff fee0 	bl	8002198 <Motor_Input>
 80023d8:	ed87 0a05 	vstr	s0, [r7, #20]
    bldc_interface_set_rpm(Motor_Input());
 80023dc:	f7ff fedc 	bl	8002198 <Motor_Input>
 80023e0:	eef0 7a40 	vmov.f32	s15, s0
 80023e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e8:	ee17 0a90 	vmov	r0, s15
 80023ec:	f7ff fccc 	bl	8001d88 <bldc_interface_set_rpm>
    float current_speed = MotorSpeed_GetRPM();
 80023f0:	f000 fcde 	bl	8002db0 <MotorSpeed_GetRPM>
 80023f4:	ed87 0a04 	vstr	s0, [r7, #16]

    // Scale float values to integers
    uint32_t scaled_set_rpm = DataAcq_ScaleFloatValue(set_rpm);
 80023f8:	ed97 0a05 	vldr	s0, [r7, #20]
 80023fc:	f7ff ff9a 	bl	8002334 <DataAcq_ScaleFloatValue>
 8002400:	60f8      	str	r0, [r7, #12]
    uint32_t scaled_current_speed = DataAcq_ScaleFloatValue(current_speed);
 8002402:	ed97 0a04 	vldr	s0, [r7, #16]
 8002406:	f7ff ff95 	bl	8002334 <DataAcq_ScaleFloatValue>
 800240a:	60b8      	str	r0, [r7, #8]

    // Update time counter
    time_ms++;
 800240c:	4b39      	ldr	r3, [pc, #228]	@ (80024f4 <DataAcq_ProcessSamples+0x13c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a38      	ldr	r2, [pc, #224]	@ (80024f4 <DataAcq_ProcessSamples+0x13c>)
 8002414:	6013      	str	r3, [r2, #0]

    // Store data in active buffer
    usb_buffer[active_buffer][0][usb_buffer_cnt] = time_ms;
 8002416:	4b38      	ldr	r3, [pc, #224]	@ (80024f8 <DataAcq_ProcessSamples+0x140>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	461c      	mov	r4, r3
 800241e:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <DataAcq_ProcessSamples+0x144>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a34      	ldr	r2, [pc, #208]	@ (80024f4 <DataAcq_ProcessSamples+0x13c>)
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	4836      	ldr	r0, [pc, #216]	@ (8002500 <DataAcq_ProcessSamples+0x148>)
 8002428:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 800242c:	fb04 f101 	mul.w	r1, r4, r1
 8002430:	440b      	add	r3, r1
 8002432:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    usb_buffer[active_buffer][1][usb_buffer_cnt] = adc_buffer[0];  // Panasonic
 8002436:	4b30      	ldr	r3, [pc, #192]	@ (80024f8 <DataAcq_ProcessSamples+0x140>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461c      	mov	r4, r3
 800243e:	4b2f      	ldr	r3, [pc, #188]	@ (80024fc <DataAcq_ProcessSamples+0x144>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a30      	ldr	r2, [pc, #192]	@ (8002504 <DataAcq_ProcessSamples+0x14c>)
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	482e      	ldr	r0, [pc, #184]	@ (8002500 <DataAcq_ProcessSamples+0x148>)
 8002448:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 800244c:	fb04 f101 	mul.w	r1, r4, r1
 8002450:	440b      	add	r3, r1
 8002452:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 8002456:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    usb_buffer[active_buffer][2][usb_buffer_cnt] = adc_buffer[1];  // Load Cell 1
 800245a:	4b27      	ldr	r3, [pc, #156]	@ (80024f8 <DataAcq_ProcessSamples+0x140>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461c      	mov	r4, r3
 8002462:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <DataAcq_ProcessSamples+0x144>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a27      	ldr	r2, [pc, #156]	@ (8002504 <DataAcq_ProcessSamples+0x14c>)
 8002468:	6852      	ldr	r2, [r2, #4]
 800246a:	4825      	ldr	r0, [pc, #148]	@ (8002500 <DataAcq_ProcessSamples+0x148>)
 800246c:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 8002470:	fb04 f101 	mul.w	r1, r4, r1
 8002474:	440b      	add	r3, r1
 8002476:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 800247a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    usb_buffer[active_buffer][3][usb_buffer_cnt] = scaled_set_rpm; // Motor setpoint
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <DataAcq_ProcessSamples+0x140>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	4618      	mov	r0, r3
 8002486:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <DataAcq_ProcessSamples+0x144>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	491d      	ldr	r1, [pc, #116]	@ (8002500 <DataAcq_ProcessSamples+0x148>)
 800248c:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8002490:	fb00 f202 	mul.w	r2, r0, r2
 8002494:	441a      	add	r2, r3
 8002496:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 800249a:	4413      	add	r3, r2
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    usb_buffer[active_buffer][4][usb_buffer_cnt] = scaled_current_speed; // Current speed
 80024a2:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <DataAcq_ProcessSamples+0x140>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4618      	mov	r0, r3
 80024aa:	4b14      	ldr	r3, [pc, #80]	@ (80024fc <DataAcq_ProcessSamples+0x144>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4914      	ldr	r1, [pc, #80]	@ (8002500 <DataAcq_ProcessSamples+0x148>)
 80024b0:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 80024b4:	fb00 f202 	mul.w	r2, r0, r2
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Increment buffer counter
    usb_buffer_cnt++;
 80024c4:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <DataAcq_ProcessSamples+0x144>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	4a0c      	ldr	r2, [pc, #48]	@ (80024fc <DataAcq_ProcessSamples+0x144>)
 80024cc:	6013      	str	r3, [r2, #0]

    // Check if it's time to send a data chunk
    check_and_send_chunks();
 80024ce:	f001 fa3d 	bl	800394c <check_and_send_chunks>

    // Check if buffer is full
    if (usb_buffer_cnt >= USB_BUFFER_SIZE) {
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <DataAcq_ProcessSamples+0x144>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80024da:	d303      	bcc.n	80024e4 <DataAcq_ProcessSamples+0x12c>
        DataAcq_SwitchBuffers();
 80024dc:	f7ff ff42 	bl	8002364 <DataAcq_SwitchBuffers>
 80024e0:	e000      	b.n	80024e4 <DataAcq_ProcessSamples+0x12c>
        return;
 80024e2:	bf00      	nop
    }
}
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd90      	pop	{r4, r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40020400 	.word	0x40020400
 80024f4:	20000be0 	.word	0x20000be0
 80024f8:	20000bdc 	.word	0x20000bdc
 80024fc:	20000bd8 	.word	0x20000bd8
 8002500:	2000147c 	.word	0x2000147c
 8002504:	20001028 	.word	0x20001028

08002508 <Get_MilliSecond>:
{
    return buffer_ready_flag;
}

uint32_t Get_MilliSecond(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
    return time_ms;
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <Get_MilliSecond+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000be0 	.word	0x20000be0

08002520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002524:	f001 faf9 	bl	8003b1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002528:	f000 f81e 	bl	8002568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800252c:	f000 fb22 	bl	8002b74 <MX_GPIO_Init>
  MX_DMA_Init();
 8002530:	f000 fae6 	bl	8002b00 <MX_DMA_Init>
  MX_ETH_Init();
 8002534:	f000 f912 	bl	800275c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002538:	f000 fab2 	bl	8002aa0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800253c:	f000 f884 	bl	8002648 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002540:	f000 f95a 	bl	80027f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002544:	f000 f9a6 	bl	8002894 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8002548:	f00b fb18 	bl	800db7c <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800254c:	f000 f9f0 	bl	8002930 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002550:	f000 fa76 	bl	8002a40 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  /* Initialize Application Modules */
  if (ApplicationInit_Sequence() != HAL_OK) {
 8002554:	f000 fbb0 	bl	8002cb8 <ApplicationInit_Sequence>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <main+0x42>
      Error_Handler();
 800255e:	f000 fbf5 	bl	8002d4c <Error_Handler>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	Application();
 8002562:	f000 fbed 	bl	8002d40 <Application>
 8002566:	e7fc      	b.n	8002562 <main+0x42>

08002568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b094      	sub	sp, #80	@ 0x50
 800256c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256e:	f107 031c 	add.w	r3, r7, #28
 8002572:	2234      	movs	r2, #52	@ 0x34
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f00c f958 	bl	800e82c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800258c:	f004 fc3c 	bl	8006e08 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002590:	4b2b      	ldr	r3, [pc, #172]	@ (8002640 <SystemClock_Config+0xd8>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	4a2a      	ldr	r2, [pc, #168]	@ (8002640 <SystemClock_Config+0xd8>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259a:	6413      	str	r3, [r2, #64]	@ 0x40
 800259c:	4b28      	ldr	r3, [pc, #160]	@ (8002640 <SystemClock_Config+0xd8>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a8:	4b26      	ldr	r3, [pc, #152]	@ (8002644 <SystemClock_Config+0xdc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a25      	ldr	r2, [pc, #148]	@ (8002644 <SystemClock_Config+0xdc>)
 80025ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b23      	ldr	r3, [pc, #140]	@ (8002644 <SystemClock_Config+0xdc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025c0:	2301      	movs	r3, #1
 80025c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80025c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ca:	2302      	movs	r3, #2
 80025cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025d4:	2304      	movs	r3, #4
 80025d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80025d8:	23d8      	movs	r3, #216	@ 0xd8
 80025da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025dc:	2302      	movs	r3, #2
 80025de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80025e0:	2309      	movs	r3, #9
 80025e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025e4:	2302      	movs	r3, #2
 80025e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4618      	mov	r0, r3
 80025ee:	f004 fc6b 	bl	8006ec8 <HAL_RCC_OscConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025f8:	f000 fba8 	bl	8002d4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80025fc:	f004 fc14 	bl	8006e28 <HAL_PWREx_EnableOverDrive>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002606:	f000 fba1 	bl	8002d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800260a:	230f      	movs	r3, #15
 800260c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800260e:	2302      	movs	r3, #2
 8002610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002616:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800261a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800261c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002620:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002622:	f107 0308 	add.w	r3, r7, #8
 8002626:	2107      	movs	r1, #7
 8002628:	4618      	mov	r0, r3
 800262a:	f004 fefb 	bl	8007424 <HAL_RCC_ClockConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002634:	f000 fb8a 	bl	8002d4c <Error_Handler>
  }
}
 8002638:	bf00      	nop
 800263a:	3750      	adds	r7, #80	@ 0x50
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	40007000 	.word	0x40007000

08002648 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800264e:	463b      	mov	r3, r7
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800265a:	4b3e      	ldr	r3, [pc, #248]	@ (8002754 <MX_ADC1_Init+0x10c>)
 800265c:	4a3e      	ldr	r2, [pc, #248]	@ (8002758 <MX_ADC1_Init+0x110>)
 800265e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002660:	4b3c      	ldr	r3, [pc, #240]	@ (8002754 <MX_ADC1_Init+0x10c>)
 8002662:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002666:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002668:	4b3a      	ldr	r3, [pc, #232]	@ (8002754 <MX_ADC1_Init+0x10c>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800266e:	4b39      	ldr	r3, [pc, #228]	@ (8002754 <MX_ADC1_Init+0x10c>)
 8002670:	2201      	movs	r2, #1
 8002672:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002674:	4b37      	ldr	r3, [pc, #220]	@ (8002754 <MX_ADC1_Init+0x10c>)
 8002676:	2201      	movs	r2, #1
 8002678:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800267a:	4b36      	ldr	r3, [pc, #216]	@ (8002754 <MX_ADC1_Init+0x10c>)
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002682:	4b34      	ldr	r3, [pc, #208]	@ (8002754 <MX_ADC1_Init+0x10c>)
 8002684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002688:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800268a:	4b32      	ldr	r3, [pc, #200]	@ (8002754 <MX_ADC1_Init+0x10c>)
 800268c:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 8002690:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002692:	4b30      	ldr	r3, [pc, #192]	@ (8002754 <MX_ADC1_Init+0x10c>)
 8002694:	2200      	movs	r2, #0
 8002696:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8002698:	4b2e      	ldr	r3, [pc, #184]	@ (8002754 <MX_ADC1_Init+0x10c>)
 800269a:	2205      	movs	r2, #5
 800269c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800269e:	4b2d      	ldr	r3, [pc, #180]	@ (8002754 <MX_ADC1_Init+0x10c>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80026a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002754 <MX_ADC1_Init+0x10c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026ac:	4829      	ldr	r0, [pc, #164]	@ (8002754 <MX_ADC1_Init+0x10c>)
 80026ae:	f001 fab5 	bl	8003c1c <HAL_ADC_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80026b8:	f000 fb48 	bl	8002d4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80026bc:	2300      	movs	r3, #0
 80026be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026c0:	2301      	movs	r3, #1
 80026c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80026c4:	2304      	movs	r3, #4
 80026c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026c8:	463b      	mov	r3, r7
 80026ca:	4619      	mov	r1, r3
 80026cc:	4821      	ldr	r0, [pc, #132]	@ (8002754 <MX_ADC1_Init+0x10c>)
 80026ce:	f001 fbf7 	bl	8003ec0 <HAL_ADC_ConfigChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80026d8:	f000 fb38 	bl	8002d4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026dc:	2303      	movs	r3, #3
 80026de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80026e0:	2302      	movs	r3, #2
 80026e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e4:	463b      	mov	r3, r7
 80026e6:	4619      	mov	r1, r3
 80026e8:	481a      	ldr	r0, [pc, #104]	@ (8002754 <MX_ADC1_Init+0x10c>)
 80026ea:	f001 fbe9 	bl	8003ec0 <HAL_ADC_ConfigChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80026f4:	f000 fb2a 	bl	8002d4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80026f8:	2304      	movs	r3, #4
 80026fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80026fc:	2303      	movs	r3, #3
 80026fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002700:	463b      	mov	r3, r7
 8002702:	4619      	mov	r1, r3
 8002704:	4813      	ldr	r0, [pc, #76]	@ (8002754 <MX_ADC1_Init+0x10c>)
 8002706:	f001 fbdb 	bl	8003ec0 <HAL_ADC_ConfigChannel>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002710:	f000 fb1c 	bl	8002d4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002714:	2305      	movs	r3, #5
 8002716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002718:	2304      	movs	r3, #4
 800271a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800271c:	463b      	mov	r3, r7
 800271e:	4619      	mov	r1, r3
 8002720:	480c      	ldr	r0, [pc, #48]	@ (8002754 <MX_ADC1_Init+0x10c>)
 8002722:	f001 fbcd 	bl	8003ec0 <HAL_ADC_ConfigChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800272c:	f000 fb0e 	bl	8002d4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002730:	2306      	movs	r3, #6
 8002732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002734:	2305      	movs	r3, #5
 8002736:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002738:	463b      	mov	r3, r7
 800273a:	4619      	mov	r1, r3
 800273c:	4805      	ldr	r0, [pc, #20]	@ (8002754 <MX_ADC1_Init+0x10c>)
 800273e:	f001 fbbf 	bl	8003ec0 <HAL_ADC_ConfigChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8002748:	f000 fb00 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000c1c 	.word	0x20000c1c
 8002758:	40012000 	.word	0x40012000

0800275c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002760:	4b1f      	ldr	r3, [pc, #124]	@ (80027e0 <MX_ETH_Init+0x84>)
 8002762:	4a20      	ldr	r2, [pc, #128]	@ (80027e4 <MX_ETH_Init+0x88>)
 8002764:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002766:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <MX_ETH_Init+0x8c>)
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800276c:	4b1e      	ldr	r3, [pc, #120]	@ (80027e8 <MX_ETH_Init+0x8c>)
 800276e:	2280      	movs	r2, #128	@ 0x80
 8002770:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002772:	4b1d      	ldr	r3, [pc, #116]	@ (80027e8 <MX_ETH_Init+0x8c>)
 8002774:	22e1      	movs	r2, #225	@ 0xe1
 8002776:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002778:	4b1b      	ldr	r3, [pc, #108]	@ (80027e8 <MX_ETH_Init+0x8c>)
 800277a:	2200      	movs	r2, #0
 800277c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800277e:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <MX_ETH_Init+0x8c>)
 8002780:	2200      	movs	r2, #0
 8002782:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002784:	4b18      	ldr	r3, [pc, #96]	@ (80027e8 <MX_ETH_Init+0x8c>)
 8002786:	2200      	movs	r2, #0
 8002788:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <MX_ETH_Init+0x84>)
 800278c:	4a16      	ldr	r2, [pc, #88]	@ (80027e8 <MX_ETH_Init+0x8c>)
 800278e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002790:	4b13      	ldr	r3, [pc, #76]	@ (80027e0 <MX_ETH_Init+0x84>)
 8002792:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002796:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002798:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <MX_ETH_Init+0x84>)
 800279a:	4a14      	ldr	r2, [pc, #80]	@ (80027ec <MX_ETH_Init+0x90>)
 800279c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800279e:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <MX_ETH_Init+0x84>)
 80027a0:	4a13      	ldr	r2, [pc, #76]	@ (80027f0 <MX_ETH_Init+0x94>)
 80027a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80027a4:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <MX_ETH_Init+0x84>)
 80027a6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80027aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80027ac:	480c      	ldr	r0, [pc, #48]	@ (80027e0 <MX_ETH_Init+0x84>)
 80027ae:	f002 fb75 	bl	8004e9c <HAL_ETH_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80027b8:	f000 fac8 	bl	8002d4c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80027bc:	2238      	movs	r2, #56	@ 0x38
 80027be:	2100      	movs	r1, #0
 80027c0:	480c      	ldr	r0, [pc, #48]	@ (80027f4 <MX_ETH_Init+0x98>)
 80027c2:	f00c f833 	bl	800e82c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80027c6:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <MX_ETH_Init+0x98>)
 80027c8:	2221      	movs	r2, #33	@ 0x21
 80027ca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80027cc:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <MX_ETH_Init+0x98>)
 80027ce:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80027d2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80027d4:	4b07      	ldr	r3, [pc, #28]	@ (80027f4 <MX_ETH_Init+0x98>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000cc4 	.word	0x20000cc4
 80027e4:	40028000 	.word	0x40028000
 80027e8:	2000103c 	.word	0x2000103c
 80027ec:	20000208 	.word	0x20000208
 80027f0:	20000168 	.word	0x20000168
 80027f4:	20000be4 	.word	0x20000be4

080027f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027fe:	f107 0310 	add.w	r3, r7, #16
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002816:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <MX_TIM2_Init+0x98>)
 8002818:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800281c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800281e:	4b1c      	ldr	r3, [pc, #112]	@ (8002890 <MX_TIM2_Init+0x98>)
 8002820:	2247      	movs	r2, #71	@ 0x47
 8002822:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002824:	4b1a      	ldr	r3, [pc, #104]	@ (8002890 <MX_TIM2_Init+0x98>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 800282a:	4b19      	ldr	r3, [pc, #100]	@ (8002890 <MX_TIM2_Init+0x98>)
 800282c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002830:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002832:	4b17      	ldr	r3, [pc, #92]	@ (8002890 <MX_TIM2_Init+0x98>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002838:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <MX_TIM2_Init+0x98>)
 800283a:	2280      	movs	r2, #128	@ 0x80
 800283c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800283e:	4814      	ldr	r0, [pc, #80]	@ (8002890 <MX_TIM2_Init+0x98>)
 8002840:	f005 fc3e 	bl	80080c0 <HAL_TIM_Base_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800284a:	f000 fa7f 	bl	8002d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800284e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002852:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002854:	f107 0310 	add.w	r3, r7, #16
 8002858:	4619      	mov	r1, r3
 800285a:	480d      	ldr	r0, [pc, #52]	@ (8002890 <MX_TIM2_Init+0x98>)
 800285c:	f006 f884 	bl	8008968 <HAL_TIM_ConfigClockSource>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002866:	f000 fa71 	bl	8002d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800286a:	2320      	movs	r3, #32
 800286c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	4619      	mov	r1, r3
 8002876:	4806      	ldr	r0, [pc, #24]	@ (8002890 <MX_TIM2_Init+0x98>)
 8002878:	f006 fc38 	bl	80090ec <HAL_TIMEx_MasterConfigSynchronization>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002882:	f000 fa63 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000d74 	.word	0x20000d74

08002894 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800289a:	f107 0310 	add.w	r3, r7, #16
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <MX_TIM3_Init+0x94>)
 80028b4:	4a1d      	ldr	r2, [pc, #116]	@ (800292c <MX_TIM3_Init+0x98>)
 80028b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <MX_TIM3_Init+0x94>)
 80028ba:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 80028be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c0:	4b19      	ldr	r3, [pc, #100]	@ (8002928 <MX_TIM3_Init+0x94>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80028c6:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <MX_TIM3_Init+0x94>)
 80028c8:	2209      	movs	r2, #9
 80028ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028cc:	4b16      	ldr	r3, [pc, #88]	@ (8002928 <MX_TIM3_Init+0x94>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <MX_TIM3_Init+0x94>)
 80028d4:	2280      	movs	r2, #128	@ 0x80
 80028d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028d8:	4813      	ldr	r0, [pc, #76]	@ (8002928 <MX_TIM3_Init+0x94>)
 80028da:	f005 fbf1 	bl	80080c0 <HAL_TIM_Base_Init>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80028e4:	f000 fa32 	bl	8002d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028ee:	f107 0310 	add.w	r3, r7, #16
 80028f2:	4619      	mov	r1, r3
 80028f4:	480c      	ldr	r0, [pc, #48]	@ (8002928 <MX_TIM3_Init+0x94>)
 80028f6:	f006 f837 	bl	8008968 <HAL_TIM_ConfigClockSource>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002900:	f000 fa24 	bl	8002d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002904:	2300      	movs	r3, #0
 8002906:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800290c:	1d3b      	adds	r3, r7, #4
 800290e:	4619      	mov	r1, r3
 8002910:	4805      	ldr	r0, [pc, #20]	@ (8002928 <MX_TIM3_Init+0x94>)
 8002912:	f006 fbeb 	bl	80090ec <HAL_TIMEx_MasterConfigSynchronization>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800291c:	f000 fa16 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002920:	bf00      	nop
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000dc0 	.word	0x20000dc0
 800292c:	40000400 	.word	0x40000400

08002930 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08c      	sub	sp, #48	@ 0x30
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002936:	f107 0320 	add.w	r3, r7, #32
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800295c:	4b36      	ldr	r3, [pc, #216]	@ (8002a38 <MX_TIM4_Init+0x108>)
 800295e:	4a37      	ldr	r2, [pc, #220]	@ (8002a3c <MX_TIM4_Init+0x10c>)
 8002960:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 8002962:	4b35      	ldr	r3, [pc, #212]	@ (8002a38 <MX_TIM4_Init+0x108>)
 8002964:	226b      	movs	r2, #107	@ 0x6b
 8002966:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002968:	4b33      	ldr	r3, [pc, #204]	@ (8002a38 <MX_TIM4_Init+0x108>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800296e:	4b32      	ldr	r3, [pc, #200]	@ (8002a38 <MX_TIM4_Init+0x108>)
 8002970:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002974:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002976:	4b30      	ldr	r3, [pc, #192]	@ (8002a38 <MX_TIM4_Init+0x108>)
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a38 <MX_TIM4_Init+0x108>)
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002982:	482d      	ldr	r0, [pc, #180]	@ (8002a38 <MX_TIM4_Init+0x108>)
 8002984:	f005 fb9c 	bl	80080c0 <HAL_TIM_Base_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800298e:	f000 f9dd 	bl	8002d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002996:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002998:	f107 0320 	add.w	r3, r7, #32
 800299c:	4619      	mov	r1, r3
 800299e:	4826      	ldr	r0, [pc, #152]	@ (8002a38 <MX_TIM4_Init+0x108>)
 80029a0:	f005 ffe2 	bl	8008968 <HAL_TIM_ConfigClockSource>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80029aa:	f000 f9cf 	bl	8002d4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80029ae:	4822      	ldr	r0, [pc, #136]	@ (8002a38 <MX_TIM4_Init+0x108>)
 80029b0:	f005 fc85 	bl	80082be <HAL_TIM_IC_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80029ba:	f000 f9c7 	bl	8002d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029c6:	f107 0314 	add.w	r3, r7, #20
 80029ca:	4619      	mov	r1, r3
 80029cc:	481a      	ldr	r0, [pc, #104]	@ (8002a38 <MX_TIM4_Init+0x108>)
 80029ce:	f006 fb8d 	bl	80090ec <HAL_TIMEx_MasterConfigSynchronization>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80029d8:	f000 f9b8 	bl	8002d4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80029e0:	2301      	movs	r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80029e8:	230f      	movs	r3, #15
 80029ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	2200      	movs	r2, #0
 80029f0:	4619      	mov	r1, r3
 80029f2:	4811      	ldr	r0, [pc, #68]	@ (8002a38 <MX_TIM4_Init+0x108>)
 80029f4:	f005 ff1b 	bl	800882e <HAL_TIM_IC_ConfigChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80029fe:	f000 f9a5 	bl	8002d4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	2204      	movs	r2, #4
 8002a06:	4619      	mov	r1, r3
 8002a08:	480b      	ldr	r0, [pc, #44]	@ (8002a38 <MX_TIM4_Init+0x108>)
 8002a0a:	f005 ff10 	bl	800882e <HAL_TIM_IC_ConfigChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8002a14:	f000 f99a 	bl	8002d4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4806      	ldr	r0, [pc, #24]	@ (8002a38 <MX_TIM4_Init+0x108>)
 8002a20:	f005 ff05 	bl	800882e <HAL_TIM_IC_ConfigChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8002a2a:	f000 f98f 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a2e:	bf00      	nop
 8002a30:	3730      	adds	r7, #48	@ 0x30
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000e0c 	.word	0x20000e0c
 8002a3c:	40000800 	.word	0x40000800

08002a40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a44:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <MX_USART2_UART_Init+0x58>)
 8002a46:	4a15      	ldr	r2, [pc, #84]	@ (8002a9c <MX_USART2_UART_Init+0x5c>)
 8002a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a4a:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <MX_USART2_UART_Init+0x58>)
 8002a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a52:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <MX_USART2_UART_Init+0x58>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a58:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <MX_USART2_UART_Init+0x58>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <MX_USART2_UART_Init+0x58>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a64:	4b0c      	ldr	r3, [pc, #48]	@ (8002a98 <MX_USART2_UART_Init+0x58>)
 8002a66:	220c      	movs	r2, #12
 8002a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <MX_USART2_UART_Init+0x58>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a70:	4b09      	ldr	r3, [pc, #36]	@ (8002a98 <MX_USART2_UART_Init+0x58>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <MX_USART2_UART_Init+0x58>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <MX_USART2_UART_Init+0x58>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a82:	4805      	ldr	r0, [pc, #20]	@ (8002a98 <MX_USART2_UART_Init+0x58>)
 8002a84:	f006 fbde 	bl	8009244 <HAL_UART_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a8e:	f000 f95d 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000e58 	.word	0x20000e58
 8002a9c:	40004400 	.word	0x40004400

08002aa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002aa4:	4b14      	ldr	r3, [pc, #80]	@ (8002af8 <MX_USART3_UART_Init+0x58>)
 8002aa6:	4a15      	ldr	r2, [pc, #84]	@ (8002afc <MX_USART3_UART_Init+0x5c>)
 8002aa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002aaa:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <MX_USART3_UART_Init+0x58>)
 8002aac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ab0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ab2:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <MX_USART3_UART_Init+0x58>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002abe:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ac6:	220c      	movs	r2, #12
 8002ac8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aca:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <MX_USART3_UART_Init+0x58>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad0:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002adc:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ae2:	4805      	ldr	r0, [pc, #20]	@ (8002af8 <MX_USART3_UART_Init+0x58>)
 8002ae4:	f006 fbae 	bl	8009244 <HAL_UART_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002aee:	f000 f92d 	bl	8002d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000ee0 	.word	0x20000ee0
 8002afc:	40004800 	.word	0x40004800

08002b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b06:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <MX_DMA_Init+0x70>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	4a19      	ldr	r2, [pc, #100]	@ (8002b70 <MX_DMA_Init+0x70>)
 8002b0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b12:	4b17      	ldr	r3, [pc, #92]	@ (8002b70 <MX_DMA_Init+0x70>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b1e:	4b14      	ldr	r3, [pc, #80]	@ (8002b70 <MX_DMA_Init+0x70>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	4a13      	ldr	r2, [pc, #76]	@ (8002b70 <MX_DMA_Init+0x70>)
 8002b24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2a:	4b11      	ldr	r3, [pc, #68]	@ (8002b70 <MX_DMA_Init+0x70>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2101      	movs	r1, #1
 8002b3a:	2010      	movs	r0, #16
 8002b3c:	f001 fd6d 	bl	800461a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b40:	2010      	movs	r0, #16
 8002b42:	f001 fd86 	bl	8004652 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2101      	movs	r1, #1
 8002b4a:	2011      	movs	r0, #17
 8002b4c:	f001 fd65 	bl	800461a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002b50:	2011      	movs	r0, #17
 8002b52:	f001 fd7e 	bl	8004652 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2101      	movs	r1, #1
 8002b5a:	2038      	movs	r0, #56	@ 0x38
 8002b5c:	f001 fd5d 	bl	800461a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b60:	2038      	movs	r0, #56	@ 0x38
 8002b62:	f001 fd76 	bl	8004652 <HAL_NVIC_EnableIRQ>

}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800

08002b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08c      	sub	sp, #48	@ 0x30
 8002b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7a:	f107 031c 	add.w	r3, r7, #28
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
 8002b88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a46      	ldr	r2, [pc, #280]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b44      	ldr	r3, [pc, #272]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ba2:	4b41      	ldr	r3, [pc, #260]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	4a40      	ldr	r2, [pc, #256]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bae:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	4a3a      	ldr	r2, [pc, #232]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc6:	4b38      	ldr	r3, [pc, #224]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd2:	4b35      	ldr	r3, [pc, #212]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	4a34      	ldr	r2, [pc, #208]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bde:	4b32      	ldr	r3, [pc, #200]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bea:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002bf0:	f043 0308 	orr.w	r3, r3, #8
 8002bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c02:	4b29      	ldr	r3, [pc, #164]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4a28      	ldr	r2, [pc, #160]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002c08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ca8 <MX_GPIO_Init+0x134>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002c20:	4822      	ldr	r0, [pc, #136]	@ (8002cac <MX_GPIO_Init+0x138>)
 8002c22:	f002 fe35 	bl	8005890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2140      	movs	r1, #64	@ 0x40
 8002c2a:	4821      	ldr	r0, [pc, #132]	@ (8002cb0 <MX_GPIO_Init+0x13c>)
 8002c2c:	f002 fe30 	bl	8005890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002c30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c36:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c40:	f107 031c 	add.w	r3, r7, #28
 8002c44:	4619      	mov	r1, r3
 8002c46:	481b      	ldr	r0, [pc, #108]	@ (8002cb4 <MX_GPIO_Init+0x140>)
 8002c48:	f002 fc76 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002c4c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c52:	2301      	movs	r3, #1
 8002c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5e:	f107 031c 	add.w	r3, r7, #28
 8002c62:	4619      	mov	r1, r3
 8002c64:	4811      	ldr	r0, [pc, #68]	@ (8002cac <MX_GPIO_Init+0x138>)
 8002c66:	f002 fc67 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002c6a:	2340      	movs	r3, #64	@ 0x40
 8002c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 031c 	add.w	r3, r7, #28
 8002c7e:	4619      	mov	r1, r3
 8002c80:	480b      	ldr	r0, [pc, #44]	@ (8002cb0 <MX_GPIO_Init+0x13c>)
 8002c82:	f002 fc59 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002c86:	2380      	movs	r3, #128	@ 0x80
 8002c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002c92:	f107 031c 	add.w	r3, r7, #28
 8002c96:	4619      	mov	r1, r3
 8002c98:	4805      	ldr	r0, [pc, #20]	@ (8002cb0 <MX_GPIO_Init+0x13c>)
 8002c9a:	f002 fc4d 	bl	8005538 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c9e:	bf00      	nop
 8002ca0:	3730      	adds	r7, #48	@ 0x30
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40020400 	.word	0x40020400
 8002cb0:	40021800 	.word	0x40021800
 8002cb4:	40020800 	.word	0x40020800

08002cb8 <ApplicationInit_Sequence>:

/* USER CODE BEGIN 4 */


static HAL_StatusTypeDef ApplicationInit_Sequence(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
    /* Start ADC with DMA */
    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE) != HAL_OK) {
 8002cbc:	2205      	movs	r2, #5
 8002cbe:	491c      	ldr	r1, [pc, #112]	@ (8002d30 <ApplicationInit_Sequence+0x78>)
 8002cc0:	481c      	ldr	r0, [pc, #112]	@ (8002d34 <ApplicationInit_Sequence+0x7c>)
 8002cc2:	f000 ffef 	bl	8003ca4 <HAL_ADC_Start_DMA>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <ApplicationInit_Sequence+0x18>
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e02d      	b.n	8002d2c <ApplicationInit_Sequence+0x74>
       }

    /* Initialize motor speed monitoring */
    if (MotorSpeed_Init(&htim4) != HAL_OK) {
 8002cd0:	4819      	ldr	r0, [pc, #100]	@ (8002d38 <ApplicationInit_Sequence+0x80>)
 8002cd2:	f000 f841 	bl	8002d58 <MotorSpeed_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <ApplicationInit_Sequence+0x28>
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e025      	b.n	8002d2c <ApplicationInit_Sequence+0x74>
    }

    /* Start timer input capture for all channels */
    if (HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1) != HAL_OK) return HAL_ERROR;
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4815      	ldr	r0, [pc, #84]	@ (8002d38 <ApplicationInit_Sequence+0x80>)
 8002ce4:	f005 fb4c 	bl	8008380 <HAL_TIM_IC_Start_IT>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <ApplicationInit_Sequence+0x3a>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e01c      	b.n	8002d2c <ApplicationInit_Sequence+0x74>
    if (HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2) != HAL_OK) return HAL_ERROR;
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	4810      	ldr	r0, [pc, #64]	@ (8002d38 <ApplicationInit_Sequence+0x80>)
 8002cf6:	f005 fb43 	bl	8008380 <HAL_TIM_IC_Start_IT>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <ApplicationInit_Sequence+0x4c>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e013      	b.n	8002d2c <ApplicationInit_Sequence+0x74>
    if (HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3) != HAL_OK) return HAL_ERROR;
 8002d04:	2108      	movs	r1, #8
 8002d06:	480c      	ldr	r0, [pc, #48]	@ (8002d38 <ApplicationInit_Sequence+0x80>)
 8002d08:	f005 fb3a 	bl	8008380 <HAL_TIM_IC_Start_IT>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <ApplicationInit_Sequence+0x5e>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e00a      	b.n	8002d2c <ApplicationInit_Sequence+0x74>

    /* Initialize data acquisition system */
    if (DataAcq_Init() != HAL_OK) {
 8002d16:	f7ff faf1 	bl	80022fc <DataAcq_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <ApplicationInit_Sequence+0x6c>
    	return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e003      	b.n	8002d2c <ApplicationInit_Sequence+0x74>
    }

    /* Initialize BLDC interface */
    bldc_interface_uart_init(send_packet);
 8002d24:	4805      	ldr	r0, [pc, #20]	@ (8002d3c <ApplicationInit_Sequence+0x84>)
 8002d26:	f7ff f873 	bl	8001e10 <bldc_interface_uart_init>

    return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20001028 	.word	0x20001028
 8002d34:	20000c1c 	.word	0x20000c1c
 8002d38:	20000e0c 	.word	0x20000e0c
 8002d3c:	08001e71 	.word	0x08001e71

08002d40 <Application>:


static void Application(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	usb_transmit_task();
 8002d44:	f000 feba 	bl	8003abc <usb_transmit_task>

}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d50:	b672      	cpsid	i
}
 8002d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <Error_Handler+0x8>

08002d58 <MotorSpeed_Init>:

/**
 * @brief Initialize the motor speed monitoring module
 */
HAL_StatusTypeDef MotorSpeed_Init(TIM_HandleTypeDef* htim)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
    if (htim == NULL || htim->Instance != TIM4) {
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <MotorSpeed_Init+0x18>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d9c <MotorSpeed_Init+0x44>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d001      	beq.n	8002d74 <MotorSpeed_Init+0x1c>
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e00d      	b.n	8002d90 <MotorSpeed_Init+0x38>
    }

    motor_timer = htim;
 8002d74:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <MotorSpeed_Init+0x48>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6013      	str	r3, [r2, #0]
    last_capture = 0;
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002da4 <MotorSpeed_Init+0x4c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
    pulse_period = 0;
 8002d80:	4b09      	ldr	r3, [pc, #36]	@ (8002da8 <MotorSpeed_Init+0x50>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
    current_rpm = 0.0f;
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <MotorSpeed_Init+0x54>)
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40000800 	.word	0x40000800
 8002da0:	20001044 	.word	0x20001044
 8002da4:	20001048 	.word	0x20001048
 8002da8:	2000104c 	.word	0x2000104c
 8002dac:	20001050 	.word	0x20001050

08002db0 <MotorSpeed_GetRPM>:

/**
 * @brief Get the current motor speed in RPM
 */
float MotorSpeed_GetRPM(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
    return current_rpm;
 8002db4:	4b04      	ldr	r3, [pc, #16]	@ (8002dc8 <MotorSpeed_GetRPM+0x18>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	ee07 3a90 	vmov	s15, r3
}
 8002dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	20001050 	.word	0x20001050

08002dcc <MotorSpeed_CalculatePeriod>:

/**
 * @brief Calculate time period between two captures, handling timer overflow
 */
static uint32_t MotorSpeed_CalculatePeriod(uint32_t current_capture)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    if (current_capture > last_capture) {
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <MotorSpeed_CalculatePeriod+0x38>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d904      	bls.n	8002de8 <MotorSpeed_CalculatePeriod+0x1c>
        return current_capture - last_capture;
 8002dde:	4b09      	ldr	r3, [pc, #36]	@ (8002e04 <MotorSpeed_CalculatePeriod+0x38>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	e006      	b.n	8002df6 <MotorSpeed_CalculatePeriod+0x2a>
    } else {
        // Handle timer overflow
        return (0xFFFF - last_capture) + current_capture;
 8002de8:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <MotorSpeed_CalculatePeriod+0x38>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	1ad2      	subs	r2, r2, r3
 8002df0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002df4:	4413      	add	r3, r2
    }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20001048 	.word	0x20001048

08002e08 <MotorSpeed_TimerCallback>:

/**
 * @brief Timer input capture callback handler
 */
void MotorSpeed_TimerCallback(TIM_HandleTypeDef* htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM4) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a26      	ldr	r2, [pc, #152]	@ (8002eb0 <MotorSpeed_TimerCallback+0xa8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d143      	bne.n	8002ea2 <MotorSpeed_TimerCallback+0x9a>
        return;
    }

    uint32_t current_capture = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]

    // Determine which channel triggered the interrupt
    switch (htim->Channel) {
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	7f1b      	ldrb	r3, [r3, #28]
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d012      	beq.n	8002e4c <MotorSpeed_TimerCallback+0x44>
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	dc3d      	bgt.n	8002ea6 <MotorSpeed_TimerCallback+0x9e>
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d002      	beq.n	8002e34 <MotorSpeed_TimerCallback+0x2c>
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d006      	beq.n	8002e40 <MotorSpeed_TimerCallback+0x38>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
            break;

        default:
            return;  // Invalid channel
 8002e32:	e038      	b.n	8002ea6 <MotorSpeed_TimerCallback+0x9e>
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002e34:	2100      	movs	r1, #0
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f005 fe60 	bl	8008afc <HAL_TIM_ReadCapturedValue>
 8002e3c:	60f8      	str	r0, [r7, #12]
            break;
 8002e3e:	e00b      	b.n	8002e58 <MotorSpeed_TimerCallback+0x50>
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002e40:	2104      	movs	r1, #4
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f005 fe5a 	bl	8008afc <HAL_TIM_ReadCapturedValue>
 8002e48:	60f8      	str	r0, [r7, #12]
            break;
 8002e4a:	e005      	b.n	8002e58 <MotorSpeed_TimerCallback+0x50>
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002e4c:	2108      	movs	r1, #8
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f005 fe54 	bl	8008afc <HAL_TIM_ReadCapturedValue>
 8002e54:	60f8      	str	r0, [r7, #12]
            break;
 8002e56:	bf00      	nop
    }

    // Calculate period between pulses
    pulse_period = MotorSpeed_CalculatePeriod(current_capture);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7ff ffb7 	bl	8002dcc <MotorSpeed_CalculatePeriod>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4a14      	ldr	r2, [pc, #80]	@ (8002eb4 <MotorSpeed_TimerCallback+0xac>)
 8002e62:	6013      	str	r3, [r2, #0]
    last_capture = current_capture;
 8002e64:	4a14      	ldr	r2, [pc, #80]	@ (8002eb8 <MotorSpeed_TimerCallback+0xb0>)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6013      	str	r3, [r2, #0]

    // Calculate RPM
    if (pulse_period > 0) {
 8002e6a:	4b12      	ldr	r3, [pc, #72]	@ (8002eb4 <MotorSpeed_TimerCallback+0xac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <MotorSpeed_TimerCallback+0x90>
        // RPM = (60 * timer_clock) / (pulses_per_rev * pulse_period)
    	current_rpm = 60000000.0f / (MOTOR_SPEED_HALL_PULSES_PER_REV * pulse_period);
 8002e72:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <MotorSpeed_TimerCallback+0xac>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00da      	lsls	r2, r3, #3
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	ee07 3a90 	vmov	s15, r3
 8002e84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e88:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002ebc <MotorSpeed_TimerCallback+0xb4>
 8002e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <MotorSpeed_TimerCallback+0xb8>)
 8002e92:	edc3 7a00 	vstr	s15, [r3]
 8002e96:	e007      	b.n	8002ea8 <MotorSpeed_TimerCallback+0xa0>
    } else {
        current_rpm = 0.0f;  // Motor stopped
 8002e98:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <MotorSpeed_TimerCallback+0xb8>)
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	e002      	b.n	8002ea8 <MotorSpeed_TimerCallback+0xa0>
        return;
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <MotorSpeed_TimerCallback+0xa0>
            return;  // Invalid channel
 8002ea6:	bf00      	nop
    }
}
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	2000104c 	.word	0x2000104c
 8002eb8:	20001048 	.word	0x20001048
 8002ebc:	4c64e1c0 	.word	0x4c64e1c0
 8002ec0:	20001050 	.word	0x20001050

08002ec4 <packet_init>:
} PACKET_STATE_t;

static PACKET_STATE_t handler_states[PACKET_HANDLERS];

void packet_init(void (*s_func)(unsigned char *data, unsigned int len),
		void (*p_func)(unsigned char *data, unsigned int len), int handler_num) {
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
	handler_states[handler_num].send_func = s_func;
 8002ed0:	490c      	ldr	r1, [pc, #48]	@ (8002f04 <packet_init+0x40>)
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	015b      	lsls	r3, r3, #5
 8002ed8:	4413      	add	r3, r2
 8002eda:	015b      	lsls	r3, r3, #5
 8002edc:	440b      	add	r3, r1
 8002ede:	3304      	adds	r3, #4
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	601a      	str	r2, [r3, #0]
	handler_states[handler_num].process_func = p_func;
 8002ee4:	4907      	ldr	r1, [pc, #28]	@ (8002f04 <packet_init+0x40>)
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	015b      	lsls	r3, r3, #5
 8002eec:	4413      	add	r3, r2
 8002eee:	015b      	lsls	r3, r3, #5
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	601a      	str	r2, [r3, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	20001054 	.word	0x20001054

08002f08 <packet_send_packet>:

void packet_send_packet(unsigned char *data, unsigned int len, int handler_num) {
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
	if (len > PACKET_MAX_PL_LEN) {
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f1a:	f200 80c8 	bhi.w	80030ae <packet_send_packet+0x1a6>
		return;
	}

	int b_ind = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]

	if (len <= 256) {
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f28:	d820      	bhi.n	8002f6c <packet_send_packet+0x64>
		handler_states[handler_num].tx_buffer[b_ind++] = 2;
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	1c53      	adds	r3, r2, #1
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	4861      	ldr	r0, [pc, #388]	@ (80030b8 <packet_send_packet+0x1b0>)
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	015b      	lsls	r3, r3, #5
 8002f38:	440b      	add	r3, r1
 8002f3a:	015b      	lsls	r3, r3, #5
 8002f3c:	4403      	add	r3, r0
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002f44:	2202      	movs	r2, #2
 8002f46:	701a      	strb	r2, [r3, #0]
		handler_states[handler_num].tx_buffer[b_ind++] = len;
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	1c53      	adds	r3, r2, #1
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	b2dc      	uxtb	r4, r3
 8002f52:	4859      	ldr	r0, [pc, #356]	@ (80030b8 <packet_send_packet+0x1b0>)
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	015b      	lsls	r3, r3, #5
 8002f5a:	440b      	add	r3, r1
 8002f5c:	015b      	lsls	r3, r3, #5
 8002f5e:	4403      	add	r3, r0
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002f66:	4622      	mov	r2, r4
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e031      	b.n	8002fd0 <packet_send_packet+0xc8>
	} else {
		handler_states[handler_num].tx_buffer[b_ind++] = 3;
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	1c53      	adds	r3, r2, #1
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	4851      	ldr	r0, [pc, #324]	@ (80030b8 <packet_send_packet+0x1b0>)
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	460b      	mov	r3, r1
 8002f78:	015b      	lsls	r3, r3, #5
 8002f7a:	440b      	add	r3, r1
 8002f7c:	015b      	lsls	r3, r3, #5
 8002f7e:	4403      	add	r3, r0
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002f86:	2203      	movs	r2, #3
 8002f88:	701a      	strb	r2, [r3, #0]
		handler_states[handler_num].tx_buffer[b_ind++] = len >> 8;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	0a19      	lsrs	r1, r3, #8
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	1c53      	adds	r3, r2, #1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	b2cc      	uxtb	r4, r1
 8002f96:	4848      	ldr	r0, [pc, #288]	@ (80030b8 <packet_send_packet+0x1b0>)
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	015b      	lsls	r3, r3, #5
 8002f9e:	440b      	add	r3, r1
 8002fa0:	015b      	lsls	r3, r3, #5
 8002fa2:	4403      	add	r3, r0
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002faa:	4622      	mov	r2, r4
 8002fac:	701a      	strb	r2, [r3, #0]
		handler_states[handler_num].tx_buffer[b_ind++] = len & 0xFF;
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	1c53      	adds	r3, r2, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	b2dc      	uxtb	r4, r3
 8002fb8:	483f      	ldr	r0, [pc, #252]	@ (80030b8 <packet_send_packet+0x1b0>)
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	015b      	lsls	r3, r3, #5
 8002fc0:	440b      	add	r3, r1
 8002fc2:	015b      	lsls	r3, r3, #5
 8002fc4:	4403      	add	r3, r0
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002fcc:	4622      	mov	r2, r4
 8002fce:	701a      	strb	r2, [r3, #0]
	}

	memcpy(handler_states[handler_num].tx_buffer + b_ind, data, len);
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	015b      	lsls	r3, r3, #5
 8002fd6:	4413      	add	r3, r2
 8002fd8:	015b      	lsls	r3, r3, #5
 8002fda:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002fde:	4a36      	ldr	r2, [pc, #216]	@ (80030b8 <packet_send_packet+0x1b0>)
 8002fe0:	441a      	add	r2, r3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	68f9      	ldr	r1, [r7, #12]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f00b fc62 	bl	800e8b4 <memcpy>
	b_ind += len;
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

	unsigned short crc = crc16(data, len);
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff f950 	bl	80022a0 <crc16>
 8003000:	4603      	mov	r3, r0
 8003002:	827b      	strh	r3, [r7, #18]
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 8003004:	8a7b      	ldrh	r3, [r7, #18]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	b299      	uxth	r1, r3
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	1c53      	adds	r3, r2, #1
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	b2cc      	uxtb	r4, r1
 8003012:	4829      	ldr	r0, [pc, #164]	@ (80030b8 <packet_send_packet+0x1b0>)
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	460b      	mov	r3, r1
 8003018:	015b      	lsls	r3, r3, #5
 800301a:	440b      	add	r3, r1
 800301c:	015b      	lsls	r3, r3, #5
 800301e:	4403      	add	r3, r0
 8003020:	4413      	add	r3, r2
 8003022:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003026:	4622      	mov	r2, r4
 8003028:	701a      	strb	r2, [r3, #0]
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	1c53      	adds	r3, r2, #1
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	8a7b      	ldrh	r3, [r7, #18]
 8003032:	b2dc      	uxtb	r4, r3
 8003034:	4820      	ldr	r0, [pc, #128]	@ (80030b8 <packet_send_packet+0x1b0>)
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	015b      	lsls	r3, r3, #5
 800303c:	440b      	add	r3, r1
 800303e:	015b      	lsls	r3, r3, #5
 8003040:	4403      	add	r3, r0
 8003042:	4413      	add	r3, r2
 8003044:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003048:	4622      	mov	r2, r4
 800304a:	701a      	strb	r2, [r3, #0]
	handler_states[handler_num].tx_buffer[b_ind++] = 3;
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	1c53      	adds	r3, r2, #1
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	4819      	ldr	r0, [pc, #100]	@ (80030b8 <packet_send_packet+0x1b0>)
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	015b      	lsls	r3, r3, #5
 800305a:	440b      	add	r3, r1
 800305c:	015b      	lsls	r3, r3, #5
 800305e:	4403      	add	r3, r0
 8003060:	4413      	add	r3, r2
 8003062:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003066:	2203      	movs	r2, #3
 8003068:	701a      	strb	r2, [r3, #0]

	if (handler_states[handler_num].send_func) {
 800306a:	4913      	ldr	r1, [pc, #76]	@ (80030b8 <packet_send_packet+0x1b0>)
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	015b      	lsls	r3, r3, #5
 8003072:	4413      	add	r3, r2
 8003074:	015b      	lsls	r3, r3, #5
 8003076:	440b      	add	r3, r1
 8003078:	3304      	adds	r3, #4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d017      	beq.n	80030b0 <packet_send_packet+0x1a8>
		handler_states[handler_num].send_func(handler_states[handler_num].tx_buffer, b_ind);
 8003080:	490d      	ldr	r1, [pc, #52]	@ (80030b8 <packet_send_packet+0x1b0>)
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	015b      	lsls	r3, r3, #5
 8003088:	4413      	add	r3, r2
 800308a:	015b      	lsls	r3, r3, #5
 800308c:	440b      	add	r3, r1
 800308e:	3304      	adds	r3, #4
 8003090:	681c      	ldr	r4, [r3, #0]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	015b      	lsls	r3, r3, #5
 8003098:	4413      	add	r3, r2
 800309a:	015b      	lsls	r3, r3, #5
 800309c:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80030a0:	4a05      	ldr	r2, [pc, #20]	@ (80030b8 <packet_send_packet+0x1b0>)
 80030a2:	4413      	add	r3, r2
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	47a0      	blx	r4
 80030ac:	e000      	b.n	80030b0 <packet_send_packet+0x1a8>
		return;
 80030ae:	bf00      	nop
	}
}
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd90      	pop	{r4, r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20001054 	.word	0x20001054

080030bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003100 <HAL_MspInit+0x44>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003100 <HAL_MspInit+0x44>)
 80030c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <HAL_MspInit+0x44>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <HAL_MspInit+0x44>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	4a08      	ldr	r2, [pc, #32]	@ (8003100 <HAL_MspInit+0x44>)
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030e6:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <HAL_MspInit+0x44>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800

08003104 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	@ 0x28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a2d      	ldr	r2, [pc, #180]	@ (80031d8 <HAL_ADC_MspInit+0xd4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d154      	bne.n	80031d0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003126:	4b2d      	ldr	r3, [pc, #180]	@ (80031dc <HAL_ADC_MspInit+0xd8>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312a:	4a2c      	ldr	r2, [pc, #176]	@ (80031dc <HAL_ADC_MspInit+0xd8>)
 800312c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003130:	6453      	str	r3, [r2, #68]	@ 0x44
 8003132:	4b2a      	ldr	r3, [pc, #168]	@ (80031dc <HAL_ADC_MspInit+0xd8>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	4b27      	ldr	r3, [pc, #156]	@ (80031dc <HAL_ADC_MspInit+0xd8>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003142:	4a26      	ldr	r2, [pc, #152]	@ (80031dc <HAL_ADC_MspInit+0xd8>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6313      	str	r3, [r2, #48]	@ 0x30
 800314a:	4b24      	ldr	r3, [pc, #144]	@ (80031dc <HAL_ADC_MspInit+0xd8>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8003156:	2379      	movs	r3, #121	@ 0x79
 8003158:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800315a:	2303      	movs	r3, #3
 800315c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4619      	mov	r1, r3
 8003168:	481d      	ldr	r0, [pc, #116]	@ (80031e0 <HAL_ADC_MspInit+0xdc>)
 800316a:	f002 f9e5 	bl	8005538 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800316e:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 8003170:	4a1d      	ldr	r2, [pc, #116]	@ (80031e8 <HAL_ADC_MspInit+0xe4>)
 8003172:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003174:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 8003176:	2200      	movs	r2, #0
 8003178:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800317a:	4b1a      	ldr	r3, [pc, #104]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003180:	4b18      	ldr	r3, [pc, #96]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 8003182:	2200      	movs	r2, #0
 8003184:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003186:	4b17      	ldr	r3, [pc, #92]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 8003188:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800318c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800318e:	4b15      	ldr	r3, [pc, #84]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 8003190:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003194:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003196:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 8003198:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800319c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800319e:	4b11      	ldr	r3, [pc, #68]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 80031a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031a4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80031a6:	4b0f      	ldr	r3, [pc, #60]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 80031a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031ac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031ae:	4b0d      	ldr	r3, [pc, #52]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031b4:	480b      	ldr	r0, [pc, #44]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 80031b6:	f001 fa67 	bl	8004688 <HAL_DMA_Init>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80031c0:	f7ff fdc4 	bl	8002d4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a07      	ldr	r2, [pc, #28]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 80031c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80031ca:	4a06      	ldr	r2, [pc, #24]	@ (80031e4 <HAL_ADC_MspInit+0xe0>)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80031d0:	bf00      	nop
 80031d2:	3728      	adds	r7, #40	@ 0x28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40012000 	.word	0x40012000
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40020000 	.word	0x40020000
 80031e4:	20000c64 	.word	0x20000c64
 80031e8:	40026410 	.word	0x40026410

080031ec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08e      	sub	sp, #56	@ 0x38
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a4e      	ldr	r2, [pc, #312]	@ (8003344 <HAL_ETH_MspInit+0x158>)
 800320a:	4293      	cmp	r3, r2
 800320c:	f040 8096 	bne.w	800333c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003210:	4b4d      	ldr	r3, [pc, #308]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003214:	4a4c      	ldr	r2, [pc, #304]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 8003216:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800321a:	6313      	str	r3, [r2, #48]	@ 0x30
 800321c:	4b4a      	ldr	r3, [pc, #296]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 800321e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003224:	623b      	str	r3, [r7, #32]
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	4b47      	ldr	r3, [pc, #284]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 800322a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322c:	4a46      	ldr	r2, [pc, #280]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 800322e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003232:	6313      	str	r3, [r2, #48]	@ 0x30
 8003234:	4b44      	ldr	r3, [pc, #272]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	4a40      	ldr	r2, [pc, #256]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 8003246:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800324a:	6313      	str	r3, [r2, #48]	@ 0x30
 800324c:	4b3e      	ldr	r3, [pc, #248]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003258:	4b3b      	ldr	r3, [pc, #236]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325c:	4a3a      	ldr	r2, [pc, #232]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	6313      	str	r3, [r2, #48]	@ 0x30
 8003264:	4b38      	ldr	r3, [pc, #224]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003270:	4b35      	ldr	r3, [pc, #212]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003274:	4a34      	ldr	r2, [pc, #208]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6313      	str	r3, [r2, #48]	@ 0x30
 800327c:	4b32      	ldr	r3, [pc, #200]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003288:	4b2f      	ldr	r3, [pc, #188]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328c:	4a2e      	ldr	r2, [pc, #184]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 800328e:	f043 0302 	orr.w	r3, r3, #2
 8003292:	6313      	str	r3, [r2, #48]	@ 0x30
 8003294:	4b2c      	ldr	r3, [pc, #176]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80032a0:	4b29      	ldr	r3, [pc, #164]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a4:	4a28      	ldr	r2, [pc, #160]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 80032a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ac:	4b26      	ldr	r3, [pc, #152]	@ (8003348 <HAL_ETH_MspInit+0x15c>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80032b8:	2332      	movs	r3, #50	@ 0x32
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c4:	2303      	movs	r3, #3
 80032c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032c8:	230b      	movs	r3, #11
 80032ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032d0:	4619      	mov	r1, r3
 80032d2:	481e      	ldr	r0, [pc, #120]	@ (800334c <HAL_ETH_MspInit+0x160>)
 80032d4:	f002 f930 	bl	8005538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80032d8:	2386      	movs	r3, #134	@ 0x86
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032dc:	2302      	movs	r3, #2
 80032de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e4:	2303      	movs	r3, #3
 80032e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032e8:	230b      	movs	r3, #11
 80032ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032f0:	4619      	mov	r1, r3
 80032f2:	4817      	ldr	r0, [pc, #92]	@ (8003350 <HAL_ETH_MspInit+0x164>)
 80032f4:	f002 f920 	bl	8005538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80032f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003306:	2303      	movs	r3, #3
 8003308:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800330a:	230b      	movs	r3, #11
 800330c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800330e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003312:	4619      	mov	r1, r3
 8003314:	480f      	ldr	r0, [pc, #60]	@ (8003354 <HAL_ETH_MspInit+0x168>)
 8003316:	f002 f90f 	bl	8005538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800331a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003328:	2303      	movs	r3, #3
 800332a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800332c:	230b      	movs	r3, #11
 800332e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003334:	4619      	mov	r1, r3
 8003336:	4808      	ldr	r0, [pc, #32]	@ (8003358 <HAL_ETH_MspInit+0x16c>)
 8003338:	f002 f8fe 	bl	8005538 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800333c:	bf00      	nop
 800333e:	3738      	adds	r7, #56	@ 0x38
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40028000 	.word	0x40028000
 8003348:	40023800 	.word	0x40023800
 800334c:	40020800 	.word	0x40020800
 8003350:	40020000 	.word	0x40020000
 8003354:	40020400 	.word	0x40020400
 8003358:	40021800 	.word	0x40021800

0800335c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08c      	sub	sp, #48	@ 0x30
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003364:	f107 031c 	add.w	r3, r7, #28
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337c:	d114      	bne.n	80033a8 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800337e:	4b34      	ldr	r3, [pc, #208]	@ (8003450 <HAL_TIM_Base_MspInit+0xf4>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	4a33      	ldr	r2, [pc, #204]	@ (8003450 <HAL_TIM_Base_MspInit+0xf4>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6413      	str	r3, [r2, #64]	@ 0x40
 800338a:	4b31      	ldr	r3, [pc, #196]	@ (8003450 <HAL_TIM_Base_MspInit+0xf4>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003396:	2200      	movs	r2, #0
 8003398:	2101      	movs	r1, #1
 800339a:	201c      	movs	r0, #28
 800339c:	f001 f93d 	bl	800461a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033a0:	201c      	movs	r0, #28
 80033a2:	f001 f956 	bl	8004652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80033a6:	e04f      	b.n	8003448 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM3)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a29      	ldr	r2, [pc, #164]	@ (8003454 <HAL_TIM_Base_MspInit+0xf8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d114      	bne.n	80033dc <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033b2:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <HAL_TIM_Base_MspInit+0xf4>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	4a26      	ldr	r2, [pc, #152]	@ (8003450 <HAL_TIM_Base_MspInit+0xf4>)
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033be:	4b24      	ldr	r3, [pc, #144]	@ (8003450 <HAL_TIM_Base_MspInit+0xf4>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80033ca:	2200      	movs	r2, #0
 80033cc:	2101      	movs	r1, #1
 80033ce:	201d      	movs	r0, #29
 80033d0:	f001 f923 	bl	800461a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033d4:	201d      	movs	r0, #29
 80033d6:	f001 f93c 	bl	8004652 <HAL_NVIC_EnableIRQ>
}
 80033da:	e035      	b.n	8003448 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM4)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003458 <HAL_TIM_Base_MspInit+0xfc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d130      	bne.n	8003448 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003450 <HAL_TIM_Base_MspInit+0xf4>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	4a19      	ldr	r2, [pc, #100]	@ (8003450 <HAL_TIM_Base_MspInit+0xf4>)
 80033ec:	f043 0304 	orr.w	r3, r3, #4
 80033f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033f2:	4b17      	ldr	r3, [pc, #92]	@ (8003450 <HAL_TIM_Base_MspInit+0xf4>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033fe:	4b14      	ldr	r3, [pc, #80]	@ (8003450 <HAL_TIM_Base_MspInit+0xf4>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	4a13      	ldr	r2, [pc, #76]	@ (8003450 <HAL_TIM_Base_MspInit+0xf4>)
 8003404:	f043 0308 	orr.w	r3, r3, #8
 8003408:	6313      	str	r3, [r2, #48]	@ 0x30
 800340a:	4b11      	ldr	r3, [pc, #68]	@ (8003450 <HAL_TIM_Base_MspInit+0xf4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003416:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800341a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003428:	2302      	movs	r3, #2
 800342a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800342c:	f107 031c 	add.w	r3, r7, #28
 8003430:	4619      	mov	r1, r3
 8003432:	480a      	ldr	r0, [pc, #40]	@ (800345c <HAL_TIM_Base_MspInit+0x100>)
 8003434:	f002 f880 	bl	8005538 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003438:	2200      	movs	r2, #0
 800343a:	2100      	movs	r1, #0
 800343c:	201e      	movs	r0, #30
 800343e:	f001 f8ec 	bl	800461a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003442:	201e      	movs	r0, #30
 8003444:	f001 f905 	bl	8004652 <HAL_NVIC_EnableIRQ>
}
 8003448:	bf00      	nop
 800344a:	3730      	adds	r7, #48	@ 0x30
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40023800 	.word	0x40023800
 8003454:	40000400 	.word	0x40000400
 8003458:	40000800 	.word	0x40000800
 800345c:	40020c00 	.word	0x40020c00

08003460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b0b0      	sub	sp, #192	@ 0xc0
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003468:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	60da      	str	r2, [r3, #12]
 8003476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003478:	f107 031c 	add.w	r3, r7, #28
 800347c:	2290      	movs	r2, #144	@ 0x90
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f00b f9d3 	bl	800e82c <memset>
  if(huart->Instance==USART2)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a76      	ldr	r2, [pc, #472]	@ (8003664 <HAL_UART_MspInit+0x204>)
 800348c:	4293      	cmp	r3, r2
 800348e:	f040 80a2 	bne.w	80035d6 <HAL_UART_MspInit+0x176>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003492:	2380      	movs	r3, #128	@ 0x80
 8003494:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003496:	2300      	movs	r3, #0
 8003498:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800349a:	f107 031c 	add.w	r3, r7, #28
 800349e:	4618      	mov	r0, r3
 80034a0:	f004 f9e6 	bl	8007870 <HAL_RCCEx_PeriphCLKConfig>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80034aa:	f7ff fc4f 	bl	8002d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003668 <HAL_UART_MspInit+0x208>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003668 <HAL_UART_MspInit+0x208>)
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ba:	4b6b      	ldr	r3, [pc, #428]	@ (8003668 <HAL_UART_MspInit+0x208>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034c6:	4b68      	ldr	r3, [pc, #416]	@ (8003668 <HAL_UART_MspInit+0x208>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	4a67      	ldr	r2, [pc, #412]	@ (8003668 <HAL_UART_MspInit+0x208>)
 80034cc:	f043 0308 	orr.w	r3, r3, #8
 80034d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034d2:	4b65      	ldr	r3, [pc, #404]	@ (8003668 <HAL_UART_MspInit+0x208>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80034de:	2360      	movs	r3, #96	@ 0x60
 80034e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e4:	2302      	movs	r3, #2
 80034e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f0:	2303      	movs	r3, #3
 80034f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034f6:	2307      	movs	r3, #7
 80034f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034fc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003500:	4619      	mov	r1, r3
 8003502:	485a      	ldr	r0, [pc, #360]	@ (800366c <HAL_UART_MspInit+0x20c>)
 8003504:	f002 f818 	bl	8005538 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003508:	4b59      	ldr	r3, [pc, #356]	@ (8003670 <HAL_UART_MspInit+0x210>)
 800350a:	4a5a      	ldr	r2, [pc, #360]	@ (8003674 <HAL_UART_MspInit+0x214>)
 800350c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800350e:	4b58      	ldr	r3, [pc, #352]	@ (8003670 <HAL_UART_MspInit+0x210>)
 8003510:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003514:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003516:	4b56      	ldr	r3, [pc, #344]	@ (8003670 <HAL_UART_MspInit+0x210>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800351c:	4b54      	ldr	r3, [pc, #336]	@ (8003670 <HAL_UART_MspInit+0x210>)
 800351e:	2200      	movs	r2, #0
 8003520:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003522:	4b53      	ldr	r3, [pc, #332]	@ (8003670 <HAL_UART_MspInit+0x210>)
 8003524:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003528:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800352a:	4b51      	ldr	r3, [pc, #324]	@ (8003670 <HAL_UART_MspInit+0x210>)
 800352c:	2200      	movs	r2, #0
 800352e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003530:	4b4f      	ldr	r3, [pc, #316]	@ (8003670 <HAL_UART_MspInit+0x210>)
 8003532:	2200      	movs	r2, #0
 8003534:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003536:	4b4e      	ldr	r3, [pc, #312]	@ (8003670 <HAL_UART_MspInit+0x210>)
 8003538:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800353c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800353e:	4b4c      	ldr	r3, [pc, #304]	@ (8003670 <HAL_UART_MspInit+0x210>)
 8003540:	2200      	movs	r2, #0
 8003542:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003544:	4b4a      	ldr	r3, [pc, #296]	@ (8003670 <HAL_UART_MspInit+0x210>)
 8003546:	2200      	movs	r2, #0
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800354a:	4849      	ldr	r0, [pc, #292]	@ (8003670 <HAL_UART_MspInit+0x210>)
 800354c:	f001 f89c 	bl	8004688 <HAL_DMA_Init>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8003556:	f7ff fbf9 	bl	8002d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a44      	ldr	r2, [pc, #272]	@ (8003670 <HAL_UART_MspInit+0x210>)
 800355e:	675a      	str	r2, [r3, #116]	@ 0x74
 8003560:	4a43      	ldr	r2, [pc, #268]	@ (8003670 <HAL_UART_MspInit+0x210>)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003566:	4b44      	ldr	r3, [pc, #272]	@ (8003678 <HAL_UART_MspInit+0x218>)
 8003568:	4a44      	ldr	r2, [pc, #272]	@ (800367c <HAL_UART_MspInit+0x21c>)
 800356a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800356c:	4b42      	ldr	r3, [pc, #264]	@ (8003678 <HAL_UART_MspInit+0x218>)
 800356e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003572:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003574:	4b40      	ldr	r3, [pc, #256]	@ (8003678 <HAL_UART_MspInit+0x218>)
 8003576:	2240      	movs	r2, #64	@ 0x40
 8003578:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800357a:	4b3f      	ldr	r3, [pc, #252]	@ (8003678 <HAL_UART_MspInit+0x218>)
 800357c:	2200      	movs	r2, #0
 800357e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003580:	4b3d      	ldr	r3, [pc, #244]	@ (8003678 <HAL_UART_MspInit+0x218>)
 8003582:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003586:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003588:	4b3b      	ldr	r3, [pc, #236]	@ (8003678 <HAL_UART_MspInit+0x218>)
 800358a:	2200      	movs	r2, #0
 800358c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800358e:	4b3a      	ldr	r3, [pc, #232]	@ (8003678 <HAL_UART_MspInit+0x218>)
 8003590:	2200      	movs	r2, #0
 8003592:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003594:	4b38      	ldr	r3, [pc, #224]	@ (8003678 <HAL_UART_MspInit+0x218>)
 8003596:	2200      	movs	r2, #0
 8003598:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800359a:	4b37      	ldr	r3, [pc, #220]	@ (8003678 <HAL_UART_MspInit+0x218>)
 800359c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80035a0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035a2:	4b35      	ldr	r3, [pc, #212]	@ (8003678 <HAL_UART_MspInit+0x218>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80035a8:	4833      	ldr	r0, [pc, #204]	@ (8003678 <HAL_UART_MspInit+0x218>)
 80035aa:	f001 f86d 	bl	8004688 <HAL_DMA_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 80035b4:	f7ff fbca 	bl	8002d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003678 <HAL_UART_MspInit+0x218>)
 80035bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80035be:	4a2e      	ldr	r2, [pc, #184]	@ (8003678 <HAL_UART_MspInit+0x218>)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80035c4:	2200      	movs	r2, #0
 80035c6:	2101      	movs	r1, #1
 80035c8:	2026      	movs	r0, #38	@ 0x26
 80035ca:	f001 f826 	bl	800461a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035ce:	2026      	movs	r0, #38	@ 0x26
 80035d0:	f001 f83f 	bl	8004652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80035d4:	e041      	b.n	800365a <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a29      	ldr	r2, [pc, #164]	@ (8003680 <HAL_UART_MspInit+0x220>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d13c      	bne.n	800365a <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80035e6:	2300      	movs	r3, #0
 80035e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ea:	f107 031c 	add.w	r3, r7, #28
 80035ee:	4618      	mov	r0, r3
 80035f0:	f004 f93e 	bl	8007870 <HAL_RCCEx_PeriphCLKConfig>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_UART_MspInit+0x19e>
      Error_Handler();
 80035fa:	f7ff fba7 	bl	8002d4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003668 <HAL_UART_MspInit+0x208>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	4a19      	ldr	r2, [pc, #100]	@ (8003668 <HAL_UART_MspInit+0x208>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003608:	6413      	str	r3, [r2, #64]	@ 0x40
 800360a:	4b17      	ldr	r3, [pc, #92]	@ (8003668 <HAL_UART_MspInit+0x208>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003616:	4b14      	ldr	r3, [pc, #80]	@ (8003668 <HAL_UART_MspInit+0x208>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	4a13      	ldr	r2, [pc, #76]	@ (8003668 <HAL_UART_MspInit+0x208>)
 800361c:	f043 0308 	orr.w	r3, r3, #8
 8003620:	6313      	str	r3, [r2, #48]	@ 0x30
 8003622:	4b11      	ldr	r3, [pc, #68]	@ (8003668 <HAL_UART_MspInit+0x208>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800362e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003632:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003636:	2302      	movs	r3, #2
 8003638:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003642:	2303      	movs	r3, #3
 8003644:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003648:	2307      	movs	r3, #7
 800364a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800364e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003652:	4619      	mov	r1, r3
 8003654:	4805      	ldr	r0, [pc, #20]	@ (800366c <HAL_UART_MspInit+0x20c>)
 8003656:	f001 ff6f 	bl	8005538 <HAL_GPIO_Init>
}
 800365a:	bf00      	nop
 800365c:	37c0      	adds	r7, #192	@ 0xc0
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40004400 	.word	0x40004400
 8003668:	40023800 	.word	0x40023800
 800366c:	40020c00 	.word	0x40020c00
 8003670:	20000f68 	.word	0x20000f68
 8003674:	40026088 	.word	0x40026088
 8003678:	20000fc8 	.word	0x20000fc8
 800367c:	400260a0 	.word	0x400260a0
 8003680:	40004800 	.word	0x40004800

08003684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <NMI_Handler+0x4>

0800368c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <HardFault_Handler+0x4>

08003694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003698:	bf00      	nop
 800369a:	e7fd      	b.n	8003698 <MemManage_Handler+0x4>

0800369c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <BusFault_Handler+0x4>

080036a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a8:	bf00      	nop
 80036aa:	e7fd      	b.n	80036a8 <UsageFault_Handler+0x4>

080036ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036ba:	b480      	push	{r7}
 80036bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036da:	f000 fa5b 	bl	8003b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80036e8:	4802      	ldr	r0, [pc, #8]	@ (80036f4 <DMA1_Stream5_IRQHandler+0x10>)
 80036ea:	f001 f96d 	bl	80049c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000f68 	.word	0x20000f68

080036f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80036fc:	4802      	ldr	r0, [pc, #8]	@ (8003708 <DMA1_Stream6_IRQHandler+0x10>)
 80036fe:	f001 f963 	bl	80049c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000fc8 	.word	0x20000fc8

0800370c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003710:	4802      	ldr	r0, [pc, #8]	@ (800371c <TIM2_IRQHandler+0x10>)
 8003712:	f004 ff85 	bl	8008620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000d74 	.word	0x20000d74

08003720 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003724:	4802      	ldr	r0, [pc, #8]	@ (8003730 <TIM3_IRQHandler+0x10>)
 8003726:	f004 ff7b 	bl	8008620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000dc0 	.word	0x20000dc0

08003734 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003738:	4802      	ldr	r0, [pc, #8]	@ (8003744 <TIM4_IRQHandler+0x10>)
 800373a:	f004 ff71 	bl	8008620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000e0c 	.word	0x20000e0c

08003748 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800374c:	4802      	ldr	r0, [pc, #8]	@ (8003758 <USART2_IRQHandler+0x10>)
 800374e:	f005 fe43 	bl	80093d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000e58 	.word	0x20000e58

0800375c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003760:	4802      	ldr	r0, [pc, #8]	@ (800376c <DMA2_Stream0_IRQHandler+0x10>)
 8003762:	f001 f931 	bl	80049c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000c64 	.word	0x20000c64

08003770 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003774:	4802      	ldr	r0, [pc, #8]	@ (8003780 <OTG_FS_IRQHandler+0x10>)
 8003776:	f002 f9f6 	bl	8005b66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	2006ff6c 	.word	0x2006ff6c

08003784 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a04      	ldr	r2, [pc, #16]	@ (80037a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d102      	bne.n	800379c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		DataAcq_ProcessSamples(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fe fe0e 	bl	80023b8 <DataAcq_ProcessSamples>
	}


}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40000400 	.word	0x40000400

080037a8 <HAL_ADC_ConvCpltCallback>:


/*ADC Measurement*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	// Called when DMA fills the ENTIRE buffer
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
	MotorSpeed_TimerCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff fb1f 	bl	8002e08 <MotorSpeed_TimerCallback>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037dc:	4a14      	ldr	r2, [pc, #80]	@ (8003830 <_sbrk+0x5c>)
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <_sbrk+0x60>)
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037e8:	4b13      	ldr	r3, [pc, #76]	@ (8003838 <_sbrk+0x64>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037f0:	4b11      	ldr	r3, [pc, #68]	@ (8003838 <_sbrk+0x64>)
 80037f2:	4a12      	ldr	r2, [pc, #72]	@ (800383c <_sbrk+0x68>)
 80037f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037f6:	4b10      	ldr	r3, [pc, #64]	@ (8003838 <_sbrk+0x64>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	429a      	cmp	r2, r3
 8003802:	d207      	bcs.n	8003814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003804:	f00b f82a 	bl	800e85c <__errno>
 8003808:	4603      	mov	r3, r0
 800380a:	220c      	movs	r2, #12
 800380c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295
 8003812:	e009      	b.n	8003828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003814:	4b08      	ldr	r3, [pc, #32]	@ (8003838 <_sbrk+0x64>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800381a:	4b07      	ldr	r3, [pc, #28]	@ (8003838 <_sbrk+0x64>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	4a05      	ldr	r2, [pc, #20]	@ (8003838 <_sbrk+0x64>)
 8003824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003826:	68fb      	ldr	r3, [r7, #12]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20080000 	.word	0x20080000
 8003834:	00000400 	.word	0x00000400
 8003838:	20001474 	.word	0x20001474
 800383c:	20070598 	.word	0x20070598

08003840 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003844:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <SystemInit+0x20>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384a:	4a05      	ldr	r2, [pc, #20]	@ (8003860 <SystemInit+0x20>)
 800384c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003850:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <transmit_usb_packet>:
#define USB_CHUNK_SIZE 500  // Send 500 samples at a time instead of the full 8000

// Assuming usb_buffer is defined like this (adjust types if needed):
// uint32_t usb_buffer[2][5][USB_BUFFER_SIZE];
// Function to transmit a single USB packet
uint8_t transmit_usb_packet(uint32_t* data, uint16_t data_len) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
    uint8_t status;
    uint32_t start_time = HAL_GetTick();
 8003870:	f000 f9a4 	bl	8003bbc <HAL_GetTick>
 8003874:	6178      	str	r0, [r7, #20]

    do {
        status = CDC_Transmit_FS((uint8_t*)data, data_len);
 8003876:	887b      	ldrh	r3, [r7, #2]
 8003878:	4619      	mov	r1, r3
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f00a fa40 	bl	800dd00 <CDC_Transmit_FS>
 8003880:	4603      	mov	r3, r0
 8003882:	74fb      	strb	r3, [r7, #19]
    } while (status != USBD_OK);
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f5      	bne.n	8003876 <transmit_usb_packet+0x12>

    uint32_t transmit_time = HAL_GetTick() - start_time;
 800388a:	f000 f997 	bl	8003bbc <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	60fb      	str	r3, [r7, #12]

    if (transmit_time > 10) {
        // Log or debug if transmit time exceeds threshold
    }
    return status; // Return the status of transmission.
 8003896:	7cfb      	ldrb	r3, [r7, #19]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <CDC_Receive_FS_App>:




uint8_t CDC_Receive_FS_App(uint8_t *Buf, uint32_t *Len)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]

  //HAL_GPIO_TogglePin(GPIOB, LD2_Pin); // Example: Toggle an LED
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf); // Re-arm the receive buffer
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	481f      	ldr	r0, [pc, #124]	@ (800392c <CDC_Receive_FS_App+0x8c>)
 80038ae:	f008 fda5 	bl	800c3fc <USBD_CDC_SetRxBuffer>
  // Process received command
  if (*Len > 0) {
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d033      	beq.n	8003922 <CDC_Receive_FS_App+0x82>
    if (Buf[0] == 'S') { // Start command
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b53      	cmp	r3, #83	@ 0x53
 80038c0:	d11b      	bne.n	80038fa <CDC_Receive_FS_App+0x5a>
      if (!data_acquisition_running) {
 80038c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003930 <CDC_Receive_FS_App+0x90>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d12b      	bne.n	8003922 <CDC_Receive_FS_App+0x82>
        HAL_TIM_Base_Start_IT(&htim3); // Start TIM3 and interrupts
 80038ca:	481a      	ldr	r0, [pc, #104]	@ (8003934 <CDC_Receive_FS_App+0x94>)
 80038cc:	f004 fc50 	bl	8008170 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim2); // Start TIM2 and interrupts (if needed for toggling)
 80038d0:	4819      	ldr	r0, [pc, #100]	@ (8003938 <CDC_Receive_FS_App+0x98>)
 80038d2:	f004 fc4d 	bl	8008170 <HAL_TIM_Base_Start_IT>
        data_acquisition_running = 1;
 80038d6:	4b16      	ldr	r3, [pc, #88]	@ (8003930 <CDC_Receive_FS_App+0x90>)
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]
        buffer_ready_flag = 3; // Set to initial not ready value.
 80038dc:	4b17      	ldr	r3, [pc, #92]	@ (800393c <CDC_Receive_FS_App+0x9c>)
 80038de:	2203      	movs	r2, #3
 80038e0:	701a      	strb	r2, [r3, #0]
        packet_counter = 0; // Reset packet counter
 80038e2:	4b17      	ldr	r3, [pc, #92]	@ (8003940 <CDC_Receive_FS_App+0xa0>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
        DataAcq_Init();
 80038e8:	f7fe fd08 	bl	80022fc <DataAcq_Init>
        MotorSpeed_Init(&htim4);
 80038ec:	4815      	ldr	r0, [pc, #84]	@ (8003944 <CDC_Receive_FS_App+0xa4>)
 80038ee:	f7ff fa33 	bl	8002d58 <MotorSpeed_Init>
        active_buffer = 0;
 80038f2:	4b15      	ldr	r3, [pc, #84]	@ (8003948 <CDC_Receive_FS_App+0xa8>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	e013      	b.n	8003922 <CDC_Receive_FS_App+0x82>
      } else {
      }
    } else if (Buf[0] == 'T') { // Stop command
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b54      	cmp	r3, #84	@ 0x54
 8003900:	d10f      	bne.n	8003922 <CDC_Receive_FS_App+0x82>
      if (data_acquisition_running) {
 8003902:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <CDC_Receive_FS_App+0x90>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <CDC_Receive_FS_App+0x82>
        HAL_TIM_Base_Stop_IT(&htim3); // Stop TIM3 and interrupts
 800390a:	480a      	ldr	r0, [pc, #40]	@ (8003934 <CDC_Receive_FS_App+0x94>)
 800390c:	f004 fca8 	bl	8008260 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Stop_IT(&htim2); // Stop TIM2 and interrupts
 8003910:	4809      	ldr	r0, [pc, #36]	@ (8003938 <CDC_Receive_FS_App+0x98>)
 8003912:	f004 fca5 	bl	8008260 <HAL_TIM_Base_Stop_IT>
        data_acquisition_running = 0;
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <CDC_Receive_FS_App+0x90>)
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
        buffer_ready_flag = 3; // Ensure sending loop stops gracefully
 800391c:	4b07      	ldr	r3, [pc, #28]	@ (800393c <CDC_Receive_FS_App+0x9c>)
 800391e:	2203      	movs	r2, #3
 8003920:	701a      	strb	r2, [r3, #0]
      } else {
      }
    } else {
    }
  }
  return USBD_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	2006ea90 	.word	0x2006ea90
 8003930:	2006ea80 	.word	0x2006ea80
 8003934:	20000dc0 	.word	0x20000dc0
 8003938:	20000d74 	.word	0x20000d74
 800393c:	20000bdd 	.word	0x20000bdd
 8003940:	2006ea7c 	.word	0x2006ea7c
 8003944:	20000e0c 	.word	0x20000e0c
 8003948:	20001478 	.word	0x20001478

0800394c <check_and_send_chunks>:



// Function to check if it's time to send a chunk based on buffer fill level
void check_and_send_chunks(void) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
    // Only send data if we're acquiring
    if (data_acquisition_running == 0) {
 8003952:	4b16      	ldr	r3, [pc, #88]	@ (80039ac <check_and_send_chunks+0x60>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d024      	beq.n	80039a4 <check_and_send_chunks+0x58>
        return;
    }

    // Get current buffer state
    uint32_t current_fill = usb_buffer_cnt;
 800395a:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <check_and_send_chunks+0x64>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	603b      	str	r3, [r7, #0]

    // If we have enough new data since last chunk was sent (at least USB_CHUNK_SIZE/4)
    if (current_fill >= (last_chunk_sent + USB_CHUNK_SIZE/4)) {
 8003960:	4b14      	ldr	r3, [pc, #80]	@ (80039b4 <check_and_send_chunks+0x68>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	337d      	adds	r3, #125	@ 0x7d
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d31c      	bcc.n	80039a6 <check_and_send_chunks+0x5a>
        // Calculate how much data to send in this chunk
        uint32_t chunk_size = current_fill - last_chunk_sent;
 800396c:	4b11      	ldr	r3, [pc, #68]	@ (80039b4 <check_and_send_chunks+0x68>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	607b      	str	r3, [r7, #4]

        // Cap chunk size to USB_CHUNK_SIZE
        if (chunk_size > USB_CHUNK_SIZE) {
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800397c:	d902      	bls.n	8003984 <check_and_send_chunks+0x38>
            chunk_size = USB_CHUNK_SIZE;
 800397e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003982:	607b      	str	r3, [r7, #4]
        }

        // Send the chunk
        process_and_transmit_chunk(active_buffer, last_chunk_sent, chunk_size);
 8003984:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <check_and_send_chunks+0x6c>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4a0a      	ldr	r2, [pc, #40]	@ (80039b4 <check_and_send_chunks+0x68>)
 800398c:	6811      	ldr	r1, [r2, #0]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 f813 	bl	80039bc <process_and_transmit_chunk>

        // Update last chunk sent position
        last_chunk_sent += chunk_size;
 8003996:	4b07      	ldr	r3, [pc, #28]	@ (80039b4 <check_and_send_chunks+0x68>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4413      	add	r3, r2
 800399e:	4a05      	ldr	r2, [pc, #20]	@ (80039b4 <check_and_send_chunks+0x68>)
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e000      	b.n	80039a6 <check_and_send_chunks+0x5a>
        return;
 80039a4:	bf00      	nop
    }
}
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	2006ea80 	.word	0x2006ea80
 80039b0:	20000bd8 	.word	0x20000bd8
 80039b4:	2006ea84 	.word	0x2006ea84
 80039b8:	20001478 	.word	0x20001478

080039bc <process_and_transmit_chunk>:


void process_and_transmit_chunk(uint8_t buffer_index, uint32_t start_idx, uint32_t chunk_size) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b090      	sub	sp, #64	@ 0x40
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	73fb      	strb	r3, [r7, #15]
    // Ensure we don't exceed buffer bounds
    if (start_idx >= USB_BUFFER_SIZE) {
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80039d0:	d26a      	bcs.n	8003aa8 <process_and_transmit_chunk+0xec>
        return;
    }

    // Calculate actual chunk size (might be smaller at buffer end)
    uint32_t actual_chunk_size = (start_idx + chunk_size > USB_BUFFER_SIZE) ?
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4413      	add	r3, r2
                                 (USB_BUFFER_SIZE - start_idx) : chunk_size;
 80039d8:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80039dc:	d903      	bls.n	80039e6 <process_and_transmit_chunk+0x2a>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f5c3 53fa 	rsb	r3, r3, #8000	@ 0x1f40
 80039e4:	e000      	b.n	80039e8 <process_and_transmit_chunk+0x2c>
 80039e6:	687b      	ldr	r3, [r7, #4]
    uint32_t actual_chunk_size = (start_idx + chunk_size > USB_BUFFER_SIZE) ?
 80039e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Send each sample in the chunk
    for (uint16_t i = 0; i < actual_chunk_size; i++) {
 80039ea:	2300      	movs	r3, #0
 80039ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80039ee:	e056      	b.n	8003a9e <process_and_transmit_chunk+0xe2>
        uint32_t buffer_idx = start_idx + i;
 80039f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	4413      	add	r3, r2
 80039f6:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t header = 0xddccbbaa;
 80039f8:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab0 <process_and_transmit_chunk+0xf4>)
 80039fa:	633b      	str	r3, [r7, #48]	@ 0x30
        uint32_t values[7] = {
 80039fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fe:	617b      	str	r3, [r7, #20]
            header,
            packet_counter++,
 8003a00:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab4 <process_and_transmit_chunk+0xf8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	492b      	ldr	r1, [pc, #172]	@ (8003ab4 <process_and_transmit_chunk+0xf8>)
 8003a08:	600a      	str	r2, [r1, #0]
        uint32_t values[7] = {
 8003a0a:	61bb      	str	r3, [r7, #24]
            usb_buffer[buffer_index][0][buffer_idx],
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	492a      	ldr	r1, [pc, #168]	@ (8003ab8 <process_and_transmit_chunk+0xfc>)
 8003a10:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8003a14:	fb03 f202 	mul.w	r2, r3, r2
 8003a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 8003a20:	61fb      	str	r3, [r7, #28]
            usb_buffer[buffer_index][1][buffer_idx],
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	4924      	ldr	r1, [pc, #144]	@ (8003ab8 <process_and_transmit_chunk+0xfc>)
 8003a26:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8003a2a:	fb03 f202 	mul.w	r2, r3, r2
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 8003a36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 8003a3a:	623b      	str	r3, [r7, #32]
            usb_buffer[buffer_index][2][buffer_idx],
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	491e      	ldr	r1, [pc, #120]	@ (8003ab8 <process_and_transmit_chunk+0xfc>)
 8003a40:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8003a44:	fb03 f202 	mul.w	r2, r3, r2
 8003a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 8003a50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
            usb_buffer[buffer_index][3][buffer_idx],
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	4917      	ldr	r1, [pc, #92]	@ (8003ab8 <process_and_transmit_chunk+0xfc>)
 8003a5a:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8003a5e:	fb03 f202 	mul.w	r2, r3, r2
 8003a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a64:	441a      	add	r2, r3
 8003a66:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 8003a70:	62bb      	str	r3, [r7, #40]	@ 0x28
            usb_buffer[buffer_index][4][buffer_idx]
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	4910      	ldr	r1, [pc, #64]	@ (8003ab8 <process_and_transmit_chunk+0xfc>)
 8003a76:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8003a7a:	fb03 f202 	mul.w	r2, r3, r2
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8003a86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 8003a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        };

        transmit_usb_packet(values, sizeof(values));
 8003a8c:	f107 0314 	add.w	r3, r7, #20
 8003a90:	211c      	movs	r1, #28
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fee6 	bl	8003864 <transmit_usb_packet>
    for (uint16_t i = 0; i < actual_chunk_size; i++) {
 8003a98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8003a9e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8003aa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d8a4      	bhi.n	80039f0 <process_and_transmit_chunk+0x34>
 8003aa6:	e000      	b.n	8003aaa <process_and_transmit_chunk+0xee>
        return;
 8003aa8:	bf00      	nop
    }
}
 8003aaa:	3740      	adds	r7, #64	@ 0x40
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	ddccbbaa 	.word	0xddccbbaa
 8003ab4:	2006ea7c 	.word	0x2006ea7c
 8003ab8:	2000147c 	.word	0x2000147c

08003abc <usb_transmit_task>:


// Task to handle USB transmission
void usb_transmit_task() {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0

	   check_and_send_chunks();
 8003ac0:	f7ff ff44 	bl	800394c <check_and_send_chunks>
}
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003acc:	f7ff feb8 	bl	8003840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ad0:	480c      	ldr	r0, [pc, #48]	@ (8003b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ad2:	490d      	ldr	r1, [pc, #52]	@ (8003b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8003b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ad8:	e002      	b.n	8003ae0 <LoopCopyDataInit>

08003ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ade:	3304      	adds	r3, #4

08003ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ae4:	d3f9      	bcc.n	8003ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8003b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aec:	e001      	b.n	8003af2 <LoopFillZerobss>

08003aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003af0:	3204      	adds	r2, #4

08003af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003af4:	d3fb      	bcc.n	8003aee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003af6:	f00a feb7 	bl	800e868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003afa:	f7fe fd11 	bl	8002520 <main>
  bx  lr    
 8003afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b00:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b08:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8003b0c:	0800f020 	.word	0x0800f020
  ldr r2, =_sbss
 8003b10:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8003b14:	20070594 	.word	0x20070594

08003b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b18:	e7fe      	b.n	8003b18 <ADC_IRQHandler>

08003b1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b1e:	2003      	movs	r0, #3
 8003b20:	f000 fd70 	bl	8004604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b24:	2000      	movs	r0, #0
 8003b26:	f000 f805 	bl	8003b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b2a:	f7ff fac7 	bl	80030bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <HAL_InitTick+0x54>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <HAL_InitTick+0x58>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	4619      	mov	r1, r3
 8003b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fd8b 	bl	800466e <HAL_SYSTICK_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e00e      	b.n	8003b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b0f      	cmp	r3, #15
 8003b66:	d80a      	bhi.n	8003b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b70:	f000 fd53 	bl	800461a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b74:	4a06      	ldr	r2, [pc, #24]	@ (8003b90 <HAL_InitTick+0x5c>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	2000000c 	.word	0x2000000c
 8003b8c:	20000014 	.word	0x20000014
 8003b90:	20000010 	.word	0x20000010

08003b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b98:	4b06      	ldr	r3, [pc, #24]	@ (8003bb4 <HAL_IncTick+0x20>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <HAL_IncTick+0x24>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a04      	ldr	r2, [pc, #16]	@ (8003bb8 <HAL_IncTick+0x24>)
 8003ba6:	6013      	str	r3, [r2, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000014 	.word	0x20000014
 8003bb8:	2006ea88 	.word	0x2006ea88

08003bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <HAL_GetTick+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	2006ea88 	.word	0x2006ea88

08003bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bdc:	f7ff ffee 	bl	8003bbc <HAL_GetTick>
 8003be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d005      	beq.n	8003bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bee:	4b0a      	ldr	r3, [pc, #40]	@ (8003c18 <HAL_Delay+0x44>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bfa:	bf00      	nop
 8003bfc:	f7ff ffde 	bl	8003bbc <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d8f7      	bhi.n	8003bfc <HAL_Delay+0x28>
  {
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20000014 	.word	0x20000014

08003c1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e031      	b.n	8003c96 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fa62 	bl	8003104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d116      	bne.n	8003c88 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <HAL_ADC_Init+0x84>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	f043 0202 	orr.w	r2, r3, #2
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa7e 	bl	800416c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	f023 0303 	bic.w	r3, r3, #3
 8003c7e:	f043 0201 	orr.w	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c86:	e001      	b.n	8003c8c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	ffffeefd 	.word	0xffffeefd

08003ca4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_ADC_Start_DMA+0x1e>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e0d4      	b.n	8003e6c <HAL_ADC_Start_DMA+0x1c8>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d018      	beq.n	8003d0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003ce8:	4b62      	ldr	r3, [pc, #392]	@ (8003e74 <HAL_ADC_Start_DMA+0x1d0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a62      	ldr	r2, [pc, #392]	@ (8003e78 <HAL_ADC_Start_DMA+0x1d4>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0c9a      	lsrs	r2, r3, #18
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	4413      	add	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003cfc:	e002      	b.n	8003d04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d1f9      	bne.n	8003cfe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	f040 809c 	bne.w	8003e52 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d1e:	4b57      	ldr	r3, [pc, #348]	@ (8003e7c <HAL_ADC_Start_DMA+0x1d8>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003d40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d54:	d106      	bne.n	8003d64 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5a:	f023 0206 	bic.w	r2, r3, #6
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d62:	e002      	b.n	8003d6a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d76:	4a42      	ldr	r2, [pc, #264]	@ (8003e80 <HAL_ADC_Start_DMA+0x1dc>)
 8003d78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	4a41      	ldr	r2, [pc, #260]	@ (8003e84 <HAL_ADC_Start_DMA+0x1e0>)
 8003d80:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d86:	4a40      	ldr	r2, [pc, #256]	@ (8003e88 <HAL_ADC_Start_DMA+0x1e4>)
 8003d88:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003d92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003da2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	334c      	adds	r3, #76	@ 0x4c
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f000 fd0e 	bl	80047e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003dc8:	4b30      	ldr	r3, [pc, #192]	@ (8003e8c <HAL_ADC_Start_DMA+0x1e8>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10f      	bne.n	8003df4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d143      	bne.n	8003e6a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003df0:	609a      	str	r2, [r3, #8]
 8003df2:	e03a      	b.n	8003e6a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a25      	ldr	r2, [pc, #148]	@ (8003e90 <HAL_ADC_Start_DMA+0x1ec>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10e      	bne.n	8003e1c <HAL_ADC_Start_DMA+0x178>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d107      	bne.n	8003e1c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e1a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e8c <HAL_ADC_Start_DMA+0x1e8>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d120      	bne.n	8003e6a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a19      	ldr	r2, [pc, #100]	@ (8003e94 <HAL_ADC_Start_DMA+0x1f0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d11b      	bne.n	8003e6a <HAL_ADC_Start_DMA+0x1c6>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d114      	bne.n	8003e6a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e4e:	609a      	str	r2, [r3, #8]
 8003e50:	e00b      	b.n	8003e6a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	f043 0210 	orr.w	r2, r3, #16
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	f043 0201 	orr.w	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	2000000c 	.word	0x2000000c
 8003e78:	431bde83 	.word	0x431bde83
 8003e7c:	fffff8fe 	.word	0xfffff8fe
 8003e80:	08004361 	.word	0x08004361
 8003e84:	0800441b 	.word	0x0800441b
 8003e88:	08004437 	.word	0x08004437
 8003e8c:	40012300 	.word	0x40012300
 8003e90:	40012000 	.word	0x40012000
 8003e94:	40012200 	.word	0x40012200

08003e98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x1c>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e136      	b.n	800414a <HAL_ADC_ConfigChannel+0x28a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b09      	cmp	r3, #9
 8003eea:	d93a      	bls.n	8003f62 <HAL_ADC_ConfigChannel+0xa2>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ef4:	d035      	beq.n	8003f62 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68d9      	ldr	r1, [r3, #12]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	4613      	mov	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4413      	add	r3, r2
 8003f0a:	3b1e      	subs	r3, #30
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43da      	mvns	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	400a      	ands	r2, r1
 8003f1a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a8d      	ldr	r2, [pc, #564]	@ (8004158 <HAL_ADC_ConfigChannel+0x298>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10a      	bne.n	8003f3c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68d9      	ldr	r1, [r3, #12]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	061a      	lsls	r2, r3, #24
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f3a:	e035      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68d9      	ldr	r1, [r3, #12]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	4403      	add	r3, r0
 8003f54:	3b1e      	subs	r3, #30
 8003f56:	409a      	lsls	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f60:	e022      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6919      	ldr	r1, [r3, #16]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	4613      	mov	r3, r2
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4413      	add	r3, r2
 8003f76:	2207      	movs	r2, #7
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43da      	mvns	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	400a      	ands	r2, r1
 8003f84:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6919      	ldr	r1, [r3, #16]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	4618      	mov	r0, r3
 8003f98:	4603      	mov	r3, r0
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4403      	add	r3, r0
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b06      	cmp	r3, #6
 8003fae:	d824      	bhi.n	8003ffa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3b05      	subs	r3, #5
 8003fc2:	221f      	movs	r2, #31
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43da      	mvns	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	400a      	ands	r2, r1
 8003fd0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	4618      	mov	r0, r3
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	3b05      	subs	r3, #5
 8003fec:	fa00 f203 	lsl.w	r2, r0, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ff8:	e04c      	b.n	8004094 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b0c      	cmp	r3, #12
 8004000:	d824      	bhi.n	800404c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	3b23      	subs	r3, #35	@ 0x23
 8004014:	221f      	movs	r2, #31
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43da      	mvns	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	400a      	ands	r2, r1
 8004022:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	4618      	mov	r0, r3
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	3b23      	subs	r3, #35	@ 0x23
 800403e:	fa00 f203 	lsl.w	r2, r0, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	631a      	str	r2, [r3, #48]	@ 0x30
 800404a:	e023      	b.n	8004094 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	3b41      	subs	r3, #65	@ 0x41
 800405e:	221f      	movs	r2, #31
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43da      	mvns	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	400a      	ands	r2, r1
 800406c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	4618      	mov	r0, r3
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	3b41      	subs	r3, #65	@ 0x41
 8004088:	fa00 f203 	lsl.w	r2, r0, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a30      	ldr	r2, [pc, #192]	@ (800415c <HAL_ADC_ConfigChannel+0x29c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d10a      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x1f4>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040a6:	d105      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80040a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 80040ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80040b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a28      	ldr	r2, [pc, #160]	@ (800415c <HAL_ADC_ConfigChannel+0x29c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d10f      	bne.n	80040de <HAL_ADC_ConfigChannel+0x21e>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b12      	cmp	r3, #18
 80040c4:	d10b      	bne.n	80040de <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80040c6:	4b26      	ldr	r3, [pc, #152]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4a25      	ldr	r2, [pc, #148]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 80040cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80040d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80040d2:	4b23      	ldr	r3, [pc, #140]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4a22      	ldr	r2, [pc, #136]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 80040d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1e      	ldr	r2, [pc, #120]	@ (800415c <HAL_ADC_ConfigChannel+0x29c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d12b      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x280>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004158 <HAL_ADC_ConfigChannel+0x298>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d003      	beq.n	80040fa <HAL_ADC_ConfigChannel+0x23a>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b11      	cmp	r3, #17
 80040f8:	d122      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80040fa:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	4a18      	ldr	r2, [pc, #96]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 8004100:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004104:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004106:	4b16      	ldr	r3, [pc, #88]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4a15      	ldr	r2, [pc, #84]	@ (8004160 <HAL_ADC_ConfigChannel+0x2a0>)
 800410c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004110:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a10      	ldr	r2, [pc, #64]	@ (8004158 <HAL_ADC_ConfigChannel+0x298>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d111      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800411c:	4b11      	ldr	r3, [pc, #68]	@ (8004164 <HAL_ADC_ConfigChannel+0x2a4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a11      	ldr	r2, [pc, #68]	@ (8004168 <HAL_ADC_ConfigChannel+0x2a8>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	0c9a      	lsrs	r2, r3, #18
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004132:	e002      	b.n	800413a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3b01      	subs	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f9      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	10000012 	.word	0x10000012
 800415c:	40012000 	.word	0x40012000
 8004160:	40012300 	.word	0x40012300
 8004164:	2000000c 	.word	0x2000000c
 8004168:	431bde83 	.word	0x431bde83

0800416c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004174:	4b78      	ldr	r3, [pc, #480]	@ (8004358 <ADC_Init+0x1ec>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a77      	ldr	r2, [pc, #476]	@ (8004358 <ADC_Init+0x1ec>)
 800417a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800417e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004180:	4b75      	ldr	r3, [pc, #468]	@ (8004358 <ADC_Init+0x1ec>)
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4973      	ldr	r1, [pc, #460]	@ (8004358 <ADC_Init+0x1ec>)
 800418a:	4313      	orrs	r3, r2
 800418c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800419c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6859      	ldr	r1, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	021a      	lsls	r2, r3, #8
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80041c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6859      	ldr	r1, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6899      	ldr	r1, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	4a58      	ldr	r2, [pc, #352]	@ (800435c <ADC_Init+0x1f0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d022      	beq.n	8004246 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800420e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6899      	ldr	r1, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6899      	ldr	r1, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	609a      	str	r2, [r3, #8]
 8004244:	e00f      	b.n	8004266 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004264:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0202 	bic.w	r2, r2, #2
 8004274:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6899      	ldr	r1, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	005a      	lsls	r2, r3, #1
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01b      	beq.n	80042cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80042b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6859      	ldr	r1, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042be:	3b01      	subs	r3, #1
 80042c0:	035a      	lsls	r2, r3, #13
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	e007      	b.n	80042dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80042ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	051a      	lsls	r2, r3, #20
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6899      	ldr	r1, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800431e:	025a      	lsls	r2, r3, #9
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004336:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6899      	ldr	r1, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	029a      	lsls	r2, r3, #10
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	609a      	str	r2, [r3, #8]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40012300 	.word	0x40012300
 800435c:	0f000001 	.word	0x0f000001

08004360 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004376:	2b00      	cmp	r3, #0
 8004378:	d13c      	bne.n	80043f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d12b      	bne.n	80043ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004398:	2b00      	cmp	r3, #0
 800439a:	d127      	bne.n	80043ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d006      	beq.n	80043b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d119      	bne.n	80043ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0220 	bic.w	r2, r2, #32
 80043c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d105      	bne.n	80043ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	f043 0201 	orr.w	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7ff f9db 	bl	80037a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043f2:	e00e      	b.n	8004412 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7ff fd53 	bl	8003eac <HAL_ADC_ErrorCallback>
}
 8004406:	e004      	b.n	8004412 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	4798      	blx	r3
}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004426:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7ff fd35 	bl	8003e98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004442:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2240      	movs	r2, #64	@ 0x40
 8004448:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444e:	f043 0204 	orr.w	r2, r3, #4
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff fd28 	bl	8003eac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004480:	4013      	ands	r3, r2
 8004482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800448c:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <__NVIC_SetPriorityGrouping+0x44>)
 800448e:	4313      	orrs	r3, r2
 8004490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004492:	4a04      	ldr	r2, [pc, #16]	@ (80044a4 <__NVIC_SetPriorityGrouping+0x40>)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	60d3      	str	r3, [r2, #12]
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	e000ed00 	.word	0xe000ed00
 80044a8:	05fa0000 	.word	0x05fa0000

080044ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044b0:	4b04      	ldr	r3, [pc, #16]	@ (80044c4 <__NVIC_GetPriorityGrouping+0x18>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	f003 0307 	and.w	r3, r3, #7
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	db0b      	blt.n	80044f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	f003 021f 	and.w	r2, r3, #31
 80044e0:	4907      	ldr	r1, [pc, #28]	@ (8004500 <__NVIC_EnableIRQ+0x38>)
 80044e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e6:	095b      	lsrs	r3, r3, #5
 80044e8:	2001      	movs	r0, #1
 80044ea:	fa00 f202 	lsl.w	r2, r0, r2
 80044ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	e000e100 	.word	0xe000e100

08004504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	6039      	str	r1, [r7, #0]
 800450e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004514:	2b00      	cmp	r3, #0
 8004516:	db0a      	blt.n	800452e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	b2da      	uxtb	r2, r3
 800451c:	490c      	ldr	r1, [pc, #48]	@ (8004550 <__NVIC_SetPriority+0x4c>)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	0112      	lsls	r2, r2, #4
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	440b      	add	r3, r1
 8004528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800452c:	e00a      	b.n	8004544 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	4908      	ldr	r1, [pc, #32]	@ (8004554 <__NVIC_SetPriority+0x50>)
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	3b04      	subs	r3, #4
 800453c:	0112      	lsls	r2, r2, #4
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	440b      	add	r3, r1
 8004542:	761a      	strb	r2, [r3, #24]
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000e100 	.word	0xe000e100
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004558:	b480      	push	{r7}
 800455a:	b089      	sub	sp, #36	@ 0x24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 0307 	and.w	r3, r3, #7
 800456a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f1c3 0307 	rsb	r3, r3, #7
 8004572:	2b04      	cmp	r3, #4
 8004574:	bf28      	it	cs
 8004576:	2304      	movcs	r3, #4
 8004578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	3304      	adds	r3, #4
 800457e:	2b06      	cmp	r3, #6
 8004580:	d902      	bls.n	8004588 <NVIC_EncodePriority+0x30>
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	3b03      	subs	r3, #3
 8004586:	e000      	b.n	800458a <NVIC_EncodePriority+0x32>
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800458c:	f04f 32ff 	mov.w	r2, #4294967295
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	43da      	mvns	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	401a      	ands	r2, r3
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045a0:	f04f 31ff 	mov.w	r1, #4294967295
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	fa01 f303 	lsl.w	r3, r1, r3
 80045aa:	43d9      	mvns	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b0:	4313      	orrs	r3, r2
         );
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3724      	adds	r7, #36	@ 0x24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045d0:	d301      	bcc.n	80045d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045d2:	2301      	movs	r3, #1
 80045d4:	e00f      	b.n	80045f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004600 <SysTick_Config+0x40>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3b01      	subs	r3, #1
 80045dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045de:	210f      	movs	r1, #15
 80045e0:	f04f 30ff 	mov.w	r0, #4294967295
 80045e4:	f7ff ff8e 	bl	8004504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045e8:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <SysTick_Config+0x40>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045ee:	4b04      	ldr	r3, [pc, #16]	@ (8004600 <SysTick_Config+0x40>)
 80045f0:	2207      	movs	r2, #7
 80045f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	e000e010 	.word	0xe000e010

08004604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ff29 	bl	8004464 <__NVIC_SetPriorityGrouping>
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800461a:	b580      	push	{r7, lr}
 800461c:	b086      	sub	sp, #24
 800461e:	af00      	add	r7, sp, #0
 8004620:	4603      	mov	r3, r0
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800462c:	f7ff ff3e 	bl	80044ac <__NVIC_GetPriorityGrouping>
 8004630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	6978      	ldr	r0, [r7, #20]
 8004638:	f7ff ff8e 	bl	8004558 <NVIC_EncodePriority>
 800463c:	4602      	mov	r2, r0
 800463e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004642:	4611      	mov	r1, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff ff5d 	bl	8004504 <__NVIC_SetPriority>
}
 800464a:	bf00      	nop
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	4603      	mov	r3, r0
 800465a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800465c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff ff31 	bl	80044c8 <__NVIC_EnableIRQ>
}
 8004666:	bf00      	nop
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff ffa2 	bl	80045c0 <SysTick_Config>
 800467c:	4603      	mov	r3, r0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004694:	f7ff fa92 	bl	8003bbc <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e099      	b.n	80047d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046c4:	e00f      	b.n	80046e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046c6:	f7ff fa79 	bl	8003bbc <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b05      	cmp	r3, #5
 80046d2:	d908      	bls.n	80046e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2203      	movs	r2, #3
 80046de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e078      	b.n	80047d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e8      	bne.n	80046c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4b38      	ldr	r3, [pc, #224]	@ (80047e0 <HAL_DMA_Init+0x158>)
 8004700:	4013      	ands	r3, r2
 8004702:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004712:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800471e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800472a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	2b04      	cmp	r3, #4
 800473e:	d107      	bne.n	8004750 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	4313      	orrs	r3, r2
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f023 0307 	bic.w	r3, r3, #7
 8004766:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004776:	2b04      	cmp	r3, #4
 8004778:	d117      	bne.n	80047aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00e      	beq.n	80047aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fb09 	bl	8004da4 <DMA_CheckFifoParam>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2240      	movs	r2, #64	@ 0x40
 800479c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80047a6:	2301      	movs	r3, #1
 80047a8:	e016      	b.n	80047d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fac0 	bl	8004d38 <DMA_CalcBaseAndBitshift>
 80047b8:	4603      	mov	r3, r0
 80047ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c0:	223f      	movs	r2, #63	@ 0x3f
 80047c2:	409a      	lsls	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	e010803f 	.word	0xe010803f

080047e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_DMA_Start_IT+0x26>
 8004806:	2302      	movs	r3, #2
 8004808:	e048      	b.n	800489c <HAL_DMA_Start_IT+0xb8>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b01      	cmp	r3, #1
 800481c:	d137      	bne.n	800488e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2202      	movs	r2, #2
 8004822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fa52 	bl	8004cdc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483c:	223f      	movs	r2, #63	@ 0x3f
 800483e:	409a      	lsls	r2, r3
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0216 	orr.w	r2, r2, #22
 8004852:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004862:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0208 	orr.w	r2, r2, #8
 800487a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e005      	b.n	800489a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004896:	2302      	movs	r3, #2
 8004898:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048b2:	f7ff f983 	bl	8003bbc <HAL_GetTick>
 80048b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d008      	beq.n	80048d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2280      	movs	r2, #128	@ 0x80
 80048c8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e052      	b.n	800497c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0216 	bic.w	r2, r2, #22
 80048e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d103      	bne.n	8004906 <HAL_DMA_Abort+0x62>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0208 	bic.w	r2, r2, #8
 8004914:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004926:	e013      	b.n	8004950 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004928:	f7ff f948 	bl	8003bbc <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b05      	cmp	r3, #5
 8004934:	d90c      	bls.n	8004950 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2203      	movs	r2, #3
 8004940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e015      	b.n	800497c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e4      	bne.n	8004928 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004962:	223f      	movs	r2, #63	@ 0x3f
 8004964:	409a      	lsls	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d004      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2280      	movs	r2, #128	@ 0x80
 800499c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e00c      	b.n	80049bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2205      	movs	r2, #5
 80049a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80049d4:	4b8e      	ldr	r3, [pc, #568]	@ (8004c10 <HAL_DMA_IRQHandler+0x248>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a8e      	ldr	r2, [pc, #568]	@ (8004c14 <HAL_DMA_IRQHandler+0x24c>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	0a9b      	lsrs	r3, r3, #10
 80049e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f2:	2208      	movs	r2, #8
 80049f4:	409a      	lsls	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01a      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d013      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0204 	bic.w	r2, r2, #4
 8004a1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a20:	2208      	movs	r2, #8
 8004a22:	409a      	lsls	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2c:	f043 0201 	orr.w	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a38:	2201      	movs	r2, #1
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d012      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a56:	2201      	movs	r2, #1
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a62:	f043 0202 	orr.w	r2, r3, #2
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6e:	2204      	movs	r2, #4
 8004a70:	409a      	lsls	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d012      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00b      	beq.n	8004aa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	409a      	lsls	r2, r3
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a98:	f043 0204 	orr.w	r2, r3, #4
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	409a      	lsls	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d043      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d03c      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac2:	2210      	movs	r2, #16
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d018      	beq.n	8004b0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d108      	bne.n	8004af8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d024      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
 8004af6:	e01f      	b.n	8004b38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01b      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	4798      	blx	r3
 8004b08:	e016      	b.n	8004b38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d107      	bne.n	8004b28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0208 	bic.w	r2, r2, #8
 8004b26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 808f 	beq.w	8004c68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8087 	beq.w	8004c68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5e:	2220      	movs	r2, #32
 8004b60:	409a      	lsls	r2, r3
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d136      	bne.n	8004be0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0216 	bic.w	r2, r2, #22
 8004b80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695a      	ldr	r2, [r3, #20]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <HAL_DMA_IRQHandler+0x1da>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d007      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0208 	bic.w	r2, r2, #8
 8004bb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb6:	223f      	movs	r2, #63	@ 0x3f
 8004bb8:	409a      	lsls	r2, r3
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d07e      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	4798      	blx	r3
        }
        return;
 8004bde:	e079      	b.n	8004cd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01d      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10d      	bne.n	8004c18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d031      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	4798      	blx	r3
 8004c0c:	e02c      	b.n	8004c68 <HAL_DMA_IRQHandler+0x2a0>
 8004c0e:	bf00      	nop
 8004c10:	2000000c 	.word	0x2000000c
 8004c14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d023      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	4798      	blx	r3
 8004c28:	e01e      	b.n	8004c68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10f      	bne.n	8004c58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0210 	bic.w	r2, r2, #16
 8004c46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d003      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d032      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d022      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2205      	movs	r2, #5
 8004c80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0201 	bic.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	3301      	adds	r3, #1
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d307      	bcc.n	8004cb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f2      	bne.n	8004c94 <HAL_DMA_IRQHandler+0x2cc>
 8004cae:	e000      	b.n	8004cb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004cb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	4798      	blx	r3
 8004cd2:	e000      	b.n	8004cd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004cd4:	bf00      	nop
    }
  }
}
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cf8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b40      	cmp	r3, #64	@ 0x40
 8004d08:	d108      	bne.n	8004d1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d1a:	e007      	b.n	8004d2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]
}
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	3b10      	subs	r3, #16
 8004d48:	4a13      	ldr	r2, [pc, #76]	@ (8004d98 <DMA_CalcBaseAndBitshift+0x60>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d52:	4a12      	ldr	r2, [pc, #72]	@ (8004d9c <DMA_CalcBaseAndBitshift+0x64>)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d908      	bls.n	8004d78 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004da0 <DMA_CalcBaseAndBitshift+0x68>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	1d1a      	adds	r2, r3, #4
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d76:	e006      	b.n	8004d86 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b08      	ldr	r3, [pc, #32]	@ (8004da0 <DMA_CalcBaseAndBitshift+0x68>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	aaaaaaab 	.word	0xaaaaaaab
 8004d9c:	0800eec8 	.word	0x0800eec8
 8004da0:	fffffc00 	.word	0xfffffc00

08004da4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d11f      	bne.n	8004dfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d856      	bhi.n	8004e72 <DMA_CheckFifoParam+0xce>
 8004dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <DMA_CheckFifoParam+0x28>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004ddd 	.word	0x08004ddd
 8004dd0:	08004def 	.word	0x08004def
 8004dd4:	08004ddd 	.word	0x08004ddd
 8004dd8:	08004e73 	.word	0x08004e73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d046      	beq.n	8004e76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dec:	e043      	b.n	8004e76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004df6:	d140      	bne.n	8004e7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dfc:	e03d      	b.n	8004e7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e06:	d121      	bne.n	8004e4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d837      	bhi.n	8004e7e <DMA_CheckFifoParam+0xda>
 8004e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e14 <DMA_CheckFifoParam+0x70>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004e25 	.word	0x08004e25
 8004e18:	08004e2b 	.word	0x08004e2b
 8004e1c:	08004e25 	.word	0x08004e25
 8004e20:	08004e3d 	.word	0x08004e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
      break;
 8004e28:	e030      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d025      	beq.n	8004e82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3a:	e022      	b.n	8004e82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e44:	d11f      	bne.n	8004e86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e4a:	e01c      	b.n	8004e86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d903      	bls.n	8004e5a <DMA_CheckFifoParam+0xb6>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d003      	beq.n	8004e60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e58:	e018      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e5e:	e015      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00e      	beq.n	8004e8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e70:	e00b      	b.n	8004e8a <DMA_CheckFifoParam+0xe6>
      break;
 8004e72:	bf00      	nop
 8004e74:	e00a      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      break;
 8004e76:	bf00      	nop
 8004e78:	e008      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e006      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      break;
 8004e7e:	bf00      	nop
 8004e80:	e004      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      break;
 8004e82:	bf00      	nop
 8004e84:	e002      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      break;   
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <DMA_CheckFifoParam+0xe8>
      break;
 8004e8a:	bf00      	nop
    }
  } 
  
  return status; 
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop

08004e9c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e086      	b.n	8004fbc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2223      	movs	r2, #35	@ 0x23
 8004ebc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fe f993 	bl	80031ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fc4 <HAL_ETH_Init+0x128>)
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eca:	4a3e      	ldr	r2, [pc, #248]	@ (8004fc4 <HAL_ETH_Init+0x128>)
 8004ecc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8004fc4 <HAL_ETH_Init+0x128>)
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eda:	60bb      	str	r3, [r7, #8]
 8004edc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004ede:	4b3a      	ldr	r3, [pc, #232]	@ (8004fc8 <HAL_ETH_Init+0x12c>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4a39      	ldr	r2, [pc, #228]	@ (8004fc8 <HAL_ETH_Init+0x12c>)
 8004ee4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004ee8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004eea:	4b37      	ldr	r3, [pc, #220]	@ (8004fc8 <HAL_ETH_Init+0x12c>)
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	4935      	ldr	r1, [pc, #212]	@ (8004fc8 <HAL_ETH_Init+0x12c>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004ef8:	4b33      	ldr	r3, [pc, #204]	@ (8004fc8 <HAL_ETH_Init+0x12c>)
 8004efa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	f043 0301 	orr.w	r3, r3, #1
 8004f0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f14:	f7fe fe52 	bl	8003bbc <HAL_GetTick>
 8004f18:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004f1a:	e011      	b.n	8004f40 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004f1c:	f7fe fe4e 	bl	8003bbc <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004f2a:	d909      	bls.n	8004f40 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	22e0      	movs	r2, #224	@ 0xe0
 8004f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e03d      	b.n	8004fbc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e4      	bne.n	8004f1c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f97a 	bl	800524c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fa25 	bl	80053a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa7b 	bl	800545a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f9e3 	bl	8005338 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004f80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fcc <HAL_ETH_Init+0x130>)
 8004f90:	430b      	orrs	r3, r1
 8004f92:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004fa6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2210      	movs	r2, #16
 8004fb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40013800 	.word	0x40013800
 8004fcc:	00020060 	.word	0x00020060

08004fd0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4b53      	ldr	r3, [pc, #332]	@ (8005134 <ETH_SetMACConfig+0x164>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	7b9b      	ldrb	r3, [r3, #14]
 8004fee:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	7c12      	ldrb	r2, [r2, #16]
 8004ff4:	2a00      	cmp	r2, #0
 8004ff6:	d102      	bne.n	8004ffe <ETH_SetMACConfig+0x2e>
 8004ff8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ffc:	e000      	b.n	8005000 <ETH_SetMACConfig+0x30>
 8004ffe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005000:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	7c52      	ldrb	r2, [r2, #17]
 8005006:	2a00      	cmp	r2, #0
 8005008:	d102      	bne.n	8005010 <ETH_SetMACConfig+0x40>
 800500a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800500e:	e000      	b.n	8005012 <ETH_SetMACConfig+0x42>
 8005010:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005012:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005018:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	7fdb      	ldrb	r3, [r3, #31]
 800501e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005020:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005026:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	7f92      	ldrb	r2, [r2, #30]
 800502c:	2a00      	cmp	r2, #0
 800502e:	d102      	bne.n	8005036 <ETH_SetMACConfig+0x66>
 8005030:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005034:	e000      	b.n	8005038 <ETH_SetMACConfig+0x68>
 8005036:	2200      	movs	r2, #0
                        macconf->Speed |
 8005038:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	7f1b      	ldrb	r3, [r3, #28]
 800503e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005040:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005046:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	791b      	ldrb	r3, [r3, #4]
 800504c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800504e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005056:	2a00      	cmp	r2, #0
 8005058:	d102      	bne.n	8005060 <ETH_SetMACConfig+0x90>
 800505a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800505e:	e000      	b.n	8005062 <ETH_SetMACConfig+0x92>
 8005060:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005062:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	7bdb      	ldrb	r3, [r3, #15]
 8005068:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800506a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005070:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005078:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800507a:	4313      	orrs	r3, r2
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005092:	2001      	movs	r0, #1
 8005094:	f7fe fd9e 	bl	8003bd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80050ae:	4013      	ands	r3, r2
 80050b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80050be:	2a00      	cmp	r2, #0
 80050c0:	d101      	bne.n	80050c6 <ETH_SetMACConfig+0xf6>
 80050c2:	2280      	movs	r2, #128	@ 0x80
 80050c4:	e000      	b.n	80050c8 <ETH_SetMACConfig+0xf8>
 80050c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80050c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80050ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80050d6:	2a01      	cmp	r2, #1
 80050d8:	d101      	bne.n	80050de <ETH_SetMACConfig+0x10e>
 80050da:	2208      	movs	r2, #8
 80050dc:	e000      	b.n	80050e0 <ETH_SetMACConfig+0x110>
 80050de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80050e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80050e8:	2a01      	cmp	r2, #1
 80050ea:	d101      	bne.n	80050f0 <ETH_SetMACConfig+0x120>
 80050ec:	2204      	movs	r2, #4
 80050ee:	e000      	b.n	80050f2 <ETH_SetMACConfig+0x122>
 80050f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80050f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80050fa:	2a01      	cmp	r2, #1
 80050fc:	d101      	bne.n	8005102 <ETH_SetMACConfig+0x132>
 80050fe:	2202      	movs	r2, #2
 8005100:	e000      	b.n	8005104 <ETH_SetMACConfig+0x134>
 8005102:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005104:	4313      	orrs	r3, r2
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800511c:	2001      	movs	r0, #1
 800511e:	f7fe fd59 	bl	8003bd4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	619a      	str	r2, [r3, #24]
}
 800512a:	bf00      	nop
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	fd20810f 	.word	0xfd20810f

08005138 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4b3d      	ldr	r3, [pc, #244]	@ (8005248 <ETH_SetDMAConfig+0x110>)
 8005152:	4013      	ands	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	7b1b      	ldrb	r3, [r3, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <ETH_SetDMAConfig+0x2c>
 800515e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005162:	e000      	b.n	8005166 <ETH_SetDMAConfig+0x2e>
 8005164:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	7b5b      	ldrb	r3, [r3, #13]
 800516a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800516c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	7f52      	ldrb	r2, [r2, #29]
 8005172:	2a00      	cmp	r2, #0
 8005174:	d102      	bne.n	800517c <ETH_SetDMAConfig+0x44>
 8005176:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800517a:	e000      	b.n	800517e <ETH_SetDMAConfig+0x46>
 800517c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800517e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	7b9b      	ldrb	r3, [r3, #14]
 8005184:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005186:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800518c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	7f1b      	ldrb	r3, [r3, #28]
 8005192:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005194:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	7f9b      	ldrb	r3, [r3, #30]
 800519a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800519c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80051a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80051aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80051ac:	4313      	orrs	r3, r2
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051bc:	461a      	mov	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051ce:	2001      	movs	r0, #1
 80051d0:	f7fe fd00 	bl	8003bd4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051dc:	461a      	mov	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	791b      	ldrb	r3, [r3, #4]
 80051e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80051ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80051f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80051f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005200:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005202:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005208:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800520a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005210:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800521a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800521e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800522c:	2001      	movs	r0, #1
 800522e:	f7fe fcd1 	bl	8003bd4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800523a:	461a      	mov	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6013      	str	r3, [r2, #0]
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	f8de3f23 	.word	0xf8de3f23

0800524c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b0a6      	sub	sp, #152	@ 0x98
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005254:	2301      	movs	r3, #1
 8005256:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800525a:	2301      	movs	r3, #1
 800525c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005260:	2300      	movs	r3, #0
 8005262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005264:	2300      	movs	r3, #0
 8005266:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005270:	2300      	movs	r3, #0
 8005272:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005282:	2300      	movs	r3, #0
 8005284:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005288:	2300      	movs	r3, #0
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800528e:	2300      	movs	r3, #0
 8005290:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005292:	2300      	movs	r3, #0
 8005294:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005298:	2300      	movs	r3, #0
 800529a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800529c:	2300      	movs	r3, #0
 800529e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80052a2:	2300      	movs	r3, #0
 80052a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80052b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80052ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80052be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80052c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff fe7f 	bl	8004fd0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80052d2:	2301      	movs	r3, #1
 80052d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80052d6:	2301      	movs	r3, #1
 80052d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80052e0:	2301      	movs	r3, #1
 80052e2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80052f4:	2300      	movs	r3, #0
 80052f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80052fe:	2301      	movs	r3, #1
 8005300:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005302:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005306:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005308:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800530c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800530e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005312:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800531a:	2300      	movs	r3, #0
 800531c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005322:	f107 0308 	add.w	r3, r7, #8
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff ff05 	bl	8005138 <ETH_SetDMAConfig>
}
 800532e:	bf00      	nop
 8005330:	3798      	adds	r7, #152	@ 0x98
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3305      	adds	r3, #5
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	3204      	adds	r2, #4
 8005350:	7812      	ldrb	r2, [r2, #0]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	4b11      	ldr	r3, [pc, #68]	@ (80053a0 <ETH_MACAddressConfig+0x68>)
 800535a:	4413      	add	r3, r2
 800535c:	461a      	mov	r2, r3
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3303      	adds	r3, #3
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	061a      	lsls	r2, r3, #24
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3302      	adds	r3, #2
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	041b      	lsls	r3, r3, #16
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3301      	adds	r3, #1
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	4313      	orrs	r3, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	7812      	ldrb	r2, [r2, #0]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	4b06      	ldr	r3, [pc, #24]	@ (80053a4 <ETH_MACAddressConfig+0x6c>)
 800538a:	4413      	add	r3, r2
 800538c:	461a      	mov	r2, r3
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	6013      	str	r3, [r2, #0]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40028040 	.word	0x40028040
 80053a4:	40028044 	.word	0x40028044

080053a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	e03e      	b.n	8005434 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68d9      	ldr	r1, [r3, #12]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	440b      	add	r3, r1
 80053c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2200      	movs	r2, #0
 80053d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2200      	movs	r2, #0
 80053d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2200      	movs	r2, #0
 80053de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	3206      	adds	r2, #6
 80053e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d80c      	bhi.n	8005418 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68d9      	ldr	r1, [r3, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	4613      	mov	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	440b      	add	r3, r1
 8005410:	461a      	mov	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	60da      	str	r2, [r3, #12]
 8005416:	e004      	b.n	8005422 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	461a      	mov	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3301      	adds	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b03      	cmp	r3, #3
 8005438:	d9bd      	bls.n	80053b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800544c:	611a      	str	r2, [r3, #16]
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	e048      	b.n	80054fa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6919      	ldr	r1, [r3, #16]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4613      	mov	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	440b      	add	r3, r1
 8005478:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2200      	movs	r2, #0
 8005484:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2200      	movs	r2, #0
 800548a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2200      	movs	r2, #0
 8005490:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2200      	movs	r2, #0
 8005496:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2200      	movs	r2, #0
 800549c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80054a4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	3212      	adds	r2, #18
 80054c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d80c      	bhi.n	80054ea <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6919      	ldr	r1, [r3, #16]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1c5a      	adds	r2, r3, #1
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	440b      	add	r3, r1
 80054e2:	461a      	mov	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	60da      	str	r2, [r3, #12]
 80054e8:	e004      	b.n	80054f4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	461a      	mov	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3301      	adds	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d9b3      	bls.n	8005468 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691a      	ldr	r2, [r3, #16]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800552a:	60da      	str	r2, [r3, #12]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005538:	b480      	push	{r7}
 800553a:	b089      	sub	sp, #36	@ 0x24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800554e:	2300      	movs	r3, #0
 8005550:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005552:	2300      	movs	r3, #0
 8005554:	61fb      	str	r3, [r7, #28]
 8005556:	e175      	b.n	8005844 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005558:	2201      	movs	r2, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4013      	ands	r3, r2
 800556a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	429a      	cmp	r2, r3
 8005572:	f040 8164 	bne.w	800583e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b01      	cmp	r3, #1
 8005580:	d005      	beq.n	800558e <HAL_GPIO_Init+0x56>
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d130      	bne.n	80055f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	2203      	movs	r2, #3
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43db      	mvns	r3, r3
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	4013      	ands	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	fa02 f303 	lsl.w	r3, r2, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055c4:	2201      	movs	r2, #1
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	43db      	mvns	r3, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4013      	ands	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	091b      	lsrs	r3, r3, #4
 80055da:	f003 0201 	and.w	r2, r3, #1
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	69ba      	ldr	r2, [r7, #24]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d017      	beq.n	800562c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	2203      	movs	r2, #3
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4013      	ands	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4313      	orrs	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d123      	bne.n	8005680 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	08da      	lsrs	r2, r3, #3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3208      	adds	r2, #8
 8005640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	220f      	movs	r2, #15
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	43db      	mvns	r3, r3
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	4013      	ands	r3, r2
 800565a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	fa02 f303 	lsl.w	r3, r2, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4313      	orrs	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	08da      	lsrs	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3208      	adds	r2, #8
 800567a:	69b9      	ldr	r1, [r7, #24]
 800567c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	2203      	movs	r2, #3
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	43db      	mvns	r3, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4013      	ands	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f003 0203 	and.w	r2, r3, #3
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 80be 	beq.w	800583e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056c2:	4b66      	ldr	r3, [pc, #408]	@ (800585c <HAL_GPIO_Init+0x324>)
 80056c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c6:	4a65      	ldr	r2, [pc, #404]	@ (800585c <HAL_GPIO_Init+0x324>)
 80056c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80056ce:	4b63      	ldr	r3, [pc, #396]	@ (800585c <HAL_GPIO_Init+0x324>)
 80056d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80056da:	4a61      	ldr	r2, [pc, #388]	@ (8005860 <HAL_GPIO_Init+0x328>)
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	089b      	lsrs	r3, r3, #2
 80056e0:	3302      	adds	r3, #2
 80056e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	220f      	movs	r2, #15
 80056f2:	fa02 f303 	lsl.w	r3, r2, r3
 80056f6:	43db      	mvns	r3, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4013      	ands	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a58      	ldr	r2, [pc, #352]	@ (8005864 <HAL_GPIO_Init+0x32c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d037      	beq.n	8005776 <HAL_GPIO_Init+0x23e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a57      	ldr	r2, [pc, #348]	@ (8005868 <HAL_GPIO_Init+0x330>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d031      	beq.n	8005772 <HAL_GPIO_Init+0x23a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a56      	ldr	r2, [pc, #344]	@ (800586c <HAL_GPIO_Init+0x334>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d02b      	beq.n	800576e <HAL_GPIO_Init+0x236>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a55      	ldr	r2, [pc, #340]	@ (8005870 <HAL_GPIO_Init+0x338>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d025      	beq.n	800576a <HAL_GPIO_Init+0x232>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a54      	ldr	r2, [pc, #336]	@ (8005874 <HAL_GPIO_Init+0x33c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01f      	beq.n	8005766 <HAL_GPIO_Init+0x22e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a53      	ldr	r2, [pc, #332]	@ (8005878 <HAL_GPIO_Init+0x340>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d019      	beq.n	8005762 <HAL_GPIO_Init+0x22a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a52      	ldr	r2, [pc, #328]	@ (800587c <HAL_GPIO_Init+0x344>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <HAL_GPIO_Init+0x226>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a51      	ldr	r2, [pc, #324]	@ (8005880 <HAL_GPIO_Init+0x348>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00d      	beq.n	800575a <HAL_GPIO_Init+0x222>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a50      	ldr	r2, [pc, #320]	@ (8005884 <HAL_GPIO_Init+0x34c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d007      	beq.n	8005756 <HAL_GPIO_Init+0x21e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a4f      	ldr	r2, [pc, #316]	@ (8005888 <HAL_GPIO_Init+0x350>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d101      	bne.n	8005752 <HAL_GPIO_Init+0x21a>
 800574e:	2309      	movs	r3, #9
 8005750:	e012      	b.n	8005778 <HAL_GPIO_Init+0x240>
 8005752:	230a      	movs	r3, #10
 8005754:	e010      	b.n	8005778 <HAL_GPIO_Init+0x240>
 8005756:	2308      	movs	r3, #8
 8005758:	e00e      	b.n	8005778 <HAL_GPIO_Init+0x240>
 800575a:	2307      	movs	r3, #7
 800575c:	e00c      	b.n	8005778 <HAL_GPIO_Init+0x240>
 800575e:	2306      	movs	r3, #6
 8005760:	e00a      	b.n	8005778 <HAL_GPIO_Init+0x240>
 8005762:	2305      	movs	r3, #5
 8005764:	e008      	b.n	8005778 <HAL_GPIO_Init+0x240>
 8005766:	2304      	movs	r3, #4
 8005768:	e006      	b.n	8005778 <HAL_GPIO_Init+0x240>
 800576a:	2303      	movs	r3, #3
 800576c:	e004      	b.n	8005778 <HAL_GPIO_Init+0x240>
 800576e:	2302      	movs	r3, #2
 8005770:	e002      	b.n	8005778 <HAL_GPIO_Init+0x240>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <HAL_GPIO_Init+0x240>
 8005776:	2300      	movs	r3, #0
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	f002 0203 	and.w	r2, r2, #3
 800577e:	0092      	lsls	r2, r2, #2
 8005780:	4093      	lsls	r3, r2
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	4313      	orrs	r3, r2
 8005786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005788:	4935      	ldr	r1, [pc, #212]	@ (8005860 <HAL_GPIO_Init+0x328>)
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	089b      	lsrs	r3, r3, #2
 800578e:	3302      	adds	r3, #2
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005796:	4b3d      	ldr	r3, [pc, #244]	@ (800588c <HAL_GPIO_Init+0x354>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	43db      	mvns	r3, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4013      	ands	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057ba:	4a34      	ldr	r2, [pc, #208]	@ (800588c <HAL_GPIO_Init+0x354>)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057c0:	4b32      	ldr	r3, [pc, #200]	@ (800588c <HAL_GPIO_Init+0x354>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	43db      	mvns	r3, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4013      	ands	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057e4:	4a29      	ldr	r2, [pc, #164]	@ (800588c <HAL_GPIO_Init+0x354>)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057ea:	4b28      	ldr	r3, [pc, #160]	@ (800588c <HAL_GPIO_Init+0x354>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800580e:	4a1f      	ldr	r2, [pc, #124]	@ (800588c <HAL_GPIO_Init+0x354>)
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005814:	4b1d      	ldr	r3, [pc, #116]	@ (800588c <HAL_GPIO_Init+0x354>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	43db      	mvns	r3, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4013      	ands	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005838:	4a14      	ldr	r2, [pc, #80]	@ (800588c <HAL_GPIO_Init+0x354>)
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	3301      	adds	r3, #1
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	2b0f      	cmp	r3, #15
 8005848:	f67f ae86 	bls.w	8005558 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	3724      	adds	r7, #36	@ 0x24
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40023800 	.word	0x40023800
 8005860:	40013800 	.word	0x40013800
 8005864:	40020000 	.word	0x40020000
 8005868:	40020400 	.word	0x40020400
 800586c:	40020800 	.word	0x40020800
 8005870:	40020c00 	.word	0x40020c00
 8005874:	40021000 	.word	0x40021000
 8005878:	40021400 	.word	0x40021400
 800587c:	40021800 	.word	0x40021800
 8005880:	40021c00 	.word	0x40021c00
 8005884:	40022000 	.word	0x40022000
 8005888:	40022400 	.word	0x40022400
 800588c:	40013c00 	.word	0x40013c00

08005890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	807b      	strh	r3, [r7, #2]
 800589c:	4613      	mov	r3, r2
 800589e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058a0:	787b      	ldrb	r3, [r7, #1]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058a6:	887a      	ldrh	r2, [r7, #2]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80058ac:	e003      	b.n	80058b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80058ae:	887b      	ldrh	r3, [r7, #2]
 80058b0:	041a      	lsls	r2, r3, #16
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	619a      	str	r2, [r3, #24]
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b085      	sub	sp, #20
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	460b      	mov	r3, r1
 80058cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058d4:	887a      	ldrh	r2, [r7, #2]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4013      	ands	r3, r2
 80058da:	041a      	lsls	r2, r3, #16
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	43d9      	mvns	r1, r3
 80058e0:	887b      	ldrh	r3, [r7, #2]
 80058e2:	400b      	ands	r3, r1
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	619a      	str	r2, [r3, #24]
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b086      	sub	sp, #24
 80058fa:	af02      	add	r7, sp, #8
 80058fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e108      	b.n	8005b1a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f008 fb46 	bl	800dfb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2203      	movs	r2, #3
 800592c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005936:	d102      	bne.n	800593e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f004 feef 	bl	800a726 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	7c1a      	ldrb	r2, [r3, #16]
 8005950:	f88d 2000 	strb.w	r2, [sp]
 8005954:	3304      	adds	r3, #4
 8005956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005958:	f004 fdd8 	bl	800a50c <USB_CoreInit>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0d5      	b.n	8005b1a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2100      	movs	r1, #0
 8005974:	4618      	mov	r0, r3
 8005976:	f004 fee7 	bl	800a748 <USB_SetCurrentMode>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e0c6      	b.n	8005b1a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800598c:	2300      	movs	r3, #0
 800598e:	73fb      	strb	r3, [r7, #15]
 8005990:	e04a      	b.n	8005a28 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005992:	7bfa      	ldrb	r2, [r7, #15]
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	3315      	adds	r3, #21
 80059a2:	2201      	movs	r2, #1
 80059a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059a6:	7bfa      	ldrb	r2, [r7, #15]
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	3314      	adds	r3, #20
 80059b6:	7bfa      	ldrb	r2, [r7, #15]
 80059b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059ba:	7bfa      	ldrb	r2, [r7, #15]
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	b298      	uxth	r0, r3
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	332e      	adds	r3, #46	@ 0x2e
 80059ce:	4602      	mov	r2, r0
 80059d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80059d2:	7bfa      	ldrb	r2, [r7, #15]
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	3318      	adds	r3, #24
 80059e2:	2200      	movs	r2, #0
 80059e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80059e6:	7bfa      	ldrb	r2, [r7, #15]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	331c      	adds	r3, #28
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059fa:	7bfa      	ldrb	r2, [r7, #15]
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	3320      	adds	r3, #32
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a0e:	7bfa      	ldrb	r2, [r7, #15]
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	4613      	mov	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	3324      	adds	r3, #36	@ 0x24
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	3301      	adds	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	791b      	ldrb	r3, [r3, #4]
 8005a2c:	7bfa      	ldrb	r2, [r7, #15]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d3af      	bcc.n	8005992 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	73fb      	strb	r3, [r7, #15]
 8005a36:	e044      	b.n	8005ac2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a38:	7bfa      	ldrb	r2, [r7, #15]
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a4e:	7bfa      	ldrb	r2, [r7, #15]
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005a60:	7bfa      	ldrb	r2, [r7, #15]
 8005a62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a64:	7bfa      	ldrb	r2, [r7, #15]
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005a76:	2200      	movs	r2, #0
 8005a78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a7a:	7bfa      	ldrb	r2, [r7, #15]
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	440b      	add	r3, r1
 8005a88:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a90:	7bfa      	ldrb	r2, [r7, #15]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4613      	mov	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005aa6:	7bfa      	ldrb	r2, [r7, #15]
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	73fb      	strb	r3, [r7, #15]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	791b      	ldrb	r3, [r3, #4]
 8005ac6:	7bfa      	ldrb	r2, [r7, #15]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d3b5      	bcc.n	8005a38 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6818      	ldr	r0, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	7c1a      	ldrb	r2, [r3, #16]
 8005ad4:	f88d 2000 	strb.w	r2, [sp]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005adc:	f004 fe80 	bl	800a7e0 <USB_DevInit>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2202      	movs	r2, #2
 8005aea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e013      	b.n	8005b1a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	7b1b      	ldrb	r3, [r3, #12]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d102      	bne.n	8005b0e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 f959 	bl	8006dc0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f005 febf 	bl	800b896 <USB_DevDisconnect>

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_PCD_Start+0x16>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e012      	b.n	8005b5e <HAL_PCD_Start+0x3c>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f004 fddd 	bl	800a704 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f005 fe80 	bl	800b854 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005b66:	b590      	push	{r4, r7, lr}
 8005b68:	b08d      	sub	sp, #52	@ 0x34
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f005 ff3e 	bl	800b9fe <USB_GetMode>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 84b9 	bne.w	80064fc <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f005 fea2 	bl	800b8d8 <USB_ReadInterrupts>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 84af 	beq.w	80064fa <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	0a1b      	lsrs	r3, r3, #8
 8005ba6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f005 fe8f 	bl	800b8d8 <USB_ReadInterrupts>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d107      	bne.n	8005bd4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695a      	ldr	r2, [r3, #20]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f002 0202 	and.w	r2, r2, #2
 8005bd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f005 fe7d 	bl	800b8d8 <USB_ReadInterrupts>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	2b10      	cmp	r3, #16
 8005be6:	d161      	bne.n	8005cac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0210 	bic.w	r2, r2, #16
 8005bf6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f003 020f 	and.w	r2, r3, #15
 8005c04:	4613      	mov	r3, r2
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	4413      	add	r3, r2
 8005c14:	3304      	adds	r3, #4
 8005c16:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	0c5b      	lsrs	r3, r3, #17
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d124      	bne.n	8005c6e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d035      	beq.n	8005c9c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	091b      	lsrs	r3, r3, #4
 8005c38:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	6a38      	ldr	r0, [r7, #32]
 8005c44:	f005 fcb4 	bl	800b5b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	091b      	lsrs	r3, r3, #4
 8005c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c54:	441a      	add	r2, r3
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	695a      	ldr	r2, [r3, #20]
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	091b      	lsrs	r3, r3, #4
 8005c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c66:	441a      	add	r2, r3
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	615a      	str	r2, [r3, #20]
 8005c6c:	e016      	b.n	8005c9c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	0c5b      	lsrs	r3, r3, #17
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	2b06      	cmp	r3, #6
 8005c78:	d110      	bne.n	8005c9c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c80:	2208      	movs	r2, #8
 8005c82:	4619      	mov	r1, r3
 8005c84:	6a38      	ldr	r0, [r7, #32]
 8005c86:	f005 fc93 	bl	800b5b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	695a      	ldr	r2, [r3, #20]
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c96:	441a      	add	r2, r3
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0210 	orr.w	r2, r2, #16
 8005caa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f005 fe11 	bl	800b8d8 <USB_ReadInterrupts>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cbc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005cc0:	f040 80a7 	bne.w	8005e12 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f005 fe16 	bl	800b8fe <USB_ReadDevAllOutEpInterrupt>
 8005cd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005cd4:	e099      	b.n	8005e0a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 808e 	beq.w	8005dfe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f005 fe3a 	bl	800b966 <USB_ReadDevOutEPInterrupt>
 8005cf2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00c      	beq.n	8005d18 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005d10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fece 	bl	8006ab4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00c      	beq.n	8005d3c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d2e:	461a      	mov	r2, r3
 8005d30:	2308      	movs	r3, #8
 8005d32:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005d34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 ffa4 	bl	8006c84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f003 0310 	and.w	r3, r3, #16
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d52:	461a      	mov	r2, r3
 8005d54:	2310      	movs	r3, #16
 8005d56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d030      	beq.n	8005dc4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6a:	2b80      	cmp	r3, #128	@ 0x80
 8005d6c:	d109      	bne.n	8005d82 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d80:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d84:	4613      	mov	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	4413      	add	r3, r2
 8005d94:	3304      	adds	r3, #4
 8005d96:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	78db      	ldrb	r3, [r3, #3]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d108      	bne.n	8005db2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	2200      	movs	r2, #0
 8005da4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f008 fa35 	bl	800e21c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d008      	beq.n	8005de0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dda:	461a      	mov	r2, r3
 8005ddc:	2320      	movs	r3, #32
 8005dde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df6:	461a      	mov	r2, r3
 8005df8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005dfc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e00:	3301      	adds	r3, #1
 8005e02:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f47f af62 	bne.w	8005cd6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f005 fd5e 	bl	800b8d8 <USB_ReadInterrupts>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e26:	f040 80db 	bne.w	8005fe0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f005 fd7f 	bl	800b932 <USB_ReadDevAllInEpInterrupt>
 8005e34:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005e3a:	e0cd      	b.n	8005fd8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80c2 	beq.w	8005fcc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e4e:	b2d2      	uxtb	r2, r2
 8005e50:	4611      	mov	r1, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f005 fda5 	bl	800b9a2 <USB_ReadDevInEPInterrupt>
 8005e58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d057      	beq.n	8005f14 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	69f9      	ldr	r1, [r7, #28]
 8005e80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e84:	4013      	ands	r3, r2
 8005e86:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e94:	461a      	mov	r2, r3
 8005e96:	2301      	movs	r3, #1
 8005e98:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	799b      	ldrb	r3, [r3, #6]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d132      	bne.n	8005f08 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	3320      	adds	r3, #32
 8005eb2:	6819      	ldr	r1, [r3, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb8:	4613      	mov	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4403      	add	r3, r0
 8005ec2:	331c      	adds	r3, #28
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4419      	add	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ecc:	4613      	mov	r3, r2
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4403      	add	r3, r0
 8005ed6:	3320      	adds	r3, #32
 8005ed8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d113      	bne.n	8005f08 <HAL_PCD_IRQHandler+0x3a2>
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	3324      	adds	r3, #36	@ 0x24
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d108      	bne.n	8005f08 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f00:	461a      	mov	r2, r3
 8005f02:	2101      	movs	r1, #1
 8005f04:	f005 fdae 	bl	800ba64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f008 f8ff 	bl	800e112 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d008      	beq.n	8005f30 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f003 0310 	and.w	r3, r3, #16
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d008      	beq.n	8005f4c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f46:	461a      	mov	r2, r3
 8005f48:	2310      	movs	r3, #16
 8005f4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f62:	461a      	mov	r2, r3
 8005f64:	2340      	movs	r3, #64	@ 0x40
 8005f66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d023      	beq.n	8005fba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005f72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f74:	6a38      	ldr	r0, [r7, #32]
 8005f76:	f004 fd91 	bl	800aa9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	3310      	adds	r3, #16
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	4413      	add	r3, r2
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	78db      	ldrb	r3, [r3, #3]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d108      	bne.n	8005fa8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f008 f94c 	bl	800e240 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005fc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fce8 	bl	800699c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	3301      	adds	r3, #1
 8005fd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd4:	085b      	lsrs	r3, r3, #1
 8005fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f47f af2e 	bne.w	8005e3c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f005 fc77 	bl	800b8d8 <USB_ReadInterrupts>
 8005fea:	4603      	mov	r3, r0
 8005fec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ff4:	d122      	bne.n	800603c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006004:	f023 0301 	bic.w	r3, r3, #1
 8006008:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006010:	2b01      	cmp	r3, #1
 8006012:	d108      	bne.n	8006026 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800601c:	2100      	movs	r1, #0
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f008 fac6 	bl	800e5b0 <HAL_PCDEx_LPM_Callback>
 8006024:	e002      	b.n	800602c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f008 f8ea 	bl	800e200 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800603a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f005 fc49 	bl	800b8d8 <USB_ReadInterrupts>
 8006046:	4603      	mov	r3, r0
 8006048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800604c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006050:	d112      	bne.n	8006078 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b01      	cmp	r3, #1
 8006060:	d102      	bne.n	8006068 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f008 f8a6 	bl	800e1b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006076:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f005 fc2b 	bl	800b8d8 <USB_ReadInterrupts>
 8006082:	4603      	mov	r3, r0
 8006084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006088:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800608c:	d121      	bne.n	80060d2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695a      	ldr	r2, [r3, #20]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800609c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d111      	bne.n	80060cc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060b6:	089b      	lsrs	r3, r3, #2
 80060b8:	f003 020f 	and.w	r2, r3, #15
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80060c2:	2101      	movs	r1, #1
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f008 fa73 	bl	800e5b0 <HAL_PCDEx_LPM_Callback>
 80060ca:	e002      	b.n	80060d2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f008 f871 	bl	800e1b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f005 fbfe 	bl	800b8d8 <USB_ReadInterrupts>
 80060dc:	4603      	mov	r3, r0
 80060de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060e6:	f040 80b7 	bne.w	8006258 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2110      	movs	r1, #16
 8006104:	4618      	mov	r0, r3
 8006106:	f004 fcc9 	bl	800aa9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800610a:	2300      	movs	r3, #0
 800610c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800610e:	e046      	b.n	800619e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	4413      	add	r3, r2
 8006118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800611c:	461a      	mov	r2, r3
 800611e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006122:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800613e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006142:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006150:	461a      	mov	r2, r3
 8006152:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006156:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	440a      	add	r2, r1
 800616e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006172:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006176:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006192:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006196:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619a:	3301      	adds	r3, #1
 800619c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	791b      	ldrb	r3, [r3, #4]
 80061a2:	461a      	mov	r2, r3
 80061a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d3b2      	bcc.n	8006110 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061b8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80061bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	7bdb      	ldrb	r3, [r3, #15]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d016      	beq.n	80061f4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061d6:	f043 030b 	orr.w	r3, r3, #11
 80061da:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061ec:	f043 030b 	orr.w	r3, r3, #11
 80061f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80061f2:	e015      	b.n	8006220 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061fa:	695a      	ldr	r2, [r3, #20]
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006202:	4619      	mov	r1, r3
 8006204:	f242 032b 	movw	r3, #8235	@ 0x202b
 8006208:	4313      	orrs	r3, r2
 800620a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800621a:	f043 030b 	orr.w	r3, r3, #11
 800621e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800622e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006232:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6818      	ldr	r0, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006242:	461a      	mov	r2, r3
 8006244:	f005 fc0e 	bl	800ba64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006256:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f005 fb3b 	bl	800b8d8 <USB_ReadInterrupts>
 8006262:	4603      	mov	r3, r0
 8006264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800626c:	d123      	bne.n	80062b6 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f005 fbd2 	bl	800ba1c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f004 fc86 	bl	800ab8e <USB_GetDevSpeed>
 8006282:	4603      	mov	r3, r0
 8006284:	461a      	mov	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681c      	ldr	r4, [r3, #0]
 800628e:	f001 fabb 	bl	8007808 <HAL_RCC_GetHCLKFreq>
 8006292:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006298:	461a      	mov	r2, r3
 800629a:	4620      	mov	r0, r4
 800629c:	f004 f990 	bl	800a5c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f007 ff5e 	bl	800e162 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	695a      	ldr	r2, [r3, #20]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80062b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f005 fb0c 	bl	800b8d8 <USB_ReadInterrupts>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f003 0308 	and.w	r3, r3, #8
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d10a      	bne.n	80062e0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f007 ff3b 	bl	800e146 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695a      	ldr	r2, [r3, #20]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f002 0208 	and.w	r2, r2, #8
 80062de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f005 faf7 	bl	800b8d8 <USB_ReadInterrupts>
 80062ea:	4603      	mov	r3, r0
 80062ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f0:	2b80      	cmp	r3, #128	@ 0x80
 80062f2:	d123      	bne.n	800633c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006300:	2301      	movs	r3, #1
 8006302:	627b      	str	r3, [r7, #36]	@ 0x24
 8006304:	e014      	b.n	8006330 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630a:	4613      	mov	r3, r2
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d105      	bne.n	800632a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	b2db      	uxtb	r3, r3
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fb08 	bl	800693a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	3301      	adds	r3, #1
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	791b      	ldrb	r3, [r3, #4]
 8006334:	461a      	mov	r2, r3
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	4293      	cmp	r3, r2
 800633a:	d3e4      	bcc.n	8006306 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4618      	mov	r0, r3
 8006342:	f005 fac9 	bl	800b8d8 <USB_ReadInterrupts>
 8006346:	4603      	mov	r3, r0
 8006348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800634c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006350:	d13c      	bne.n	80063cc <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006352:	2301      	movs	r3, #1
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
 8006356:	e02b      	b.n	80063b0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636c:	4613      	mov	r3, r2
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	4413      	add	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	3318      	adds	r3, #24
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d115      	bne.n	80063aa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800637e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006380:	2b00      	cmp	r3, #0
 8006382:	da12      	bge.n	80063aa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	3317      	adds	r3, #23
 8006394:	2201      	movs	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fac8 	bl	800693a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	3301      	adds	r3, #1
 80063ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	791b      	ldrb	r3, [r3, #4]
 80063b4:	461a      	mov	r2, r3
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d3cd      	bcc.n	8006358 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695a      	ldr	r2, [r3, #20]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80063ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f005 fa81 	bl	800b8d8 <USB_ReadInterrupts>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063e0:	d156      	bne.n	8006490 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063e2:	2301      	movs	r3, #1
 80063e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80063e6:	e045      	b.n	8006474 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fc:	4613      	mov	r3, r2
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d12e      	bne.n	800646e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006410:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006412:	2b00      	cmp	r3, #0
 8006414:	da2b      	bge.n	800646e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006422:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006426:	429a      	cmp	r2, r3
 8006428:	d121      	bne.n	800646e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642e:	4613      	mov	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	440b      	add	r3, r1
 8006438:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800643c:	2201      	movs	r2, #1
 800643e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006466:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800646a:	6053      	str	r3, [r2, #4]
            break;
 800646c:	e008      	b.n	8006480 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800646e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006470:	3301      	adds	r3, #1
 8006472:	627b      	str	r3, [r7, #36]	@ 0x24
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	791b      	ldrb	r3, [r3, #4]
 8006478:	461a      	mov	r2, r3
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	4293      	cmp	r3, r2
 800647e:	d3b3      	bcc.n	80063e8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800648e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f005 fa1f 	bl	800b8d8 <USB_ReadInterrupts>
 800649a:	4603      	mov	r3, r0
 800649c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80064a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a4:	d10a      	bne.n	80064bc <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f007 fedc 	bl	800e264 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80064ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f005 fa09 	bl	800b8d8 <USB_ReadInterrupts>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d115      	bne.n	80064fc <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f007 fecc 	bl	800e280 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6859      	ldr	r1, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]
 80064f8:	e000      	b.n	80064fc <HAL_PCD_IRQHandler+0x996>
      return;
 80064fa:	bf00      	nop
    }
  }
}
 80064fc:	3734      	adds	r7, #52	@ 0x34
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd90      	pop	{r4, r7, pc}

08006502 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	460b      	mov	r3, r1
 800650c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_PCD_SetAddress+0x1a>
 8006518:	2302      	movs	r3, #2
 800651a:	e012      	b.n	8006542 <HAL_PCD_SetAddress+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	78fa      	ldrb	r2, [r7, #3]
 8006528:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	78fa      	ldrb	r2, [r7, #3]
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f005 f968 	bl	800b808 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	4608      	mov	r0, r1
 8006554:	4611      	mov	r1, r2
 8006556:	461a      	mov	r2, r3
 8006558:	4603      	mov	r3, r0
 800655a:	70fb      	strb	r3, [r7, #3]
 800655c:	460b      	mov	r3, r1
 800655e:	803b      	strh	r3, [r7, #0]
 8006560:	4613      	mov	r3, r2
 8006562:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006568:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800656c:	2b00      	cmp	r3, #0
 800656e:	da0f      	bge.n	8006590 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	f003 020f 	and.w	r2, r3, #15
 8006576:	4613      	mov	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	3310      	adds	r3, #16
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	4413      	add	r3, r2
 8006584:	3304      	adds	r3, #4
 8006586:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	705a      	strb	r2, [r3, #1]
 800658e:	e00f      	b.n	80065b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006590:	78fb      	ldrb	r3, [r7, #3]
 8006592:	f003 020f 	and.w	r2, r3, #15
 8006596:	4613      	mov	r3, r2
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	4413      	add	r3, r2
 80065a6:	3304      	adds	r3, #4
 80065a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80065bc:	883a      	ldrh	r2, [r7, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	78ba      	ldrb	r2, [r7, #2]
 80065c6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	785b      	ldrb	r3, [r3, #1]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d004      	beq.n	80065da <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80065da:	78bb      	ldrb	r3, [r7, #2]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d102      	bne.n	80065e6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_PCD_EP_Open+0xaa>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e00e      	b.n	8006612 <HAL_PCD_EP_Open+0xc8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68f9      	ldr	r1, [r7, #12]
 8006602:	4618      	mov	r0, r3
 8006604:	f004 fae8 	bl	800abd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006610:	7afb      	ldrb	r3, [r7, #11]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800662a:	2b00      	cmp	r3, #0
 800662c:	da0f      	bge.n	800664e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	f003 020f 	and.w	r2, r3, #15
 8006634:	4613      	mov	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	3310      	adds	r3, #16
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	4413      	add	r3, r2
 8006642:	3304      	adds	r3, #4
 8006644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	705a      	strb	r2, [r3, #1]
 800664c:	e00f      	b.n	800666e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	f003 020f 	and.w	r2, r3, #15
 8006654:	4613      	mov	r3, r2
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	4413      	add	r3, r2
 8006664:	3304      	adds	r3, #4
 8006666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800666e:	78fb      	ldrb	r3, [r7, #3]
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	b2da      	uxtb	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_PCD_EP_Close+0x6e>
 8006684:	2302      	movs	r3, #2
 8006686:	e00e      	b.n	80066a6 <HAL_PCD_EP_Close+0x8c>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68f9      	ldr	r1, [r7, #12]
 8006696:	4618      	mov	r0, r3
 8006698:	f004 fb26 	bl	800ace8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b086      	sub	sp, #24
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
 80066ba:	460b      	mov	r3, r1
 80066bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066be:	7afb      	ldrb	r3, [r7, #11]
 80066c0:	f003 020f 	and.w	r2, r3, #15
 80066c4:	4613      	mov	r3, r2
 80066c6:	00db      	lsls	r3, r3, #3
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	3304      	adds	r3, #4
 80066d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2200      	movs	r2, #0
 80066e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2200      	movs	r2, #0
 80066ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	799b      	ldrb	r3, [r3, #6]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d102      	bne.n	800670a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	799b      	ldrb	r3, [r3, #6]
 8006712:	461a      	mov	r2, r3
 8006714:	6979      	ldr	r1, [r7, #20]
 8006716:	f004 fbc3 	bl	800aea0 <USB_EPStartXfer>

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	f003 020f 	and.w	r2, r3, #15
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	4613      	mov	r3, r2
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	4413      	add	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	440b      	add	r3, r1
 8006742:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006746:	681b      	ldr	r3, [r3, #0]
}
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b086      	sub	sp, #24
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	607a      	str	r2, [r7, #4]
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	460b      	mov	r3, r1
 8006762:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006764:	7afb      	ldrb	r3, [r7, #11]
 8006766:	f003 020f 	and.w	r2, r3, #15
 800676a:	4613      	mov	r3, r2
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	3310      	adds	r3, #16
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	3304      	adds	r3, #4
 800677a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	2200      	movs	r2, #0
 800678c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2201      	movs	r2, #1
 8006792:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006794:	7afb      	ldrb	r3, [r7, #11]
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	b2da      	uxtb	r2, r3
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	799b      	ldrb	r3, [r3, #6]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d102      	bne.n	80067ae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	799b      	ldrb	r3, [r3, #6]
 80067b6:	461a      	mov	r2, r3
 80067b8:	6979      	ldr	r1, [r7, #20]
 80067ba:	f004 fb71 	bl	800aea0 <USB_EPStartXfer>

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80067d4:	78fb      	ldrb	r3, [r7, #3]
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	7912      	ldrb	r2, [r2, #4]
 80067de:	4293      	cmp	r3, r2
 80067e0:	d901      	bls.n	80067e6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e04f      	b.n	8006886 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80067e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da0f      	bge.n	800680e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067ee:	78fb      	ldrb	r3, [r7, #3]
 80067f0:	f003 020f 	and.w	r2, r3, #15
 80067f4:	4613      	mov	r3, r2
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	3310      	adds	r3, #16
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	4413      	add	r3, r2
 8006802:	3304      	adds	r3, #4
 8006804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	705a      	strb	r2, [r3, #1]
 800680c:	e00d      	b.n	800682a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800680e:	78fa      	ldrb	r2, [r7, #3]
 8006810:	4613      	mov	r3, r2
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	4413      	add	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	4413      	add	r3, r2
 8006820:	3304      	adds	r3, #4
 8006822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	b2da      	uxtb	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_PCD_EP_SetStall+0x82>
 8006846:	2302      	movs	r3, #2
 8006848:	e01d      	b.n	8006886 <HAL_PCD_EP_SetStall+0xbe>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	4618      	mov	r0, r3
 800685a:	f004 ff01 	bl	800b660 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	2b00      	cmp	r3, #0
 8006866:	d109      	bne.n	800687c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7999      	ldrb	r1, [r3, #6]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006876:	461a      	mov	r2, r3
 8006878:	f005 f8f4 	bl	800ba64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	460b      	mov	r3, r1
 8006898:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	f003 030f 	and.w	r3, r3, #15
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	7912      	ldrb	r2, [r2, #4]
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d901      	bls.n	80068ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e042      	b.n	8006932 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	da0f      	bge.n	80068d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	f003 020f 	and.w	r2, r3, #15
 80068ba:	4613      	mov	r3, r2
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	3310      	adds	r3, #16
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	4413      	add	r3, r2
 80068c8:	3304      	adds	r3, #4
 80068ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	705a      	strb	r2, [r3, #1]
 80068d2:	e00f      	b.n	80068f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	f003 020f 	and.w	r2, r3, #15
 80068da:	4613      	mov	r3, r2
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	4413      	add	r3, r2
 80068ea:	3304      	adds	r3, #4
 80068ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2200      	movs	r2, #0
 80068f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068fa:	78fb      	ldrb	r3, [r7, #3]
 80068fc:	f003 030f 	and.w	r3, r3, #15
 8006900:	b2da      	uxtb	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_PCD_EP_ClrStall+0x86>
 8006910:	2302      	movs	r3, #2
 8006912:	e00e      	b.n	8006932 <HAL_PCD_EP_ClrStall+0xa4>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68f9      	ldr	r1, [r7, #12]
 8006922:	4618      	mov	r0, r3
 8006924:	f004 ff0a 	bl	800b73c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006946:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800694a:	2b00      	cmp	r3, #0
 800694c:	da0c      	bge.n	8006968 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	f003 020f 	and.w	r2, r3, #15
 8006954:	4613      	mov	r3, r2
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	4413      	add	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	3310      	adds	r3, #16
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	4413      	add	r3, r2
 8006962:	3304      	adds	r3, #4
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e00c      	b.n	8006982 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	f003 020f 	and.w	r2, r3, #15
 800696e:	4613      	mov	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	4413      	add	r3, r2
 800697e:	3304      	adds	r3, #4
 8006980:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68f9      	ldr	r1, [r7, #12]
 8006988:	4618      	mov	r0, r3
 800698a:	f004 fd29 	bl	800b3e0 <USB_EPStopXfer>
 800698e:	4603      	mov	r3, r0
 8006990:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006992:	7afb      	ldrb	r3, [r7, #11]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3710      	adds	r7, #16
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	@ 0x28
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	4613      	mov	r3, r2
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	4413      	add	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	3310      	adds	r3, #16
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	4413      	add	r3, r2
 80069c0:	3304      	adds	r3, #4
 80069c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	695a      	ldr	r2, [r3, #20]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d901      	bls.n	80069d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e06b      	b.n	8006aac <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d902      	bls.n	80069f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	3303      	adds	r3, #3
 80069f4:	089b      	lsrs	r3, r3, #2
 80069f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069f8:	e02a      	b.n	8006a50 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	69fa      	ldr	r2, [r7, #28]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d902      	bls.n	8006a16 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	3303      	adds	r3, #3
 8006a1a:	089b      	lsrs	r3, r3, #2
 8006a1c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	68d9      	ldr	r1, [r3, #12]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	4603      	mov	r3, r0
 8006a32:	6978      	ldr	r0, [r7, #20]
 8006a34:	f004 fd7e 	bl	800b534 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	441a      	add	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	695a      	ldr	r2, [r3, #20]
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	441a      	add	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d809      	bhi.n	8006a7a <PCD_WriteEmptyTxFifo+0xde>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	695a      	ldr	r2, [r3, #20]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d203      	bcs.n	8006a7a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1bf      	bne.n	80069fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	691a      	ldr	r2, [r3, #16]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d811      	bhi.n	8006aaa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a92:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	43db      	mvns	r3, r3
 8006aa0:	6939      	ldr	r1, [r7, #16]
 8006aa2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3720      	adds	r7, #32
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	333c      	adds	r3, #60	@ 0x3c
 8006acc:	3304      	adds	r3, #4
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	799b      	ldrb	r3, [r3, #6]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d17b      	bne.n	8006be2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d015      	beq.n	8006b20 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	4a61      	ldr	r2, [pc, #388]	@ (8006c7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	f240 80b9 	bls.w	8006c70 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 80b3 	beq.w	8006c70 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b16:	461a      	mov	r2, r3
 8006b18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b1c:	6093      	str	r3, [r2, #8]
 8006b1e:	e0a7      	b.n	8006c70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d009      	beq.n	8006b3e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b36:	461a      	mov	r2, r3
 8006b38:	2320      	movs	r3, #32
 8006b3a:	6093      	str	r3, [r2, #8]
 8006b3c:	e098      	b.n	8006c70 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f040 8093 	bne.w	8006c70 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	4a4b      	ldr	r2, [pc, #300]	@ (8006c7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d90f      	bls.n	8006b72 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00a      	beq.n	8006b72 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b68:	461a      	mov	r2, r3
 8006b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b6e:	6093      	str	r3, [r2, #8]
 8006b70:	e07e      	b.n	8006c70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	4613      	mov	r3, r2
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	4413      	add	r3, r2
 8006b84:	3304      	adds	r3, #4
 8006b86:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1a      	ldr	r2, [r3, #32]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	0159      	lsls	r1, r3, #5
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	440b      	add	r3, r1
 8006b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b9e:	1ad2      	subs	r2, r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d114      	bne.n	8006bd4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	f004 ff50 	bl	800ba64 <USB_EP0_OutStart>
 8006bc4:	e006      	b.n	8006bd4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68da      	ldr	r2, [r3, #12]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	441a      	add	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f007 fa7e 	bl	800e0dc <HAL_PCD_DataOutStageCallback>
 8006be0:	e046      	b.n	8006c70 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	4a26      	ldr	r2, [pc, #152]	@ (8006c80 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d124      	bne.n	8006c34 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00a      	beq.n	8006c0a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c00:	461a      	mov	r2, r3
 8006c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c06:	6093      	str	r3, [r2, #8]
 8006c08:	e032      	b.n	8006c70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d008      	beq.n	8006c26 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c20:	461a      	mov	r2, r3
 8006c22:	2320      	movs	r3, #32
 8006c24:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f007 fa55 	bl	800e0dc <HAL_PCD_DataOutStageCallback>
 8006c32:	e01d      	b.n	8006c70 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d114      	bne.n	8006c64 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	440b      	add	r3, r1
 8006c48:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d108      	bne.n	8006c64 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6818      	ldr	r0, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	2100      	movs	r1, #0
 8006c60:	f004 ff00 	bl	800ba64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f007 fa36 	bl	800e0dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	4f54300a 	.word	0x4f54300a
 8006c80:	4f54310a 	.word	0x4f54310a

08006c84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	333c      	adds	r3, #60	@ 0x3c
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4a15      	ldr	r2, [pc, #84]	@ (8006d0c <PCD_EP_OutSetupPacket_int+0x88>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d90e      	bls.n	8006cd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d009      	beq.n	8006cd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f007 f9ed 	bl	800e0b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8006d0c <PCD_EP_OutSetupPacket_int+0x88>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d90c      	bls.n	8006d00 <PCD_EP_OutSetupPacket_int+0x7c>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	799b      	ldrb	r3, [r3, #6]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d108      	bne.n	8006d00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	f004 feb2 	bl	800ba64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	4f54300a 	.word	0x4f54300a

08006d10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d107      	bne.n	8006d3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006d2e:	883b      	ldrh	r3, [r7, #0]
 8006d30:	0419      	lsls	r1, r3, #16
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d3c:	e028      	b.n	8006d90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d44:	0c1b      	lsrs	r3, r3, #16
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	4413      	add	r3, r2
 8006d4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	73fb      	strb	r3, [r7, #15]
 8006d50:	e00d      	b.n	8006d6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	3340      	adds	r3, #64	@ 0x40
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	0c1b      	lsrs	r3, r3, #16
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	4413      	add	r3, r2
 8006d66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	73fb      	strb	r3, [r7, #15]
 8006d6e:	7bfa      	ldrb	r2, [r7, #15]
 8006d70:	78fb      	ldrb	r3, [r7, #3]
 8006d72:	3b01      	subs	r3, #1
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d3ec      	bcc.n	8006d52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006d78:	883b      	ldrh	r3, [r7, #0]
 8006d7a:	0418      	lsls	r0, r3, #16
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	78fb      	ldrb	r3, [r7, #3]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	4302      	orrs	r2, r0
 8006d88:	3340      	adds	r3, #64	@ 0x40
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	460b      	mov	r3, r1
 8006da8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	887a      	ldrh	r2, [r7, #2]
 8006db0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006dee:	4b05      	ldr	r3, [pc, #20]	@ (8006e04 <HAL_PCDEx_ActivateLPM+0x44>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	10000003 	.word	0x10000003

08006e08 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e0c:	4b05      	ldr	r3, [pc, #20]	@ (8006e24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a04      	ldr	r2, [pc, #16]	@ (8006e24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e16:	6013      	str	r3, [r2, #0]
}
 8006e18:	bf00      	nop
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40007000 	.word	0x40007000

08006e28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006e32:	4b23      	ldr	r3, [pc, #140]	@ (8006ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e36:	4a22      	ldr	r2, [pc, #136]	@ (8006ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e3e:	4b20      	ldr	r3, [pc, #128]	@ (8006ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e56:	f7fc feb1 	bl	8003bbc <HAL_GetTick>
 8006e5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e5c:	e009      	b.n	8006e72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e5e:	f7fc fead 	bl	8003bbc <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e6c:	d901      	bls.n	8006e72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e022      	b.n	8006eb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e72:	4b14      	ldr	r3, [pc, #80]	@ (8006ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e7e:	d1ee      	bne.n	8006e5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006e80:	4b10      	ldr	r3, [pc, #64]	@ (8006ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a0f      	ldr	r2, [pc, #60]	@ (8006ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e8c:	f7fc fe96 	bl	8003bbc <HAL_GetTick>
 8006e90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e92:	e009      	b.n	8006ea8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e94:	f7fc fe92 	bl	8003bbc <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ea2:	d901      	bls.n	8006ea8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e007      	b.n	8006eb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ea8:	4b06      	ldr	r3, [pc, #24]	@ (8006ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eb4:	d1ee      	bne.n	8006e94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	40007000 	.word	0x40007000

08006ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e29b      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 8087 	beq.w	8006ffa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006eec:	4b96      	ldr	r3, [pc, #600]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f003 030c 	and.w	r3, r3, #12
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d00c      	beq.n	8006f12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ef8:	4b93      	ldr	r3, [pc, #588]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f003 030c 	and.w	r3, r3, #12
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d112      	bne.n	8006f2a <HAL_RCC_OscConfig+0x62>
 8006f04:	4b90      	ldr	r3, [pc, #576]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f10:	d10b      	bne.n	8006f2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f12:	4b8d      	ldr	r3, [pc, #564]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d06c      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x130>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d168      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e275      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f32:	d106      	bne.n	8006f42 <HAL_RCC_OscConfig+0x7a>
 8006f34:	4b84      	ldr	r3, [pc, #528]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a83      	ldr	r2, [pc, #524]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	e02e      	b.n	8006fa0 <HAL_RCC_OscConfig+0xd8>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10c      	bne.n	8006f64 <HAL_RCC_OscConfig+0x9c>
 8006f4a:	4b7f      	ldr	r3, [pc, #508]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a7e      	ldr	r2, [pc, #504]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	4b7c      	ldr	r3, [pc, #496]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a7b      	ldr	r2, [pc, #492]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	e01d      	b.n	8006fa0 <HAL_RCC_OscConfig+0xd8>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f6c:	d10c      	bne.n	8006f88 <HAL_RCC_OscConfig+0xc0>
 8006f6e:	4b76      	ldr	r3, [pc, #472]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a75      	ldr	r2, [pc, #468]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	4b73      	ldr	r3, [pc, #460]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a72      	ldr	r2, [pc, #456]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	e00b      	b.n	8006fa0 <HAL_RCC_OscConfig+0xd8>
 8006f88:	4b6f      	ldr	r3, [pc, #444]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	4b6c      	ldr	r3, [pc, #432]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a6b      	ldr	r2, [pc, #428]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d013      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa8:	f7fc fe08 	bl	8003bbc <HAL_GetTick>
 8006fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fb0:	f7fc fe04 	bl	8003bbc <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b64      	cmp	r3, #100	@ 0x64
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e229      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fc2:	4b61      	ldr	r3, [pc, #388]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0f0      	beq.n	8006fb0 <HAL_RCC_OscConfig+0xe8>
 8006fce:	e014      	b.n	8006ffa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd0:	f7fc fdf4 	bl	8003bbc <HAL_GetTick>
 8006fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fd6:	e008      	b.n	8006fea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fd8:	f7fc fdf0 	bl	8003bbc <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b64      	cmp	r3, #100	@ 0x64
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e215      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fea:	4b57      	ldr	r3, [pc, #348]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1f0      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x110>
 8006ff6:	e000      	b.n	8006ffa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d069      	beq.n	80070da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007006:	4b50      	ldr	r3, [pc, #320]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 030c 	and.w	r3, r3, #12
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00b      	beq.n	800702a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007012:	4b4d      	ldr	r3, [pc, #308]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 030c 	and.w	r3, r3, #12
 800701a:	2b08      	cmp	r3, #8
 800701c:	d11c      	bne.n	8007058 <HAL_RCC_OscConfig+0x190>
 800701e:	4b4a      	ldr	r3, [pc, #296]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d116      	bne.n	8007058 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800702a:	4b47      	ldr	r3, [pc, #284]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <HAL_RCC_OscConfig+0x17a>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d001      	beq.n	8007042 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e1e9      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007042:	4b41      	ldr	r3, [pc, #260]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	493d      	ldr	r1, [pc, #244]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8007052:	4313      	orrs	r3, r2
 8007054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007056:	e040      	b.n	80070da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d023      	beq.n	80070a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007060:	4b39      	ldr	r3, [pc, #228]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a38      	ldr	r2, [pc, #224]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8007066:	f043 0301 	orr.w	r3, r3, #1
 800706a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706c:	f7fc fda6 	bl	8003bbc <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007074:	f7fc fda2 	bl	8003bbc <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e1c7      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007086:	4b30      	ldr	r3, [pc, #192]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0f0      	beq.n	8007074 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007092:	4b2d      	ldr	r3, [pc, #180]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	4929      	ldr	r1, [pc, #164]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	600b      	str	r3, [r1, #0]
 80070a6:	e018      	b.n	80070da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070a8:	4b27      	ldr	r3, [pc, #156]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a26      	ldr	r2, [pc, #152]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 80070ae:	f023 0301 	bic.w	r3, r3, #1
 80070b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b4:	f7fc fd82 	bl	8003bbc <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070bc:	f7fc fd7e 	bl	8003bbc <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e1a3      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f0      	bne.n	80070bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d038      	beq.n	8007158 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d019      	beq.n	8007122 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070ee:	4b16      	ldr	r3, [pc, #88]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 80070f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070f2:	4a15      	ldr	r2, [pc, #84]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070fa:	f7fc fd5f 	bl	8003bbc <HAL_GetTick>
 80070fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007102:	f7fc fd5b 	bl	8003bbc <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e180      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007114:	4b0c      	ldr	r3, [pc, #48]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8007116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f0      	beq.n	8007102 <HAL_RCC_OscConfig+0x23a>
 8007120:	e01a      	b.n	8007158 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007122:	4b09      	ldr	r3, [pc, #36]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8007124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007126:	4a08      	ldr	r2, [pc, #32]	@ (8007148 <HAL_RCC_OscConfig+0x280>)
 8007128:	f023 0301 	bic.w	r3, r3, #1
 800712c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712e:	f7fc fd45 	bl	8003bbc <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007134:	e00a      	b.n	800714c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007136:	f7fc fd41 	bl	8003bbc <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d903      	bls.n	800714c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e166      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
 8007148:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800714c:	4b92      	ldr	r3, [pc, #584]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 800714e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1ee      	bne.n	8007136 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 80a4 	beq.w	80072ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007166:	4b8c      	ldr	r3, [pc, #560]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10d      	bne.n	800718e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007172:	4b89      	ldr	r3, [pc, #548]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007176:	4a88      	ldr	r2, [pc, #544]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800717c:	6413      	str	r3, [r2, #64]	@ 0x40
 800717e:	4b86      	ldr	r3, [pc, #536]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007186:	60bb      	str	r3, [r7, #8]
 8007188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800718a:	2301      	movs	r3, #1
 800718c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800718e:	4b83      	ldr	r3, [pc, #524]	@ (800739c <HAL_RCC_OscConfig+0x4d4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007196:	2b00      	cmp	r3, #0
 8007198:	d118      	bne.n	80071cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800719a:	4b80      	ldr	r3, [pc, #512]	@ (800739c <HAL_RCC_OscConfig+0x4d4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a7f      	ldr	r2, [pc, #508]	@ (800739c <HAL_RCC_OscConfig+0x4d4>)
 80071a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071a6:	f7fc fd09 	bl	8003bbc <HAL_GetTick>
 80071aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071ac:	e008      	b.n	80071c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ae:	f7fc fd05 	bl	8003bbc <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b64      	cmp	r3, #100	@ 0x64
 80071ba:	d901      	bls.n	80071c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e12a      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071c0:	4b76      	ldr	r3, [pc, #472]	@ (800739c <HAL_RCC_OscConfig+0x4d4>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0f0      	beq.n	80071ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d106      	bne.n	80071e2 <HAL_RCC_OscConfig+0x31a>
 80071d4:	4b70      	ldr	r3, [pc, #448]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 80071d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d8:	4a6f      	ldr	r2, [pc, #444]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 80071da:	f043 0301 	orr.w	r3, r3, #1
 80071de:	6713      	str	r3, [r2, #112]	@ 0x70
 80071e0:	e02d      	b.n	800723e <HAL_RCC_OscConfig+0x376>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10c      	bne.n	8007204 <HAL_RCC_OscConfig+0x33c>
 80071ea:	4b6b      	ldr	r3, [pc, #428]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 80071ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ee:	4a6a      	ldr	r2, [pc, #424]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 80071f0:	f023 0301 	bic.w	r3, r3, #1
 80071f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80071f6:	4b68      	ldr	r3, [pc, #416]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 80071f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071fa:	4a67      	ldr	r2, [pc, #412]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 80071fc:	f023 0304 	bic.w	r3, r3, #4
 8007200:	6713      	str	r3, [r2, #112]	@ 0x70
 8007202:	e01c      	b.n	800723e <HAL_RCC_OscConfig+0x376>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	2b05      	cmp	r3, #5
 800720a:	d10c      	bne.n	8007226 <HAL_RCC_OscConfig+0x35e>
 800720c:	4b62      	ldr	r3, [pc, #392]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 800720e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007210:	4a61      	ldr	r2, [pc, #388]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007212:	f043 0304 	orr.w	r3, r3, #4
 8007216:	6713      	str	r3, [r2, #112]	@ 0x70
 8007218:	4b5f      	ldr	r3, [pc, #380]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 800721a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721c:	4a5e      	ldr	r2, [pc, #376]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 800721e:	f043 0301 	orr.w	r3, r3, #1
 8007222:	6713      	str	r3, [r2, #112]	@ 0x70
 8007224:	e00b      	b.n	800723e <HAL_RCC_OscConfig+0x376>
 8007226:	4b5c      	ldr	r3, [pc, #368]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800722a:	4a5b      	ldr	r2, [pc, #364]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	6713      	str	r3, [r2, #112]	@ 0x70
 8007232:	4b59      	ldr	r3, [pc, #356]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007236:	4a58      	ldr	r2, [pc, #352]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007238:	f023 0304 	bic.w	r3, r3, #4
 800723c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d015      	beq.n	8007272 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007246:	f7fc fcb9 	bl	8003bbc <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800724c:	e00a      	b.n	8007264 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800724e:	f7fc fcb5 	bl	8003bbc <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800725c:	4293      	cmp	r3, r2
 800725e:	d901      	bls.n	8007264 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e0d8      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007264:	4b4c      	ldr	r3, [pc, #304]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0ee      	beq.n	800724e <HAL_RCC_OscConfig+0x386>
 8007270:	e014      	b.n	800729c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007272:	f7fc fca3 	bl	8003bbc <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007278:	e00a      	b.n	8007290 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800727a:	f7fc fc9f 	bl	8003bbc <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007288:	4293      	cmp	r3, r2
 800728a:	d901      	bls.n	8007290 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e0c2      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007290:	4b41      	ldr	r3, [pc, #260]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1ee      	bne.n	800727a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800729c:	7dfb      	ldrb	r3, [r7, #23]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d105      	bne.n	80072ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072a2:	4b3d      	ldr	r3, [pc, #244]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	4a3c      	ldr	r2, [pc, #240]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 80072a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072ac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80ae 	beq.w	8007414 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072b8:	4b37      	ldr	r3, [pc, #220]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 030c 	and.w	r3, r3, #12
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d06d      	beq.n	80073a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d14b      	bne.n	8007364 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072cc:	4b32      	ldr	r3, [pc, #200]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a31      	ldr	r2, [pc, #196]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 80072d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d8:	f7fc fc70 	bl	8003bbc <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072e0:	f7fc fc6c 	bl	8003bbc <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e091      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072f2:	4b29      	ldr	r3, [pc, #164]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f0      	bne.n	80072e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	69da      	ldr	r2, [r3, #28]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730c:	019b      	lsls	r3, r3, #6
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007314:	085b      	lsrs	r3, r3, #1
 8007316:	3b01      	subs	r3, #1
 8007318:	041b      	lsls	r3, r3, #16
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007320:	061b      	lsls	r3, r3, #24
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007328:	071b      	lsls	r3, r3, #28
 800732a:	491b      	ldr	r1, [pc, #108]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 800732c:	4313      	orrs	r3, r2
 800732e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007330:	4b19      	ldr	r3, [pc, #100]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a18      	ldr	r2, [pc, #96]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800733a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733c:	f7fc fc3e 	bl	8003bbc <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007344:	f7fc fc3a 	bl	8003bbc <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e05f      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007356:	4b10      	ldr	r3, [pc, #64]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0f0      	beq.n	8007344 <HAL_RCC_OscConfig+0x47c>
 8007362:	e057      	b.n	8007414 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007364:	4b0c      	ldr	r3, [pc, #48]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a0b      	ldr	r2, [pc, #44]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 800736a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800736e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007370:	f7fc fc24 	bl	8003bbc <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007378:	f7fc fc20 	bl	8003bbc <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e045      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800738a:	4b03      	ldr	r3, [pc, #12]	@ (8007398 <HAL_RCC_OscConfig+0x4d0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f0      	bne.n	8007378 <HAL_RCC_OscConfig+0x4b0>
 8007396:	e03d      	b.n	8007414 <HAL_RCC_OscConfig+0x54c>
 8007398:	40023800 	.word	0x40023800
 800739c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80073a0:	4b1f      	ldr	r3, [pc, #124]	@ (8007420 <HAL_RCC_OscConfig+0x558>)
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d030      	beq.n	8007410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d129      	bne.n	8007410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d122      	bne.n	8007410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80073d0:	4013      	ands	r3, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80073d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073d8:	4293      	cmp	r3, r2
 80073da:	d119      	bne.n	8007410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e6:	085b      	lsrs	r3, r3, #1
 80073e8:	3b01      	subs	r3, #1
 80073ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d10f      	bne.n	8007410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d107      	bne.n	8007410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800740c:	429a      	cmp	r2, r3
 800740e:	d001      	beq.n	8007414 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	40023800 	.word	0x40023800

08007424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e0d0      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800743c:	4b6a      	ldr	r3, [pc, #424]	@ (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 030f 	and.w	r3, r3, #15
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d910      	bls.n	800746c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800744a:	4b67      	ldr	r3, [pc, #412]	@ (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f023 020f 	bic.w	r2, r3, #15
 8007452:	4965      	ldr	r1, [pc, #404]	@ (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	4313      	orrs	r3, r2
 8007458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800745a:	4b63      	ldr	r3, [pc, #396]	@ (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 030f 	and.w	r3, r3, #15
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d001      	beq.n	800746c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e0b8      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d020      	beq.n	80074ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007484:	4b59      	ldr	r3, [pc, #356]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	4a58      	ldr	r2, [pc, #352]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 800748a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800748e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0308 	and.w	r3, r3, #8
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800749c:	4b53      	ldr	r3, [pc, #332]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	4a52      	ldr	r2, [pc, #328]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80074a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80074a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a8:	4b50      	ldr	r3, [pc, #320]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	494d      	ldr	r1, [pc, #308]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d040      	beq.n	8007548 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d107      	bne.n	80074de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ce:	4b47      	ldr	r3, [pc, #284]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d115      	bne.n	8007506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e07f      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d107      	bne.n	80074f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074e6:	4b41      	ldr	r3, [pc, #260]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d109      	bne.n	8007506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e073      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074f6:	4b3d      	ldr	r3, [pc, #244]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e06b      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007506:	4b39      	ldr	r3, [pc, #228]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f023 0203 	bic.w	r2, r3, #3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	4936      	ldr	r1, [pc, #216]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 8007514:	4313      	orrs	r3, r2
 8007516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007518:	f7fc fb50 	bl	8003bbc <HAL_GetTick>
 800751c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800751e:	e00a      	b.n	8007536 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007520:	f7fc fb4c 	bl	8003bbc <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800752e:	4293      	cmp	r3, r2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e053      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007536:	4b2d      	ldr	r3, [pc, #180]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 020c 	and.w	r2, r3, #12
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	429a      	cmp	r2, r3
 8007546:	d1eb      	bne.n	8007520 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007548:	4b27      	ldr	r3, [pc, #156]	@ (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 030f 	and.w	r3, r3, #15
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d210      	bcs.n	8007578 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007556:	4b24      	ldr	r3, [pc, #144]	@ (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f023 020f 	bic.w	r2, r3, #15
 800755e:	4922      	ldr	r1, [pc, #136]	@ (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	4313      	orrs	r3, r2
 8007564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007566:	4b20      	ldr	r3, [pc, #128]	@ (80075e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d001      	beq.n	8007578 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e032      	b.n	80075de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d008      	beq.n	8007596 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007584:	4b19      	ldr	r3, [pc, #100]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	4916      	ldr	r1, [pc, #88]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 8007592:	4313      	orrs	r3, r2
 8007594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075a2:	4b12      	ldr	r3, [pc, #72]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	490e      	ldr	r1, [pc, #56]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075b6:	f000 f821 	bl	80075fc <HAL_RCC_GetSysClockFreq>
 80075ba:	4602      	mov	r2, r0
 80075bc:	4b0b      	ldr	r3, [pc, #44]	@ (80075ec <HAL_RCC_ClockConfig+0x1c8>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	091b      	lsrs	r3, r3, #4
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	490a      	ldr	r1, [pc, #40]	@ (80075f0 <HAL_RCC_ClockConfig+0x1cc>)
 80075c8:	5ccb      	ldrb	r3, [r1, r3]
 80075ca:	fa22 f303 	lsr.w	r3, r2, r3
 80075ce:	4a09      	ldr	r2, [pc, #36]	@ (80075f4 <HAL_RCC_ClockConfig+0x1d0>)
 80075d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80075d2:	4b09      	ldr	r3, [pc, #36]	@ (80075f8 <HAL_RCC_ClockConfig+0x1d4>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fc faac 	bl	8003b34 <HAL_InitTick>

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	40023c00 	.word	0x40023c00
 80075ec:	40023800 	.word	0x40023800
 80075f0:	0800eeb0 	.word	0x0800eeb0
 80075f4:	2000000c 	.word	0x2000000c
 80075f8:	20000010 	.word	0x20000010

080075fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007600:	b094      	sub	sp, #80	@ 0x50
 8007602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	647b      	str	r3, [r7, #68]	@ 0x44
 8007608:	2300      	movs	r3, #0
 800760a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800760c:	2300      	movs	r3, #0
 800760e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007614:	4b79      	ldr	r3, [pc, #484]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x200>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f003 030c 	and.w	r3, r3, #12
 800761c:	2b08      	cmp	r3, #8
 800761e:	d00d      	beq.n	800763c <HAL_RCC_GetSysClockFreq+0x40>
 8007620:	2b08      	cmp	r3, #8
 8007622:	f200 80e1 	bhi.w	80077e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <HAL_RCC_GetSysClockFreq+0x34>
 800762a:	2b04      	cmp	r3, #4
 800762c:	d003      	beq.n	8007636 <HAL_RCC_GetSysClockFreq+0x3a>
 800762e:	e0db      	b.n	80077e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007630:	4b73      	ldr	r3, [pc, #460]	@ (8007800 <HAL_RCC_GetSysClockFreq+0x204>)
 8007632:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007634:	e0db      	b.n	80077ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007636:	4b73      	ldr	r3, [pc, #460]	@ (8007804 <HAL_RCC_GetSysClockFreq+0x208>)
 8007638:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800763a:	e0d8      	b.n	80077ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800763c:	4b6f      	ldr	r3, [pc, #444]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x200>)
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007644:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007646:	4b6d      	ldr	r3, [pc, #436]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x200>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d063      	beq.n	800771a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007652:	4b6a      	ldr	r3, [pc, #424]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x200>)
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	099b      	lsrs	r3, r3, #6
 8007658:	2200      	movs	r2, #0
 800765a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800765c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800765e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007664:	633b      	str	r3, [r7, #48]	@ 0x30
 8007666:	2300      	movs	r3, #0
 8007668:	637b      	str	r3, [r7, #52]	@ 0x34
 800766a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800766e:	4622      	mov	r2, r4
 8007670:	462b      	mov	r3, r5
 8007672:	f04f 0000 	mov.w	r0, #0
 8007676:	f04f 0100 	mov.w	r1, #0
 800767a:	0159      	lsls	r1, r3, #5
 800767c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007680:	0150      	lsls	r0, r2, #5
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	4621      	mov	r1, r4
 8007688:	1a51      	subs	r1, r2, r1
 800768a:	6139      	str	r1, [r7, #16]
 800768c:	4629      	mov	r1, r5
 800768e:	eb63 0301 	sbc.w	r3, r3, r1
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	f04f 0200 	mov.w	r2, #0
 8007698:	f04f 0300 	mov.w	r3, #0
 800769c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076a0:	4659      	mov	r1, fp
 80076a2:	018b      	lsls	r3, r1, #6
 80076a4:	4651      	mov	r1, sl
 80076a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076aa:	4651      	mov	r1, sl
 80076ac:	018a      	lsls	r2, r1, #6
 80076ae:	4651      	mov	r1, sl
 80076b0:	ebb2 0801 	subs.w	r8, r2, r1
 80076b4:	4659      	mov	r1, fp
 80076b6:	eb63 0901 	sbc.w	r9, r3, r1
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076ce:	4690      	mov	r8, r2
 80076d0:	4699      	mov	r9, r3
 80076d2:	4623      	mov	r3, r4
 80076d4:	eb18 0303 	adds.w	r3, r8, r3
 80076d8:	60bb      	str	r3, [r7, #8]
 80076da:	462b      	mov	r3, r5
 80076dc:	eb49 0303 	adc.w	r3, r9, r3
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	f04f 0300 	mov.w	r3, #0
 80076ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80076ee:	4629      	mov	r1, r5
 80076f0:	024b      	lsls	r3, r1, #9
 80076f2:	4621      	mov	r1, r4
 80076f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80076f8:	4621      	mov	r1, r4
 80076fa:	024a      	lsls	r2, r1, #9
 80076fc:	4610      	mov	r0, r2
 80076fe:	4619      	mov	r1, r3
 8007700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007702:	2200      	movs	r2, #0
 8007704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007708:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800770c:	f7f8 ff50 	bl	80005b0 <__aeabi_uldivmod>
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	4613      	mov	r3, r2
 8007716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007718:	e058      	b.n	80077cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800771a:	4b38      	ldr	r3, [pc, #224]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x200>)
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	099b      	lsrs	r3, r3, #6
 8007720:	2200      	movs	r2, #0
 8007722:	4618      	mov	r0, r3
 8007724:	4611      	mov	r1, r2
 8007726:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800772a:	623b      	str	r3, [r7, #32]
 800772c:	2300      	movs	r3, #0
 800772e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007734:	4642      	mov	r2, r8
 8007736:	464b      	mov	r3, r9
 8007738:	f04f 0000 	mov.w	r0, #0
 800773c:	f04f 0100 	mov.w	r1, #0
 8007740:	0159      	lsls	r1, r3, #5
 8007742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007746:	0150      	lsls	r0, r2, #5
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4641      	mov	r1, r8
 800774e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007752:	4649      	mov	r1, r9
 8007754:	eb63 0b01 	sbc.w	fp, r3, r1
 8007758:	f04f 0200 	mov.w	r2, #0
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007764:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007768:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800776c:	ebb2 040a 	subs.w	r4, r2, sl
 8007770:	eb63 050b 	sbc.w	r5, r3, fp
 8007774:	f04f 0200 	mov.w	r2, #0
 8007778:	f04f 0300 	mov.w	r3, #0
 800777c:	00eb      	lsls	r3, r5, #3
 800777e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007782:	00e2      	lsls	r2, r4, #3
 8007784:	4614      	mov	r4, r2
 8007786:	461d      	mov	r5, r3
 8007788:	4643      	mov	r3, r8
 800778a:	18e3      	adds	r3, r4, r3
 800778c:	603b      	str	r3, [r7, #0]
 800778e:	464b      	mov	r3, r9
 8007790:	eb45 0303 	adc.w	r3, r5, r3
 8007794:	607b      	str	r3, [r7, #4]
 8007796:	f04f 0200 	mov.w	r2, #0
 800779a:	f04f 0300 	mov.w	r3, #0
 800779e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077a2:	4629      	mov	r1, r5
 80077a4:	028b      	lsls	r3, r1, #10
 80077a6:	4621      	mov	r1, r4
 80077a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077ac:	4621      	mov	r1, r4
 80077ae:	028a      	lsls	r2, r1, #10
 80077b0:	4610      	mov	r0, r2
 80077b2:	4619      	mov	r1, r3
 80077b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077b6:	2200      	movs	r2, #0
 80077b8:	61bb      	str	r3, [r7, #24]
 80077ba:	61fa      	str	r2, [r7, #28]
 80077bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077c0:	f7f8 fef6 	bl	80005b0 <__aeabi_uldivmod>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4613      	mov	r3, r2
 80077ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80077cc:	4b0b      	ldr	r3, [pc, #44]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x200>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	0c1b      	lsrs	r3, r3, #16
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	3301      	adds	r3, #1
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80077dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077e6:	e002      	b.n	80077ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80077e8:	4b05      	ldr	r3, [pc, #20]	@ (8007800 <HAL_RCC_GetSysClockFreq+0x204>)
 80077ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80077ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3750      	adds	r7, #80	@ 0x50
 80077f4:	46bd      	mov	sp, r7
 80077f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077fa:	bf00      	nop
 80077fc:	40023800 	.word	0x40023800
 8007800:	00f42400 	.word	0x00f42400
 8007804:	007a1200 	.word	0x007a1200

08007808 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800780c:	4b03      	ldr	r3, [pc, #12]	@ (800781c <HAL_RCC_GetHCLKFreq+0x14>)
 800780e:	681b      	ldr	r3, [r3, #0]
}
 8007810:	4618      	mov	r0, r3
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	2000000c 	.word	0x2000000c

08007820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007824:	f7ff fff0 	bl	8007808 <HAL_RCC_GetHCLKFreq>
 8007828:	4602      	mov	r2, r0
 800782a:	4b05      	ldr	r3, [pc, #20]	@ (8007840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	0a9b      	lsrs	r3, r3, #10
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	4903      	ldr	r1, [pc, #12]	@ (8007844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007836:	5ccb      	ldrb	r3, [r1, r3]
 8007838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800783c:	4618      	mov	r0, r3
 800783e:	bd80      	pop	{r7, pc}
 8007840:	40023800 	.word	0x40023800
 8007844:	0800eec0 	.word	0x0800eec0

08007848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800784c:	f7ff ffdc 	bl	8007808 <HAL_RCC_GetHCLKFreq>
 8007850:	4602      	mov	r2, r0
 8007852:	4b05      	ldr	r3, [pc, #20]	@ (8007868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	0b5b      	lsrs	r3, r3, #13
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	4903      	ldr	r1, [pc, #12]	@ (800786c <HAL_RCC_GetPCLK2Freq+0x24>)
 800785e:	5ccb      	ldrb	r3, [r1, r3]
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40023800 	.word	0x40023800
 800786c:	0800eec0 	.word	0x0800eec0

08007870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007878:	2300      	movs	r3, #0
 800787a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007884:	2300      	movs	r3, #0
 8007886:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d012      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007898:	4b69      	ldr	r3, [pc, #420]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	4a68      	ldr	r2, [pc, #416]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800789e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80078a2:	6093      	str	r3, [r2, #8]
 80078a4:	4b66      	ldr	r3, [pc, #408]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ac:	4964      	ldr	r1, [pc, #400]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80078ba:	2301      	movs	r3, #1
 80078bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d017      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078ca:	4b5d      	ldr	r3, [pc, #372]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078d8:	4959      	ldr	r1, [pc, #356]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078e8:	d101      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80078ea:	2301      	movs	r3, #1
 80078ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80078f6:	2301      	movs	r3, #1
 80078f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d017      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007906:	4b4e      	ldr	r3, [pc, #312]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800790c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007914:	494a      	ldr	r1, [pc, #296]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007916:	4313      	orrs	r3, r2
 8007918:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007924:	d101      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007926:	2301      	movs	r3, #1
 8007928:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007932:	2301      	movs	r3, #1
 8007934:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007942:	2301      	movs	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b00      	cmp	r3, #0
 8007950:	f000 808b 	beq.w	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007954:	4b3a      	ldr	r3, [pc, #232]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007958:	4a39      	ldr	r2, [pc, #228]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800795a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800795e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007960:	4b37      	ldr	r3, [pc, #220]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007968:	60bb      	str	r3, [r7, #8]
 800796a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800796c:	4b35      	ldr	r3, [pc, #212]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a34      	ldr	r2, [pc, #208]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007976:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007978:	f7fc f920 	bl	8003bbc <HAL_GetTick>
 800797c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800797e:	e008      	b.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007980:	f7fc f91c 	bl	8003bbc <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b64      	cmp	r3, #100	@ 0x64
 800798c:	d901      	bls.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e38f      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007992:	4b2c      	ldr	r3, [pc, #176]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f0      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800799e:	4b28      	ldr	r3, [pc, #160]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d035      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d02e      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079bc:	4b20      	ldr	r3, [pc, #128]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079c6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ca:	4a1d      	ldr	r2, [pc, #116]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079d0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079d6:	4a1a      	ldr	r2, [pc, #104]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80079de:	4a18      	ldr	r2, [pc, #96]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80079e4:	4b16      	ldr	r3, [pc, #88]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d114      	bne.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f0:	f7fc f8e4 	bl	8003bbc <HAL_GetTick>
 80079f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f6:	e00a      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079f8:	f7fc f8e0 	bl	8003bbc <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e351      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0ee      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a26:	d111      	bne.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a28:	4b05      	ldr	r3, [pc, #20]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007a34:	4b04      	ldr	r3, [pc, #16]	@ (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a36:	400b      	ands	r3, r1
 8007a38:	4901      	ldr	r1, [pc, #4]	@ (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	608b      	str	r3, [r1, #8]
 8007a3e:	e00b      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007a40:	40023800 	.word	0x40023800
 8007a44:	40007000 	.word	0x40007000
 8007a48:	0ffffcff 	.word	0x0ffffcff
 8007a4c:	4bac      	ldr	r3, [pc, #688]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	4aab      	ldr	r2, [pc, #684]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a52:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007a56:	6093      	str	r3, [r2, #8]
 8007a58:	4ba9      	ldr	r3, [pc, #676]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a5a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a64:	49a6      	ldr	r1, [pc, #664]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0310 	and.w	r3, r3, #16
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d010      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a76:	4ba2      	ldr	r3, [pc, #648]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a7c:	4aa0      	ldr	r2, [pc, #640]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a82:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007a86:	4b9e      	ldr	r3, [pc, #632]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a88:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a90:	499b      	ldr	r1, [pc, #620]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00a      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007aa4:	4b96      	ldr	r3, [pc, #600]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aaa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ab2:	4993      	ldr	r1, [pc, #588]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ac6:	4b8e      	ldr	r3, [pc, #568]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007acc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ad4:	498a      	ldr	r1, [pc, #552]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ae8:	4b85      	ldr	r3, [pc, #532]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007af6:	4982      	ldr	r1, [pc, #520]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b0a:	4b7d      	ldr	r3, [pc, #500]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b10:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b18:	4979      	ldr	r1, [pc, #484]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b2c:	4b74      	ldr	r3, [pc, #464]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b32:	f023 0203 	bic.w	r2, r3, #3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b3a:	4971      	ldr	r1, [pc, #452]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b54:	f023 020c 	bic.w	r2, r3, #12
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b5c:	4968      	ldr	r1, [pc, #416]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b70:	4b63      	ldr	r3, [pc, #396]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b76:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b7e:	4960      	ldr	r1, [pc, #384]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b92:	4b5b      	ldr	r3, [pc, #364]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b98:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ba0:	4957      	ldr	r1, [pc, #348]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bb4:	4b52      	ldr	r3, [pc, #328]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc2:	494f      	ldr	r1, [pc, #316]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00a      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bdc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be4:	4946      	ldr	r1, [pc, #280]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007bf8:	4b41      	ldr	r3, [pc, #260]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bfe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c06:	493e      	ldr	r1, [pc, #248]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c1a:	4b39      	ldr	r3, [pc, #228]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c20:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c28:	4935      	ldr	r1, [pc, #212]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c3c:	4b30      	ldr	r3, [pc, #192]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c42:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c4a:	492d      	ldr	r1, [pc, #180]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d011      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c5e:	4b28      	ldr	r3, [pc, #160]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c64:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c6c:	4924      	ldr	r1, [pc, #144]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c7c:	d101      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0308 	and.w	r3, r3, #8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c9e:	4b18      	ldr	r3, [pc, #96]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ca4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cac:	4914      	ldr	r1, [pc, #80]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cc6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cd0:	490b      	ldr	r1, [pc, #44]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00f      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007ce4:	4b06      	ldr	r3, [pc, #24]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cea:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cf4:	4902      	ldr	r1, [pc, #8]	@ (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007cfc:	e002      	b.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007cfe:	bf00      	nop
 8007d00:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00b      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d10:	4b8a      	ldr	r3, [pc, #552]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d20:	4986      	ldr	r1, [pc, #536]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007d34:	4b81      	ldr	r3, [pc, #516]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d3a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d44:	497d      	ldr	r1, [pc, #500]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d006      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 80d6 	beq.w	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d60:	4b76      	ldr	r3, [pc, #472]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a75      	ldr	r2, [pc, #468]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d6c:	f7fb ff26 	bl	8003bbc <HAL_GetTick>
 8007d70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d72:	e008      	b.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d74:	f7fb ff22 	bl	8003bbc <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b64      	cmp	r3, #100	@ 0x64
 8007d80:	d901      	bls.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e195      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d86:	4b6d      	ldr	r3, [pc, #436]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f0      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d021      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d11d      	bne.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007da6:	4b65      	ldr	r3, [pc, #404]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dac:	0c1b      	lsrs	r3, r3, #16
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007db4:	4b61      	ldr	r3, [pc, #388]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dba:	0e1b      	lsrs	r3, r3, #24
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	019a      	lsls	r2, r3, #6
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	041b      	lsls	r3, r3, #16
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	061b      	lsls	r3, r3, #24
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	071b      	lsls	r3, r3, #28
 8007dda:	4958      	ldr	r1, [pc, #352]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d004      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007df6:	d00a      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d02e      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e0c:	d129      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e14:	0c1b      	lsrs	r3, r3, #16
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e1c:	4b47      	ldr	r3, [pc, #284]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e22:	0f1b      	lsrs	r3, r3, #28
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	019a      	lsls	r2, r3, #6
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	041b      	lsls	r3, r3, #16
 8007e34:	431a      	orrs	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	061b      	lsls	r3, r3, #24
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	071b      	lsls	r3, r3, #28
 8007e42:	493e      	ldr	r1, [pc, #248]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e50:	f023 021f 	bic.w	r2, r3, #31
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	4938      	ldr	r1, [pc, #224]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d01d      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e6e:	4b33      	ldr	r3, [pc, #204]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e74:	0e1b      	lsrs	r3, r3, #24
 8007e76:	f003 030f 	and.w	r3, r3, #15
 8007e7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e82:	0f1b      	lsrs	r3, r3, #28
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	019a      	lsls	r2, r3, #6
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	041b      	lsls	r3, r3, #16
 8007e96:	431a      	orrs	r2, r3
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	061b      	lsls	r3, r3, #24
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	071b      	lsls	r3, r3, #28
 8007ea2:	4926      	ldr	r1, [pc, #152]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d011      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	019a      	lsls	r2, r3, #6
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	041b      	lsls	r3, r3, #16
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	061b      	lsls	r3, r3, #24
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	071b      	lsls	r3, r3, #28
 8007ed2:	491a      	ldr	r1, [pc, #104]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007eda:	4b18      	ldr	r3, [pc, #96]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a17      	ldr	r2, [pc, #92]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ee0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ee6:	f7fb fe69 	bl	8003bbc <HAL_GetTick>
 8007eea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007eec:	e008      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007eee:	f7fb fe65 	bl	8003bbc <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	2b64      	cmp	r3, #100	@ 0x64
 8007efa:	d901      	bls.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e0d8      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f00:	4b0e      	ldr	r3, [pc, #56]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d0f0      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	f040 80ce 	bne.w	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007f14:	4b09      	ldr	r3, [pc, #36]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a08      	ldr	r2, [pc, #32]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f20:	f7fb fe4c 	bl	8003bbc <HAL_GetTick>
 8007f24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f26:	e00b      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f28:	f7fb fe48 	bl	8003bbc <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	2b64      	cmp	r3, #100	@ 0x64
 8007f34:	d904      	bls.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e0bb      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007f3a:	bf00      	nop
 8007f3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f40:	4b5e      	ldr	r3, [pc, #376]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f4c:	d0ec      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d009      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d02e      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d12a      	bne.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f76:	4b51      	ldr	r3, [pc, #324]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f7c:	0c1b      	lsrs	r3, r3, #16
 8007f7e:	f003 0303 	and.w	r3, r3, #3
 8007f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f84:	4b4d      	ldr	r3, [pc, #308]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f8a:	0f1b      	lsrs	r3, r3, #28
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	019a      	lsls	r2, r3, #6
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	041b      	lsls	r3, r3, #16
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	061b      	lsls	r3, r3, #24
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	071b      	lsls	r3, r3, #28
 8007faa:	4944      	ldr	r1, [pc, #272]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007fb2:	4b42      	ldr	r3, [pc, #264]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fb8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	021b      	lsls	r3, r3, #8
 8007fc4:	493d      	ldr	r1, [pc, #244]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d022      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007fdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fe0:	d11d      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fe2:	4b36      	ldr	r3, [pc, #216]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe8:	0e1b      	lsrs	r3, r3, #24
 8007fea:	f003 030f 	and.w	r3, r3, #15
 8007fee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ff0:	4b32      	ldr	r3, [pc, #200]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ff6:	0f1b      	lsrs	r3, r3, #28
 8007ff8:	f003 0307 	and.w	r3, r3, #7
 8007ffc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	019a      	lsls	r2, r3, #6
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	041b      	lsls	r3, r3, #16
 800800a:	431a      	orrs	r2, r3
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	061b      	lsls	r3, r3, #24
 8008010:	431a      	orrs	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	071b      	lsls	r3, r3, #28
 8008016:	4929      	ldr	r1, [pc, #164]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008018:	4313      	orrs	r3, r2
 800801a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d028      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800802a:	4b24      	ldr	r3, [pc, #144]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800802c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008030:	0e1b      	lsrs	r3, r3, #24
 8008032:	f003 030f 	and.w	r3, r3, #15
 8008036:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008038:	4b20      	ldr	r3, [pc, #128]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800803a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800803e:	0c1b      	lsrs	r3, r3, #16
 8008040:	f003 0303 	and.w	r3, r3, #3
 8008044:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	019a      	lsls	r2, r3, #6
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	431a      	orrs	r2, r3
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	061b      	lsls	r3, r3, #24
 8008056:	431a      	orrs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	071b      	lsls	r3, r3, #28
 800805e:	4917      	ldr	r1, [pc, #92]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008060:	4313      	orrs	r3, r2
 8008062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008066:	4b15      	ldr	r3, [pc, #84]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008068:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800806c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008074:	4911      	ldr	r1, [pc, #68]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008076:	4313      	orrs	r3, r2
 8008078:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800807c:	4b0f      	ldr	r3, [pc, #60]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a0e      	ldr	r2, [pc, #56]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008082:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008088:	f7fb fd98 	bl	8003bbc <HAL_GetTick>
 800808c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800808e:	e008      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008090:	f7fb fd94 	bl	8003bbc <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	2b64      	cmp	r3, #100	@ 0x64
 800809c:	d901      	bls.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e007      	b.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080a2:	4b06      	ldr	r3, [pc, #24]	@ (80080bc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080ae:	d1ef      	bne.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3720      	adds	r7, #32
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	40023800 	.word	0x40023800

080080c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e049      	b.n	8008166 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fb f938 	bl	800335c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2202      	movs	r2, #2
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3304      	adds	r3, #4
 80080fc:	4619      	mov	r1, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	f000 fd5e 	bl	8008bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
	...

08008170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b01      	cmp	r3, #1
 8008182:	d001      	beq.n	8008188 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e054      	b.n	8008232 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0201 	orr.w	r2, r2, #1
 800819e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a26      	ldr	r2, [pc, #152]	@ (8008240 <HAL_TIM_Base_Start_IT+0xd0>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d022      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x80>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081b2:	d01d      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x80>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a22      	ldr	r2, [pc, #136]	@ (8008244 <HAL_TIM_Base_Start_IT+0xd4>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d018      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x80>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a21      	ldr	r2, [pc, #132]	@ (8008248 <HAL_TIM_Base_Start_IT+0xd8>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d013      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x80>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a1f      	ldr	r2, [pc, #124]	@ (800824c <HAL_TIM_Base_Start_IT+0xdc>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00e      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x80>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008250 <HAL_TIM_Base_Start_IT+0xe0>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d009      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x80>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a1c      	ldr	r2, [pc, #112]	@ (8008254 <HAL_TIM_Base_Start_IT+0xe4>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d004      	beq.n	80081f0 <HAL_TIM_Base_Start_IT+0x80>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008258 <HAL_TIM_Base_Start_IT+0xe8>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d115      	bne.n	800821c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	4b19      	ldr	r3, [pc, #100]	@ (800825c <HAL_TIM_Base_Start_IT+0xec>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b06      	cmp	r3, #6
 8008200:	d015      	beq.n	800822e <HAL_TIM_Base_Start_IT+0xbe>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008208:	d011      	beq.n	800822e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f042 0201 	orr.w	r2, r2, #1
 8008218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800821a:	e008      	b.n	800822e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0201 	orr.w	r2, r2, #1
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	e000      	b.n	8008230 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	40010000 	.word	0x40010000
 8008244:	40000400 	.word	0x40000400
 8008248:	40000800 	.word	0x40000800
 800824c:	40000c00 	.word	0x40000c00
 8008250:	40010400 	.word	0x40010400
 8008254:	40014000 	.word	0x40014000
 8008258:	40001800 	.word	0x40001800
 800825c:	00010007 	.word	0x00010007

08008260 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68da      	ldr	r2, [r3, #12]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0201 	bic.w	r2, r2, #1
 8008276:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6a1a      	ldr	r2, [r3, #32]
 800827e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008282:	4013      	ands	r3, r2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10f      	bne.n	80082a8 <HAL_TIM_Base_Stop_IT+0x48>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6a1a      	ldr	r2, [r3, #32]
 800828e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008292:	4013      	ands	r3, r2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d107      	bne.n	80082a8 <HAL_TIM_Base_Stop_IT+0x48>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0201 	bic.w	r2, r2, #1
 80082a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e049      	b.n	8008364 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d106      	bne.n	80082ea <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f841 	bl	800836c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2202      	movs	r2, #2
 80082ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f000 fc5f 	bl	8008bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2201      	movs	r2, #1
 8008316:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2201      	movs	r2, #1
 800834e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d104      	bne.n	800839e <HAL_TIM_IC_Start_IT+0x1e>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800839a:	b2db      	uxtb	r3, r3
 800839c:	e023      	b.n	80083e6 <HAL_TIM_IC_Start_IT+0x66>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d104      	bne.n	80083ae <HAL_TIM_IC_Start_IT+0x2e>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	e01b      	b.n	80083e6 <HAL_TIM_IC_Start_IT+0x66>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d104      	bne.n	80083be <HAL_TIM_IC_Start_IT+0x3e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	e013      	b.n	80083e6 <HAL_TIM_IC_Start_IT+0x66>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b0c      	cmp	r3, #12
 80083c2:	d104      	bne.n	80083ce <HAL_TIM_IC_Start_IT+0x4e>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	e00b      	b.n	80083e6 <HAL_TIM_IC_Start_IT+0x66>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b10      	cmp	r3, #16
 80083d2:	d104      	bne.n	80083de <HAL_TIM_IC_Start_IT+0x5e>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	e003      	b.n	80083e6 <HAL_TIM_IC_Start_IT+0x66>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d104      	bne.n	80083f8 <HAL_TIM_IC_Start_IT+0x78>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	e013      	b.n	8008420 <HAL_TIM_IC_Start_IT+0xa0>
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d104      	bne.n	8008408 <HAL_TIM_IC_Start_IT+0x88>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008404:	b2db      	uxtb	r3, r3
 8008406:	e00b      	b.n	8008420 <HAL_TIM_IC_Start_IT+0xa0>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2b08      	cmp	r3, #8
 800840c:	d104      	bne.n	8008418 <HAL_TIM_IC_Start_IT+0x98>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008414:	b2db      	uxtb	r3, r3
 8008416:	e003      	b.n	8008420 <HAL_TIM_IC_Start_IT+0xa0>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800841e:	b2db      	uxtb	r3, r3
 8008420:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d102      	bne.n	800842e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008428:	7b7b      	ldrb	r3, [r7, #13]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d001      	beq.n	8008432 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e0e2      	b.n	80085f8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d104      	bne.n	8008442 <HAL_TIM_IC_Start_IT+0xc2>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008440:	e023      	b.n	800848a <HAL_TIM_IC_Start_IT+0x10a>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b04      	cmp	r3, #4
 8008446:	d104      	bne.n	8008452 <HAL_TIM_IC_Start_IT+0xd2>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008450:	e01b      	b.n	800848a <HAL_TIM_IC_Start_IT+0x10a>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b08      	cmp	r3, #8
 8008456:	d104      	bne.n	8008462 <HAL_TIM_IC_Start_IT+0xe2>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008460:	e013      	b.n	800848a <HAL_TIM_IC_Start_IT+0x10a>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b0c      	cmp	r3, #12
 8008466:	d104      	bne.n	8008472 <HAL_TIM_IC_Start_IT+0xf2>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008470:	e00b      	b.n	800848a <HAL_TIM_IC_Start_IT+0x10a>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b10      	cmp	r3, #16
 8008476:	d104      	bne.n	8008482 <HAL_TIM_IC_Start_IT+0x102>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008480:	e003      	b.n	800848a <HAL_TIM_IC_Start_IT+0x10a>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2202      	movs	r2, #2
 8008486:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <HAL_TIM_IC_Start_IT+0x11a>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008498:	e013      	b.n	80084c2 <HAL_TIM_IC_Start_IT+0x142>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b04      	cmp	r3, #4
 800849e:	d104      	bne.n	80084aa <HAL_TIM_IC_Start_IT+0x12a>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084a8:	e00b      	b.n	80084c2 <HAL_TIM_IC_Start_IT+0x142>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b08      	cmp	r3, #8
 80084ae:	d104      	bne.n	80084ba <HAL_TIM_IC_Start_IT+0x13a>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084b8:	e003      	b.n	80084c2 <HAL_TIM_IC_Start_IT+0x142>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2202      	movs	r2, #2
 80084be:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b0c      	cmp	r3, #12
 80084c6:	d841      	bhi.n	800854c <HAL_TIM_IC_Start_IT+0x1cc>
 80084c8:	a201      	add	r2, pc, #4	@ (adr r2, 80084d0 <HAL_TIM_IC_Start_IT+0x150>)
 80084ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ce:	bf00      	nop
 80084d0:	08008505 	.word	0x08008505
 80084d4:	0800854d 	.word	0x0800854d
 80084d8:	0800854d 	.word	0x0800854d
 80084dc:	0800854d 	.word	0x0800854d
 80084e0:	08008517 	.word	0x08008517
 80084e4:	0800854d 	.word	0x0800854d
 80084e8:	0800854d 	.word	0x0800854d
 80084ec:	0800854d 	.word	0x0800854d
 80084f0:	08008529 	.word	0x08008529
 80084f4:	0800854d 	.word	0x0800854d
 80084f8:	0800854d 	.word	0x0800854d
 80084fc:	0800854d 	.word	0x0800854d
 8008500:	0800853b 	.word	0x0800853b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f042 0202 	orr.w	r2, r2, #2
 8008512:	60da      	str	r2, [r3, #12]
      break;
 8008514:	e01d      	b.n	8008552 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f042 0204 	orr.w	r2, r2, #4
 8008524:	60da      	str	r2, [r3, #12]
      break;
 8008526:	e014      	b.n	8008552 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68da      	ldr	r2, [r3, #12]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f042 0208 	orr.w	r2, r2, #8
 8008536:	60da      	str	r2, [r3, #12]
      break;
 8008538:	e00b      	b.n	8008552 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f042 0210 	orr.w	r2, r2, #16
 8008548:	60da      	str	r2, [r3, #12]
      break;
 800854a:	e002      	b.n	8008552 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	73fb      	strb	r3, [r7, #15]
      break;
 8008550:	bf00      	nop
  }

  if (status == HAL_OK)
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d14e      	bne.n	80085f6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2201      	movs	r2, #1
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	4618      	mov	r0, r3
 8008562:	f000 fd9d 	bl	80090a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a25      	ldr	r2, [pc, #148]	@ (8008600 <HAL_TIM_IC_Start_IT+0x280>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d022      	beq.n	80085b6 <HAL_TIM_IC_Start_IT+0x236>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008578:	d01d      	beq.n	80085b6 <HAL_TIM_IC_Start_IT+0x236>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a21      	ldr	r2, [pc, #132]	@ (8008604 <HAL_TIM_IC_Start_IT+0x284>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d018      	beq.n	80085b6 <HAL_TIM_IC_Start_IT+0x236>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a1f      	ldr	r2, [pc, #124]	@ (8008608 <HAL_TIM_IC_Start_IT+0x288>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d013      	beq.n	80085b6 <HAL_TIM_IC_Start_IT+0x236>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a1e      	ldr	r2, [pc, #120]	@ (800860c <HAL_TIM_IC_Start_IT+0x28c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00e      	beq.n	80085b6 <HAL_TIM_IC_Start_IT+0x236>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a1c      	ldr	r2, [pc, #112]	@ (8008610 <HAL_TIM_IC_Start_IT+0x290>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d009      	beq.n	80085b6 <HAL_TIM_IC_Start_IT+0x236>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a1b      	ldr	r2, [pc, #108]	@ (8008614 <HAL_TIM_IC_Start_IT+0x294>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d004      	beq.n	80085b6 <HAL_TIM_IC_Start_IT+0x236>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a19      	ldr	r2, [pc, #100]	@ (8008618 <HAL_TIM_IC_Start_IT+0x298>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d115      	bne.n	80085e2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	4b17      	ldr	r3, [pc, #92]	@ (800861c <HAL_TIM_IC_Start_IT+0x29c>)
 80085be:	4013      	ands	r3, r2
 80085c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b06      	cmp	r3, #6
 80085c6:	d015      	beq.n	80085f4 <HAL_TIM_IC_Start_IT+0x274>
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085ce:	d011      	beq.n	80085f4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0201 	orr.w	r2, r2, #1
 80085de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085e0:	e008      	b.n	80085f4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f042 0201 	orr.w	r2, r2, #1
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	e000      	b.n	80085f6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085f4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	40010000 	.word	0x40010000
 8008604:	40000400 	.word	0x40000400
 8008608:	40000800 	.word	0x40000800
 800860c:	40000c00 	.word	0x40000c00
 8008610:	40010400 	.word	0x40010400
 8008614:	40014000 	.word	0x40014000
 8008618:	40001800 	.word	0x40001800
 800861c:	00010007 	.word	0x00010007

08008620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b00      	cmp	r3, #0
 8008640:	d020      	beq.n	8008684 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f003 0302 	and.w	r3, r3, #2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01b      	beq.n	8008684 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f06f 0202 	mvn.w	r2, #2
 8008654:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f003 0303 	and.w	r3, r3, #3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7fb f8a6 	bl	80037bc <HAL_TIM_IC_CaptureCallback>
 8008670:	e005      	b.n	800867e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fa86 	bl	8008b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fa8d 	bl	8008b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	f003 0304 	and.w	r3, r3, #4
 800868a:	2b00      	cmp	r3, #0
 800868c:	d020      	beq.n	80086d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b00      	cmp	r3, #0
 8008696:	d01b      	beq.n	80086d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f06f 0204 	mvn.w	r2, #4
 80086a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2202      	movs	r2, #2
 80086a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7fb f880 	bl	80037bc <HAL_TIM_IC_CaptureCallback>
 80086bc:	e005      	b.n	80086ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa60 	bl	8008b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fa67 	bl	8008b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d020      	beq.n	800871c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f003 0308 	and.w	r3, r3, #8
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01b      	beq.n	800871c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f06f 0208 	mvn.w	r2, #8
 80086ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2204      	movs	r2, #4
 80086f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	f003 0303 	and.w	r3, r3, #3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7fb f85a 	bl	80037bc <HAL_TIM_IC_CaptureCallback>
 8008708:	e005      	b.n	8008716 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fa3a 	bl	8008b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fa41 	bl	8008b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f003 0310 	and.w	r3, r3, #16
 8008722:	2b00      	cmp	r3, #0
 8008724:	d020      	beq.n	8008768 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	2b00      	cmp	r3, #0
 800872e:	d01b      	beq.n	8008768 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f06f 0210 	mvn.w	r2, #16
 8008738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2208      	movs	r2, #8
 800873e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7fb f834 	bl	80037bc <HAL_TIM_IC_CaptureCallback>
 8008754:	e005      	b.n	8008762 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fa14 	bl	8008b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fa1b 	bl	8008b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00c      	beq.n	800878c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f003 0301 	and.w	r3, r3, #1
 8008778:	2b00      	cmp	r3, #0
 800877a:	d007      	beq.n	800878c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f06f 0201 	mvn.w	r2, #1
 8008784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7fa fffc 	bl	8003784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008792:	2b00      	cmp	r3, #0
 8008794:	d104      	bne.n	80087a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00c      	beq.n	80087ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d007      	beq.n	80087ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80087b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fd31 	bl	800921c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00c      	beq.n	80087de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d007      	beq.n	80087de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80087d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fd29 	bl	8009230 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00c      	beq.n	8008802 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d007      	beq.n	8008802 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80087fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f9d5 	bl	8008bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f003 0320 	and.w	r3, r3, #32
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00c      	beq.n	8008826 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f003 0320 	and.w	r3, r3, #32
 8008812:	2b00      	cmp	r3, #0
 8008814:	d007      	beq.n	8008826 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f06f 0220 	mvn.w	r2, #32
 800881e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fcf1 	bl	8009208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008826:	bf00      	nop
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b086      	sub	sp, #24
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008844:	2b01      	cmp	r3, #1
 8008846:	d101      	bne.n	800884c <HAL_TIM_IC_ConfigChannel+0x1e>
 8008848:	2302      	movs	r3, #2
 800884a:	e088      	b.n	800895e <HAL_TIM_IC_ConfigChannel+0x130>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d11b      	bne.n	8008892 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800886a:	f000 fa55 	bl	8008d18 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	699a      	ldr	r2, [r3, #24]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f022 020c 	bic.w	r2, r2, #12
 800887c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	6999      	ldr	r1, [r3, #24]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	689a      	ldr	r2, [r3, #8]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	619a      	str	r2, [r3, #24]
 8008890:	e060      	b.n	8008954 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b04      	cmp	r3, #4
 8008896:	d11c      	bne.n	80088d2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80088a8:	f000 fad9 	bl	8008e5e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80088ba:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6999      	ldr	r1, [r3, #24]
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	021a      	lsls	r2, r3, #8
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	619a      	str	r2, [r3, #24]
 80088d0:	e040      	b.n	8008954 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d11b      	bne.n	8008910 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80088e8:	f000 fb26 	bl	8008f38 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	69da      	ldr	r2, [r3, #28]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f022 020c 	bic.w	r2, r2, #12
 80088fa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	69d9      	ldr	r1, [r3, #28]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	689a      	ldr	r2, [r3, #8]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	430a      	orrs	r2, r1
 800890c:	61da      	str	r2, [r3, #28]
 800890e:	e021      	b.n	8008954 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b0c      	cmp	r3, #12
 8008914:	d11c      	bne.n	8008950 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008926:	f000 fb43 	bl	8008fb0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	69da      	ldr	r2, [r3, #28]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008938:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69d9      	ldr	r1, [r3, #28]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	021a      	lsls	r2, r3, #8
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	61da      	str	r2, [r3, #28]
 800894e:	e001      	b.n	8008954 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800895c:	7dfb      	ldrb	r3, [r7, #23]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
	...

08008968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800897c:	2b01      	cmp	r3, #1
 800897e:	d101      	bne.n	8008984 <HAL_TIM_ConfigClockSource+0x1c>
 8008980:	2302      	movs	r3, #2
 8008982:	e0b4      	b.n	8008aee <HAL_TIM_ConfigClockSource+0x186>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	4b56      	ldr	r3, [pc, #344]	@ (8008af8 <HAL_TIM_ConfigClockSource+0x190>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089bc:	d03e      	beq.n	8008a3c <HAL_TIM_ConfigClockSource+0xd4>
 80089be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089c2:	f200 8087 	bhi.w	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ca:	f000 8086 	beq.w	8008ada <HAL_TIM_ConfigClockSource+0x172>
 80089ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089d2:	d87f      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089d4:	2b70      	cmp	r3, #112	@ 0x70
 80089d6:	d01a      	beq.n	8008a0e <HAL_TIM_ConfigClockSource+0xa6>
 80089d8:	2b70      	cmp	r3, #112	@ 0x70
 80089da:	d87b      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089dc:	2b60      	cmp	r3, #96	@ 0x60
 80089de:	d050      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x11a>
 80089e0:	2b60      	cmp	r3, #96	@ 0x60
 80089e2:	d877      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089e4:	2b50      	cmp	r3, #80	@ 0x50
 80089e6:	d03c      	beq.n	8008a62 <HAL_TIM_ConfigClockSource+0xfa>
 80089e8:	2b50      	cmp	r3, #80	@ 0x50
 80089ea:	d873      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089ec:	2b40      	cmp	r3, #64	@ 0x40
 80089ee:	d058      	beq.n	8008aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80089f0:	2b40      	cmp	r3, #64	@ 0x40
 80089f2:	d86f      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089f4:	2b30      	cmp	r3, #48	@ 0x30
 80089f6:	d064      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80089f8:	2b30      	cmp	r3, #48	@ 0x30
 80089fa:	d86b      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80089fc:	2b20      	cmp	r3, #32
 80089fe:	d060      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a00:	2b20      	cmp	r3, #32
 8008a02:	d867      	bhi.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d05c      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a08:	2b10      	cmp	r3, #16
 8008a0a:	d05a      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8008a0c:	e062      	b.n	8008ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a1e:	f000 fb1f 	bl	8009060 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	609a      	str	r2, [r3, #8]
      break;
 8008a3a:	e04f      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a4c:	f000 fb08 	bl	8009060 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689a      	ldr	r2, [r3, #8]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a5e:	609a      	str	r2, [r3, #8]
      break;
 8008a60:	e03c      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f000 f9c6 	bl	8008e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2150      	movs	r1, #80	@ 0x50
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 fad5 	bl	800902a <TIM_ITRx_SetConfig>
      break;
 8008a80:	e02c      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f000 fa22 	bl	8008ed8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2160      	movs	r1, #96	@ 0x60
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fac5 	bl	800902a <TIM_ITRx_SetConfig>
      break;
 8008aa0:	e01c      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f000 f9a6 	bl	8008e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2140      	movs	r1, #64	@ 0x40
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 fab5 	bl	800902a <TIM_ITRx_SetConfig>
      break;
 8008ac0:	e00c      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4619      	mov	r1, r3
 8008acc:	4610      	mov	r0, r2
 8008ace:	f000 faac 	bl	800902a <TIM_ITRx_SetConfig>
      break;
 8008ad2:	e003      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad8:	e000      	b.n	8008adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	fffeff88 	.word	0xfffeff88

08008afc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b0c      	cmp	r3, #12
 8008b0e:	d831      	bhi.n	8008b74 <HAL_TIM_ReadCapturedValue+0x78>
 8008b10:	a201      	add	r2, pc, #4	@ (adr r2, 8008b18 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b4d 	.word	0x08008b4d
 8008b1c:	08008b75 	.word	0x08008b75
 8008b20:	08008b75 	.word	0x08008b75
 8008b24:	08008b75 	.word	0x08008b75
 8008b28:	08008b57 	.word	0x08008b57
 8008b2c:	08008b75 	.word	0x08008b75
 8008b30:	08008b75 	.word	0x08008b75
 8008b34:	08008b75 	.word	0x08008b75
 8008b38:	08008b61 	.word	0x08008b61
 8008b3c:	08008b75 	.word	0x08008b75
 8008b40:	08008b75 	.word	0x08008b75
 8008b44:	08008b75 	.word	0x08008b75
 8008b48:	08008b6b 	.word	0x08008b6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b52:	60fb      	str	r3, [r7, #12]

      break;
 8008b54:	e00f      	b.n	8008b76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b5c:	60fb      	str	r3, [r7, #12]

      break;
 8008b5e:	e00a      	b.n	8008b76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b66:	60fb      	str	r3, [r7, #12]

      break;
 8008b68:	e005      	b.n	8008b76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b70:	60fb      	str	r3, [r7, #12]

      break;
 8008b72:	e000      	b.n	8008b76 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008b74:	bf00      	nop
  }

  return tmpreg;
 8008b76:	68fb      	ldr	r3, [r7, #12]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a46      	ldr	r2, [pc, #280]	@ (8008cec <TIM_Base_SetConfig+0x12c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d013      	beq.n	8008c00 <TIM_Base_SetConfig+0x40>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bde:	d00f      	beq.n	8008c00 <TIM_Base_SetConfig+0x40>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a43      	ldr	r2, [pc, #268]	@ (8008cf0 <TIM_Base_SetConfig+0x130>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d00b      	beq.n	8008c00 <TIM_Base_SetConfig+0x40>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a42      	ldr	r2, [pc, #264]	@ (8008cf4 <TIM_Base_SetConfig+0x134>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d007      	beq.n	8008c00 <TIM_Base_SetConfig+0x40>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a41      	ldr	r2, [pc, #260]	@ (8008cf8 <TIM_Base_SetConfig+0x138>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d003      	beq.n	8008c00 <TIM_Base_SetConfig+0x40>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a40      	ldr	r2, [pc, #256]	@ (8008cfc <TIM_Base_SetConfig+0x13c>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d108      	bne.n	8008c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a35      	ldr	r2, [pc, #212]	@ (8008cec <TIM_Base_SetConfig+0x12c>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d02b      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c20:	d027      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a32      	ldr	r2, [pc, #200]	@ (8008cf0 <TIM_Base_SetConfig+0x130>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d023      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a31      	ldr	r2, [pc, #196]	@ (8008cf4 <TIM_Base_SetConfig+0x134>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d01f      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a30      	ldr	r2, [pc, #192]	@ (8008cf8 <TIM_Base_SetConfig+0x138>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d01b      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a2f      	ldr	r2, [pc, #188]	@ (8008cfc <TIM_Base_SetConfig+0x13c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d017      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a2e      	ldr	r2, [pc, #184]	@ (8008d00 <TIM_Base_SetConfig+0x140>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d013      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8008d04 <TIM_Base_SetConfig+0x144>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00f      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a2c      	ldr	r2, [pc, #176]	@ (8008d08 <TIM_Base_SetConfig+0x148>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d00b      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8008d0c <TIM_Base_SetConfig+0x14c>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d007      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a2a      	ldr	r2, [pc, #168]	@ (8008d10 <TIM_Base_SetConfig+0x150>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d003      	beq.n	8008c72 <TIM_Base_SetConfig+0xb2>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a29      	ldr	r2, [pc, #164]	@ (8008d14 <TIM_Base_SetConfig+0x154>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d108      	bne.n	8008c84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	689a      	ldr	r2, [r3, #8]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a10      	ldr	r2, [pc, #64]	@ (8008cec <TIM_Base_SetConfig+0x12c>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d003      	beq.n	8008cb8 <TIM_Base_SetConfig+0xf8>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a12      	ldr	r2, [pc, #72]	@ (8008cfc <TIM_Base_SetConfig+0x13c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d103      	bne.n	8008cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	691a      	ldr	r2, [r3, #16]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d105      	bne.n	8008cde <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	f023 0201 	bic.w	r2, r3, #1
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	611a      	str	r2, [r3, #16]
  }
}
 8008cde:	bf00      	nop
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40010000 	.word	0x40010000
 8008cf0:	40000400 	.word	0x40000400
 8008cf4:	40000800 	.word	0x40000800
 8008cf8:	40000c00 	.word	0x40000c00
 8008cfc:	40010400 	.word	0x40010400
 8008d00:	40014000 	.word	0x40014000
 8008d04:	40014400 	.word	0x40014400
 8008d08:	40014800 	.word	0x40014800
 8008d0c:	40001800 	.word	0x40001800
 8008d10:	40001c00 	.word	0x40001c00
 8008d14:	40002000 	.word	0x40002000

08008d18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b087      	sub	sp, #28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
 8008d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	f023 0201 	bic.w	r2, r3, #1
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	699b      	ldr	r3, [r3, #24]
 8008d3c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	4a28      	ldr	r2, [pc, #160]	@ (8008de4 <TIM_TI1_SetConfig+0xcc>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d01b      	beq.n	8008d7e <TIM_TI1_SetConfig+0x66>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d4c:	d017      	beq.n	8008d7e <TIM_TI1_SetConfig+0x66>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	4a25      	ldr	r2, [pc, #148]	@ (8008de8 <TIM_TI1_SetConfig+0xd0>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d013      	beq.n	8008d7e <TIM_TI1_SetConfig+0x66>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	4a24      	ldr	r2, [pc, #144]	@ (8008dec <TIM_TI1_SetConfig+0xd4>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d00f      	beq.n	8008d7e <TIM_TI1_SetConfig+0x66>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4a23      	ldr	r2, [pc, #140]	@ (8008df0 <TIM_TI1_SetConfig+0xd8>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00b      	beq.n	8008d7e <TIM_TI1_SetConfig+0x66>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	4a22      	ldr	r2, [pc, #136]	@ (8008df4 <TIM_TI1_SetConfig+0xdc>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d007      	beq.n	8008d7e <TIM_TI1_SetConfig+0x66>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	4a21      	ldr	r2, [pc, #132]	@ (8008df8 <TIM_TI1_SetConfig+0xe0>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d003      	beq.n	8008d7e <TIM_TI1_SetConfig+0x66>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4a20      	ldr	r2, [pc, #128]	@ (8008dfc <TIM_TI1_SetConfig+0xe4>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d101      	bne.n	8008d82 <TIM_TI1_SetConfig+0x6a>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e000      	b.n	8008d84 <TIM_TI1_SetConfig+0x6c>
 8008d82:	2300      	movs	r3, #0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d008      	beq.n	8008d9a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f023 0303 	bic.w	r3, r3, #3
 8008d8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d90:	697a      	ldr	r2, [r7, #20]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]
 8008d98:	e003      	b.n	8008da2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f043 0301 	orr.w	r3, r3, #1
 8008da0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008da8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	011b      	lsls	r3, r3, #4
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f023 030a 	bic.w	r3, r3, #10
 8008dbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f003 030a 	and.w	r3, r3, #10
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	621a      	str	r2, [r3, #32]
}
 8008dd6:	bf00      	nop
 8008dd8:	371c      	adds	r7, #28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	40010000 	.word	0x40010000
 8008de8:	40000400 	.word	0x40000400
 8008dec:	40000800 	.word	0x40000800
 8008df0:	40000c00 	.word	0x40000c00
 8008df4:	40010400 	.word	0x40010400
 8008df8:	40014000 	.word	0x40014000
 8008dfc:	40001800 	.word	0x40001800

08008e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	f023 0201 	bic.w	r2, r3, #1
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f023 030a 	bic.w	r3, r3, #10
 8008e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	621a      	str	r2, [r3, #32]
}
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b087      	sub	sp, #28
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	60b9      	str	r1, [r7, #8]
 8008e68:	607a      	str	r2, [r7, #4]
 8008e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	f023 0210 	bic.w	r2, r3, #16
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	021b      	lsls	r3, r3, #8
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	031b      	lsls	r3, r3, #12
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	621a      	str	r2, [r3, #32]
}
 8008ecc:	bf00      	nop
 8008ece:	371c      	adds	r7, #28
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b087      	sub	sp, #28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	f023 0210 	bic.w	r2, r3, #16
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	031b      	lsls	r3, r3, #12
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	621a      	str	r2, [r3, #32]
}
 8008f2c:	bf00      	nop
 8008f2e:	371c      	adds	r7, #28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f023 0303 	bic.w	r3, r3, #3
 8008f64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	011b      	lsls	r3, r3, #4
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008f88:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	021b      	lsls	r3, r3, #8
 8008f8e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	697a      	ldr	r2, [r7, #20]
 8008fa2:	621a      	str	r2, [r3, #32]
}
 8008fa4:	bf00      	nop
 8008fa6:	371c      	adds	r7, #28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008fee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	031b      	lsls	r3, r3, #12
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009002:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	031b      	lsls	r3, r3, #12
 8009008:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	4313      	orrs	r3, r2
 8009010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	621a      	str	r2, [r3, #32]
}
 800901e:	bf00      	nop
 8009020:	371c      	adds	r7, #28
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	f043 0307 	orr.w	r3, r3, #7
 800904c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	609a      	str	r2, [r3, #8]
}
 8009054:	bf00      	nop
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800907a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	021a      	lsls	r2, r3, #8
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	431a      	orrs	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	4313      	orrs	r3, r2
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	4313      	orrs	r3, r2
 800908c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	609a      	str	r2, [r3, #8]
}
 8009094:	bf00      	nop
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f003 031f 	and.w	r3, r3, #31
 80090b2:	2201      	movs	r2, #1
 80090b4:	fa02 f303 	lsl.w	r3, r2, r3
 80090b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6a1a      	ldr	r2, [r3, #32]
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	43db      	mvns	r3, r3
 80090c2:	401a      	ands	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a1a      	ldr	r2, [r3, #32]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f003 031f 	and.w	r3, r3, #31
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	fa01 f303 	lsl.w	r3, r1, r3
 80090d8:	431a      	orrs	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	621a      	str	r2, [r3, #32]
}
 80090de:	bf00      	nop
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
	...

080090ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d101      	bne.n	8009104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009100:	2302      	movs	r3, #2
 8009102:	e06d      	b.n	80091e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2202      	movs	r2, #2
 8009110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a30      	ldr	r2, [pc, #192]	@ (80091ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d004      	beq.n	8009138 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a2f      	ldr	r2, [pc, #188]	@ (80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d108      	bne.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800913e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009150:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	4313      	orrs	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a20      	ldr	r2, [pc, #128]	@ (80091ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d022      	beq.n	80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009176:	d01d      	beq.n	80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a1d      	ldr	r2, [pc, #116]	@ (80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d018      	beq.n	80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a1c      	ldr	r2, [pc, #112]	@ (80091f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d013      	beq.n	80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a1a      	ldr	r2, [pc, #104]	@ (80091fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d00e      	beq.n	80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a15      	ldr	r2, [pc, #84]	@ (80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d009      	beq.n	80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a16      	ldr	r2, [pc, #88]	@ (8009200 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d004      	beq.n	80091b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a15      	ldr	r2, [pc, #84]	@ (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d10c      	bne.n	80091ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	40010000 	.word	0x40010000
 80091f0:	40010400 	.word	0x40010400
 80091f4:	40000400 	.word	0x40000400
 80091f8:	40000800 	.word	0x40000800
 80091fc:	40000c00 	.word	0x40000c00
 8009200:	40014000 	.word	0x40014000
 8009204:	40001800 	.word	0x40001800

08009208 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e040      	b.n	80092d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800925a:	2b00      	cmp	r3, #0
 800925c:	d106      	bne.n	800926c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7fa f8fa 	bl	8003460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2224      	movs	r2, #36	@ 0x24
 8009270:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f022 0201 	bic.w	r2, r2, #1
 8009280:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009286:	2b00      	cmp	r3, #0
 8009288:	d002      	beq.n	8009290 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fe24 	bl	8009ed8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fbbd 	bl	8009a10 <UART_SetConfig>
 8009296:	4603      	mov	r3, r0
 8009298:	2b01      	cmp	r3, #1
 800929a:	d101      	bne.n	80092a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e01b      	b.n	80092d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80092ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689a      	ldr	r2, [r3, #8]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80092be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f042 0201 	orr.w	r2, r2, #1
 80092ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fea3 	bl	800a01c <UART_CheckIdleState>
 80092d6:	4603      	mov	r3, r0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08a      	sub	sp, #40	@ 0x28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	4613      	mov	r3, r2
 80092ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80092f2:	2b20      	cmp	r3, #32
 80092f4:	d165      	bne.n	80093c2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <HAL_UART_Transmit_DMA+0x22>
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e05e      	b.n	80093c4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	88fa      	ldrh	r2, [r7, #6]
 8009310:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	88fa      	ldrh	r2, [r7, #6]
 8009318:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2221      	movs	r2, #33	@ 0x21
 8009328:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800932e:	2b00      	cmp	r3, #0
 8009330:	d027      	beq.n	8009382 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009336:	4a25      	ldr	r2, [pc, #148]	@ (80093cc <HAL_UART_Transmit_DMA+0xec>)
 8009338:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933e:	4a24      	ldr	r2, [pc, #144]	@ (80093d0 <HAL_UART_Transmit_DMA+0xf0>)
 8009340:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009346:	4a23      	ldr	r2, [pc, #140]	@ (80093d4 <HAL_UART_Transmit_DMA+0xf4>)
 8009348:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800934e:	2200      	movs	r2, #0
 8009350:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800935a:	4619      	mov	r1, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3328      	adds	r3, #40	@ 0x28
 8009362:	461a      	mov	r2, r3
 8009364:	88fb      	ldrh	r3, [r7, #6]
 8009366:	f7fb fa3d 	bl	80047e4 <HAL_DMA_Start_IT>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d008      	beq.n	8009382 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2210      	movs	r2, #16
 8009374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2220      	movs	r2, #32
 800937c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e020      	b.n	80093c4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2240      	movs	r2, #64	@ 0x40
 8009388:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3308      	adds	r3, #8
 8009390:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	e853 3f00 	ldrex	r3, [r3]
 8009398:	613b      	str	r3, [r7, #16]
   return(result);
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	3308      	adds	r3, #8
 80093a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093aa:	623a      	str	r2, [r7, #32]
 80093ac:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ae:	69f9      	ldr	r1, [r7, #28]
 80093b0:	6a3a      	ldr	r2, [r7, #32]
 80093b2:	e841 2300 	strex	r3, r2, [r1]
 80093b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1e5      	bne.n	800938a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	e000      	b.n	80093c4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80093c2:	2302      	movs	r3, #2
  }
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3728      	adds	r7, #40	@ 0x28
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	0800a35b 	.word	0x0800a35b
 80093d0:	0800a3f1 	.word	0x0800a3f1
 80093d4:	0800a40d 	.word	0x0800a40d

080093d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b0ba      	sub	sp, #232	@ 0xe8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009402:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009406:	4013      	ands	r3, r2
 8009408:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800940c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009410:	2b00      	cmp	r3, #0
 8009412:	d115      	bne.n	8009440 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009418:	f003 0320 	and.w	r3, r3, #32
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00f      	beq.n	8009440 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009424:	f003 0320 	and.w	r3, r3, #32
 8009428:	2b00      	cmp	r3, #0
 800942a:	d009      	beq.n	8009440 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 82ac 	beq.w	800998e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
      }
      return;
 800943e:	e2a6      	b.n	800998e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009440:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 8117 	beq.w	8009678 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800944a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d106      	bne.n	8009464 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009456:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800945a:	4b85      	ldr	r3, [pc, #532]	@ (8009670 <HAL_UART_IRQHandler+0x298>)
 800945c:	4013      	ands	r3, r2
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 810a 	beq.w	8009678 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	d011      	beq.n	8009494 <HAL_UART_IRQHandler+0xbc>
 8009470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00b      	beq.n	8009494 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2201      	movs	r2, #1
 8009482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800948a:	f043 0201 	orr.w	r2, r3, #1
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009498:	f003 0302 	and.w	r3, r3, #2
 800949c:	2b00      	cmp	r3, #0
 800949e:	d011      	beq.n	80094c4 <HAL_UART_IRQHandler+0xec>
 80094a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00b      	beq.n	80094c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2202      	movs	r2, #2
 80094b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094ba:	f043 0204 	orr.w	r2, r3, #4
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d011      	beq.n	80094f4 <HAL_UART_IRQHandler+0x11c>
 80094d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00b      	beq.n	80094f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2204      	movs	r2, #4
 80094e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094ea:	f043 0202 	orr.w	r2, r3, #2
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094f8:	f003 0308 	and.w	r3, r3, #8
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d017      	beq.n	8009530 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009504:	f003 0320 	and.w	r3, r3, #32
 8009508:	2b00      	cmp	r3, #0
 800950a:	d105      	bne.n	8009518 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800950c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009510:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00b      	beq.n	8009530 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2208      	movs	r2, #8
 800951e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009526:	f043 0208 	orr.w	r2, r3, #8
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009538:	2b00      	cmp	r3, #0
 800953a:	d012      	beq.n	8009562 <HAL_UART_IRQHandler+0x18a>
 800953c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009540:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00c      	beq.n	8009562 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009558:	f043 0220 	orr.w	r2, r3, #32
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 8212 	beq.w	8009992 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800956e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009572:	f003 0320 	and.w	r3, r3, #32
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00d      	beq.n	8009596 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800957a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800957e:	f003 0320 	and.w	r3, r3, #32
 8009582:	2b00      	cmp	r3, #0
 8009584:	d007      	beq.n	8009596 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800959c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095aa:	2b40      	cmp	r3, #64	@ 0x40
 80095ac:	d005      	beq.n	80095ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80095b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d04f      	beq.n	800965a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fe69 	bl	800a292 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095ca:	2b40      	cmp	r3, #64	@ 0x40
 80095cc:	d141      	bne.n	8009652 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3308      	adds	r3, #8
 80095d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80095e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3308      	adds	r3, #8
 80095f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80095fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80095fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800960a:	e841 2300 	strex	r3, r2, [r1]
 800960e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1d9      	bne.n	80095ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800961e:	2b00      	cmp	r3, #0
 8009620:	d013      	beq.n	800964a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009626:	4a13      	ldr	r2, [pc, #76]	@ (8009674 <HAL_UART_IRQHandler+0x29c>)
 8009628:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800962e:	4618      	mov	r0, r3
 8009630:	f7fb f9a8 	bl	8004984 <HAL_DMA_Abort_IT>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d017      	beq.n	800966a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800963e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009644:	4610      	mov	r0, r2
 8009646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009648:	e00f      	b.n	800966a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f9c0 	bl	80099d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009650:	e00b      	b.n	800966a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f9bc 	bl	80099d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009658:	e007      	b.n	800966a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f9b8 	bl	80099d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009668:	e193      	b.n	8009992 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800966a:	bf00      	nop
    return;
 800966c:	e191      	b.n	8009992 <HAL_UART_IRQHandler+0x5ba>
 800966e:	bf00      	nop
 8009670:	04000120 	.word	0x04000120
 8009674:	0800a48b 	.word	0x0800a48b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800967c:	2b01      	cmp	r3, #1
 800967e:	f040 814c 	bne.w	800991a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009686:	f003 0310 	and.w	r3, r3, #16
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 8145 	beq.w	800991a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009694:	f003 0310 	and.w	r3, r3, #16
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 813e 	beq.w	800991a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2210      	movs	r2, #16
 80096a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096b0:	2b40      	cmp	r3, #64	@ 0x40
 80096b2:	f040 80b6 	bne.w	8009822 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 8165 	beq.w	8009996 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80096d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80096d6:	429a      	cmp	r2, r3
 80096d8:	f080 815d 	bcs.w	8009996 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80096e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096f0:	f000 8086 	beq.w	8009800 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009700:	e853 3f00 	ldrex	r3, [r3]
 8009704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009708:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800970c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	461a      	mov	r2, r3
 800971a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800971e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009722:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800972a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800972e:	e841 2300 	strex	r3, r2, [r1]
 8009732:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1da      	bne.n	80096f4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3308      	adds	r3, #8
 8009744:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009748:	e853 3f00 	ldrex	r3, [r3]
 800974c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800974e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009750:	f023 0301 	bic.w	r3, r3, #1
 8009754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3308      	adds	r3, #8
 800975e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009762:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009766:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009768:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800976a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800976e:	e841 2300 	strex	r3, r2, [r1]
 8009772:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1e1      	bne.n	800973e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3308      	adds	r3, #8
 8009780:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009784:	e853 3f00 	ldrex	r3, [r3]
 8009788:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800978a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800978c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009790:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	3308      	adds	r3, #8
 800979a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800979e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80097a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80097a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097a6:	e841 2300 	strex	r3, r2, [r1]
 80097aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80097ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1e3      	bne.n	800977a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097c8:	e853 3f00 	ldrex	r3, [r3]
 80097cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097d0:	f023 0310 	bic.w	r3, r3, #16
 80097d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80097e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097ea:	e841 2300 	strex	r3, r2, [r1]
 80097ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1e4      	bne.n	80097c0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fb f852 	bl	80048a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009812:	b29b      	uxth	r3, r3
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	b29b      	uxth	r3, r3
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f8e2 	bl	80099e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009820:	e0b9      	b.n	8009996 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800982e:	b29b      	uxth	r3, r3
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800983c:	b29b      	uxth	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 80ab 	beq.w	800999a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8009844:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 80a6 	beq.w	800999a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009856:	e853 3f00 	ldrex	r3, [r3]
 800985a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800985c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800985e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009862:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009870:	647b      	str	r3, [r7, #68]	@ 0x44
 8009872:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009874:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009878:	e841 2300 	strex	r3, r2, [r1]
 800987c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800987e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1e4      	bne.n	800984e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3308      	adds	r3, #8
 800988a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988e:	e853 3f00 	ldrex	r3, [r3]
 8009892:	623b      	str	r3, [r7, #32]
   return(result);
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	f023 0301 	bic.w	r3, r3, #1
 800989a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	3308      	adds	r3, #8
 80098a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80098a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80098aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098b0:	e841 2300 	strex	r3, r2, [r1]
 80098b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1e3      	bne.n	8009884 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2220      	movs	r2, #32
 80098c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f023 0310 	bic.w	r3, r3, #16
 80098e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	461a      	mov	r2, r3
 80098ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80098f2:	61fb      	str	r3, [r7, #28]
 80098f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f6:	69b9      	ldr	r1, [r7, #24]
 80098f8:	69fa      	ldr	r2, [r7, #28]
 80098fa:	e841 2300 	strex	r3, r2, [r1]
 80098fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1e4      	bne.n	80098d0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2202      	movs	r2, #2
 800990a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800990c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f866 	bl	80099e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009918:	e03f      	b.n	800999a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800991a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800991e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00e      	beq.n	8009944 <HAL_UART_IRQHandler+0x56c>
 8009926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800992a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800992e:	2b00      	cmp	r3, #0
 8009930:	d008      	beq.n	8009944 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800993a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f85d 	bl	80099fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009942:	e02d      	b.n	80099a0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00e      	beq.n	800996e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009958:	2b00      	cmp	r3, #0
 800995a:	d008      	beq.n	800996e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009960:	2b00      	cmp	r3, #0
 8009962:	d01c      	beq.n	800999e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	4798      	blx	r3
    }
    return;
 800996c:	e017      	b.n	800999e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800996e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009976:	2b00      	cmp	r3, #0
 8009978:	d012      	beq.n	80099a0 <HAL_UART_IRQHandler+0x5c8>
 800997a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800997e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00c      	beq.n	80099a0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fd95 	bl	800a4b6 <UART_EndTransmit_IT>
    return;
 800998c:	e008      	b.n	80099a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 800998e:	bf00      	nop
 8009990:	e006      	b.n	80099a0 <HAL_UART_IRQHandler+0x5c8>
    return;
 8009992:	bf00      	nop
 8009994:	e004      	b.n	80099a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 8009996:	bf00      	nop
 8009998:	e002      	b.n	80099a0 <HAL_UART_IRQHandler+0x5c8>
      return;
 800999a:	bf00      	nop
 800999c:	e000      	b.n	80099a0 <HAL_UART_IRQHandler+0x5c8>
    return;
 800999e:	bf00      	nop
  }

}
 80099a0:	37e8      	adds	r7, #232	@ 0xe8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop

080099a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689a      	ldr	r2, [r3, #8]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	431a      	orrs	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	69db      	ldr	r3, [r3, #28]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	4ba6      	ldr	r3, [pc, #664]	@ (8009cd4 <UART_SetConfig+0x2c4>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	6812      	ldr	r2, [r2, #0]
 8009a42:	6979      	ldr	r1, [r7, #20]
 8009a44:	430b      	orrs	r3, r1
 8009a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68da      	ldr	r2, [r3, #12]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	699b      	ldr	r3, [r3, #24]
 8009a62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a94      	ldr	r2, [pc, #592]	@ (8009cd8 <UART_SetConfig+0x2c8>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d120      	bne.n	8009ace <UART_SetConfig+0xbe>
 8009a8c:	4b93      	ldr	r3, [pc, #588]	@ (8009cdc <UART_SetConfig+0x2cc>)
 8009a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a92:	f003 0303 	and.w	r3, r3, #3
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	d816      	bhi.n	8009ac8 <UART_SetConfig+0xb8>
 8009a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa0 <UART_SetConfig+0x90>)
 8009a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa0:	08009ab1 	.word	0x08009ab1
 8009aa4:	08009abd 	.word	0x08009abd
 8009aa8:	08009ab7 	.word	0x08009ab7
 8009aac:	08009ac3 	.word	0x08009ac3
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	77fb      	strb	r3, [r7, #31]
 8009ab4:	e150      	b.n	8009d58 <UART_SetConfig+0x348>
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	77fb      	strb	r3, [r7, #31]
 8009aba:	e14d      	b.n	8009d58 <UART_SetConfig+0x348>
 8009abc:	2304      	movs	r3, #4
 8009abe:	77fb      	strb	r3, [r7, #31]
 8009ac0:	e14a      	b.n	8009d58 <UART_SetConfig+0x348>
 8009ac2:	2308      	movs	r3, #8
 8009ac4:	77fb      	strb	r3, [r7, #31]
 8009ac6:	e147      	b.n	8009d58 <UART_SetConfig+0x348>
 8009ac8:	2310      	movs	r3, #16
 8009aca:	77fb      	strb	r3, [r7, #31]
 8009acc:	e144      	b.n	8009d58 <UART_SetConfig+0x348>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a83      	ldr	r2, [pc, #524]	@ (8009ce0 <UART_SetConfig+0x2d0>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d132      	bne.n	8009b3e <UART_SetConfig+0x12e>
 8009ad8:	4b80      	ldr	r3, [pc, #512]	@ (8009cdc <UART_SetConfig+0x2cc>)
 8009ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ade:	f003 030c 	and.w	r3, r3, #12
 8009ae2:	2b0c      	cmp	r3, #12
 8009ae4:	d828      	bhi.n	8009b38 <UART_SetConfig+0x128>
 8009ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aec <UART_SetConfig+0xdc>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009b21 	.word	0x08009b21
 8009af0:	08009b39 	.word	0x08009b39
 8009af4:	08009b39 	.word	0x08009b39
 8009af8:	08009b39 	.word	0x08009b39
 8009afc:	08009b2d 	.word	0x08009b2d
 8009b00:	08009b39 	.word	0x08009b39
 8009b04:	08009b39 	.word	0x08009b39
 8009b08:	08009b39 	.word	0x08009b39
 8009b0c:	08009b27 	.word	0x08009b27
 8009b10:	08009b39 	.word	0x08009b39
 8009b14:	08009b39 	.word	0x08009b39
 8009b18:	08009b39 	.word	0x08009b39
 8009b1c:	08009b33 	.word	0x08009b33
 8009b20:	2300      	movs	r3, #0
 8009b22:	77fb      	strb	r3, [r7, #31]
 8009b24:	e118      	b.n	8009d58 <UART_SetConfig+0x348>
 8009b26:	2302      	movs	r3, #2
 8009b28:	77fb      	strb	r3, [r7, #31]
 8009b2a:	e115      	b.n	8009d58 <UART_SetConfig+0x348>
 8009b2c:	2304      	movs	r3, #4
 8009b2e:	77fb      	strb	r3, [r7, #31]
 8009b30:	e112      	b.n	8009d58 <UART_SetConfig+0x348>
 8009b32:	2308      	movs	r3, #8
 8009b34:	77fb      	strb	r3, [r7, #31]
 8009b36:	e10f      	b.n	8009d58 <UART_SetConfig+0x348>
 8009b38:	2310      	movs	r3, #16
 8009b3a:	77fb      	strb	r3, [r7, #31]
 8009b3c:	e10c      	b.n	8009d58 <UART_SetConfig+0x348>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a68      	ldr	r2, [pc, #416]	@ (8009ce4 <UART_SetConfig+0x2d4>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d120      	bne.n	8009b8a <UART_SetConfig+0x17a>
 8009b48:	4b64      	ldr	r3, [pc, #400]	@ (8009cdc <UART_SetConfig+0x2cc>)
 8009b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009b52:	2b30      	cmp	r3, #48	@ 0x30
 8009b54:	d013      	beq.n	8009b7e <UART_SetConfig+0x16e>
 8009b56:	2b30      	cmp	r3, #48	@ 0x30
 8009b58:	d814      	bhi.n	8009b84 <UART_SetConfig+0x174>
 8009b5a:	2b20      	cmp	r3, #32
 8009b5c:	d009      	beq.n	8009b72 <UART_SetConfig+0x162>
 8009b5e:	2b20      	cmp	r3, #32
 8009b60:	d810      	bhi.n	8009b84 <UART_SetConfig+0x174>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d002      	beq.n	8009b6c <UART_SetConfig+0x15c>
 8009b66:	2b10      	cmp	r3, #16
 8009b68:	d006      	beq.n	8009b78 <UART_SetConfig+0x168>
 8009b6a:	e00b      	b.n	8009b84 <UART_SetConfig+0x174>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	77fb      	strb	r3, [r7, #31]
 8009b70:	e0f2      	b.n	8009d58 <UART_SetConfig+0x348>
 8009b72:	2302      	movs	r3, #2
 8009b74:	77fb      	strb	r3, [r7, #31]
 8009b76:	e0ef      	b.n	8009d58 <UART_SetConfig+0x348>
 8009b78:	2304      	movs	r3, #4
 8009b7a:	77fb      	strb	r3, [r7, #31]
 8009b7c:	e0ec      	b.n	8009d58 <UART_SetConfig+0x348>
 8009b7e:	2308      	movs	r3, #8
 8009b80:	77fb      	strb	r3, [r7, #31]
 8009b82:	e0e9      	b.n	8009d58 <UART_SetConfig+0x348>
 8009b84:	2310      	movs	r3, #16
 8009b86:	77fb      	strb	r3, [r7, #31]
 8009b88:	e0e6      	b.n	8009d58 <UART_SetConfig+0x348>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a56      	ldr	r2, [pc, #344]	@ (8009ce8 <UART_SetConfig+0x2d8>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d120      	bne.n	8009bd6 <UART_SetConfig+0x1c6>
 8009b94:	4b51      	ldr	r3, [pc, #324]	@ (8009cdc <UART_SetConfig+0x2cc>)
 8009b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009b9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ba0:	d013      	beq.n	8009bca <UART_SetConfig+0x1ba>
 8009ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ba4:	d814      	bhi.n	8009bd0 <UART_SetConfig+0x1c0>
 8009ba6:	2b80      	cmp	r3, #128	@ 0x80
 8009ba8:	d009      	beq.n	8009bbe <UART_SetConfig+0x1ae>
 8009baa:	2b80      	cmp	r3, #128	@ 0x80
 8009bac:	d810      	bhi.n	8009bd0 <UART_SetConfig+0x1c0>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d002      	beq.n	8009bb8 <UART_SetConfig+0x1a8>
 8009bb2:	2b40      	cmp	r3, #64	@ 0x40
 8009bb4:	d006      	beq.n	8009bc4 <UART_SetConfig+0x1b4>
 8009bb6:	e00b      	b.n	8009bd0 <UART_SetConfig+0x1c0>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	77fb      	strb	r3, [r7, #31]
 8009bbc:	e0cc      	b.n	8009d58 <UART_SetConfig+0x348>
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	77fb      	strb	r3, [r7, #31]
 8009bc2:	e0c9      	b.n	8009d58 <UART_SetConfig+0x348>
 8009bc4:	2304      	movs	r3, #4
 8009bc6:	77fb      	strb	r3, [r7, #31]
 8009bc8:	e0c6      	b.n	8009d58 <UART_SetConfig+0x348>
 8009bca:	2308      	movs	r3, #8
 8009bcc:	77fb      	strb	r3, [r7, #31]
 8009bce:	e0c3      	b.n	8009d58 <UART_SetConfig+0x348>
 8009bd0:	2310      	movs	r3, #16
 8009bd2:	77fb      	strb	r3, [r7, #31]
 8009bd4:	e0c0      	b.n	8009d58 <UART_SetConfig+0x348>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a44      	ldr	r2, [pc, #272]	@ (8009cec <UART_SetConfig+0x2dc>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d125      	bne.n	8009c2c <UART_SetConfig+0x21c>
 8009be0:	4b3e      	ldr	r3, [pc, #248]	@ (8009cdc <UART_SetConfig+0x2cc>)
 8009be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bee:	d017      	beq.n	8009c20 <UART_SetConfig+0x210>
 8009bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bf4:	d817      	bhi.n	8009c26 <UART_SetConfig+0x216>
 8009bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bfa:	d00b      	beq.n	8009c14 <UART_SetConfig+0x204>
 8009bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c00:	d811      	bhi.n	8009c26 <UART_SetConfig+0x216>
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <UART_SetConfig+0x1fe>
 8009c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c0a:	d006      	beq.n	8009c1a <UART_SetConfig+0x20a>
 8009c0c:	e00b      	b.n	8009c26 <UART_SetConfig+0x216>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	77fb      	strb	r3, [r7, #31]
 8009c12:	e0a1      	b.n	8009d58 <UART_SetConfig+0x348>
 8009c14:	2302      	movs	r3, #2
 8009c16:	77fb      	strb	r3, [r7, #31]
 8009c18:	e09e      	b.n	8009d58 <UART_SetConfig+0x348>
 8009c1a:	2304      	movs	r3, #4
 8009c1c:	77fb      	strb	r3, [r7, #31]
 8009c1e:	e09b      	b.n	8009d58 <UART_SetConfig+0x348>
 8009c20:	2308      	movs	r3, #8
 8009c22:	77fb      	strb	r3, [r7, #31]
 8009c24:	e098      	b.n	8009d58 <UART_SetConfig+0x348>
 8009c26:	2310      	movs	r3, #16
 8009c28:	77fb      	strb	r3, [r7, #31]
 8009c2a:	e095      	b.n	8009d58 <UART_SetConfig+0x348>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a2f      	ldr	r2, [pc, #188]	@ (8009cf0 <UART_SetConfig+0x2e0>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d125      	bne.n	8009c82 <UART_SetConfig+0x272>
 8009c36:	4b29      	ldr	r3, [pc, #164]	@ (8009cdc <UART_SetConfig+0x2cc>)
 8009c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009c40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c44:	d017      	beq.n	8009c76 <UART_SetConfig+0x266>
 8009c46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c4a:	d817      	bhi.n	8009c7c <UART_SetConfig+0x26c>
 8009c4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c50:	d00b      	beq.n	8009c6a <UART_SetConfig+0x25a>
 8009c52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c56:	d811      	bhi.n	8009c7c <UART_SetConfig+0x26c>
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <UART_SetConfig+0x254>
 8009c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c60:	d006      	beq.n	8009c70 <UART_SetConfig+0x260>
 8009c62:	e00b      	b.n	8009c7c <UART_SetConfig+0x26c>
 8009c64:	2301      	movs	r3, #1
 8009c66:	77fb      	strb	r3, [r7, #31]
 8009c68:	e076      	b.n	8009d58 <UART_SetConfig+0x348>
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	77fb      	strb	r3, [r7, #31]
 8009c6e:	e073      	b.n	8009d58 <UART_SetConfig+0x348>
 8009c70:	2304      	movs	r3, #4
 8009c72:	77fb      	strb	r3, [r7, #31]
 8009c74:	e070      	b.n	8009d58 <UART_SetConfig+0x348>
 8009c76:	2308      	movs	r3, #8
 8009c78:	77fb      	strb	r3, [r7, #31]
 8009c7a:	e06d      	b.n	8009d58 <UART_SetConfig+0x348>
 8009c7c:	2310      	movs	r3, #16
 8009c7e:	77fb      	strb	r3, [r7, #31]
 8009c80:	e06a      	b.n	8009d58 <UART_SetConfig+0x348>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a1b      	ldr	r2, [pc, #108]	@ (8009cf4 <UART_SetConfig+0x2e4>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d138      	bne.n	8009cfe <UART_SetConfig+0x2ee>
 8009c8c:	4b13      	ldr	r3, [pc, #76]	@ (8009cdc <UART_SetConfig+0x2cc>)
 8009c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c92:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009c96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c9a:	d017      	beq.n	8009ccc <UART_SetConfig+0x2bc>
 8009c9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ca0:	d82a      	bhi.n	8009cf8 <UART_SetConfig+0x2e8>
 8009ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ca6:	d00b      	beq.n	8009cc0 <UART_SetConfig+0x2b0>
 8009ca8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cac:	d824      	bhi.n	8009cf8 <UART_SetConfig+0x2e8>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <UART_SetConfig+0x2aa>
 8009cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cb6:	d006      	beq.n	8009cc6 <UART_SetConfig+0x2b6>
 8009cb8:	e01e      	b.n	8009cf8 <UART_SetConfig+0x2e8>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	77fb      	strb	r3, [r7, #31]
 8009cbe:	e04b      	b.n	8009d58 <UART_SetConfig+0x348>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	77fb      	strb	r3, [r7, #31]
 8009cc4:	e048      	b.n	8009d58 <UART_SetConfig+0x348>
 8009cc6:	2304      	movs	r3, #4
 8009cc8:	77fb      	strb	r3, [r7, #31]
 8009cca:	e045      	b.n	8009d58 <UART_SetConfig+0x348>
 8009ccc:	2308      	movs	r3, #8
 8009cce:	77fb      	strb	r3, [r7, #31]
 8009cd0:	e042      	b.n	8009d58 <UART_SetConfig+0x348>
 8009cd2:	bf00      	nop
 8009cd4:	efff69f3 	.word	0xefff69f3
 8009cd8:	40011000 	.word	0x40011000
 8009cdc:	40023800 	.word	0x40023800
 8009ce0:	40004400 	.word	0x40004400
 8009ce4:	40004800 	.word	0x40004800
 8009ce8:	40004c00 	.word	0x40004c00
 8009cec:	40005000 	.word	0x40005000
 8009cf0:	40011400 	.word	0x40011400
 8009cf4:	40007800 	.word	0x40007800
 8009cf8:	2310      	movs	r3, #16
 8009cfa:	77fb      	strb	r3, [r7, #31]
 8009cfc:	e02c      	b.n	8009d58 <UART_SetConfig+0x348>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a72      	ldr	r2, [pc, #456]	@ (8009ecc <UART_SetConfig+0x4bc>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d125      	bne.n	8009d54 <UART_SetConfig+0x344>
 8009d08:	4b71      	ldr	r3, [pc, #452]	@ (8009ed0 <UART_SetConfig+0x4c0>)
 8009d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d0e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009d12:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009d16:	d017      	beq.n	8009d48 <UART_SetConfig+0x338>
 8009d18:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009d1c:	d817      	bhi.n	8009d4e <UART_SetConfig+0x33e>
 8009d1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d22:	d00b      	beq.n	8009d3c <UART_SetConfig+0x32c>
 8009d24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d28:	d811      	bhi.n	8009d4e <UART_SetConfig+0x33e>
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <UART_SetConfig+0x326>
 8009d2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d32:	d006      	beq.n	8009d42 <UART_SetConfig+0x332>
 8009d34:	e00b      	b.n	8009d4e <UART_SetConfig+0x33e>
 8009d36:	2300      	movs	r3, #0
 8009d38:	77fb      	strb	r3, [r7, #31]
 8009d3a:	e00d      	b.n	8009d58 <UART_SetConfig+0x348>
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	77fb      	strb	r3, [r7, #31]
 8009d40:	e00a      	b.n	8009d58 <UART_SetConfig+0x348>
 8009d42:	2304      	movs	r3, #4
 8009d44:	77fb      	strb	r3, [r7, #31]
 8009d46:	e007      	b.n	8009d58 <UART_SetConfig+0x348>
 8009d48:	2308      	movs	r3, #8
 8009d4a:	77fb      	strb	r3, [r7, #31]
 8009d4c:	e004      	b.n	8009d58 <UART_SetConfig+0x348>
 8009d4e:	2310      	movs	r3, #16
 8009d50:	77fb      	strb	r3, [r7, #31]
 8009d52:	e001      	b.n	8009d58 <UART_SetConfig+0x348>
 8009d54:	2310      	movs	r3, #16
 8009d56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d60:	d15b      	bne.n	8009e1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009d62:	7ffb      	ldrb	r3, [r7, #31]
 8009d64:	2b08      	cmp	r3, #8
 8009d66:	d828      	bhi.n	8009dba <UART_SetConfig+0x3aa>
 8009d68:	a201      	add	r2, pc, #4	@ (adr r2, 8009d70 <UART_SetConfig+0x360>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009d95 	.word	0x08009d95
 8009d74:	08009d9d 	.word	0x08009d9d
 8009d78:	08009da5 	.word	0x08009da5
 8009d7c:	08009dbb 	.word	0x08009dbb
 8009d80:	08009dab 	.word	0x08009dab
 8009d84:	08009dbb 	.word	0x08009dbb
 8009d88:	08009dbb 	.word	0x08009dbb
 8009d8c:	08009dbb 	.word	0x08009dbb
 8009d90:	08009db3 	.word	0x08009db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d94:	f7fd fd44 	bl	8007820 <HAL_RCC_GetPCLK1Freq>
 8009d98:	61b8      	str	r0, [r7, #24]
        break;
 8009d9a:	e013      	b.n	8009dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d9c:	f7fd fd54 	bl	8007848 <HAL_RCC_GetPCLK2Freq>
 8009da0:	61b8      	str	r0, [r7, #24]
        break;
 8009da2:	e00f      	b.n	8009dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009da4:	4b4b      	ldr	r3, [pc, #300]	@ (8009ed4 <UART_SetConfig+0x4c4>)
 8009da6:	61bb      	str	r3, [r7, #24]
        break;
 8009da8:	e00c      	b.n	8009dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009daa:	f7fd fc27 	bl	80075fc <HAL_RCC_GetSysClockFreq>
 8009dae:	61b8      	str	r0, [r7, #24]
        break;
 8009db0:	e008      	b.n	8009dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009db6:	61bb      	str	r3, [r7, #24]
        break;
 8009db8:	e004      	b.n	8009dc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	77bb      	strb	r3, [r7, #30]
        break;
 8009dc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d074      	beq.n	8009eb4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	005a      	lsls	r2, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	085b      	lsrs	r3, r3, #1
 8009dd4:	441a      	add	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	2b0f      	cmp	r3, #15
 8009de4:	d916      	bls.n	8009e14 <UART_SetConfig+0x404>
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dec:	d212      	bcs.n	8009e14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	f023 030f 	bic.w	r3, r3, #15
 8009df6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	085b      	lsrs	r3, r3, #1
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	f003 0307 	and.w	r3, r3, #7
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	89fb      	ldrh	r3, [r7, #14]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	89fa      	ldrh	r2, [r7, #14]
 8009e10:	60da      	str	r2, [r3, #12]
 8009e12:	e04f      	b.n	8009eb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	77bb      	strb	r3, [r7, #30]
 8009e18:	e04c      	b.n	8009eb4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e1a:	7ffb      	ldrb	r3, [r7, #31]
 8009e1c:	2b08      	cmp	r3, #8
 8009e1e:	d828      	bhi.n	8009e72 <UART_SetConfig+0x462>
 8009e20:	a201      	add	r2, pc, #4	@ (adr r2, 8009e28 <UART_SetConfig+0x418>)
 8009e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e26:	bf00      	nop
 8009e28:	08009e4d 	.word	0x08009e4d
 8009e2c:	08009e55 	.word	0x08009e55
 8009e30:	08009e5d 	.word	0x08009e5d
 8009e34:	08009e73 	.word	0x08009e73
 8009e38:	08009e63 	.word	0x08009e63
 8009e3c:	08009e73 	.word	0x08009e73
 8009e40:	08009e73 	.word	0x08009e73
 8009e44:	08009e73 	.word	0x08009e73
 8009e48:	08009e6b 	.word	0x08009e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e4c:	f7fd fce8 	bl	8007820 <HAL_RCC_GetPCLK1Freq>
 8009e50:	61b8      	str	r0, [r7, #24]
        break;
 8009e52:	e013      	b.n	8009e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e54:	f7fd fcf8 	bl	8007848 <HAL_RCC_GetPCLK2Freq>
 8009e58:	61b8      	str	r0, [r7, #24]
        break;
 8009e5a:	e00f      	b.n	8009e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8009ed4 <UART_SetConfig+0x4c4>)
 8009e5e:	61bb      	str	r3, [r7, #24]
        break;
 8009e60:	e00c      	b.n	8009e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e62:	f7fd fbcb 	bl	80075fc <HAL_RCC_GetSysClockFreq>
 8009e66:	61b8      	str	r0, [r7, #24]
        break;
 8009e68:	e008      	b.n	8009e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e6e:	61bb      	str	r3, [r7, #24]
        break;
 8009e70:	e004      	b.n	8009e7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009e72:	2300      	movs	r3, #0
 8009e74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	77bb      	strb	r3, [r7, #30]
        break;
 8009e7a:	bf00      	nop
    }

    if (pclk != 0U)
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d018      	beq.n	8009eb4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	085a      	lsrs	r2, r3, #1
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	441a      	add	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	2b0f      	cmp	r3, #15
 8009e9a:	d909      	bls.n	8009eb0 <UART_SetConfig+0x4a0>
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ea2:	d205      	bcs.n	8009eb0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	60da      	str	r2, [r3, #12]
 8009eae:	e001      	b.n	8009eb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009ec0:	7fbb      	ldrb	r3, [r7, #30]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3720      	adds	r7, #32
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	40007c00 	.word	0x40007c00
 8009ed0:	40023800 	.word	0x40023800
 8009ed4:	00f42400 	.word	0x00f42400

08009ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee4:	f003 0308 	and.w	r3, r3, #8
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00a      	beq.n	8009f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f06:	f003 0301 	and.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00a      	beq.n	8009f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	430a      	orrs	r2, r1
 8009f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f28:	f003 0302 	and.w	r3, r3, #2
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00a      	beq.n	8009f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00a      	beq.n	8009f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	430a      	orrs	r2, r1
 8009f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6c:	f003 0310 	and.w	r3, r3, #16
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00a      	beq.n	8009f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	430a      	orrs	r2, r1
 8009f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00a      	beq.n	8009fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	430a      	orrs	r2, r1
 8009faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d01a      	beq.n	8009fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	430a      	orrs	r2, r1
 8009fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fd6:	d10a      	bne.n	8009fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	430a      	orrs	r2, r1
 8009fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00a      	beq.n	800a010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	430a      	orrs	r2, r1
 800a00e:	605a      	str	r2, [r3, #4]
  }
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b098      	sub	sp, #96	@ 0x60
 800a020:	af02      	add	r7, sp, #8
 800a022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a02c:	f7f9 fdc6 	bl	8003bbc <HAL_GetTick>
 800a030:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 0308 	and.w	r3, r3, #8
 800a03c:	2b08      	cmp	r3, #8
 800a03e:	d12e      	bne.n	800a09e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a040:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a048:	2200      	movs	r2, #0
 800a04a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f88c 	bl	800a16c <UART_WaitOnFlagUntilTimeout>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d021      	beq.n	800a09e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a06a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a06e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	461a      	mov	r2, r3
 800a076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a078:	647b      	str	r3, [r7, #68]	@ 0x44
 800a07a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a07e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a080:	e841 2300 	strex	r3, r2, [r1]
 800a084:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1e6      	bne.n	800a05a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2220      	movs	r2, #32
 800a090:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a09a:	2303      	movs	r3, #3
 800a09c:	e062      	b.n	800a164 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 0304 	and.w	r3, r3, #4
 800a0a8:	2b04      	cmp	r3, #4
 800a0aa:	d149      	bne.n	800a140 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f856 	bl	800a16c <UART_WaitOnFlagUntilTimeout>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d03c      	beq.n	800a140 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ce:	e853 3f00 	ldrex	r3, [r3]
 800a0d2:	623b      	str	r3, [r7, #32]
   return(result);
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0ec:	e841 2300 	strex	r3, r2, [r1]
 800a0f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1e6      	bne.n	800a0c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3308      	adds	r3, #8
 800a0fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	e853 3f00 	ldrex	r3, [r3]
 800a106:	60fb      	str	r3, [r7, #12]
   return(result);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f023 0301 	bic.w	r3, r3, #1
 800a10e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3308      	adds	r3, #8
 800a116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a118:	61fa      	str	r2, [r7, #28]
 800a11a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11c:	69b9      	ldr	r1, [r7, #24]
 800a11e:	69fa      	ldr	r2, [r7, #28]
 800a120:	e841 2300 	strex	r3, r2, [r1]
 800a124:	617b      	str	r3, [r7, #20]
   return(result);
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1e5      	bne.n	800a0f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2220      	movs	r2, #32
 800a130:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e011      	b.n	800a164 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2220      	movs	r2, #32
 800a144:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2220      	movs	r2, #32
 800a14a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3758      	adds	r7, #88	@ 0x58
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	603b      	str	r3, [r7, #0]
 800a178:	4613      	mov	r3, r2
 800a17a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a17c:	e04f      	b.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a184:	d04b      	beq.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a186:	f7f9 fd19 	bl	8003bbc <HAL_GetTick>
 800a18a:	4602      	mov	r2, r0
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	429a      	cmp	r2, r3
 800a194:	d302      	bcc.n	800a19c <UART_WaitOnFlagUntilTimeout+0x30>
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e04e      	b.n	800a23e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d037      	beq.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	2b80      	cmp	r3, #128	@ 0x80
 800a1b2:	d034      	beq.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b40      	cmp	r3, #64	@ 0x40
 800a1b8:	d031      	beq.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	69db      	ldr	r3, [r3, #28]
 800a1c0:	f003 0308 	and.w	r3, r3, #8
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	d110      	bne.n	800a1ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2208      	movs	r2, #8
 800a1ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f000 f85e 	bl	800a292 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2208      	movs	r2, #8
 800a1da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e029      	b.n	800a23e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	69db      	ldr	r3, [r3, #28]
 800a1f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1f8:	d111      	bne.n	800a21e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 f844 	bl	800a292 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2220      	movs	r2, #32
 800a20e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e00f      	b.n	800a23e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	69da      	ldr	r2, [r3, #28]
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	4013      	ands	r3, r2
 800a228:	68ba      	ldr	r2, [r7, #8]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	bf0c      	ite	eq
 800a22e:	2301      	moveq	r3, #1
 800a230:	2300      	movne	r3, #0
 800a232:	b2db      	uxtb	r3, r3
 800a234:	461a      	mov	r2, r3
 800a236:	79fb      	ldrb	r3, [r7, #7]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d0a0      	beq.n	800a17e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a246:	b480      	push	{r7}
 800a248:	b089      	sub	sp, #36	@ 0x24
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	e853 3f00 	ldrex	r3, [r3]
 800a25a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a262:	61fb      	str	r3, [r7, #28]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	461a      	mov	r2, r3
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	61bb      	str	r3, [r7, #24]
 800a26e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a270:	6979      	ldr	r1, [r7, #20]
 800a272:	69ba      	ldr	r2, [r7, #24]
 800a274:	e841 2300 	strex	r3, r2, [r1]
 800a278:	613b      	str	r3, [r7, #16]
   return(result);
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1e6      	bne.n	800a24e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2220      	movs	r2, #32
 800a284:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a286:	bf00      	nop
 800a288:	3724      	adds	r7, #36	@ 0x24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a292:	b480      	push	{r7}
 800a294:	b095      	sub	sp, #84	@ 0x54
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2b8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a2be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a2c0:	e841 2300 	strex	r3, r2, [r1]
 800a2c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e6      	bne.n	800a29a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	3308      	adds	r3, #8
 800a2d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d4:	6a3b      	ldr	r3, [r7, #32]
 800a2d6:	e853 3f00 	ldrex	r3, [r3]
 800a2da:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	f023 0301 	bic.w	r3, r3, #1
 800a2e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2f4:	e841 2300 	strex	r3, r2, [r1]
 800a2f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d1e5      	bne.n	800a2cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a304:	2b01      	cmp	r3, #1
 800a306:	d118      	bne.n	800a33a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	e853 3f00 	ldrex	r3, [r3]
 800a314:	60bb      	str	r3, [r7, #8]
   return(result);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	f023 0310 	bic.w	r3, r3, #16
 800a31c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a326:	61bb      	str	r3, [r7, #24]
 800a328:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a32a:	6979      	ldr	r1, [r7, #20]
 800a32c:	69ba      	ldr	r2, [r7, #24]
 800a32e:	e841 2300 	strex	r3, r2, [r1]
 800a332:	613b      	str	r3, [r7, #16]
   return(result);
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1e6      	bne.n	800a308 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2220      	movs	r2, #32
 800a33e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a34e:	bf00      	nop
 800a350:	3754      	adds	r7, #84	@ 0x54
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr

0800a35a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b090      	sub	sp, #64	@ 0x40
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a366:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a370:	d037      	beq.n	800a3e2 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a374:	2200      	movs	r2, #0
 800a376:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a37a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3308      	adds	r3, #8
 800a380:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a384:	e853 3f00 	ldrex	r3, [r3]
 800a388:	623b      	str	r3, [r7, #32]
   return(result);
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a390:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	3308      	adds	r3, #8
 800a398:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a39a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a39c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3a2:	e841 2300 	strex	r3, r2, [r1]
 800a3a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1e5      	bne.n	800a37a <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	e853 3f00 	ldrex	r3, [r3]
 800a3ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3cc:	61fb      	str	r3, [r7, #28]
 800a3ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d0:	69b9      	ldr	r1, [r7, #24]
 800a3d2:	69fa      	ldr	r2, [r7, #28]
 800a3d4:	e841 2300 	strex	r3, r2, [r1]
 800a3d8:	617b      	str	r3, [r7, #20]
   return(result);
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1e6      	bne.n	800a3ae <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3e0:	e002      	b.n	800a3e8 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a3e2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a3e4:	f7ff fae0 	bl	80099a8 <HAL_UART_TxCpltCallback>
}
 800a3e8:	bf00      	nop
 800a3ea:	3740      	adds	r7, #64	@ 0x40
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3fc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f7ff fadc 	bl	80099bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a404:	bf00      	nop
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a418:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a41e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a426:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a432:	2b80      	cmp	r3, #128	@ 0x80
 800a434:	d109      	bne.n	800a44a <UART_DMAError+0x3e>
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	2b21      	cmp	r3, #33	@ 0x21
 800a43a:	d106      	bne.n	800a44a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	2200      	movs	r2, #0
 800a440:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800a444:	6978      	ldr	r0, [r7, #20]
 800a446:	f7ff fefe 	bl	800a246 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a454:	2b40      	cmp	r3, #64	@ 0x40
 800a456:	d109      	bne.n	800a46c <UART_DMAError+0x60>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2b22      	cmp	r3, #34	@ 0x22
 800a45c:	d106      	bne.n	800a46c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2200      	movs	r2, #0
 800a462:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800a466:	6978      	ldr	r0, [r7, #20]
 800a468:	f7ff ff13 	bl	800a292 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a472:	f043 0210 	orr.w	r2, r3, #16
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a47c:	6978      	ldr	r0, [r7, #20]
 800a47e:	f7ff faa7 	bl	80099d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a482:	bf00      	nop
 800a484:	3718      	adds	r7, #24
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a496:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff fa91 	bl	80099d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ae:	bf00      	nop
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b088      	sub	sp, #32
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4d2:	61fb      	str	r3, [r7, #28]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	461a      	mov	r2, r3
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	61bb      	str	r3, [r7, #24]
 800a4de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	6979      	ldr	r1, [r7, #20]
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e6      	bne.n	800a4be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff fa53 	bl	80099a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a502:	bf00      	nop
 800a504:	3720      	adds	r7, #32
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
	...

0800a50c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a50c:	b084      	sub	sp, #16
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	f107 001c 	add.w	r0, r7, #28
 800a51a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a51e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a522:	2b01      	cmp	r3, #1
 800a524:	d121      	bne.n	800a56a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a52a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	68da      	ldr	r2, [r3, #12]
 800a536:	4b21      	ldr	r3, [pc, #132]	@ (800a5bc <USB_CoreInit+0xb0>)
 800a538:	4013      	ands	r3, r2
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a54a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d105      	bne.n	800a55e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 fade 	bl	800bb20 <USB_CoreReset>
 800a564:	4603      	mov	r3, r0
 800a566:	73fb      	strb	r3, [r7, #15]
 800a568:	e010      	b.n	800a58c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f001 fad2 	bl	800bb20 <USB_CoreReset>
 800a57c:	4603      	mov	r3, r0
 800a57e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a584:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800a58c:	7fbb      	ldrb	r3, [r7, #30]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d10b      	bne.n	800a5aa <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f043 0206 	orr.w	r2, r3, #6
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f043 0220 	orr.w	r2, r3, #32
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5b6:	b004      	add	sp, #16
 800a5b8:	4770      	bx	lr
 800a5ba:	bf00      	nop
 800a5bc:	ffbdffbf 	.word	0xffbdffbf

0800a5c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b087      	sub	sp, #28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a5ce:	79fb      	ldrb	r3, [r7, #7]
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d165      	bne.n	800a6a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4a41      	ldr	r2, [pc, #260]	@ (800a6dc <USB_SetTurnaroundTime+0x11c>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d906      	bls.n	800a5ea <USB_SetTurnaroundTime+0x2a>
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	4a40      	ldr	r2, [pc, #256]	@ (800a6e0 <USB_SetTurnaroundTime+0x120>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d202      	bcs.n	800a5ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a5e4:	230f      	movs	r3, #15
 800a5e6:	617b      	str	r3, [r7, #20]
 800a5e8:	e062      	b.n	800a6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	4a3c      	ldr	r2, [pc, #240]	@ (800a6e0 <USB_SetTurnaroundTime+0x120>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d306      	bcc.n	800a600 <USB_SetTurnaroundTime+0x40>
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	4a3b      	ldr	r2, [pc, #236]	@ (800a6e4 <USB_SetTurnaroundTime+0x124>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d202      	bcs.n	800a600 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a5fa:	230e      	movs	r3, #14
 800a5fc:	617b      	str	r3, [r7, #20]
 800a5fe:	e057      	b.n	800a6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4a38      	ldr	r2, [pc, #224]	@ (800a6e4 <USB_SetTurnaroundTime+0x124>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d306      	bcc.n	800a616 <USB_SetTurnaroundTime+0x56>
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	4a37      	ldr	r2, [pc, #220]	@ (800a6e8 <USB_SetTurnaroundTime+0x128>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d202      	bcs.n	800a616 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a610:	230d      	movs	r3, #13
 800a612:	617b      	str	r3, [r7, #20]
 800a614:	e04c      	b.n	800a6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	4a33      	ldr	r2, [pc, #204]	@ (800a6e8 <USB_SetTurnaroundTime+0x128>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d306      	bcc.n	800a62c <USB_SetTurnaroundTime+0x6c>
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	4a32      	ldr	r2, [pc, #200]	@ (800a6ec <USB_SetTurnaroundTime+0x12c>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d802      	bhi.n	800a62c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a626:	230c      	movs	r3, #12
 800a628:	617b      	str	r3, [r7, #20]
 800a62a:	e041      	b.n	800a6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	4a2f      	ldr	r2, [pc, #188]	@ (800a6ec <USB_SetTurnaroundTime+0x12c>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d906      	bls.n	800a642 <USB_SetTurnaroundTime+0x82>
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	4a2e      	ldr	r2, [pc, #184]	@ (800a6f0 <USB_SetTurnaroundTime+0x130>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d802      	bhi.n	800a642 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a63c:	230b      	movs	r3, #11
 800a63e:	617b      	str	r3, [r7, #20]
 800a640:	e036      	b.n	800a6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	4a2a      	ldr	r2, [pc, #168]	@ (800a6f0 <USB_SetTurnaroundTime+0x130>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d906      	bls.n	800a658 <USB_SetTurnaroundTime+0x98>
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	4a29      	ldr	r2, [pc, #164]	@ (800a6f4 <USB_SetTurnaroundTime+0x134>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d802      	bhi.n	800a658 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a652:	230a      	movs	r3, #10
 800a654:	617b      	str	r3, [r7, #20]
 800a656:	e02b      	b.n	800a6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	4a26      	ldr	r2, [pc, #152]	@ (800a6f4 <USB_SetTurnaroundTime+0x134>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d906      	bls.n	800a66e <USB_SetTurnaroundTime+0xae>
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	4a25      	ldr	r2, [pc, #148]	@ (800a6f8 <USB_SetTurnaroundTime+0x138>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d202      	bcs.n	800a66e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a668:	2309      	movs	r3, #9
 800a66a:	617b      	str	r3, [r7, #20]
 800a66c:	e020      	b.n	800a6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	4a21      	ldr	r2, [pc, #132]	@ (800a6f8 <USB_SetTurnaroundTime+0x138>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d306      	bcc.n	800a684 <USB_SetTurnaroundTime+0xc4>
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	4a20      	ldr	r2, [pc, #128]	@ (800a6fc <USB_SetTurnaroundTime+0x13c>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d802      	bhi.n	800a684 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a67e:	2308      	movs	r3, #8
 800a680:	617b      	str	r3, [r7, #20]
 800a682:	e015      	b.n	800a6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	4a1d      	ldr	r2, [pc, #116]	@ (800a6fc <USB_SetTurnaroundTime+0x13c>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d906      	bls.n	800a69a <USB_SetTurnaroundTime+0xda>
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	4a1c      	ldr	r2, [pc, #112]	@ (800a700 <USB_SetTurnaroundTime+0x140>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d202      	bcs.n	800a69a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a694:	2307      	movs	r3, #7
 800a696:	617b      	str	r3, [r7, #20]
 800a698:	e00a      	b.n	800a6b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a69a:	2306      	movs	r3, #6
 800a69c:	617b      	str	r3, [r7, #20]
 800a69e:	e007      	b.n	800a6b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d102      	bne.n	800a6ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a6a6:	2309      	movs	r3, #9
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	e001      	b.n	800a6b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a6ac:	2309      	movs	r3, #9
 800a6ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	68da      	ldr	r2, [r3, #12]
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	029b      	lsls	r3, r3, #10
 800a6c4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a6c8:	431a      	orrs	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	371c      	adds	r7, #28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr
 800a6dc:	00d8acbf 	.word	0x00d8acbf
 800a6e0:	00e4e1c0 	.word	0x00e4e1c0
 800a6e4:	00f42400 	.word	0x00f42400
 800a6e8:	01067380 	.word	0x01067380
 800a6ec:	011a499f 	.word	0x011a499f
 800a6f0:	01312cff 	.word	0x01312cff
 800a6f4:	014ca43f 	.word	0x014ca43f
 800a6f8:	016e3600 	.word	0x016e3600
 800a6fc:	01a6ab1f 	.word	0x01a6ab1f
 800a700:	01e84800 	.word	0x01e84800

0800a704 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	f043 0201 	orr.w	r2, r3, #1
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a726:	b480      	push	{r7}
 800a728:	b083      	sub	sp, #12
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f023 0201 	bic.w	r2, r3, #1
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a73a:	2300      	movs	r3, #0
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a754:	2300      	movs	r3, #0
 800a756:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a764:	78fb      	ldrb	r3, [r7, #3]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d115      	bne.n	800a796 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a776:	200a      	movs	r0, #10
 800a778:	f7f9 fa2c 	bl	8003bd4 <HAL_Delay>
      ms += 10U;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	330a      	adds	r3, #10
 800a780:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f001 f93b 	bl	800b9fe <USB_GetMode>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d01e      	beq.n	800a7cc <USB_SetCurrentMode+0x84>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2bc7      	cmp	r3, #199	@ 0xc7
 800a792:	d9f0      	bls.n	800a776 <USB_SetCurrentMode+0x2e>
 800a794:	e01a      	b.n	800a7cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a796:	78fb      	ldrb	r3, [r7, #3]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d115      	bne.n	800a7c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a7a8:	200a      	movs	r0, #10
 800a7aa:	f7f9 fa13 	bl	8003bd4 <HAL_Delay>
      ms += 10U;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	330a      	adds	r3, #10
 800a7b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f001 f922 	bl	800b9fe <USB_GetMode>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d005      	beq.n	800a7cc <USB_SetCurrentMode+0x84>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2bc7      	cmp	r3, #199	@ 0xc7
 800a7c4:	d9f0      	bls.n	800a7a8 <USB_SetCurrentMode+0x60>
 800a7c6:	e001      	b.n	800a7cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e005      	b.n	800a7d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2bc8      	cmp	r3, #200	@ 0xc8
 800a7d0:	d101      	bne.n	800a7d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e000      	b.n	800a7d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b086      	sub	sp, #24
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
 800a7ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a7ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	613b      	str	r3, [r7, #16]
 800a7fe:	e009      	b.n	800a814 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	3340      	adds	r3, #64	@ 0x40
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4413      	add	r3, r2
 800a80a:	2200      	movs	r2, #0
 800a80c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	3301      	adds	r3, #1
 800a812:	613b      	str	r3, [r7, #16]
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	2b0e      	cmp	r3, #14
 800a818:	d9f2      	bls.n	800a800 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a81a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d11c      	bne.n	800a85c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a830:	f043 0302 	orr.w	r3, r3, #2
 800a834:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a83a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	601a      	str	r2, [r3, #0]
 800a85a:	e005      	b.n	800a868 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a860:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a86e:	461a      	mov	r2, r3
 800a870:	2300      	movs	r3, #0
 800a872:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a874:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d10d      	bne.n	800a898 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a87c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a880:	2b00      	cmp	r3, #0
 800a882:	d104      	bne.n	800a88e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a884:	2100      	movs	r1, #0
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 f968 	bl	800ab5c <USB_SetDevSpeed>
 800a88c:	e008      	b.n	800a8a0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a88e:	2101      	movs	r1, #1
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f963 	bl	800ab5c <USB_SetDevSpeed>
 800a896:	e003      	b.n	800a8a0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a898:	2103      	movs	r1, #3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f95e 	bl	800ab5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a8a0:	2110      	movs	r1, #16
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f8fa 	bl	800aa9c <USB_FlushTxFifo>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f924 	bl	800ab00 <USB_FlushRxFifo>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	613b      	str	r3, [r7, #16]
 800a8ea:	e043      	b.n	800a974 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	015a      	lsls	r2, r3, #5
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a902:	d118      	bne.n	800a936 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	015a      	lsls	r2, r3, #5
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	4413      	add	r3, r2
 800a912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a916:	461a      	mov	r2, r3
 800a918:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a91c:	6013      	str	r3, [r2, #0]
 800a91e:	e013      	b.n	800a948 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	015a      	lsls	r2, r3, #5
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	4413      	add	r3, r2
 800a928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a92c:	461a      	mov	r2, r3
 800a92e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	e008      	b.n	800a948 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	015a      	lsls	r2, r3, #5
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	4413      	add	r3, r2
 800a93e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a942:	461a      	mov	r2, r3
 800a944:	2300      	movs	r3, #0
 800a946:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	015a      	lsls	r2, r3, #5
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4413      	add	r3, r2
 800a950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a954:	461a      	mov	r2, r3
 800a956:	2300      	movs	r3, #0
 800a958:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	4413      	add	r3, r2
 800a962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a966:	461a      	mov	r2, r3
 800a968:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a96c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	3301      	adds	r3, #1
 800a972:	613b      	str	r3, [r7, #16]
 800a974:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a978:	461a      	mov	r2, r3
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d3b5      	bcc.n	800a8ec <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a980:	2300      	movs	r3, #0
 800a982:	613b      	str	r3, [r7, #16]
 800a984:	e043      	b.n	800aa0e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	015a      	lsls	r2, r3, #5
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	4413      	add	r3, r2
 800a98e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a998:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a99c:	d118      	bne.n	800a9d0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10a      	bne.n	800a9ba <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	015a      	lsls	r2, r3, #5
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a9b6:	6013      	str	r3, [r2, #0]
 800a9b8:	e013      	b.n	800a9e2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	015a      	lsls	r2, r3, #5
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a9cc:	6013      	str	r3, [r2, #0]
 800a9ce:	e008      	b.n	800a9e2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	015a      	lsls	r2, r3, #5
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9dc:	461a      	mov	r2, r3
 800a9de:	2300      	movs	r3, #0
 800a9e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	015a      	lsls	r2, r3, #5
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa00:	461a      	mov	r2, r3
 800aa02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aa06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	613b      	str	r3, [r7, #16]
 800aa0e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aa12:	461a      	mov	r2, r3
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d3b5      	bcc.n	800a986 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa2c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800aa3a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d105      	bne.n	800aa50 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	f043 0210 	orr.w	r2, r3, #16
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	699a      	ldr	r2, [r3, #24]
 800aa54:	4b0f      	ldr	r3, [pc, #60]	@ (800aa94 <USB_DevInit+0x2b4>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d005      	beq.n	800aa70 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	f043 0208 	orr.w	r2, r3, #8
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aa70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d105      	bne.n	800aa84 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	699a      	ldr	r2, [r3, #24]
 800aa7c:	4b06      	ldr	r3, [pc, #24]	@ (800aa98 <USB_DevInit+0x2b8>)
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa84:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa90:	b004      	add	sp, #16
 800aa92:	4770      	bx	lr
 800aa94:	803c3800 	.word	0x803c3800
 800aa98:	40000004 	.word	0x40000004

0800aa9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	3301      	adds	r3, #1
 800aaae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aab6:	d901      	bls.n	800aabc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e01b      	b.n	800aaf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	daf2      	bge.n	800aaaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aac4:	2300      	movs	r3, #0
 800aac6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	019b      	lsls	r3, r3, #6
 800aacc:	f043 0220 	orr.w	r2, r3, #32
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3301      	adds	r3, #1
 800aad8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aae0:	d901      	bls.n	800aae6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e006      	b.n	800aaf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	f003 0320 	and.w	r3, r3, #32
 800aaee:	2b20      	cmp	r3, #32
 800aaf0:	d0f0      	beq.n	800aad4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab18:	d901      	bls.n	800ab1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e018      	b.n	800ab50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	daf2      	bge.n	800ab0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ab26:	2300      	movs	r3, #0
 800ab28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2210      	movs	r2, #16
 800ab2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3301      	adds	r3, #1
 800ab34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab3c:	d901      	bls.n	800ab42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab3e:	2303      	movs	r3, #3
 800ab40:	e006      	b.n	800ab50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	f003 0310 	and.w	r3, r3, #16
 800ab4a:	2b10      	cmp	r3, #16
 800ab4c:	d0f0      	beq.n	800ab30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	460b      	mov	r3, r1
 800ab66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	78fb      	ldrb	r3, [r7, #3]
 800ab76:	68f9      	ldr	r1, [r7, #12]
 800ab78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr

0800ab8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab8e:	b480      	push	{r7}
 800ab90:	b087      	sub	sp, #28
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	f003 0306 	and.w	r3, r3, #6
 800aba6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d102      	bne.n	800abb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800abae:	2300      	movs	r3, #0
 800abb0:	75fb      	strb	r3, [r7, #23]
 800abb2:	e00a      	b.n	800abca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d002      	beq.n	800abc0 <USB_GetDevSpeed+0x32>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2b06      	cmp	r3, #6
 800abbe:	d102      	bne.n	800abc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800abc0:	2302      	movs	r3, #2
 800abc2:	75fb      	strb	r3, [r7, #23]
 800abc4:	e001      	b.n	800abca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800abc6:	230f      	movs	r3, #15
 800abc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800abca:	7dfb      	ldrb	r3, [r7, #23]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	371c      	adds	r7, #28
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	785b      	ldrb	r3, [r3, #1]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d139      	bne.n	800ac68 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abfa:	69da      	ldr	r2, [r3, #28]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	f003 030f 	and.w	r3, r3, #15
 800ac04:	2101      	movs	r1, #1
 800ac06:	fa01 f303 	lsl.w	r3, r1, r3
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	68f9      	ldr	r1, [r7, #12]
 800ac0e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac12:	4313      	orrs	r3, r2
 800ac14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	015a      	lsls	r2, r3, #5
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d153      	bne.n	800acd4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	015a      	lsls	r2, r3, #5
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	4413      	add	r3, r2
 800ac34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	791b      	ldrb	r3, [r3, #4]
 800ac46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	059b      	lsls	r3, r3, #22
 800ac4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac50:	431a      	orrs	r2, r3
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	0159      	lsls	r1, r3, #5
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	440b      	add	r3, r1
 800ac5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac5e:	4619      	mov	r1, r3
 800ac60:	4b20      	ldr	r3, [pc, #128]	@ (800ace4 <USB_ActivateEndpoint+0x10c>)
 800ac62:	4313      	orrs	r3, r2
 800ac64:	600b      	str	r3, [r1, #0]
 800ac66:	e035      	b.n	800acd4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac6e:	69da      	ldr	r2, [r3, #28]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	f003 030f 	and.w	r3, r3, #15
 800ac78:	2101      	movs	r1, #1
 800ac7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac7e:	041b      	lsls	r3, r3, #16
 800ac80:	68f9      	ldr	r1, [r7, #12]
 800ac82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac86:	4313      	orrs	r3, r2
 800ac88:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d119      	bne.n	800acd4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	015a      	lsls	r2, r3, #5
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	4413      	add	r3, r2
 800aca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	791b      	ldrb	r3, [r3, #4]
 800acba:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800acbc:	430b      	orrs	r3, r1
 800acbe:	431a      	orrs	r2, r3
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	0159      	lsls	r1, r3, #5
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	440b      	add	r3, r1
 800acc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800accc:	4619      	mov	r1, r3
 800acce:	4b05      	ldr	r3, [pc, #20]	@ (800ace4 <USB_ActivateEndpoint+0x10c>)
 800acd0:	4313      	orrs	r3, r2
 800acd2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	10008000 	.word	0x10008000

0800ace8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ace8:	b480      	push	{r7}
 800acea:	b085      	sub	sp, #20
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	785b      	ldrb	r3, [r3, #1]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d161      	bne.n	800adc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	015a      	lsls	r2, r3, #5
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad1a:	d11f      	bne.n	800ad5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	0151      	lsls	r1, r2, #5
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	440a      	add	r2, r1
 800ad32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ad3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	015a      	lsls	r2, r3, #5
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4413      	add	r3, r2
 800ad44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	0151      	lsls	r1, r2, #5
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	440a      	add	r2, r1
 800ad52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad56:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	f003 030f 	and.w	r3, r3, #15
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	43db      	mvns	r3, r3
 800ad76:	68f9      	ldr	r1, [r7, #12]
 800ad78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad86:	69da      	ldr	r2, [r3, #28]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	f003 030f 	and.w	r3, r3, #15
 800ad90:	2101      	movs	r1, #1
 800ad92:	fa01 f303 	lsl.w	r3, r1, r3
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	43db      	mvns	r3, r3
 800ad9a:	68f9      	ldr	r1, [r7, #12]
 800ad9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ada0:	4013      	ands	r3, r2
 800ada2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	015a      	lsls	r2, r3, #5
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	4413      	add	r3, r2
 800adac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	0159      	lsls	r1, r3, #5
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	440b      	add	r3, r1
 800adba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adbe:	4619      	mov	r1, r3
 800adc0:	4b35      	ldr	r3, [pc, #212]	@ (800ae98 <USB_DeactivateEndpoint+0x1b0>)
 800adc2:	4013      	ands	r3, r2
 800adc4:	600b      	str	r3, [r1, #0]
 800adc6:	e060      	b.n	800ae8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adde:	d11f      	bne.n	800ae20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	0151      	lsls	r1, r2, #5
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	440a      	add	r2, r1
 800adf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adfa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800adfe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68ba      	ldr	r2, [r7, #8]
 800ae10:	0151      	lsls	r1, r2, #5
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	440a      	add	r2, r1
 800ae16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	f003 030f 	and.w	r3, r3, #15
 800ae30:	2101      	movs	r1, #1
 800ae32:	fa01 f303 	lsl.w	r3, r1, r3
 800ae36:	041b      	lsls	r3, r3, #16
 800ae38:	43db      	mvns	r3, r3
 800ae3a:	68f9      	ldr	r1, [r7, #12]
 800ae3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae40:	4013      	ands	r3, r2
 800ae42:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae4a:	69da      	ldr	r2, [r3, #28]
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	f003 030f 	and.w	r3, r3, #15
 800ae54:	2101      	movs	r1, #1
 800ae56:	fa01 f303 	lsl.w	r3, r1, r3
 800ae5a:	041b      	lsls	r3, r3, #16
 800ae5c:	43db      	mvns	r3, r3
 800ae5e:	68f9      	ldr	r1, [r7, #12]
 800ae60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae64:	4013      	ands	r3, r2
 800ae66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	015a      	lsls	r2, r3, #5
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	4413      	add	r3, r2
 800ae70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	0159      	lsls	r1, r3, #5
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	440b      	add	r3, r1
 800ae7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae82:	4619      	mov	r1, r3
 800ae84:	4b05      	ldr	r3, [pc, #20]	@ (800ae9c <USB_DeactivateEndpoint+0x1b4>)
 800ae86:	4013      	ands	r3, r2
 800ae88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr
 800ae98:	ec337800 	.word	0xec337800
 800ae9c:	eff37800 	.word	0xeff37800

0800aea0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b08a      	sub	sp, #40	@ 0x28
 800aea4:	af02      	add	r7, sp, #8
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	785b      	ldrb	r3, [r3, #1]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	f040 8181 	bne.w	800b1c4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d132      	bne.n	800af30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	015a      	lsls	r2, r3, #5
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	4413      	add	r3, r2
 800aed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aed6:	691a      	ldr	r2, [r3, #16]
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	0159      	lsls	r1, r3, #5
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	440b      	add	r3, r1
 800aee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aee4:	4619      	mov	r1, r3
 800aee6:	4ba5      	ldr	r3, [pc, #660]	@ (800b17c <USB_EPStartXfer+0x2dc>)
 800aee8:	4013      	ands	r3, r2
 800aeea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	69ba      	ldr	r2, [r7, #24]
 800aefc:	0151      	lsls	r1, r2, #5
 800aefe:	69fa      	ldr	r2, [r7, #28]
 800af00:	440a      	add	r2, r1
 800af02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	015a      	lsls	r2, r3, #5
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	4413      	add	r3, r2
 800af14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af18:	691a      	ldr	r2, [r3, #16]
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	0159      	lsls	r1, r3, #5
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	440b      	add	r3, r1
 800af22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af26:	4619      	mov	r1, r3
 800af28:	4b95      	ldr	r3, [pc, #596]	@ (800b180 <USB_EPStartXfer+0x2e0>)
 800af2a:	4013      	ands	r3, r2
 800af2c:	610b      	str	r3, [r1, #16]
 800af2e:	e092      	b.n	800b056 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af3c:	691a      	ldr	r2, [r3, #16]
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	0159      	lsls	r1, r3, #5
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	440b      	add	r3, r1
 800af46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af4a:	4619      	mov	r1, r3
 800af4c:	4b8c      	ldr	r3, [pc, #560]	@ (800b180 <USB_EPStartXfer+0x2e0>)
 800af4e:	4013      	ands	r3, r2
 800af50:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	015a      	lsls	r2, r3, #5
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	4413      	add	r3, r2
 800af5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af5e:	691a      	ldr	r2, [r3, #16]
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	0159      	lsls	r1, r3, #5
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	440b      	add	r3, r1
 800af68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af6c:	4619      	mov	r1, r3
 800af6e:	4b83      	ldr	r3, [pc, #524]	@ (800b17c <USB_EPStartXfer+0x2dc>)
 800af70:	4013      	ands	r3, r2
 800af72:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d11a      	bne.n	800afb0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	691a      	ldr	r2, [r3, #16]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	429a      	cmp	r2, r3
 800af84:	d903      	bls.n	800af8e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	689a      	ldr	r2, [r3, #8]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	015a      	lsls	r2, r3, #5
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	4413      	add	r3, r2
 800af96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	69ba      	ldr	r2, [r7, #24]
 800af9e:	0151      	lsls	r1, r2, #5
 800afa0:	69fa      	ldr	r2, [r7, #28]
 800afa2:	440a      	add	r2, r1
 800afa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800afac:	6113      	str	r3, [r2, #16]
 800afae:	e01b      	b.n	800afe8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	015a      	lsls	r2, r3, #5
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	4413      	add	r3, r2
 800afb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afbc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	6919      	ldr	r1, [r3, #16]
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	689b      	ldr	r3, [r3, #8]
 800afc6:	440b      	add	r3, r1
 800afc8:	1e59      	subs	r1, r3, #1
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	fbb1 f3f3 	udiv	r3, r1, r3
 800afd2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800afd4:	4b6b      	ldr	r3, [pc, #428]	@ (800b184 <USB_EPStartXfer+0x2e4>)
 800afd6:	400b      	ands	r3, r1
 800afd8:	69b9      	ldr	r1, [r7, #24]
 800afda:	0148      	lsls	r0, r1, #5
 800afdc:	69f9      	ldr	r1, [r7, #28]
 800afde:	4401      	add	r1, r0
 800afe0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800afe4:	4313      	orrs	r3, r2
 800afe6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	015a      	lsls	r2, r3, #5
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	4413      	add	r3, r2
 800aff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aff4:	691a      	ldr	r2, [r3, #16]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800affe:	69b9      	ldr	r1, [r7, #24]
 800b000:	0148      	lsls	r0, r1, #5
 800b002:	69f9      	ldr	r1, [r7, #28]
 800b004:	4401      	add	r1, r0
 800b006:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b00a:	4313      	orrs	r3, r2
 800b00c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	791b      	ldrb	r3, [r3, #4]
 800b012:	2b01      	cmp	r3, #1
 800b014:	d11f      	bne.n	800b056 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	0151      	lsls	r1, r2, #5
 800b028:	69fa      	ldr	r2, [r7, #28]
 800b02a:	440a      	add	r2, r1
 800b02c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b030:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b034:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	015a      	lsls	r2, r3, #5
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	4413      	add	r3, r2
 800b03e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	0151      	lsls	r1, r2, #5
 800b048:	69fa      	ldr	r2, [r7, #28]
 800b04a:	440a      	add	r2, r1
 800b04c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b050:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b054:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b056:	79fb      	ldrb	r3, [r7, #7]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d14b      	bne.n	800b0f4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	69db      	ldr	r3, [r3, #28]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d009      	beq.n	800b078 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	015a      	lsls	r2, r3, #5
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	4413      	add	r3, r2
 800b06c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b070:	461a      	mov	r2, r3
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	791b      	ldrb	r3, [r3, #4]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d128      	bne.n	800b0d2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d110      	bne.n	800b0b2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	015a      	lsls	r2, r3, #5
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	4413      	add	r3, r2
 800b098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	0151      	lsls	r1, r2, #5
 800b0a2:	69fa      	ldr	r2, [r7, #28]
 800b0a4:	440a      	add	r2, r1
 800b0a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b0ae:	6013      	str	r3, [r2, #0]
 800b0b0:	e00f      	b.n	800b0d2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	015a      	lsls	r2, r3, #5
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	69ba      	ldr	r2, [r7, #24]
 800b0c2:	0151      	lsls	r1, r2, #5
 800b0c4:	69fa      	ldr	r2, [r7, #28]
 800b0c6:	440a      	add	r2, r1
 800b0c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	69ba      	ldr	r2, [r7, #24]
 800b0e2:	0151      	lsls	r1, r2, #5
 800b0e4:	69fa      	ldr	r2, [r7, #28]
 800b0e6:	440a      	add	r2, r1
 800b0e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	e16a      	b.n	800b3ca <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	015a      	lsls	r2, r3, #5
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	69ba      	ldr	r2, [r7, #24]
 800b104:	0151      	lsls	r1, r2, #5
 800b106:	69fa      	ldr	r2, [r7, #28]
 800b108:	440a      	add	r2, r1
 800b10a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b10e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b112:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	791b      	ldrb	r3, [r3, #4]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d015      	beq.n	800b148 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	691b      	ldr	r3, [r3, #16]
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 8152 	beq.w	800b3ca <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b12c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	f003 030f 	and.w	r3, r3, #15
 800b136:	2101      	movs	r1, #1
 800b138:	fa01 f303 	lsl.w	r3, r1, r3
 800b13c:	69f9      	ldr	r1, [r7, #28]
 800b13e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b142:	4313      	orrs	r3, r2
 800b144:	634b      	str	r3, [r1, #52]	@ 0x34
 800b146:	e140      	b.n	800b3ca <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b154:	2b00      	cmp	r3, #0
 800b156:	d117      	bne.n	800b188 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	0151      	lsls	r1, r2, #5
 800b16a:	69fa      	ldr	r2, [r7, #28]
 800b16c:	440a      	add	r2, r1
 800b16e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b172:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	e016      	b.n	800b1a8 <USB_EPStartXfer+0x308>
 800b17a:	bf00      	nop
 800b17c:	e007ffff 	.word	0xe007ffff
 800b180:	fff80000 	.word	0xfff80000
 800b184:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	015a      	lsls	r2, r3, #5
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	4413      	add	r3, r2
 800b190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	0151      	lsls	r1, r2, #5
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	440a      	add	r2, r1
 800b19e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1a6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	68d9      	ldr	r1, [r3, #12]
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	781a      	ldrb	r2, [r3, #0]
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	b298      	uxth	r0, r3
 800b1b6:	79fb      	ldrb	r3, [r7, #7]
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f000 f9b9 	bl	800b534 <USB_WritePacket>
 800b1c2:	e102      	b.n	800b3ca <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	015a      	lsls	r2, r3, #5
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1d0:	691a      	ldr	r2, [r3, #16]
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	0159      	lsls	r1, r3, #5
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	440b      	add	r3, r1
 800b1da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4b7c      	ldr	r3, [pc, #496]	@ (800b3d4 <USB_EPStartXfer+0x534>)
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	015a      	lsls	r2, r3, #5
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1f2:	691a      	ldr	r2, [r3, #16]
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	0159      	lsls	r1, r3, #5
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	440b      	add	r3, r1
 800b1fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b200:	4619      	mov	r1, r3
 800b202:	4b75      	ldr	r3, [pc, #468]	@ (800b3d8 <USB_EPStartXfer+0x538>)
 800b204:	4013      	ands	r3, r2
 800b206:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d12f      	bne.n	800b26e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	689a      	ldr	r2, [r3, #8]
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	689a      	ldr	r2, [r3, #8]
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	015a      	lsls	r2, r3, #5
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	4413      	add	r3, r2
 800b22e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b232:	691a      	ldr	r2, [r3, #16]
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	6a1b      	ldr	r3, [r3, #32]
 800b238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b23c:	69b9      	ldr	r1, [r7, #24]
 800b23e:	0148      	lsls	r0, r1, #5
 800b240:	69f9      	ldr	r1, [r7, #28]
 800b242:	4401      	add	r1, r0
 800b244:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b248:	4313      	orrs	r3, r2
 800b24a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b24c:	69bb      	ldr	r3, [r7, #24]
 800b24e:	015a      	lsls	r2, r3, #5
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	4413      	add	r3, r2
 800b254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	69ba      	ldr	r2, [r7, #24]
 800b25c:	0151      	lsls	r1, r2, #5
 800b25e:	69fa      	ldr	r2, [r7, #28]
 800b260:	440a      	add	r2, r1
 800b262:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b266:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b26a:	6113      	str	r3, [r2, #16]
 800b26c:	e05f      	b.n	800b32e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d123      	bne.n	800b2be <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	015a      	lsls	r2, r3, #5
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	4413      	add	r3, r2
 800b27e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b282:	691a      	ldr	r2, [r3, #16]
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b28c:	69b9      	ldr	r1, [r7, #24]
 800b28e:	0148      	lsls	r0, r1, #5
 800b290:	69f9      	ldr	r1, [r7, #28]
 800b292:	4401      	add	r1, r0
 800b294:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b298:	4313      	orrs	r3, r2
 800b29a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	015a      	lsls	r2, r3, #5
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	69ba      	ldr	r2, [r7, #24]
 800b2ac:	0151      	lsls	r1, r2, #5
 800b2ae:	69fa      	ldr	r2, [r7, #28]
 800b2b0:	440a      	add	r2, r1
 800b2b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2ba:	6113      	str	r3, [r2, #16]
 800b2bc:	e037      	b.n	800b32e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	691a      	ldr	r2, [r3, #16]
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	1e5a      	subs	r2, r3, #1
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	689b      	ldr	r3, [r3, #8]
 800b2ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	8afa      	ldrh	r2, [r7, #22]
 800b2da:	fb03 f202 	mul.w	r2, r3, r2
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	015a      	lsls	r2, r3, #5
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ee:	691a      	ldr	r2, [r3, #16]
 800b2f0:	8afb      	ldrh	r3, [r7, #22]
 800b2f2:	04d9      	lsls	r1, r3, #19
 800b2f4:	4b39      	ldr	r3, [pc, #228]	@ (800b3dc <USB_EPStartXfer+0x53c>)
 800b2f6:	400b      	ands	r3, r1
 800b2f8:	69b9      	ldr	r1, [r7, #24]
 800b2fa:	0148      	lsls	r0, r1, #5
 800b2fc:	69f9      	ldr	r1, [r7, #28]
 800b2fe:	4401      	add	r1, r0
 800b300:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b304:	4313      	orrs	r3, r2
 800b306:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	015a      	lsls	r2, r3, #5
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	4413      	add	r3, r2
 800b310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b314:	691a      	ldr	r2, [r3, #16]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b31e:	69b9      	ldr	r1, [r7, #24]
 800b320:	0148      	lsls	r0, r1, #5
 800b322:	69f9      	ldr	r1, [r7, #28]
 800b324:	4401      	add	r1, r0
 800b326:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b32a:	4313      	orrs	r3, r2
 800b32c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b32e:	79fb      	ldrb	r3, [r7, #7]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d10d      	bne.n	800b350 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d009      	beq.n	800b350 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	68d9      	ldr	r1, [r3, #12]
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	015a      	lsls	r2, r3, #5
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	4413      	add	r3, r2
 800b348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b34c:	460a      	mov	r2, r1
 800b34e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	791b      	ldrb	r3, [r3, #4]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d128      	bne.n	800b3aa <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b364:	2b00      	cmp	r3, #0
 800b366:	d110      	bne.n	800b38a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	69ba      	ldr	r2, [r7, #24]
 800b378:	0151      	lsls	r1, r2, #5
 800b37a:	69fa      	ldr	r2, [r7, #28]
 800b37c:	440a      	add	r2, r1
 800b37e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b382:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	e00f      	b.n	800b3aa <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	015a      	lsls	r2, r3, #5
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	4413      	add	r3, r2
 800b392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	69ba      	ldr	r2, [r7, #24]
 800b39a:	0151      	lsls	r1, r2, #5
 800b39c:	69fa      	ldr	r2, [r7, #28]
 800b39e:	440a      	add	r2, r1
 800b3a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3a8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	0151      	lsls	r1, r2, #5
 800b3bc:	69fa      	ldr	r2, [r7, #28]
 800b3be:	440a      	add	r2, r1
 800b3c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b3c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3720      	adds	r7, #32
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	fff80000 	.word	0xfff80000
 800b3d8:	e007ffff 	.word	0xe007ffff
 800b3dc:	1ff80000 	.word	0x1ff80000

0800b3e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b087      	sub	sp, #28
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	785b      	ldrb	r3, [r3, #1]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d14a      	bne.n	800b494 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	015a      	lsls	r2, r3, #5
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	4413      	add	r3, r2
 800b408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b412:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b416:	f040 8086 	bne.w	800b526 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	015a      	lsls	r2, r3, #5
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	4413      	add	r3, r2
 800b424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	7812      	ldrb	r2, [r2, #0]
 800b42e:	0151      	lsls	r1, r2, #5
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	440a      	add	r2, r1
 800b434:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b438:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b43c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	015a      	lsls	r2, r3, #5
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	4413      	add	r3, r2
 800b448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	7812      	ldrb	r2, [r2, #0]
 800b452:	0151      	lsls	r1, r2, #5
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	440a      	add	r2, r1
 800b458:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b45c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b460:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3301      	adds	r3, #1
 800b466:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b46e:	4293      	cmp	r3, r2
 800b470:	d902      	bls.n	800b478 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	75fb      	strb	r3, [r7, #23]
          break;
 800b476:	e056      	b.n	800b526 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	781b      	ldrb	r3, [r3, #0]
 800b47c:	015a      	lsls	r2, r3, #5
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	4413      	add	r3, r2
 800b482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b48c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b490:	d0e7      	beq.n	800b462 <USB_EPStopXfer+0x82>
 800b492:	e048      	b.n	800b526 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4ac:	d13b      	bne.n	800b526 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	015a      	lsls	r2, r3, #5
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	7812      	ldrb	r2, [r2, #0]
 800b4c2:	0151      	lsls	r1, r2, #5
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	440a      	add	r2, r1
 800b4c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b4d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	7812      	ldrb	r2, [r2, #0]
 800b4e6:	0151      	lsls	r1, r2, #5
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	440a      	add	r2, r1
 800b4ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b4f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b502:	4293      	cmp	r3, r2
 800b504:	d902      	bls.n	800b50c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	75fb      	strb	r3, [r7, #23]
          break;
 800b50a:	e00c      	b.n	800b526 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	015a      	lsls	r2, r3, #5
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	4413      	add	r3, r2
 800b516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b524:	d0e7      	beq.n	800b4f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b526:	7dfb      	ldrb	r3, [r7, #23]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	371c      	adds	r7, #28
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr

0800b534 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b534:	b480      	push	{r7}
 800b536:	b089      	sub	sp, #36	@ 0x24
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	4611      	mov	r1, r2
 800b540:	461a      	mov	r2, r3
 800b542:	460b      	mov	r3, r1
 800b544:	71fb      	strb	r3, [r7, #7]
 800b546:	4613      	mov	r3, r2
 800b548:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b552:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b556:	2b00      	cmp	r3, #0
 800b558:	d123      	bne.n	800b5a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b55a:	88bb      	ldrh	r3, [r7, #4]
 800b55c:	3303      	adds	r3, #3
 800b55e:	089b      	lsrs	r3, r3, #2
 800b560:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b562:	2300      	movs	r3, #0
 800b564:	61bb      	str	r3, [r7, #24]
 800b566:	e018      	b.n	800b59a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b568:	79fb      	ldrb	r3, [r7, #7]
 800b56a:	031a      	lsls	r2, r3, #12
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b574:	461a      	mov	r2, r3
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	3301      	adds	r3, #1
 800b580:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	3301      	adds	r3, #1
 800b586:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	3301      	adds	r3, #1
 800b58c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	3301      	adds	r3, #1
 800b592:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	3301      	adds	r3, #1
 800b598:	61bb      	str	r3, [r7, #24]
 800b59a:	69ba      	ldr	r2, [r7, #24]
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d3e2      	bcc.n	800b568 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3724      	adds	r7, #36	@ 0x24
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b08b      	sub	sp, #44	@ 0x2c
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b5c6:	88fb      	ldrh	r3, [r7, #6]
 800b5c8:	089b      	lsrs	r3, r3, #2
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b5ce:	88fb      	ldrh	r3, [r7, #6]
 800b5d0:	f003 0303 	and.w	r3, r3, #3
 800b5d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	623b      	str	r3, [r7, #32]
 800b5da:	e014      	b.n	800b606 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	3301      	adds	r3, #1
 800b604:	623b      	str	r3, [r7, #32]
 800b606:	6a3a      	ldr	r2, [r7, #32]
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d3e6      	bcc.n	800b5dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b60e:	8bfb      	ldrh	r3, [r7, #30]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d01e      	beq.n	800b652 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b614:	2300      	movs	r3, #0
 800b616:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b618:	69bb      	ldr	r3, [r7, #24]
 800b61a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b61e:	461a      	mov	r2, r3
 800b620:	f107 0310 	add.w	r3, r7, #16
 800b624:	6812      	ldr	r2, [r2, #0]
 800b626:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	00db      	lsls	r3, r3, #3
 800b630:	fa22 f303 	lsr.w	r3, r2, r3
 800b634:	b2da      	uxtb	r2, r3
 800b636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b638:	701a      	strb	r2, [r3, #0]
      i++;
 800b63a:	6a3b      	ldr	r3, [r7, #32]
 800b63c:	3301      	adds	r3, #1
 800b63e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b642:	3301      	adds	r3, #1
 800b644:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b646:	8bfb      	ldrh	r3, [r7, #30]
 800b648:	3b01      	subs	r3, #1
 800b64a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b64c:	8bfb      	ldrh	r3, [r7, #30]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d1ea      	bne.n	800b628 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b654:	4618      	mov	r0, r3
 800b656:	372c      	adds	r7, #44	@ 0x2c
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	785b      	ldrb	r3, [r3, #1]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d12c      	bne.n	800b6d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	015a      	lsls	r2, r3, #5
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	4413      	add	r3, r2
 800b684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	db12      	blt.n	800b6b4 <USB_EPSetStall+0x54>
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d00f      	beq.n	800b6b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	015a      	lsls	r2, r3, #5
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	4413      	add	r3, r2
 800b69c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	0151      	lsls	r1, r2, #5
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	440a      	add	r2, r1
 800b6aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b6b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	0151      	lsls	r1, r2, #5
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	440a      	add	r2, r1
 800b6ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	e02b      	b.n	800b72e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	015a      	lsls	r2, r3, #5
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4413      	add	r3, r2
 800b6de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	db12      	blt.n	800b70e <USB_EPSetStall+0xae>
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00f      	beq.n	800b70e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	015a      	lsls	r2, r3, #5
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	0151      	lsls	r1, r2, #5
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	440a      	add	r2, r1
 800b704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b708:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b70c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	015a      	lsls	r2, r3, #5
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	4413      	add	r3, r2
 800b716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	0151      	lsls	r1, r2, #5
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	440a      	add	r2, r1
 800b724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b728:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b72c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	785b      	ldrb	r3, [r3, #1]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d128      	bne.n	800b7aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	015a      	lsls	r2, r3, #5
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4413      	add	r3, r2
 800b760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	0151      	lsls	r1, r2, #5
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	440a      	add	r2, r1
 800b76e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b772:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b776:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	791b      	ldrb	r3, [r3, #4]
 800b77c:	2b03      	cmp	r3, #3
 800b77e:	d003      	beq.n	800b788 <USB_EPClearStall+0x4c>
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	791b      	ldrb	r3, [r3, #4]
 800b784:	2b02      	cmp	r3, #2
 800b786:	d138      	bne.n	800b7fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	015a      	lsls	r2, r3, #5
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	4413      	add	r3, r2
 800b790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	0151      	lsls	r1, r2, #5
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	440a      	add	r2, r1
 800b79e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7a6:	6013      	str	r3, [r2, #0]
 800b7a8:	e027      	b.n	800b7fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	015a      	lsls	r2, r3, #5
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	0151      	lsls	r1, r2, #5
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	440a      	add	r2, r1
 800b7c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b7c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	791b      	ldrb	r3, [r3, #4]
 800b7ce:	2b03      	cmp	r3, #3
 800b7d0:	d003      	beq.n	800b7da <USB_EPClearStall+0x9e>
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	791b      	ldrb	r3, [r3, #4]
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d10f      	bne.n	800b7fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	015a      	lsls	r2, r3, #5
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	0151      	lsls	r1, r2, #5
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	440a      	add	r2, r1
 800b7f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	460b      	mov	r3, r1
 800b812:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b826:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b82a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	78fb      	ldrb	r3, [r7, #3]
 800b836:	011b      	lsls	r3, r3, #4
 800b838:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b83c:	68f9      	ldr	r1, [r7, #12]
 800b83e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b842:	4313      	orrs	r3, r2
 800b844:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3714      	adds	r7, #20
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b86e:	f023 0303 	bic.w	r3, r3, #3
 800b872:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b882:	f023 0302 	bic.w	r3, r3, #2
 800b886:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b896:	b480      	push	{r7}
 800b898:	b085      	sub	sp, #20
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b8b0:	f023 0303 	bic.w	r3, r3, #3
 800b8b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8c4:	f043 0302 	orr.w	r3, r3, #2
 800b8c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	695b      	ldr	r3, [r3, #20]
 800b8e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	699b      	ldr	r3, [r3, #24]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3714      	adds	r7, #20
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8fe:	b480      	push	{r7}
 800b900:	b085      	sub	sp, #20
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b910:	699b      	ldr	r3, [r3, #24]
 800b912:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b91a:	69db      	ldr	r3, [r3, #28]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	4013      	ands	r3, r2
 800b920:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	0c1b      	lsrs	r3, r3, #16
}
 800b926:	4618      	mov	r0, r3
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b932:	b480      	push	{r7}
 800b934:	b085      	sub	sp, #20
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b944:	699b      	ldr	r3, [r3, #24]
 800b946:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b94e:	69db      	ldr	r3, [r3, #28]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	4013      	ands	r3, r2
 800b954:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	b29b      	uxth	r3, r3
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3714      	adds	r7, #20
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b966:	b480      	push	{r7}
 800b968:	b085      	sub	sp, #20
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
 800b96e:	460b      	mov	r3, r1
 800b970:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b976:	78fb      	ldrb	r3, [r7, #3]
 800b978:	015a      	lsls	r2, r3, #5
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	4413      	add	r3, r2
 800b97e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b98c:	695b      	ldr	r3, [r3, #20]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	4013      	ands	r3, r2
 800b992:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b994:	68bb      	ldr	r3, [r7, #8]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3714      	adds	r7, #20
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	b087      	sub	sp, #28
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b9c6:	78fb      	ldrb	r3, [r7, #3]
 800b9c8:	f003 030f 	and.w	r3, r3, #15
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b9d2:	01db      	lsls	r3, r3, #7
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	693a      	ldr	r2, [r7, #16]
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b9dc:	78fb      	ldrb	r3, [r7, #3]
 800b9de:	015a      	lsls	r2, r3, #5
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	693a      	ldr	r2, [r7, #16]
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9f0:	68bb      	ldr	r3, [r7, #8]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	371c      	adds	r7, #28
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b083      	sub	sp, #12
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	695b      	ldr	r3, [r3, #20]
 800ba0a:	f003 0301 	and.w	r3, r3, #1
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	370c      	adds	r7, #12
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr
	...

0800ba1c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba36:	4619      	mov	r1, r3
 800ba38:	4b09      	ldr	r3, [pc, #36]	@ (800ba60 <USB_ActivateSetup+0x44>)
 800ba3a:	4013      	ands	r3, r2
 800ba3c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5e:	4770      	bx	lr
 800ba60:	fffff800 	.word	0xfffff800

0800ba64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b087      	sub	sp, #28
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	607a      	str	r2, [r7, #4]
 800ba70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	333c      	adds	r3, #60	@ 0x3c
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	4a26      	ldr	r2, [pc, #152]	@ (800bb1c <USB_EP0_OutStart+0xb8>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d90a      	bls.n	800ba9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba98:	d101      	bne.n	800ba9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e037      	b.n	800bb0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baa4:	461a      	mov	r2, r3
 800baa6:	2300      	movs	r3, #0
 800baa8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	697a      	ldr	r2, [r7, #20]
 800bab4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bab8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800babc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bacc:	f043 0318 	orr.w	r3, r3, #24
 800bad0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bae0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bae4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bae6:	7afb      	ldrb	r3, [r7, #11]
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d10f      	bne.n	800bb0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baf2:	461a      	mov	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	697a      	ldr	r2, [r7, #20]
 800bb02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb06:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bb0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	371c      	adds	r7, #28
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	4f54300a 	.word	0x4f54300a

0800bb20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb38:	d901      	bls.n	800bb3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	e01b      	b.n	800bb76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	daf2      	bge.n	800bb2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb46:	2300      	movs	r3, #0
 800bb48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	f043 0201 	orr.w	r2, r3, #1
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb62:	d901      	bls.n	800bb68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb64:	2303      	movs	r3, #3
 800bb66:	e006      	b.n	800bb76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	f003 0301 	and.w	r3, r3, #1
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d0f0      	beq.n	800bb56 <USB_CoreReset+0x36>

  return HAL_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3714      	adds	r7, #20
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
	...

0800bb84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb90:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bb94:	f002 fd8c 	bl	800e6b0 <malloc>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d109      	bne.n	800bbb6 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	32b0      	adds	r2, #176	@ 0xb0
 800bbac:	2100      	movs	r1, #0
 800bbae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	e0d4      	b.n	800bd60 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bbb6:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bbba:	2100      	movs	r1, #0
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f002 fe35 	bl	800e82c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	32b0      	adds	r2, #176	@ 0xb0
 800bbcc:	68f9      	ldr	r1, [r7, #12]
 800bbce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	32b0      	adds	r2, #176	@ 0xb0
 800bbdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	7c1b      	ldrb	r3, [r3, #16]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d138      	bne.n	800bc60 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bbee:	4b5e      	ldr	r3, [pc, #376]	@ (800bd68 <USBD_CDC_Init+0x1e4>)
 800bbf0:	7819      	ldrb	r1, [r3, #0]
 800bbf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbf6:	2202      	movs	r2, #2
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f002 fbb6 	bl	800e36a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bbfe:	4b5a      	ldr	r3, [pc, #360]	@ (800bd68 <USBD_CDC_Init+0x1e4>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	f003 020f 	and.w	r2, r3, #15
 800bc06:	6879      	ldr	r1, [r7, #4]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	4413      	add	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	440b      	add	r3, r1
 800bc12:	3324      	adds	r3, #36	@ 0x24
 800bc14:	2201      	movs	r2, #1
 800bc16:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc18:	4b54      	ldr	r3, [pc, #336]	@ (800bd6c <USBD_CDC_Init+0x1e8>)
 800bc1a:	7819      	ldrb	r1, [r3, #0]
 800bc1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc20:	2202      	movs	r2, #2
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f002 fba1 	bl	800e36a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bc28:	4b50      	ldr	r3, [pc, #320]	@ (800bd6c <USBD_CDC_Init+0x1e8>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	f003 020f 	and.w	r2, r3, #15
 800bc30:	6879      	ldr	r1, [r7, #4]
 800bc32:	4613      	mov	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	440b      	add	r3, r1
 800bc3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc40:	2201      	movs	r2, #1
 800bc42:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bc44:	4b4a      	ldr	r3, [pc, #296]	@ (800bd70 <USBD_CDC_Init+0x1ec>)
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	f003 020f 	and.w	r2, r3, #15
 800bc4c:	6879      	ldr	r1, [r7, #4]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	4413      	add	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	440b      	add	r3, r1
 800bc58:	3326      	adds	r3, #38	@ 0x26
 800bc5a:	2210      	movs	r2, #16
 800bc5c:	801a      	strh	r2, [r3, #0]
 800bc5e:	e035      	b.n	800bccc <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bc60:	4b41      	ldr	r3, [pc, #260]	@ (800bd68 <USBD_CDC_Init+0x1e4>)
 800bc62:	7819      	ldrb	r1, [r3, #0]
 800bc64:	2340      	movs	r3, #64	@ 0x40
 800bc66:	2202      	movs	r2, #2
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f002 fb7e 	bl	800e36a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bc6e:	4b3e      	ldr	r3, [pc, #248]	@ (800bd68 <USBD_CDC_Init+0x1e4>)
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	f003 020f 	and.w	r2, r3, #15
 800bc76:	6879      	ldr	r1, [r7, #4]
 800bc78:	4613      	mov	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4413      	add	r3, r2
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	440b      	add	r3, r1
 800bc82:	3324      	adds	r3, #36	@ 0x24
 800bc84:	2201      	movs	r2, #1
 800bc86:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc88:	4b38      	ldr	r3, [pc, #224]	@ (800bd6c <USBD_CDC_Init+0x1e8>)
 800bc8a:	7819      	ldrb	r1, [r3, #0]
 800bc8c:	2340      	movs	r3, #64	@ 0x40
 800bc8e:	2202      	movs	r2, #2
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f002 fb6a 	bl	800e36a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bc96:	4b35      	ldr	r3, [pc, #212]	@ (800bd6c <USBD_CDC_Init+0x1e8>)
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	f003 020f 	and.w	r2, r3, #15
 800bc9e:	6879      	ldr	r1, [r7, #4]
 800bca0:	4613      	mov	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4413      	add	r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	440b      	add	r3, r1
 800bcaa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bcae:	2201      	movs	r2, #1
 800bcb0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bcb2:	4b2f      	ldr	r3, [pc, #188]	@ (800bd70 <USBD_CDC_Init+0x1ec>)
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	f003 020f 	and.w	r2, r3, #15
 800bcba:	6879      	ldr	r1, [r7, #4]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	4413      	add	r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	440b      	add	r3, r1
 800bcc6:	3326      	adds	r3, #38	@ 0x26
 800bcc8:	2210      	movs	r2, #16
 800bcca:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bccc:	4b28      	ldr	r3, [pc, #160]	@ (800bd70 <USBD_CDC_Init+0x1ec>)
 800bcce:	7819      	ldrb	r1, [r3, #0]
 800bcd0:	2308      	movs	r3, #8
 800bcd2:	2203      	movs	r2, #3
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f002 fb48 	bl	800e36a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bcda:	4b25      	ldr	r3, [pc, #148]	@ (800bd70 <USBD_CDC_Init+0x1ec>)
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	f003 020f 	and.w	r2, r3, #15
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	4613      	mov	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	440b      	add	r3, r1
 800bcee:	3324      	adds	r3, #36	@ 0x24
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	33b0      	adds	r3, #176	@ 0xb0
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	4413      	add	r3, r2
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d101      	bne.n	800bd2e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	e018      	b.n	800bd60 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	7c1b      	ldrb	r3, [r3, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d10a      	bne.n	800bd4c <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd36:	4b0d      	ldr	r3, [pc, #52]	@ (800bd6c <USBD_CDC_Init+0x1e8>)
 800bd38:	7819      	ldrb	r1, [r3, #0]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f002 fbff 	bl	800e548 <USBD_LL_PrepareReceive>
 800bd4a:	e008      	b.n	800bd5e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd4c:	4b07      	ldr	r3, [pc, #28]	@ (800bd6c <USBD_CDC_Init+0x1e8>)
 800bd4e:	7819      	ldrb	r1, [r3, #0]
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd56:	2340      	movs	r3, #64	@ 0x40
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f002 fbf5 	bl	800e548 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	2000009f 	.word	0x2000009f
 800bd6c:	200000a0 	.word	0x200000a0
 800bd70:	200000a1 	.word	0x200000a1

0800bd74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bd80:	4b3a      	ldr	r3, [pc, #232]	@ (800be6c <USBD_CDC_DeInit+0xf8>)
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	4619      	mov	r1, r3
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f002 fb15 	bl	800e3b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bd8c:	4b37      	ldr	r3, [pc, #220]	@ (800be6c <USBD_CDC_DeInit+0xf8>)
 800bd8e:	781b      	ldrb	r3, [r3, #0]
 800bd90:	f003 020f 	and.w	r2, r3, #15
 800bd94:	6879      	ldr	r1, [r7, #4]
 800bd96:	4613      	mov	r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	4413      	add	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	440b      	add	r3, r1
 800bda0:	3324      	adds	r3, #36	@ 0x24
 800bda2:	2200      	movs	r2, #0
 800bda4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bda6:	4b32      	ldr	r3, [pc, #200]	@ (800be70 <USBD_CDC_DeInit+0xfc>)
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	4619      	mov	r1, r3
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f002 fb02 	bl	800e3b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bdb2:	4b2f      	ldr	r3, [pc, #188]	@ (800be70 <USBD_CDC_DeInit+0xfc>)
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	f003 020f 	and.w	r2, r3, #15
 800bdba:	6879      	ldr	r1, [r7, #4]
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	440b      	add	r3, r1
 800bdc6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bdca:	2200      	movs	r2, #0
 800bdcc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bdce:	4b29      	ldr	r3, [pc, #164]	@ (800be74 <USBD_CDC_DeInit+0x100>)
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f002 faee 	bl	800e3b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bdda:	4b26      	ldr	r3, [pc, #152]	@ (800be74 <USBD_CDC_DeInit+0x100>)
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	f003 020f 	and.w	r2, r3, #15
 800bde2:	6879      	ldr	r1, [r7, #4]
 800bde4:	4613      	mov	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4413      	add	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	440b      	add	r3, r1
 800bdee:	3324      	adds	r3, #36	@ 0x24
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bdf4:	4b1f      	ldr	r3, [pc, #124]	@ (800be74 <USBD_CDC_DeInit+0x100>)
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	f003 020f 	and.w	r2, r3, #15
 800bdfc:	6879      	ldr	r1, [r7, #4]
 800bdfe:	4613      	mov	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4413      	add	r3, r2
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	440b      	add	r3, r1
 800be08:	3326      	adds	r3, #38	@ 0x26
 800be0a:	2200      	movs	r2, #0
 800be0c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	32b0      	adds	r2, #176	@ 0xb0
 800be18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d01f      	beq.n	800be60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	33b0      	adds	r3, #176	@ 0xb0
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4413      	add	r3, r2
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	32b0      	adds	r2, #176	@ 0xb0
 800be3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be42:	4618      	mov	r0, r3
 800be44:	f002 fc3c 	bl	800e6c0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	32b0      	adds	r2, #176	@ 0xb0
 800be52:	2100      	movs	r1, #0
 800be54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800be60:	2300      	movs	r3, #0
}
 800be62:	4618      	mov	r0, r3
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	2000009f 	.word	0x2000009f
 800be70:	200000a0 	.word	0x200000a0
 800be74:	200000a1 	.word	0x200000a1

0800be78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	32b0      	adds	r2, #176	@ 0xb0
 800be8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800be92:	2300      	movs	r3, #0
 800be94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800be96:	2300      	movs	r3, #0
 800be98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d101      	bne.n	800bea8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bea4:	2303      	movs	r3, #3
 800bea6:	e0bf      	b.n	800c028 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d050      	beq.n	800bf56 <USBD_CDC_Setup+0xde>
 800beb4:	2b20      	cmp	r3, #32
 800beb6:	f040 80af 	bne.w	800c018 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	88db      	ldrh	r3, [r3, #6]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d03a      	beq.n	800bf38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	b25b      	sxtb	r3, r3
 800bec8:	2b00      	cmp	r3, #0
 800beca:	da1b      	bge.n	800bf04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	33b0      	adds	r3, #176	@ 0xb0
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	683a      	ldr	r2, [r7, #0]
 800bee0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bee2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bee4:	683a      	ldr	r2, [r7, #0]
 800bee6:	88d2      	ldrh	r2, [r2, #6]
 800bee8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	88db      	ldrh	r3, [r3, #6]
 800beee:	2b07      	cmp	r3, #7
 800bef0:	bf28      	it	cs
 800bef2:	2307      	movcs	r3, #7
 800bef4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	89fa      	ldrh	r2, [r7, #14]
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f001 fdbd 	bl	800da7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bf02:	e090      	b.n	800c026 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	785a      	ldrb	r2, [r3, #1]
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	88db      	ldrh	r3, [r3, #6]
 800bf12:	2b3f      	cmp	r3, #63	@ 0x3f
 800bf14:	d803      	bhi.n	800bf1e <USBD_CDC_Setup+0xa6>
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	88db      	ldrh	r3, [r3, #6]
 800bf1a:	b2da      	uxtb	r2, r3
 800bf1c:	e000      	b.n	800bf20 <USBD_CDC_Setup+0xa8>
 800bf1e:	2240      	movs	r2, #64	@ 0x40
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bf26:	6939      	ldr	r1, [r7, #16]
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bf2e:	461a      	mov	r2, r3
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f001 fdcf 	bl	800dad4 <USBD_CtlPrepareRx>
      break;
 800bf36:	e076      	b.n	800c026 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	33b0      	adds	r3, #176	@ 0xb0
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4413      	add	r3, r2
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	683a      	ldr	r2, [r7, #0]
 800bf4c:	7850      	ldrb	r0, [r2, #1]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	4798      	blx	r3
      break;
 800bf54:	e067      	b.n	800c026 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	785b      	ldrb	r3, [r3, #1]
 800bf5a:	2b0b      	cmp	r3, #11
 800bf5c:	d851      	bhi.n	800c002 <USBD_CDC_Setup+0x18a>
 800bf5e:	a201      	add	r2, pc, #4	@ (adr r2, 800bf64 <USBD_CDC_Setup+0xec>)
 800bf60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf64:	0800bf95 	.word	0x0800bf95
 800bf68:	0800c011 	.word	0x0800c011
 800bf6c:	0800c003 	.word	0x0800c003
 800bf70:	0800c003 	.word	0x0800c003
 800bf74:	0800c003 	.word	0x0800c003
 800bf78:	0800c003 	.word	0x0800c003
 800bf7c:	0800c003 	.word	0x0800c003
 800bf80:	0800c003 	.word	0x0800c003
 800bf84:	0800c003 	.word	0x0800c003
 800bf88:	0800c003 	.word	0x0800c003
 800bf8c:	0800bfbf 	.word	0x0800bfbf
 800bf90:	0800bfe9 	.word	0x0800bfe9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d107      	bne.n	800bfb0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bfa0:	f107 030a 	add.w	r3, r7, #10
 800bfa4:	2202      	movs	r2, #2
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 fd67 	bl	800da7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfae:	e032      	b.n	800c016 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bfb0:	6839      	ldr	r1, [r7, #0]
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f001 fce5 	bl	800d982 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	75fb      	strb	r3, [r7, #23]
          break;
 800bfbc:	e02b      	b.n	800c016 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d107      	bne.n	800bfda <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bfca:	f107 030d 	add.w	r3, r7, #13
 800bfce:	2201      	movs	r2, #1
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f001 fd52 	bl	800da7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfd8:	e01d      	b.n	800c016 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bfda:	6839      	ldr	r1, [r7, #0]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f001 fcd0 	bl	800d982 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	75fb      	strb	r3, [r7, #23]
          break;
 800bfe6:	e016      	b.n	800c016 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	2b03      	cmp	r3, #3
 800bff2:	d00f      	beq.n	800c014 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f001 fcc3 	bl	800d982 <USBD_CtlError>
            ret = USBD_FAIL;
 800bffc:	2303      	movs	r3, #3
 800bffe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c000:	e008      	b.n	800c014 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f001 fcbc 	bl	800d982 <USBD_CtlError>
          ret = USBD_FAIL;
 800c00a:	2303      	movs	r3, #3
 800c00c:	75fb      	strb	r3, [r7, #23]
          break;
 800c00e:	e002      	b.n	800c016 <USBD_CDC_Setup+0x19e>
          break;
 800c010:	bf00      	nop
 800c012:	e008      	b.n	800c026 <USBD_CDC_Setup+0x1ae>
          break;
 800c014:	bf00      	nop
      }
      break;
 800c016:	e006      	b.n	800c026 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c018:	6839      	ldr	r1, [r7, #0]
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f001 fcb1 	bl	800d982 <USBD_CtlError>
      ret = USBD_FAIL;
 800c020:	2303      	movs	r3, #3
 800c022:	75fb      	strb	r3, [r7, #23]
      break;
 800c024:	bf00      	nop
  }

  return (uint8_t)ret;
 800c026:	7dfb      	ldrb	r3, [r7, #23]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3718      	adds	r7, #24
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	460b      	mov	r3, r1
 800c03a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c042:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	32b0      	adds	r2, #176	@ 0xb0
 800c04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d101      	bne.n	800c05a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c056:	2303      	movs	r3, #3
 800c058:	e065      	b.n	800c126 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	32b0      	adds	r2, #176	@ 0xb0
 800c064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c068:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c06a:	78fb      	ldrb	r3, [r7, #3]
 800c06c:	f003 020f 	and.w	r2, r3, #15
 800c070:	6879      	ldr	r1, [r7, #4]
 800c072:	4613      	mov	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4413      	add	r3, r2
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	440b      	add	r3, r1
 800c07c:	3318      	adds	r3, #24
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d02f      	beq.n	800c0e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c084:	78fb      	ldrb	r3, [r7, #3]
 800c086:	f003 020f 	and.w	r2, r3, #15
 800c08a:	6879      	ldr	r1, [r7, #4]
 800c08c:	4613      	mov	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	440b      	add	r3, r1
 800c096:	3318      	adds	r3, #24
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	78fb      	ldrb	r3, [r7, #3]
 800c09c:	f003 010f 	and.w	r1, r3, #15
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	00db      	lsls	r3, r3, #3
 800c0a6:	440b      	add	r3, r1
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	4403      	add	r3, r0
 800c0ac:	331c      	adds	r3, #28
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800c0b4:	fb01 f303 	mul.w	r3, r1, r3
 800c0b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d112      	bne.n	800c0e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c0be:	78fb      	ldrb	r3, [r7, #3]
 800c0c0:	f003 020f 	and.w	r2, r3, #15
 800c0c4:	6879      	ldr	r1, [r7, #4]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	440b      	add	r3, r1
 800c0d0:	3318      	adds	r3, #24
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c0d6:	78f9      	ldrb	r1, [r7, #3]
 800c0d8:	2300      	movs	r3, #0
 800c0da:	2200      	movs	r2, #0
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f002 fa12 	bl	800e506 <USBD_LL_Transmit>
 800c0e2:	e01f      	b.n	800c124 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	33b0      	adds	r3, #176	@ 0xb0
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4413      	add	r3, r2
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d010      	beq.n	800c124 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	33b0      	adds	r3, #176	@ 0xb0
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	4413      	add	r3, r2
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c11a:	68ba      	ldr	r2, [r7, #8]
 800c11c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c120:	78fa      	ldrb	r2, [r7, #3]
 800c122:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b084      	sub	sp, #16
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	460b      	mov	r3, r1
 800c138:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	32b0      	adds	r2, #176	@ 0xb0
 800c144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c148:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	32b0      	adds	r2, #176	@ 0xb0
 800c154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d101      	bne.n	800c160 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c15c:	2303      	movs	r3, #3
 800c15e:	e01a      	b.n	800c196 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c160:	78fb      	ldrb	r3, [r7, #3]
 800c162:	4619      	mov	r1, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f002 fa10 	bl	800e58a <USBD_LL_GetRxDataSize>
 800c16a:	4602      	mov	r2, r0
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	33b0      	adds	r3, #176	@ 0xb0
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4413      	add	r3, r2
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c190:	4611      	mov	r1, r2
 800c192:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}

0800c19e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	32b0      	adds	r2, #176	@ 0xb0
 800c1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d101      	bne.n	800c1c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	e024      	b.n	800c20a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	33b0      	adds	r3, #176	@ 0xb0
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4413      	add	r3, r2
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d019      	beq.n	800c208 <USBD_CDC_EP0_RxReady+0x6a>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c1da:	2bff      	cmp	r3, #255	@ 0xff
 800c1dc:	d014      	beq.n	800c208 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	33b0      	adds	r3, #176	@ 0xb0
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4413      	add	r3, r2
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c1f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c1fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	22ff      	movs	r2, #255	@ 0xff
 800c204:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
	...

0800c214 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c21c:	2182      	movs	r1, #130	@ 0x82
 800c21e:	4818      	ldr	r0, [pc, #96]	@ (800c280 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c220:	f000 fd4f 	bl	800ccc2 <USBD_GetEpDesc>
 800c224:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c226:	2101      	movs	r1, #1
 800c228:	4815      	ldr	r0, [pc, #84]	@ (800c280 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c22a:	f000 fd4a 	bl	800ccc2 <USBD_GetEpDesc>
 800c22e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c230:	2181      	movs	r1, #129	@ 0x81
 800c232:	4813      	ldr	r0, [pc, #76]	@ (800c280 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c234:	f000 fd45 	bl	800ccc2 <USBD_GetEpDesc>
 800c238:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d002      	beq.n	800c246 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	2210      	movs	r2, #16
 800c244:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d006      	beq.n	800c25a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	2200      	movs	r2, #0
 800c250:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c254:	711a      	strb	r2, [r3, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d006      	beq.n	800c26e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2200      	movs	r2, #0
 800c264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c268:	711a      	strb	r2, [r3, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2243      	movs	r2, #67	@ 0x43
 800c272:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c274:	4b02      	ldr	r3, [pc, #8]	@ (800c280 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c276:	4618      	mov	r0, r3
 800c278:	3718      	adds	r7, #24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	2000005c 	.word	0x2000005c

0800c284 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c28c:	2182      	movs	r1, #130	@ 0x82
 800c28e:	4818      	ldr	r0, [pc, #96]	@ (800c2f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c290:	f000 fd17 	bl	800ccc2 <USBD_GetEpDesc>
 800c294:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c296:	2101      	movs	r1, #1
 800c298:	4815      	ldr	r0, [pc, #84]	@ (800c2f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c29a:	f000 fd12 	bl	800ccc2 <USBD_GetEpDesc>
 800c29e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c2a0:	2181      	movs	r1, #129	@ 0x81
 800c2a2:	4813      	ldr	r0, [pc, #76]	@ (800c2f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c2a4:	f000 fd0d 	bl	800ccc2 <USBD_GetEpDesc>
 800c2a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	2210      	movs	r2, #16
 800c2b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d006      	beq.n	800c2ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	711a      	strb	r2, [r3, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f042 0202 	orr.w	r2, r2, #2
 800c2c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d006      	beq.n	800c2de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	711a      	strb	r2, [r3, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f042 0202 	orr.w	r2, r2, #2
 800c2dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2243      	movs	r2, #67	@ 0x43
 800c2e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c2e4:	4b02      	ldr	r3, [pc, #8]	@ (800c2f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3718      	adds	r7, #24
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	2000005c 	.word	0x2000005c

0800c2f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c2fc:	2182      	movs	r1, #130	@ 0x82
 800c2fe:	4818      	ldr	r0, [pc, #96]	@ (800c360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c300:	f000 fcdf 	bl	800ccc2 <USBD_GetEpDesc>
 800c304:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c306:	2101      	movs	r1, #1
 800c308:	4815      	ldr	r0, [pc, #84]	@ (800c360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c30a:	f000 fcda 	bl	800ccc2 <USBD_GetEpDesc>
 800c30e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c310:	2181      	movs	r1, #129	@ 0x81
 800c312:	4813      	ldr	r0, [pc, #76]	@ (800c360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c314:	f000 fcd5 	bl	800ccc2 <USBD_GetEpDesc>
 800c318:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	2210      	movs	r2, #16
 800c324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d006      	beq.n	800c33a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	2200      	movs	r2, #0
 800c330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c334:	711a      	strb	r2, [r3, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d006      	beq.n	800c34e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c348:	711a      	strb	r2, [r3, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2243      	movs	r2, #67	@ 0x43
 800c352:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c354:	4b02      	ldr	r3, [pc, #8]	@ (800c360 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c356:	4618      	mov	r0, r3
 800c358:	3718      	adds	r7, #24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	2000005c 	.word	0x2000005c

0800c364 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	220a      	movs	r2, #10
 800c370:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c372:	4b03      	ldr	r3, [pc, #12]	@ (800c380 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c374:	4618      	mov	r0, r3
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr
 800c380:	20000018 	.word	0x20000018

0800c384 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d101      	bne.n	800c398 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c394:	2303      	movs	r3, #3
 800c396:	e009      	b.n	800c3ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	33b0      	adds	r3, #176	@ 0xb0
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c3aa:	2300      	movs	r3, #0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	370c      	adds	r7, #12
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b087      	sub	sp, #28
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	32b0      	adds	r2, #176	@ 0xb0
 800c3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d101      	bne.n	800c3de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	e008      	b.n	800c3f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	68ba      	ldr	r2, [r7, #8]
 800c3e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	371c      	adds	r7, #28
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	32b0      	adds	r2, #176	@ 0xb0
 800c410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c414:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d101      	bne.n	800c420 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c41c:	2303      	movs	r3, #3
 800c41e:	e004      	b.n	800c42a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3714      	adds	r7, #20
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr
	...

0800c438 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	32b0      	adds	r2, #176	@ 0xb0
 800c44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c44e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c450:	2301      	movs	r3, #1
 800c452:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d101      	bne.n	800c45e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c45a:	2303      	movs	r3, #3
 800c45c:	e025      	b.n	800c4aa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c464:	2b00      	cmp	r3, #0
 800c466:	d11f      	bne.n	800c4a8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c470:	4b10      	ldr	r3, [pc, #64]	@ (800c4b4 <USBD_CDC_TransmitPacket+0x7c>)
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	f003 020f 	and.w	r2, r3, #15
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	4613      	mov	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4413      	add	r3, r2
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	4403      	add	r3, r0
 800c48a:	3318      	adds	r3, #24
 800c48c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c48e:	4b09      	ldr	r3, [pc, #36]	@ (800c4b4 <USBD_CDC_TransmitPacket+0x7c>)
 800c490:	7819      	ldrb	r1, [r3, #0]
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f002 f831 	bl	800e506 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}
 800c4b2:	bf00      	nop
 800c4b4:	2000009f 	.word	0x2000009f

0800c4b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	32b0      	adds	r2, #176	@ 0xb0
 800c4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	32b0      	adds	r2, #176	@ 0xb0
 800c4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d101      	bne.n	800c4e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	e018      	b.n	800c518 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	7c1b      	ldrb	r3, [r3, #16]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10a      	bne.n	800c504 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c4ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c520 <USBD_CDC_ReceivePacket+0x68>)
 800c4f0:	7819      	ldrb	r1, [r3, #0]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c4f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f002 f823 	bl	800e548 <USBD_LL_PrepareReceive>
 800c502:	e008      	b.n	800c516 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c504:	4b06      	ldr	r3, [pc, #24]	@ (800c520 <USBD_CDC_ReceivePacket+0x68>)
 800c506:	7819      	ldrb	r1, [r3, #0]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c50e:	2340      	movs	r3, #64	@ 0x40
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f002 f819 	bl	800e548 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	200000a0 	.word	0x200000a0

0800c524 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	4613      	mov	r3, r2
 800c530:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c538:	2303      	movs	r3, #3
 800c53a:	e01f      	b.n	800c57c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2200      	movs	r2, #0
 800c540:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2200      	movs	r2, #0
 800c550:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d003      	beq.n	800c562 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	68ba      	ldr	r2, [r7, #8]
 800c55e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2201      	movs	r2, #1
 800c566:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	79fa      	ldrb	r2, [r7, #7]
 800c56e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f001 fe93 	bl	800e29c <USBD_LL_Init>
 800c576:	4603      	mov	r3, r0
 800c578:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3718      	adds	r7, #24
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c58e:	2300      	movs	r3, #0
 800c590:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c598:	2303      	movs	r3, #3
 800c59a:	e025      	b.n	800c5e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	32ae      	adds	r2, #174	@ 0xae
 800c5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00f      	beq.n	800c5d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	32ae      	adds	r2, #174	@ 0xae
 800c5c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5c8:	f107 020e 	add.w	r2, r7, #14
 800c5cc:	4610      	mov	r0, r2
 800c5ce:	4798      	blx	r3
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f001 fe9b 	bl	800e334 <USBD_LL_Start>
 800c5fe:	4603      	mov	r3, r0
}
 800c600:	4618      	mov	r0, r3
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c610:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c612:	4618      	mov	r0, r3
 800c614:	370c      	adds	r7, #12
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr

0800c61e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c61e:	b580      	push	{r7, lr}
 800c620:	b084      	sub	sp, #16
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
 800c626:	460b      	mov	r3, r1
 800c628:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c62a:	2300      	movs	r3, #0
 800c62c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c634:	2b00      	cmp	r3, #0
 800c636:	d009      	beq.n	800c64c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	78fa      	ldrb	r2, [r7, #3]
 800c642:	4611      	mov	r1, r2
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	4798      	blx	r3
 800c648:	4603      	mov	r3, r0
 800c64a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b084      	sub	sp, #16
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
 800c65e:	460b      	mov	r3, r1
 800c660:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c662:	2300      	movs	r3, #0
 800c664:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	78fa      	ldrb	r2, [r7, #3]
 800c670:	4611      	mov	r1, r2
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	4798      	blx	r3
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d001      	beq.n	800c680 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c67c:	2303      	movs	r3, #3
 800c67e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c680:	7bfb      	ldrb	r3, [r7, #15]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b084      	sub	sp, #16
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
 800c692:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c69a:	6839      	ldr	r1, [r7, #0]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f001 f936 	bl	800d90e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c6be:	f003 031f 	and.w	r3, r3, #31
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d01a      	beq.n	800c6fc <USBD_LL_SetupStage+0x72>
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d822      	bhi.n	800c710 <USBD_LL_SetupStage+0x86>
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d002      	beq.n	800c6d4 <USBD_LL_SetupStage+0x4a>
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d00a      	beq.n	800c6e8 <USBD_LL_SetupStage+0x5e>
 800c6d2:	e01d      	b.n	800c710 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c6da:	4619      	mov	r1, r3
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 fb63 	bl	800cda8 <USBD_StdDevReq>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	73fb      	strb	r3, [r7, #15]
      break;
 800c6e6:	e020      	b.n	800c72a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fbcb 	bl	800ce8c <USBD_StdItfReq>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	73fb      	strb	r3, [r7, #15]
      break;
 800c6fa:	e016      	b.n	800c72a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c702:	4619      	mov	r1, r3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 fc2d 	bl	800cf64 <USBD_StdEPReq>
 800c70a:	4603      	mov	r3, r0
 800c70c:	73fb      	strb	r3, [r7, #15]
      break;
 800c70e:	e00c      	b.n	800c72a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c716:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	4619      	mov	r1, r3
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f001 fe68 	bl	800e3f4 <USBD_LL_StallEP>
 800c724:	4603      	mov	r3, r0
 800c726:	73fb      	strb	r3, [r7, #15]
      break;
 800c728:	bf00      	nop
  }

  return ret;
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b086      	sub	sp, #24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	460b      	mov	r3, r1
 800c73e:	607a      	str	r2, [r7, #4]
 800c740:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c742:	2300      	movs	r3, #0
 800c744:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c746:	7afb      	ldrb	r3, [r7, #11]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d16e      	bne.n	800c82a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c752:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c75a:	2b03      	cmp	r3, #3
 800c75c:	f040 8098 	bne.w	800c890 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	689a      	ldr	r2, [r3, #8]
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d913      	bls.n	800c794 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	689a      	ldr	r2, [r3, #8]
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	1ad2      	subs	r2, r2, r3
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	68da      	ldr	r2, [r3, #12]
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	4293      	cmp	r3, r2
 800c784:	bf28      	it	cs
 800c786:	4613      	movcs	r3, r2
 800c788:	461a      	mov	r2, r3
 800c78a:	6879      	ldr	r1, [r7, #4]
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f001 f9be 	bl	800db0e <USBD_CtlContinueRx>
 800c792:	e07d      	b.n	800c890 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c79a:	f003 031f 	and.w	r3, r3, #31
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d014      	beq.n	800c7cc <USBD_LL_DataOutStage+0x98>
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d81d      	bhi.n	800c7e2 <USBD_LL_DataOutStage+0xae>
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d002      	beq.n	800c7b0 <USBD_LL_DataOutStage+0x7c>
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d003      	beq.n	800c7b6 <USBD_LL_DataOutStage+0x82>
 800c7ae:	e018      	b.n	800c7e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	75bb      	strb	r3, [r7, #22]
            break;
 800c7b4:	e018      	b.n	800c7e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	4619      	mov	r1, r3
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f000 fa64 	bl	800cc8e <USBD_CoreFindIF>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	75bb      	strb	r3, [r7, #22]
            break;
 800c7ca:	e00d      	b.n	800c7e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f000 fa66 	bl	800cca8 <USBD_CoreFindEP>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	75bb      	strb	r3, [r7, #22]
            break;
 800c7e0:	e002      	b.n	800c7e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	75bb      	strb	r3, [r7, #22]
            break;
 800c7e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c7e8:	7dbb      	ldrb	r3, [r7, #22]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d119      	bne.n	800c822 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	2b03      	cmp	r3, #3
 800c7f8:	d113      	bne.n	800c822 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c7fa:	7dba      	ldrb	r2, [r7, #22]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	32ae      	adds	r2, #174	@ 0xae
 800c800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00b      	beq.n	800c822 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c80a:	7dba      	ldrb	r2, [r7, #22]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c812:	7dba      	ldrb	r2, [r7, #22]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	32ae      	adds	r2, #174	@ 0xae
 800c818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c81c:	691b      	ldr	r3, [r3, #16]
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f001 f984 	bl	800db30 <USBD_CtlSendStatus>
 800c828:	e032      	b.n	800c890 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c82a:	7afb      	ldrb	r3, [r7, #11]
 800c82c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c830:	b2db      	uxtb	r3, r3
 800c832:	4619      	mov	r1, r3
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f000 fa37 	bl	800cca8 <USBD_CoreFindEP>
 800c83a:	4603      	mov	r3, r0
 800c83c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c83e:	7dbb      	ldrb	r3, [r7, #22]
 800c840:	2bff      	cmp	r3, #255	@ 0xff
 800c842:	d025      	beq.n	800c890 <USBD_LL_DataOutStage+0x15c>
 800c844:	7dbb      	ldrb	r3, [r7, #22]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d122      	bne.n	800c890 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b03      	cmp	r3, #3
 800c854:	d117      	bne.n	800c886 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c856:	7dba      	ldrb	r2, [r7, #22]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	32ae      	adds	r2, #174	@ 0xae
 800c85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00f      	beq.n	800c886 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c866:	7dba      	ldrb	r2, [r7, #22]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c86e:	7dba      	ldrb	r2, [r7, #22]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	32ae      	adds	r2, #174	@ 0xae
 800c874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c878:	699b      	ldr	r3, [r3, #24]
 800c87a:	7afa      	ldrb	r2, [r7, #11]
 800c87c:	4611      	mov	r1, r2
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	4798      	blx	r3
 800c882:	4603      	mov	r3, r0
 800c884:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c886:	7dfb      	ldrb	r3, [r7, #23]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d001      	beq.n	800c890 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c88c:	7dfb      	ldrb	r3, [r7, #23]
 800c88e:	e000      	b.n	800c892 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c890:	2300      	movs	r3, #0
}
 800c892:	4618      	mov	r0, r3
 800c894:	3718      	adds	r7, #24
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b086      	sub	sp, #24
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	60f8      	str	r0, [r7, #12]
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	607a      	str	r2, [r7, #4]
 800c8a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c8a8:	7afb      	ldrb	r3, [r7, #11]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d16f      	bne.n	800c98e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	3314      	adds	r3, #20
 800c8b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d15a      	bne.n	800c974 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	689a      	ldr	r2, [r3, #8]
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d914      	bls.n	800c8f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	689a      	ldr	r2, [r3, #8]
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	1ad2      	subs	r2, r2, r3
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	461a      	mov	r2, r3
 800c8de:	6879      	ldr	r1, [r7, #4]
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	f001 f8e6 	bl	800dab2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f001 fe2b 	bl	800e548 <USBD_LL_PrepareReceive>
 800c8f2:	e03f      	b.n	800c974 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	68da      	ldr	r2, [r3, #12]
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d11c      	bne.n	800c93a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	685a      	ldr	r2, [r3, #4]
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c908:	429a      	cmp	r2, r3
 800c90a:	d316      	bcc.n	800c93a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	685a      	ldr	r2, [r3, #4]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c916:	429a      	cmp	r2, r3
 800c918:	d20f      	bcs.n	800c93a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c91a:	2200      	movs	r2, #0
 800c91c:	2100      	movs	r1, #0
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f001 f8c7 	bl	800dab2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2200      	movs	r2, #0
 800c928:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c92c:	2300      	movs	r3, #0
 800c92e:	2200      	movs	r2, #0
 800c930:	2100      	movs	r1, #0
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f001 fe08 	bl	800e548 <USBD_LL_PrepareReceive>
 800c938:	e01c      	b.n	800c974 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b03      	cmp	r3, #3
 800c944:	d10f      	bne.n	800c966 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d009      	beq.n	800c966 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2200      	movs	r2, #0
 800c956:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c966:	2180      	movs	r1, #128	@ 0x80
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f001 fd43 	bl	800e3f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f001 f8f1 	bl	800db56 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d03a      	beq.n	800c9f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f7ff fe42 	bl	800c608 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2200      	movs	r2, #0
 800c988:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c98c:	e032      	b.n	800c9f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c98e:	7afb      	ldrb	r3, [r7, #11]
 800c990:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c994:	b2db      	uxtb	r3, r3
 800c996:	4619      	mov	r1, r3
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f000 f985 	bl	800cca8 <USBD_CoreFindEP>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9a2:	7dfb      	ldrb	r3, [r7, #23]
 800c9a4:	2bff      	cmp	r3, #255	@ 0xff
 800c9a6:	d025      	beq.n	800c9f4 <USBD_LL_DataInStage+0x15a>
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d122      	bne.n	800c9f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	2b03      	cmp	r3, #3
 800c9b8:	d11c      	bne.n	800c9f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c9ba:	7dfa      	ldrb	r2, [r7, #23]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	32ae      	adds	r2, #174	@ 0xae
 800c9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c4:	695b      	ldr	r3, [r3, #20]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d014      	beq.n	800c9f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c9ca:	7dfa      	ldrb	r2, [r7, #23]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c9d2:	7dfa      	ldrb	r2, [r7, #23]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	32ae      	adds	r2, #174	@ 0xae
 800c9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	7afa      	ldrb	r2, [r7, #11]
 800c9e0:	4611      	mov	r1, r2
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	4798      	blx	r3
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c9ea:	7dbb      	ldrb	r3, [r7, #22]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d001      	beq.n	800c9f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c9f0:	7dbb      	ldrb	r3, [r7, #22]
 800c9f2:	e000      	b.n	800c9f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b084      	sub	sp, #16
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca06:	2300      	movs	r3, #0
 800ca08:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2200      	movs	r2, #0
 800ca16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d014      	beq.n	800ca64 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00e      	beq.n	800ca64 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	6852      	ldr	r2, [r2, #4]
 800ca52:	b2d2      	uxtb	r2, r2
 800ca54:	4611      	mov	r1, r2
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	4798      	blx	r3
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d001      	beq.n	800ca64 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ca60:	2303      	movs	r3, #3
 800ca62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca64:	2340      	movs	r3, #64	@ 0x40
 800ca66:	2200      	movs	r2, #0
 800ca68:	2100      	movs	r1, #0
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f001 fc7d 	bl	800e36a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2240      	movs	r2, #64	@ 0x40
 800ca7c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca80:	2340      	movs	r3, #64	@ 0x40
 800ca82:	2200      	movs	r2, #0
 800ca84:	2180      	movs	r1, #128	@ 0x80
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f001 fc6f 	bl	800e36a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2240      	movs	r2, #64	@ 0x40
 800ca96:	621a      	str	r2, [r3, #32]

  return ret;
 800ca98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800caa2:	b480      	push	{r7}
 800caa4:	b083      	sub	sp, #12
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	460b      	mov	r3, r1
 800caac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	78fa      	ldrb	r2, [r7, #3]
 800cab2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	370c      	adds	r7, #12
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr

0800cac2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cac2:	b480      	push	{r7}
 800cac4:	b083      	sub	sp, #12
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cad0:	b2db      	uxtb	r3, r3
 800cad2:	2b04      	cmp	r3, #4
 800cad4:	d006      	beq.n	800cae4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cadc:	b2da      	uxtb	r2, r3
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2204      	movs	r2, #4
 800cae8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	370c      	adds	r7, #12
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr

0800cafa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cafa:	b480      	push	{r7}
 800cafc:	b083      	sub	sp, #12
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	2b04      	cmp	r3, #4
 800cb0c:	d106      	bne.n	800cb1c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cb1c:	2300      	movs	r3, #0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	370c      	adds	r7, #12
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr

0800cb2a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cb2a:	b580      	push	{r7, lr}
 800cb2c:	b082      	sub	sp, #8
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d110      	bne.n	800cb60 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00b      	beq.n	800cb60 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb4e:	69db      	ldr	r3, [r3, #28]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d005      	beq.n	800cb60 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb5a:	69db      	ldr	r3, [r3, #28]
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3708      	adds	r7, #8
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b082      	sub	sp, #8
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
 800cb72:	460b      	mov	r3, r1
 800cb74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	32ae      	adds	r2, #174	@ 0xae
 800cb80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d101      	bne.n	800cb8c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	e01c      	b.n	800cbc6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	2b03      	cmp	r3, #3
 800cb96:	d115      	bne.n	800cbc4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	32ae      	adds	r2, #174	@ 0xae
 800cba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cba6:	6a1b      	ldr	r3, [r3, #32]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00b      	beq.n	800cbc4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	32ae      	adds	r2, #174	@ 0xae
 800cbb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbba:	6a1b      	ldr	r3, [r3, #32]
 800cbbc:	78fa      	ldrb	r2, [r7, #3]
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b082      	sub	sp, #8
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	32ae      	adds	r2, #174	@ 0xae
 800cbe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d101      	bne.n	800cbf0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cbec:	2303      	movs	r3, #3
 800cbee:	e01c      	b.n	800cc2a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	d115      	bne.n	800cc28 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	32ae      	adds	r2, #174	@ 0xae
 800cc06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00b      	beq.n	800cc28 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	32ae      	adds	r2, #174	@ 0xae
 800cc1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc20:	78fa      	ldrb	r2, [r7, #3]
 800cc22:	4611      	mov	r1, r2
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cc32:	b480      	push	{r7}
 800cc34:	b083      	sub	sp, #12
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2201      	movs	r2, #1
 800cc58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00e      	beq.n	800cc84 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	6852      	ldr	r2, [r2, #4]
 800cc72:	b2d2      	uxtb	r2, r2
 800cc74:	4611      	mov	r1, r2
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	4798      	blx	r3
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d001      	beq.n	800cc84 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cc80:	2303      	movs	r3, #3
 800cc82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cc8e:	b480      	push	{r7}
 800cc90:	b083      	sub	sp, #12
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	460b      	mov	r3, r1
 800cc98:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc9a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ccb4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	370c      	adds	r7, #12
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr

0800ccc2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b086      	sub	sp, #24
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	460b      	mov	r3, r1
 800cccc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	885b      	ldrh	r3, [r3, #2]
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	7812      	ldrb	r2, [r2, #0]
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d91f      	bls.n	800cd28 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ccee:	e013      	b.n	800cd18 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ccf0:	f107 030a 	add.w	r3, r7, #10
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6978      	ldr	r0, [r7, #20]
 800ccf8:	f000 f81b 	bl	800cd32 <USBD_GetNextDesc>
 800ccfc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	785b      	ldrb	r3, [r3, #1]
 800cd02:	2b05      	cmp	r3, #5
 800cd04:	d108      	bne.n	800cd18 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	789b      	ldrb	r3, [r3, #2]
 800cd0e:	78fa      	ldrb	r2, [r7, #3]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d008      	beq.n	800cd26 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cd14:	2300      	movs	r3, #0
 800cd16:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	885b      	ldrh	r3, [r3, #2]
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	897b      	ldrh	r3, [r7, #10]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d8e5      	bhi.n	800ccf0 <USBD_GetEpDesc+0x2e>
 800cd24:	e000      	b.n	800cd28 <USBD_GetEpDesc+0x66>
          break;
 800cd26:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cd28:	693b      	ldr	r3, [r7, #16]
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3718      	adds	r7, #24
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}

0800cd32 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cd32:	b480      	push	{r7}
 800cd34:	b085      	sub	sp, #20
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	7812      	ldrb	r2, [r2, #0]
 800cd48:	4413      	add	r3, r2
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	461a      	mov	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4413      	add	r3, r2
 800cd5a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cd6a:	b480      	push	{r7}
 800cd6c:	b087      	sub	sp, #28
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cd88:	8a3b      	ldrh	r3, [r7, #16]
 800cd8a:	021b      	lsls	r3, r3, #8
 800cd8c:	b21a      	sxth	r2, r3
 800cd8e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd92:	4313      	orrs	r3, r2
 800cd94:	b21b      	sxth	r3, r3
 800cd96:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cd98:	89fb      	ldrh	r3, [r7, #14]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	371c      	adds	r7, #28
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr
	...

0800cda8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cdbe:	2b40      	cmp	r3, #64	@ 0x40
 800cdc0:	d005      	beq.n	800cdce <USBD_StdDevReq+0x26>
 800cdc2:	2b40      	cmp	r3, #64	@ 0x40
 800cdc4:	d857      	bhi.n	800ce76 <USBD_StdDevReq+0xce>
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00f      	beq.n	800cdea <USBD_StdDevReq+0x42>
 800cdca:	2b20      	cmp	r3, #32
 800cdcc:	d153      	bne.n	800ce76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	32ae      	adds	r2, #174	@ 0xae
 800cdd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	6839      	ldr	r1, [r7, #0]
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	4798      	blx	r3
 800cde4:	4603      	mov	r3, r0
 800cde6:	73fb      	strb	r3, [r7, #15]
      break;
 800cde8:	e04a      	b.n	800ce80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	785b      	ldrb	r3, [r3, #1]
 800cdee:	2b09      	cmp	r3, #9
 800cdf0:	d83b      	bhi.n	800ce6a <USBD_StdDevReq+0xc2>
 800cdf2:	a201      	add	r2, pc, #4	@ (adr r2, 800cdf8 <USBD_StdDevReq+0x50>)
 800cdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf8:	0800ce4d 	.word	0x0800ce4d
 800cdfc:	0800ce61 	.word	0x0800ce61
 800ce00:	0800ce6b 	.word	0x0800ce6b
 800ce04:	0800ce57 	.word	0x0800ce57
 800ce08:	0800ce6b 	.word	0x0800ce6b
 800ce0c:	0800ce2b 	.word	0x0800ce2b
 800ce10:	0800ce21 	.word	0x0800ce21
 800ce14:	0800ce6b 	.word	0x0800ce6b
 800ce18:	0800ce43 	.word	0x0800ce43
 800ce1c:	0800ce35 	.word	0x0800ce35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ce20:	6839      	ldr	r1, [r7, #0]
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 fa3c 	bl	800d2a0 <USBD_GetDescriptor>
          break;
 800ce28:	e024      	b.n	800ce74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ce2a:	6839      	ldr	r1, [r7, #0]
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f000 fbcb 	bl	800d5c8 <USBD_SetAddress>
          break;
 800ce32:	e01f      	b.n	800ce74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ce34:	6839      	ldr	r1, [r7, #0]
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 fc0a 	bl	800d650 <USBD_SetConfig>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	73fb      	strb	r3, [r7, #15]
          break;
 800ce40:	e018      	b.n	800ce74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ce42:	6839      	ldr	r1, [r7, #0]
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 fcad 	bl	800d7a4 <USBD_GetConfig>
          break;
 800ce4a:	e013      	b.n	800ce74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ce4c:	6839      	ldr	r1, [r7, #0]
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fcde 	bl	800d810 <USBD_GetStatus>
          break;
 800ce54:	e00e      	b.n	800ce74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ce56:	6839      	ldr	r1, [r7, #0]
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 fd0d 	bl	800d878 <USBD_SetFeature>
          break;
 800ce5e:	e009      	b.n	800ce74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 fd31 	bl	800d8ca <USBD_ClrFeature>
          break;
 800ce68:	e004      	b.n	800ce74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ce6a:	6839      	ldr	r1, [r7, #0]
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 fd88 	bl	800d982 <USBD_CtlError>
          break;
 800ce72:	bf00      	nop
      }
      break;
 800ce74:	e004      	b.n	800ce80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ce76:	6839      	ldr	r1, [r7, #0]
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 fd82 	bl	800d982 <USBD_CtlError>
      break;
 800ce7e:	bf00      	nop
  }

  return ret;
 800ce80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop

0800ce8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce96:	2300      	movs	r3, #0
 800ce98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cea2:	2b40      	cmp	r3, #64	@ 0x40
 800cea4:	d005      	beq.n	800ceb2 <USBD_StdItfReq+0x26>
 800cea6:	2b40      	cmp	r3, #64	@ 0x40
 800cea8:	d852      	bhi.n	800cf50 <USBD_StdItfReq+0xc4>
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d001      	beq.n	800ceb2 <USBD_StdItfReq+0x26>
 800ceae:	2b20      	cmp	r3, #32
 800ceb0:	d14e      	bne.n	800cf50 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceb8:	b2db      	uxtb	r3, r3
 800ceba:	3b01      	subs	r3, #1
 800cebc:	2b02      	cmp	r3, #2
 800cebe:	d840      	bhi.n	800cf42 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	889b      	ldrh	r3, [r3, #4]
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d836      	bhi.n	800cf38 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	889b      	ldrh	r3, [r3, #4]
 800cece:	b2db      	uxtb	r3, r3
 800ced0:	4619      	mov	r1, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7ff fedb 	bl	800cc8e <USBD_CoreFindIF>
 800ced8:	4603      	mov	r3, r0
 800ceda:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cedc:	7bbb      	ldrb	r3, [r7, #14]
 800cede:	2bff      	cmp	r3, #255	@ 0xff
 800cee0:	d01d      	beq.n	800cf1e <USBD_StdItfReq+0x92>
 800cee2:	7bbb      	ldrb	r3, [r7, #14]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d11a      	bne.n	800cf1e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cee8:	7bba      	ldrb	r2, [r7, #14]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	32ae      	adds	r2, #174	@ 0xae
 800ceee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00f      	beq.n	800cf18 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cef8:	7bba      	ldrb	r2, [r7, #14]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cf00:	7bba      	ldrb	r2, [r7, #14]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	32ae      	adds	r2, #174	@ 0xae
 800cf06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	6839      	ldr	r1, [r7, #0]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	4798      	blx	r3
 800cf12:	4603      	mov	r3, r0
 800cf14:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cf16:	e004      	b.n	800cf22 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cf1c:	e001      	b.n	800cf22 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cf1e:	2303      	movs	r3, #3
 800cf20:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	88db      	ldrh	r3, [r3, #6]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d110      	bne.n	800cf4c <USBD_StdItfReq+0xc0>
 800cf2a:	7bfb      	ldrb	r3, [r7, #15]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d10d      	bne.n	800cf4c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f000 fdfd 	bl	800db30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cf36:	e009      	b.n	800cf4c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fd21 	bl	800d982 <USBD_CtlError>
          break;
 800cf40:	e004      	b.n	800cf4c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cf42:	6839      	ldr	r1, [r7, #0]
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fd1c 	bl	800d982 <USBD_CtlError>
          break;
 800cf4a:	e000      	b.n	800cf4e <USBD_StdItfReq+0xc2>
          break;
 800cf4c:	bf00      	nop
      }
      break;
 800cf4e:	e004      	b.n	800cf5a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cf50:	6839      	ldr	r1, [r7, #0]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fd15 	bl	800d982 <USBD_CtlError>
      break;
 800cf58:	bf00      	nop
  }

  return ret;
 800cf5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	889b      	ldrh	r3, [r3, #4]
 800cf76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf80:	2b40      	cmp	r3, #64	@ 0x40
 800cf82:	d007      	beq.n	800cf94 <USBD_StdEPReq+0x30>
 800cf84:	2b40      	cmp	r3, #64	@ 0x40
 800cf86:	f200 817f 	bhi.w	800d288 <USBD_StdEPReq+0x324>
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d02a      	beq.n	800cfe4 <USBD_StdEPReq+0x80>
 800cf8e:	2b20      	cmp	r3, #32
 800cf90:	f040 817a 	bne.w	800d288 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cf94:	7bbb      	ldrb	r3, [r7, #14]
 800cf96:	4619      	mov	r1, r3
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f7ff fe85 	bl	800cca8 <USBD_CoreFindEP>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cfa2:	7b7b      	ldrb	r3, [r7, #13]
 800cfa4:	2bff      	cmp	r3, #255	@ 0xff
 800cfa6:	f000 8174 	beq.w	800d292 <USBD_StdEPReq+0x32e>
 800cfaa:	7b7b      	ldrb	r3, [r7, #13]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f040 8170 	bne.w	800d292 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cfb2:	7b7a      	ldrb	r2, [r7, #13]
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cfba:	7b7a      	ldrb	r2, [r7, #13]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	32ae      	adds	r2, #174	@ 0xae
 800cfc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f000 8163 	beq.w	800d292 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cfcc:	7b7a      	ldrb	r2, [r7, #13]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	32ae      	adds	r2, #174	@ 0xae
 800cfd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	4798      	blx	r3
 800cfde:	4603      	mov	r3, r0
 800cfe0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cfe2:	e156      	b.n	800d292 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	785b      	ldrb	r3, [r3, #1]
 800cfe8:	2b03      	cmp	r3, #3
 800cfea:	d008      	beq.n	800cffe <USBD_StdEPReq+0x9a>
 800cfec:	2b03      	cmp	r3, #3
 800cfee:	f300 8145 	bgt.w	800d27c <USBD_StdEPReq+0x318>
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	f000 809b 	beq.w	800d12e <USBD_StdEPReq+0x1ca>
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d03c      	beq.n	800d076 <USBD_StdEPReq+0x112>
 800cffc:	e13e      	b.n	800d27c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d004:	b2db      	uxtb	r3, r3
 800d006:	2b02      	cmp	r3, #2
 800d008:	d002      	beq.n	800d010 <USBD_StdEPReq+0xac>
 800d00a:	2b03      	cmp	r3, #3
 800d00c:	d016      	beq.n	800d03c <USBD_StdEPReq+0xd8>
 800d00e:	e02c      	b.n	800d06a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d010:	7bbb      	ldrb	r3, [r7, #14]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00d      	beq.n	800d032 <USBD_StdEPReq+0xce>
 800d016:	7bbb      	ldrb	r3, [r7, #14]
 800d018:	2b80      	cmp	r3, #128	@ 0x80
 800d01a:	d00a      	beq.n	800d032 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d01c:	7bbb      	ldrb	r3, [r7, #14]
 800d01e:	4619      	mov	r1, r3
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f001 f9e7 	bl	800e3f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d026:	2180      	movs	r1, #128	@ 0x80
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f001 f9e3 	bl	800e3f4 <USBD_LL_StallEP>
 800d02e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d030:	e020      	b.n	800d074 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fca4 	bl	800d982 <USBD_CtlError>
              break;
 800d03a:	e01b      	b.n	800d074 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	885b      	ldrh	r3, [r3, #2]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d10e      	bne.n	800d062 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d044:	7bbb      	ldrb	r3, [r7, #14]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d00b      	beq.n	800d062 <USBD_StdEPReq+0xfe>
 800d04a:	7bbb      	ldrb	r3, [r7, #14]
 800d04c:	2b80      	cmp	r3, #128	@ 0x80
 800d04e:	d008      	beq.n	800d062 <USBD_StdEPReq+0xfe>
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	88db      	ldrh	r3, [r3, #6]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d104      	bne.n	800d062 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d058:	7bbb      	ldrb	r3, [r7, #14]
 800d05a:	4619      	mov	r1, r3
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f001 f9c9 	bl	800e3f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 fd64 	bl	800db30 <USBD_CtlSendStatus>

              break;
 800d068:	e004      	b.n	800d074 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d06a:	6839      	ldr	r1, [r7, #0]
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 fc88 	bl	800d982 <USBD_CtlError>
              break;
 800d072:	bf00      	nop
          }
          break;
 800d074:	e107      	b.n	800d286 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b02      	cmp	r3, #2
 800d080:	d002      	beq.n	800d088 <USBD_StdEPReq+0x124>
 800d082:	2b03      	cmp	r3, #3
 800d084:	d016      	beq.n	800d0b4 <USBD_StdEPReq+0x150>
 800d086:	e04b      	b.n	800d120 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d088:	7bbb      	ldrb	r3, [r7, #14]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d00d      	beq.n	800d0aa <USBD_StdEPReq+0x146>
 800d08e:	7bbb      	ldrb	r3, [r7, #14]
 800d090:	2b80      	cmp	r3, #128	@ 0x80
 800d092:	d00a      	beq.n	800d0aa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d094:	7bbb      	ldrb	r3, [r7, #14]
 800d096:	4619      	mov	r1, r3
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f001 f9ab 	bl	800e3f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d09e:	2180      	movs	r1, #128	@ 0x80
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f001 f9a7 	bl	800e3f4 <USBD_LL_StallEP>
 800d0a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d0a8:	e040      	b.n	800d12c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d0aa:	6839      	ldr	r1, [r7, #0]
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 fc68 	bl	800d982 <USBD_CtlError>
              break;
 800d0b2:	e03b      	b.n	800d12c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	885b      	ldrh	r3, [r3, #2]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d136      	bne.n	800d12a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d0bc:	7bbb      	ldrb	r3, [r7, #14]
 800d0be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d004      	beq.n	800d0d0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d0c6:	7bbb      	ldrb	r3, [r7, #14]
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f001 f9b1 	bl	800e432 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 fd2d 	bl	800db30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d0d6:	7bbb      	ldrb	r3, [r7, #14]
 800d0d8:	4619      	mov	r1, r3
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f7ff fde4 	bl	800cca8 <USBD_CoreFindEP>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0e4:	7b7b      	ldrb	r3, [r7, #13]
 800d0e6:	2bff      	cmp	r3, #255	@ 0xff
 800d0e8:	d01f      	beq.n	800d12a <USBD_StdEPReq+0x1c6>
 800d0ea:	7b7b      	ldrb	r3, [r7, #13]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d11c      	bne.n	800d12a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d0f0:	7b7a      	ldrb	r2, [r7, #13]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d0f8:	7b7a      	ldrb	r2, [r7, #13]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	32ae      	adds	r2, #174	@ 0xae
 800d0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d010      	beq.n	800d12a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d108:	7b7a      	ldrb	r2, [r7, #13]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	32ae      	adds	r2, #174	@ 0xae
 800d10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	4798      	blx	r3
 800d11a:	4603      	mov	r3, r0
 800d11c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d11e:	e004      	b.n	800d12a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d120:	6839      	ldr	r1, [r7, #0]
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 fc2d 	bl	800d982 <USBD_CtlError>
              break;
 800d128:	e000      	b.n	800d12c <USBD_StdEPReq+0x1c8>
              break;
 800d12a:	bf00      	nop
          }
          break;
 800d12c:	e0ab      	b.n	800d286 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d134:	b2db      	uxtb	r3, r3
 800d136:	2b02      	cmp	r3, #2
 800d138:	d002      	beq.n	800d140 <USBD_StdEPReq+0x1dc>
 800d13a:	2b03      	cmp	r3, #3
 800d13c:	d032      	beq.n	800d1a4 <USBD_StdEPReq+0x240>
 800d13e:	e097      	b.n	800d270 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d140:	7bbb      	ldrb	r3, [r7, #14]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d007      	beq.n	800d156 <USBD_StdEPReq+0x1f2>
 800d146:	7bbb      	ldrb	r3, [r7, #14]
 800d148:	2b80      	cmp	r3, #128	@ 0x80
 800d14a:	d004      	beq.n	800d156 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d14c:	6839      	ldr	r1, [r7, #0]
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 fc17 	bl	800d982 <USBD_CtlError>
                break;
 800d154:	e091      	b.n	800d27a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	da0b      	bge.n	800d176 <USBD_StdEPReq+0x212>
 800d15e:	7bbb      	ldrb	r3, [r7, #14]
 800d160:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d164:	4613      	mov	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	4413      	add	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	3310      	adds	r3, #16
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	4413      	add	r3, r2
 800d172:	3304      	adds	r3, #4
 800d174:	e00b      	b.n	800d18e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d176:	7bbb      	ldrb	r3, [r7, #14]
 800d178:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d17c:	4613      	mov	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	4413      	add	r3, r2
 800d18c:	3304      	adds	r3, #4
 800d18e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	2200      	movs	r2, #0
 800d194:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	2202      	movs	r2, #2
 800d19a:	4619      	mov	r1, r3
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 fc6d 	bl	800da7c <USBD_CtlSendData>
              break;
 800d1a2:	e06a      	b.n	800d27a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d1a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	da11      	bge.n	800d1d0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d1ac:	7bbb      	ldrb	r3, [r7, #14]
 800d1ae:	f003 020f 	and.w	r2, r3, #15
 800d1b2:	6879      	ldr	r1, [r7, #4]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	4413      	add	r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	440b      	add	r3, r1
 800d1be:	3324      	adds	r3, #36	@ 0x24
 800d1c0:	881b      	ldrh	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d117      	bne.n	800d1f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d1c6:	6839      	ldr	r1, [r7, #0]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fbda 	bl	800d982 <USBD_CtlError>
                  break;
 800d1ce:	e054      	b.n	800d27a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d1d0:	7bbb      	ldrb	r3, [r7, #14]
 800d1d2:	f003 020f 	and.w	r2, r3, #15
 800d1d6:	6879      	ldr	r1, [r7, #4]
 800d1d8:	4613      	mov	r3, r2
 800d1da:	009b      	lsls	r3, r3, #2
 800d1dc:	4413      	add	r3, r2
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	440b      	add	r3, r1
 800d1e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d1e6:	881b      	ldrh	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d104      	bne.n	800d1f6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d1ec:	6839      	ldr	r1, [r7, #0]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 fbc7 	bl	800d982 <USBD_CtlError>
                  break;
 800d1f4:	e041      	b.n	800d27a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	da0b      	bge.n	800d216 <USBD_StdEPReq+0x2b2>
 800d1fe:	7bbb      	ldrb	r3, [r7, #14]
 800d200:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d204:	4613      	mov	r3, r2
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	4413      	add	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	3310      	adds	r3, #16
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	4413      	add	r3, r2
 800d212:	3304      	adds	r3, #4
 800d214:	e00b      	b.n	800d22e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d216:	7bbb      	ldrb	r3, [r7, #14]
 800d218:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d21c:	4613      	mov	r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	4413      	add	r3, r2
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d228:	687a      	ldr	r2, [r7, #4]
 800d22a:	4413      	add	r3, r2
 800d22c:	3304      	adds	r3, #4
 800d22e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d230:	7bbb      	ldrb	r3, [r7, #14]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d002      	beq.n	800d23c <USBD_StdEPReq+0x2d8>
 800d236:	7bbb      	ldrb	r3, [r7, #14]
 800d238:	2b80      	cmp	r3, #128	@ 0x80
 800d23a:	d103      	bne.n	800d244 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	2200      	movs	r2, #0
 800d240:	601a      	str	r2, [r3, #0]
 800d242:	e00e      	b.n	800d262 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d244:	7bbb      	ldrb	r3, [r7, #14]
 800d246:	4619      	mov	r1, r3
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f001 f911 	bl	800e470 <USBD_LL_IsStallEP>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d003      	beq.n	800d25c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	2201      	movs	r2, #1
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	e002      	b.n	800d262 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	2200      	movs	r2, #0
 800d260:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	2202      	movs	r2, #2
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fc07 	bl	800da7c <USBD_CtlSendData>
              break;
 800d26e:	e004      	b.n	800d27a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d270:	6839      	ldr	r1, [r7, #0]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 fb85 	bl	800d982 <USBD_CtlError>
              break;
 800d278:	bf00      	nop
          }
          break;
 800d27a:	e004      	b.n	800d286 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d27c:	6839      	ldr	r1, [r7, #0]
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 fb7f 	bl	800d982 <USBD_CtlError>
          break;
 800d284:	bf00      	nop
      }
      break;
 800d286:	e005      	b.n	800d294 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 fb79 	bl	800d982 <USBD_CtlError>
      break;
 800d290:	e000      	b.n	800d294 <USBD_StdEPReq+0x330>
      break;
 800d292:	bf00      	nop
  }

  return ret;
 800d294:	7bfb      	ldrb	r3, [r7, #15]
}
 800d296:	4618      	mov	r0, r3
 800d298:	3710      	adds	r7, #16
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}
	...

0800d2a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	885b      	ldrh	r3, [r3, #2]
 800d2ba:	0a1b      	lsrs	r3, r3, #8
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	2b0e      	cmp	r3, #14
 800d2c2:	f200 8152 	bhi.w	800d56a <USBD_GetDescriptor+0x2ca>
 800d2c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d2cc <USBD_GetDescriptor+0x2c>)
 800d2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2cc:	0800d33d 	.word	0x0800d33d
 800d2d0:	0800d355 	.word	0x0800d355
 800d2d4:	0800d395 	.word	0x0800d395
 800d2d8:	0800d56b 	.word	0x0800d56b
 800d2dc:	0800d56b 	.word	0x0800d56b
 800d2e0:	0800d50b 	.word	0x0800d50b
 800d2e4:	0800d537 	.word	0x0800d537
 800d2e8:	0800d56b 	.word	0x0800d56b
 800d2ec:	0800d56b 	.word	0x0800d56b
 800d2f0:	0800d56b 	.word	0x0800d56b
 800d2f4:	0800d56b 	.word	0x0800d56b
 800d2f8:	0800d56b 	.word	0x0800d56b
 800d2fc:	0800d56b 	.word	0x0800d56b
 800d300:	0800d56b 	.word	0x0800d56b
 800d304:	0800d309 	.word	0x0800d309
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d30e:	69db      	ldr	r3, [r3, #28]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00b      	beq.n	800d32c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d31a:	69db      	ldr	r3, [r3, #28]
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	7c12      	ldrb	r2, [r2, #16]
 800d320:	f107 0108 	add.w	r1, r7, #8
 800d324:	4610      	mov	r0, r2
 800d326:	4798      	blx	r3
 800d328:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d32a:	e126      	b.n	800d57a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d32c:	6839      	ldr	r1, [r7, #0]
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 fb27 	bl	800d982 <USBD_CtlError>
        err++;
 800d334:	7afb      	ldrb	r3, [r7, #11]
 800d336:	3301      	adds	r3, #1
 800d338:	72fb      	strb	r3, [r7, #11]
      break;
 800d33a:	e11e      	b.n	800d57a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	7c12      	ldrb	r2, [r2, #16]
 800d348:	f107 0108 	add.w	r1, r7, #8
 800d34c:	4610      	mov	r0, r2
 800d34e:	4798      	blx	r3
 800d350:	60f8      	str	r0, [r7, #12]
      break;
 800d352:	e112      	b.n	800d57a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	7c1b      	ldrb	r3, [r3, #16]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d10d      	bne.n	800d378 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d364:	f107 0208 	add.w	r2, r7, #8
 800d368:	4610      	mov	r0, r2
 800d36a:	4798      	blx	r3
 800d36c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	3301      	adds	r3, #1
 800d372:	2202      	movs	r2, #2
 800d374:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d376:	e100      	b.n	800d57a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d380:	f107 0208 	add.w	r2, r7, #8
 800d384:	4610      	mov	r0, r2
 800d386:	4798      	blx	r3
 800d388:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	3301      	adds	r3, #1
 800d38e:	2202      	movs	r2, #2
 800d390:	701a      	strb	r2, [r3, #0]
      break;
 800d392:	e0f2      	b.n	800d57a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	885b      	ldrh	r3, [r3, #2]
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	2b05      	cmp	r3, #5
 800d39c:	f200 80ac 	bhi.w	800d4f8 <USBD_GetDescriptor+0x258>
 800d3a0:	a201      	add	r2, pc, #4	@ (adr r2, 800d3a8 <USBD_GetDescriptor+0x108>)
 800d3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a6:	bf00      	nop
 800d3a8:	0800d3c1 	.word	0x0800d3c1
 800d3ac:	0800d3f5 	.word	0x0800d3f5
 800d3b0:	0800d429 	.word	0x0800d429
 800d3b4:	0800d45d 	.word	0x0800d45d
 800d3b8:	0800d491 	.word	0x0800d491
 800d3bc:	0800d4c5 	.word	0x0800d4c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00b      	beq.n	800d3e4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	7c12      	ldrb	r2, [r2, #16]
 800d3d8:	f107 0108 	add.w	r1, r7, #8
 800d3dc:	4610      	mov	r0, r2
 800d3de:	4798      	blx	r3
 800d3e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3e2:	e091      	b.n	800d508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3e4:	6839      	ldr	r1, [r7, #0]
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 facb 	bl	800d982 <USBD_CtlError>
            err++;
 800d3ec:	7afb      	ldrb	r3, [r7, #11]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	72fb      	strb	r3, [r7, #11]
          break;
 800d3f2:	e089      	b.n	800d508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d00b      	beq.n	800d418 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	7c12      	ldrb	r2, [r2, #16]
 800d40c:	f107 0108 	add.w	r1, r7, #8
 800d410:	4610      	mov	r0, r2
 800d412:	4798      	blx	r3
 800d414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d416:	e077      	b.n	800d508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d418:	6839      	ldr	r1, [r7, #0]
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 fab1 	bl	800d982 <USBD_CtlError>
            err++;
 800d420:	7afb      	ldrb	r3, [r7, #11]
 800d422:	3301      	adds	r3, #1
 800d424:	72fb      	strb	r3, [r7, #11]
          break;
 800d426:	e06f      	b.n	800d508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00b      	beq.n	800d44c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	7c12      	ldrb	r2, [r2, #16]
 800d440:	f107 0108 	add.w	r1, r7, #8
 800d444:	4610      	mov	r0, r2
 800d446:	4798      	blx	r3
 800d448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d44a:	e05d      	b.n	800d508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d44c:	6839      	ldr	r1, [r7, #0]
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 fa97 	bl	800d982 <USBD_CtlError>
            err++;
 800d454:	7afb      	ldrb	r3, [r7, #11]
 800d456:	3301      	adds	r3, #1
 800d458:	72fb      	strb	r3, [r7, #11]
          break;
 800d45a:	e055      	b.n	800d508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00b      	beq.n	800d480 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d46e:	691b      	ldr	r3, [r3, #16]
 800d470:	687a      	ldr	r2, [r7, #4]
 800d472:	7c12      	ldrb	r2, [r2, #16]
 800d474:	f107 0108 	add.w	r1, r7, #8
 800d478:	4610      	mov	r0, r2
 800d47a:	4798      	blx	r3
 800d47c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d47e:	e043      	b.n	800d508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d480:	6839      	ldr	r1, [r7, #0]
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 fa7d 	bl	800d982 <USBD_CtlError>
            err++;
 800d488:	7afb      	ldrb	r3, [r7, #11]
 800d48a:	3301      	adds	r3, #1
 800d48c:	72fb      	strb	r3, [r7, #11]
          break;
 800d48e:	e03b      	b.n	800d508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d496:	695b      	ldr	r3, [r3, #20]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00b      	beq.n	800d4b4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4a2:	695b      	ldr	r3, [r3, #20]
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	7c12      	ldrb	r2, [r2, #16]
 800d4a8:	f107 0108 	add.w	r1, r7, #8
 800d4ac:	4610      	mov	r0, r2
 800d4ae:	4798      	blx	r3
 800d4b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4b2:	e029      	b.n	800d508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d4b4:	6839      	ldr	r1, [r7, #0]
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 fa63 	bl	800d982 <USBD_CtlError>
            err++;
 800d4bc:	7afb      	ldrb	r3, [r7, #11]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d4c2:	e021      	b.n	800d508 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4ca:	699b      	ldr	r3, [r3, #24]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00b      	beq.n	800d4e8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4d6:	699b      	ldr	r3, [r3, #24]
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	7c12      	ldrb	r2, [r2, #16]
 800d4dc:	f107 0108 	add.w	r1, r7, #8
 800d4e0:	4610      	mov	r0, r2
 800d4e2:	4798      	blx	r3
 800d4e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4e6:	e00f      	b.n	800d508 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d4e8:	6839      	ldr	r1, [r7, #0]
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 fa49 	bl	800d982 <USBD_CtlError>
            err++;
 800d4f0:	7afb      	ldrb	r3, [r7, #11]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	72fb      	strb	r3, [r7, #11]
          break;
 800d4f6:	e007      	b.n	800d508 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d4f8:	6839      	ldr	r1, [r7, #0]
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 fa41 	bl	800d982 <USBD_CtlError>
          err++;
 800d500:	7afb      	ldrb	r3, [r7, #11]
 800d502:	3301      	adds	r3, #1
 800d504:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d506:	bf00      	nop
      }
      break;
 800d508:	e037      	b.n	800d57a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	7c1b      	ldrb	r3, [r3, #16]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d109      	bne.n	800d526 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d51a:	f107 0208 	add.w	r2, r7, #8
 800d51e:	4610      	mov	r0, r2
 800d520:	4798      	blx	r3
 800d522:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d524:	e029      	b.n	800d57a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d526:	6839      	ldr	r1, [r7, #0]
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 fa2a 	bl	800d982 <USBD_CtlError>
        err++;
 800d52e:	7afb      	ldrb	r3, [r7, #11]
 800d530:	3301      	adds	r3, #1
 800d532:	72fb      	strb	r3, [r7, #11]
      break;
 800d534:	e021      	b.n	800d57a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	7c1b      	ldrb	r3, [r3, #16]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d10d      	bne.n	800d55a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d546:	f107 0208 	add.w	r2, r7, #8
 800d54a:	4610      	mov	r0, r2
 800d54c:	4798      	blx	r3
 800d54e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	3301      	adds	r3, #1
 800d554:	2207      	movs	r2, #7
 800d556:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d558:	e00f      	b.n	800d57a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d55a:	6839      	ldr	r1, [r7, #0]
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fa10 	bl	800d982 <USBD_CtlError>
        err++;
 800d562:	7afb      	ldrb	r3, [r7, #11]
 800d564:	3301      	adds	r3, #1
 800d566:	72fb      	strb	r3, [r7, #11]
      break;
 800d568:	e007      	b.n	800d57a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d56a:	6839      	ldr	r1, [r7, #0]
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 fa08 	bl	800d982 <USBD_CtlError>
      err++;
 800d572:	7afb      	ldrb	r3, [r7, #11]
 800d574:	3301      	adds	r3, #1
 800d576:	72fb      	strb	r3, [r7, #11]
      break;
 800d578:	bf00      	nop
  }

  if (err != 0U)
 800d57a:	7afb      	ldrb	r3, [r7, #11]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d11e      	bne.n	800d5be <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	88db      	ldrh	r3, [r3, #6]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d016      	beq.n	800d5b6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d588:	893b      	ldrh	r3, [r7, #8]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00e      	beq.n	800d5ac <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	88da      	ldrh	r2, [r3, #6]
 800d592:	893b      	ldrh	r3, [r7, #8]
 800d594:	4293      	cmp	r3, r2
 800d596:	bf28      	it	cs
 800d598:	4613      	movcs	r3, r2
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d59e:	893b      	ldrh	r3, [r7, #8]
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	68f9      	ldr	r1, [r7, #12]
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 fa69 	bl	800da7c <USBD_CtlSendData>
 800d5aa:	e009      	b.n	800d5c0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d5ac:	6839      	ldr	r1, [r7, #0]
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f9e7 	bl	800d982 <USBD_CtlError>
 800d5b4:	e004      	b.n	800d5c0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 faba 	bl	800db30 <USBD_CtlSendStatus>
 800d5bc:	e000      	b.n	800d5c0 <USBD_GetDescriptor+0x320>
    return;
 800d5be:	bf00      	nop
  }
}
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop

0800d5c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	889b      	ldrh	r3, [r3, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d131      	bne.n	800d63e <USBD_SetAddress+0x76>
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	88db      	ldrh	r3, [r3, #6]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d12d      	bne.n	800d63e <USBD_SetAddress+0x76>
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	885b      	ldrh	r3, [r3, #2]
 800d5e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d5e8:	d829      	bhi.n	800d63e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	885b      	ldrh	r3, [r3, #2]
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	2b03      	cmp	r3, #3
 800d600:	d104      	bne.n	800d60c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d602:	6839      	ldr	r1, [r7, #0]
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 f9bc 	bl	800d982 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d60a:	e01d      	b.n	800d648 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	7bfa      	ldrb	r2, [r7, #15]
 800d610:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d614:	7bfb      	ldrb	r3, [r7, #15]
 800d616:	4619      	mov	r1, r3
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 ff55 	bl	800e4c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 fa86 	bl	800db30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d624:	7bfb      	ldrb	r3, [r7, #15]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d004      	beq.n	800d634 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2202      	movs	r2, #2
 800d62e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d632:	e009      	b.n	800d648 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2201      	movs	r2, #1
 800d638:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d63c:	e004      	b.n	800d648 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d63e:	6839      	ldr	r1, [r7, #0]
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 f99e 	bl	800d982 <USBD_CtlError>
  }
}
 800d646:	bf00      	nop
 800d648:	bf00      	nop
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d65a:	2300      	movs	r3, #0
 800d65c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	885b      	ldrh	r3, [r3, #2]
 800d662:	b2da      	uxtb	r2, r3
 800d664:	4b4e      	ldr	r3, [pc, #312]	@ (800d7a0 <USBD_SetConfig+0x150>)
 800d666:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d668:	4b4d      	ldr	r3, [pc, #308]	@ (800d7a0 <USBD_SetConfig+0x150>)
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d905      	bls.n	800d67c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d670:	6839      	ldr	r1, [r7, #0]
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f985 	bl	800d982 <USBD_CtlError>
    return USBD_FAIL;
 800d678:	2303      	movs	r3, #3
 800d67a:	e08c      	b.n	800d796 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d682:	b2db      	uxtb	r3, r3
 800d684:	2b02      	cmp	r3, #2
 800d686:	d002      	beq.n	800d68e <USBD_SetConfig+0x3e>
 800d688:	2b03      	cmp	r3, #3
 800d68a:	d029      	beq.n	800d6e0 <USBD_SetConfig+0x90>
 800d68c:	e075      	b.n	800d77a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d68e:	4b44      	ldr	r3, [pc, #272]	@ (800d7a0 <USBD_SetConfig+0x150>)
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d020      	beq.n	800d6d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d696:	4b42      	ldr	r3, [pc, #264]	@ (800d7a0 <USBD_SetConfig+0x150>)
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	461a      	mov	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d6a0:	4b3f      	ldr	r3, [pc, #252]	@ (800d7a0 <USBD_SetConfig+0x150>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f7fe ffb9 	bl	800c61e <USBD_SetClassConfig>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d6b0:	7bfb      	ldrb	r3, [r7, #15]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d008      	beq.n	800d6c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d6b6:	6839      	ldr	r1, [r7, #0]
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 f962 	bl	800d982 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2202      	movs	r2, #2
 800d6c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d6c6:	e065      	b.n	800d794 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 fa31 	bl	800db30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2203      	movs	r2, #3
 800d6d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d6d6:	e05d      	b.n	800d794 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 fa29 	bl	800db30 <USBD_CtlSendStatus>
      break;
 800d6de:	e059      	b.n	800d794 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d6e0:	4b2f      	ldr	r3, [pc, #188]	@ (800d7a0 <USBD_SetConfig+0x150>)
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d112      	bne.n	800d70e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2202      	movs	r2, #2
 800d6ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d6f0:	4b2b      	ldr	r3, [pc, #172]	@ (800d7a0 <USBD_SetConfig+0x150>)
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d6fa:	4b29      	ldr	r3, [pc, #164]	@ (800d7a0 <USBD_SetConfig+0x150>)
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	4619      	mov	r1, r3
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f7fe ffa8 	bl	800c656 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 fa12 	bl	800db30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d70c:	e042      	b.n	800d794 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d70e:	4b24      	ldr	r3, [pc, #144]	@ (800d7a0 <USBD_SetConfig+0x150>)
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	461a      	mov	r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d02a      	beq.n	800d772 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	685b      	ldr	r3, [r3, #4]
 800d720:	b2db      	uxtb	r3, r3
 800d722:	4619      	mov	r1, r3
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7fe ff96 	bl	800c656 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d72a:	4b1d      	ldr	r3, [pc, #116]	@ (800d7a0 <USBD_SetConfig+0x150>)
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	461a      	mov	r2, r3
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d734:	4b1a      	ldr	r3, [pc, #104]	@ (800d7a0 <USBD_SetConfig+0x150>)
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	4619      	mov	r1, r3
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f7fe ff6f 	bl	800c61e <USBD_SetClassConfig>
 800d740:	4603      	mov	r3, r0
 800d742:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d744:	7bfb      	ldrb	r3, [r7, #15]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00f      	beq.n	800d76a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d74a:	6839      	ldr	r1, [r7, #0]
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 f918 	bl	800d982 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	b2db      	uxtb	r3, r3
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7fe ff7b 	bl	800c656 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2202      	movs	r2, #2
 800d764:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d768:	e014      	b.n	800d794 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 f9e0 	bl	800db30 <USBD_CtlSendStatus>
      break;
 800d770:	e010      	b.n	800d794 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 f9dc 	bl	800db30 <USBD_CtlSendStatus>
      break;
 800d778:	e00c      	b.n	800d794 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d77a:	6839      	ldr	r1, [r7, #0]
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 f900 	bl	800d982 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d782:	4b07      	ldr	r3, [pc, #28]	@ (800d7a0 <USBD_SetConfig+0x150>)
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	4619      	mov	r1, r3
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7fe ff64 	bl	800c656 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d78e:	2303      	movs	r3, #3
 800d790:	73fb      	strb	r3, [r7, #15]
      break;
 800d792:	bf00      	nop
  }

  return ret;
 800d794:	7bfb      	ldrb	r3, [r7, #15]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	2006ea8c 	.word	0x2006ea8c

0800d7a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	88db      	ldrh	r3, [r3, #6]
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d004      	beq.n	800d7c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d7b6:	6839      	ldr	r1, [r7, #0]
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 f8e2 	bl	800d982 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d7be:	e023      	b.n	800d808 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	2b02      	cmp	r3, #2
 800d7ca:	dc02      	bgt.n	800d7d2 <USBD_GetConfig+0x2e>
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	dc03      	bgt.n	800d7d8 <USBD_GetConfig+0x34>
 800d7d0:	e015      	b.n	800d7fe <USBD_GetConfig+0x5a>
 800d7d2:	2b03      	cmp	r3, #3
 800d7d4:	d00b      	beq.n	800d7ee <USBD_GetConfig+0x4a>
 800d7d6:	e012      	b.n	800d7fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f948 	bl	800da7c <USBD_CtlSendData>
        break;
 800d7ec:	e00c      	b.n	800d808 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	3304      	adds	r3, #4
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 f940 	bl	800da7c <USBD_CtlSendData>
        break;
 800d7fc:	e004      	b.n	800d808 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d7fe:	6839      	ldr	r1, [r7, #0]
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f000 f8be 	bl	800d982 <USBD_CtlError>
        break;
 800d806:	bf00      	nop
}
 800d808:	bf00      	nop
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d820:	b2db      	uxtb	r3, r3
 800d822:	3b01      	subs	r3, #1
 800d824:	2b02      	cmp	r3, #2
 800d826:	d81e      	bhi.n	800d866 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	88db      	ldrh	r3, [r3, #6]
 800d82c:	2b02      	cmp	r3, #2
 800d82e:	d004      	beq.n	800d83a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d830:	6839      	ldr	r1, [r7, #0]
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f000 f8a5 	bl	800d982 <USBD_CtlError>
        break;
 800d838:	e01a      	b.n	800d870 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2201      	movs	r2, #1
 800d83e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d846:	2b00      	cmp	r3, #0
 800d848:	d005      	beq.n	800d856 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	f043 0202 	orr.w	r2, r3, #2
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	330c      	adds	r3, #12
 800d85a:	2202      	movs	r2, #2
 800d85c:	4619      	mov	r1, r3
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 f90c 	bl	800da7c <USBD_CtlSendData>
      break;
 800d864:	e004      	b.n	800d870 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d866:	6839      	ldr	r1, [r7, #0]
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f88a 	bl	800d982 <USBD_CtlError>
      break;
 800d86e:	bf00      	nop
  }
}
 800d870:	bf00      	nop
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	885b      	ldrh	r3, [r3, #2]
 800d886:	2b01      	cmp	r3, #1
 800d888:	d107      	bne.n	800d89a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2201      	movs	r2, #1
 800d88e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 f94c 	bl	800db30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d898:	e013      	b.n	800d8c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	885b      	ldrh	r3, [r3, #2]
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	d10b      	bne.n	800d8ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	889b      	ldrh	r3, [r3, #4]
 800d8a6:	0a1b      	lsrs	r3, r3, #8
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 f93c 	bl	800db30 <USBD_CtlSendStatus>
}
 800d8b8:	e003      	b.n	800d8c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f860 	bl	800d982 <USBD_CtlError>
}
 800d8c2:	bf00      	nop
 800d8c4:	3708      	adds	r7, #8
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b082      	sub	sp, #8
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
 800d8d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	d80b      	bhi.n	800d8fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	885b      	ldrh	r3, [r3, #2]
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d10c      	bne.n	800d904 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 f91c 	bl	800db30 <USBD_CtlSendStatus>
      }
      break;
 800d8f8:	e004      	b.n	800d904 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d8fa:	6839      	ldr	r1, [r7, #0]
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 f840 	bl	800d982 <USBD_CtlError>
      break;
 800d902:	e000      	b.n	800d906 <USBD_ClrFeature+0x3c>
      break;
 800d904:	bf00      	nop
  }
}
 800d906:	bf00      	nop
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}

0800d90e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d90e:	b580      	push	{r7, lr}
 800d910:	b084      	sub	sp, #16
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
 800d916:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	781a      	ldrb	r2, [r3, #0]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	3301      	adds	r3, #1
 800d928:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	781a      	ldrb	r2, [r3, #0]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	3301      	adds	r3, #1
 800d936:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f7ff fa16 	bl	800cd6a <SWAPBYTE>
 800d93e:	4603      	mov	r3, r0
 800d940:	461a      	mov	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	3301      	adds	r3, #1
 800d94a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	3301      	adds	r3, #1
 800d950:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f7ff fa09 	bl	800cd6a <SWAPBYTE>
 800d958:	4603      	mov	r3, r0
 800d95a:	461a      	mov	r2, r3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	3301      	adds	r3, #1
 800d964:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	3301      	adds	r3, #1
 800d96a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f7ff f9fc 	bl	800cd6a <SWAPBYTE>
 800d972:	4603      	mov	r3, r0
 800d974:	461a      	mov	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	80da      	strh	r2, [r3, #6]
}
 800d97a:	bf00      	nop
 800d97c:	3710      	adds	r7, #16
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}

0800d982 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d982:	b580      	push	{r7, lr}
 800d984:	b082      	sub	sp, #8
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d98c:	2180      	movs	r1, #128	@ 0x80
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 fd30 	bl	800e3f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d994:	2100      	movs	r1, #0
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fd2c 	bl	800e3f4 <USBD_LL_StallEP>
}
 800d99c:	bf00      	nop
 800d99e:	3708      	adds	r7, #8
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b086      	sub	sp, #24
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	60f8      	str	r0, [r7, #12]
 800d9ac:	60b9      	str	r1, [r7, #8]
 800d9ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d042      	beq.n	800da40 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d9be:	6938      	ldr	r0, [r7, #16]
 800d9c0:	f000 f842 	bl	800da48 <USBD_GetLen>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	005b      	lsls	r3, r3, #1
 800d9ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9ce:	d808      	bhi.n	800d9e2 <USBD_GetString+0x3e>
 800d9d0:	6938      	ldr	r0, [r7, #16]
 800d9d2:	f000 f839 	bl	800da48 <USBD_GetLen>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	3301      	adds	r3, #1
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	005b      	lsls	r3, r3, #1
 800d9de:	b29a      	uxth	r2, r3
 800d9e0:	e001      	b.n	800d9e6 <USBD_GetString+0x42>
 800d9e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d9ea:	7dfb      	ldrb	r3, [r7, #23]
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	7812      	ldrb	r2, [r2, #0]
 800d9f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d9f6:	7dfb      	ldrb	r3, [r7, #23]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d9fc:	7dfb      	ldrb	r3, [r7, #23]
 800d9fe:	68ba      	ldr	r2, [r7, #8]
 800da00:	4413      	add	r3, r2
 800da02:	2203      	movs	r2, #3
 800da04:	701a      	strb	r2, [r3, #0]
  idx++;
 800da06:	7dfb      	ldrb	r3, [r7, #23]
 800da08:	3301      	adds	r3, #1
 800da0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800da0c:	e013      	b.n	800da36 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800da0e:	7dfb      	ldrb	r3, [r7, #23]
 800da10:	68ba      	ldr	r2, [r7, #8]
 800da12:	4413      	add	r3, r2
 800da14:	693a      	ldr	r2, [r7, #16]
 800da16:	7812      	ldrb	r2, [r2, #0]
 800da18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	3301      	adds	r3, #1
 800da1e:	613b      	str	r3, [r7, #16]
    idx++;
 800da20:	7dfb      	ldrb	r3, [r7, #23]
 800da22:	3301      	adds	r3, #1
 800da24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800da26:	7dfb      	ldrb	r3, [r7, #23]
 800da28:	68ba      	ldr	r2, [r7, #8]
 800da2a:	4413      	add	r3, r2
 800da2c:	2200      	movs	r2, #0
 800da2e:	701a      	strb	r2, [r3, #0]
    idx++;
 800da30:	7dfb      	ldrb	r3, [r7, #23]
 800da32:	3301      	adds	r3, #1
 800da34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1e7      	bne.n	800da0e <USBD_GetString+0x6a>
 800da3e:	e000      	b.n	800da42 <USBD_GetString+0x9e>
    return;
 800da40:	bf00      	nop
  }
}
 800da42:	3718      	adds	r7, #24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}

0800da48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800da50:	2300      	movs	r3, #0
 800da52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800da58:	e005      	b.n	800da66 <USBD_GetLen+0x1e>
  {
    len++;
 800da5a:	7bfb      	ldrb	r3, [r7, #15]
 800da5c:	3301      	adds	r3, #1
 800da5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	3301      	adds	r3, #1
 800da64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d1f5      	bne.n	800da5a <USBD_GetLen+0x12>
  }

  return len;
 800da6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da70:	4618      	mov	r0, r3
 800da72:	3714      	adds	r7, #20
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2202      	movs	r2, #2
 800da8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	2100      	movs	r1, #0
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f000 fd2f 	bl	800e506 <USBD_LL_Transmit>

  return USBD_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b084      	sub	sp, #16
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	60f8      	str	r0, [r7, #12]
 800daba:	60b9      	str	r1, [r7, #8]
 800dabc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	68ba      	ldr	r2, [r7, #8]
 800dac2:	2100      	movs	r1, #0
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f000 fd1e 	bl	800e506 <USBD_LL_Transmit>

  return USBD_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2203      	movs	r2, #3
 800dae4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	68ba      	ldr	r2, [r7, #8]
 800dafc:	2100      	movs	r1, #0
 800dafe:	68f8      	ldr	r0, [r7, #12]
 800db00:	f000 fd22 	bl	800e548 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b084      	sub	sp, #16
 800db12:	af00      	add	r7, sp, #0
 800db14:	60f8      	str	r0, [r7, #12]
 800db16:	60b9      	str	r1, [r7, #8]
 800db18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	2100      	movs	r1, #0
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f000 fd11 	bl	800e548 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2204      	movs	r2, #4
 800db3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800db40:	2300      	movs	r3, #0
 800db42:	2200      	movs	r2, #0
 800db44:	2100      	movs	r1, #0
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fcdd 	bl	800e506 <USBD_LL_Transmit>

  return USBD_OK;
 800db4c:	2300      	movs	r3, #0
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3708      	adds	r7, #8
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}

0800db56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800db56:	b580      	push	{r7, lr}
 800db58:	b082      	sub	sp, #8
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2205      	movs	r2, #5
 800db62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db66:	2300      	movs	r3, #0
 800db68:	2200      	movs	r2, #0
 800db6a:	2100      	movs	r1, #0
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 fceb 	bl	800e548 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db72:	2300      	movs	r3, #0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db80:	2200      	movs	r2, #0
 800db82:	4912      	ldr	r1, [pc, #72]	@ (800dbcc <MX_USB_DEVICE_Init+0x50>)
 800db84:	4812      	ldr	r0, [pc, #72]	@ (800dbd0 <MX_USB_DEVICE_Init+0x54>)
 800db86:	f7fe fccd 	bl	800c524 <USBD_Init>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d001      	beq.n	800db94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db90:	f7f5 f8dc 	bl	8002d4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800db94:	490f      	ldr	r1, [pc, #60]	@ (800dbd4 <MX_USB_DEVICE_Init+0x58>)
 800db96:	480e      	ldr	r0, [pc, #56]	@ (800dbd0 <MX_USB_DEVICE_Init+0x54>)
 800db98:	f7fe fcf4 	bl	800c584 <USBD_RegisterClass>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d001      	beq.n	800dba6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dba2:	f7f5 f8d3 	bl	8002d4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dba6:	490c      	ldr	r1, [pc, #48]	@ (800dbd8 <MX_USB_DEVICE_Init+0x5c>)
 800dba8:	4809      	ldr	r0, [pc, #36]	@ (800dbd0 <MX_USB_DEVICE_Init+0x54>)
 800dbaa:	f7fe fbeb 	bl	800c384 <USBD_CDC_RegisterInterface>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d001      	beq.n	800dbb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dbb4:	f7f5 f8ca 	bl	8002d4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dbb8:	4805      	ldr	r0, [pc, #20]	@ (800dbd0 <MX_USB_DEVICE_Init+0x54>)
 800dbba:	f7fe fd19 	bl	800c5f0 <USBD_Start>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d001      	beq.n	800dbc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dbc4:	f7f5 f8c2 	bl	8002d4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dbc8:	bf00      	nop
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	200000b8 	.word	0x200000b8
 800dbd0:	2006ea90 	.word	0x2006ea90
 800dbd4:	20000024 	.word	0x20000024
 800dbd8:	200000a4 	.word	0x200000a4

0800dbdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	4905      	ldr	r1, [pc, #20]	@ (800dbf8 <CDC_Init_FS+0x1c>)
 800dbe4:	4805      	ldr	r0, [pc, #20]	@ (800dbfc <CDC_Init_FS+0x20>)
 800dbe6:	f7fe fbe7 	bl	800c3b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dbea:	4905      	ldr	r1, [pc, #20]	@ (800dc00 <CDC_Init_FS+0x24>)
 800dbec:	4803      	ldr	r0, [pc, #12]	@ (800dbfc <CDC_Init_FS+0x20>)
 800dbee:	f7fe fc05 	bl	800c3fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dbf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	2006f56c 	.word	0x2006f56c
 800dbfc:	2006ea90 	.word	0x2006ea90
 800dc00:	2006ed6c 	.word	0x2006ed6c

0800dc04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dc04:	b480      	push	{r7}
 800dc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dc08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	6039      	str	r1, [r7, #0]
 800dc1e:	71fb      	strb	r3, [r7, #7]
 800dc20:	4613      	mov	r3, r2
 800dc22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dc24:	79fb      	ldrb	r3, [r7, #7]
 800dc26:	2b23      	cmp	r3, #35	@ 0x23
 800dc28:	d84a      	bhi.n	800dcc0 <CDC_Control_FS+0xac>
 800dc2a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc30 <CDC_Control_FS+0x1c>)
 800dc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc30:	0800dcc1 	.word	0x0800dcc1
 800dc34:	0800dcc1 	.word	0x0800dcc1
 800dc38:	0800dcc1 	.word	0x0800dcc1
 800dc3c:	0800dcc1 	.word	0x0800dcc1
 800dc40:	0800dcc1 	.word	0x0800dcc1
 800dc44:	0800dcc1 	.word	0x0800dcc1
 800dc48:	0800dcc1 	.word	0x0800dcc1
 800dc4c:	0800dcc1 	.word	0x0800dcc1
 800dc50:	0800dcc1 	.word	0x0800dcc1
 800dc54:	0800dcc1 	.word	0x0800dcc1
 800dc58:	0800dcc1 	.word	0x0800dcc1
 800dc5c:	0800dcc1 	.word	0x0800dcc1
 800dc60:	0800dcc1 	.word	0x0800dcc1
 800dc64:	0800dcc1 	.word	0x0800dcc1
 800dc68:	0800dcc1 	.word	0x0800dcc1
 800dc6c:	0800dcc1 	.word	0x0800dcc1
 800dc70:	0800dcc1 	.word	0x0800dcc1
 800dc74:	0800dcc1 	.word	0x0800dcc1
 800dc78:	0800dcc1 	.word	0x0800dcc1
 800dc7c:	0800dcc1 	.word	0x0800dcc1
 800dc80:	0800dcc1 	.word	0x0800dcc1
 800dc84:	0800dcc1 	.word	0x0800dcc1
 800dc88:	0800dcc1 	.word	0x0800dcc1
 800dc8c:	0800dcc1 	.word	0x0800dcc1
 800dc90:	0800dcc1 	.word	0x0800dcc1
 800dc94:	0800dcc1 	.word	0x0800dcc1
 800dc98:	0800dcc1 	.word	0x0800dcc1
 800dc9c:	0800dcc1 	.word	0x0800dcc1
 800dca0:	0800dcc1 	.word	0x0800dcc1
 800dca4:	0800dcc1 	.word	0x0800dcc1
 800dca8:	0800dcc1 	.word	0x0800dcc1
 800dcac:	0800dcc1 	.word	0x0800dcc1
 800dcb0:	0800dcc1 	.word	0x0800dcc1
 800dcb4:	0800dcc1 	.word	0x0800dcc1
 800dcb8:	0800dcc1 	.word	0x0800dcc1
 800dcbc:	0800dcc1 	.word	0x0800dcc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dcc0:	bf00      	nop
  }

  return (USBD_OK);
 800dcc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
 CDC_Receive_FS_App(Buf, Len); // <----  ADD THIS LINE HERE!  Call your callback function
 800dcda:	6839      	ldr	r1, [r7, #0]
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f7f5 fddf 	bl	80038a0 <CDC_Receive_FS_App>
 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dce2:	6879      	ldr	r1, [r7, #4]
 800dce4:	4805      	ldr	r0, [pc, #20]	@ (800dcfc <CDC_Receive_FS+0x2c>)
 800dce6:	f7fe fb89 	bl	800c3fc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dcea:	4804      	ldr	r0, [pc, #16]	@ (800dcfc <CDC_Receive_FS+0x2c>)
 800dcec:	f7fe fbe4 	bl	800c4b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dcf0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	2006ea90 	.word	0x2006ea90

0800dd00 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	460b      	mov	r3, r1
 800dd0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dd10:	4b0d      	ldr	r3, [pc, #52]	@ (800dd48 <CDC_Transmit_FS+0x48>)
 800dd12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d001      	beq.n	800dd26 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dd22:	2301      	movs	r3, #1
 800dd24:	e00b      	b.n	800dd3e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dd26:	887b      	ldrh	r3, [r7, #2]
 800dd28:	461a      	mov	r2, r3
 800dd2a:	6879      	ldr	r1, [r7, #4]
 800dd2c:	4806      	ldr	r0, [pc, #24]	@ (800dd48 <CDC_Transmit_FS+0x48>)
 800dd2e:	f7fe fb43 	bl	800c3b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dd32:	4805      	ldr	r0, [pc, #20]	@ (800dd48 <CDC_Transmit_FS+0x48>)
 800dd34:	f7fe fb80 	bl	800c438 <USBD_CDC_TransmitPacket>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	2006ea90 	.word	0x2006ea90

0800dd4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b087      	sub	sp, #28
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	4613      	mov	r3, r2
 800dd58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dd5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	371c      	adds	r7, #28
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr
	...

0800dd70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	4603      	mov	r3, r0
 800dd78:	6039      	str	r1, [r7, #0]
 800dd7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	2212      	movs	r2, #18
 800dd80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dd82:	4b03      	ldr	r3, [pc, #12]	@ (800dd90 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr
 800dd90:	200000d8 	.word	0x200000d8

0800dd94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	6039      	str	r1, [r7, #0]
 800dd9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	2204      	movs	r2, #4
 800dda4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dda6:	4b03      	ldr	r3, [pc, #12]	@ (800ddb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	370c      	adds	r7, #12
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr
 800ddb4:	200000f8 	.word	0x200000f8

0800ddb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	6039      	str	r1, [r7, #0]
 800ddc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ddc4:	79fb      	ldrb	r3, [r7, #7]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d105      	bne.n	800ddd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ddca:	683a      	ldr	r2, [r7, #0]
 800ddcc:	4907      	ldr	r1, [pc, #28]	@ (800ddec <USBD_FS_ProductStrDescriptor+0x34>)
 800ddce:	4808      	ldr	r0, [pc, #32]	@ (800ddf0 <USBD_FS_ProductStrDescriptor+0x38>)
 800ddd0:	f7ff fde8 	bl	800d9a4 <USBD_GetString>
 800ddd4:	e004      	b.n	800dde0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ddd6:	683a      	ldr	r2, [r7, #0]
 800ddd8:	4904      	ldr	r1, [pc, #16]	@ (800ddec <USBD_FS_ProductStrDescriptor+0x34>)
 800ddda:	4805      	ldr	r0, [pc, #20]	@ (800ddf0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dddc:	f7ff fde2 	bl	800d9a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dde0:	4b02      	ldr	r3, [pc, #8]	@ (800ddec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3708      	adds	r7, #8
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	2006fd6c 	.word	0x2006fd6c
 800ddf0:	0800ec68 	.word	0x0800ec68

0800ddf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	6039      	str	r1, [r7, #0]
 800ddfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de00:	683a      	ldr	r2, [r7, #0]
 800de02:	4904      	ldr	r1, [pc, #16]	@ (800de14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800de04:	4804      	ldr	r0, [pc, #16]	@ (800de18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800de06:	f7ff fdcd 	bl	800d9a4 <USBD_GetString>
  return USBD_StrDesc;
 800de0a:	4b02      	ldr	r3, [pc, #8]	@ (800de14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	2006fd6c 	.word	0x2006fd6c
 800de18:	0800ec80 	.word	0x0800ec80

0800de1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	6039      	str	r1, [r7, #0]
 800de26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	221a      	movs	r2, #26
 800de2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800de2e:	f000 f855 	bl	800dedc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800de32:	4b02      	ldr	r3, [pc, #8]	@ (800de3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800de34:	4618      	mov	r0, r3
 800de36:	3708      	adds	r7, #8
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	200000fc 	.word	0x200000fc

0800de40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	4603      	mov	r3, r0
 800de48:	6039      	str	r1, [r7, #0]
 800de4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800de4c:	79fb      	ldrb	r3, [r7, #7]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d105      	bne.n	800de5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	4907      	ldr	r1, [pc, #28]	@ (800de74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de56:	4808      	ldr	r0, [pc, #32]	@ (800de78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de58:	f7ff fda4 	bl	800d9a4 <USBD_GetString>
 800de5c:	e004      	b.n	800de68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	4904      	ldr	r1, [pc, #16]	@ (800de74 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de62:	4805      	ldr	r0, [pc, #20]	@ (800de78 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de64:	f7ff fd9e 	bl	800d9a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de68:	4b02      	ldr	r3, [pc, #8]	@ (800de74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	2006fd6c 	.word	0x2006fd6c
 800de78:	0800ec94 	.word	0x0800ec94

0800de7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	4603      	mov	r3, r0
 800de84:	6039      	str	r1, [r7, #0]
 800de86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de88:	79fb      	ldrb	r3, [r7, #7]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d105      	bne.n	800de9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de8e:	683a      	ldr	r2, [r7, #0]
 800de90:	4907      	ldr	r1, [pc, #28]	@ (800deb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de92:	4808      	ldr	r0, [pc, #32]	@ (800deb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de94:	f7ff fd86 	bl	800d9a4 <USBD_GetString>
 800de98:	e004      	b.n	800dea4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de9a:	683a      	ldr	r2, [r7, #0]
 800de9c:	4904      	ldr	r1, [pc, #16]	@ (800deb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de9e:	4805      	ldr	r0, [pc, #20]	@ (800deb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dea0:	f7ff fd80 	bl	800d9a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dea4:	4b02      	ldr	r3, [pc, #8]	@ (800deb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	2006fd6c 	.word	0x2006fd6c
 800deb4:	0800eca0 	.word	0x0800eca0

0800deb8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
 800debe:	4603      	mov	r3, r0
 800dec0:	6039      	str	r1, [r7, #0]
 800dec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	220c      	movs	r2, #12
 800dec8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800deca:	4b03      	ldr	r3, [pc, #12]	@ (800ded8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800decc:	4618      	mov	r0, r3
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr
 800ded8:	200000ec 	.word	0x200000ec

0800dedc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dee2:	4b0f      	ldr	r3, [pc, #60]	@ (800df20 <Get_SerialNum+0x44>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dee8:	4b0e      	ldr	r3, [pc, #56]	@ (800df24 <Get_SerialNum+0x48>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800deee:	4b0e      	ldr	r3, [pc, #56]	@ (800df28 <Get_SerialNum+0x4c>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	4413      	add	r3, r2
 800defa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d009      	beq.n	800df16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df02:	2208      	movs	r2, #8
 800df04:	4909      	ldr	r1, [pc, #36]	@ (800df2c <Get_SerialNum+0x50>)
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f000 f814 	bl	800df34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df0c:	2204      	movs	r2, #4
 800df0e:	4908      	ldr	r1, [pc, #32]	@ (800df30 <Get_SerialNum+0x54>)
 800df10:	68b8      	ldr	r0, [r7, #8]
 800df12:	f000 f80f 	bl	800df34 <IntToUnicode>
  }
}
 800df16:	bf00      	nop
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	1ff0f420 	.word	0x1ff0f420
 800df24:	1ff0f424 	.word	0x1ff0f424
 800df28:	1ff0f428 	.word	0x1ff0f428
 800df2c:	200000fe 	.word	0x200000fe
 800df30:	2000010e 	.word	0x2000010e

0800df34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df34:	b480      	push	{r7}
 800df36:	b087      	sub	sp, #28
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	4613      	mov	r3, r2
 800df40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800df42:	2300      	movs	r3, #0
 800df44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800df46:	2300      	movs	r3, #0
 800df48:	75fb      	strb	r3, [r7, #23]
 800df4a:	e027      	b.n	800df9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	0f1b      	lsrs	r3, r3, #28
 800df50:	2b09      	cmp	r3, #9
 800df52:	d80b      	bhi.n	800df6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	0f1b      	lsrs	r3, r3, #28
 800df58:	b2da      	uxtb	r2, r3
 800df5a:	7dfb      	ldrb	r3, [r7, #23]
 800df5c:	005b      	lsls	r3, r3, #1
 800df5e:	4619      	mov	r1, r3
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	440b      	add	r3, r1
 800df64:	3230      	adds	r2, #48	@ 0x30
 800df66:	b2d2      	uxtb	r2, r2
 800df68:	701a      	strb	r2, [r3, #0]
 800df6a:	e00a      	b.n	800df82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	0f1b      	lsrs	r3, r3, #28
 800df70:	b2da      	uxtb	r2, r3
 800df72:	7dfb      	ldrb	r3, [r7, #23]
 800df74:	005b      	lsls	r3, r3, #1
 800df76:	4619      	mov	r1, r3
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	440b      	add	r3, r1
 800df7c:	3237      	adds	r2, #55	@ 0x37
 800df7e:	b2d2      	uxtb	r2, r2
 800df80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	011b      	lsls	r3, r3, #4
 800df86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df88:	7dfb      	ldrb	r3, [r7, #23]
 800df8a:	005b      	lsls	r3, r3, #1
 800df8c:	3301      	adds	r3, #1
 800df8e:	68ba      	ldr	r2, [r7, #8]
 800df90:	4413      	add	r3, r2
 800df92:	2200      	movs	r2, #0
 800df94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800df96:	7dfb      	ldrb	r3, [r7, #23]
 800df98:	3301      	adds	r3, #1
 800df9a:	75fb      	strb	r3, [r7, #23]
 800df9c:	7dfa      	ldrb	r2, [r7, #23]
 800df9e:	79fb      	ldrb	r3, [r7, #7]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d3d3      	bcc.n	800df4c <IntToUnicode+0x18>
  }
}
 800dfa4:	bf00      	nop
 800dfa6:	bf00      	nop
 800dfa8:	371c      	adds	r7, #28
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
	...

0800dfb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b0ae      	sub	sp, #184	@ 0xb8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfbc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	601a      	str	r2, [r3, #0]
 800dfc4:	605a      	str	r2, [r3, #4]
 800dfc6:	609a      	str	r2, [r3, #8]
 800dfc8:	60da      	str	r2, [r3, #12]
 800dfca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800dfcc:	f107 0314 	add.w	r3, r7, #20
 800dfd0:	2290      	movs	r2, #144	@ 0x90
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f000 fc29 	bl	800e82c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dfe2:	d161      	bne.n	800e0a8 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800dfe4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800dfe8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800dfea:	2300      	movs	r3, #0
 800dfec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800dff0:	f107 0314 	add.w	r3, r7, #20
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7f9 fc3b 	bl	8007870 <HAL_RCCEx_PeriphCLKConfig>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d001      	beq.n	800e004 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e000:	f7f4 fea4 	bl	8002d4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e004:	4b2a      	ldr	r3, [pc, #168]	@ (800e0b0 <HAL_PCD_MspInit+0xfc>)
 800e006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e008:	4a29      	ldr	r2, [pc, #164]	@ (800e0b0 <HAL_PCD_MspInit+0xfc>)
 800e00a:	f043 0301 	orr.w	r3, r3, #1
 800e00e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e010:	4b27      	ldr	r3, [pc, #156]	@ (800e0b0 <HAL_PCD_MspInit+0xfc>)
 800e012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e014:	f003 0301 	and.w	r3, r3, #1
 800e018:	613b      	str	r3, [r7, #16]
 800e01a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800e01c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800e020:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e024:	2302      	movs	r3, #2
 800e026:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e02a:	2300      	movs	r3, #0
 800e02c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e030:	2303      	movs	r3, #3
 800e032:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e036:	230a      	movs	r3, #10
 800e038:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e03c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800e040:	4619      	mov	r1, r3
 800e042:	481c      	ldr	r0, [pc, #112]	@ (800e0b4 <HAL_PCD_MspInit+0x100>)
 800e044:	f7f7 fa78 	bl	8005538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800e048:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e04c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e050:	2300      	movs	r3, #0
 800e052:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e056:	2300      	movs	r3, #0
 800e058:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800e05c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800e060:	4619      	mov	r1, r3
 800e062:	4814      	ldr	r0, [pc, #80]	@ (800e0b4 <HAL_PCD_MspInit+0x100>)
 800e064:	f7f7 fa68 	bl	8005538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e068:	4b11      	ldr	r3, [pc, #68]	@ (800e0b0 <HAL_PCD_MspInit+0xfc>)
 800e06a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e06c:	4a10      	ldr	r2, [pc, #64]	@ (800e0b0 <HAL_PCD_MspInit+0xfc>)
 800e06e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e072:	6353      	str	r3, [r2, #52]	@ 0x34
 800e074:	4b0e      	ldr	r3, [pc, #56]	@ (800e0b0 <HAL_PCD_MspInit+0xfc>)
 800e076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e07c:	60fb      	str	r3, [r7, #12]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	4b0b      	ldr	r3, [pc, #44]	@ (800e0b0 <HAL_PCD_MspInit+0xfc>)
 800e082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e084:	4a0a      	ldr	r2, [pc, #40]	@ (800e0b0 <HAL_PCD_MspInit+0xfc>)
 800e086:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e08a:	6453      	str	r3, [r2, #68]	@ 0x44
 800e08c:	4b08      	ldr	r3, [pc, #32]	@ (800e0b0 <HAL_PCD_MspInit+0xfc>)
 800e08e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e094:	60bb      	str	r3, [r7, #8]
 800e096:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e098:	2200      	movs	r2, #0
 800e09a:	2100      	movs	r1, #0
 800e09c:	2043      	movs	r0, #67	@ 0x43
 800e09e:	f7f6 fabc 	bl	800461a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e0a2:	2043      	movs	r0, #67	@ 0x43
 800e0a4:	f7f6 fad5 	bl	8004652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e0a8:	bf00      	nop
 800e0aa:	37b8      	adds	r7, #184	@ 0xb8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	40023800 	.word	0x40023800
 800e0b4:	40020000 	.word	0x40020000

0800e0b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	4610      	mov	r0, r2
 800e0d0:	f7fe fadb 	bl	800c68a <USBD_LL_SetupStage>
}
 800e0d4:	bf00      	nop
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800e0ee:	78fa      	ldrb	r2, [r7, #3]
 800e0f0:	6879      	ldr	r1, [r7, #4]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	00db      	lsls	r3, r3, #3
 800e0f6:	4413      	add	r3, r2
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	440b      	add	r3, r1
 800e0fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	78fb      	ldrb	r3, [r7, #3]
 800e104:	4619      	mov	r1, r3
 800e106:	f7fe fb15 	bl	800c734 <USBD_LL_DataOutStage>
}
 800e10a:	bf00      	nop
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e112:	b580      	push	{r7, lr}
 800e114:	b082      	sub	sp, #8
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
 800e11a:	460b      	mov	r3, r1
 800e11c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800e124:	78fa      	ldrb	r2, [r7, #3]
 800e126:	6879      	ldr	r1, [r7, #4]
 800e128:	4613      	mov	r3, r2
 800e12a:	00db      	lsls	r3, r3, #3
 800e12c:	4413      	add	r3, r2
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	440b      	add	r3, r1
 800e132:	3320      	adds	r3, #32
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	78fb      	ldrb	r3, [r7, #3]
 800e138:	4619      	mov	r1, r3
 800e13a:	f7fe fbae 	bl	800c89a <USBD_LL_DataInStage>
}
 800e13e:	bf00      	nop
 800e140:	3708      	adds	r7, #8
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}

0800e146 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e146:	b580      	push	{r7, lr}
 800e148:	b082      	sub	sp, #8
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e154:	4618      	mov	r0, r3
 800e156:	f7fe fce8 	bl	800cb2a <USBD_LL_SOF>
}
 800e15a:	bf00      	nop
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b084      	sub	sp, #16
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e16a:	2301      	movs	r3, #1
 800e16c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	79db      	ldrb	r3, [r3, #7]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d102      	bne.n	800e17c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e176:	2300      	movs	r3, #0
 800e178:	73fb      	strb	r3, [r7, #15]
 800e17a:	e008      	b.n	800e18e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	79db      	ldrb	r3, [r3, #7]
 800e180:	2b02      	cmp	r3, #2
 800e182:	d102      	bne.n	800e18a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e184:	2301      	movs	r3, #1
 800e186:	73fb      	strb	r3, [r7, #15]
 800e188:	e001      	b.n	800e18e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e18a:	f7f4 fddf 	bl	8002d4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e194:	7bfa      	ldrb	r2, [r7, #15]
 800e196:	4611      	mov	r1, r2
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fe fc82 	bl	800caa2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7fe fc2a 	bl	800c9fe <USBD_LL_Reset>
}
 800e1aa:	bf00      	nop
 800e1ac:	3710      	adds	r7, #16
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
	...

0800e1b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fe fc7d 	bl	800cac2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	6812      	ldr	r2, [r2, #0]
 800e1d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e1da:	f043 0301 	orr.w	r3, r3, #1
 800e1de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	7adb      	ldrb	r3, [r3, #11]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d005      	beq.n	800e1f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1e8:	4b04      	ldr	r3, [pc, #16]	@ (800e1fc <HAL_PCD_SuspendCallback+0x48>)
 800e1ea:	691b      	ldr	r3, [r3, #16]
 800e1ec:	4a03      	ldr	r2, [pc, #12]	@ (800e1fc <HAL_PCD_SuspendCallback+0x48>)
 800e1ee:	f043 0306 	orr.w	r3, r3, #6
 800e1f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e1f4:	bf00      	nop
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	e000ed00 	.word	0xe000ed00

0800e200 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e20e:	4618      	mov	r0, r3
 800e210:	f7fe fc73 	bl	800cafa <USBD_LL_Resume>
}
 800e214:	bf00      	nop
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	460b      	mov	r3, r1
 800e226:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e22e:	78fa      	ldrb	r2, [r7, #3]
 800e230:	4611      	mov	r1, r2
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe fccb 	bl	800cbce <USBD_LL_IsoOUTIncomplete>
}
 800e238:	bf00      	nop
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	460b      	mov	r3, r1
 800e24a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e252:	78fa      	ldrb	r2, [r7, #3]
 800e254:	4611      	mov	r1, r2
 800e256:	4618      	mov	r0, r3
 800e258:	f7fe fc87 	bl	800cb6a <USBD_LL_IsoINIncomplete>
}
 800e25c:	bf00      	nop
 800e25e:	3708      	adds	r7, #8
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e272:	4618      	mov	r0, r3
 800e274:	f7fe fcdd 	bl	800cc32 <USBD_LL_DevConnected>
}
 800e278:	bf00      	nop
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fe fcda 	bl	800cc48 <USBD_LL_DevDisconnected>
}
 800e294:	bf00      	nop
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d13c      	bne.n	800e326 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e2ac:	4a20      	ldr	r2, [pc, #128]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4a1e      	ldr	r2, [pc, #120]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2b8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e2bc:	4b1c      	ldr	r3, [pc, #112]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e2c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e2c4:	4b1a      	ldr	r3, [pc, #104]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2c6:	2206      	movs	r2, #6
 800e2c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e2ca:	4b19      	ldr	r3, [pc, #100]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2cc:	2202      	movs	r2, #2
 800e2ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e2d0:	4b17      	ldr	r3, [pc, #92]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e2d6:	4b16      	ldr	r3, [pc, #88]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2d8:	2202      	movs	r2, #2
 800e2da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e2dc:	4b14      	ldr	r3, [pc, #80]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2de:	2201      	movs	r2, #1
 800e2e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e2e2:	4b13      	ldr	r3, [pc, #76]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e2e8:	4b11      	ldr	r3, [pc, #68]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e2ee:	4b10      	ldr	r3, [pc, #64]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e2f4:	4b0e      	ldr	r3, [pc, #56]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e2fa:	480d      	ldr	r0, [pc, #52]	@ (800e330 <USBD_LL_Init+0x94>)
 800e2fc:	f7f7 fafb 	bl	80058f6 <HAL_PCD_Init>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d001      	beq.n	800e30a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e306:	f7f4 fd21 	bl	8002d4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e30a:	2180      	movs	r1, #128	@ 0x80
 800e30c:	4808      	ldr	r0, [pc, #32]	@ (800e330 <USBD_LL_Init+0x94>)
 800e30e:	f7f8 fd46 	bl	8006d9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e312:	2240      	movs	r2, #64	@ 0x40
 800e314:	2100      	movs	r1, #0
 800e316:	4806      	ldr	r0, [pc, #24]	@ (800e330 <USBD_LL_Init+0x94>)
 800e318:	f7f8 fcfa 	bl	8006d10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e31c:	2280      	movs	r2, #128	@ 0x80
 800e31e:	2101      	movs	r1, #1
 800e320:	4803      	ldr	r0, [pc, #12]	@ (800e330 <USBD_LL_Init+0x94>)
 800e322:	f7f8 fcf5 	bl	8006d10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e326:	2300      	movs	r3, #0
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	2006ff6c 	.word	0x2006ff6c

0800e334 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e33c:	2300      	movs	r3, #0
 800e33e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e340:	2300      	movs	r3, #0
 800e342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7f7 fbe9 	bl	8005b22 <HAL_PCD_Start>
 800e350:	4603      	mov	r3, r0
 800e352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e354:	7bfb      	ldrb	r3, [r7, #15]
 800e356:	4618      	mov	r0, r3
 800e358:	f000 f97e 	bl	800e658 <USBD_Get_USB_Status>
 800e35c:	4603      	mov	r3, r0
 800e35e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e360:	7bbb      	ldrb	r3, [r7, #14]
}
 800e362:	4618      	mov	r0, r3
 800e364:	3710      	adds	r7, #16
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}

0800e36a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b084      	sub	sp, #16
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
 800e372:	4608      	mov	r0, r1
 800e374:	4611      	mov	r1, r2
 800e376:	461a      	mov	r2, r3
 800e378:	4603      	mov	r3, r0
 800e37a:	70fb      	strb	r3, [r7, #3]
 800e37c:	460b      	mov	r3, r1
 800e37e:	70bb      	strb	r3, [r7, #2]
 800e380:	4613      	mov	r3, r2
 800e382:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e384:	2300      	movs	r3, #0
 800e386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e388:	2300      	movs	r3, #0
 800e38a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e392:	78bb      	ldrb	r3, [r7, #2]
 800e394:	883a      	ldrh	r2, [r7, #0]
 800e396:	78f9      	ldrb	r1, [r7, #3]
 800e398:	f7f8 f8d7 	bl	800654a <HAL_PCD_EP_Open>
 800e39c:	4603      	mov	r3, r0
 800e39e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3a0:	7bfb      	ldrb	r3, [r7, #15]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f000 f958 	bl	800e658 <USBD_Get_USB_Status>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b084      	sub	sp, #16
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
 800e3be:	460b      	mov	r3, r1
 800e3c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3d0:	78fa      	ldrb	r2, [r7, #3]
 800e3d2:	4611      	mov	r1, r2
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7f8 f920 	bl	800661a <HAL_PCD_EP_Close>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3de:	7bfb      	ldrb	r3, [r7, #15]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f000 f939 	bl	800e658 <USBD_Get_USB_Status>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3710      	adds	r7, #16
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}

0800e3f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e400:	2300      	movs	r3, #0
 800e402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e404:	2300      	movs	r3, #0
 800e406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e40e:	78fa      	ldrb	r2, [r7, #3]
 800e410:	4611      	mov	r1, r2
 800e412:	4618      	mov	r0, r3
 800e414:	f7f8 f9d8 	bl	80067c8 <HAL_PCD_EP_SetStall>
 800e418:	4603      	mov	r3, r0
 800e41a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e41c:	7bfb      	ldrb	r3, [r7, #15]
 800e41e:	4618      	mov	r0, r3
 800e420:	f000 f91a 	bl	800e658 <USBD_Get_USB_Status>
 800e424:	4603      	mov	r3, r0
 800e426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e428:	7bbb      	ldrb	r3, [r7, #14]
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}

0800e432 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e432:	b580      	push	{r7, lr}
 800e434:	b084      	sub	sp, #16
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
 800e43a:	460b      	mov	r3, r1
 800e43c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e43e:	2300      	movs	r3, #0
 800e440:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e442:	2300      	movs	r3, #0
 800e444:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e44c:	78fa      	ldrb	r2, [r7, #3]
 800e44e:	4611      	mov	r1, r2
 800e450:	4618      	mov	r0, r3
 800e452:	f7f8 fa1c 	bl	800688e <HAL_PCD_EP_ClrStall>
 800e456:	4603      	mov	r3, r0
 800e458:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e45a:	7bfb      	ldrb	r3, [r7, #15]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f000 f8fb 	bl	800e658 <USBD_Get_USB_Status>
 800e462:	4603      	mov	r3, r0
 800e464:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e466:	7bbb      	ldrb	r3, [r7, #14]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e470:	b480      	push	{r7}
 800e472:	b085      	sub	sp, #20
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	460b      	mov	r3, r1
 800e47a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e482:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	da0b      	bge.n	800e4a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e48c:	78fb      	ldrb	r3, [r7, #3]
 800e48e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e492:	68f9      	ldr	r1, [r7, #12]
 800e494:	4613      	mov	r3, r2
 800e496:	00db      	lsls	r3, r3, #3
 800e498:	4413      	add	r3, r2
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	440b      	add	r3, r1
 800e49e:	3316      	adds	r3, #22
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	e00b      	b.n	800e4bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e4a4:	78fb      	ldrb	r3, [r7, #3]
 800e4a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e4aa:	68f9      	ldr	r1, [r7, #12]
 800e4ac:	4613      	mov	r3, r2
 800e4ae:	00db      	lsls	r3, r3, #3
 800e4b0:	4413      	add	r3, r2
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	440b      	add	r3, r1
 800e4b6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e4ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3714      	adds	r7, #20
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4e2:	78fa      	ldrb	r2, [r7, #3]
 800e4e4:	4611      	mov	r1, r2
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7f8 f80b 	bl	8006502 <HAL_PCD_SetAddress>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4f0:	7bfb      	ldrb	r3, [r7, #15]
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f000 f8b0 	bl	800e658 <USBD_Get_USB_Status>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}

0800e506 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b086      	sub	sp, #24
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	60f8      	str	r0, [r7, #12]
 800e50e:	607a      	str	r2, [r7, #4]
 800e510:	603b      	str	r3, [r7, #0]
 800e512:	460b      	mov	r3, r1
 800e514:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e516:	2300      	movs	r3, #0
 800e518:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e51a:	2300      	movs	r3, #0
 800e51c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e524:	7af9      	ldrb	r1, [r7, #11]
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	f7f8 f913 	bl	8006754 <HAL_PCD_EP_Transmit>
 800e52e:	4603      	mov	r3, r0
 800e530:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e532:	7dfb      	ldrb	r3, [r7, #23]
 800e534:	4618      	mov	r0, r3
 800e536:	f000 f88f 	bl	800e658 <USBD_Get_USB_Status>
 800e53a:	4603      	mov	r3, r0
 800e53c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e53e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e540:	4618      	mov	r0, r3
 800e542:	3718      	adds	r7, #24
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b086      	sub	sp, #24
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	607a      	str	r2, [r7, #4]
 800e552:	603b      	str	r3, [r7, #0]
 800e554:	460b      	mov	r3, r1
 800e556:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e558:	2300      	movs	r3, #0
 800e55a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e55c:	2300      	movs	r3, #0
 800e55e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e566:	7af9      	ldrb	r1, [r7, #11]
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	687a      	ldr	r2, [r7, #4]
 800e56c:	f7f8 f89f 	bl	80066ae <HAL_PCD_EP_Receive>
 800e570:	4603      	mov	r3, r0
 800e572:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e574:	7dfb      	ldrb	r3, [r7, #23]
 800e576:	4618      	mov	r0, r3
 800e578:	f000 f86e 	bl	800e658 <USBD_Get_USB_Status>
 800e57c:	4603      	mov	r3, r0
 800e57e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e580:	7dbb      	ldrb	r3, [r7, #22]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3718      	adds	r7, #24
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b082      	sub	sp, #8
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
 800e592:	460b      	mov	r3, r1
 800e594:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e59c:	78fa      	ldrb	r2, [r7, #3]
 800e59e:	4611      	mov	r1, r2
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7f8 f8bf 	bl	8006724 <HAL_PCD_EP_GetRxCount>
 800e5a6:	4603      	mov	r3, r0
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3708      	adds	r7, #8
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e5bc:	78fb      	ldrb	r3, [r7, #3]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d002      	beq.n	800e5c8 <HAL_PCDEx_LPM_Callback+0x18>
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d01f      	beq.n	800e606 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e5c6:	e03b      	b.n	800e640 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	7adb      	ldrb	r3, [r3, #11]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d007      	beq.n	800e5e0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e5d0:	f000 f83c 	bl	800e64c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5d4:	4b1c      	ldr	r3, [pc, #112]	@ (800e648 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5d6:	691b      	ldr	r3, [r3, #16]
 800e5d8:	4a1b      	ldr	r2, [pc, #108]	@ (800e648 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5da:	f023 0306 	bic.w	r3, r3, #6
 800e5de:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	6812      	ldr	r2, [r2, #0]
 800e5ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e5f2:	f023 0301 	bic.w	r3, r3, #1
 800e5f6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fe fa7b 	bl	800cafa <USBD_LL_Resume>
    break;
 800e604:	e01c      	b.n	800e640 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	687a      	ldr	r2, [r7, #4]
 800e612:	6812      	ldr	r2, [r2, #0]
 800e614:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e618:	f043 0301 	orr.w	r3, r3, #1
 800e61c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e624:	4618      	mov	r0, r3
 800e626:	f7fe fa4c 	bl	800cac2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	7adb      	ldrb	r3, [r3, #11]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d005      	beq.n	800e63e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e632:	4b05      	ldr	r3, [pc, #20]	@ (800e648 <HAL_PCDEx_LPM_Callback+0x98>)
 800e634:	691b      	ldr	r3, [r3, #16]
 800e636:	4a04      	ldr	r2, [pc, #16]	@ (800e648 <HAL_PCDEx_LPM_Callback+0x98>)
 800e638:	f043 0306 	orr.w	r3, r3, #6
 800e63c:	6113      	str	r3, [r2, #16]
    break;
 800e63e:	bf00      	nop
}
 800e640:	bf00      	nop
 800e642:	3708      	adds	r7, #8
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	e000ed00 	.word	0xe000ed00

0800e64c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e650:	f7f3 ff8a 	bl	8002568 <SystemClock_Config>
}
 800e654:	bf00      	nop
 800e656:	bd80      	pop	{r7, pc}

0800e658 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e658:	b480      	push	{r7}
 800e65a:	b085      	sub	sp, #20
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	4603      	mov	r3, r0
 800e660:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e662:	2300      	movs	r3, #0
 800e664:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e666:	79fb      	ldrb	r3, [r7, #7]
 800e668:	2b03      	cmp	r3, #3
 800e66a:	d817      	bhi.n	800e69c <USBD_Get_USB_Status+0x44>
 800e66c:	a201      	add	r2, pc, #4	@ (adr r2, 800e674 <USBD_Get_USB_Status+0x1c>)
 800e66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e672:	bf00      	nop
 800e674:	0800e685 	.word	0x0800e685
 800e678:	0800e68b 	.word	0x0800e68b
 800e67c:	0800e691 	.word	0x0800e691
 800e680:	0800e697 	.word	0x0800e697
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e684:	2300      	movs	r3, #0
 800e686:	73fb      	strb	r3, [r7, #15]
    break;
 800e688:	e00b      	b.n	800e6a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e68a:	2303      	movs	r3, #3
 800e68c:	73fb      	strb	r3, [r7, #15]
    break;
 800e68e:	e008      	b.n	800e6a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e690:	2301      	movs	r3, #1
 800e692:	73fb      	strb	r3, [r7, #15]
    break;
 800e694:	e005      	b.n	800e6a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e696:	2303      	movs	r3, #3
 800e698:	73fb      	strb	r3, [r7, #15]
    break;
 800e69a:	e002      	b.n	800e6a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e69c:	2303      	movs	r3, #3
 800e69e:	73fb      	strb	r3, [r7, #15]
    break;
 800e6a0:	bf00      	nop
  }
  return usb_status;
 800e6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3714      	adds	r7, #20
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <malloc>:
 800e6b0:	4b02      	ldr	r3, [pc, #8]	@ (800e6bc <malloc+0xc>)
 800e6b2:	4601      	mov	r1, r0
 800e6b4:	6818      	ldr	r0, [r3, #0]
 800e6b6:	f000 b82d 	b.w	800e714 <_malloc_r>
 800e6ba:	bf00      	nop
 800e6bc:	20000118 	.word	0x20000118

0800e6c0 <free>:
 800e6c0:	4b02      	ldr	r3, [pc, #8]	@ (800e6cc <free+0xc>)
 800e6c2:	4601      	mov	r1, r0
 800e6c4:	6818      	ldr	r0, [r3, #0]
 800e6c6:	f000 b997 	b.w	800e9f8 <_free_r>
 800e6ca:	bf00      	nop
 800e6cc:	20000118 	.word	0x20000118

0800e6d0 <sbrk_aligned>:
 800e6d0:	b570      	push	{r4, r5, r6, lr}
 800e6d2:	4e0f      	ldr	r6, [pc, #60]	@ (800e710 <sbrk_aligned+0x40>)
 800e6d4:	460c      	mov	r4, r1
 800e6d6:	6831      	ldr	r1, [r6, #0]
 800e6d8:	4605      	mov	r5, r0
 800e6da:	b911      	cbnz	r1, 800e6e2 <sbrk_aligned+0x12>
 800e6dc:	f000 f8ae 	bl	800e83c <_sbrk_r>
 800e6e0:	6030      	str	r0, [r6, #0]
 800e6e2:	4621      	mov	r1, r4
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	f000 f8a9 	bl	800e83c <_sbrk_r>
 800e6ea:	1c43      	adds	r3, r0, #1
 800e6ec:	d103      	bne.n	800e6f6 <sbrk_aligned+0x26>
 800e6ee:	f04f 34ff 	mov.w	r4, #4294967295
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	bd70      	pop	{r4, r5, r6, pc}
 800e6f6:	1cc4      	adds	r4, r0, #3
 800e6f8:	f024 0403 	bic.w	r4, r4, #3
 800e6fc:	42a0      	cmp	r0, r4
 800e6fe:	d0f8      	beq.n	800e6f2 <sbrk_aligned+0x22>
 800e700:	1a21      	subs	r1, r4, r0
 800e702:	4628      	mov	r0, r5
 800e704:	f000 f89a 	bl	800e83c <_sbrk_r>
 800e708:	3001      	adds	r0, #1
 800e70a:	d1f2      	bne.n	800e6f2 <sbrk_aligned+0x22>
 800e70c:	e7ef      	b.n	800e6ee <sbrk_aligned+0x1e>
 800e70e:	bf00      	nop
 800e710:	2007044c 	.word	0x2007044c

0800e714 <_malloc_r>:
 800e714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e718:	1ccd      	adds	r5, r1, #3
 800e71a:	f025 0503 	bic.w	r5, r5, #3
 800e71e:	3508      	adds	r5, #8
 800e720:	2d0c      	cmp	r5, #12
 800e722:	bf38      	it	cc
 800e724:	250c      	movcc	r5, #12
 800e726:	2d00      	cmp	r5, #0
 800e728:	4606      	mov	r6, r0
 800e72a:	db01      	blt.n	800e730 <_malloc_r+0x1c>
 800e72c:	42a9      	cmp	r1, r5
 800e72e:	d904      	bls.n	800e73a <_malloc_r+0x26>
 800e730:	230c      	movs	r3, #12
 800e732:	6033      	str	r3, [r6, #0]
 800e734:	2000      	movs	r0, #0
 800e736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e73a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e810 <_malloc_r+0xfc>
 800e73e:	f000 f869 	bl	800e814 <__malloc_lock>
 800e742:	f8d8 3000 	ldr.w	r3, [r8]
 800e746:	461c      	mov	r4, r3
 800e748:	bb44      	cbnz	r4, 800e79c <_malloc_r+0x88>
 800e74a:	4629      	mov	r1, r5
 800e74c:	4630      	mov	r0, r6
 800e74e:	f7ff ffbf 	bl	800e6d0 <sbrk_aligned>
 800e752:	1c43      	adds	r3, r0, #1
 800e754:	4604      	mov	r4, r0
 800e756:	d158      	bne.n	800e80a <_malloc_r+0xf6>
 800e758:	f8d8 4000 	ldr.w	r4, [r8]
 800e75c:	4627      	mov	r7, r4
 800e75e:	2f00      	cmp	r7, #0
 800e760:	d143      	bne.n	800e7ea <_malloc_r+0xd6>
 800e762:	2c00      	cmp	r4, #0
 800e764:	d04b      	beq.n	800e7fe <_malloc_r+0xea>
 800e766:	6823      	ldr	r3, [r4, #0]
 800e768:	4639      	mov	r1, r7
 800e76a:	4630      	mov	r0, r6
 800e76c:	eb04 0903 	add.w	r9, r4, r3
 800e770:	f000 f864 	bl	800e83c <_sbrk_r>
 800e774:	4581      	cmp	r9, r0
 800e776:	d142      	bne.n	800e7fe <_malloc_r+0xea>
 800e778:	6821      	ldr	r1, [r4, #0]
 800e77a:	1a6d      	subs	r5, r5, r1
 800e77c:	4629      	mov	r1, r5
 800e77e:	4630      	mov	r0, r6
 800e780:	f7ff ffa6 	bl	800e6d0 <sbrk_aligned>
 800e784:	3001      	adds	r0, #1
 800e786:	d03a      	beq.n	800e7fe <_malloc_r+0xea>
 800e788:	6823      	ldr	r3, [r4, #0]
 800e78a:	442b      	add	r3, r5
 800e78c:	6023      	str	r3, [r4, #0]
 800e78e:	f8d8 3000 	ldr.w	r3, [r8]
 800e792:	685a      	ldr	r2, [r3, #4]
 800e794:	bb62      	cbnz	r2, 800e7f0 <_malloc_r+0xdc>
 800e796:	f8c8 7000 	str.w	r7, [r8]
 800e79a:	e00f      	b.n	800e7bc <_malloc_r+0xa8>
 800e79c:	6822      	ldr	r2, [r4, #0]
 800e79e:	1b52      	subs	r2, r2, r5
 800e7a0:	d420      	bmi.n	800e7e4 <_malloc_r+0xd0>
 800e7a2:	2a0b      	cmp	r2, #11
 800e7a4:	d917      	bls.n	800e7d6 <_malloc_r+0xc2>
 800e7a6:	1961      	adds	r1, r4, r5
 800e7a8:	42a3      	cmp	r3, r4
 800e7aa:	6025      	str	r5, [r4, #0]
 800e7ac:	bf18      	it	ne
 800e7ae:	6059      	strne	r1, [r3, #4]
 800e7b0:	6863      	ldr	r3, [r4, #4]
 800e7b2:	bf08      	it	eq
 800e7b4:	f8c8 1000 	streq.w	r1, [r8]
 800e7b8:	5162      	str	r2, [r4, r5]
 800e7ba:	604b      	str	r3, [r1, #4]
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f000 f82f 	bl	800e820 <__malloc_unlock>
 800e7c2:	f104 000b 	add.w	r0, r4, #11
 800e7c6:	1d23      	adds	r3, r4, #4
 800e7c8:	f020 0007 	bic.w	r0, r0, #7
 800e7cc:	1ac2      	subs	r2, r0, r3
 800e7ce:	bf1c      	itt	ne
 800e7d0:	1a1b      	subne	r3, r3, r0
 800e7d2:	50a3      	strne	r3, [r4, r2]
 800e7d4:	e7af      	b.n	800e736 <_malloc_r+0x22>
 800e7d6:	6862      	ldr	r2, [r4, #4]
 800e7d8:	42a3      	cmp	r3, r4
 800e7da:	bf0c      	ite	eq
 800e7dc:	f8c8 2000 	streq.w	r2, [r8]
 800e7e0:	605a      	strne	r2, [r3, #4]
 800e7e2:	e7eb      	b.n	800e7bc <_malloc_r+0xa8>
 800e7e4:	4623      	mov	r3, r4
 800e7e6:	6864      	ldr	r4, [r4, #4]
 800e7e8:	e7ae      	b.n	800e748 <_malloc_r+0x34>
 800e7ea:	463c      	mov	r4, r7
 800e7ec:	687f      	ldr	r7, [r7, #4]
 800e7ee:	e7b6      	b.n	800e75e <_malloc_r+0x4a>
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	42a3      	cmp	r3, r4
 800e7f6:	d1fb      	bne.n	800e7f0 <_malloc_r+0xdc>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	6053      	str	r3, [r2, #4]
 800e7fc:	e7de      	b.n	800e7bc <_malloc_r+0xa8>
 800e7fe:	230c      	movs	r3, #12
 800e800:	6033      	str	r3, [r6, #0]
 800e802:	4630      	mov	r0, r6
 800e804:	f000 f80c 	bl	800e820 <__malloc_unlock>
 800e808:	e794      	b.n	800e734 <_malloc_r+0x20>
 800e80a:	6005      	str	r5, [r0, #0]
 800e80c:	e7d6      	b.n	800e7bc <_malloc_r+0xa8>
 800e80e:	bf00      	nop
 800e810:	20070450 	.word	0x20070450

0800e814 <__malloc_lock>:
 800e814:	4801      	ldr	r0, [pc, #4]	@ (800e81c <__malloc_lock+0x8>)
 800e816:	f000 b84b 	b.w	800e8b0 <__retarget_lock_acquire_recursive>
 800e81a:	bf00      	nop
 800e81c:	20070590 	.word	0x20070590

0800e820 <__malloc_unlock>:
 800e820:	4801      	ldr	r0, [pc, #4]	@ (800e828 <__malloc_unlock+0x8>)
 800e822:	f000 b846 	b.w	800e8b2 <__retarget_lock_release_recursive>
 800e826:	bf00      	nop
 800e828:	20070590 	.word	0x20070590

0800e82c <memset>:
 800e82c:	4402      	add	r2, r0
 800e82e:	4603      	mov	r3, r0
 800e830:	4293      	cmp	r3, r2
 800e832:	d100      	bne.n	800e836 <memset+0xa>
 800e834:	4770      	bx	lr
 800e836:	f803 1b01 	strb.w	r1, [r3], #1
 800e83a:	e7f9      	b.n	800e830 <memset+0x4>

0800e83c <_sbrk_r>:
 800e83c:	b538      	push	{r3, r4, r5, lr}
 800e83e:	4d06      	ldr	r5, [pc, #24]	@ (800e858 <_sbrk_r+0x1c>)
 800e840:	2300      	movs	r3, #0
 800e842:	4604      	mov	r4, r0
 800e844:	4608      	mov	r0, r1
 800e846:	602b      	str	r3, [r5, #0]
 800e848:	f7f4 ffc4 	bl	80037d4 <_sbrk>
 800e84c:	1c43      	adds	r3, r0, #1
 800e84e:	d102      	bne.n	800e856 <_sbrk_r+0x1a>
 800e850:	682b      	ldr	r3, [r5, #0]
 800e852:	b103      	cbz	r3, 800e856 <_sbrk_r+0x1a>
 800e854:	6023      	str	r3, [r4, #0]
 800e856:	bd38      	pop	{r3, r4, r5, pc}
 800e858:	2007058c 	.word	0x2007058c

0800e85c <__errno>:
 800e85c:	4b01      	ldr	r3, [pc, #4]	@ (800e864 <__errno+0x8>)
 800e85e:	6818      	ldr	r0, [r3, #0]
 800e860:	4770      	bx	lr
 800e862:	bf00      	nop
 800e864:	20000118 	.word	0x20000118

0800e868 <__libc_init_array>:
 800e868:	b570      	push	{r4, r5, r6, lr}
 800e86a:	4d0d      	ldr	r5, [pc, #52]	@ (800e8a0 <__libc_init_array+0x38>)
 800e86c:	4c0d      	ldr	r4, [pc, #52]	@ (800e8a4 <__libc_init_array+0x3c>)
 800e86e:	1b64      	subs	r4, r4, r5
 800e870:	10a4      	asrs	r4, r4, #2
 800e872:	2600      	movs	r6, #0
 800e874:	42a6      	cmp	r6, r4
 800e876:	d109      	bne.n	800e88c <__libc_init_array+0x24>
 800e878:	4d0b      	ldr	r5, [pc, #44]	@ (800e8a8 <__libc_init_array+0x40>)
 800e87a:	4c0c      	ldr	r4, [pc, #48]	@ (800e8ac <__libc_init_array+0x44>)
 800e87c:	f000 f9e6 	bl	800ec4c <_init>
 800e880:	1b64      	subs	r4, r4, r5
 800e882:	10a4      	asrs	r4, r4, #2
 800e884:	2600      	movs	r6, #0
 800e886:	42a6      	cmp	r6, r4
 800e888:	d105      	bne.n	800e896 <__libc_init_array+0x2e>
 800e88a:	bd70      	pop	{r4, r5, r6, pc}
 800e88c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e890:	4798      	blx	r3
 800e892:	3601      	adds	r6, #1
 800e894:	e7ee      	b.n	800e874 <__libc_init_array+0xc>
 800e896:	f855 3b04 	ldr.w	r3, [r5], #4
 800e89a:	4798      	blx	r3
 800e89c:	3601      	adds	r6, #1
 800e89e:	e7f2      	b.n	800e886 <__libc_init_array+0x1e>
 800e8a0:	0800f018 	.word	0x0800f018
 800e8a4:	0800f018 	.word	0x0800f018
 800e8a8:	0800f018 	.word	0x0800f018
 800e8ac:	0800f01c 	.word	0x0800f01c

0800e8b0 <__retarget_lock_acquire_recursive>:
 800e8b0:	4770      	bx	lr

0800e8b2 <__retarget_lock_release_recursive>:
 800e8b2:	4770      	bx	lr

0800e8b4 <memcpy>:
 800e8b4:	440a      	add	r2, r1
 800e8b6:	4291      	cmp	r1, r2
 800e8b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e8bc:	d100      	bne.n	800e8c0 <memcpy+0xc>
 800e8be:	4770      	bx	lr
 800e8c0:	b510      	push	{r4, lr}
 800e8c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e8ca:	4291      	cmp	r1, r2
 800e8cc:	d1f9      	bne.n	800e8c2 <memcpy+0xe>
 800e8ce:	bd10      	pop	{r4, pc}

0800e8d0 <ldexpf>:
 800e8d0:	b510      	push	{r4, lr}
 800e8d2:	ed2d 8b02 	vpush	{d8}
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	eeb0 8a40 	vmov.f32	s16, s0
 800e8dc:	f000 f882 	bl	800e9e4 <finitef>
 800e8e0:	b1b8      	cbz	r0, 800e912 <ldexpf+0x42>
 800e8e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ea:	d012      	beq.n	800e912 <ldexpf+0x42>
 800e8ec:	eeb0 0a48 	vmov.f32	s0, s16
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	f000 f813 	bl	800e91c <scalbnf>
 800e8f6:	eeb0 8a40 	vmov.f32	s16, s0
 800e8fa:	f000 f873 	bl	800e9e4 <finitef>
 800e8fe:	b120      	cbz	r0, 800e90a <ldexpf+0x3a>
 800e900:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e908:	d103      	bne.n	800e912 <ldexpf+0x42>
 800e90a:	f7ff ffa7 	bl	800e85c <__errno>
 800e90e:	2322      	movs	r3, #34	@ 0x22
 800e910:	6003      	str	r3, [r0, #0]
 800e912:	eeb0 0a48 	vmov.f32	s0, s16
 800e916:	ecbd 8b02 	vpop	{d8}
 800e91a:	bd10      	pop	{r4, pc}

0800e91c <scalbnf>:
 800e91c:	ee10 3a10 	vmov	r3, s0
 800e920:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e924:	d02a      	beq.n	800e97c <scalbnf+0x60>
 800e926:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e92a:	d302      	bcc.n	800e932 <scalbnf+0x16>
 800e92c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e930:	4770      	bx	lr
 800e932:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e936:	d122      	bne.n	800e97e <scalbnf+0x62>
 800e938:	4b23      	ldr	r3, [pc, #140]	@ (800e9c8 <scalbnf+0xac>)
 800e93a:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800e9cc <scalbnf+0xb0>
 800e93e:	4298      	cmp	r0, r3
 800e940:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e944:	db16      	blt.n	800e974 <scalbnf+0x58>
 800e946:	ee10 3a10 	vmov	r3, s0
 800e94a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e94e:	3a19      	subs	r2, #25
 800e950:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e954:	4288      	cmp	r0, r1
 800e956:	dd14      	ble.n	800e982 <scalbnf+0x66>
 800e958:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 800e9d0 <scalbnf+0xb4>
 800e95c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800e9d4 <scalbnf+0xb8>
 800e960:	ee10 3a10 	vmov	r3, s0
 800e964:	eeb0 7a67 	vmov.f32	s14, s15
 800e968:	2b00      	cmp	r3, #0
 800e96a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800e96e:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e972:	4770      	bx	lr
 800e974:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800e9d8 <scalbnf+0xbc>
 800e978:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e97c:	4770      	bx	lr
 800e97e:	0dd2      	lsrs	r2, r2, #23
 800e980:	e7e6      	b.n	800e950 <scalbnf+0x34>
 800e982:	4410      	add	r0, r2
 800e984:	28fe      	cmp	r0, #254	@ 0xfe
 800e986:	dce7      	bgt.n	800e958 <scalbnf+0x3c>
 800e988:	2800      	cmp	r0, #0
 800e98a:	dd06      	ble.n	800e99a <scalbnf+0x7e>
 800e98c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e990:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e994:	ee00 3a10 	vmov	s0, r3
 800e998:	4770      	bx	lr
 800e99a:	f110 0f16 	cmn.w	r0, #22
 800e99e:	da09      	bge.n	800e9b4 <scalbnf+0x98>
 800e9a0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e9d8 <scalbnf+0xbc>
 800e9a4:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800e9dc <scalbnf+0xc0>
 800e9a8:	ee10 3a10 	vmov	r3, s0
 800e9ac:	eeb0 7a67 	vmov.f32	s14, s15
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	e7da      	b.n	800e96a <scalbnf+0x4e>
 800e9b4:	3019      	adds	r0, #25
 800e9b6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e9ba:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e9be:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e9e0 <scalbnf+0xc4>
 800e9c2:	ee07 3a90 	vmov	s15, r3
 800e9c6:	e7d7      	b.n	800e978 <scalbnf+0x5c>
 800e9c8:	ffff3cb0 	.word	0xffff3cb0
 800e9cc:	4c000000 	.word	0x4c000000
 800e9d0:	7149f2ca 	.word	0x7149f2ca
 800e9d4:	f149f2ca 	.word	0xf149f2ca
 800e9d8:	0da24260 	.word	0x0da24260
 800e9dc:	8da24260 	.word	0x8da24260
 800e9e0:	33000000 	.word	0x33000000

0800e9e4 <finitef>:
 800e9e4:	ee10 3a10 	vmov	r3, s0
 800e9e8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e9ec:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e9f0:	bfac      	ite	ge
 800e9f2:	2000      	movge	r0, #0
 800e9f4:	2001      	movlt	r0, #1
 800e9f6:	4770      	bx	lr

0800e9f8 <_free_r>:
 800e9f8:	b538      	push	{r3, r4, r5, lr}
 800e9fa:	4605      	mov	r5, r0
 800e9fc:	2900      	cmp	r1, #0
 800e9fe:	d041      	beq.n	800ea84 <_free_r+0x8c>
 800ea00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea04:	1f0c      	subs	r4, r1, #4
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	bfb8      	it	lt
 800ea0a:	18e4      	addlt	r4, r4, r3
 800ea0c:	f7ff ff02 	bl	800e814 <__malloc_lock>
 800ea10:	4a1d      	ldr	r2, [pc, #116]	@ (800ea88 <_free_r+0x90>)
 800ea12:	6813      	ldr	r3, [r2, #0]
 800ea14:	b933      	cbnz	r3, 800ea24 <_free_r+0x2c>
 800ea16:	6063      	str	r3, [r4, #4]
 800ea18:	6014      	str	r4, [r2, #0]
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea20:	f7ff befe 	b.w	800e820 <__malloc_unlock>
 800ea24:	42a3      	cmp	r3, r4
 800ea26:	d908      	bls.n	800ea3a <_free_r+0x42>
 800ea28:	6820      	ldr	r0, [r4, #0]
 800ea2a:	1821      	adds	r1, r4, r0
 800ea2c:	428b      	cmp	r3, r1
 800ea2e:	bf01      	itttt	eq
 800ea30:	6819      	ldreq	r1, [r3, #0]
 800ea32:	685b      	ldreq	r3, [r3, #4]
 800ea34:	1809      	addeq	r1, r1, r0
 800ea36:	6021      	streq	r1, [r4, #0]
 800ea38:	e7ed      	b.n	800ea16 <_free_r+0x1e>
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	b10b      	cbz	r3, 800ea44 <_free_r+0x4c>
 800ea40:	42a3      	cmp	r3, r4
 800ea42:	d9fa      	bls.n	800ea3a <_free_r+0x42>
 800ea44:	6811      	ldr	r1, [r2, #0]
 800ea46:	1850      	adds	r0, r2, r1
 800ea48:	42a0      	cmp	r0, r4
 800ea4a:	d10b      	bne.n	800ea64 <_free_r+0x6c>
 800ea4c:	6820      	ldr	r0, [r4, #0]
 800ea4e:	4401      	add	r1, r0
 800ea50:	1850      	adds	r0, r2, r1
 800ea52:	4283      	cmp	r3, r0
 800ea54:	6011      	str	r1, [r2, #0]
 800ea56:	d1e0      	bne.n	800ea1a <_free_r+0x22>
 800ea58:	6818      	ldr	r0, [r3, #0]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	6053      	str	r3, [r2, #4]
 800ea5e:	4408      	add	r0, r1
 800ea60:	6010      	str	r0, [r2, #0]
 800ea62:	e7da      	b.n	800ea1a <_free_r+0x22>
 800ea64:	d902      	bls.n	800ea6c <_free_r+0x74>
 800ea66:	230c      	movs	r3, #12
 800ea68:	602b      	str	r3, [r5, #0]
 800ea6a:	e7d6      	b.n	800ea1a <_free_r+0x22>
 800ea6c:	6820      	ldr	r0, [r4, #0]
 800ea6e:	1821      	adds	r1, r4, r0
 800ea70:	428b      	cmp	r3, r1
 800ea72:	bf04      	itt	eq
 800ea74:	6819      	ldreq	r1, [r3, #0]
 800ea76:	685b      	ldreq	r3, [r3, #4]
 800ea78:	6063      	str	r3, [r4, #4]
 800ea7a:	bf04      	itt	eq
 800ea7c:	1809      	addeq	r1, r1, r0
 800ea7e:	6021      	streq	r1, [r4, #0]
 800ea80:	6054      	str	r4, [r2, #4]
 800ea82:	e7ca      	b.n	800ea1a <_free_r+0x22>
 800ea84:	bd38      	pop	{r3, r4, r5, pc}
 800ea86:	bf00      	nop
 800ea88:	20070450 	.word	0x20070450

0800ea8c <sinf_poly>:
 800ea8c:	07cb      	lsls	r3, r1, #31
 800ea8e:	d412      	bmi.n	800eab6 <sinf_poly+0x2a>
 800ea90:	ee21 5b00 	vmul.f64	d5, d1, d0
 800ea94:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800ea98:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800ea9c:	eea6 7b01 	vfma.f64	d7, d6, d1
 800eaa0:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800eaa4:	ee21 1b05 	vmul.f64	d1, d1, d5
 800eaa8:	eea6 0b05 	vfma.f64	d0, d6, d5
 800eaac:	eea7 0b01 	vfma.f64	d0, d7, d1
 800eab0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800eab4:	4770      	bx	lr
 800eab6:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800eaba:	ee21 5b01 	vmul.f64	d5, d1, d1
 800eabe:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800eac2:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800eac6:	eea1 7b06 	vfma.f64	d7, d1, d6
 800eaca:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800eace:	eea1 0b06 	vfma.f64	d0, d1, d6
 800ead2:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800ead6:	ee21 1b05 	vmul.f64	d1, d1, d5
 800eada:	eea5 0b06 	vfma.f64	d0, d5, d6
 800eade:	e7e5      	b.n	800eaac <sinf_poly+0x20>

0800eae0 <sinf>:
 800eae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eae2:	ee10 4a10 	vmov	r4, s0
 800eae6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800eaea:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800eaee:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800eaf2:	eef0 7a40 	vmov.f32	s15, s0
 800eaf6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800eafa:	d218      	bcs.n	800eb2e <sinf+0x4e>
 800eafc:	ee26 1b06 	vmul.f64	d1, d6, d6
 800eb00:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800eb04:	d20a      	bcs.n	800eb1c <sinf+0x3c>
 800eb06:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 800eb0a:	d103      	bne.n	800eb14 <sinf+0x34>
 800eb0c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800eb10:	ed8d 1a01 	vstr	s2, [sp, #4]
 800eb14:	eeb0 0a67 	vmov.f32	s0, s15
 800eb18:	b003      	add	sp, #12
 800eb1a:	bd30      	pop	{r4, r5, pc}
 800eb1c:	483a      	ldr	r0, [pc, #232]	@ (800ec08 <sinf+0x128>)
 800eb1e:	eeb0 0b46 	vmov.f64	d0, d6
 800eb22:	2100      	movs	r1, #0
 800eb24:	b003      	add	sp, #12
 800eb26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb2a:	f7ff bfaf 	b.w	800ea8c <sinf_poly>
 800eb2e:	f240 422e 	movw	r2, #1070	@ 0x42e
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d824      	bhi.n	800eb80 <sinf+0xa0>
 800eb36:	4b34      	ldr	r3, [pc, #208]	@ (800ec08 <sinf+0x128>)
 800eb38:	ed93 7b08 	vldr	d7, [r3, #32]
 800eb3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eb40:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800eb44:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800eb48:	ee17 1a90 	vmov	r1, s15
 800eb4c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800eb50:	1609      	asrs	r1, r1, #24
 800eb52:	ee07 1a90 	vmov	s15, r1
 800eb56:	f001 0203 	and.w	r2, r1, #3
 800eb5a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800eb5e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800eb62:	ed92 0b00 	vldr	d0, [r2]
 800eb66:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800eb6a:	f011 0f02 	tst.w	r1, #2
 800eb6e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800eb72:	bf08      	it	eq
 800eb74:	4618      	moveq	r0, r3
 800eb76:	ee26 1b06 	vmul.f64	d1, d6, d6
 800eb7a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800eb7e:	e7d1      	b.n	800eb24 <sinf+0x44>
 800eb80:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800eb84:	d237      	bcs.n	800ebf6 <sinf+0x116>
 800eb86:	4921      	ldr	r1, [pc, #132]	@ (800ec0c <sinf+0x12c>)
 800eb88:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800eb8c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800eb90:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800eb94:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800eb98:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800eb9c:	6a10      	ldr	r0, [r2, #32]
 800eb9e:	6912      	ldr	r2, [r2, #16]
 800eba0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800eba4:	40ab      	lsls	r3, r5
 800eba6:	fba0 5003 	umull	r5, r0, r0, r3
 800ebaa:	4359      	muls	r1, r3
 800ebac:	fbe3 0102 	umlal	r0, r1, r3, r2
 800ebb0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800ebb4:	0f9d      	lsrs	r5, r3, #30
 800ebb6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ebba:	1ac9      	subs	r1, r1, r3
 800ebbc:	f7f1 fcca 	bl	8000554 <__aeabi_l2d>
 800ebc0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800ebc4:	4b10      	ldr	r3, [pc, #64]	@ (800ec08 <sinf+0x128>)
 800ebc6:	f004 0203 	and.w	r2, r4, #3
 800ebca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ebce:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 800ec00 <sinf+0x120>
 800ebd2:	ed92 0b00 	vldr	d0, [r2]
 800ebd6:	ec41 0b17 	vmov	d7, r0, r1
 800ebda:	f014 0f02 	tst.w	r4, #2
 800ebde:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ebe2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800ebe6:	4629      	mov	r1, r5
 800ebe8:	bf08      	it	eq
 800ebea:	4618      	moveq	r0, r3
 800ebec:	ee27 1b07 	vmul.f64	d1, d7, d7
 800ebf0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ebf4:	e796      	b.n	800eb24 <sinf+0x44>
 800ebf6:	b003      	add	sp, #12
 800ebf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebfc:	f000 b816 	b.w	800ec2c <__math_invalidf>
 800ec00:	54442d18 	.word	0x54442d18
 800ec04:	3c1921fb 	.word	0x3c1921fb
 800ec08:	0800ef30 	.word	0x0800ef30
 800ec0c:	0800eed0 	.word	0x0800eed0

0800ec10 <with_errnof>:
 800ec10:	b510      	push	{r4, lr}
 800ec12:	ed2d 8b02 	vpush	{d8}
 800ec16:	eeb0 8a40 	vmov.f32	s16, s0
 800ec1a:	4604      	mov	r4, r0
 800ec1c:	f7ff fe1e 	bl	800e85c <__errno>
 800ec20:	eeb0 0a48 	vmov.f32	s0, s16
 800ec24:	ecbd 8b02 	vpop	{d8}
 800ec28:	6004      	str	r4, [r0, #0]
 800ec2a:	bd10      	pop	{r4, pc}

0800ec2c <__math_invalidf>:
 800ec2c:	eef0 7a40 	vmov.f32	s15, s0
 800ec30:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ec34:	eef4 7a67 	vcmp.f32	s15, s15
 800ec38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec3c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ec40:	d602      	bvs.n	800ec48 <__math_invalidf+0x1c>
 800ec42:	2021      	movs	r0, #33	@ 0x21
 800ec44:	f7ff bfe4 	b.w	800ec10 <with_errnof>
 800ec48:	4770      	bx	lr
	...

0800ec4c <_init>:
 800ec4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec4e:	bf00      	nop
 800ec50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec52:	bc08      	pop	{r3}
 800ec54:	469e      	mov	lr, r3
 800ec56:	4770      	bx	lr

0800ec58 <_fini>:
 800ec58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec5a:	bf00      	nop
 800ec5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec5e:	bc08      	pop	{r3}
 800ec60:	469e      	mov	lr, r3
 800ec62:	4770      	bx	lr
