
EDS_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9f4  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800ebf0  0800ebf0  0000fbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef98  0800ef98  000102a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef98  0800ef98  0000ff98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efa0  0800efa0  000102a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efa0  0800efa0  0000ffa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800efa4  0800efa4  0000ffa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800efa8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000168  0800f110  00010168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000208  0800f1b0  00010208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000702e8  200002a8  0800f250  000102a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20070590  0800f250  00010590  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000102a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024da6  00000000  00000000  000102d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005373  00000000  00000000  0003507c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c88  00000000  00000000  0003a3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015dc  00000000  00000000  0003c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e71a  00000000  00000000  0003d654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026d45  00000000  00000000  0006bd6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010e144  00000000  00000000  00092ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a0bf7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007c10  00000000  00000000  001a0c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004b  00000000  00000000  001a884c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200002a8 	.word	0x200002a8
 8000214:	00000000 	.word	0x00000000
 8000218:	0800ebd4 	.word	0x0800ebd4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200002ac 	.word	0x200002ac
 8000234:	0800ebd4 	.word	0x0800ebd4

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295
 80005c4:	f000 b96a 	b.w	800089c <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9d08      	ldr	r5, [sp, #32]
 80005e6:	460c      	mov	r4, r1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d14e      	bne.n	800068a <__udivmoddi4+0xaa>
 80005ec:	4694      	mov	ip, r2
 80005ee:	458c      	cmp	ip, r1
 80005f0:	4686      	mov	lr, r0
 80005f2:	fab2 f282 	clz	r2, r2
 80005f6:	d962      	bls.n	80006be <__udivmoddi4+0xde>
 80005f8:	b14a      	cbz	r2, 800060e <__udivmoddi4+0x2e>
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	4091      	lsls	r1, r2
 8000600:	fa20 f303 	lsr.w	r3, r0, r3
 8000604:	fa0c fc02 	lsl.w	ip, ip, r2
 8000608:	4319      	orrs	r1, r3
 800060a:	fa00 fe02 	lsl.w	lr, r0, r2
 800060e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000612:	fa1f f68c 	uxth.w	r6, ip
 8000616:	fbb1 f4f7 	udiv	r4, r1, r7
 800061a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061e:	fb07 1114 	mls	r1, r7, r4, r1
 8000622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000626:	fb04 f106 	mul.w	r1, r4, r6
 800062a:	4299      	cmp	r1, r3
 800062c:	d90a      	bls.n	8000644 <__udivmoddi4+0x64>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f104 30ff 	add.w	r0, r4, #4294967295
 8000636:	f080 8112 	bcs.w	800085e <__udivmoddi4+0x27e>
 800063a:	4299      	cmp	r1, r3
 800063c:	f240 810f 	bls.w	800085e <__udivmoddi4+0x27e>
 8000640:	3c02      	subs	r4, #2
 8000642:	4463      	add	r3, ip
 8000644:	1a59      	subs	r1, r3, r1
 8000646:	fa1f f38e 	uxth.w	r3, lr
 800064a:	fbb1 f0f7 	udiv	r0, r1, r7
 800064e:	fb07 1110 	mls	r1, r7, r0, r1
 8000652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000656:	fb00 f606 	mul.w	r6, r0, r6
 800065a:	429e      	cmp	r6, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x94>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 31ff 	add.w	r1, r0, #4294967295
 8000666:	f080 80fc 	bcs.w	8000862 <__udivmoddi4+0x282>
 800066a:	429e      	cmp	r6, r3
 800066c:	f240 80f9 	bls.w	8000862 <__udivmoddi4+0x282>
 8000670:	4463      	add	r3, ip
 8000672:	3802      	subs	r0, #2
 8000674:	1b9b      	subs	r3, r3, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	2100      	movs	r1, #0
 800067c:	b11d      	cbz	r5, 8000686 <__udivmoddi4+0xa6>
 800067e:	40d3      	lsrs	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	e9c5 3200 	strd	r3, r2, [r5]
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	428b      	cmp	r3, r1
 800068c:	d905      	bls.n	800069a <__udivmoddi4+0xba>
 800068e:	b10d      	cbz	r5, 8000694 <__udivmoddi4+0xb4>
 8000690:	e9c5 0100 	strd	r0, r1, [r5]
 8000694:	2100      	movs	r1, #0
 8000696:	4608      	mov	r0, r1
 8000698:	e7f5      	b.n	8000686 <__udivmoddi4+0xa6>
 800069a:	fab3 f183 	clz	r1, r3
 800069e:	2900      	cmp	r1, #0
 80006a0:	d146      	bne.n	8000730 <__udivmoddi4+0x150>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xcc>
 80006a6:	4290      	cmp	r0, r2
 80006a8:	f0c0 80f0 	bcc.w	800088c <__udivmoddi4+0x2ac>
 80006ac:	1a86      	subs	r6, r0, r2
 80006ae:	eb64 0303 	sbc.w	r3, r4, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d0e6      	beq.n	8000686 <__udivmoddi4+0xa6>
 80006b8:	e9c5 6300 	strd	r6, r3, [r5]
 80006bc:	e7e3      	b.n	8000686 <__udivmoddi4+0xa6>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f040 8090 	bne.w	80007e4 <__udivmoddi4+0x204>
 80006c4:	eba1 040c 	sub.w	r4, r1, ip
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa1f f78c 	uxth.w	r7, ip
 80006d0:	2101      	movs	r1, #1
 80006d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb08 4416 	mls	r4, r8, r6, r4
 80006de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e2:	fb07 f006 	mul.w	r0, r7, r6
 80006e6:	4298      	cmp	r0, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x11c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0x11a>
 80006f4:	4298      	cmp	r0, r3
 80006f6:	f200 80cd 	bhi.w	8000894 <__udivmoddi4+0x2b4>
 80006fa:	4626      	mov	r6, r4
 80006fc:	1a1c      	subs	r4, r3, r0
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb4 f0f8 	udiv	r0, r4, r8
 8000706:	fb08 4410 	mls	r4, r8, r0, r4
 800070a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070e:	fb00 f707 	mul.w	r7, r0, r7
 8000712:	429f      	cmp	r7, r3
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x148>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 34ff 	add.w	r4, r0, #4294967295
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x146>
 8000720:	429f      	cmp	r7, r3
 8000722:	f200 80b0 	bhi.w	8000886 <__udivmoddi4+0x2a6>
 8000726:	4620      	mov	r0, r4
 8000728:	1bdb      	subs	r3, r3, r7
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	e7a5      	b.n	800067c <__udivmoddi4+0x9c>
 8000730:	f1c1 0620 	rsb	r6, r1, #32
 8000734:	408b      	lsls	r3, r1
 8000736:	fa22 f706 	lsr.w	r7, r2, r6
 800073a:	431f      	orrs	r7, r3
 800073c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000740:	fa04 f301 	lsl.w	r3, r4, r1
 8000744:	ea43 030c 	orr.w	r3, r3, ip
 8000748:	40f4      	lsrs	r4, r6
 800074a:	fa00 f801 	lsl.w	r8, r0, r1
 800074e:	0c38      	lsrs	r0, r7, #16
 8000750:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000754:	fbb4 fef0 	udiv	lr, r4, r0
 8000758:	fa1f fc87 	uxth.w	ip, r7
 800075c:	fb00 441e 	mls	r4, r0, lr, r4
 8000760:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000764:	fb0e f90c 	mul.w	r9, lr, ip
 8000768:	45a1      	cmp	r9, r4
 800076a:	fa02 f201 	lsl.w	r2, r2, r1
 800076e:	d90a      	bls.n	8000786 <__udivmoddi4+0x1a6>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000776:	f080 8084 	bcs.w	8000882 <__udivmoddi4+0x2a2>
 800077a:	45a1      	cmp	r9, r4
 800077c:	f240 8081 	bls.w	8000882 <__udivmoddi4+0x2a2>
 8000780:	f1ae 0e02 	sub.w	lr, lr, #2
 8000784:	443c      	add	r4, r7
 8000786:	eba4 0409 	sub.w	r4, r4, r9
 800078a:	fa1f f983 	uxth.w	r9, r3
 800078e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000792:	fb00 4413 	mls	r4, r0, r3, r4
 8000796:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079a:	fb03 fc0c 	mul.w	ip, r3, ip
 800079e:	45a4      	cmp	ip, r4
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x1d2>
 80007a2:	193c      	adds	r4, r7, r4
 80007a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a8:	d267      	bcs.n	800087a <__udivmoddi4+0x29a>
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d965      	bls.n	800087a <__udivmoddi4+0x29a>
 80007ae:	3b02      	subs	r3, #2
 80007b0:	443c      	add	r4, r7
 80007b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007b6:	fba0 9302 	umull	r9, r3, r0, r2
 80007ba:	eba4 040c 	sub.w	r4, r4, ip
 80007be:	429c      	cmp	r4, r3
 80007c0:	46ce      	mov	lr, r9
 80007c2:	469c      	mov	ip, r3
 80007c4:	d351      	bcc.n	800086a <__udivmoddi4+0x28a>
 80007c6:	d04e      	beq.n	8000866 <__udivmoddi4+0x286>
 80007c8:	b155      	cbz	r5, 80007e0 <__udivmoddi4+0x200>
 80007ca:	ebb8 030e 	subs.w	r3, r8, lr
 80007ce:	eb64 040c 	sbc.w	r4, r4, ip
 80007d2:	fa04 f606 	lsl.w	r6, r4, r6
 80007d6:	40cb      	lsrs	r3, r1
 80007d8:	431e      	orrs	r6, r3
 80007da:	40cc      	lsrs	r4, r1
 80007dc:	e9c5 6400 	strd	r6, r4, [r5]
 80007e0:	2100      	movs	r1, #0
 80007e2:	e750      	b.n	8000686 <__udivmoddi4+0xa6>
 80007e4:	f1c2 0320 	rsb	r3, r2, #32
 80007e8:	fa20 f103 	lsr.w	r1, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	fa24 f303 	lsr.w	r3, r4, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	430c      	orrs	r4, r1
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000800:	fa1f f78c 	uxth.w	r7, ip
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3110 	mls	r1, r8, r0, r3
 800080c:	0c23      	lsrs	r3, r4, #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb00 f107 	mul.w	r1, r0, r7
 8000816:	4299      	cmp	r1, r3
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x24c>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000822:	d22c      	bcs.n	800087e <__udivmoddi4+0x29e>
 8000824:	4299      	cmp	r1, r3
 8000826:	d92a      	bls.n	800087e <__udivmoddi4+0x29e>
 8000828:	3802      	subs	r0, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f1f8 	udiv	r1, r3, r8
 8000834:	fb08 3311 	mls	r3, r8, r1, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb01 f307 	mul.w	r3, r1, r7
 8000840:	42a3      	cmp	r3, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x276>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f101 36ff 	add.w	r6, r1, #4294967295
 800084c:	d213      	bcs.n	8000876 <__udivmoddi4+0x296>
 800084e:	42a3      	cmp	r3, r4
 8000850:	d911      	bls.n	8000876 <__udivmoddi4+0x296>
 8000852:	3902      	subs	r1, #2
 8000854:	4464      	add	r4, ip
 8000856:	1ae4      	subs	r4, r4, r3
 8000858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800085c:	e739      	b.n	80006d2 <__udivmoddi4+0xf2>
 800085e:	4604      	mov	r4, r0
 8000860:	e6f0      	b.n	8000644 <__udivmoddi4+0x64>
 8000862:	4608      	mov	r0, r1
 8000864:	e706      	b.n	8000674 <__udivmoddi4+0x94>
 8000866:	45c8      	cmp	r8, r9
 8000868:	d2ae      	bcs.n	80007c8 <__udivmoddi4+0x1e8>
 800086a:	ebb9 0e02 	subs.w	lr, r9, r2
 800086e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000872:	3801      	subs	r0, #1
 8000874:	e7a8      	b.n	80007c8 <__udivmoddi4+0x1e8>
 8000876:	4631      	mov	r1, r6
 8000878:	e7ed      	b.n	8000856 <__udivmoddi4+0x276>
 800087a:	4603      	mov	r3, r0
 800087c:	e799      	b.n	80007b2 <__udivmoddi4+0x1d2>
 800087e:	4630      	mov	r0, r6
 8000880:	e7d4      	b.n	800082c <__udivmoddi4+0x24c>
 8000882:	46d6      	mov	lr, sl
 8000884:	e77f      	b.n	8000786 <__udivmoddi4+0x1a6>
 8000886:	4463      	add	r3, ip
 8000888:	3802      	subs	r0, #2
 800088a:	e74d      	b.n	8000728 <__udivmoddi4+0x148>
 800088c:	4606      	mov	r6, r0
 800088e:	4623      	mov	r3, r4
 8000890:	4608      	mov	r0, r1
 8000892:	e70f      	b.n	80006b4 <__udivmoddi4+0xd4>
 8000894:	3e02      	subs	r6, #2
 8000896:	4463      	add	r3, ip
 8000898:	e730      	b.n	80006fc <__udivmoddi4+0x11c>
 800089a:	bf00      	nop

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(void) = 0;

void bldc_interface_init(void(*func)(unsigned char *data, unsigned int len)) {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	send_func = func;
 80008a8:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <bldc_interface_init+0x1c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	2000098c 	.word	0x2000098c

080008c0 <bldc_interface_send_packet>:
 * The packet data.
 *
 * @param len
 * The data length.
 */
void bldc_interface_send_packet(unsigned char *data, unsigned int len) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	if (send_func) {
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <bldc_interface_send_packet+0x24>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d004      	beq.n	80008dc <bldc_interface_send_packet+0x1c>
		send_func(data, len);
 80008d2:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <bldc_interface_send_packet+0x24>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6839      	ldr	r1, [r7, #0]
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	4798      	blx	r3
	}
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000098c 	.word	0x2000098c

080008e8 <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	if (!len) {
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f001 8205 	beq.w	8001d04 <bldc_interface_process_packet+0x141c>
		return;
	}

	if (forward_func) {
 80008fa:	4bc1      	ldr	r3, [pc, #772]	@ (8000c00 <bldc_interface_process_packet+0x318>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d006      	beq.n	8000910 <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 8000902:	4bbf      	ldr	r3, [pc, #764]	@ (8000c00 <bldc_interface_process_packet+0x318>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6839      	ldr	r1, [r7, #0]
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	4798      	blx	r3
		return;
 800090c:	f001 ba13 	b.w	8001d36 <bldc_interface_process_packet+0x144e>
	}

	int32_t ind = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
	unsigned char id = data[0];
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	74fb      	strb	r3, [r7, #19]
	data++;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3301      	adds	r3, #1
 8000922:	607b      	str	r3, [r7, #4]
	len--;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	3b01      	subs	r3, #1
 8000928:	603b      	str	r3, [r7, #0]

	switch (id) {
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	2b21      	cmp	r3, #33	@ 0x21
 800092e:	f201 81eb 	bhi.w	8001d08 <bldc_interface_process_packet+0x1420>
 8000932:	a201      	add	r2, pc, #4	@ (adr r2, 8000938 <bldc_interface_process_packet+0x50>)
 8000934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000938:	080009c1 	.word	0x080009c1
 800093c:	08001d09 	.word	0x08001d09
 8000940:	08001d09 	.word	0x08001d09
 8000944:	08001d09 	.word	0x08001d09
 8000948:	08000a0b 	.word	0x08000a0b
 800094c:	08001d09 	.word	0x08001d09
 8000950:	08001d09 	.word	0x08001d09
 8000954:	08001d09 	.word	0x08001d09
 8000958:	08001d09 	.word	0x08001d09
 800095c:	08001d09 	.word	0x08001d09
 8000960:	08001d09 	.word	0x08001d09
 8000964:	08001d09 	.word	0x08001d09
 8000968:	08001d09 	.word	0x08001d09
 800096c:	08001ce5 	.word	0x08001ce5
 8000970:	08000c91 	.word	0x08000c91
 8000974:	08000c91 	.word	0x08000c91
 8000978:	08001cf5 	.word	0x08001cf5
 800097c:	0800153d 	.word	0x0800153d
 8000980:	0800153d 	.word	0x0800153d
 8000984:	08001d09 	.word	0x08001d09
 8000988:	08001d09 	.word	0x08001d09
 800098c:	08000c25 	.word	0x08000c25
 8000990:	08000c45 	.word	0x08000c45
 8000994:	08001d09 	.word	0x08001d09
 8000998:	08001b4d 	.word	0x08001b4d
 800099c:	08001d09 	.word	0x08001d09
 80009a0:	08001d09 	.word	0x08001d09
 80009a4:	08001d09 	.word	0x08001d09
 80009a8:	08001d09 	.word	0x08001d09
 80009ac:	08001d09 	.word	0x08001d09
 80009b0:	08001d09 	.word	0x08001d09
 80009b4:	08001bf5 	.word	0x08001bf5
 80009b8:	08001c51 	.word	0x08001c51
 80009bc:	08001cad 	.word	0x08001cad
	case COMM_FW_VERSION:
		if (len == 2) {
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d117      	bne.n	80009f6 <bldc_interface_process_packet+0x10e>
			ind = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	60fa      	str	r2, [r7, #12]
 80009d0:	461a      	mov	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b8a      	ldr	r3, [pc, #552]	@ (8000c04 <bldc_interface_process_packet+0x31c>)
 80009dc:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	60fa      	str	r2, [r7, #12]
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b86      	ldr	r3, [pc, #536]	@ (8000c08 <bldc_interface_process_packet+0x320>)
 80009f0:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 80009f2:	f001 b9a0 	b.w	8001d36 <bldc_interface_process_packet+0x144e>
			fw_major = -1;
 80009f6:	4b83      	ldr	r3, [pc, #524]	@ (8000c04 <bldc_interface_process_packet+0x31c>)
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 80009fe:	4b82      	ldr	r3, [pc, #520]	@ (8000c08 <bldc_interface_process_packet+0x320>)
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	601a      	str	r2, [r3, #0]
		break;
 8000a06:	f001 b996 	b.w	8001d36 <bldc_interface_process_packet+0x144e>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f001 fb2a 	bl	8002072 <buffer_get_float16>
 8000a1e:	eef0 7a40 	vmov.f32	s15, s0
 8000a22:	4b7a      	ldr	r3, [pc, #488]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a24:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f001 fb1d 	bl	8002072 <buffer_get_float16>
 8000a38:	eef0 7a40 	vmov.f32	s15, s0
 8000a3c:	4b73      	ldr	r3, [pc, #460]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a3e:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4619      	mov	r1, r3
 8000a48:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f001 fb2b 	bl	80020a8 <buffer_get_float32>
 8000a52:	eef0 7a40 	vmov.f32	s15, s0
 8000a56:	4b6d      	ldr	r3, [pc, #436]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a58:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4619      	mov	r1, r3
 8000a62:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f001 fb1e 	bl	80020a8 <buffer_get_float32>
 8000a6c:	eef0 7a40 	vmov.f32	s15, s0
 8000a70:	4b66      	ldr	r3, [pc, #408]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a72:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f001 fb11 	bl	80020a8 <buffer_get_float32>
 8000a86:	eef0 7a40 	vmov.f32	s15, s0
 8000a8a:	4b60      	ldr	r3, [pc, #384]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a8c:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f001 fb04 	bl	80020a8 <buffer_get_float32>
 8000aa0:	eef0 7a40 	vmov.f32	s15, s0
 8000aa4:	4b59      	ldr	r3, [pc, #356]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000aa6:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8000c14 <bldc_interface_process_packet+0x32c>
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f001 fadc 	bl	8002072 <buffer_get_float16>
 8000aba:	eef0 7a40 	vmov.f32	s15, s0
 8000abe:	4b53      	ldr	r3, [pc, #332]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000ac0:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4619      	mov	r1, r3
 8000aca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f001 faea 	bl	80020a8 <buffer_get_float32>
 8000ad4:	eef0 7a40 	vmov.f32	s15, s0
 8000ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000ada:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f001 fac2 	bl	8002072 <buffer_get_float16>
 8000aee:	eef0 7a40 	vmov.f32	s15, s0
 8000af2:	4b46      	ldr	r3, [pc, #280]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000af4:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f001 fad0 	bl	80020a8 <buffer_get_float32>
 8000b08:	eef0 7a40 	vmov.f32	s15, s0
 8000b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b0e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f001 fac3 	bl	80020a8 <buffer_get_float32>
 8000b22:	eef0 7a40 	vmov.f32	s15, s0
 8000b26:	4b39      	ldr	r3, [pc, #228]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b28:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f001 fab6 	bl	80020a8 <buffer_get_float32>
 8000b3c:	eef0 7a40 	vmov.f32	s15, s0
 8000b40:	4b32      	ldr	r3, [pc, #200]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b42:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f001 faa9 	bl	80020a8 <buffer_get_float32>
 8000b56:	eef0 7a40 	vmov.f32	s15, s0
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b5c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f001 fa23 	bl	8001fb2 <buffer_get_int32>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a27      	ldr	r2, [pc, #156]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b70:	6353      	str	r3, [r2, #52]	@ 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4619      	mov	r1, r3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f001 fa1a 	bl	8001fb2 <buffer_get_int32>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a22      	ldr	r2, [pc, #136]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b82:	6393      	str	r3, [r2, #56]	@ 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60fa      	str	r2, [r7, #12]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		if (ind < (int)len) {
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	da0d      	bge.n	8000bbc <bldc_interface_process_packet+0x2d4>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8000c1c <bldc_interface_process_packet+0x334>
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f001 fa7c 	bl	80020a8 <buffer_get_float32>
 8000bb0:	eef0 7a40 	vmov.f32	s15, s0
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bb6:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
 8000bba:	e003      	b.n	8000bc4 <bldc_interface_process_packet+0x2dc>
		} else {
			values.pid_pos = 0.0;
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		if (ind < (int)len) {
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	da0a      	bge.n	8000be2 <bldc_interface_process_packet+0x2fa>
			values.vesc_id = data[ind++];
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60fa      	str	r2, [r7, #12]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000be0:	e003      	b.n	8000bea <bldc_interface_process_packet+0x302>
		} else {
			values.vesc_id = 255;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000be4:	22ff      	movs	r2, #255	@ 0xff
 8000be6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		}

		if (rx_value_func) {
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <bldc_interface_process_packet+0x338>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f001 808c 	beq.w	8001d0c <bldc_interface_process_packet+0x1424>
			rx_value_func(&values);
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <bldc_interface_process_packet+0x338>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bfa:	4798      	blx	r3
		}
		break;
 8000bfc:	f001 b886 	b.w	8001d0c <bldc_interface_process_packet+0x1424>
 8000c00:	20000990 	.word	0x20000990
 8000c04:	2000070c 	.word	0x2000070c
 8000c08:	20000710 	.word	0x20000710
 8000c0c:	200006c4 	.word	0x200006c4
 8000c10:	42c80000 	.word	0x42c80000
 8000c14:	447a0000 	.word	0x447a0000
 8000c18:	461c4000 	.word	0x461c4000
 8000c1c:	49742400 	.word	0x49742400
 8000c20:	20000994 	.word	0x20000994

	case COMM_PRINT:
		if (rx_printf_func) {
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <bldc_interface_process_packet+0x398>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f001 8071 	beq.w	8001d10 <bldc_interface_process_packet+0x1428>
			data[len] = '\0';
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <bldc_interface_process_packet+0x398>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	4798      	blx	r3
		}
		break;
 8000c40:	f001 b866 	b.w	8001d10 <bldc_interface_process_packet+0x1428>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000c84 <bldc_interface_process_packet+0x39c>
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f001 fa28 	bl	80020a8 <buffer_get_float32>
 8000c58:	eef0 7a40 	vmov.f32	s15, s0
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <bldc_interface_process_packet+0x3a0>)
 8000c5e:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <bldc_interface_process_packet+0x3a4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f001 8054 	beq.w	8001d14 <bldc_interface_process_packet+0x142c>
			rx_rotor_pos_func(rotor_pos);
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <bldc_interface_process_packet+0x3a4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <bldc_interface_process_packet+0x3a0>)
 8000c72:	edd2 7a00 	vldr	s15, [r2]
 8000c76:	eeb0 0a67 	vmov.f32	s0, s15
 8000c7a:	4798      	blx	r3
		}
		break;
 8000c7c:	f001 b84a 	b.w	8001d14 <bldc_interface_process_packet+0x142c>
 8000c80:	20000998 	.word	0x20000998
 8000c84:	47c35000 	.word	0x47c35000
 8000c88:	20000714 	.word	0x20000714
 8000c8c:	2000099c 	.word	0x2000099c
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
		mcconf.pwm_mode = data[ind++];
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60fa      	str	r2, [r7, #12]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781a      	ldrb	r2, [r3, #0]
 8000ca2:	4bc7      	ldr	r3, [pc, #796]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ca4:	701a      	strb	r2, [r3, #0]
		mcconf.comm_mode = data[ind++];
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	60fa      	str	r2, [r7, #12]
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4bc2      	ldr	r3, [pc, #776]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cb6:	705a      	strb	r2, [r3, #1]
		mcconf.motor_type = data[ind++];
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60fa      	str	r2, [r7, #12]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	4bbe      	ldr	r3, [pc, #760]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cc8:	709a      	strb	r2, [r3, #2]
		mcconf.sensor_mode = data[ind++];
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	60fa      	str	r2, [r7, #12]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	4bb9      	ldr	r3, [pc, #740]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cda:	70da      	strb	r2, [r3, #3]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f001 f9fc 	bl	80020e0 <buffer_get_float32_auto>
 8000ce8:	eef0 7a40 	vmov.f32	s15, s0
 8000cec:	4bb4      	ldr	r3, [pc, #720]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cee:	edc3 7a01 	vstr	s15, [r3, #4]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f001 f9f1 	bl	80020e0 <buffer_get_float32_auto>
 8000cfe:	eef0 7a40 	vmov.f32	s15, s0
 8000d02:	4baf      	ldr	r3, [pc, #700]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d04:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f001 f9e6 	bl	80020e0 <buffer_get_float32_auto>
 8000d14:	eef0 7a40 	vmov.f32	s15, s0
 8000d18:	4ba9      	ldr	r3, [pc, #676]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d1a:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f001 f9db 	bl	80020e0 <buffer_get_float32_auto>
 8000d2a:	eef0 7a40 	vmov.f32	s15, s0
 8000d2e:	4ba4      	ldr	r3, [pc, #656]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d30:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f001 f9d0 	bl	80020e0 <buffer_get_float32_auto>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
 8000d44:	4b9e      	ldr	r3, [pc, #632]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d46:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f001 f9c5 	bl	80020e0 <buffer_get_float32_auto>
 8000d56:	eef0 7a40 	vmov.f32	s15, s0
 8000d5a:	4b99      	ldr	r3, [pc, #612]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d5c:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f001 f9ba 	bl	80020e0 <buffer_get_float32_auto>
 8000d6c:	eef0 7a40 	vmov.f32	s15, s0
 8000d70:	4b93      	ldr	r3, [pc, #588]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d72:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f001 f9af 	bl	80020e0 <buffer_get_float32_auto>
 8000d82:	eef0 7a40 	vmov.f32	s15, s0
 8000d86:	4b8e      	ldr	r3, [pc, #568]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d88:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f001 f9a4 	bl	80020e0 <buffer_get_float32_auto>
 8000d98:	eef0 7a40 	vmov.f32	s15, s0
 8000d9c:	4b88      	ldr	r3, [pc, #544]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d9e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f001 f999 	bl	80020e0 <buffer_get_float32_auto>
 8000dae:	eef0 7a40 	vmov.f32	s15, s0
 8000db2:	4b83      	ldr	r3, [pc, #524]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000db4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f001 f98e 	bl	80020e0 <buffer_get_float32_auto>
 8000dc4:	eef0 7a40 	vmov.f32	s15, s0
 8000dc8:	4b7d      	ldr	r3, [pc, #500]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000dca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f001 f983 	bl	80020e0 <buffer_get_float32_auto>
 8000dda:	eef0 7a40 	vmov.f32	s15, s0
 8000dde:	4b78      	ldr	r3, [pc, #480]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000de0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4619      	mov	r1, r3
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f001 f978 	bl	80020e0 <buffer_get_float32_auto>
 8000df0:	eef0 7a40 	vmov.f32	s15, s0
 8000df4:	4b72      	ldr	r3, [pc, #456]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000df6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f001 f96d 	bl	80020e0 <buffer_get_float32_auto>
 8000e06:	eef0 7a40 	vmov.f32	s15, s0
 8000e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e0c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		mcconf.l_slow_abs_current = data[ind++];
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	60fa      	str	r2, [r7, #12]
 8000e16:	461a      	mov	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b65      	ldr	r3, [pc, #404]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f001 f953 	bl	80020e0 <buffer_get_float32_auto>
 8000e3a:	eef0 7a40 	vmov.f32	s15, s0
 8000e3e:	4b60      	ldr	r3, [pc, #384]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e40:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4619      	mov	r1, r3
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f001 f948 	bl	80020e0 <buffer_get_float32_auto>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
 8000e54:	4b5a      	ldr	r3, [pc, #360]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e56:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f001 f93d 	bl	80020e0 <buffer_get_float32_auto>
 8000e66:	eef0 7a40 	vmov.f32	s15, s0
 8000e6a:	4b55      	ldr	r3, [pc, #340]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e6c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f001 f932 	bl	80020e0 <buffer_get_float32_auto>
 8000e7c:	eef0 7a40 	vmov.f32	s15, s0
 8000e80:	4b4f      	ldr	r3, [pc, #316]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e82:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f001 f927 	bl	80020e0 <buffer_get_float32_auto>
 8000e92:	eef0 7a40 	vmov.f32	s15, s0
 8000e96:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e98:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f001 f91c 	bl	80020e0 <buffer_get_float32_auto>
 8000ea8:	eef0 7a40 	vmov.f32	s15, s0
 8000eac:	4b44      	ldr	r3, [pc, #272]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000eae:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f001 f911 	bl	80020e0 <buffer_get_float32_auto>
 8000ebe:	eef0 7a40 	vmov.f32	s15, s0
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ec4:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f001 f906 	bl	80020e0 <buffer_get_float32_auto>
 8000ed4:	eef0 7a40 	vmov.f32	s15, s0
 8000ed8:	4b39      	ldr	r3, [pc, #228]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000eda:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 f8fb 	bl	80020e0 <buffer_get_float32_auto>
 8000eea:	eef0 7a40 	vmov.f32	s15, s0
 8000eee:	4b34      	ldr	r3, [pc, #208]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ef0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

		mcconf.lo_current_max = mcconf.l_current_max;
 8000ef4:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4a31      	ldr	r2, [pc, #196]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000efa:	6653      	str	r3, [r2, #100]	@ 0x64
		mcconf.lo_current_min = mcconf.l_current_min;
 8000efc:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f02:	6693      	str	r3, [r2, #104]	@ 0x68
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 8000f04:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f0a:	66d3      	str	r3, [r2, #108]	@ 0x6c
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f12:	6713      	str	r3, [r2, #112]	@ 0x70
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 8000f14:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4a29      	ldr	r2, [pc, #164]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f1a:	6753      	str	r3, [r2, #116]	@ 0x74
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4a27      	ldr	r2, [pc, #156]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f22:	6793      	str	r3, [r2, #120]	@ 0x78

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 f8d8 	bl	80020e0 <buffer_get_float32_auto>
 8000f30:	eef0 7a40 	vmov.f32	s15, s0
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f36:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f001 f8cd 	bl	80020e0 <buffer_get_float32_auto>
 8000f46:	eef0 7a40 	vmov.f32	s15, s0
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f4c:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f001 f8c2 	bl	80020e0 <buffer_get_float32_auto>
 8000f5c:	eef0 7a40 	vmov.f32	s15, s0
 8000f60:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f62:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f001 f8b7 	bl	80020e0 <buffer_get_float32_auto>
 8000f72:	eef0 7a40 	vmov.f32	s15, s0
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f78:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f001 f8ac 	bl	80020e0 <buffer_get_float32_auto>
 8000f88:	eef0 7a40 	vmov.f32	s15, s0
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f8e:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f001 f8a1 	bl	80020e0 <buffer_get_float32_auto>
 8000f9e:	eef0 7a40 	vmov.f32	s15, s0
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000fa4:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4619      	mov	r1, r3
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f001 f896 	bl	80020e0 <buffer_get_float32_auto>
 8000fb4:	eef0 7a40 	vmov.f32	s15, s0
 8000fb8:	4b01      	ldr	r3, [pc, #4]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000fba:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
 8000fbe:	e001      	b.n	8000fc4 <bldc_interface_process_packet+0x6dc>
 8000fc0:	20000718 	.word	0x20000718

		memcpy(mcconf.hall_table, data + ind, 8);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	441a      	add	r2, r3
 8000fcc:	4bc9      	ldr	r3, [pc, #804]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8000fce:	3398      	adds	r3, #152	@ 0x98
 8000fd0:	6810      	ldr	r0, [r2, #0]
 8000fd2:	6851      	ldr	r1, [r2, #4]
 8000fd4:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3308      	adds	r3, #8
 8000fda:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f001 f87c 	bl	80020e0 <buffer_get_float32_auto>
 8000fe8:	eef0 7a40 	vmov.f32	s15, s0
 8000fec:	4bc1      	ldr	r3, [pc, #772]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8000fee:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f001 f871 	bl	80020e0 <buffer_get_float32_auto>
 8000ffe:	eef0 7a40 	vmov.f32	s15, s0
 8001002:	4bbc      	ldr	r3, [pc, #752]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001004:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f001 f866 	bl	80020e0 <buffer_get_float32_auto>
 8001014:	eef0 7a40 	vmov.f32	s15, s0
 8001018:	4bb6      	ldr	r3, [pc, #728]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800101a:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4619      	mov	r1, r3
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f001 f85b 	bl	80020e0 <buffer_get_float32_auto>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	4bb1      	ldr	r3, [pc, #708]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001030:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f001 f850 	bl	80020e0 <buffer_get_float32_auto>
 8001040:	eef0 7a40 	vmov.f32	s15, s0
 8001044:	4bab      	ldr	r3, [pc, #684]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001046:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
		mcconf.foc_encoder_inverted = data[ind++];
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	60fa      	str	r2, [r7, #12]
 8001050:	461a      	mov	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf14      	ite	ne
 800105c:	2301      	movne	r3, #1
 800105e:	2300      	moveq	r3, #0
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4ba4      	ldr	r3, [pc, #656]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001064:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f001 f836 	bl	80020e0 <buffer_get_float32_auto>
 8001074:	eef0 7a40 	vmov.f32	s15, s0
 8001078:	4b9e      	ldr	r3, [pc, #632]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800107a:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4619      	mov	r1, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f001 f82b 	bl	80020e0 <buffer_get_float32_auto>
 800108a:	eef0 7a40 	vmov.f32	s15, s0
 800108e:	4b99      	ldr	r3, [pc, #612]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001090:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		mcconf.foc_sensor_mode = data[ind++];
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	60fa      	str	r2, [r7, #12]
 800109a:	461a      	mov	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	4b94      	ldr	r3, [pc, #592]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010a4:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f001 f816 	bl	80020e0 <buffer_get_float32_auto>
 80010b4:	eef0 7a40 	vmov.f32	s15, s0
 80010b8:	4b8e      	ldr	r3, [pc, #568]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010ba:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f001 f80b 	bl	80020e0 <buffer_get_float32_auto>
 80010ca:	eef0 7a40 	vmov.f32	s15, s0
 80010ce:	4b89      	ldr	r3, [pc, #548]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010d0:	edc3 7a36 	vstr	s15, [r3, #216]	@ 0xd8
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f001 f800 	bl	80020e0 <buffer_get_float32_auto>
 80010e0:	eef0 7a40 	vmov.f32	s15, s0
 80010e4:	4b83      	ldr	r3, [pc, #524]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010e6:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fff5 	bl	80020e0 <buffer_get_float32_auto>
 80010f6:	eef0 7a40 	vmov.f32	s15, s0
 80010fa:	4b7e      	ldr	r3, [pc, #504]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010fc:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 ffea 	bl	80020e0 <buffer_get_float32_auto>
 800110c:	eef0 7a40 	vmov.f32	s15, s0
 8001110:	4b78      	ldr	r3, [pc, #480]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001112:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 ffdf 	bl	80020e0 <buffer_get_float32_auto>
 8001122:	eef0 7a40 	vmov.f32	s15, s0
 8001126:	4b73      	ldr	r3, [pc, #460]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001128:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4619      	mov	r1, r3
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 ffd4 	bl	80020e0 <buffer_get_float32_auto>
 8001138:	eef0 7a40 	vmov.f32	s15, s0
 800113c:	4b6d      	ldr	r3, [pc, #436]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800113e:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	4619      	mov	r1, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 ffc9 	bl	80020e0 <buffer_get_float32_auto>
 800114e:	eef0 7a40 	vmov.f32	s15, s0
 8001152:	4b68      	ldr	r3, [pc, #416]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001154:	edc3 7a37 	vstr	s15, [r3, #220]	@ 0xdc
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 ffbe 	bl	80020e0 <buffer_get_float32_auto>
 8001164:	eef0 7a40 	vmov.f32	s15, s0
 8001168:	4b62      	ldr	r3, [pc, #392]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800116a:	edc3 7a38 	vstr	s15, [r3, #224]	@ 0xe0
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4619      	mov	r1, r3
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 ffb3 	bl	80020e0 <buffer_get_float32_auto>
 800117a:	eef0 7a40 	vmov.f32	s15, s0
 800117e:	4b5d      	ldr	r3, [pc, #372]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001180:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 ffa8 	bl	80020e0 <buffer_get_float32_auto>
 8001190:	eef0 7a40 	vmov.f32	s15, s0
 8001194:	4b57      	ldr	r3, [pc, #348]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001196:	edc3 7a3a 	vstr	s15, [r3, #232]	@ 0xe8
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 ff9d 	bl	80020e0 <buffer_get_float32_auto>
 80011a6:	eef0 7a40 	vmov.f32	s15, s0
 80011aa:	4b52      	ldr	r3, [pc, #328]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011ac:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 ff92 	bl	80020e0 <buffer_get_float32_auto>
 80011bc:	eef0 7a40 	vmov.f32	s15, s0
 80011c0:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011c2:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 ff87 	bl	80020e0 <buffer_get_float32_auto>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
 80011d6:	4b47      	ldr	r3, [pc, #284]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011d8:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	441a      	add	r2, r3
 80011e4:	4b43      	ldr	r3, [pc, #268]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011e6:	33f9      	adds	r3, #249	@ 0xf9
 80011e8:	6811      	ldr	r1, [r2, #0]
 80011ea:	6852      	ldr	r2, [r2, #4]
 80011ec:	6019      	str	r1, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
		ind += 8;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3308      	adds	r3, #8
 80011f4:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 ff6f 	bl	80020e0 <buffer_get_float32_auto>
 8001202:	eef0 7a40 	vmov.f32	s15, s0
 8001206:	4b3b      	ldr	r3, [pc, #236]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001208:	edc3 7a41 	vstr	s15, [r3, #260]	@ 0x104
		mcconf.foc_sample_v0_v7 = data[ind++];
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	60fa      	str	r2, [r7, #12]
 8001212:	461a      	mov	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf14      	ite	ne
 800121e:	2301      	movne	r3, #1
 8001220:	2300      	moveq	r3, #0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b33      	ldr	r3, [pc, #204]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001226:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
		mcconf.foc_sample_high_current = data[ind++];
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	60fa      	str	r2, [r7, #12]
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001244:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 ff46 	bl	80020e0 <buffer_get_float32_auto>
 8001254:	eef0 7a40 	vmov.f32	s15, s0
 8001258:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800125a:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
		mcconf.foc_temp_comp = data[ind++];
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	60fa      	str	r2, [r7, #12]
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf14      	ite	ne
 8001270:	2301      	movne	r3, #1
 8001272:	2300      	moveq	r3, #0
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001278:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 ff2c 	bl	80020e0 <buffer_get_float32_auto>
 8001288:	eef0 7a40 	vmov.f32	s15, s0
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800128e:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 ff21 	bl	80020e0 <buffer_get_float32_auto>
 800129e:	eef0 7a40 	vmov.f32	s15, s0
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012a4:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 ff16 	bl	80020e0 <buffer_get_float32_auto>
 80012b4:	eef0 7a40 	vmov.f32	s15, s0
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012ba:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 ff0b 	bl	80020e0 <buffer_get_float32_auto>
 80012ca:	eef0 7a40 	vmov.f32	s15, s0
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012d0:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 ff00 	bl	80020e0 <buffer_get_float32_auto>
 80012e0:	eef0 7a40 	vmov.f32	s15, s0
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012e6:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	e002      	b.n	80012f8 <bldc_interface_process_packet+0xa10>
 80012f2:	bf00      	nop
 80012f4:	20000718 	.word	0x20000718
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 fef1 	bl	80020e0 <buffer_get_float32_auto>
 80012fe:	eef0 7a40 	vmov.f32	s15, s0
 8001302:	4b8c      	ldr	r3, [pc, #560]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001304:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 fee6 	bl	80020e0 <buffer_get_float32_auto>
 8001314:	eef0 7a40 	vmov.f32	s15, s0
 8001318:	4b86      	ldr	r3, [pc, #536]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800131a:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
		mcconf.s_pid_allow_braking = data[ind++];
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	60fa      	str	r2, [r7, #12]
 8001324:	461a      	mov	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b7f      	ldr	r3, [pc, #508]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001338:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	4619      	mov	r1, r3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fecc 	bl	80020e0 <buffer_get_float32_auto>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	4b79      	ldr	r3, [pc, #484]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800134e:	edc3 7a4d 	vstr	s15, [r3, #308]	@ 0x134
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 fec1 	bl	80020e0 <buffer_get_float32_auto>
 800135e:	eef0 7a40 	vmov.f32	s15, s0
 8001362:	4b74      	ldr	r3, [pc, #464]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001364:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 feb6 	bl	80020e0 <buffer_get_float32_auto>
 8001374:	eef0 7a40 	vmov.f32	s15, s0
 8001378:	4b6e      	ldr	r3, [pc, #440]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800137a:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4619      	mov	r1, r3
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 feab 	bl	80020e0 <buffer_get_float32_auto>
 800138a:	eef0 7a40 	vmov.f32	s15, s0
 800138e:	4b69      	ldr	r3, [pc, #420]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001390:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fea0 	bl	80020e0 <buffer_get_float32_auto>
 80013a0:	eef0 7a40 	vmov.f32	s15, s0
 80013a4:	4b63      	ldr	r3, [pc, #396]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013a6:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 fe95 	bl	80020e0 <buffer_get_float32_auto>
 80013b6:	eef0 7a40 	vmov.f32	s15, s0
 80013ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013bc:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 fe8a 	bl	80020e0 <buffer_get_float32_auto>
 80013cc:	eef0 7a40 	vmov.f32	s15, s0
 80013d0:	4b58      	ldr	r3, [pc, #352]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013d2:	edc3 7a53 	vstr	s15, [r3, #332]	@ 0x14c
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	4619      	mov	r1, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fe7f 	bl	80020e0 <buffer_get_float32_auto>
 80013e2:	eef0 7a40 	vmov.f32	s15, s0
 80013e6:	4b53      	ldr	r3, [pc, #332]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013e8:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fe74 	bl	80020e0 <buffer_get_float32_auto>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013fe:	edc3 7a55 	vstr	s15, [r3, #340]	@ 0x154

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 fdd2 	bl	8001fb2 <buffer_get_int32>
 800140e:	4603      	mov	r3, r0
 8001410:	4a48      	ldr	r2, [pc, #288]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001412:	f8c2 3158 	str.w	r3, [r2, #344]	@ 0x158
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	4619      	mov	r1, r3
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fe5f 	bl	80020e0 <buffer_get_float32_auto>
 8001422:	eef0 7a40 	vmov.f32	s15, s0
 8001426:	4b43      	ldr	r3, [pc, #268]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001428:	edc3 7a57 	vstr	s15, [r3, #348]	@ 0x15c
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4619      	mov	r1, r3
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fe54 	bl	80020e0 <buffer_get_float32_auto>
 8001438:	eef0 7a40 	vmov.f32	s15, s0
 800143c:	4b3d      	ldr	r3, [pc, #244]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800143e:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	4619      	mov	r1, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fde2 	bl	8002012 <buffer_get_uint32>
 800144e:	4603      	mov	r3, r0
 8001450:	4a38      	ldr	r2, [pc, #224]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001452:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
		mcconf.m_sensor_port_mode = data[ind++];
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	60fa      	str	r2, [r7, #12]
 800145c:	461a      	mov	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001466:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
		mcconf.m_invert_direction = data[ind++];
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	60fa      	str	r2, [r7, #12]
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf14      	ite	ne
 800147c:	2301      	movne	r3, #1
 800147e:	2300      	moveq	r3, #0
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001484:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
		mcconf.m_drv8301_oc_mode = data[ind++];
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60fa      	str	r2, [r7, #12]
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001498:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
		mcconf.m_drv8301_oc_adj = data[ind++];
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60fa      	str	r2, [r7, #12]
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014ae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4619      	mov	r1, r3
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fe11 	bl	80020e0 <buffer_get_float32_auto>
 80014be:	eef0 7a40 	vmov.f32	s15, s0
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014c4:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	4619      	mov	r1, r3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fe06 	bl	80020e0 <buffer_get_float32_auto>
 80014d4:	eef0 7a40 	vmov.f32	s15, s0
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014da:	edc3 7a5d 	vstr	s15, [r3, #372]	@ 0x174
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fdfb 	bl	80020e0 <buffer_get_float32_auto>
 80014ea:	eef0 7a40 	vmov.f32	s15, s0
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014f0:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fdf0 	bl	80020e0 <buffer_get_float32_auto>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001506:	edc3 7a5f 	vstr	s15, [r3, #380]	@ 0x17c
		mcconf.m_out_aux_mode = data[ind++];
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	60fa      	str	r2, [r7, #12]
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800151a:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180

		if (rx_mcconf_func) {
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <bldc_interface_process_packet+0xc50>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 83f8 	beq.w	8001d18 <bldc_interface_process_packet+0x1430>
			rx_mcconf_func(&mcconf);
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <bldc_interface_process_packet+0xc50>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4801      	ldr	r0, [pc, #4]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800152e:	4798      	blx	r3
		}
		break;
 8001530:	e3f2      	b.n	8001d18 <bldc_interface_process_packet+0x1430>
 8001532:	bf00      	nop
 8001534:	20000718 	.word	0x20000718
 8001538:	200009a0 	.word	0x200009a0

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
		appconf.controller_id = data[ind++];
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60fa      	str	r2, [r7, #12]
 8001546:	461a      	mov	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	4bba      	ldr	r3, [pc, #744]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001550:	701a      	strb	r2, [r3, #0]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4619      	mov	r1, r3
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fd5a 	bl	8002012 <buffer_get_uint32>
 800155e:	4603      	mov	r3, r0
 8001560:	4ab5      	ldr	r2, [pc, #724]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001562:	6053      	str	r3, [r2, #4]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fdb8 	bl	80020e0 <buffer_get_float32_auto>
 8001570:	eef0 7a40 	vmov.f32	s15, s0
 8001574:	4bb0      	ldr	r3, [pc, #704]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001576:	edc3 7a02 	vstr	s15, [r3, #8]
		appconf.send_can_status = data[ind++];
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	60fa      	str	r2, [r7, #12]
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf14      	ite	ne
 800158c:	2301      	movne	r3, #1
 800158e:	2300      	moveq	r3, #0
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4ba9      	ldr	r3, [pc, #676]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001594:	731a      	strb	r2, [r3, #12]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4619      	mov	r1, r3
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fce5 	bl	8001f6c <buffer_get_uint16>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4ba4      	ldr	r3, [pc, #656]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015a8:	611a      	str	r2, [r3, #16]
		appconf.can_baud_rate = data[ind++];
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	60fa      	str	r2, [r7, #12]
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b9f      	ldr	r3, [pc, #636]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015ba:	751a      	strb	r2, [r3, #20]

		appconf.app_to_use = data[ind++];
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60fa      	str	r2, [r7, #12]
 80015c2:	461a      	mov	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	4b9b      	ldr	r3, [pc, #620]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015cc:	755a      	strb	r2, [r3, #21]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	60fa      	str	r2, [r7, #12]
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	4b96      	ldr	r3, [pc, #600]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015de:	761a      	strb	r2, [r3, #24]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fd7a 	bl	80020e0 <buffer_get_float32_auto>
 80015ec:	eef0 7a40 	vmov.f32	s15, s0
 80015f0:	4b91      	ldr	r3, [pc, #580]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015f2:	edc3 7a07 	vstr	s15, [r3, #28]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4619      	mov	r1, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fd6f 	bl	80020e0 <buffer_get_float32_auto>
 8001602:	eef0 7a40 	vmov.f32	s15, s0
 8001606:	4b8c      	ldr	r3, [pc, #560]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001608:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 fd64 	bl	80020e0 <buffer_get_float32_auto>
 8001618:	eef0 7a40 	vmov.f32	s15, s0
 800161c:	4b86      	ldr	r3, [pc, #536]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800161e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fd59 	bl	80020e0 <buffer_get_float32_auto>
 800162e:	eef0 7a40 	vmov.f32	s15, s0
 8001632:	4b81      	ldr	r3, [pc, #516]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001634:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fd4e 	bl	80020e0 <buffer_get_float32_auto>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
 8001648:	4b7b      	ldr	r3, [pc, #492]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800164a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		appconf.app_ppm_conf.median_filter = data[ind++];
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	60fa      	str	r2, [r7, #12]
 8001654:	461a      	mov	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b74      	ldr	r3, [pc, #464]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		appconf.app_ppm_conf.safe_start = data[ind++];
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60fa      	str	r2, [r7, #12]
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf14      	ite	ne
 800167e:	2301      	movne	r3, #1
 8001680:	2300      	moveq	r3, #0
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b6c      	ldr	r3, [pc, #432]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001686:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4619      	mov	r1, r3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fd25 	bl	80020e0 <buffer_get_float32_auto>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
 800169a:	4b67      	ldr	r3, [pc, #412]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800169c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fd1a 	bl	80020e0 <buffer_get_float32_auto>
 80016ac:	eef0 7a40 	vmov.f32	s15, s0
 80016b0:	4b61      	ldr	r3, [pc, #388]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016b2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60fa      	str	r2, [r7, #12]
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fd05 	bl	80020e0 <buffer_get_float32_auto>
 80016d6:	eef0 7a40 	vmov.f32	s15, s0
 80016da:	4b57      	ldr	r3, [pc, #348]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016dc:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fcfa 	bl	80020e0 <buffer_get_float32_auto>
 80016ec:	eef0 7a40 	vmov.f32	s15, s0
 80016f0:	4b51      	ldr	r3, [pc, #324]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016f2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		appconf.app_ppm_conf.multi_esc = data[ind++];
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	60fa      	str	r2, [r7, #12]
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b4a      	ldr	r3, [pc, #296]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001710:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		appconf.app_ppm_conf.tc = data[ind++];
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60fa      	str	r2, [r7, #12]
 800171a:	461a      	mov	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	bf14      	ite	ne
 8001726:	2301      	movne	r3, #1
 8001728:	2300      	moveq	r3, #0
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b42      	ldr	r3, [pc, #264]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800172e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fcd1 	bl	80020e0 <buffer_get_float32_auto>
 800173e:	eef0 7a40 	vmov.f32	s15, s0
 8001742:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001744:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

		appconf.app_adc_conf.ctrl_type = data[ind++];
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60fa      	str	r2, [r7, #12]
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fcbc 	bl	80020e0 <buffer_get_float32_auto>
 8001768:	eef0 7a40 	vmov.f32	s15, s0
 800176c:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800176e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fcb1 	bl	80020e0 <buffer_get_float32_auto>
 800177e:	eef0 7a40 	vmov.f32	s15, s0
 8001782:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001784:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fca6 	bl	80020e0 <buffer_get_float32_auto>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800179a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fc9b 	bl	80020e0 <buffer_get_float32_auto>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017b0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4619      	mov	r1, r3
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fc90 	bl	80020e0 <buffer_get_float32_auto>
 80017c0:	eef0 7a40 	vmov.f32	s15, s0
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017c6:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fc85 	bl	80020e0 <buffer_get_float32_auto>
 80017d6:	eef0 7a40 	vmov.f32	s15, s0
 80017da:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017dc:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
		appconf.app_adc_conf.use_filter = data[ind++];
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60fa      	str	r2, [r7, #12]
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017fa:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
		appconf.app_adc_conf.safe_start = data[ind++];
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	60fa      	str	r2, [r7, #12]
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001818:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60fa      	str	r2, [r7, #12]
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2da      	uxtb	r2, r3
 8001834:	e002      	b.n	800183c <bldc_interface_process_packet+0xf54>
 8001836:	bf00      	nop
 8001838:	2000089c 	.word	0x2000089c
 800183c:	4bb6      	ldr	r3, [pc, #728]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800183e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	60fa      	str	r2, [r7, #12]
 8001848:	461a      	mov	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4baf      	ldr	r3, [pc, #700]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800185c:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60fa      	str	r2, [r7, #12]
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4ba7      	ldr	r3, [pc, #668]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800187a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	60fa      	str	r2, [r7, #12]
 8001884:	461a      	mov	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4ba0      	ldr	r3, [pc, #640]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001898:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fc1c 	bl	80020e0 <buffer_get_float32_auto>
 80018a8:	eef0 7a40 	vmov.f32	s15, s0
 80018ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018ae:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4619      	mov	r1, r3
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fc11 	bl	80020e0 <buffer_get_float32_auto>
 80018be:	eef0 7a40 	vmov.f32	s15, s0
 80018c2:	4b95      	ldr	r3, [pc, #596]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018c4:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	60fa      	str	r2, [r7, #12]
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	4b90      	ldr	r3, [pc, #576]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018d8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	4619      	mov	r1, r3
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fbfc 	bl	80020e0 <buffer_get_float32_auto>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	4b8a      	ldr	r3, [pc, #552]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018ee:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fbf1 	bl	80020e0 <buffer_get_float32_auto>
 80018fe:	eef0 7a40 	vmov.f32	s15, s0
 8001902:	4b85      	ldr	r3, [pc, #532]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001904:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
		appconf.app_adc_conf.multi_esc = data[ind++];
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60fa      	str	r2, [r7, #12]
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b7d      	ldr	r3, [pc, #500]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001922:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		appconf.app_adc_conf.tc = data[ind++];
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	60fa      	str	r2, [r7, #12]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b76      	ldr	r3, [pc, #472]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001940:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fbc8 	bl	80020e0 <buffer_get_float32_auto>
 8001950:	eef0 7a40 	vmov.f32	s15, s0
 8001954:	4b70      	ldr	r3, [pc, #448]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001956:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fb03 	bl	8001f6c <buffer_get_uint16>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b6b      	ldr	r3, [pc, #428]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800196c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4619      	mov	r1, r3
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fb4b 	bl	8002012 <buffer_get_uint32>
 800197c:	4603      	mov	r3, r0
 800197e:	4a66      	ldr	r2, [pc, #408]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001980:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60fa      	str	r2, [r7, #12]
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	4b61      	ldr	r3, [pc, #388]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001994:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fb9e 	bl	80020e0 <buffer_get_float32_auto>
 80019a4:	eef0 7a40 	vmov.f32	s15, s0
 80019a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019aa:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fb93 	bl	80020e0 <buffer_get_float32_auto>
 80019ba:	eef0 7a40 	vmov.f32	s15, s0
 80019be:	4b56      	ldr	r3, [pc, #344]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019c0:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	4619      	mov	r1, r3
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fb88 	bl	80020e0 <buffer_get_float32_auto>
 80019d0:	eef0 7a40 	vmov.f32	s15, s0
 80019d4:	4b50      	ldr	r3, [pc, #320]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019d6:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fb7d 	bl	80020e0 <buffer_get_float32_auto>
 80019e6:	eef0 7a40 	vmov.f32	s15, s0
 80019ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019ec:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fb72 	bl	80020e0 <buffer_get_float32_auto>
 80019fc:	eef0 7a40 	vmov.f32	s15, s0
 8001a00:	4b45      	ldr	r3, [pc, #276]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a02:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fb67 	bl	80020e0 <buffer_get_float32_auto>
 8001a12:	eef0 7a40 	vmov.f32	s15, s0
 8001a16:	4b40      	ldr	r3, [pc, #256]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a18:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60fa      	str	r2, [r7, #12]
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a2c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
		appconf.app_chuk_conf.multi_esc = data[ind++];
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60fa      	str	r2, [r7, #12]
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a4a:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
		appconf.app_chuk_conf.tc = data[ind++];
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	60fa      	str	r2, [r7, #12]
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf14      	ite	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	2300      	moveq	r3, #0
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b2c      	ldr	r3, [pc, #176]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a68:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fb34 	bl	80020e0 <buffer_get_float32_auto>
 8001a78:	eef0 7a40 	vmov.f32	s15, s0
 8001a7c:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a7e:	edc3 7a2e 	vstr	s15, [r3, #184]	@ 0xb8

		appconf.app_nrf_conf.speed = data[ind++];
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60fa      	str	r2, [r7, #12]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	4b21      	ldr	r3, [pc, #132]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a92:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
		appconf.app_nrf_conf.power = data[ind++];
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60fa      	str	r2, [r7, #12]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001aa6:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
		appconf.app_nrf_conf.crc_type = data[ind++];
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	60fa      	str	r2, [r7, #12]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001aba:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
		appconf.app_nrf_conf.retry_delay = data[ind++];
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	60fa      	str	r2, [r7, #12]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001ace:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
		appconf.app_nrf_conf.retries = data[ind++];
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	60fa      	str	r2, [r7, #12]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001ae2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		appconf.app_nrf_conf.channel = data[ind++];
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	60fa      	str	r2, [r7, #12]
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001af6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	461a      	mov	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	441a      	add	r2, r3
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001b04:	33c2      	adds	r3, #194	@ 0xc2
 8001b06:	8811      	ldrh	r1, [r2, #0]
 8001b08:	7892      	ldrb	r2, [r2, #2]
 8001b0a:	8019      	strh	r1, [r3, #0]
 8001b0c:	709a      	strb	r2, [r3, #2]
		ind += 3;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3303      	adds	r3, #3
 8001b12:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	e001      	b.n	8001b1c <bldc_interface_process_packet+0x1234>
 8001b18:	2000089c 	.word	0x2000089c
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	60fa      	str	r2, [r7, #12]
 8001b20:	461a      	mov	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b82      	ldr	r3, [pc, #520]	@ (8001d3c <bldc_interface_process_packet+0x1454>)
 8001b34:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

		if (rx_appconf_func) {
 8001b38:	4b81      	ldr	r3, [pc, #516]	@ (8001d40 <bldc_interface_process_packet+0x1458>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80ed 	beq.w	8001d1c <bldc_interface_process_packet+0x1434>
			rx_appconf_func(&appconf);
 8001b42:	4b7f      	ldr	r3, [pc, #508]	@ (8001d40 <bldc_interface_process_packet+0x1458>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	487d      	ldr	r0, [pc, #500]	@ (8001d3c <bldc_interface_process_packet+0x1454>)
 8001b48:	4798      	blx	r3
		}
		break;
 8001b4a:	e0e7      	b.n	8001d1c <bldc_interface_process_packet+0x1434>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 8001d44 <bldc_interface_process_packet+0x145c>
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 faa4 	bl	80020a8 <buffer_get_float32>
 8001b60:	eef0 7a40 	vmov.f32	s15, s0
 8001b64:	4b78      	ldr	r3, [pc, #480]	@ (8001d48 <bldc_interface_process_packet+0x1460>)
 8001b66:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8001d44 <bldc_interface_process_packet+0x145c>
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fa97 	bl	80020a8 <buffer_get_float32>
 8001b7a:	eef0 7a40 	vmov.f32	s15, s0
 8001b7e:	4b73      	ldr	r3, [pc, #460]	@ (8001d4c <bldc_interface_process_packet+0x1464>)
 8001b80:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e00f      	b.n	8001baa <bldc_interface_process_packet+0x12c2>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	60fa      	str	r2, [r7, #12]
 8001b90:	461a      	mov	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b259      	sxtb	r1, r3
 8001b9a:	4a6d      	ldr	r2, [pc, #436]	@ (8001d50 <bldc_interface_process_packet+0x1468>)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b07      	cmp	r3, #7
 8001bae:	ddec      	ble.n	8001b8a <bldc_interface_process_packet+0x12a2>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60fa      	str	r2, [r7, #12]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b25a      	sxtb	r2, r3
 8001bc0:	4b64      	ldr	r3, [pc, #400]	@ (8001d54 <bldc_interface_process_packet+0x146c>)
 8001bc2:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 8001bc4:	4b64      	ldr	r3, [pc, #400]	@ (8001d58 <bldc_interface_process_packet+0x1470>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a9 	beq.w	8001d20 <bldc_interface_process_packet+0x1438>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 8001bce:	4b62      	ldr	r3, [pc, #392]	@ (8001d58 <bldc_interface_process_packet+0x1470>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a5d      	ldr	r2, [pc, #372]	@ (8001d48 <bldc_interface_process_packet+0x1460>)
 8001bd4:	edd2 7a00 	vldr	s15, [r2]
 8001bd8:	4a5c      	ldr	r2, [pc, #368]	@ (8001d4c <bldc_interface_process_packet+0x1464>)
 8001bda:	ed92 7a00 	vldr	s14, [r2]
 8001bde:	4a5d      	ldr	r2, [pc, #372]	@ (8001d54 <bldc_interface_process_packet+0x146c>)
 8001be0:	f992 2000 	ldrsb.w	r2, [r2]
 8001be4:	4611      	mov	r1, r2
 8001be6:	485a      	ldr	r0, [pc, #360]	@ (8001d50 <bldc_interface_process_packet+0x1468>)
 8001be8:	eef0 0a47 	vmov.f32	s1, s14
 8001bec:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf0:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 8001bf2:	e095      	b.n	8001d20 <bldc_interface_process_packet+0x1438>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fa50 	bl	80020a8 <buffer_get_float32>
 8001c08:	eef0 7a40 	vmov.f32	s15, s0
 8001c0c:	4b54      	ldr	r3, [pc, #336]	@ (8001d60 <bldc_interface_process_packet+0x1478>)
 8001c0e:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4619      	mov	r1, r3
 8001c18:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fa43 	bl	80020a8 <buffer_get_float32>
 8001c22:	eef0 7a40 	vmov.f32	s15, s0
 8001c26:	4b4f      	ldr	r3, [pc, #316]	@ (8001d64 <bldc_interface_process_packet+0x147c>)
 8001c28:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 8001c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001d68 <bldc_interface_process_packet+0x1480>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d077      	beq.n	8001d24 <bldc_interface_process_packet+0x143c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 8001c34:	4b4c      	ldr	r3, [pc, #304]	@ (8001d68 <bldc_interface_process_packet+0x1480>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a49      	ldr	r2, [pc, #292]	@ (8001d60 <bldc_interface_process_packet+0x1478>)
 8001c3a:	edd2 7a00 	vldr	s15, [r2]
 8001c3e:	4a49      	ldr	r2, [pc, #292]	@ (8001d64 <bldc_interface_process_packet+0x147c>)
 8001c40:	ed92 7a00 	vldr	s14, [r2]
 8001c44:	eef0 0a47 	vmov.f32	s1, s14
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	4798      	blx	r3
		}
		break;
 8001c4e:	e069      	b.n	8001d24 <bldc_interface_process_packet+0x143c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fa22 	bl	80020a8 <buffer_get_float32>
 8001c64:	eef0 7a40 	vmov.f32	s15, s0
 8001c68:	4b40      	ldr	r3, [pc, #256]	@ (8001d6c <bldc_interface_process_packet+0x1484>)
 8001c6a:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4619      	mov	r1, r3
 8001c74:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fa15 	bl	80020a8 <buffer_get_float32>
 8001c7e:	eef0 7a40 	vmov.f32	s15, s0
 8001c82:	4b3b      	ldr	r3, [pc, #236]	@ (8001d70 <bldc_interface_process_packet+0x1488>)
 8001c84:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 8001c88:	4b3a      	ldr	r3, [pc, #232]	@ (8001d74 <bldc_interface_process_packet+0x148c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d04b      	beq.n	8001d28 <bldc_interface_process_packet+0x1440>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 8001c90:	4b38      	ldr	r3, [pc, #224]	@ (8001d74 <bldc_interface_process_packet+0x148c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a35      	ldr	r2, [pc, #212]	@ (8001d6c <bldc_interface_process_packet+0x1484>)
 8001c96:	edd2 7a00 	vldr	s15, [r2]
 8001c9a:	4a35      	ldr	r2, [pc, #212]	@ (8001d70 <bldc_interface_process_packet+0x1488>)
 8001c9c:	ed92 7a00 	vldr	s14, [r2]
 8001ca0:	eef0 0a47 	vmov.f32	s1, s14
 8001ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca8:	4798      	blx	r3
		}
		break;
 8001caa:	e03d      	b.n	8001d28 <bldc_interface_process_packet+0x1440>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f9f4 	bl	80020a8 <buffer_get_float32>
 8001cc0:	eef0 7a40 	vmov.f32	s15, s0
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <bldc_interface_process_packet+0x1490>)
 8001cc6:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <bldc_interface_process_packet+0x1494>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d02c      	beq.n	8001d2c <bldc_interface_process_packet+0x1444>
			rx_dec_chuk_func(dec_chuk);
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <bldc_interface_process_packet+0x1494>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a28      	ldr	r2, [pc, #160]	@ (8001d78 <bldc_interface_process_packet+0x1490>)
 8001cd8:	edd2 7a00 	vldr	s15, [r2]
 8001cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce0:	4798      	blx	r3
		}
		break;
 8001ce2:	e023      	b.n	8001d2c <bldc_interface_process_packet+0x1444>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 8001ce4:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <bldc_interface_process_packet+0x1498>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d021      	beq.n	8001d30 <bldc_interface_process_packet+0x1448>
			rx_mcconf_received_func();
 8001cec:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <bldc_interface_process_packet+0x1498>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4798      	blx	r3
		}
		break;
 8001cf2:	e01d      	b.n	8001d30 <bldc_interface_process_packet+0x1448>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <bldc_interface_process_packet+0x149c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01b      	beq.n	8001d34 <bldc_interface_process_packet+0x144c>
			rx_appconf_received_func();
 8001cfc:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <bldc_interface_process_packet+0x149c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4798      	blx	r3
		}
		break;
 8001d02:	e017      	b.n	8001d34 <bldc_interface_process_packet+0x144c>
		return;
 8001d04:	bf00      	nop
 8001d06:	e016      	b.n	8001d36 <bldc_interface_process_packet+0x144e>

	default:
		break;
 8001d08:	bf00      	nop
 8001d0a:	e014      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d0c:	bf00      	nop
 8001d0e:	e012      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d10:	bf00      	nop
 8001d12:	e010      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d14:	bf00      	nop
 8001d16:	e00e      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d18:	bf00      	nop
 8001d1a:	e00c      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d1c:	bf00      	nop
 8001d1e:	e00a      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d20:	bf00      	nop
 8001d22:	e008      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d24:	bf00      	nop
 8001d26:	e006      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d28:	bf00      	nop
 8001d2a:	e004      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d2c:	bf00      	nop
 8001d2e:	e002      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d30:	bf00      	nop
 8001d32:	e000      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d34:	bf00      	nop
	}
}
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2000089c 	.word	0x2000089c
 8001d40:	200009a4 	.word	0x200009a4
 8001d44:	447a0000 	.word	0x447a0000
 8001d48:	20000964 	.word	0x20000964
 8001d4c:	20000968 	.word	0x20000968
 8001d50:	2000096c 	.word	0x2000096c
 8001d54:	20000974 	.word	0x20000974
 8001d58:	200009a8 	.word	0x200009a8
 8001d5c:	49742400 	.word	0x49742400
 8001d60:	20000978 	.word	0x20000978
 8001d64:	2000097c 	.word	0x2000097c
 8001d68:	200009ac 	.word	0x200009ac
 8001d6c:	20000980 	.word	0x20000980
 8001d70:	20000984 	.word	0x20000984
 8001d74:	200009b0 	.word	0x200009b0
 8001d78:	20000988 	.word	0x20000988
 8001d7c:	200009b4 	.word	0x200009b4
 8001d80:	200009b8 	.word	0x200009b8
 8001d84:	200009bc 	.word	0x200009bc

08001d88 <bldc_interface_set_rpm>:
	send_buffer[send_index++] = COMM_SET_CURRENT_BRAKE;
	buffer_append_float32(send_buffer, current, 1000.0, &send_index);
	send_packet_no_fwd(send_buffer, send_index);
}

void bldc_interface_set_rpm(int rpm) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	if (motor_control_set_func) {
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <bldc_interface_set_rpm+0x58>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <bldc_interface_set_rpm+0x28>
		motor_control_set_func(MOTOR_CONTROL_RPM, rpm);
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <bldc_interface_set_rpm+0x58>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	ee07 2a90 	vmov	s15, r2
 8001da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da6:	eeb0 0a67 	vmov.f32	s0, s15
 8001daa:	2003      	movs	r0, #3
 8001dac:	4798      	blx	r3
 8001dae:	e013      	b.n	8001dd8 <bldc_interface_set_rpm+0x50>
		return;
	}
	int32_t send_index = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
	send_buffer[send_index++] = COMM_SET_RPM;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60fa      	str	r2, [r7, #12]
 8001dba:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <bldc_interface_set_rpm+0x5c>)
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	54d1      	strb	r1, [r2, r3]
	buffer_append_int32(send_buffer, rpm, &send_index);
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4806      	ldr	r0, [pc, #24]	@ (8001de4 <bldc_interface_set_rpm+0x5c>)
 8001dca:	f000 f871 	bl	8001eb0 <buffer_append_int32>
	send_packet_no_fwd(send_buffer, send_index);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4804      	ldr	r0, [pc, #16]	@ (8001de4 <bldc_interface_set_rpm+0x5c>)
 8001dd4:	f000 f808 	bl	8001de8 <send_packet_no_fwd>
}
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200009c0 	.word	0x200009c0
 8001de4:	200002c4 	.word	0x200002c4

08001de8 <send_packet_no_fwd>:
	default: return "Unknown fault";
	}
}

// Private functions
void send_packet_no_fwd(unsigned char *data, unsigned int len) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
	if (!forward_func) {
 8001df2:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <send_packet_no_fwd+0x24>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <send_packet_no_fwd+0x1a>
		bldc_interface_send_packet(data, len);
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7fe fd5f 	bl	80008c0 <bldc_interface_send_packet>
	}
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000990 	.word	0x20000990

08001e10 <bldc_interface_uart_init>:
 * sending packets.
 *
 * @param func
 * Function provided for sending packets.
 */
void bldc_interface_uart_init(void(*func)(unsigned char *data, unsigned int len)) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	// Initialize packet handler
	packet_init(func, process_packet, PACKET_HANDLER);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4905      	ldr	r1, [pc, #20]	@ (8001e30 <bldc_interface_uart_init+0x20>)
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f001 f83b 	bl	8002e98 <packet_init>

	// Initialize the bldc interface and provide a send function
	bldc_interface_init(send_packet_bldc_interface);
 8001e22:	4804      	ldr	r0, [pc, #16]	@ (8001e34 <bldc_interface_uart_init+0x24>)
 8001e24:	f7fe fd3c 	bl	80008a0 <bldc_interface_init>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	08001e39 	.word	0x08001e39
 8001e34:	08001e53 	.word	0x08001e53

08001e38 <process_packet>:
 * @param data
 * Data array pointer
 * @param len
 * Data array length
 */
static void process_packet(unsigned char *data, unsigned int len) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
	// Let bldc_interface process the packet.
	bldc_interface_process_packet(data, len);
 8001e42:	6839      	ldr	r1, [r7, #0]
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7fe fd4f 	bl	80008e8 <bldc_interface_process_packet>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <send_packet_bldc_interface>:
 * @param data
 * Data array pointer
 * @param len
 * Data array length
 */
static void send_packet_bldc_interface(unsigned char *data, unsigned int len) {
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
	// Pass the packet to the packet handler to add checksum, length, start and stop bytes.
	packet_send_packet(data, len, PACKET_HANDLER);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6839      	ldr	r1, [r7, #0]
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f001 f83b 	bl	8002edc <packet_send_packet>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <send_packet>:


void send_packet(unsigned char *data, unsigned int len)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	if (len > (PACKET_MAX_PL_LEN + 5)) {
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f240 2205 	movw	r2, #517	@ 0x205
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d80c      	bhi.n	8001e9e <send_packet+0x2e>
		return;
	}

	// Copy the data to a new buffer to ensure it's not overwritten
	static uint8_t buffer[PACKET_MAX_PL_LEN + 5];
	memcpy(buffer, data, len);
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4807      	ldr	r0, [pc, #28]	@ (8001ea8 <send_packet+0x38>)
 8001e8a:	f00c fcd7 	bl	800e83c <memcpy>

	// Send the data over UART
	HAL_UART_Transmit_DMA(&huart2, buffer, len);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	4904      	ldr	r1, [pc, #16]	@ (8001ea8 <send_packet+0x38>)
 8001e96:	4805      	ldr	r0, [pc, #20]	@ (8001eac <send_packet+0x3c>)
 8001e98:	f007 f9e6 	bl	8009268 <HAL_UART_Transmit_DMA>
 8001e9c:	e000      	b.n	8001ea0 <send_packet+0x30>
		return;
 8001e9e:	bf00      	nop
}
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200009c4 	.word	0x200009c4
 8001eac:	20000e58 	.word	0x20000e58

08001eb0 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	1618      	asrs	r0, r3, #24
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	1c59      	adds	r1, r3, #1
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6011      	str	r1, [r2, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	b2c2      	uxtb	r2, r0
 8001ed2:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1418      	asrs	r0, r3, #16
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1c59      	adds	r1, r3, #1
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6011      	str	r1, [r2, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	b2c2      	uxtb	r2, r0
 8001eea:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1218      	asrs	r0, r3, #8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	1c59      	adds	r1, r3, #1
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6011      	str	r1, [r2, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	b2c2      	uxtb	r2, r0
 8001f02:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	1c59      	adds	r1, r3, #1
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6011      	str	r1, [r2, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	440b      	add	r3, r1
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	1c9a      	adds	r2, r3, #2
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	601a      	str	r2, [r3, #0]
	return res;
 8001f5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	440b      	add	r3, r1
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	1c9a      	adds	r2, r3, #2
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	601a      	str	r2, [r3, #0]
	return res;
 8001fa4:	89fb      	ldrh	r3, [r7, #14]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 8001fb2:	b480      	push	{r7}
 8001fb4:	b085      	sub	sp, #20
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	440b      	add	r3, r1
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8001fd8:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3302      	adds	r3, #2
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	440b      	add	r3, r1
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8001fe8:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	3203      	adds	r2, #3
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	440a      	add	r2, r1
 8001ff4:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 8001ff6:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8001ff8:	60fb      	str	r3, [r7, #12]
	*index += 4;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	1d1a      	adds	r2, r3, #4
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	601a      	str	r2, [r3, #0]
	return res;
 8002004:	68fb      	ldr	r3, [r7, #12]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3301      	adds	r3, #1
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	440b      	add	r3, r1
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8002038:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3302      	adds	r3, #2
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	440b      	add	r3, r1
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8002048:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	3203      	adds	r2, #3
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	440a      	add	r2, r1
 8002054:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	1d1a      	adds	r2, r3, #4
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	601a      	str	r2, [r3, #0]
	return res;
 8002064:	68fb      	ldr	r3, [r7, #12]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	ed87 0a02 	vstr	s0, [r7, #8]
 800207e:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff ff4f 	bl	8001f26 <buffer_get_int16>
 8002088:	4603      	mov	r3, r0
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002092:	edd7 7a02 	vldr	s15, [r7, #8]
 8002096:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800209a:	eef0 7a66 	vmov.f32	s15, s13
}
 800209e:	eeb0 0a67 	vmov.f32	s0, s15
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80020b4:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7ff ff7a 	bl	8001fb2 <buffer_get_int32>
 80020be:	ee07 0a90 	vmov	s15, r0
 80020c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80020ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020ce:	eef0 7a66 	vmov.f32	s15, s13
}
 80020d2:	eeb0 0a67 	vmov.f32	s0, s15
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	0000      	movs	r0, r0
	...

080020e0 <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 80020ea:	6839      	ldr	r1, [r7, #0]
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff90 	bl	8002012 <buffer_get_uint32>
 80020f2:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	0ddb      	lsrs	r3, r3, #23
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002102:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf14      	ite	ne
 800210e:	2301      	movne	r3, #1
 8002110:	2300      	moveq	r3, #0
 8002112:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <buffer_get_float32_auto+0x46>
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d015      	beq.n	8002152 <buffer_get_float32_auto+0x72>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	ee07 3a90 	vmov	s15, r3
 800212c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002130:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002134:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8002180 <buffer_get_float32_auto+0xa0>
 8002138:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800213c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8002140:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002144:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002148:	edc7 7a06 	vstr	s15, [r7, #24]
		e -= 126;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	3b7e      	subs	r3, #126	@ 0x7e
 8002150:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <buffer_get_float32_auto+0x84>
		sig = -sig;
 8002158:	edd7 7a06 	vldr	s15, [r7, #24]
 800215c:	eef1 7a67 	vneg.f32	s15, s15
 8002160:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 8002164:	69f8      	ldr	r0, [r7, #28]
 8002166:	ed97 0a06 	vldr	s0, [r7, #24]
 800216a:	f00c fb75 	bl	800e858 <ldexpf>
 800216e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002172:	eeb0 0a67 	vmov.f32	s0, s15
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	f3af 8000 	nop.w
 8002180:	00000000 	.word	0x00000000
 8002184:	41700000 	.word	0x41700000

08002188 <Motor_Input>:
float sine_amplitude = 1000.0f;
float set_rpm;


float Motor_Input(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
	/*EXAMPLE Sine Wave */
	float time = Get_MilliSecond()/1000.0f; // Time in seconds
 800218e:	f000 f9a5 	bl	80024dc <Get_MilliSecond>
 8002192:	ee07 0a90 	vmov	s15, r0
 8002196:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800219a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002268 <Motor_Input+0xe0>
 800219e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a2:	edc7 7a01 	vstr	s15, [r7, #4]
	sine1 = sinf(2*M_PI*f_sine*time);
 80021a6:	4b31      	ldr	r3, [pc, #196]	@ (800226c <Motor_Input+0xe4>)
 80021a8:	edd3 7a00 	vldr	s15, [r3]
 80021ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021b0:	ed9f 6b2b 	vldr	d6, [pc, #172]	@ 8002260 <Motor_Input+0xd8>
 80021b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021c8:	eeb0 0a67 	vmov.f32	s0, s15
 80021cc:	f00c fc4c 	bl	800ea68 <sinf>
 80021d0:	eef0 7a40 	vmov.f32	s15, s0
 80021d4:	4b26      	ldr	r3, [pc, #152]	@ (8002270 <Motor_Input+0xe8>)
 80021d6:	edc3 7a00 	vstr	s15, [r3]
	sine2 = sinf(2*M_PI*f_sine*time);
 80021da:	4b24      	ldr	r3, [pc, #144]	@ (800226c <Motor_Input+0xe4>)
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021e4:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8002260 <Motor_Input+0xd8>
 80021e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80021f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002200:	f00c fc32 	bl	800ea68 <sinf>
 8002204:	eef0 7a40 	vmov.f32	s15, s0
 8002208:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <Motor_Input+0xec>)
 800220a:	edc3 7a00 	vstr	s15, [r3]
	set_rpm = sine_bias+ sine_amplitude*sine1 + sine_amplitude/2*sine2;
 800220e:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <Motor_Input+0xf0>)
 8002210:	ed93 7a00 	vldr	s14, [r3]
 8002214:	4b16      	ldr	r3, [pc, #88]	@ (8002270 <Motor_Input+0xe8>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800221e:	4b17      	ldr	r3, [pc, #92]	@ (800227c <Motor_Input+0xf4>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002228:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <Motor_Input+0xf0>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8002232:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002236:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <Motor_Input+0xec>)
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002244:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <Motor_Input+0xf8>)
 8002246:	edc3 7a00 	vstr	s15, [r3]

	return set_rpm;
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <Motor_Input+0xf8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	ee07 3a90 	vmov	s15, r3
}
 8002252:	eeb0 0a67 	vmov.f32	s0, s15
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	f3af 8000 	nop.w
 8002260:	54442d18 	.word	0x54442d18
 8002264:	401921fb 	.word	0x401921fb
 8002268:	447a0000 	.word	0x447a0000
 800226c:	20000000 	.word	0x20000000
 8002270:	20000bcc 	.word	0x20000bcc
 8002274:	20000bd0 	.word	0x20000bd0
 8002278:	20000008 	.word	0x20000008
 800227c:	20000004 	.word	0x20000004
 8002280:	20000bd4 	.word	0x20000bd4

08002284 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	e016      	b.n	80022c6 <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 8002298:	897b      	ldrh	r3, [r7, #10]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b29b      	uxth	r3, r3
 800229e:	4619      	mov	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	404b      	eors	r3, r1
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	4a0b      	ldr	r2, [pc, #44]	@ (80022dc <crc16+0x58>)
 80022ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022b2:	b21a      	sxth	r2, r3
 80022b4:	897b      	ldrh	r3, [r7, #10]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	4053      	eors	r3, r2
 80022bc:	b21b      	sxth	r3, r3
 80022be:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3301      	adds	r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d3e4      	bcc.n	8002298 <crc16+0x14>
	}
	return cksum;
 80022ce:	897b      	ldrh	r3, [r7, #10]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	0800ec38 	.word	0x0800ec38

080022e0 <DataAcq_Init>:

/**
 * @brief Initialize the data acquisition module
 */
HAL_StatusTypeDef DataAcq_Init(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
    // Initialize counters and flags
    usb_buffer_cnt = 0;
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <DataAcq_Init+0x28>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
    active_buffer = 0;
 80022ea:	4b08      	ldr	r3, [pc, #32]	@ (800230c <DataAcq_Init+0x2c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
    buffer_ready_flag = 3;
 80022f0:	4b07      	ldr	r3, [pc, #28]	@ (8002310 <DataAcq_Init+0x30>)
 80022f2:	2203      	movs	r2, #3
 80022f4:	701a      	strb	r2, [r3, #0]
    time_ms = 0;
 80022f6:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <DataAcq_Init+0x34>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	20000bd8 	.word	0x20000bd8
 800230c:	20000bdc 	.word	0x20000bdc
 8002310:	20000bdd 	.word	0x20000bdd
 8002314:	20000be0 	.word	0x20000be0

08002318 <DataAcq_ScaleFloatValue>:

/**
 * @brief Scale float value to uint32_t with defined scaling factor
 */
static uint32_t DataAcq_ScaleFloatValue(float value)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	ed87 0a01 	vstr	s0, [r7, #4]
    return (uint32_t)(value * SCALING_FACTOR);
 8002322:	edd7 7a01 	vldr	s15, [r7, #4]
 8002326:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002344 <DataAcq_ScaleFloatValue+0x2c>
 800232a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002332:	ee17 3a90 	vmov	r3, s15
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	447a0000 	.word	0x447a0000

08002348 <DataAcq_SwitchBuffers>:

/**
 * @brief Switch between double buffers
 */
static void DataAcq_SwitchBuffers(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
    active_buffer = 1 - active_buffer;  // Toggle between 0 and 1
 800234c:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <DataAcq_SwitchBuffers+0x3c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f1c3 0301 	rsb	r3, r3, #1
 8002356:	b2da      	uxtb	r2, r3
 8002358:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <DataAcq_SwitchBuffers+0x3c>)
 800235a:	701a      	strb	r2, [r3, #0]
    usb_buffer_cnt = 0;
 800235c:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <DataAcq_SwitchBuffers+0x40>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]

    // Update buffer ready flag
    buffer_ready_flag = active_buffer ? BUFFER_STATE_READY_0 : BUFFER_STATE_READY_1;
 8002362:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <DataAcq_SwitchBuffers+0x3c>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	4b05      	ldr	r3, [pc, #20]	@ (800238c <DataAcq_SwitchBuffers+0x44>)
 8002376:	701a      	strb	r2, [r3, #0]
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000bdc 	.word	0x20000bdc
 8002388:	20000bd8 	.word	0x20000bd8
 800238c:	20000bdd 	.word	0x20000bdd

08002390 <DataAcq_ProcessSamples>:

/**
 * @brief Process new data samples in timer interrupt
 */
void DataAcq_ProcessSamples(TIM_HandleTypeDef* htim)
{
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM3) {
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a48      	ldr	r2, [pc, #288]	@ (80024c0 <DataAcq_ProcessSamples+0x130>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	f040 8089 	bne.w	80024b6 <DataAcq_ProcessSamples+0x126>
        return;
    }

    // Toggle LED to indicate sampling
    HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80023a4:	2101      	movs	r1, #1
 80023a6:	4847      	ldr	r0, [pc, #284]	@ (80024c4 <DataAcq_ProcessSamples+0x134>)
 80023a8:	f003 fa4f 	bl	800584a <HAL_GPIO_TogglePin>

    // Get motor data
    float set_rpm = Motor_Input();
 80023ac:	f7ff feec 	bl	8002188 <Motor_Input>
 80023b0:	ed87 0a05 	vstr	s0, [r7, #20]
    bldc_interface_set_rpm(Motor_Input());
 80023b4:	f7ff fee8 	bl	8002188 <Motor_Input>
 80023b8:	eef0 7a40 	vmov.f32	s15, s0
 80023bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c0:	ee17 0a90 	vmov	r0, s15
 80023c4:	f7ff fce0 	bl	8001d88 <bldc_interface_set_rpm>
    float current_speed = MotorSpeed_GetRPM();
 80023c8:	f000 fcdc 	bl	8002d84 <MotorSpeed_GetRPM>
 80023cc:	ed87 0a04 	vstr	s0, [r7, #16]

    // Scale float values to integers
    uint32_t scaled_set_rpm = DataAcq_ScaleFloatValue(set_rpm);
 80023d0:	ed97 0a05 	vldr	s0, [r7, #20]
 80023d4:	f7ff ffa0 	bl	8002318 <DataAcq_ScaleFloatValue>
 80023d8:	60f8      	str	r0, [r7, #12]
    uint32_t scaled_current_speed = DataAcq_ScaleFloatValue(current_speed);
 80023da:	ed97 0a04 	vldr	s0, [r7, #16]
 80023de:	f7ff ff9b 	bl	8002318 <DataAcq_ScaleFloatValue>
 80023e2:	60b8      	str	r0, [r7, #8]

    // Update time counter
    time_ms++;
 80023e4:	4b38      	ldr	r3, [pc, #224]	@ (80024c8 <DataAcq_ProcessSamples+0x138>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	4a37      	ldr	r2, [pc, #220]	@ (80024c8 <DataAcq_ProcessSamples+0x138>)
 80023ec:	6013      	str	r3, [r2, #0]

    // Store data in active buffer
    usb_buffer[active_buffer][0][usb_buffer_cnt] = time_ms;
 80023ee:	4b37      	ldr	r3, [pc, #220]	@ (80024cc <DataAcq_ProcessSamples+0x13c>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461c      	mov	r4, r3
 80023f6:	4b36      	ldr	r3, [pc, #216]	@ (80024d0 <DataAcq_ProcessSamples+0x140>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a33      	ldr	r2, [pc, #204]	@ (80024c8 <DataAcq_ProcessSamples+0x138>)
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	4835      	ldr	r0, [pc, #212]	@ (80024d4 <DataAcq_ProcessSamples+0x144>)
 8002400:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 8002404:	fb04 f101 	mul.w	r1, r4, r1
 8002408:	440b      	add	r3, r1
 800240a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    usb_buffer[active_buffer][1][usb_buffer_cnt] = adc_buffer[0];  // Panasonic
 800240e:	4b2f      	ldr	r3, [pc, #188]	@ (80024cc <DataAcq_ProcessSamples+0x13c>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	461c      	mov	r4, r3
 8002416:	4b2e      	ldr	r3, [pc, #184]	@ (80024d0 <DataAcq_ProcessSamples+0x140>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2f      	ldr	r2, [pc, #188]	@ (80024d8 <DataAcq_ProcessSamples+0x148>)
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	482d      	ldr	r0, [pc, #180]	@ (80024d4 <DataAcq_ProcessSamples+0x144>)
 8002420:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 8002424:	fb04 f101 	mul.w	r1, r4, r1
 8002428:	440b      	add	r3, r1
 800242a:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 800242e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    usb_buffer[active_buffer][2][usb_buffer_cnt] = adc_buffer[1];  // Load Cell 1
 8002432:	4b26      	ldr	r3, [pc, #152]	@ (80024cc <DataAcq_ProcessSamples+0x13c>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461c      	mov	r4, r3
 800243a:	4b25      	ldr	r3, [pc, #148]	@ (80024d0 <DataAcq_ProcessSamples+0x140>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a26      	ldr	r2, [pc, #152]	@ (80024d8 <DataAcq_ProcessSamples+0x148>)
 8002440:	6852      	ldr	r2, [r2, #4]
 8002442:	4824      	ldr	r0, [pc, #144]	@ (80024d4 <DataAcq_ProcessSamples+0x144>)
 8002444:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 8002448:	fb04 f101 	mul.w	r1, r4, r1
 800244c:	440b      	add	r3, r1
 800244e:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 8002452:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    usb_buffer[active_buffer][3][usb_buffer_cnt] = scaled_set_rpm; // Motor setpoint
 8002456:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <DataAcq_ProcessSamples+0x13c>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <DataAcq_ProcessSamples+0x140>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	491c      	ldr	r1, [pc, #112]	@ (80024d4 <DataAcq_ProcessSamples+0x144>)
 8002464:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8002468:	fb00 f202 	mul.w	r2, r0, r2
 800246c:	441a      	add	r2, r3
 800246e:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8002472:	4413      	add	r3, r2
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    usb_buffer[active_buffer][4][usb_buffer_cnt] = scaled_current_speed; // Current speed
 800247a:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <DataAcq_ProcessSamples+0x13c>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	4618      	mov	r0, r3
 8002482:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <DataAcq_ProcessSamples+0x140>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4913      	ldr	r1, [pc, #76]	@ (80024d4 <DataAcq_ProcessSamples+0x144>)
 8002488:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 800248c:	fb00 f202 	mul.w	r2, r0, r2
 8002490:	4413      	add	r3, r2
 8002492:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Increment buffer counter
    usb_buffer_cnt++;
 800249c:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <DataAcq_ProcessSamples+0x140>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	4a0b      	ldr	r2, [pc, #44]	@ (80024d0 <DataAcq_ProcessSamples+0x140>)
 80024a4:	6013      	str	r3, [r2, #0]

    // Check if buffer is full
    if (usb_buffer_cnt >= USB_BUFFER_SIZE) {
 80024a6:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <DataAcq_ProcessSamples+0x140>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80024ae:	d303      	bcc.n	80024b8 <DataAcq_ProcessSamples+0x128>
        DataAcq_SwitchBuffers();
 80024b0:	f7ff ff4a 	bl	8002348 <DataAcq_SwitchBuffers>
 80024b4:	e000      	b.n	80024b8 <DataAcq_ProcessSamples+0x128>
        return;
 80024b6:	bf00      	nop
    }
}
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	bf00      	nop
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40020400 	.word	0x40020400
 80024c8:	20000be0 	.word	0x20000be0
 80024cc:	20000bdc 	.word	0x20000bdc
 80024d0:	20000bd8 	.word	0x20000bd8
 80024d4:	2000147c 	.word	0x2000147c
 80024d8:	20001028 	.word	0x20001028

080024dc <Get_MilliSecond>:
{
    return buffer_ready_flag;
}

uint32_t Get_MilliSecond(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
    return time_ms;
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <Get_MilliSecond+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000be0 	.word	0x20000be0

080024f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024f8:	f001 fad3 	bl	8003aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024fc:	f000 f81e 	bl	800253c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002500:	f000 fb22 	bl	8002b48 <MX_GPIO_Init>
  MX_DMA_Init();
 8002504:	f000 fae6 	bl	8002ad4 <MX_DMA_Init>
  MX_ETH_Init();
 8002508:	f000 f912 	bl	8002730 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800250c:	f000 fab2 	bl	8002a74 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002510:	f000 f884 	bl	800261c <MX_ADC1_Init>
  MX_TIM2_Init();
 8002514:	f000 f95a 	bl	80027cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002518:	f000 f9a6 	bl	8002868 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800251c:	f00b faf2 	bl	800db04 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8002520:	f000 f9f0 	bl	8002904 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002524:	f000 fa76 	bl	8002a14 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  /* Initialize Application Modules */
  if (ApplicationInit_Sequence() != HAL_OK) {
 8002528:	f000 fbb0 	bl	8002c8c <ApplicationInit_Sequence>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <main+0x42>
      Error_Handler();
 8002532:	f000 fbf5 	bl	8002d20 <Error_Handler>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	Application();
 8002536:	f000 fbed 	bl	8002d14 <Application>
 800253a:	e7fc      	b.n	8002536 <main+0x42>

0800253c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b094      	sub	sp, #80	@ 0x50
 8002540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	2234      	movs	r2, #52	@ 0x34
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f00c f932 	bl	800e7b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002560:	f004 fc16 	bl	8006d90 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002564:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <SystemClock_Config+0xd8>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	4a2a      	ldr	r2, [pc, #168]	@ (8002614 <SystemClock_Config+0xd8>)
 800256a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800256e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002570:	4b28      	ldr	r3, [pc, #160]	@ (8002614 <SystemClock_Config+0xd8>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002578:	607b      	str	r3, [r7, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800257c:	4b26      	ldr	r3, [pc, #152]	@ (8002618 <SystemClock_Config+0xdc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a25      	ldr	r2, [pc, #148]	@ (8002618 <SystemClock_Config+0xdc>)
 8002582:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b23      	ldr	r3, [pc, #140]	@ (8002618 <SystemClock_Config+0xdc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002594:	2301      	movs	r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002598:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800259c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800259e:	2302      	movs	r3, #2
 80025a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025a8:	2304      	movs	r3, #4
 80025aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80025ac:	23d8      	movs	r3, #216	@ 0xd8
 80025ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025b0:	2302      	movs	r3, #2
 80025b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80025b4:	2309      	movs	r3, #9
 80025b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025b8:	2302      	movs	r3, #2
 80025ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	4618      	mov	r0, r3
 80025c2:	f004 fc45 	bl	8006e50 <HAL_RCC_OscConfig>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025cc:	f000 fba8 	bl	8002d20 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80025d0:	f004 fbee 	bl	8006db0 <HAL_PWREx_EnableOverDrive>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80025da:	f000 fba1 	bl	8002d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025de:	230f      	movs	r3, #15
 80025e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025e2:	2302      	movs	r3, #2
 80025e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80025f6:	f107 0308 	add.w	r3, r7, #8
 80025fa:	2107      	movs	r1, #7
 80025fc:	4618      	mov	r0, r3
 80025fe:	f004 fed5 	bl	80073ac <HAL_RCC_ClockConfig>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002608:	f000 fb8a 	bl	8002d20 <Error_Handler>
  }
}
 800260c:	bf00      	nop
 800260e:	3750      	adds	r7, #80	@ 0x50
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	40007000 	.word	0x40007000

0800261c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002622:	463b      	mov	r3, r7
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800262e:	4b3e      	ldr	r3, [pc, #248]	@ (8002728 <MX_ADC1_Init+0x10c>)
 8002630:	4a3e      	ldr	r2, [pc, #248]	@ (800272c <MX_ADC1_Init+0x110>)
 8002632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002634:	4b3c      	ldr	r3, [pc, #240]	@ (8002728 <MX_ADC1_Init+0x10c>)
 8002636:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800263a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800263c:	4b3a      	ldr	r3, [pc, #232]	@ (8002728 <MX_ADC1_Init+0x10c>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002642:	4b39      	ldr	r3, [pc, #228]	@ (8002728 <MX_ADC1_Init+0x10c>)
 8002644:	2201      	movs	r2, #1
 8002646:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002648:	4b37      	ldr	r3, [pc, #220]	@ (8002728 <MX_ADC1_Init+0x10c>)
 800264a:	2201      	movs	r2, #1
 800264c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800264e:	4b36      	ldr	r3, [pc, #216]	@ (8002728 <MX_ADC1_Init+0x10c>)
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002656:	4b34      	ldr	r3, [pc, #208]	@ (8002728 <MX_ADC1_Init+0x10c>)
 8002658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800265c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800265e:	4b32      	ldr	r3, [pc, #200]	@ (8002728 <MX_ADC1_Init+0x10c>)
 8002660:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 8002664:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002666:	4b30      	ldr	r3, [pc, #192]	@ (8002728 <MX_ADC1_Init+0x10c>)
 8002668:	2200      	movs	r2, #0
 800266a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800266c:	4b2e      	ldr	r3, [pc, #184]	@ (8002728 <MX_ADC1_Init+0x10c>)
 800266e:	2205      	movs	r2, #5
 8002670:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002672:	4b2d      	ldr	r3, [pc, #180]	@ (8002728 <MX_ADC1_Init+0x10c>)
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800267a:	4b2b      	ldr	r3, [pc, #172]	@ (8002728 <MX_ADC1_Init+0x10c>)
 800267c:	2200      	movs	r2, #0
 800267e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002680:	4829      	ldr	r0, [pc, #164]	@ (8002728 <MX_ADC1_Init+0x10c>)
 8002682:	f001 fa8f 	bl	8003ba4 <HAL_ADC_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800268c:	f000 fb48 	bl	8002d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002690:	2300      	movs	r3, #0
 8002692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002694:	2301      	movs	r3, #1
 8002696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002698:	2304      	movs	r3, #4
 800269a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800269c:	463b      	mov	r3, r7
 800269e:	4619      	mov	r1, r3
 80026a0:	4821      	ldr	r0, [pc, #132]	@ (8002728 <MX_ADC1_Init+0x10c>)
 80026a2:	f001 fbd1 	bl	8003e48 <HAL_ADC_ConfigChannel>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80026ac:	f000 fb38 	bl	8002d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026b0:	2303      	movs	r3, #3
 80026b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80026b4:	2302      	movs	r3, #2
 80026b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026b8:	463b      	mov	r3, r7
 80026ba:	4619      	mov	r1, r3
 80026bc:	481a      	ldr	r0, [pc, #104]	@ (8002728 <MX_ADC1_Init+0x10c>)
 80026be:	f001 fbc3 	bl	8003e48 <HAL_ADC_ConfigChannel>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80026c8:	f000 fb2a 	bl	8002d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80026cc:	2304      	movs	r3, #4
 80026ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80026d0:	2303      	movs	r3, #3
 80026d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026d4:	463b      	mov	r3, r7
 80026d6:	4619      	mov	r1, r3
 80026d8:	4813      	ldr	r0, [pc, #76]	@ (8002728 <MX_ADC1_Init+0x10c>)
 80026da:	f001 fbb5 	bl	8003e48 <HAL_ADC_ConfigChannel>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80026e4:	f000 fb1c 	bl	8002d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80026e8:	2305      	movs	r3, #5
 80026ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80026ec:	2304      	movs	r3, #4
 80026ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026f0:	463b      	mov	r3, r7
 80026f2:	4619      	mov	r1, r3
 80026f4:	480c      	ldr	r0, [pc, #48]	@ (8002728 <MX_ADC1_Init+0x10c>)
 80026f6:	f001 fba7 	bl	8003e48 <HAL_ADC_ConfigChannel>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002700:	f000 fb0e 	bl	8002d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002704:	2306      	movs	r3, #6
 8002706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002708:	2305      	movs	r3, #5
 800270a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800270c:	463b      	mov	r3, r7
 800270e:	4619      	mov	r1, r3
 8002710:	4805      	ldr	r0, [pc, #20]	@ (8002728 <MX_ADC1_Init+0x10c>)
 8002712:	f001 fb99 	bl	8003e48 <HAL_ADC_ConfigChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 800271c:	f000 fb00 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000c1c 	.word	0x20000c1c
 800272c:	40012000 	.word	0x40012000

08002730 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002734:	4b1f      	ldr	r3, [pc, #124]	@ (80027b4 <MX_ETH_Init+0x84>)
 8002736:	4a20      	ldr	r2, [pc, #128]	@ (80027b8 <MX_ETH_Init+0x88>)
 8002738:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800273a:	4b20      	ldr	r3, [pc, #128]	@ (80027bc <MX_ETH_Init+0x8c>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002740:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <MX_ETH_Init+0x8c>)
 8002742:	2280      	movs	r2, #128	@ 0x80
 8002744:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002746:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <MX_ETH_Init+0x8c>)
 8002748:	22e1      	movs	r2, #225	@ 0xe1
 800274a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800274c:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <MX_ETH_Init+0x8c>)
 800274e:	2200      	movs	r2, #0
 8002750:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002752:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <MX_ETH_Init+0x8c>)
 8002754:	2200      	movs	r2, #0
 8002756:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002758:	4b18      	ldr	r3, [pc, #96]	@ (80027bc <MX_ETH_Init+0x8c>)
 800275a:	2200      	movs	r2, #0
 800275c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800275e:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <MX_ETH_Init+0x84>)
 8002760:	4a16      	ldr	r2, [pc, #88]	@ (80027bc <MX_ETH_Init+0x8c>)
 8002762:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002764:	4b13      	ldr	r3, [pc, #76]	@ (80027b4 <MX_ETH_Init+0x84>)
 8002766:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800276a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800276c:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <MX_ETH_Init+0x84>)
 800276e:	4a14      	ldr	r2, [pc, #80]	@ (80027c0 <MX_ETH_Init+0x90>)
 8002770:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002772:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <MX_ETH_Init+0x84>)
 8002774:	4a13      	ldr	r2, [pc, #76]	@ (80027c4 <MX_ETH_Init+0x94>)
 8002776:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002778:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <MX_ETH_Init+0x84>)
 800277a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800277e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002780:	480c      	ldr	r0, [pc, #48]	@ (80027b4 <MX_ETH_Init+0x84>)
 8002782:	f002 fb4f 	bl	8004e24 <HAL_ETH_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800278c:	f000 fac8 	bl	8002d20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002790:	2238      	movs	r2, #56	@ 0x38
 8002792:	2100      	movs	r1, #0
 8002794:	480c      	ldr	r0, [pc, #48]	@ (80027c8 <MX_ETH_Init+0x98>)
 8002796:	f00c f80d 	bl	800e7b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800279a:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <MX_ETH_Init+0x98>)
 800279c:	2221      	movs	r2, #33	@ 0x21
 800279e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80027a0:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <MX_ETH_Init+0x98>)
 80027a2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80027a6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80027a8:	4b07      	ldr	r3, [pc, #28]	@ (80027c8 <MX_ETH_Init+0x98>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000cc4 	.word	0x20000cc4
 80027b8:	40028000 	.word	0x40028000
 80027bc:	2000103c 	.word	0x2000103c
 80027c0:	20000208 	.word	0x20000208
 80027c4:	20000168 	.word	0x20000168
 80027c8:	20000be4 	.word	0x20000be4

080027cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d2:	f107 0310 	add.w	r3, r7, #16
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <MX_TIM2_Init+0x98>)
 80027ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80027f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002864 <MX_TIM2_Init+0x98>)
 80027f4:	2247      	movs	r2, #71	@ 0x47
 80027f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <MX_TIM2_Init+0x98>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 80027fe:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <MX_TIM2_Init+0x98>)
 8002800:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002804:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002806:	4b17      	ldr	r3, [pc, #92]	@ (8002864 <MX_TIM2_Init+0x98>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800280c:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <MX_TIM2_Init+0x98>)
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002812:	4814      	ldr	r0, [pc, #80]	@ (8002864 <MX_TIM2_Init+0x98>)
 8002814:	f005 fc18 	bl	8008048 <HAL_TIM_Base_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800281e:	f000 fa7f 	bl	8002d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002826:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002828:	f107 0310 	add.w	r3, r7, #16
 800282c:	4619      	mov	r1, r3
 800282e:	480d      	ldr	r0, [pc, #52]	@ (8002864 <MX_TIM2_Init+0x98>)
 8002830:	f006 f85e 	bl	80088f0 <HAL_TIM_ConfigClockSource>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800283a:	f000 fa71 	bl	8002d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800283e:	2320      	movs	r3, #32
 8002840:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4806      	ldr	r0, [pc, #24]	@ (8002864 <MX_TIM2_Init+0x98>)
 800284c:	f006 fc12 	bl	8009074 <HAL_TIMEx_MasterConfigSynchronization>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002856:	f000 fa63 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20000d74 	.word	0x20000d74

08002868 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800286e:	f107 0310 	add.w	r3, r7, #16
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002886:	4b1d      	ldr	r3, [pc, #116]	@ (80028fc <MX_TIM3_Init+0x94>)
 8002888:	4a1d      	ldr	r2, [pc, #116]	@ (8002900 <MX_TIM3_Init+0x98>)
 800288a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 800288c:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <MX_TIM3_Init+0x94>)
 800288e:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8002892:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002894:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <MX_TIM3_Init+0x94>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800289a:	4b18      	ldr	r3, [pc, #96]	@ (80028fc <MX_TIM3_Init+0x94>)
 800289c:	2209      	movs	r2, #9
 800289e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a0:	4b16      	ldr	r3, [pc, #88]	@ (80028fc <MX_TIM3_Init+0x94>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028a6:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <MX_TIM3_Init+0x94>)
 80028a8:	2280      	movs	r2, #128	@ 0x80
 80028aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028ac:	4813      	ldr	r0, [pc, #76]	@ (80028fc <MX_TIM3_Init+0x94>)
 80028ae:	f005 fbcb 	bl	8008048 <HAL_TIM_Base_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80028b8:	f000 fa32 	bl	8002d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028c2:	f107 0310 	add.w	r3, r7, #16
 80028c6:	4619      	mov	r1, r3
 80028c8:	480c      	ldr	r0, [pc, #48]	@ (80028fc <MX_TIM3_Init+0x94>)
 80028ca:	f006 f811 	bl	80088f0 <HAL_TIM_ConfigClockSource>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80028d4:	f000 fa24 	bl	8002d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d8:	2300      	movs	r3, #0
 80028da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	4619      	mov	r1, r3
 80028e4:	4805      	ldr	r0, [pc, #20]	@ (80028fc <MX_TIM3_Init+0x94>)
 80028e6:	f006 fbc5 	bl	8009074 <HAL_TIMEx_MasterConfigSynchronization>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80028f0:	f000 fa16 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028f4:	bf00      	nop
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000dc0 	.word	0x20000dc0
 8002900:	40000400 	.word	0x40000400

08002904 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	@ 0x30
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800290a:	f107 0320 	add.w	r3, r7, #32
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002930:	4b36      	ldr	r3, [pc, #216]	@ (8002a0c <MX_TIM4_Init+0x108>)
 8002932:	4a37      	ldr	r2, [pc, #220]	@ (8002a10 <MX_TIM4_Init+0x10c>)
 8002934:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 8002936:	4b35      	ldr	r3, [pc, #212]	@ (8002a0c <MX_TIM4_Init+0x108>)
 8002938:	226b      	movs	r2, #107	@ 0x6b
 800293a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293c:	4b33      	ldr	r3, [pc, #204]	@ (8002a0c <MX_TIM4_Init+0x108>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002942:	4b32      	ldr	r3, [pc, #200]	@ (8002a0c <MX_TIM4_Init+0x108>)
 8002944:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002948:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800294a:	4b30      	ldr	r3, [pc, #192]	@ (8002a0c <MX_TIM4_Init+0x108>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002950:	4b2e      	ldr	r3, [pc, #184]	@ (8002a0c <MX_TIM4_Init+0x108>)
 8002952:	2200      	movs	r2, #0
 8002954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002956:	482d      	ldr	r0, [pc, #180]	@ (8002a0c <MX_TIM4_Init+0x108>)
 8002958:	f005 fb76 	bl	8008048 <HAL_TIM_Base_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002962:	f000 f9dd 	bl	8002d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800296a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800296c:	f107 0320 	add.w	r3, r7, #32
 8002970:	4619      	mov	r1, r3
 8002972:	4826      	ldr	r0, [pc, #152]	@ (8002a0c <MX_TIM4_Init+0x108>)
 8002974:	f005 ffbc 	bl	80088f0 <HAL_TIM_ConfigClockSource>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800297e:	f000 f9cf 	bl	8002d20 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002982:	4822      	ldr	r0, [pc, #136]	@ (8002a0c <MX_TIM4_Init+0x108>)
 8002984:	f005 fc5f 	bl	8008246 <HAL_TIM_IC_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800298e:	f000 f9c7 	bl	8002d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800299a:	f107 0314 	add.w	r3, r7, #20
 800299e:	4619      	mov	r1, r3
 80029a0:	481a      	ldr	r0, [pc, #104]	@ (8002a0c <MX_TIM4_Init+0x108>)
 80029a2:	f006 fb67 	bl	8009074 <HAL_TIMEx_MasterConfigSynchronization>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80029ac:	f000 f9b8 	bl	8002d20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80029b0:	2300      	movs	r3, #0
 80029b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80029b4:	2301      	movs	r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80029bc:	230f      	movs	r3, #15
 80029be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	2200      	movs	r2, #0
 80029c4:	4619      	mov	r1, r3
 80029c6:	4811      	ldr	r0, [pc, #68]	@ (8002a0c <MX_TIM4_Init+0x108>)
 80029c8:	f005 fef5 	bl	80087b6 <HAL_TIM_IC_ConfigChannel>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80029d2:	f000 f9a5 	bl	8002d20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	2204      	movs	r2, #4
 80029da:	4619      	mov	r1, r3
 80029dc:	480b      	ldr	r0, [pc, #44]	@ (8002a0c <MX_TIM4_Init+0x108>)
 80029de:	f005 feea 	bl	80087b6 <HAL_TIM_IC_ConfigChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 80029e8:	f000 f99a 	bl	8002d20 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	2208      	movs	r2, #8
 80029f0:	4619      	mov	r1, r3
 80029f2:	4806      	ldr	r0, [pc, #24]	@ (8002a0c <MX_TIM4_Init+0x108>)
 80029f4:	f005 fedf 	bl	80087b6 <HAL_TIM_IC_ConfigChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 80029fe:	f000 f98f 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a02:	bf00      	nop
 8002a04:	3730      	adds	r7, #48	@ 0x30
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000e0c 	.word	0x20000e0c
 8002a10:	40000800 	.word	0x40000800

08002a14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a18:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <MX_USART2_UART_Init+0x58>)
 8002a1a:	4a15      	ldr	r2, [pc, #84]	@ (8002a70 <MX_USART2_UART_Init+0x5c>)
 8002a1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a1e:	4b13      	ldr	r3, [pc, #76]	@ (8002a6c <MX_USART2_UART_Init+0x58>)
 8002a20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a26:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <MX_USART2_UART_Init+0x58>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a6c <MX_USART2_UART_Init+0x58>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a32:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <MX_USART2_UART_Init+0x58>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <MX_USART2_UART_Init+0x58>)
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <MX_USART2_UART_Init+0x58>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a44:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <MX_USART2_UART_Init+0x58>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <MX_USART2_UART_Init+0x58>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <MX_USART2_UART_Init+0x58>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a56:	4805      	ldr	r0, [pc, #20]	@ (8002a6c <MX_USART2_UART_Init+0x58>)
 8002a58:	f006 fbb8 	bl	80091cc <HAL_UART_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a62:	f000 f95d 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000e58 	.word	0x20000e58
 8002a70:	40004400 	.word	0x40004400

08002a74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a78:	4b14      	ldr	r3, [pc, #80]	@ (8002acc <MX_USART3_UART_Init+0x58>)
 8002a7a:	4a15      	ldr	r2, [pc, #84]	@ (8002ad0 <MX_USART3_UART_Init+0x5c>)
 8002a7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a7e:	4b13      	ldr	r3, [pc, #76]	@ (8002acc <MX_USART3_UART_Init+0x58>)
 8002a80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a86:	4b11      	ldr	r3, [pc, #68]	@ (8002acc <MX_USART3_UART_Init+0x58>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <MX_USART3_UART_Init+0x58>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a92:	4b0e      	ldr	r3, [pc, #56]	@ (8002acc <MX_USART3_UART_Init+0x58>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a98:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <MX_USART3_UART_Init+0x58>)
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002acc <MX_USART3_UART_Init+0x58>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <MX_USART3_UART_Init+0x58>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aaa:	4b08      	ldr	r3, [pc, #32]	@ (8002acc <MX_USART3_UART_Init+0x58>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <MX_USART3_UART_Init+0x58>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ab6:	4805      	ldr	r0, [pc, #20]	@ (8002acc <MX_USART3_UART_Init+0x58>)
 8002ab8:	f006 fb88 	bl	80091cc <HAL_UART_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ac2:	f000 f92d 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000ee0 	.word	0x20000ee0
 8002ad0:	40004800 	.word	0x40004800

08002ad4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ada:	4b1a      	ldr	r3, [pc, #104]	@ (8002b44 <MX_DMA_Init+0x70>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <MX_DMA_Init+0x70>)
 8002ae0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae6:	4b17      	ldr	r3, [pc, #92]	@ (8002b44 <MX_DMA_Init+0x70>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002af2:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <MX_DMA_Init+0x70>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	4a13      	ldr	r2, [pc, #76]	@ (8002b44 <MX_DMA_Init+0x70>)
 8002af8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afe:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <MX_DMA_Init+0x70>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	2010      	movs	r0, #16
 8002b10:	f001 fd47 	bl	80045a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b14:	2010      	movs	r0, #16
 8002b16:	f001 fd60 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	2011      	movs	r0, #17
 8002b20:	f001 fd3f 	bl	80045a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002b24:	2011      	movs	r0, #17
 8002b26:	f001 fd58 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2038      	movs	r0, #56	@ 0x38
 8002b30:	f001 fd37 	bl	80045a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b34:	2038      	movs	r0, #56	@ 0x38
 8002b36:	f001 fd50 	bl	80045da <HAL_NVIC_EnableIRQ>

}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800

08002b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08c      	sub	sp, #48	@ 0x30
 8002b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4e:	f107 031c 	add.w	r3, r7, #28
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	60da      	str	r2, [r3, #12]
 8002b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5e:	4b47      	ldr	r3, [pc, #284]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	4a46      	ldr	r2, [pc, #280]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6a:	4b44      	ldr	r3, [pc, #272]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	61bb      	str	r3, [r7, #24]
 8002b74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b76:	4b41      	ldr	r3, [pc, #260]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	4a40      	ldr	r2, [pc, #256]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b82:	4b3e      	ldr	r3, [pc, #248]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	4a3a      	ldr	r2, [pc, #232]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9a:	4b38      	ldr	r3, [pc, #224]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	4b35      	ldr	r3, [pc, #212]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	4a34      	ldr	r2, [pc, #208]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb2:	4b32      	ldr	r3, [pc, #200]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002bc4:	f043 0308 	orr.w	r3, r3, #8
 8002bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bca:	4b2c      	ldr	r3, [pc, #176]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bd6:	4b29      	ldr	r3, [pc, #164]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	4a28      	ldr	r2, [pc, #160]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002bdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be2:	4b26      	ldr	r3, [pc, #152]	@ (8002c7c <MX_GPIO_Init+0x134>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002bf4:	4822      	ldr	r0, [pc, #136]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002bf6:	f002 fe0f 	bl	8005818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2140      	movs	r1, #64	@ 0x40
 8002bfe:	4821      	ldr	r0, [pc, #132]	@ (8002c84 <MX_GPIO_Init+0x13c>)
 8002c00:	f002 fe0a 	bl	8005818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002c04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c14:	f107 031c 	add.w	r3, r7, #28
 8002c18:	4619      	mov	r1, r3
 8002c1a:	481b      	ldr	r0, [pc, #108]	@ (8002c88 <MX_GPIO_Init+0x140>)
 8002c1c:	f002 fc50 	bl	80054c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002c20:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c26:	2301      	movs	r3, #1
 8002c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c32:	f107 031c 	add.w	r3, r7, #28
 8002c36:	4619      	mov	r1, r3
 8002c38:	4811      	ldr	r0, [pc, #68]	@ (8002c80 <MX_GPIO_Init+0x138>)
 8002c3a:	f002 fc41 	bl	80054c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002c3e:	2340      	movs	r3, #64	@ 0x40
 8002c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c42:	2301      	movs	r3, #1
 8002c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002c4e:	f107 031c 	add.w	r3, r7, #28
 8002c52:	4619      	mov	r1, r3
 8002c54:	480b      	ldr	r0, [pc, #44]	@ (8002c84 <MX_GPIO_Init+0x13c>)
 8002c56:	f002 fc33 	bl	80054c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002c66:	f107 031c 	add.w	r3, r7, #28
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4805      	ldr	r0, [pc, #20]	@ (8002c84 <MX_GPIO_Init+0x13c>)
 8002c6e:	f002 fc27 	bl	80054c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c72:	bf00      	nop
 8002c74:	3730      	adds	r7, #48	@ 0x30
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40020400 	.word	0x40020400
 8002c84:	40021800 	.word	0x40021800
 8002c88:	40020800 	.word	0x40020800

08002c8c <ApplicationInit_Sequence>:

/* USER CODE BEGIN 4 */


static HAL_StatusTypeDef ApplicationInit_Sequence(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
    /* Start ADC with DMA */
    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE) != HAL_OK) {
 8002c90:	2205      	movs	r2, #5
 8002c92:	491c      	ldr	r1, [pc, #112]	@ (8002d04 <ApplicationInit_Sequence+0x78>)
 8002c94:	481c      	ldr	r0, [pc, #112]	@ (8002d08 <ApplicationInit_Sequence+0x7c>)
 8002c96:	f000 ffc9 	bl	8003c2c <HAL_ADC_Start_DMA>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <ApplicationInit_Sequence+0x18>
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e02d      	b.n	8002d00 <ApplicationInit_Sequence+0x74>
    }

    /* Initialize motor speed monitoring */
    if (MotorSpeed_Init(&htim4) != HAL_OK) {
 8002ca4:	4819      	ldr	r0, [pc, #100]	@ (8002d0c <ApplicationInit_Sequence+0x80>)
 8002ca6:	f000 f841 	bl	8002d2c <MotorSpeed_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <ApplicationInit_Sequence+0x28>
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e025      	b.n	8002d00 <ApplicationInit_Sequence+0x74>
    }

    /* Start timer input capture for all channels */
    if (HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1) != HAL_OK) return HAL_ERROR;
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4815      	ldr	r0, [pc, #84]	@ (8002d0c <ApplicationInit_Sequence+0x80>)
 8002cb8:	f005 fb26 	bl	8008308 <HAL_TIM_IC_Start_IT>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <ApplicationInit_Sequence+0x3a>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e01c      	b.n	8002d00 <ApplicationInit_Sequence+0x74>
    if (HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2) != HAL_OK) return HAL_ERROR;
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	4810      	ldr	r0, [pc, #64]	@ (8002d0c <ApplicationInit_Sequence+0x80>)
 8002cca:	f005 fb1d 	bl	8008308 <HAL_TIM_IC_Start_IT>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <ApplicationInit_Sequence+0x4c>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e013      	b.n	8002d00 <ApplicationInit_Sequence+0x74>
    if (HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3) != HAL_OK) return HAL_ERROR;
 8002cd8:	2108      	movs	r1, #8
 8002cda:	480c      	ldr	r0, [pc, #48]	@ (8002d0c <ApplicationInit_Sequence+0x80>)
 8002cdc:	f005 fb14 	bl	8008308 <HAL_TIM_IC_Start_IT>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <ApplicationInit_Sequence+0x5e>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00a      	b.n	8002d00 <ApplicationInit_Sequence+0x74>

    /* Initialize data acquisition system */
    if (DataAcq_Init() != HAL_OK) {
 8002cea:	f7ff faf9 	bl	80022e0 <DataAcq_Init>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <ApplicationInit_Sequence+0x6c>
    	return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e003      	b.n	8002d00 <ApplicationInit_Sequence+0x74>
    }

    /* Initialize BLDC interface */
    bldc_interface_uart_init(send_packet);
 8002cf8:	4805      	ldr	r0, [pc, #20]	@ (8002d10 <ApplicationInit_Sequence+0x84>)
 8002cfa:	f7ff f889 	bl	8001e10 <bldc_interface_uart_init>

    return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20001028 	.word	0x20001028
 8002d08:	20000c1c 	.word	0x20000c1c
 8002d0c:	20000e0c 	.word	0x20000e0c
 8002d10:	08001e71 	.word	0x08001e71

08002d14 <Application>:


static void Application(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
	usb_transmit_task();
 8002d18:	f000 fe1c 	bl	8003954 <usb_transmit_task>

}
 8002d1c:	bf00      	nop
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d24:	b672      	cpsid	i
}
 8002d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <Error_Handler+0x8>

08002d2c <MotorSpeed_Init>:

/**
 * @brief Initialize the motor speed monitoring module
 */
HAL_StatusTypeDef MotorSpeed_Init(TIM_HandleTypeDef* htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
    if (htim == NULL || htim->Instance != TIM4) {
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <MotorSpeed_Init+0x18>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d70 <MotorSpeed_Init+0x44>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d001      	beq.n	8002d48 <MotorSpeed_Init+0x1c>
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e00d      	b.n	8002d64 <MotorSpeed_Init+0x38>
    }

    motor_timer = htim;
 8002d48:	4a0a      	ldr	r2, [pc, #40]	@ (8002d74 <MotorSpeed_Init+0x48>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6013      	str	r3, [r2, #0]
    last_capture = 0;
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <MotorSpeed_Init+0x4c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
    pulse_period = 0;
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <MotorSpeed_Init+0x50>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    current_rpm = 0.0f;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <MotorSpeed_Init+0x54>)
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40000800 	.word	0x40000800
 8002d74:	20001044 	.word	0x20001044
 8002d78:	20001048 	.word	0x20001048
 8002d7c:	2000104c 	.word	0x2000104c
 8002d80:	20001050 	.word	0x20001050

08002d84 <MotorSpeed_GetRPM>:

/**
 * @brief Get the current motor speed in RPM
 */
float MotorSpeed_GetRPM(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
    return current_rpm;
 8002d88:	4b04      	ldr	r3, [pc, #16]	@ (8002d9c <MotorSpeed_GetRPM+0x18>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	ee07 3a90 	vmov	s15, r3
}
 8002d90:	eeb0 0a67 	vmov.f32	s0, s15
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	20001050 	.word	0x20001050

08002da0 <MotorSpeed_CalculatePeriod>:

/**
 * @brief Calculate time period between two captures, handling timer overflow
 */
static uint32_t MotorSpeed_CalculatePeriod(uint32_t current_capture)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
    if (current_capture > last_capture) {
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <MotorSpeed_CalculatePeriod+0x38>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d904      	bls.n	8002dbc <MotorSpeed_CalculatePeriod+0x1c>
        return current_capture - last_capture;
 8002db2:	4b09      	ldr	r3, [pc, #36]	@ (8002dd8 <MotorSpeed_CalculatePeriod+0x38>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	e006      	b.n	8002dca <MotorSpeed_CalculatePeriod+0x2a>
    } else {
        // Handle timer overflow
        return (0xFFFF - last_capture) + current_capture;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <MotorSpeed_CalculatePeriod+0x38>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	1ad2      	subs	r2, r2, r3
 8002dc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dc8:	4413      	add	r3, r2
    }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20001048 	.word	0x20001048

08002ddc <MotorSpeed_TimerCallback>:

/**
 * @brief Timer input capture callback handler
 */
void MotorSpeed_TimerCallback(TIM_HandleTypeDef* htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM4) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a26      	ldr	r2, [pc, #152]	@ (8002e84 <MotorSpeed_TimerCallback+0xa8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d143      	bne.n	8002e76 <MotorSpeed_TimerCallback+0x9a>
        return;
    }

    uint32_t current_capture = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]

    // Determine which channel triggered the interrupt
    switch (htim->Channel) {
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7f1b      	ldrb	r3, [r3, #28]
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d012      	beq.n	8002e20 <MotorSpeed_TimerCallback+0x44>
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	dc3d      	bgt.n	8002e7a <MotorSpeed_TimerCallback+0x9e>
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d002      	beq.n	8002e08 <MotorSpeed_TimerCallback+0x2c>
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d006      	beq.n	8002e14 <MotorSpeed_TimerCallback+0x38>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
            break;

        default:
            return;  // Invalid channel
 8002e06:	e038      	b.n	8002e7a <MotorSpeed_TimerCallback+0x9e>
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002e08:	2100      	movs	r1, #0
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f005 fe3a 	bl	8008a84 <HAL_TIM_ReadCapturedValue>
 8002e10:	60f8      	str	r0, [r7, #12]
            break;
 8002e12:	e00b      	b.n	8002e2c <MotorSpeed_TimerCallback+0x50>
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002e14:	2104      	movs	r1, #4
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f005 fe34 	bl	8008a84 <HAL_TIM_ReadCapturedValue>
 8002e1c:	60f8      	str	r0, [r7, #12]
            break;
 8002e1e:	e005      	b.n	8002e2c <MotorSpeed_TimerCallback+0x50>
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002e20:	2108      	movs	r1, #8
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f005 fe2e 	bl	8008a84 <HAL_TIM_ReadCapturedValue>
 8002e28:	60f8      	str	r0, [r7, #12]
            break;
 8002e2a:	bf00      	nop
    }

    // Calculate period between pulses
    pulse_period = MotorSpeed_CalculatePeriod(current_capture);
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff ffb7 	bl	8002da0 <MotorSpeed_CalculatePeriod>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4a14      	ldr	r2, [pc, #80]	@ (8002e88 <MotorSpeed_TimerCallback+0xac>)
 8002e36:	6013      	str	r3, [r2, #0]
    last_capture = current_capture;
 8002e38:	4a14      	ldr	r2, [pc, #80]	@ (8002e8c <MotorSpeed_TimerCallback+0xb0>)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6013      	str	r3, [r2, #0]

    // Calculate RPM
    if (pulse_period > 0) {
 8002e3e:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <MotorSpeed_TimerCallback+0xac>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d012      	beq.n	8002e6c <MotorSpeed_TimerCallback+0x90>
        // RPM = (60 * timer_clock) / (pulses_per_rev * pulse_period)
    	current_rpm = 60000000.0f / (MOTOR_SPEED_HALL_PULSES_PER_REV * pulse_period);
 8002e46:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <MotorSpeed_TimerCallback+0xac>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	00da      	lsls	r2, r3, #3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	ee07 3a90 	vmov	s15, r3
 8002e58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e5c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002e90 <MotorSpeed_TimerCallback+0xb4>
 8002e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <MotorSpeed_TimerCallback+0xb8>)
 8002e66:	edc3 7a00 	vstr	s15, [r3]
 8002e6a:	e007      	b.n	8002e7c <MotorSpeed_TimerCallback+0xa0>
    } else {
        current_rpm = 0.0f;  // Motor stopped
 8002e6c:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <MotorSpeed_TimerCallback+0xb8>)
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	e002      	b.n	8002e7c <MotorSpeed_TimerCallback+0xa0>
        return;
 8002e76:	bf00      	nop
 8002e78:	e000      	b.n	8002e7c <MotorSpeed_TimerCallback+0xa0>
            return;  // Invalid channel
 8002e7a:	bf00      	nop
    }
}
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40000800 	.word	0x40000800
 8002e88:	2000104c 	.word	0x2000104c
 8002e8c:	20001048 	.word	0x20001048
 8002e90:	4c64e1c0 	.word	0x4c64e1c0
 8002e94:	20001050 	.word	0x20001050

08002e98 <packet_init>:
} PACKET_STATE_t;

static PACKET_STATE_t handler_states[PACKET_HANDLERS];

void packet_init(void (*s_func)(unsigned char *data, unsigned int len),
		void (*p_func)(unsigned char *data, unsigned int len), int handler_num) {
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
	handler_states[handler_num].send_func = s_func;
 8002ea4:	490c      	ldr	r1, [pc, #48]	@ (8002ed8 <packet_init+0x40>)
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	015b      	lsls	r3, r3, #5
 8002eac:	4413      	add	r3, r2
 8002eae:	015b      	lsls	r3, r3, #5
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	601a      	str	r2, [r3, #0]
	handler_states[handler_num].process_func = p_func;
 8002eb8:	4907      	ldr	r1, [pc, #28]	@ (8002ed8 <packet_init+0x40>)
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	015b      	lsls	r3, r3, #5
 8002ec0:	4413      	add	r3, r2
 8002ec2:	015b      	lsls	r3, r3, #5
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	601a      	str	r2, [r3, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	20001054 	.word	0x20001054

08002edc <packet_send_packet>:

void packet_send_packet(unsigned char *data, unsigned int len, int handler_num) {
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
	if (len > PACKET_MAX_PL_LEN) {
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eee:	f200 80c8 	bhi.w	8003082 <packet_send_packet+0x1a6>
		return;
	}

	int b_ind = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]

	if (len <= 256) {
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002efc:	d820      	bhi.n	8002f40 <packet_send_packet+0x64>
		handler_states[handler_num].tx_buffer[b_ind++] = 2;
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	1c53      	adds	r3, r2, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	4861      	ldr	r0, [pc, #388]	@ (800308c <packet_send_packet+0x1b0>)
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	015b      	lsls	r3, r3, #5
 8002f0c:	440b      	add	r3, r1
 8002f0e:	015b      	lsls	r3, r3, #5
 8002f10:	4403      	add	r3, r0
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002f18:	2202      	movs	r2, #2
 8002f1a:	701a      	strb	r2, [r3, #0]
		handler_states[handler_num].tx_buffer[b_ind++] = len;
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	1c53      	adds	r3, r2, #1
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	b2dc      	uxtb	r4, r3
 8002f26:	4859      	ldr	r0, [pc, #356]	@ (800308c <packet_send_packet+0x1b0>)
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	015b      	lsls	r3, r3, #5
 8002f2e:	440b      	add	r3, r1
 8002f30:	015b      	lsls	r3, r3, #5
 8002f32:	4403      	add	r3, r0
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	e031      	b.n	8002fa4 <packet_send_packet+0xc8>
	} else {
		handler_states[handler_num].tx_buffer[b_ind++] = 3;
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	1c53      	adds	r3, r2, #1
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	4851      	ldr	r0, [pc, #324]	@ (800308c <packet_send_packet+0x1b0>)
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	015b      	lsls	r3, r3, #5
 8002f4e:	440b      	add	r3, r1
 8002f50:	015b      	lsls	r3, r3, #5
 8002f52:	4403      	add	r3, r0
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	701a      	strb	r2, [r3, #0]
		handler_states[handler_num].tx_buffer[b_ind++] = len >> 8;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	0a19      	lsrs	r1, r3, #8
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	1c53      	adds	r3, r2, #1
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	b2cc      	uxtb	r4, r1
 8002f6a:	4848      	ldr	r0, [pc, #288]	@ (800308c <packet_send_packet+0x1b0>)
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	015b      	lsls	r3, r3, #5
 8002f72:	440b      	add	r3, r1
 8002f74:	015b      	lsls	r3, r3, #5
 8002f76:	4403      	add	r3, r0
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002f7e:	4622      	mov	r2, r4
 8002f80:	701a      	strb	r2, [r3, #0]
		handler_states[handler_num].tx_buffer[b_ind++] = len & 0xFF;
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	1c53      	adds	r3, r2, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	b2dc      	uxtb	r4, r3
 8002f8c:	483f      	ldr	r0, [pc, #252]	@ (800308c <packet_send_packet+0x1b0>)
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	015b      	lsls	r3, r3, #5
 8002f94:	440b      	add	r3, r1
 8002f96:	015b      	lsls	r3, r3, #5
 8002f98:	4403      	add	r3, r0
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(handler_states[handler_num].tx_buffer + b_ind, data, len);
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	015b      	lsls	r3, r3, #5
 8002faa:	4413      	add	r3, r2
 8002fac:	015b      	lsls	r3, r3, #5
 8002fae:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002fb2:	4a36      	ldr	r2, [pc, #216]	@ (800308c <packet_send_packet+0x1b0>)
 8002fb4:	441a      	add	r2, r3
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	4413      	add	r3, r2
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	68f9      	ldr	r1, [r7, #12]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f00b fc3c 	bl	800e83c <memcpy>
	b_ind += len;
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4413      	add	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

	unsigned short crc = crc16(data, len);
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff f958 	bl	8002284 <crc16>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	827b      	strh	r3, [r7, #18]
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 8002fd8:	8a7b      	ldrh	r3, [r7, #18]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	b299      	uxth	r1, r3
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	1c53      	adds	r3, r2, #1
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	b2cc      	uxtb	r4, r1
 8002fe6:	4829      	ldr	r0, [pc, #164]	@ (800308c <packet_send_packet+0x1b0>)
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	460b      	mov	r3, r1
 8002fec:	015b      	lsls	r3, r3, #5
 8002fee:	440b      	add	r3, r1
 8002ff0:	015b      	lsls	r3, r3, #5
 8002ff2:	4403      	add	r3, r0
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002ffa:	4622      	mov	r2, r4
 8002ffc:	701a      	strb	r2, [r3, #0]
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	1c53      	adds	r3, r2, #1
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	8a7b      	ldrh	r3, [r7, #18]
 8003006:	b2dc      	uxtb	r4, r3
 8003008:	4820      	ldr	r0, [pc, #128]	@ (800308c <packet_send_packet+0x1b0>)
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	015b      	lsls	r3, r3, #5
 8003010:	440b      	add	r3, r1
 8003012:	015b      	lsls	r3, r3, #5
 8003014:	4403      	add	r3, r0
 8003016:	4413      	add	r3, r2
 8003018:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800301c:	4622      	mov	r2, r4
 800301e:	701a      	strb	r2, [r3, #0]
	handler_states[handler_num].tx_buffer[b_ind++] = 3;
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	1c53      	adds	r3, r2, #1
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	4819      	ldr	r0, [pc, #100]	@ (800308c <packet_send_packet+0x1b0>)
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	015b      	lsls	r3, r3, #5
 800302e:	440b      	add	r3, r1
 8003030:	015b      	lsls	r3, r3, #5
 8003032:	4403      	add	r3, r0
 8003034:	4413      	add	r3, r2
 8003036:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800303a:	2203      	movs	r2, #3
 800303c:	701a      	strb	r2, [r3, #0]

	if (handler_states[handler_num].send_func) {
 800303e:	4913      	ldr	r1, [pc, #76]	@ (800308c <packet_send_packet+0x1b0>)
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	015b      	lsls	r3, r3, #5
 8003046:	4413      	add	r3, r2
 8003048:	015b      	lsls	r3, r3, #5
 800304a:	440b      	add	r3, r1
 800304c:	3304      	adds	r3, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d017      	beq.n	8003084 <packet_send_packet+0x1a8>
		handler_states[handler_num].send_func(handler_states[handler_num].tx_buffer, b_ind);
 8003054:	490d      	ldr	r1, [pc, #52]	@ (800308c <packet_send_packet+0x1b0>)
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	015b      	lsls	r3, r3, #5
 800305c:	4413      	add	r3, r2
 800305e:	015b      	lsls	r3, r3, #5
 8003060:	440b      	add	r3, r1
 8003062:	3304      	adds	r3, #4
 8003064:	681c      	ldr	r4, [r3, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	015b      	lsls	r3, r3, #5
 800306c:	4413      	add	r3, r2
 800306e:	015b      	lsls	r3, r3, #5
 8003070:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003074:	4a05      	ldr	r2, [pc, #20]	@ (800308c <packet_send_packet+0x1b0>)
 8003076:	4413      	add	r3, r2
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	47a0      	blx	r4
 8003080:	e000      	b.n	8003084 <packet_send_packet+0x1a8>
		return;
 8003082:	bf00      	nop
	}
}
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}
 800308a:	bf00      	nop
 800308c:	20001054 	.word	0x20001054

08003090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <HAL_MspInit+0x44>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	4a0e      	ldr	r2, [pc, #56]	@ (80030d4 <HAL_MspInit+0x44>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a2:	4b0c      	ldr	r3, [pc, #48]	@ (80030d4 <HAL_MspInit+0x44>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ae:	4b09      	ldr	r3, [pc, #36]	@ (80030d4 <HAL_MspInit+0x44>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	4a08      	ldr	r2, [pc, #32]	@ (80030d4 <HAL_MspInit+0x44>)
 80030b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <HAL_MspInit+0x44>)
 80030bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800

080030d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	@ 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2d      	ldr	r2, [pc, #180]	@ (80031ac <HAL_ADC_MspInit+0xd4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d154      	bne.n	80031a4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030fa:	4b2d      	ldr	r3, [pc, #180]	@ (80031b0 <HAL_ADC_MspInit+0xd8>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	4a2c      	ldr	r2, [pc, #176]	@ (80031b0 <HAL_ADC_MspInit+0xd8>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003104:	6453      	str	r3, [r2, #68]	@ 0x44
 8003106:	4b2a      	ldr	r3, [pc, #168]	@ (80031b0 <HAL_ADC_MspInit+0xd8>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	4b27      	ldr	r3, [pc, #156]	@ (80031b0 <HAL_ADC_MspInit+0xd8>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	4a26      	ldr	r2, [pc, #152]	@ (80031b0 <HAL_ADC_MspInit+0xd8>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6313      	str	r3, [r2, #48]	@ 0x30
 800311e:	4b24      	ldr	r3, [pc, #144]	@ (80031b0 <HAL_ADC_MspInit+0xd8>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800312a:	2379      	movs	r3, #121	@ 0x79
 800312c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800312e:	2303      	movs	r3, #3
 8003130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	4619      	mov	r1, r3
 800313c:	481d      	ldr	r0, [pc, #116]	@ (80031b4 <HAL_ADC_MspInit+0xdc>)
 800313e:	f002 f9bf 	bl	80054c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003142:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003144:	4a1d      	ldr	r2, [pc, #116]	@ (80031bc <HAL_ADC_MspInit+0xe4>)
 8003146:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003148:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 800314a:	2200      	movs	r2, #0
 800314c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800314e:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800315a:	4b17      	ldr	r3, [pc, #92]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 800315c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003160:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003164:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003168:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800316a:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 800316c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003170:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003172:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003174:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003178:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800317a:	4b0f      	ldr	r3, [pc, #60]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 800317c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003180:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003182:	4b0d      	ldr	r3, [pc, #52]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 8003184:	2200      	movs	r2, #0
 8003186:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003188:	480b      	ldr	r0, [pc, #44]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 800318a:	f001 fa41 	bl	8004610 <HAL_DMA_Init>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8003194:	f7ff fdc4 	bl	8002d20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a07      	ldr	r2, [pc, #28]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 800319c:	639a      	str	r2, [r3, #56]	@ 0x38
 800319e:	4a06      	ldr	r2, [pc, #24]	@ (80031b8 <HAL_ADC_MspInit+0xe0>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80031a4:	bf00      	nop
 80031a6:	3728      	adds	r7, #40	@ 0x28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40012000 	.word	0x40012000
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40020000 	.word	0x40020000
 80031b8:	20000c64 	.word	0x20000c64
 80031bc:	40026410 	.word	0x40026410

080031c0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08e      	sub	sp, #56	@ 0x38
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003318 <HAL_ETH_MspInit+0x158>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	f040 8096 	bne.w	8003310 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80031e4:	4b4d      	ldr	r3, [pc, #308]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e8:	4a4c      	ldr	r2, [pc, #304]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 80031ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f0:	4b4a      	ldr	r3, [pc, #296]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f8:	623b      	str	r3, [r7, #32]
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	4b47      	ldr	r3, [pc, #284]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	4a46      	ldr	r2, [pc, #280]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 8003202:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003206:	6313      	str	r3, [r2, #48]	@ 0x30
 8003208:	4b44      	ldr	r3, [pc, #272]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4b41      	ldr	r3, [pc, #260]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 8003216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003218:	4a40      	ldr	r2, [pc, #256]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 800321a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800321e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003220:	4b3e      	ldr	r3, [pc, #248]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800322c:	4b3b      	ldr	r3, [pc, #236]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003230:	4a3a      	ldr	r2, [pc, #232]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 8003232:	f043 0304 	orr.w	r3, r3, #4
 8003236:	6313      	str	r3, [r2, #48]	@ 0x30
 8003238:	4b38      	ldr	r3, [pc, #224]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003244:	4b35      	ldr	r3, [pc, #212]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	4a34      	ldr	r2, [pc, #208]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003250:	4b32      	ldr	r3, [pc, #200]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325c:	4b2f      	ldr	r3, [pc, #188]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	4a2e      	ldr	r2, [pc, #184]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	6313      	str	r3, [r2, #48]	@ 0x30
 8003268:	4b2c      	ldr	r3, [pc, #176]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003274:	4b29      	ldr	r3, [pc, #164]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003278:	4a28      	ldr	r2, [pc, #160]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 800327a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800327e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003280:	4b26      	ldr	r3, [pc, #152]	@ (800331c <HAL_ETH_MspInit+0x15c>)
 8003282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800328c:	2332      	movs	r3, #50	@ 0x32
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003298:	2303      	movs	r3, #3
 800329a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800329c:	230b      	movs	r3, #11
 800329e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032a4:	4619      	mov	r1, r3
 80032a6:	481e      	ldr	r0, [pc, #120]	@ (8003320 <HAL_ETH_MspInit+0x160>)
 80032a8:	f002 f90a 	bl	80054c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80032ac:	2386      	movs	r3, #134	@ 0x86
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b0:	2302      	movs	r3, #2
 80032b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b8:	2303      	movs	r3, #3
 80032ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032bc:	230b      	movs	r3, #11
 80032be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c4:	4619      	mov	r1, r3
 80032c6:	4817      	ldr	r0, [pc, #92]	@ (8003324 <HAL_ETH_MspInit+0x164>)
 80032c8:	f002 f8fa 	bl	80054c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80032cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032da:	2303      	movs	r3, #3
 80032dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032de:	230b      	movs	r3, #11
 80032e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80032e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e6:	4619      	mov	r1, r3
 80032e8:	480f      	ldr	r0, [pc, #60]	@ (8003328 <HAL_ETH_MspInit+0x168>)
 80032ea:	f002 f8e9 	bl	80054c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80032ee:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f4:	2302      	movs	r3, #2
 80032f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fc:	2303      	movs	r3, #3
 80032fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003300:	230b      	movs	r3, #11
 8003302:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003308:	4619      	mov	r1, r3
 800330a:	4808      	ldr	r0, [pc, #32]	@ (800332c <HAL_ETH_MspInit+0x16c>)
 800330c:	f002 f8d8 	bl	80054c0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8003310:	bf00      	nop
 8003312:	3738      	adds	r7, #56	@ 0x38
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40028000 	.word	0x40028000
 800331c:	40023800 	.word	0x40023800
 8003320:	40020800 	.word	0x40020800
 8003324:	40020000 	.word	0x40020000
 8003328:	40020400 	.word	0x40020400
 800332c:	40021800 	.word	0x40021800

08003330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	@ 0x30
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	f107 031c 	add.w	r3, r7, #28
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003350:	d114      	bne.n	800337c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003352:	4b34      	ldr	r3, [pc, #208]	@ (8003424 <HAL_TIM_Base_MspInit+0xf4>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	4a33      	ldr	r2, [pc, #204]	@ (8003424 <HAL_TIM_Base_MspInit+0xf4>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6413      	str	r3, [r2, #64]	@ 0x40
 800335e:	4b31      	ldr	r3, [pc, #196]	@ (8003424 <HAL_TIM_Base_MspInit+0xf4>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800336a:	2200      	movs	r2, #0
 800336c:	2101      	movs	r1, #1
 800336e:	201c      	movs	r0, #28
 8003370:	f001 f917 	bl	80045a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003374:	201c      	movs	r0, #28
 8003376:	f001 f930 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800337a:	e04f      	b.n	800341c <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM3)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a29      	ldr	r2, [pc, #164]	@ (8003428 <HAL_TIM_Base_MspInit+0xf8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d114      	bne.n	80033b0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003386:	4b27      	ldr	r3, [pc, #156]	@ (8003424 <HAL_TIM_Base_MspInit+0xf4>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	4a26      	ldr	r2, [pc, #152]	@ (8003424 <HAL_TIM_Base_MspInit+0xf4>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	6413      	str	r3, [r2, #64]	@ 0x40
 8003392:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <HAL_TIM_Base_MspInit+0xf4>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800339e:	2200      	movs	r2, #0
 80033a0:	2101      	movs	r1, #1
 80033a2:	201d      	movs	r0, #29
 80033a4:	f001 f8fd 	bl	80045a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033a8:	201d      	movs	r0, #29
 80033aa:	f001 f916 	bl	80045da <HAL_NVIC_EnableIRQ>
}
 80033ae:	e035      	b.n	800341c <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM4)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1d      	ldr	r2, [pc, #116]	@ (800342c <HAL_TIM_Base_MspInit+0xfc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d130      	bne.n	800341c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003424 <HAL_TIM_Base_MspInit+0xf4>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	4a19      	ldr	r2, [pc, #100]	@ (8003424 <HAL_TIM_Base_MspInit+0xf4>)
 80033c0:	f043 0304 	orr.w	r3, r3, #4
 80033c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c6:	4b17      	ldr	r3, [pc, #92]	@ (8003424 <HAL_TIM_Base_MspInit+0xf4>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f003 0304 	and.w	r3, r3, #4
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033d2:	4b14      	ldr	r3, [pc, #80]	@ (8003424 <HAL_TIM_Base_MspInit+0xf4>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	4a13      	ldr	r2, [pc, #76]	@ (8003424 <HAL_TIM_Base_MspInit+0xf4>)
 80033d8:	f043 0308 	orr.w	r3, r3, #8
 80033dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033de:	4b11      	ldr	r3, [pc, #68]	@ (8003424 <HAL_TIM_Base_MspInit+0xf4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80033ea:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80033ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f0:	2302      	movs	r3, #2
 80033f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f8:	2300      	movs	r3, #0
 80033fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033fc:	2302      	movs	r3, #2
 80033fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003400:	f107 031c 	add.w	r3, r7, #28
 8003404:	4619      	mov	r1, r3
 8003406:	480a      	ldr	r0, [pc, #40]	@ (8003430 <HAL_TIM_Base_MspInit+0x100>)
 8003408:	f002 f85a 	bl	80054c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800340c:	2200      	movs	r2, #0
 800340e:	2100      	movs	r1, #0
 8003410:	201e      	movs	r0, #30
 8003412:	f001 f8c6 	bl	80045a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003416:	201e      	movs	r0, #30
 8003418:	f001 f8df 	bl	80045da <HAL_NVIC_EnableIRQ>
}
 800341c:	bf00      	nop
 800341e:	3730      	adds	r7, #48	@ 0x30
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	40000400 	.word	0x40000400
 800342c:	40000800 	.word	0x40000800
 8003430:	40020c00 	.word	0x40020c00

08003434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b0b0      	sub	sp, #192	@ 0xc0
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800344c:	f107 031c 	add.w	r3, r7, #28
 8003450:	2290      	movs	r2, #144	@ 0x90
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f00b f9ad 	bl	800e7b4 <memset>
  if(huart->Instance==USART2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a76      	ldr	r2, [pc, #472]	@ (8003638 <HAL_UART_MspInit+0x204>)
 8003460:	4293      	cmp	r3, r2
 8003462:	f040 80a2 	bne.w	80035aa <HAL_UART_MspInit+0x176>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003466:	2380      	movs	r3, #128	@ 0x80
 8003468:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800346a:	2300      	movs	r3, #0
 800346c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800346e:	f107 031c 	add.w	r3, r7, #28
 8003472:	4618      	mov	r0, r3
 8003474:	f004 f9c0 	bl	80077f8 <HAL_RCCEx_PeriphCLKConfig>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800347e:	f7ff fc4f 	bl	8002d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003482:	4b6e      	ldr	r3, [pc, #440]	@ (800363c <HAL_UART_MspInit+0x208>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	4a6d      	ldr	r2, [pc, #436]	@ (800363c <HAL_UART_MspInit+0x208>)
 8003488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800348c:	6413      	str	r3, [r2, #64]	@ 0x40
 800348e:	4b6b      	ldr	r3, [pc, #428]	@ (800363c <HAL_UART_MspInit+0x208>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800349a:	4b68      	ldr	r3, [pc, #416]	@ (800363c <HAL_UART_MspInit+0x208>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	4a67      	ldr	r2, [pc, #412]	@ (800363c <HAL_UART_MspInit+0x208>)
 80034a0:	f043 0308 	orr.w	r3, r3, #8
 80034a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034a6:	4b65      	ldr	r3, [pc, #404]	@ (800363c <HAL_UART_MspInit+0x208>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80034b2:	2360      	movs	r3, #96	@ 0x60
 80034b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c4:	2303      	movs	r3, #3
 80034c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034ca:	2307      	movs	r3, #7
 80034cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80034d4:	4619      	mov	r1, r3
 80034d6:	485a      	ldr	r0, [pc, #360]	@ (8003640 <HAL_UART_MspInit+0x20c>)
 80034d8:	f001 fff2 	bl	80054c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80034dc:	4b59      	ldr	r3, [pc, #356]	@ (8003644 <HAL_UART_MspInit+0x210>)
 80034de:	4a5a      	ldr	r2, [pc, #360]	@ (8003648 <HAL_UART_MspInit+0x214>)
 80034e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80034e2:	4b58      	ldr	r3, [pc, #352]	@ (8003644 <HAL_UART_MspInit+0x210>)
 80034e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80034e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ea:	4b56      	ldr	r3, [pc, #344]	@ (8003644 <HAL_UART_MspInit+0x210>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f0:	4b54      	ldr	r3, [pc, #336]	@ (8003644 <HAL_UART_MspInit+0x210>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034f6:	4b53      	ldr	r3, [pc, #332]	@ (8003644 <HAL_UART_MspInit+0x210>)
 80034f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034fe:	4b51      	ldr	r3, [pc, #324]	@ (8003644 <HAL_UART_MspInit+0x210>)
 8003500:	2200      	movs	r2, #0
 8003502:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003504:	4b4f      	ldr	r3, [pc, #316]	@ (8003644 <HAL_UART_MspInit+0x210>)
 8003506:	2200      	movs	r2, #0
 8003508:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800350a:	4b4e      	ldr	r3, [pc, #312]	@ (8003644 <HAL_UART_MspInit+0x210>)
 800350c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003510:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003512:	4b4c      	ldr	r3, [pc, #304]	@ (8003644 <HAL_UART_MspInit+0x210>)
 8003514:	2200      	movs	r2, #0
 8003516:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003518:	4b4a      	ldr	r3, [pc, #296]	@ (8003644 <HAL_UART_MspInit+0x210>)
 800351a:	2200      	movs	r2, #0
 800351c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800351e:	4849      	ldr	r0, [pc, #292]	@ (8003644 <HAL_UART_MspInit+0x210>)
 8003520:	f001 f876 	bl	8004610 <HAL_DMA_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800352a:	f7ff fbf9 	bl	8002d20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a44      	ldr	r2, [pc, #272]	@ (8003644 <HAL_UART_MspInit+0x210>)
 8003532:	675a      	str	r2, [r3, #116]	@ 0x74
 8003534:	4a43      	ldr	r2, [pc, #268]	@ (8003644 <HAL_UART_MspInit+0x210>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800353a:	4b44      	ldr	r3, [pc, #272]	@ (800364c <HAL_UART_MspInit+0x218>)
 800353c:	4a44      	ldr	r2, [pc, #272]	@ (8003650 <HAL_UART_MspInit+0x21c>)
 800353e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003540:	4b42      	ldr	r3, [pc, #264]	@ (800364c <HAL_UART_MspInit+0x218>)
 8003542:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003546:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003548:	4b40      	ldr	r3, [pc, #256]	@ (800364c <HAL_UART_MspInit+0x218>)
 800354a:	2240      	movs	r2, #64	@ 0x40
 800354c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800354e:	4b3f      	ldr	r3, [pc, #252]	@ (800364c <HAL_UART_MspInit+0x218>)
 8003550:	2200      	movs	r2, #0
 8003552:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003554:	4b3d      	ldr	r3, [pc, #244]	@ (800364c <HAL_UART_MspInit+0x218>)
 8003556:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800355a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800355c:	4b3b      	ldr	r3, [pc, #236]	@ (800364c <HAL_UART_MspInit+0x218>)
 800355e:	2200      	movs	r2, #0
 8003560:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003562:	4b3a      	ldr	r3, [pc, #232]	@ (800364c <HAL_UART_MspInit+0x218>)
 8003564:	2200      	movs	r2, #0
 8003566:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003568:	4b38      	ldr	r3, [pc, #224]	@ (800364c <HAL_UART_MspInit+0x218>)
 800356a:	2200      	movs	r2, #0
 800356c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800356e:	4b37      	ldr	r3, [pc, #220]	@ (800364c <HAL_UART_MspInit+0x218>)
 8003570:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003574:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003576:	4b35      	ldr	r3, [pc, #212]	@ (800364c <HAL_UART_MspInit+0x218>)
 8003578:	2200      	movs	r2, #0
 800357a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800357c:	4833      	ldr	r0, [pc, #204]	@ (800364c <HAL_UART_MspInit+0x218>)
 800357e:	f001 f847 	bl	8004610 <HAL_DMA_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8003588:	f7ff fbca 	bl	8002d20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a2f      	ldr	r2, [pc, #188]	@ (800364c <HAL_UART_MspInit+0x218>)
 8003590:	671a      	str	r2, [r3, #112]	@ 0x70
 8003592:	4a2e      	ldr	r2, [pc, #184]	@ (800364c <HAL_UART_MspInit+0x218>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8003598:	2200      	movs	r2, #0
 800359a:	2101      	movs	r1, #1
 800359c:	2026      	movs	r0, #38	@ 0x26
 800359e:	f001 f800 	bl	80045a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035a2:	2026      	movs	r0, #38	@ 0x26
 80035a4:	f001 f819 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80035a8:	e041      	b.n	800362e <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a29      	ldr	r2, [pc, #164]	@ (8003654 <HAL_UART_MspInit+0x220>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d13c      	bne.n	800362e <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80035ba:	2300      	movs	r3, #0
 80035bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035be:	f107 031c 	add.w	r3, r7, #28
 80035c2:	4618      	mov	r0, r3
 80035c4:	f004 f918 	bl	80077f8 <HAL_RCCEx_PeriphCLKConfig>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 80035ce:	f7ff fba7 	bl	8002d20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035d2:	4b1a      	ldr	r3, [pc, #104]	@ (800363c <HAL_UART_MspInit+0x208>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	4a19      	ldr	r2, [pc, #100]	@ (800363c <HAL_UART_MspInit+0x208>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035de:	4b17      	ldr	r3, [pc, #92]	@ (800363c <HAL_UART_MspInit+0x208>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ea:	4b14      	ldr	r3, [pc, #80]	@ (800363c <HAL_UART_MspInit+0x208>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	4a13      	ldr	r2, [pc, #76]	@ (800363c <HAL_UART_MspInit+0x208>)
 80035f0:	f043 0308 	orr.w	r3, r3, #8
 80035f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f6:	4b11      	ldr	r3, [pc, #68]	@ (800363c <HAL_UART_MspInit+0x208>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003602:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003616:	2303      	movs	r3, #3
 8003618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800361c:	2307      	movs	r3, #7
 800361e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003622:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003626:	4619      	mov	r1, r3
 8003628:	4805      	ldr	r0, [pc, #20]	@ (8003640 <HAL_UART_MspInit+0x20c>)
 800362a:	f001 ff49 	bl	80054c0 <HAL_GPIO_Init>
}
 800362e:	bf00      	nop
 8003630:	37c0      	adds	r7, #192	@ 0xc0
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40004400 	.word	0x40004400
 800363c:	40023800 	.word	0x40023800
 8003640:	40020c00 	.word	0x40020c00
 8003644:	20000f68 	.word	0x20000f68
 8003648:	40026088 	.word	0x40026088
 800364c:	20000fc8 	.word	0x20000fc8
 8003650:	400260a0 	.word	0x400260a0
 8003654:	40004800 	.word	0x40004800

08003658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800365c:	bf00      	nop
 800365e:	e7fd      	b.n	800365c <NMI_Handler+0x4>

08003660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <HardFault_Handler+0x4>

08003668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800366c:	bf00      	nop
 800366e:	e7fd      	b.n	800366c <MemManage_Handler+0x4>

08003670 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <BusFault_Handler+0x4>

08003678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <UsageFault_Handler+0x4>

08003680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800368e:	b480      	push	{r7}
 8003690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036ae:	f000 fa35 	bl	8003b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80036bc:	4802      	ldr	r0, [pc, #8]	@ (80036c8 <DMA1_Stream5_IRQHandler+0x10>)
 80036be:	f001 f947 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000f68 	.word	0x20000f68

080036cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80036d0:	4802      	ldr	r0, [pc, #8]	@ (80036dc <DMA1_Stream6_IRQHandler+0x10>)
 80036d2:	f001 f93d 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000fc8 	.word	0x20000fc8

080036e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036e4:	4802      	ldr	r0, [pc, #8]	@ (80036f0 <TIM2_IRQHandler+0x10>)
 80036e6:	f004 ff5f 	bl	80085a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000d74 	.word	0x20000d74

080036f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036f8:	4802      	ldr	r0, [pc, #8]	@ (8003704 <TIM3_IRQHandler+0x10>)
 80036fa:	f004 ff55 	bl	80085a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000dc0 	.word	0x20000dc0

08003708 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800370c:	4802      	ldr	r0, [pc, #8]	@ (8003718 <TIM4_IRQHandler+0x10>)
 800370e:	f004 ff4b 	bl	80085a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000e0c 	.word	0x20000e0c

0800371c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003720:	4802      	ldr	r0, [pc, #8]	@ (800372c <USART2_IRQHandler+0x10>)
 8003722:	f005 fe1d 	bl	8009360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000e58 	.word	0x20000e58

08003730 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003734:	4802      	ldr	r0, [pc, #8]	@ (8003740 <DMA2_Stream0_IRQHandler+0x10>)
 8003736:	f001 f90b 	bl	8004950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000c64 	.word	0x20000c64

08003744 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003748:	4802      	ldr	r0, [pc, #8]	@ (8003754 <OTG_FS_IRQHandler+0x10>)
 800374a:	f002 f9d0 	bl	8005aee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2006ff68 	.word	0x2006ff68

08003758 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a04      	ldr	r2, [pc, #16]	@ (8003778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d102      	bne.n	8003770 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		DataAcq_ProcessSamples(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fe fe10 	bl	8002390 <DataAcq_ProcessSamples>
	}

}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40000400 	.word	0x40000400

0800377c <HAL_ADC_ConvCpltCallback>:


/*ADC Measurement*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	// Called when DMA fills the ENTIRE buffer
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8003784:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003788:	4803      	ldr	r0, [pc, #12]	@ (8003798 <HAL_ADC_ConvCpltCallback+0x1c>)
 800378a:	f002 f85e 	bl	800584a <HAL_GPIO_TogglePin>

}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40020400 	.word	0x40020400

0800379c <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	MotorSpeed_TimerCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fb19 	bl	8002ddc <MotorSpeed_TimerCallback>
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037bc:	4a14      	ldr	r2, [pc, #80]	@ (8003810 <_sbrk+0x5c>)
 80037be:	4b15      	ldr	r3, [pc, #84]	@ (8003814 <_sbrk+0x60>)
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037c8:	4b13      	ldr	r3, [pc, #76]	@ (8003818 <_sbrk+0x64>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <_sbrk+0x64>)
 80037d2:	4a12      	ldr	r2, [pc, #72]	@ (800381c <_sbrk+0x68>)
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037d6:	4b10      	ldr	r3, [pc, #64]	@ (8003818 <_sbrk+0x64>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d207      	bcs.n	80037f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037e4:	f00a fffe 	bl	800e7e4 <__errno>
 80037e8:	4603      	mov	r3, r0
 80037ea:	220c      	movs	r2, #12
 80037ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
 80037f2:	e009      	b.n	8003808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037f4:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <_sbrk+0x64>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037fa:	4b07      	ldr	r3, [pc, #28]	@ (8003818 <_sbrk+0x64>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	4a05      	ldr	r2, [pc, #20]	@ (8003818 <_sbrk+0x64>)
 8003804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20080000 	.word	0x20080000
 8003814:	00000400 	.word	0x00000400
 8003818:	20001474 	.word	0x20001474
 800381c:	20070590 	.word	0x20070590

08003820 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003824:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <SystemInit+0x20>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382a:	4a05      	ldr	r2, [pc, #20]	@ (8003840 <SystemInit+0x20>)
 800382c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003830:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003834:	bf00      	nop
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <transmit_usb_packet>:
extern uint32_t time_ms;

// Assuming usb_buffer is defined like this (adjust types if needed):
// uint32_t usb_buffer[2][5][USB_BUFFER_SIZE];
// Function to transmit a single USB packet
static uint8_t transmit_usb_packet(uint32_t* data, uint16_t data_len) {
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	807b      	strh	r3, [r7, #2]
    uint8_t status;
    uint32_t start_time = HAL_GetTick();
 8003850:	f000 f978 	bl	8003b44 <HAL_GetTick>
 8003854:	6178      	str	r0, [r7, #20]

    do {
        status = CDC_Transmit_FS((uint8_t*)data, data_len);
 8003856:	887b      	ldrh	r3, [r7, #2]
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f00a fa14 	bl	800dc88 <CDC_Transmit_FS>
 8003860:	4603      	mov	r3, r0
 8003862:	74fb      	strb	r3, [r7, #19]
    } while (status != USBD_OK);
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f5      	bne.n	8003856 <transmit_usb_packet+0x12>

    uint32_t transmit_time = HAL_GetTick() - start_time;
 800386a:	f000 f96b 	bl	8003b44 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	60fb      	str	r3, [r7, #12]

    if (transmit_time > 10) {
        // Log or debug if transmit time exceeds threshold
    }
    return status; // Return the status of transmission.
 8003876:	7cfb      	ldrb	r3, [r7, #19]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <process_and_transmit_buffer>:


// Function to process and transmit a buffer
static void process_and_transmit_buffer(uint8_t buffer_index, uint32_t* packet_counter) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b08c      	sub	sp, #48	@ 0x30
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	6039      	str	r1, [r7, #0]
 800388a:	71fb      	strb	r3, [r7, #7]
    for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++) {
 800388c:	2300      	movs	r3, #0
 800388e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003890:	e052      	b.n	8003938 <process_and_transmit_buffer+0xb8>
        uint32_t header = 0xddccbbaa;
 8003892:	4b2e      	ldr	r3, [pc, #184]	@ (800394c <process_and_transmit_buffer+0xcc>)
 8003894:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint32_t values[7] = {
 8003896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003898:	60fb      	str	r3, [r7, #12]
            header,
            (*packet_counter)++, // Increment and use the packet counter. Important to dereference it.
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	1c59      	adds	r1, r3, #1
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	6011      	str	r1, [r2, #0]
        uint32_t values[7] = {
 80038a4:	613b      	str	r3, [r7, #16]
            usb_buffer[buffer_index][0][i],
 80038a6:	79fa      	ldrb	r2, [r7, #7]
 80038a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80038aa:	4929      	ldr	r1, [pc, #164]	@ (8003950 <process_and_transmit_buffer+0xd0>)
 80038ac:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 80038b0:	fb00 f202 	mul.w	r2, r0, r2
 80038b4:	4413      	add	r3, r2
 80038b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 80038ba:	617b      	str	r3, [r7, #20]
            usb_buffer[buffer_index][1][i],
 80038bc:	79fa      	ldrb	r2, [r7, #7]
 80038be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80038c0:	4923      	ldr	r1, [pc, #140]	@ (8003950 <process_and_transmit_buffer+0xd0>)
 80038c2:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 80038c6:	fb00 f202 	mul.w	r2, r0, r2
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 80038d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 80038d4:	61bb      	str	r3, [r7, #24]
            usb_buffer[buffer_index][2][i],
 80038d6:	79fa      	ldrb	r2, [r7, #7]
 80038d8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80038da:	491d      	ldr	r1, [pc, #116]	@ (8003950 <process_and_transmit_buffer+0xd0>)
 80038dc:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 80038e0:	fb00 f202 	mul.w	r2, r0, r2
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 80038ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 80038ee:	61fb      	str	r3, [r7, #28]
            usb_buffer[buffer_index][3][i],
 80038f0:	79fa      	ldrb	r2, [r7, #7]
 80038f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80038f4:	4916      	ldr	r1, [pc, #88]	@ (8003950 <process_and_transmit_buffer+0xd0>)
 80038f6:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 80038fa:	fb00 f202 	mul.w	r2, r0, r2
 80038fe:	441a      	add	r2, r3
 8003900:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8003904:	4413      	add	r3, r2
 8003906:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 800390a:	623b      	str	r3, [r7, #32]
            usb_buffer[buffer_index][4][i]
 800390c:	79fa      	ldrb	r2, [r7, #7]
 800390e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003910:	490f      	ldr	r1, [pc, #60]	@ (8003950 <process_and_transmit_buffer+0xd0>)
 8003912:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 8003916:	fb00 f202 	mul.w	r2, r0, r2
 800391a:	4413      	add	r3, r2
 800391c:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8003920:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 8003924:	627b      	str	r3, [r7, #36]	@ 0x24
        };

        transmit_usb_packet(values, sizeof(values));
 8003926:	f107 030c 	add.w	r3, r7, #12
 800392a:	211c      	movs	r1, #28
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff89 	bl	8003844 <transmit_usb_packet>
    for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++) {
 8003932:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003934:	3301      	adds	r3, #1
 8003936:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003938:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800393a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800393e:	d3a8      	bcc.n	8003892 <process_and_transmit_buffer+0x12>
    }
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	3730      	adds	r7, #48	@ 0x30
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	ddccbbaa 	.word	0xddccbbaa
 8003950:	2000147c 	.word	0x2000147c

08003954 <usb_transmit_task>:


void usb_transmit_task() {
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
    if (buffer_ready_flag == BUFFER_STATE_READY_0) {
 8003958:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <usb_transmit_task+0x3c>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d107      	bne.n	8003972 <usb_transmit_task+0x1e>
        process_and_transmit_buffer(0, &packet_counter);
 8003962:	490c      	ldr	r1, [pc, #48]	@ (8003994 <usb_transmit_task+0x40>)
 8003964:	2000      	movs	r0, #0
 8003966:	f7ff ff8b 	bl	8003880 <process_and_transmit_buffer>
        buffer_ready_flag = BUFFER_STATE_BUSY;
 800396a:	4b09      	ldr	r3, [pc, #36]	@ (8003990 <usb_transmit_task+0x3c>)
 800396c:	2203      	movs	r2, #3
 800396e:	701a      	strb	r2, [r3, #0]
    } else if (buffer_ready_flag == BUFFER_STATE_READY_1) {
        process_and_transmit_buffer(1, &packet_counter);
        buffer_ready_flag = BUFFER_STATE_BUSY;
    }
}
 8003970:	e00b      	b.n	800398a <usb_transmit_task+0x36>
    } else if (buffer_ready_flag == BUFFER_STATE_READY_1) {
 8003972:	4b07      	ldr	r3, [pc, #28]	@ (8003990 <usb_transmit_task+0x3c>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	d106      	bne.n	800398a <usb_transmit_task+0x36>
        process_and_transmit_buffer(1, &packet_counter);
 800397c:	4905      	ldr	r1, [pc, #20]	@ (8003994 <usb_transmit_task+0x40>)
 800397e:	2001      	movs	r0, #1
 8003980:	f7ff ff7e 	bl	8003880 <process_and_transmit_buffer>
        buffer_ready_flag = BUFFER_STATE_BUSY;
 8003984:	4b02      	ldr	r3, [pc, #8]	@ (8003990 <usb_transmit_task+0x3c>)
 8003986:	2203      	movs	r2, #3
 8003988:	701a      	strb	r2, [r3, #0]
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000bdd 	.word	0x20000bdd
 8003994:	2006ea7c 	.word	0x2006ea7c

08003998 <CDC_Receive_FS_App>:

uint8_t CDC_Receive_FS_App(uint8_t *Buf, uint32_t *Len)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]

  HAL_GPIO_TogglePin(GPIOB, LD2_Pin); // Example: Toggle an LED
 80039a2:	2180      	movs	r1, #128	@ 0x80
 80039a4:	4821      	ldr	r0, [pc, #132]	@ (8003a2c <CDC_Receive_FS_App+0x94>)
 80039a6:	f001 ff50 	bl	800584a <HAL_GPIO_TogglePin>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf); // Re-arm the receive buffer
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4820      	ldr	r0, [pc, #128]	@ (8003a30 <CDC_Receive_FS_App+0x98>)
 80039ae:	f008 fce9 	bl	800c384 <USBD_CDC_SetRxBuffer>
  // Process received command
  if (*Len > 0) {
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d033      	beq.n	8003a22 <CDC_Receive_FS_App+0x8a>
    if (Buf[0] == 'S') { // Start command
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b53      	cmp	r3, #83	@ 0x53
 80039c0:	d11b      	bne.n	80039fa <CDC_Receive_FS_App+0x62>
      if (!data_acquisition_running) {
 80039c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a34 <CDC_Receive_FS_App+0x9c>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d12b      	bne.n	8003a22 <CDC_Receive_FS_App+0x8a>
        HAL_TIM_Base_Start_IT(&htim3); // Start TIM3 and interrupts
 80039ca:	481b      	ldr	r0, [pc, #108]	@ (8003a38 <CDC_Receive_FS_App+0xa0>)
 80039cc:	f004 fb94 	bl	80080f8 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim2); // Start TIM2 and interrupts (if needed for toggling)
 80039d0:	481a      	ldr	r0, [pc, #104]	@ (8003a3c <CDC_Receive_FS_App+0xa4>)
 80039d2:	f004 fb91 	bl	80080f8 <HAL_TIM_Base_Start_IT>
        data_acquisition_running = 1;
 80039d6:	4b17      	ldr	r3, [pc, #92]	@ (8003a34 <CDC_Receive_FS_App+0x9c>)
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
        buffer_ready_flag = 3; // Set to initial not ready value.
 80039dc:	4b18      	ldr	r3, [pc, #96]	@ (8003a40 <CDC_Receive_FS_App+0xa8>)
 80039de:	2203      	movs	r2, #3
 80039e0:	701a      	strb	r2, [r3, #0]
        packet_counter = 0; // Reset packet counter
 80039e2:	4b18      	ldr	r3, [pc, #96]	@ (8003a44 <CDC_Receive_FS_App+0xac>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
        DataAcq_Init();
 80039e8:	f7fe fc7a 	bl	80022e0 <DataAcq_Init>
        MotorSpeed_Init(&htim4);
 80039ec:	4816      	ldr	r0, [pc, #88]	@ (8003a48 <CDC_Receive_FS_App+0xb0>)
 80039ee:	f7ff f99d 	bl	8002d2c <MotorSpeed_Init>
        active_buffer = 0;
 80039f2:	4b16      	ldr	r3, [pc, #88]	@ (8003a4c <CDC_Receive_FS_App+0xb4>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
 80039f8:	e013      	b.n	8003a22 <CDC_Receive_FS_App+0x8a>
      } else {
      }
    } else if (Buf[0] == 'T') { // Stop command
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b54      	cmp	r3, #84	@ 0x54
 8003a00:	d10f      	bne.n	8003a22 <CDC_Receive_FS_App+0x8a>
      if (data_acquisition_running) {
 8003a02:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <CDC_Receive_FS_App+0x9c>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <CDC_Receive_FS_App+0x8a>
        HAL_TIM_Base_Stop_IT(&htim3); // Stop TIM3 and interrupts
 8003a0a:	480b      	ldr	r0, [pc, #44]	@ (8003a38 <CDC_Receive_FS_App+0xa0>)
 8003a0c:	f004 fbec 	bl	80081e8 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Stop_IT(&htim2); // Stop TIM2 and interrupts
 8003a10:	480a      	ldr	r0, [pc, #40]	@ (8003a3c <CDC_Receive_FS_App+0xa4>)
 8003a12:	f004 fbe9 	bl	80081e8 <HAL_TIM_Base_Stop_IT>
        data_acquisition_running = 0;
 8003a16:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <CDC_Receive_FS_App+0x9c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
        buffer_ready_flag = 3; // Ensure sending loop stops gracefully
 8003a1c:	4b08      	ldr	r3, [pc, #32]	@ (8003a40 <CDC_Receive_FS_App+0xa8>)
 8003a1e:	2203      	movs	r2, #3
 8003a20:	701a      	strb	r2, [r3, #0]
      } else {
      }
    } else {
    }
  }
  return USBD_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40020400 	.word	0x40020400
 8003a30:	2006ea8c 	.word	0x2006ea8c
 8003a34:	2006ea80 	.word	0x2006ea80
 8003a38:	20000dc0 	.word	0x20000dc0
 8003a3c:	20000d74 	.word	0x20000d74
 8003a40:	20000bdd 	.word	0x20000bdd
 8003a44:	2006ea7c 	.word	0x2006ea7c
 8003a48:	20000e0c 	.word	0x20000e0c
 8003a4c:	20001478 	.word	0x20001478

08003a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a54:	f7ff fee4 	bl	8003820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a58:	480c      	ldr	r0, [pc, #48]	@ (8003a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a5a:	490d      	ldr	r1, [pc, #52]	@ (8003a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a60:	e002      	b.n	8003a68 <LoopCopyDataInit>

08003a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a66:	3304      	adds	r3, #4

08003a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a6c:	d3f9      	bcc.n	8003a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a70:	4c0a      	ldr	r4, [pc, #40]	@ (8003a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a74:	e001      	b.n	8003a7a <LoopFillZerobss>

08003a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a78:	3204      	adds	r2, #4

08003a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a7c:	d3fb      	bcc.n	8003a76 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a7e:	f00a feb7 	bl	800e7f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a82:	f7fe fd37 	bl	80024f4 <main>
  bx  lr    
 8003a86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a88:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a90:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8003a94:	0800efa8 	.word	0x0800efa8
  ldr r2, =_sbss
 8003a98:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8003a9c:	20070590 	.word	0x20070590

08003aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003aa0:	e7fe      	b.n	8003aa0 <ADC_IRQHandler>

08003aa2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aa6:	2003      	movs	r0, #3
 8003aa8:	f000 fd70 	bl	800458c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aac:	2000      	movs	r0, #0
 8003aae:	f000 f805 	bl	8003abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ab2:	f7ff faed 	bl	8003090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ac4:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <HAL_InitTick+0x54>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b12      	ldr	r3, [pc, #72]	@ (8003b14 <HAL_InitTick+0x58>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	4619      	mov	r1, r3
 8003ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fd8b 	bl	80045f6 <HAL_SYSTICK_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e00e      	b.n	8003b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b0f      	cmp	r3, #15
 8003aee:	d80a      	bhi.n	8003b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003af0:	2200      	movs	r2, #0
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	f000 fd53 	bl	80045a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003afc:	4a06      	ldr	r2, [pc, #24]	@ (8003b18 <HAL_InitTick+0x5c>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e000      	b.n	8003b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	2000000c 	.word	0x2000000c
 8003b14:	20000014 	.word	0x20000014
 8003b18:	20000010 	.word	0x20000010

08003b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <HAL_IncTick+0x20>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <HAL_IncTick+0x24>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	4a04      	ldr	r2, [pc, #16]	@ (8003b40 <HAL_IncTick+0x24>)
 8003b2e:	6013      	str	r3, [r2, #0]
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000014 	.word	0x20000014
 8003b40:	2006ea84 	.word	0x2006ea84

08003b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return uwTick;
 8003b48:	4b03      	ldr	r3, [pc, #12]	@ (8003b58 <HAL_GetTick+0x14>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	2006ea84 	.word	0x2006ea84

08003b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b64:	f7ff ffee 	bl	8003b44 <HAL_GetTick>
 8003b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d005      	beq.n	8003b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba0 <HAL_Delay+0x44>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b82:	bf00      	nop
 8003b84:	f7ff ffde 	bl	8003b44 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d8f7      	bhi.n	8003b84 <HAL_Delay+0x28>
  {
  }
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000014 	.word	0x20000014

08003ba4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e031      	b.n	8003c1e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fa88 	bl	80030d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d116      	bne.n	8003c10 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003be6:	4b10      	ldr	r3, [pc, #64]	@ (8003c28 <HAL_ADC_Init+0x84>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	f043 0202 	orr.w	r2, r3, #2
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fa7e 	bl	80040f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c0e:	e001      	b.n	8003c14 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	ffffeefd 	.word	0xffffeefd

08003c2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_ADC_Start_DMA+0x1e>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e0d4      	b.n	8003df4 <HAL_ADC_Start_DMA+0x1c8>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d018      	beq.n	8003c92 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003c70:	4b62      	ldr	r3, [pc, #392]	@ (8003dfc <HAL_ADC_Start_DMA+0x1d0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a62      	ldr	r2, [pc, #392]	@ (8003e00 <HAL_ADC_Start_DMA+0x1d4>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	0c9a      	lsrs	r2, r3, #18
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	4413      	add	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003c84:	e002      	b.n	8003c8c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f9      	bne.n	8003c86 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	f040 809c 	bne.w	8003dda <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ca6:	4b57      	ldr	r3, [pc, #348]	@ (8003e04 <HAL_ADC_Start_DMA+0x1d8>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003cc8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cdc:	d106      	bne.n	8003cec <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	f023 0206 	bic.w	r2, r3, #6
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cea:	e002      	b.n	8003cf2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfe:	4a42      	ldr	r2, [pc, #264]	@ (8003e08 <HAL_ADC_Start_DMA+0x1dc>)
 8003d00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d06:	4a41      	ldr	r2, [pc, #260]	@ (8003e0c <HAL_ADC_Start_DMA+0x1e0>)
 8003d08:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0e:	4a40      	ldr	r2, [pc, #256]	@ (8003e10 <HAL_ADC_Start_DMA+0x1e4>)
 8003d10:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003d1a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003d2a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d3a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	334c      	adds	r3, #76	@ 0x4c
 8003d46:	4619      	mov	r1, r3
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f000 fd0e 	bl	800476c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003d50:	4b30      	ldr	r3, [pc, #192]	@ (8003e14 <HAL_ADC_Start_DMA+0x1e8>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10f      	bne.n	8003d7c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d143      	bne.n	8003df2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	e03a      	b.n	8003df2 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a25      	ldr	r2, [pc, #148]	@ (8003e18 <HAL_ADC_Start_DMA+0x1ec>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10e      	bne.n	8003da4 <HAL_ADC_Start_DMA+0x178>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d107      	bne.n	8003da4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003da2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003da4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e14 <HAL_ADC_Start_DMA+0x1e8>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d120      	bne.n	8003df2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a19      	ldr	r2, [pc, #100]	@ (8003e1c <HAL_ADC_Start_DMA+0x1f0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d11b      	bne.n	8003df2 <HAL_ADC_Start_DMA+0x1c6>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d114      	bne.n	8003df2 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	e00b      	b.n	8003df2 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f043 0210 	orr.w	r2, r3, #16
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	2000000c 	.word	0x2000000c
 8003e00:	431bde83 	.word	0x431bde83
 8003e04:	fffff8fe 	.word	0xfffff8fe
 8003e08:	080042e9 	.word	0x080042e9
 8003e0c:	080043a3 	.word	0x080043a3
 8003e10:	080043bf 	.word	0x080043bf
 8003e14:	40012300 	.word	0x40012300
 8003e18:	40012000 	.word	0x40012000
 8003e1c:	40012200 	.word	0x40012200

08003e20 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x1c>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e136      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x28a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b09      	cmp	r3, #9
 8003e72:	d93a      	bls.n	8003eea <HAL_ADC_ConfigChannel+0xa2>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e7c:	d035      	beq.n	8003eea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68d9      	ldr	r1, [r3, #12]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	3b1e      	subs	r3, #30
 8003e94:	2207      	movs	r2, #7
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a8d      	ldr	r2, [pc, #564]	@ (80040e0 <HAL_ADC_ConfigChannel+0x298>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d10a      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68d9      	ldr	r1, [r3, #12]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	061a      	lsls	r2, r3, #24
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec2:	e035      	b.n	8003f30 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68d9      	ldr	r1, [r3, #12]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4403      	add	r3, r0
 8003edc:	3b1e      	subs	r3, #30
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ee8:	e022      	b.n	8003f30 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6919      	ldr	r1, [r3, #16]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	2207      	movs	r2, #7
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43da      	mvns	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	400a      	ands	r2, r1
 8003f0c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6919      	ldr	r1, [r3, #16]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	4618      	mov	r0, r3
 8003f20:	4603      	mov	r3, r0
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4403      	add	r3, r0
 8003f26:	409a      	lsls	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b06      	cmp	r3, #6
 8003f36:	d824      	bhi.n	8003f82 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	3b05      	subs	r3, #5
 8003f4a:	221f      	movs	r2, #31
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43da      	mvns	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	400a      	ands	r2, r1
 8003f58:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	4618      	mov	r0, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	3b05      	subs	r3, #5
 8003f74:	fa00 f203 	lsl.w	r2, r0, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f80:	e04c      	b.n	800401c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d824      	bhi.n	8003fd4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	3b23      	subs	r3, #35	@ 0x23
 8003f9c:	221f      	movs	r2, #31
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	400a      	ands	r2, r1
 8003faa:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	4618      	mov	r0, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3b23      	subs	r3, #35	@ 0x23
 8003fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fd2:	e023      	b.n	800401c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3b41      	subs	r3, #65	@ 0x41
 8003fe6:	221f      	movs	r2, #31
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43da      	mvns	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	400a      	ands	r2, r1
 8003ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	4618      	mov	r0, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	3b41      	subs	r3, #65	@ 0x41
 8004010:	fa00 f203 	lsl.w	r2, r0, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a30      	ldr	r2, [pc, #192]	@ (80040e4 <HAL_ADC_ConfigChannel+0x29c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d10a      	bne.n	800403c <HAL_ADC_ConfigChannel+0x1f4>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800402e:	d105      	bne.n	800403c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004030:	4b2d      	ldr	r3, [pc, #180]	@ (80040e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4a2c      	ldr	r2, [pc, #176]	@ (80040e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004036:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800403a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a28      	ldr	r2, [pc, #160]	@ (80040e4 <HAL_ADC_ConfigChannel+0x29c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d10f      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x21e>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b12      	cmp	r3, #18
 800404c:	d10b      	bne.n	8004066 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800404e:	4b26      	ldr	r3, [pc, #152]	@ (80040e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4a25      	ldr	r2, [pc, #148]	@ (80040e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004054:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004058:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800405a:	4b23      	ldr	r3, [pc, #140]	@ (80040e8 <HAL_ADC_ConfigChannel+0x2a0>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4a22      	ldr	r2, [pc, #136]	@ (80040e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004060:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004064:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1e      	ldr	r2, [pc, #120]	@ (80040e4 <HAL_ADC_ConfigChannel+0x29c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d12b      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x280>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1a      	ldr	r2, [pc, #104]	@ (80040e0 <HAL_ADC_ConfigChannel+0x298>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <HAL_ADC_ConfigChannel+0x23a>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b11      	cmp	r3, #17
 8004080:	d122      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004082:	4b19      	ldr	r3, [pc, #100]	@ (80040e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4a18      	ldr	r2, [pc, #96]	@ (80040e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004088:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800408c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800408e:	4b16      	ldr	r3, [pc, #88]	@ (80040e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4a15      	ldr	r2, [pc, #84]	@ (80040e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004094:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004098:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a10      	ldr	r2, [pc, #64]	@ (80040e0 <HAL_ADC_ConfigChannel+0x298>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d111      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80040a4:	4b11      	ldr	r3, [pc, #68]	@ (80040ec <HAL_ADC_ConfigChannel+0x2a4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a11      	ldr	r2, [pc, #68]	@ (80040f0 <HAL_ADC_ConfigChannel+0x2a8>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	0c9a      	lsrs	r2, r3, #18
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80040ba:	e002      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	3b01      	subs	r3, #1
 80040c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f9      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	10000012 	.word	0x10000012
 80040e4:	40012000 	.word	0x40012000
 80040e8:	40012300 	.word	0x40012300
 80040ec:	2000000c 	.word	0x2000000c
 80040f0:	431bde83 	.word	0x431bde83

080040f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80040fc:	4b78      	ldr	r3, [pc, #480]	@ (80042e0 <ADC_Init+0x1ec>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a77      	ldr	r2, [pc, #476]	@ (80042e0 <ADC_Init+0x1ec>)
 8004102:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004106:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004108:	4b75      	ldr	r3, [pc, #468]	@ (80042e0 <ADC_Init+0x1ec>)
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4973      	ldr	r1, [pc, #460]	@ (80042e0 <ADC_Init+0x1ec>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	021a      	lsls	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800416a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6899      	ldr	r1, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	4a58      	ldr	r2, [pc, #352]	@ (80042e4 <ADC_Init+0x1f0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d022      	beq.n	80041ce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004196:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6899      	ldr	r1, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6899      	ldr	r1, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	e00f      	b.n	80041ee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0202 	bic.w	r2, r2, #2
 80041fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6899      	ldr	r1, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	005a      	lsls	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01b      	beq.n	8004254 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800422a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800423a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004246:	3b01      	subs	r3, #1
 8004248:	035a      	lsls	r2, r3, #13
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	e007      	b.n	8004264 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004262:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004272:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	3b01      	subs	r3, #1
 8004280:	051a      	lsls	r2, r3, #20
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6899      	ldr	r1, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042a6:	025a      	lsls	r2, r3, #9
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6899      	ldr	r1, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	029a      	lsls	r2, r3, #10
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40012300 	.word	0x40012300
 80042e4:	0f000001 	.word	0x0f000001

080042e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d13c      	bne.n	800437c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004306:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d12b      	bne.n	8004374 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004320:	2b00      	cmp	r3, #0
 8004322:	d127      	bne.n	8004374 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800432e:	2b00      	cmp	r3, #0
 8004330:	d006      	beq.n	8004340 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800433c:	2b00      	cmp	r3, #0
 800433e:	d119      	bne.n	8004374 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0220 	bic.w	r2, r2, #32
 800434e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	f043 0201 	orr.w	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff fa01 	bl	800377c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800437a:	e00e      	b.n	800439a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff fd53 	bl	8003e34 <HAL_ADC_ErrorCallback>
}
 800438e:	e004      	b.n	800439a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f7ff fd35 	bl	8003e20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2240      	movs	r2, #64	@ 0x40
 80043d0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043d6:	f043 0204 	orr.w	r2, r3, #4
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7ff fd28 	bl	8003e34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043fc:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <__NVIC_SetPriorityGrouping+0x40>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004408:	4013      	ands	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004414:	4b06      	ldr	r3, [pc, #24]	@ (8004430 <__NVIC_SetPriorityGrouping+0x44>)
 8004416:	4313      	orrs	r3, r2
 8004418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800441a:	4a04      	ldr	r2, [pc, #16]	@ (800442c <__NVIC_SetPriorityGrouping+0x40>)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	60d3      	str	r3, [r2, #12]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	e000ed00 	.word	0xe000ed00
 8004430:	05fa0000 	.word	0x05fa0000

08004434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004438:	4b04      	ldr	r3, [pc, #16]	@ (800444c <__NVIC_GetPriorityGrouping+0x18>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	0a1b      	lsrs	r3, r3, #8
 800443e:	f003 0307 	and.w	r3, r3, #7
}
 8004442:	4618      	mov	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800445a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445e:	2b00      	cmp	r3, #0
 8004460:	db0b      	blt.n	800447a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	f003 021f 	and.w	r2, r3, #31
 8004468:	4907      	ldr	r1, [pc, #28]	@ (8004488 <__NVIC_EnableIRQ+0x38>)
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	2001      	movs	r0, #1
 8004472:	fa00 f202 	lsl.w	r2, r0, r2
 8004476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	e000e100 	.word	0xe000e100

0800448c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	6039      	str	r1, [r7, #0]
 8004496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449c:	2b00      	cmp	r3, #0
 800449e:	db0a      	blt.n	80044b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	490c      	ldr	r1, [pc, #48]	@ (80044d8 <__NVIC_SetPriority+0x4c>)
 80044a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044aa:	0112      	lsls	r2, r2, #4
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	440b      	add	r3, r1
 80044b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044b4:	e00a      	b.n	80044cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4908      	ldr	r1, [pc, #32]	@ (80044dc <__NVIC_SetPriority+0x50>)
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	3b04      	subs	r3, #4
 80044c4:	0112      	lsls	r2, r2, #4
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	440b      	add	r3, r1
 80044ca:	761a      	strb	r2, [r3, #24]
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000e100 	.word	0xe000e100
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b089      	sub	sp, #36	@ 0x24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f1c3 0307 	rsb	r3, r3, #7
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	bf28      	it	cs
 80044fe:	2304      	movcs	r3, #4
 8004500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3304      	adds	r3, #4
 8004506:	2b06      	cmp	r3, #6
 8004508:	d902      	bls.n	8004510 <NVIC_EncodePriority+0x30>
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	3b03      	subs	r3, #3
 800450e:	e000      	b.n	8004512 <NVIC_EncodePriority+0x32>
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004514:	f04f 32ff 	mov.w	r2, #4294967295
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43da      	mvns	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	401a      	ands	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004528:	f04f 31ff 	mov.w	r1, #4294967295
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	fa01 f303 	lsl.w	r3, r1, r3
 8004532:	43d9      	mvns	r1, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004538:	4313      	orrs	r3, r2
         );
}
 800453a:	4618      	mov	r0, r3
 800453c:	3724      	adds	r7, #36	@ 0x24
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
	...

08004548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3b01      	subs	r3, #1
 8004554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004558:	d301      	bcc.n	800455e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800455a:	2301      	movs	r3, #1
 800455c:	e00f      	b.n	800457e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800455e:	4a0a      	ldr	r2, [pc, #40]	@ (8004588 <SysTick_Config+0x40>)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3b01      	subs	r3, #1
 8004564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004566:	210f      	movs	r1, #15
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	f7ff ff8e 	bl	800448c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004570:	4b05      	ldr	r3, [pc, #20]	@ (8004588 <SysTick_Config+0x40>)
 8004572:	2200      	movs	r2, #0
 8004574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004576:	4b04      	ldr	r3, [pc, #16]	@ (8004588 <SysTick_Config+0x40>)
 8004578:	2207      	movs	r2, #7
 800457a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	e000e010 	.word	0xe000e010

0800458c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff ff29 	bl	80043ec <__NVIC_SetPriorityGrouping>
}
 800459a:	bf00      	nop
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	4603      	mov	r3, r0
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045b4:	f7ff ff3e 	bl	8004434 <__NVIC_GetPriorityGrouping>
 80045b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	6978      	ldr	r0, [r7, #20]
 80045c0:	f7ff ff8e 	bl	80044e0 <NVIC_EncodePriority>
 80045c4:	4602      	mov	r2, r0
 80045c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff ff5d 	bl	800448c <__NVIC_SetPriority>
}
 80045d2:	bf00      	nop
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	4603      	mov	r3, r0
 80045e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ff31 	bl	8004450 <__NVIC_EnableIRQ>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ffa2 	bl	8004548 <SysTick_Config>
 8004604:	4603      	mov	r3, r0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800461c:	f7ff fa92 	bl	8003b44 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e099      	b.n	8004760 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800464c:	e00f      	b.n	800466e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800464e:	f7ff fa79 	bl	8003b44 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b05      	cmp	r3, #5
 800465a:	d908      	bls.n	800466e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2203      	movs	r2, #3
 8004666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e078      	b.n	8004760 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e8      	bne.n	800464e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4b38      	ldr	r3, [pc, #224]	@ (8004768 <HAL_DMA_Init+0x158>)
 8004688:	4013      	ands	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800469a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	2b04      	cmp	r3, #4
 80046c6:	d107      	bne.n	80046d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d0:	4313      	orrs	r3, r2
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f023 0307 	bic.w	r3, r3, #7
 80046ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d117      	bne.n	8004732 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00e      	beq.n	8004732 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fb09 	bl	8004d2c <DMA_CheckFifoParam>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2240      	movs	r2, #64	@ 0x40
 8004724:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800472e:	2301      	movs	r3, #1
 8004730:	e016      	b.n	8004760 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fac0 	bl	8004cc0 <DMA_CalcBaseAndBitshift>
 8004740:	4603      	mov	r3, r0
 8004742:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004748:	223f      	movs	r2, #63	@ 0x3f
 800474a:	409a      	lsls	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	e010803f 	.word	0xe010803f

0800476c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_DMA_Start_IT+0x26>
 800478e:	2302      	movs	r3, #2
 8004790:	e048      	b.n	8004824 <HAL_DMA_Start_IT+0xb8>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d137      	bne.n	8004816 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2202      	movs	r2, #2
 80047aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fa52 	bl	8004c64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c4:	223f      	movs	r2, #63	@ 0x3f
 80047c6:	409a      	lsls	r2, r3
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0216 	orr.w	r2, r2, #22
 80047da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80047ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0208 	orr.w	r2, r2, #8
 8004802:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	e005      	b.n	8004822 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800481e:	2302      	movs	r3, #2
 8004820:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004838:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800483a:	f7ff f983 	bl	8003b44 <HAL_GetTick>
 800483e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d008      	beq.n	800485e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2280      	movs	r2, #128	@ 0x80
 8004850:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e052      	b.n	8004904 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0216 	bic.w	r2, r2, #22
 800486c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800487c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d103      	bne.n	800488e <HAL_DMA_Abort+0x62>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0208 	bic.w	r2, r2, #8
 800489c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0201 	bic.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ae:	e013      	b.n	80048d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048b0:	f7ff f948 	bl	8003b44 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b05      	cmp	r3, #5
 80048bc:	d90c      	bls.n	80048d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2203      	movs	r2, #3
 80048c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e015      	b.n	8004904 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e4      	bne.n	80048b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ea:	223f      	movs	r2, #63	@ 0x3f
 80048ec:	409a      	lsls	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d004      	beq.n	800492a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2280      	movs	r2, #128	@ 0x80
 8004924:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e00c      	b.n	8004944 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2205      	movs	r2, #5
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800495c:	4b8e      	ldr	r3, [pc, #568]	@ (8004b98 <HAL_DMA_IRQHandler+0x248>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a8e      	ldr	r2, [pc, #568]	@ (8004b9c <HAL_DMA_IRQHandler+0x24c>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	0a9b      	lsrs	r3, r3, #10
 8004968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497a:	2208      	movs	r2, #8
 800497c:	409a      	lsls	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d01a      	beq.n	80049bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d013      	beq.n	80049bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0204 	bic.w	r2, r2, #4
 80049a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a8:	2208      	movs	r2, #8
 80049aa:	409a      	lsls	r2, r3
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b4:	f043 0201 	orr.w	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c0:	2201      	movs	r2, #1
 80049c2:	409a      	lsls	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d012      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049de:	2201      	movs	r2, #1
 80049e0:	409a      	lsls	r2, r3
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ea:	f043 0202 	orr.w	r2, r3, #2
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f6:	2204      	movs	r2, #4
 80049f8:	409a      	lsls	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d012      	beq.n	8004a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a14:	2204      	movs	r2, #4
 8004a16:	409a      	lsls	r2, r3
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a20:	f043 0204 	orr.w	r2, r3, #4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2c:	2210      	movs	r2, #16
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d043      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d03c      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d018      	beq.n	8004a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d108      	bne.n	8004a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d024      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	4798      	blx	r3
 8004a7e:	e01f      	b.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01b      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
 8004a90:	e016      	b.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d107      	bne.n	8004ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0208 	bic.w	r2, r2, #8
 8004aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 808f 	beq.w	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8087 	beq.w	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d136      	bne.n	8004b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0216 	bic.w	r2, r2, #22
 8004b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695a      	ldr	r2, [r3, #20]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d103      	bne.n	8004b2a <HAL_DMA_IRQHandler+0x1da>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0208 	bic.w	r2, r2, #8
 8004b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3e:	223f      	movs	r2, #63	@ 0x3f
 8004b40:	409a      	lsls	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d07e      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
        }
        return;
 8004b66:	e079      	b.n	8004c5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01d      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10d      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d031      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	4798      	blx	r3
 8004b94:	e02c      	b.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
 8004b96:	bf00      	nop
 8004b98:	2000000c 	.word	0x2000000c
 8004b9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d023      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4798      	blx	r3
 8004bb0:	e01e      	b.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10f      	bne.n	8004be0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0210 	bic.w	r2, r2, #16
 8004bce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d032      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d022      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2205      	movs	r2, #5
 8004c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d307      	bcc.n	8004c38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f2      	bne.n	8004c1c <HAL_DMA_IRQHandler+0x2cc>
 8004c36:	e000      	b.n	8004c3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	4798      	blx	r3
 8004c5a:	e000      	b.n	8004c5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c5c:	bf00      	nop
    }
  }
}
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b40      	cmp	r3, #64	@ 0x40
 8004c90:	d108      	bne.n	8004ca4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ca2:	e007      	b.n	8004cb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	60da      	str	r2, [r3, #12]
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	3b10      	subs	r3, #16
 8004cd0:	4a13      	ldr	r2, [pc, #76]	@ (8004d20 <DMA_CalcBaseAndBitshift+0x60>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	091b      	lsrs	r3, r3, #4
 8004cd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cda:	4a12      	ldr	r2, [pc, #72]	@ (8004d24 <DMA_CalcBaseAndBitshift+0x64>)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d908      	bls.n	8004d00 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d28 <DMA_CalcBaseAndBitshift+0x68>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	1d1a      	adds	r2, r3, #4
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004cfe:	e006      	b.n	8004d0e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	4b08      	ldr	r3, [pc, #32]	@ (8004d28 <DMA_CalcBaseAndBitshift+0x68>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	aaaaaaab 	.word	0xaaaaaaab
 8004d24:	0800ee50 	.word	0x0800ee50
 8004d28:	fffffc00 	.word	0xfffffc00

08004d2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d11f      	bne.n	8004d86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d856      	bhi.n	8004dfa <DMA_CheckFifoParam+0xce>
 8004d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d54 <DMA_CheckFifoParam+0x28>)
 8004d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d52:	bf00      	nop
 8004d54:	08004d65 	.word	0x08004d65
 8004d58:	08004d77 	.word	0x08004d77
 8004d5c:	08004d65 	.word	0x08004d65
 8004d60:	08004dfb 	.word	0x08004dfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d046      	beq.n	8004dfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d74:	e043      	b.n	8004dfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d7e:	d140      	bne.n	8004e02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d84:	e03d      	b.n	8004e02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d8e:	d121      	bne.n	8004dd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d837      	bhi.n	8004e06 <DMA_CheckFifoParam+0xda>
 8004d96:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <DMA_CheckFifoParam+0x70>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004db3 	.word	0x08004db3
 8004da4:	08004dad 	.word	0x08004dad
 8004da8:	08004dc5 	.word	0x08004dc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      break;
 8004db0:	e030      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d025      	beq.n	8004e0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc2:	e022      	b.n	8004e0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004dcc:	d11f      	bne.n	8004e0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004dd2:	e01c      	b.n	8004e0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d903      	bls.n	8004de2 <DMA_CheckFifoParam+0xb6>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d003      	beq.n	8004de8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004de0:	e018      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
      break;
 8004de6:	e015      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00e      	beq.n	8004e12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
      break;
 8004df8:	e00b      	b.n	8004e12 <DMA_CheckFifoParam+0xe6>
      break;
 8004dfa:	bf00      	nop
 8004dfc:	e00a      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      break;
 8004dfe:	bf00      	nop
 8004e00:	e008      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      break;
 8004e02:	bf00      	nop
 8004e04:	e006      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      break;
 8004e06:	bf00      	nop
 8004e08:	e004      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      break;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <DMA_CheckFifoParam+0xe8>
      break;
 8004e12:	bf00      	nop
    }
  } 
  
  return status; 
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop

08004e24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e086      	b.n	8004f44 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2223      	movs	r2, #35	@ 0x23
 8004e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fe f9b9 	bl	80031c0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f4c <HAL_ETH_Init+0x128>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e52:	4a3e      	ldr	r2, [pc, #248]	@ (8004f4c <HAL_ETH_Init+0x128>)
 8004e54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8004f4c <HAL_ETH_Init+0x128>)
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004e66:	4b3a      	ldr	r3, [pc, #232]	@ (8004f50 <HAL_ETH_Init+0x12c>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4a39      	ldr	r2, [pc, #228]	@ (8004f50 <HAL_ETH_Init+0x12c>)
 8004e6c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004e70:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004e72:	4b37      	ldr	r3, [pc, #220]	@ (8004f50 <HAL_ETH_Init+0x12c>)
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	4935      	ldr	r1, [pc, #212]	@ (8004f50 <HAL_ETH_Init+0x12c>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004e80:	4b33      	ldr	r3, [pc, #204]	@ (8004f50 <HAL_ETH_Init+0x12c>)
 8004e82:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004e9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e9c:	f7fe fe52 	bl	8003b44 <HAL_GetTick>
 8004ea0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004ea2:	e011      	b.n	8004ec8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004ea4:	f7fe fe4e 	bl	8003b44 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004eb2:	d909      	bls.n	8004ec8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	22e0      	movs	r2, #224	@ 0xe0
 8004ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e03d      	b.n	8004f44 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e4      	bne.n	8004ea4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f97a 	bl	80051d4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fa25 	bl	8005330 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fa7b 	bl	80053e2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f9e3 	bl	80052c0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004f08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4b0f      	ldr	r3, [pc, #60]	@ (8004f54 <HAL_ETH_Init+0x130>)
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004f2e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2210      	movs	r2, #16
 8004f3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40013800 	.word	0x40013800
 8004f54:	00020060 	.word	0x00020060

08004f58 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4b53      	ldr	r3, [pc, #332]	@ (80050bc <ETH_SetMACConfig+0x164>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	7b9b      	ldrb	r3, [r3, #14]
 8004f76:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	7c12      	ldrb	r2, [r2, #16]
 8004f7c:	2a00      	cmp	r2, #0
 8004f7e:	d102      	bne.n	8004f86 <ETH_SetMACConfig+0x2e>
 8004f80:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004f84:	e000      	b.n	8004f88 <ETH_SetMACConfig+0x30>
 8004f86:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	7c52      	ldrb	r2, [r2, #17]
 8004f8e:	2a00      	cmp	r2, #0
 8004f90:	d102      	bne.n	8004f98 <ETH_SetMACConfig+0x40>
 8004f92:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004f96:	e000      	b.n	8004f9a <ETH_SetMACConfig+0x42>
 8004f98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f9a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004fa0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	7fdb      	ldrb	r3, [r3, #31]
 8004fa6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004fa8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004fae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	7f92      	ldrb	r2, [r2, #30]
 8004fb4:	2a00      	cmp	r2, #0
 8004fb6:	d102      	bne.n	8004fbe <ETH_SetMACConfig+0x66>
 8004fb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004fbc:	e000      	b.n	8004fc0 <ETH_SetMACConfig+0x68>
 8004fbe:	2200      	movs	r2, #0
                        macconf->Speed |
 8004fc0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	7f1b      	ldrb	r3, [r3, #28]
 8004fc6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004fc8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004fce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	791b      	ldrb	r3, [r3, #4]
 8004fd4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004fd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004fde:	2a00      	cmp	r2, #0
 8004fe0:	d102      	bne.n	8004fe8 <ETH_SetMACConfig+0x90>
 8004fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fe6:	e000      	b.n	8004fea <ETH_SetMACConfig+0x92>
 8004fe8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004fea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	7bdb      	ldrb	r3, [r3, #15]
 8004ff0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004ff2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004ff8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005000:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005002:	4313      	orrs	r3, r2
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800501a:	2001      	movs	r0, #1
 800501c:	f7fe fd9e 	bl	8003b5c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005036:	4013      	ands	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800503e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005046:	2a00      	cmp	r2, #0
 8005048:	d101      	bne.n	800504e <ETH_SetMACConfig+0xf6>
 800504a:	2280      	movs	r2, #128	@ 0x80
 800504c:	e000      	b.n	8005050 <ETH_SetMACConfig+0xf8>
 800504e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005050:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005056:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800505e:	2a01      	cmp	r2, #1
 8005060:	d101      	bne.n	8005066 <ETH_SetMACConfig+0x10e>
 8005062:	2208      	movs	r2, #8
 8005064:	e000      	b.n	8005068 <ETH_SetMACConfig+0x110>
 8005066:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005068:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005070:	2a01      	cmp	r2, #1
 8005072:	d101      	bne.n	8005078 <ETH_SetMACConfig+0x120>
 8005074:	2204      	movs	r2, #4
 8005076:	e000      	b.n	800507a <ETH_SetMACConfig+0x122>
 8005078:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800507a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005082:	2a01      	cmp	r2, #1
 8005084:	d101      	bne.n	800508a <ETH_SetMACConfig+0x132>
 8005086:	2202      	movs	r2, #2
 8005088:	e000      	b.n	800508c <ETH_SetMACConfig+0x134>
 800508a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800508c:	4313      	orrs	r3, r2
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4313      	orrs	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050a4:	2001      	movs	r0, #1
 80050a6:	f7fe fd59 	bl	8003b5c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	619a      	str	r2, [r3, #24]
}
 80050b2:	bf00      	nop
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	fd20810f 	.word	0xfd20810f

080050c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4b3d      	ldr	r3, [pc, #244]	@ (80051d0 <ETH_SetDMAConfig+0x110>)
 80050da:	4013      	ands	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	7b1b      	ldrb	r3, [r3, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d102      	bne.n	80050ec <ETH_SetDMAConfig+0x2c>
 80050e6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80050ea:	e000      	b.n	80050ee <ETH_SetDMAConfig+0x2e>
 80050ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	7b5b      	ldrb	r3, [r3, #13]
 80050f2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80050f4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	7f52      	ldrb	r2, [r2, #29]
 80050fa:	2a00      	cmp	r2, #0
 80050fc:	d102      	bne.n	8005104 <ETH_SetDMAConfig+0x44>
 80050fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005102:	e000      	b.n	8005106 <ETH_SetDMAConfig+0x46>
 8005104:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005106:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	7b9b      	ldrb	r3, [r3, #14]
 800510c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800510e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005114:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	7f1b      	ldrb	r3, [r3, #28]
 800511a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800511c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	7f9b      	ldrb	r3, [r3, #30]
 8005122:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005124:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800512a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005132:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005134:	4313      	orrs	r3, r2
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005144:	461a      	mov	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005156:	2001      	movs	r0, #1
 8005158:	f7fe fd00 	bl	8003b5c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005164:	461a      	mov	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	791b      	ldrb	r3, [r3, #4]
 800516e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005174:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800517a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005180:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005188:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800518a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005190:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005192:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005198:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051a6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051b4:	2001      	movs	r0, #1
 80051b6:	f7fe fcd1 	bl	8003b5c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051c2:	461a      	mov	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6013      	str	r3, [r2, #0]
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	f8de3f23 	.word	0xf8de3f23

080051d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b0a6      	sub	sp, #152	@ 0x98
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80051dc:	2301      	movs	r3, #1
 80051de:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80051e8:	2300      	movs	r3, #0
 80051ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80051fe:	2301      	movs	r3, #1
 8005200:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800520a:	2300      	movs	r3, #0
 800520c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005210:	2300      	movs	r3, #0
 8005212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005216:	2300      	movs	r3, #0
 8005218:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800521a:	2300      	movs	r3, #0
 800521c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005220:	2300      	movs	r3, #0
 8005222:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005224:	2300      	movs	r3, #0
 8005226:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800522a:	2300      	movs	r3, #0
 800522c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005230:	2300      	movs	r3, #0
 8005232:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005236:	2300      	movs	r3, #0
 8005238:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800523c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005240:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005242:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005246:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005248:	2300      	movs	r3, #0
 800524a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800524e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff fe7f 	bl	8004f58 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800525a:	2301      	movs	r3, #1
 800525c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800525e:	2301      	movs	r3, #1
 8005260:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005268:	2301      	movs	r3, #1
 800526a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005270:	2300      	movs	r3, #0
 8005272:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800527c:	2300      	movs	r3, #0
 800527e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005286:	2301      	movs	r3, #1
 8005288:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800528a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800528e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005290:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005294:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800529a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80052aa:	f107 0308 	add.w	r3, r7, #8
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff ff05 	bl	80050c0 <ETH_SetDMAConfig>
}
 80052b6:	bf00      	nop
 80052b8:	3798      	adds	r7, #152	@ 0x98
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3305      	adds	r3, #5
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	3204      	adds	r2, #4
 80052d8:	7812      	ldrb	r2, [r2, #0]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4b11      	ldr	r3, [pc, #68]	@ (8005328 <ETH_MACAddressConfig+0x68>)
 80052e2:	4413      	add	r3, r2
 80052e4:	461a      	mov	r2, r3
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	3303      	adds	r3, #3
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	061a      	lsls	r2, r3, #24
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3302      	adds	r3, #2
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	041b      	lsls	r3, r3, #16
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3301      	adds	r3, #1
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	4313      	orrs	r3, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	7812      	ldrb	r2, [r2, #0]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	4b06      	ldr	r3, [pc, #24]	@ (800532c <ETH_MACAddressConfig+0x6c>)
 8005312:	4413      	add	r3, r2
 8005314:	461a      	mov	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	6013      	str	r3, [r2, #0]
}
 800531a:	bf00      	nop
 800531c:	371c      	adds	r7, #28
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40028040 	.word	0x40028040
 800532c:	40028044 	.word	0x40028044

08005330 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	e03e      	b.n	80053bc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68d9      	ldr	r1, [r3, #12]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	440b      	add	r3, r1
 800534e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2200      	movs	r2, #0
 800535a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2200      	movs	r2, #0
 8005366:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	3206      	adds	r2, #6
 8005370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d80c      	bhi.n	80053a0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68d9      	ldr	r1, [r3, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	4613      	mov	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	440b      	add	r3, r1
 8005398:	461a      	mov	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	e004      	b.n	80053aa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	461a      	mov	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3301      	adds	r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b03      	cmp	r3, #3
 80053c0:	d9bd      	bls.n	800533e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053d4:	611a      	str	r2, [r3, #16]
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e048      	b.n	8005482 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6919      	ldr	r1, [r3, #16]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	440b      	add	r3, r1
 8005400:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2200      	movs	r2, #0
 8005412:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2200      	movs	r2, #0
 800541e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2200      	movs	r2, #0
 8005424:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800542c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	3212      	adds	r2, #18
 800544e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d80c      	bhi.n	8005472 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6919      	ldr	r1, [r3, #16]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	440b      	add	r3, r1
 800546a:	461a      	mov	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	60da      	str	r2, [r3, #12]
 8005470:	e004      	b.n	800547c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	461a      	mov	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b03      	cmp	r3, #3
 8005486:	d9b3      	bls.n	80053f0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054b2:	60da      	str	r2, [r3, #12]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b089      	sub	sp, #36	@ 0x24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80054ce:	2300      	movs	r3, #0
 80054d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80054d2:	2300      	movs	r3, #0
 80054d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80054da:	2300      	movs	r3, #0
 80054dc:	61fb      	str	r3, [r7, #28]
 80054de:	e175      	b.n	80057cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80054e0:	2201      	movs	r2, #1
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4013      	ands	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	f040 8164 	bne.w	80057c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b01      	cmp	r3, #1
 8005508:	d005      	beq.n	8005516 <HAL_GPIO_Init+0x56>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d130      	bne.n	8005578 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	2203      	movs	r2, #3
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43db      	mvns	r3, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4013      	ands	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	4313      	orrs	r3, r2
 800553e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800554c:	2201      	movs	r2, #1
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4013      	ands	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 0201 	and.w	r2, r3, #1
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	4313      	orrs	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	2b03      	cmp	r3, #3
 8005582:	d017      	beq.n	80055b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	2203      	movs	r2, #3
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4013      	ands	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f003 0303 	and.w	r3, r3, #3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d123      	bne.n	8005608 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	08da      	lsrs	r2, r3, #3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3208      	adds	r2, #8
 80055c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	220f      	movs	r2, #15
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	43db      	mvns	r3, r3
 80055de:	69ba      	ldr	r2, [r7, #24]
 80055e0:	4013      	ands	r3, r2
 80055e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	08da      	lsrs	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3208      	adds	r2, #8
 8005602:	69b9      	ldr	r1, [r7, #24]
 8005604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	2203      	movs	r2, #3
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	43db      	mvns	r3, r3
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	4013      	ands	r3, r2
 800561e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f003 0203 	and.w	r2, r3, #3
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	4313      	orrs	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 80be 	beq.w	80057c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800564a:	4b66      	ldr	r3, [pc, #408]	@ (80057e4 <HAL_GPIO_Init+0x324>)
 800564c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564e:	4a65      	ldr	r2, [pc, #404]	@ (80057e4 <HAL_GPIO_Init+0x324>)
 8005650:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005654:	6453      	str	r3, [r2, #68]	@ 0x44
 8005656:	4b63      	ldr	r3, [pc, #396]	@ (80057e4 <HAL_GPIO_Init+0x324>)
 8005658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800565a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005662:	4a61      	ldr	r2, [pc, #388]	@ (80057e8 <HAL_GPIO_Init+0x328>)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	3302      	adds	r3, #2
 800566a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	220f      	movs	r2, #15
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4013      	ands	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a58      	ldr	r2, [pc, #352]	@ (80057ec <HAL_GPIO_Init+0x32c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d037      	beq.n	80056fe <HAL_GPIO_Init+0x23e>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a57      	ldr	r2, [pc, #348]	@ (80057f0 <HAL_GPIO_Init+0x330>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d031      	beq.n	80056fa <HAL_GPIO_Init+0x23a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a56      	ldr	r2, [pc, #344]	@ (80057f4 <HAL_GPIO_Init+0x334>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d02b      	beq.n	80056f6 <HAL_GPIO_Init+0x236>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a55      	ldr	r2, [pc, #340]	@ (80057f8 <HAL_GPIO_Init+0x338>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d025      	beq.n	80056f2 <HAL_GPIO_Init+0x232>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a54      	ldr	r2, [pc, #336]	@ (80057fc <HAL_GPIO_Init+0x33c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01f      	beq.n	80056ee <HAL_GPIO_Init+0x22e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a53      	ldr	r2, [pc, #332]	@ (8005800 <HAL_GPIO_Init+0x340>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d019      	beq.n	80056ea <HAL_GPIO_Init+0x22a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a52      	ldr	r2, [pc, #328]	@ (8005804 <HAL_GPIO_Init+0x344>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_GPIO_Init+0x226>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a51      	ldr	r2, [pc, #324]	@ (8005808 <HAL_GPIO_Init+0x348>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00d      	beq.n	80056e2 <HAL_GPIO_Init+0x222>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a50      	ldr	r2, [pc, #320]	@ (800580c <HAL_GPIO_Init+0x34c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d007      	beq.n	80056de <HAL_GPIO_Init+0x21e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a4f      	ldr	r2, [pc, #316]	@ (8005810 <HAL_GPIO_Init+0x350>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d101      	bne.n	80056da <HAL_GPIO_Init+0x21a>
 80056d6:	2309      	movs	r3, #9
 80056d8:	e012      	b.n	8005700 <HAL_GPIO_Init+0x240>
 80056da:	230a      	movs	r3, #10
 80056dc:	e010      	b.n	8005700 <HAL_GPIO_Init+0x240>
 80056de:	2308      	movs	r3, #8
 80056e0:	e00e      	b.n	8005700 <HAL_GPIO_Init+0x240>
 80056e2:	2307      	movs	r3, #7
 80056e4:	e00c      	b.n	8005700 <HAL_GPIO_Init+0x240>
 80056e6:	2306      	movs	r3, #6
 80056e8:	e00a      	b.n	8005700 <HAL_GPIO_Init+0x240>
 80056ea:	2305      	movs	r3, #5
 80056ec:	e008      	b.n	8005700 <HAL_GPIO_Init+0x240>
 80056ee:	2304      	movs	r3, #4
 80056f0:	e006      	b.n	8005700 <HAL_GPIO_Init+0x240>
 80056f2:	2303      	movs	r3, #3
 80056f4:	e004      	b.n	8005700 <HAL_GPIO_Init+0x240>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e002      	b.n	8005700 <HAL_GPIO_Init+0x240>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <HAL_GPIO_Init+0x240>
 80056fe:	2300      	movs	r3, #0
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	f002 0203 	and.w	r2, r2, #3
 8005706:	0092      	lsls	r2, r2, #2
 8005708:	4093      	lsls	r3, r2
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005710:	4935      	ldr	r1, [pc, #212]	@ (80057e8 <HAL_GPIO_Init+0x328>)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	089b      	lsrs	r3, r3, #2
 8005716:	3302      	adds	r3, #2
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800571e:	4b3d      	ldr	r3, [pc, #244]	@ (8005814 <HAL_GPIO_Init+0x354>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	43db      	mvns	r3, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4013      	ands	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005742:	4a34      	ldr	r2, [pc, #208]	@ (8005814 <HAL_GPIO_Init+0x354>)
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005748:	4b32      	ldr	r3, [pc, #200]	@ (8005814 <HAL_GPIO_Init+0x354>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800576c:	4a29      	ldr	r2, [pc, #164]	@ (8005814 <HAL_GPIO_Init+0x354>)
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005772:	4b28      	ldr	r3, [pc, #160]	@ (8005814 <HAL_GPIO_Init+0x354>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	43db      	mvns	r3, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	4013      	ands	r3, r2
 8005780:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005796:	4a1f      	ldr	r2, [pc, #124]	@ (8005814 <HAL_GPIO_Init+0x354>)
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800579c:	4b1d      	ldr	r3, [pc, #116]	@ (8005814 <HAL_GPIO_Init+0x354>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4013      	ands	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057c0:	4a14      	ldr	r2, [pc, #80]	@ (8005814 <HAL_GPIO_Init+0x354>)
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	3301      	adds	r3, #1
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	2b0f      	cmp	r3, #15
 80057d0:	f67f ae86 	bls.w	80054e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop
 80057d8:	3724      	adds	r7, #36	@ 0x24
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800
 80057e8:	40013800 	.word	0x40013800
 80057ec:	40020000 	.word	0x40020000
 80057f0:	40020400 	.word	0x40020400
 80057f4:	40020800 	.word	0x40020800
 80057f8:	40020c00 	.word	0x40020c00
 80057fc:	40021000 	.word	0x40021000
 8005800:	40021400 	.word	0x40021400
 8005804:	40021800 	.word	0x40021800
 8005808:	40021c00 	.word	0x40021c00
 800580c:	40022000 	.word	0x40022000
 8005810:	40022400 	.word	0x40022400
 8005814:	40013c00 	.word	0x40013c00

08005818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	807b      	strh	r3, [r7, #2]
 8005824:	4613      	mov	r3, r2
 8005826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005828:	787b      	ldrb	r3, [r7, #1]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800582e:	887a      	ldrh	r2, [r7, #2]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005834:	e003      	b.n	800583e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005836:	887b      	ldrh	r3, [r7, #2]
 8005838:	041a      	lsls	r2, r3, #16
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	619a      	str	r2, [r3, #24]
}
 800583e:	bf00      	nop
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800584a:	b480      	push	{r7}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800585c:	887a      	ldrh	r2, [r7, #2]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4013      	ands	r3, r2
 8005862:	041a      	lsls	r2, r3, #16
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	43d9      	mvns	r1, r3
 8005868:	887b      	ldrh	r3, [r7, #2]
 800586a:	400b      	ands	r3, r1
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	619a      	str	r2, [r3, #24]
}
 8005872:	bf00      	nop
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b086      	sub	sp, #24
 8005882:	af02      	add	r7, sp, #8
 8005884:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e108      	b.n	8005aa2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f008 fb46 	bl	800df3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2203      	movs	r2, #3
 80058b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058be:	d102      	bne.n	80058c6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f004 feef 	bl	800a6ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	7c1a      	ldrb	r2, [r3, #16]
 80058d8:	f88d 2000 	strb.w	r2, [sp]
 80058dc:	3304      	adds	r3, #4
 80058de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058e0:	f004 fdd8 	bl	800a494 <USB_CoreInit>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e0d5      	b.n	8005aa2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2100      	movs	r1, #0
 80058fc:	4618      	mov	r0, r3
 80058fe:	f004 fee7 	bl	800a6d0 <USB_SetCurrentMode>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0c6      	b.n	8005aa2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005914:	2300      	movs	r3, #0
 8005916:	73fb      	strb	r3, [r7, #15]
 8005918:	e04a      	b.n	80059b0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800591a:	7bfa      	ldrb	r2, [r7, #15]
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	3315      	adds	r3, #21
 800592a:	2201      	movs	r2, #1
 800592c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800592e:	7bfa      	ldrb	r2, [r7, #15]
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	440b      	add	r3, r1
 800593c:	3314      	adds	r3, #20
 800593e:	7bfa      	ldrb	r2, [r7, #15]
 8005940:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005942:	7bfa      	ldrb	r2, [r7, #15]
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	b298      	uxth	r0, r3
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	332e      	adds	r3, #46	@ 0x2e
 8005956:	4602      	mov	r2, r0
 8005958:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800595a:	7bfa      	ldrb	r2, [r7, #15]
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	440b      	add	r3, r1
 8005968:	3318      	adds	r3, #24
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800596e:	7bfa      	ldrb	r2, [r7, #15]
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	331c      	adds	r3, #28
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005982:	7bfa      	ldrb	r2, [r7, #15]
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	4613      	mov	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	440b      	add	r3, r1
 8005990:	3320      	adds	r3, #32
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005996:	7bfa      	ldrb	r2, [r7, #15]
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	3324      	adds	r3, #36	@ 0x24
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	3301      	adds	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	791b      	ldrb	r3, [r3, #4]
 80059b4:	7bfa      	ldrb	r2, [r7, #15]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d3af      	bcc.n	800591a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
 80059be:	e044      	b.n	8005a4a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059c0:	7bfa      	ldrb	r2, [r7, #15]
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80059d2:	2200      	movs	r2, #0
 80059d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059d6:	7bfa      	ldrb	r2, [r7, #15]
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80059e8:	7bfa      	ldrb	r2, [r7, #15]
 80059ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059ec:	7bfa      	ldrb	r2, [r7, #15]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a02:	7bfa      	ldrb	r2, [r7, #15]
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a18:	7bfa      	ldrb	r2, [r7, #15]
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a2e:	7bfa      	ldrb	r2, [r7, #15]
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	4413      	add	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
 8005a46:	3301      	adds	r3, #1
 8005a48:	73fb      	strb	r3, [r7, #15]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	791b      	ldrb	r3, [r3, #4]
 8005a4e:	7bfa      	ldrb	r2, [r7, #15]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d3b5      	bcc.n	80059c0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	7c1a      	ldrb	r2, [r3, #16]
 8005a5c:	f88d 2000 	strb.w	r2, [sp]
 8005a60:	3304      	adds	r3, #4
 8005a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a64:	f004 fe80 	bl	800a768 <USB_DevInit>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2202      	movs	r2, #2
 8005a72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e013      	b.n	8005aa2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	7b1b      	ldrb	r3, [r3, #12]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d102      	bne.n	8005a96 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f001 f959 	bl	8006d48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f005 febf 	bl	800b81e <USB_DevDisconnect>

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b082      	sub	sp, #8
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_PCD_Start+0x16>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e012      	b.n	8005ae6 <HAL_PCD_Start+0x3c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f004 fddd 	bl	800a68c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f005 fe80 	bl	800b7dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005aee:	b590      	push	{r4, r7, lr}
 8005af0:	b08d      	sub	sp, #52	@ 0x34
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f005 ff3e 	bl	800b986 <USB_GetMode>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f040 84b9 	bne.w	8006484 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f005 fea2 	bl	800b860 <USB_ReadInterrupts>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 84af 	beq.w	8006482 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f005 fe8f 	bl	800b860 <USB_ReadInterrupts>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f003 0302 	and.w	r3, r3, #2
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d107      	bne.n	8005b5c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695a      	ldr	r2, [r3, #20]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f002 0202 	and.w	r2, r2, #2
 8005b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f005 fe7d 	bl	800b860 <USB_ReadInterrupts>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	d161      	bne.n	8005c34 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0210 	bic.w	r2, r2, #16
 8005b7e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	f003 020f 	and.w	r2, r3, #15
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	0c5b      	lsrs	r3, r3, #17
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d124      	bne.n	8005bf6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d035      	beq.n	8005c24 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6a38      	ldr	r0, [r7, #32]
 8005bcc:	f005 fcb4 	bl	800b538 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	091b      	lsrs	r3, r3, #4
 8005bd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bdc:	441a      	add	r2, r3
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	695a      	ldr	r2, [r3, #20]
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bee:	441a      	add	r2, r3
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	615a      	str	r2, [r3, #20]
 8005bf4:	e016      	b.n	8005c24 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	0c5b      	lsrs	r3, r3, #17
 8005bfa:	f003 030f 	and.w	r3, r3, #15
 8005bfe:	2b06      	cmp	r3, #6
 8005c00:	d110      	bne.n	8005c24 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c08:	2208      	movs	r2, #8
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6a38      	ldr	r0, [r7, #32]
 8005c0e:	f005 fc93 	bl	800b538 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c1e:	441a      	add	r2, r3
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0210 	orr.w	r2, r2, #16
 8005c32:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f005 fe11 	bl	800b860 <USB_ReadInterrupts>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c44:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c48:	f040 80a7 	bne.w	8005d9a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f005 fe16 	bl	800b886 <USB_ReadDevAllOutEpInterrupt>
 8005c5a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005c5c:	e099      	b.n	8005d92 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 808e 	beq.w	8005d86 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f005 fe3a 	bl	800b8ee <USB_ReadDevOutEPInterrupt>
 8005c7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00c      	beq.n	8005ca0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c92:	461a      	mov	r2, r3
 8005c94:	2301      	movs	r3, #1
 8005c96:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fece 	bl	8006a3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f003 0308 	and.w	r3, r3, #8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00c      	beq.n	8005cc4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2308      	movs	r3, #8
 8005cba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005cbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 ffa4 	bl	8006c0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cda:	461a      	mov	r2, r3
 8005cdc:	2310      	movs	r3, #16
 8005cde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d030      	beq.n	8005d4c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf2:	2b80      	cmp	r3, #128	@ 0x80
 8005cf4:	d109      	bne.n	8005d0a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d08:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	78db      	ldrb	r3, [r3, #3]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d108      	bne.n	8005d3a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	4619      	mov	r1, r3
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f008 fa35 	bl	800e1a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d46:	461a      	mov	r2, r3
 8005d48:	2302      	movs	r3, #2
 8005d4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d008      	beq.n	8005d68 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d62:	461a      	mov	r2, r3
 8005d64:	2320      	movs	r3, #32
 8005d66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d84:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d88:	3301      	adds	r3, #1
 8005d8a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f47f af62 	bne.w	8005c5e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f005 fd5e 	bl	800b860 <USB_ReadInterrupts>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005daa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dae:	f040 80db 	bne.w	8005f68 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f005 fd7f 	bl	800b8ba <USB_ReadDevAllInEpInterrupt>
 8005dbc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005dc2:	e0cd      	b.n	8005f60 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 80c2 	beq.w	8005f54 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	4611      	mov	r1, r2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f005 fda5 	bl	800b92a <USB_ReadDevInEPInterrupt>
 8005de0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d057      	beq.n	8005e9c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	f003 030f 	and.w	r3, r3, #15
 8005df2:	2201      	movs	r2, #1
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	43db      	mvns	r3, r3
 8005e06:	69f9      	ldr	r1, [r7, #28]
 8005e08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	2301      	movs	r3, #1
 8005e20:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	799b      	ldrb	r3, [r3, #6]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d132      	bne.n	8005e90 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e2e:	4613      	mov	r3, r2
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	4413      	add	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	3320      	adds	r3, #32
 8005e3a:	6819      	ldr	r1, [r3, #0]
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e40:	4613      	mov	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4403      	add	r3, r0
 8005e4a:	331c      	adds	r3, #28
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4419      	add	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e54:	4613      	mov	r3, r2
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4403      	add	r3, r0
 8005e5e:	3320      	adds	r3, #32
 8005e60:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d113      	bne.n	8005e90 <HAL_PCD_IRQHandler+0x3a2>
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	3324      	adds	r3, #36	@ 0x24
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d108      	bne.n	8005e90 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	f005 fdae 	bl	800b9ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	4619      	mov	r1, r3
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f008 f8ff 	bl	800e09a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d008      	beq.n	8005eb8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f003 0310 	and.w	r3, r3, #16
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ece:	461a      	mov	r2, r3
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d008      	beq.n	8005ef0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eea:	461a      	mov	r2, r3
 8005eec:	2340      	movs	r3, #64	@ 0x40
 8005eee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d023      	beq.n	8005f42 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005efa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005efc:	6a38      	ldr	r0, [r7, #32]
 8005efe:	f004 fd91 	bl	800aa24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f04:	4613      	mov	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	3310      	adds	r3, #16
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	4413      	add	r3, r2
 8005f12:	3304      	adds	r3, #4
 8005f14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	78db      	ldrb	r3, [r3, #3]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d108      	bne.n	8005f30 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2200      	movs	r2, #0
 8005f22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	4619      	mov	r1, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f008 f94c 	bl	800e1c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	2302      	movs	r3, #2
 8005f40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005f4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fce8 	bl	8006924 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	3301      	adds	r3, #1
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5c:	085b      	lsrs	r3, r3, #1
 8005f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f47f af2e 	bne.w	8005dc4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f005 fc77 	bl	800b860 <USB_ReadInterrupts>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f7c:	d122      	bne.n	8005fc4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d108      	bne.n	8005fae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f008 fac6 	bl	800e538 <HAL_PCDEx_LPM_Callback>
 8005fac:	e002      	b.n	8005fb4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f008 f8ea 	bl	800e188 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695a      	ldr	r2, [r3, #20]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f005 fc49 	bl	800b860 <USB_ReadInterrupts>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fd8:	d112      	bne.n	8006000 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d102      	bne.n	8005ff0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f008 f8a6 	bl	800e13c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695a      	ldr	r2, [r3, #20]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4618      	mov	r0, r3
 8006006:	f005 fc2b 	bl	800b860 <USB_ReadInterrupts>
 800600a:	4603      	mov	r3, r0
 800600c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006010:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006014:	d121      	bne.n	800605a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006024:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800602c:	2b00      	cmp	r3, #0
 800602e:	d111      	bne.n	8006054 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603e:	089b      	lsrs	r3, r3, #2
 8006040:	f003 020f 	and.w	r2, r3, #15
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800604a:	2101      	movs	r1, #1
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f008 fa73 	bl	800e538 <HAL_PCDEx_LPM_Callback>
 8006052:	e002      	b.n	800605a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f008 f871 	bl	800e13c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f005 fbfe 	bl	800b860 <USB_ReadInterrupts>
 8006064:	4603      	mov	r3, r0
 8006066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800606a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606e:	f040 80b7 	bne.w	80061e0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2110      	movs	r1, #16
 800608c:	4618      	mov	r0, r3
 800608e:	f004 fcc9 	bl	800aa24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006092:	2300      	movs	r3, #0
 8006094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006096:	e046      	b.n	8006126 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060a4:	461a      	mov	r2, r3
 80060a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80060cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d8:	461a      	mov	r2, r3
 80060da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	69fa      	ldr	r2, [r7, #28]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800611a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800611e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006122:	3301      	adds	r3, #1
 8006124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	791b      	ldrb	r3, [r3, #4]
 800612a:	461a      	mov	r2, r3
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	4293      	cmp	r3, r2
 8006130:	d3b2      	bcc.n	8006098 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006140:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006144:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	7bdb      	ldrb	r3, [r3, #15]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d016      	beq.n	800617c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006154:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800615e:	f043 030b 	orr.w	r3, r3, #11
 8006162:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800616c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006174:	f043 030b 	orr.w	r3, r3, #11
 8006178:	6453      	str	r3, [r2, #68]	@ 0x44
 800617a:	e015      	b.n	80061a8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800618a:	4619      	mov	r1, r3
 800618c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8006190:	4313      	orrs	r3, r2
 8006192:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061a2:	f043 030b 	orr.w	r3, r3, #11
 80061a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80061ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6818      	ldr	r0, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80061ca:	461a      	mov	r2, r3
 80061cc:	f005 fc0e 	bl	800b9ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695a      	ldr	r2, [r3, #20]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80061de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f005 fb3b 	bl	800b860 <USB_ReadInterrupts>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f4:	d123      	bne.n	800623e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f005 fbd2 	bl	800b9a4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4618      	mov	r0, r3
 8006206:	f004 fc86 	bl	800ab16 <USB_GetDevSpeed>
 800620a:	4603      	mov	r3, r0
 800620c:	461a      	mov	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681c      	ldr	r4, [r3, #0]
 8006216:	f001 fabb 	bl	8007790 <HAL_RCC_GetHCLKFreq>
 800621a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006220:	461a      	mov	r2, r3
 8006222:	4620      	mov	r0, r4
 8006224:	f004 f990 	bl	800a548 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f007 ff5e 	bl	800e0ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695a      	ldr	r2, [r3, #20]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800623c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4618      	mov	r0, r3
 8006244:	f005 fb0c 	bl	800b860 <USB_ReadInterrupts>
 8006248:	4603      	mov	r3, r0
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b08      	cmp	r3, #8
 8006250:	d10a      	bne.n	8006268 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f007 ff3b 	bl	800e0ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f002 0208 	and.w	r2, r2, #8
 8006266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f005 faf7 	bl	800b860 <USB_ReadInterrupts>
 8006272:	4603      	mov	r3, r0
 8006274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006278:	2b80      	cmp	r3, #128	@ 0x80
 800627a:	d123      	bne.n	80062c4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006288:	2301      	movs	r3, #1
 800628a:	627b      	str	r3, [r7, #36]	@ 0x24
 800628c:	e014      	b.n	80062b8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006292:	4613      	mov	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d105      	bne.n	80062b2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fb08 	bl	80068c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	3301      	adds	r3, #1
 80062b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	791b      	ldrb	r3, [r3, #4]
 80062bc:	461a      	mov	r2, r3
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d3e4      	bcc.n	800628e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f005 fac9 	bl	800b860 <USB_ReadInterrupts>
 80062ce:	4603      	mov	r3, r0
 80062d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062d8:	d13c      	bne.n	8006354 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062da:	2301      	movs	r3, #1
 80062dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80062de:	e02b      	b.n	8006338 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f4:	4613      	mov	r3, r2
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	440b      	add	r3, r1
 80062fe:	3318      	adds	r3, #24
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d115      	bne.n	8006332 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006306:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006308:	2b00      	cmp	r3, #0
 800630a:	da12      	bge.n	8006332 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006310:	4613      	mov	r3, r2
 8006312:	00db      	lsls	r3, r3, #3
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	3317      	adds	r3, #23
 800631c:	2201      	movs	r2, #1
 800631e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006328:	b2db      	uxtb	r3, r3
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fac8 	bl	80068c2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	3301      	adds	r3, #1
 8006336:	627b      	str	r3, [r7, #36]	@ 0x24
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	791b      	ldrb	r3, [r3, #4]
 800633c:	461a      	mov	r2, r3
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	4293      	cmp	r3, r2
 8006342:	d3cd      	bcc.n	80062e0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695a      	ldr	r2, [r3, #20]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006352:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f005 fa81 	bl	800b860 <USB_ReadInterrupts>
 800635e:	4603      	mov	r3, r0
 8006360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006364:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006368:	d156      	bne.n	8006418 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800636a:	2301      	movs	r3, #1
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24
 800636e:	e045      	b.n	80063fc <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006384:	4613      	mov	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d12e      	bne.n	80063f6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006398:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800639a:	2b00      	cmp	r3, #0
 800639c:	da2b      	bge.n	80063f6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80063aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d121      	bne.n	80063f6 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b6:	4613      	mov	r3, r2
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80063c4:	2201      	movs	r2, #1
 80063c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063f2:	6053      	str	r3, [r2, #4]
            break;
 80063f4:	e008      	b.n	8006408 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	3301      	adds	r3, #1
 80063fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	791b      	ldrb	r3, [r3, #4]
 8006400:	461a      	mov	r2, r3
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	4293      	cmp	r3, r2
 8006406:	d3b3      	bcc.n	8006370 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695a      	ldr	r2, [r3, #20]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006416:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4618      	mov	r0, r3
 800641e:	f005 fa1f 	bl	800b860 <USB_ReadInterrupts>
 8006422:	4603      	mov	r3, r0
 8006424:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800642c:	d10a      	bne.n	8006444 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f007 fedc 	bl	800e1ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006442:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4618      	mov	r0, r3
 800644a:	f005 fa09 	bl	800b860 <USB_ReadInterrupts>
 800644e:	4603      	mov	r3, r0
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b04      	cmp	r3, #4
 8006456:	d115      	bne.n	8006484 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f007 fecc 	bl	800e208 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6859      	ldr	r1, [r3, #4]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	430a      	orrs	r2, r1
 800647e:	605a      	str	r2, [r3, #4]
 8006480:	e000      	b.n	8006484 <HAL_PCD_IRQHandler+0x996>
      return;
 8006482:	bf00      	nop
    }
  }
}
 8006484:	3734      	adds	r7, #52	@ 0x34
 8006486:	46bd      	mov	sp, r7
 8006488:	bd90      	pop	{r4, r7, pc}

0800648a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b082      	sub	sp, #8
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	460b      	mov	r3, r1
 8006494:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_PCD_SetAddress+0x1a>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e012      	b.n	80064ca <HAL_PCD_SetAddress+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	78fa      	ldrb	r2, [r7, #3]
 80064b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	78fa      	ldrb	r2, [r7, #3]
 80064b8:	4611      	mov	r1, r2
 80064ba:	4618      	mov	r0, r3
 80064bc:	f005 f968 	bl	800b790 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	4608      	mov	r0, r1
 80064dc:	4611      	mov	r1, r2
 80064de:	461a      	mov	r2, r3
 80064e0:	4603      	mov	r3, r0
 80064e2:	70fb      	strb	r3, [r7, #3]
 80064e4:	460b      	mov	r3, r1
 80064e6:	803b      	strh	r3, [r7, #0]
 80064e8:	4613      	mov	r3, r2
 80064ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	da0f      	bge.n	8006518 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	f003 020f 	and.w	r2, r3, #15
 80064fe:	4613      	mov	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	3310      	adds	r3, #16
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	4413      	add	r3, r2
 800650c:	3304      	adds	r3, #4
 800650e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2201      	movs	r2, #1
 8006514:	705a      	strb	r2, [r3, #1]
 8006516:	e00f      	b.n	8006538 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	f003 020f 	and.w	r2, r3, #15
 800651e:	4613      	mov	r3, r2
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	4413      	add	r3, r2
 800652e:	3304      	adds	r3, #4
 8006530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	b2da      	uxtb	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006544:	883a      	ldrh	r2, [r7, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	78ba      	ldrb	r2, [r7, #2]
 800654e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	785b      	ldrb	r3, [r3, #1]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d004      	beq.n	8006562 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006562:	78bb      	ldrb	r3, [r7, #2]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d102      	bne.n	800656e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_PCD_EP_Open+0xaa>
 8006578:	2302      	movs	r3, #2
 800657a:	e00e      	b.n	800659a <HAL_PCD_EP_Open+0xc8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68f9      	ldr	r1, [r7, #12]
 800658a:	4618      	mov	r0, r3
 800658c:	f004 fae8 	bl	800ab60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006598:	7afb      	ldrb	r3, [r7, #11]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	460b      	mov	r3, r1
 80065ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da0f      	bge.n	80065d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	4613      	mov	r3, r2
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	3310      	adds	r3, #16
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	4413      	add	r3, r2
 80065ca:	3304      	adds	r3, #4
 80065cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	705a      	strb	r2, [r3, #1]
 80065d4:	e00f      	b.n	80065f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065d6:	78fb      	ldrb	r3, [r7, #3]
 80065d8:	f003 020f 	and.w	r2, r3, #15
 80065dc:	4613      	mov	r3, r2
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	4413      	add	r3, r2
 80065ec:	3304      	adds	r3, #4
 80065ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_PCD_EP_Close+0x6e>
 800660c:	2302      	movs	r3, #2
 800660e:	e00e      	b.n	800662e <HAL_PCD_EP_Close+0x8c>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68f9      	ldr	r1, [r7, #12]
 800661e:	4618      	mov	r0, r3
 8006620:	f004 fb26 	bl	800ac70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b086      	sub	sp, #24
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
 8006642:	460b      	mov	r3, r1
 8006644:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006646:	7afb      	ldrb	r3, [r7, #11]
 8006648:	f003 020f 	and.w	r2, r3, #15
 800664c:	4613      	mov	r3, r2
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4413      	add	r3, r2
 800665c:	3304      	adds	r3, #4
 800665e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2200      	movs	r2, #0
 8006670:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2200      	movs	r2, #0
 8006676:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006678:	7afb      	ldrb	r3, [r7, #11]
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	b2da      	uxtb	r2, r3
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	799b      	ldrb	r3, [r3, #6]
 8006688:	2b01      	cmp	r3, #1
 800668a:	d102      	bne.n	8006692 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	799b      	ldrb	r3, [r3, #6]
 800669a:	461a      	mov	r2, r3
 800669c:	6979      	ldr	r1, [r7, #20]
 800669e:	f004 fbc3 	bl	800ae28 <USB_EPStartXfer>

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	460b      	mov	r3, r1
 80066b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	f003 020f 	and.w	r2, r3, #15
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	4613      	mov	r3, r2
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	440b      	add	r3, r1
 80066ca:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80066ce:	681b      	ldr	r3, [r3, #0]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	460b      	mov	r3, r1
 80066ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066ec:	7afb      	ldrb	r3, [r7, #11]
 80066ee:	f003 020f 	and.w	r2, r3, #15
 80066f2:	4613      	mov	r3, r2
 80066f4:	00db      	lsls	r3, r3, #3
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	3310      	adds	r3, #16
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4413      	add	r3, r2
 8006700:	3304      	adds	r3, #4
 8006702:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2200      	movs	r2, #0
 8006714:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2201      	movs	r2, #1
 800671a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800671c:	7afb      	ldrb	r3, [r7, #11]
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	b2da      	uxtb	r2, r3
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	799b      	ldrb	r3, [r3, #6]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d102      	bne.n	8006736 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6818      	ldr	r0, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	799b      	ldrb	r3, [r3, #6]
 800673e:	461a      	mov	r2, r3
 8006740:	6979      	ldr	r1, [r7, #20]
 8006742:	f004 fb71 	bl	800ae28 <USB_EPStartXfer>

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	7912      	ldrb	r2, [r2, #4]
 8006766:	4293      	cmp	r3, r2
 8006768:	d901      	bls.n	800676e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e04f      	b.n	800680e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800676e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006772:	2b00      	cmp	r3, #0
 8006774:	da0f      	bge.n	8006796 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	f003 020f 	and.w	r2, r3, #15
 800677c:	4613      	mov	r3, r2
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	3310      	adds	r3, #16
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4413      	add	r3, r2
 800678a:	3304      	adds	r3, #4
 800678c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	705a      	strb	r2, [r3, #1]
 8006794:	e00d      	b.n	80067b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	4613      	mov	r3, r2
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	4413      	add	r3, r2
 80067a8:	3304      	adds	r3, #4
 80067aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067b8:	78fb      	ldrb	r3, [r7, #3]
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d101      	bne.n	80067d2 <HAL_PCD_EP_SetStall+0x82>
 80067ce:	2302      	movs	r3, #2
 80067d0:	e01d      	b.n	800680e <HAL_PCD_EP_SetStall+0xbe>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68f9      	ldr	r1, [r7, #12]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f004 ff01 	bl	800b5e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067e6:	78fb      	ldrb	r3, [r7, #3]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d109      	bne.n	8006804 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	7999      	ldrb	r1, [r3, #6]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067fe:	461a      	mov	r2, r3
 8006800:	f005 f8f4 	bl	800b9ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	7912      	ldrb	r2, [r2, #4]
 800682c:	4293      	cmp	r3, r2
 800682e:	d901      	bls.n	8006834 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e042      	b.n	80068ba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006834:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006838:	2b00      	cmp	r3, #0
 800683a:	da0f      	bge.n	800685c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	f003 020f 	and.w	r2, r3, #15
 8006842:	4613      	mov	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	3310      	adds	r3, #16
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4413      	add	r3, r2
 8006850:	3304      	adds	r3, #4
 8006852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2201      	movs	r2, #1
 8006858:	705a      	strb	r2, [r3, #1]
 800685a:	e00f      	b.n	800687c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	f003 020f 	and.w	r2, r3, #15
 8006862:	4613      	mov	r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	4413      	add	r3, r2
 8006872:	3304      	adds	r3, #4
 8006874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	b2da      	uxtb	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <HAL_PCD_EP_ClrStall+0x86>
 8006898:	2302      	movs	r3, #2
 800689a:	e00e      	b.n	80068ba <HAL_PCD_EP_ClrStall+0xa4>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68f9      	ldr	r1, [r7, #12]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f004 ff0a 	bl	800b6c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	460b      	mov	r3, r1
 80068cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80068ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da0c      	bge.n	80068f0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	f003 020f 	and.w	r2, r3, #15
 80068dc:	4613      	mov	r3, r2
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	3310      	adds	r3, #16
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	4413      	add	r3, r2
 80068ea:	3304      	adds	r3, #4
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	e00c      	b.n	800690a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	f003 020f 	and.w	r2, r3, #15
 80068f6:	4613      	mov	r3, r2
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	4413      	add	r3, r2
 8006906:	3304      	adds	r3, #4
 8006908:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68f9      	ldr	r1, [r7, #12]
 8006910:	4618      	mov	r0, r3
 8006912:	f004 fd29 	bl	800b368 <USB_EPStopXfer>
 8006916:	4603      	mov	r3, r0
 8006918:	72fb      	strb	r3, [r7, #11]

  return ret;
 800691a:	7afb      	ldrb	r3, [r7, #11]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	@ 0x28
 8006928:	af02      	add	r7, sp, #8
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	4613      	mov	r3, r2
 800693c:	00db      	lsls	r3, r3, #3
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	3310      	adds	r3, #16
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	4413      	add	r3, r2
 8006948:	3304      	adds	r3, #4
 800694a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	695a      	ldr	r2, [r3, #20]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	429a      	cmp	r2, r3
 8006956:	d901      	bls.n	800695c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e06b      	b.n	8006a34 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	429a      	cmp	r2, r3
 8006970:	d902      	bls.n	8006978 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	3303      	adds	r3, #3
 800697c:	089b      	lsrs	r3, r3, #2
 800697e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006980:	e02a      	b.n	80069d8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	429a      	cmp	r2, r3
 8006996:	d902      	bls.n	800699e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	3303      	adds	r3, #3
 80069a2:	089b      	lsrs	r3, r3, #2
 80069a4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	68d9      	ldr	r1, [r3, #12]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	4603      	mov	r3, r0
 80069ba:	6978      	ldr	r0, [r7, #20]
 80069bc:	f004 fd7e 	bl	800b4bc <USB_WritePacket>

    ep->xfer_buff  += len;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	441a      	add	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	695a      	ldr	r2, [r3, #20]
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	441a      	add	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d809      	bhi.n	8006a02 <PCD_WriteEmptyTxFifo+0xde>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	695a      	ldr	r2, [r3, #20]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d203      	bcs.n	8006a02 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1bf      	bne.n	8006982 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d811      	bhi.n	8006a32 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	2201      	movs	r2, #1
 8006a16:	fa02 f303 	lsl.w	r3, r2, r3
 8006a1a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	43db      	mvns	r3, r3
 8006a28:	6939      	ldr	r1, [r7, #16]
 8006a2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a2e:	4013      	ands	r3, r2
 8006a30:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	333c      	adds	r3, #60	@ 0x3c
 8006a54:	3304      	adds	r3, #4
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	015a      	lsls	r2, r3, #5
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	799b      	ldrb	r3, [r3, #6]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d17b      	bne.n	8006b6a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d015      	beq.n	8006aa8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	4a61      	ldr	r2, [pc, #388]	@ (8006c04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	f240 80b9 	bls.w	8006bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 80b3 	beq.w	8006bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aa4:	6093      	str	r3, [r2, #8]
 8006aa6:	e0a7      	b.n	8006bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006abe:	461a      	mov	r2, r3
 8006ac0:	2320      	movs	r3, #32
 8006ac2:	6093      	str	r3, [r2, #8]
 8006ac4:	e098      	b.n	8006bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f040 8093 	bne.w	8006bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	4a4b      	ldr	r2, [pc, #300]	@ (8006c04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d90f      	bls.n	8006afa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00a      	beq.n	8006afa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af0:	461a      	mov	r2, r3
 8006af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006af6:	6093      	str	r3, [r2, #8]
 8006af8:	e07e      	b.n	8006bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	4613      	mov	r3, r2
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1a      	ldr	r2, [r3, #32]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	0159      	lsls	r1, r3, #5
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	440b      	add	r3, r1
 8006b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b26:	1ad2      	subs	r2, r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d114      	bne.n	8006b5c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006b44:	461a      	mov	r2, r3
 8006b46:	2101      	movs	r1, #1
 8006b48:	f004 ff50 	bl	800b9ec <USB_EP0_OutStart>
 8006b4c:	e006      	b.n	8006b5c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	441a      	add	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	4619      	mov	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f007 fa7e 	bl	800e064 <HAL_PCD_DataOutStageCallback>
 8006b68:	e046      	b.n	8006bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	4a26      	ldr	r2, [pc, #152]	@ (8006c08 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d124      	bne.n	8006bbc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b88:	461a      	mov	r2, r3
 8006b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b8e:	6093      	str	r3, [r2, #8]
 8006b90:	e032      	b.n	8006bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba8:	461a      	mov	r2, r3
 8006baa:	2320      	movs	r3, #32
 8006bac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f007 fa55 	bl	800e064 <HAL_PCD_DataOutStageCallback>
 8006bba:	e01d      	b.n	8006bf8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d114      	bne.n	8006bec <PCD_EP_OutXfrComplete_int+0x1b0>
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	4413      	add	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	440b      	add	r3, r1
 8006bd0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d108      	bne.n	8006bec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006be4:	461a      	mov	r2, r3
 8006be6:	2100      	movs	r1, #0
 8006be8:	f004 ff00 	bl	800b9ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f007 fa36 	bl	800e064 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	4f54300a 	.word	0x4f54300a
 8006c08:	4f54310a 	.word	0x4f54310a

08006c0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	333c      	adds	r3, #60	@ 0x3c
 8006c24:	3304      	adds	r3, #4
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4a15      	ldr	r2, [pc, #84]	@ (8006c94 <PCD_EP_OutSetupPacket_int+0x88>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d90e      	bls.n	8006c60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d009      	beq.n	8006c60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f007 f9ed 	bl	800e040 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a0a      	ldr	r2, [pc, #40]	@ (8006c94 <PCD_EP_OutSetupPacket_int+0x88>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d90c      	bls.n	8006c88 <PCD_EP_OutSetupPacket_int+0x7c>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	799b      	ldrb	r3, [r3, #6]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d108      	bne.n	8006c88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c80:	461a      	mov	r2, r3
 8006c82:	2101      	movs	r1, #1
 8006c84:	f004 feb2 	bl	800b9ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	4f54300a 	.word	0x4f54300a

08006c98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d107      	bne.n	8006cc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006cb6:	883b      	ldrh	r3, [r7, #0]
 8006cb8:	0419      	lsls	r1, r3, #16
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006cc4:	e028      	b.n	8006d18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]
 8006cd8:	e00d      	b.n	8006cf6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	3340      	adds	r3, #64	@ 0x40
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	0c1b      	lsrs	r3, r3, #16
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	4413      	add	r3, r2
 8006cee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	73fb      	strb	r3, [r7, #15]
 8006cf6:	7bfa      	ldrb	r2, [r7, #15]
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d3ec      	bcc.n	8006cda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006d00:	883b      	ldrh	r3, [r7, #0]
 8006d02:	0418      	lsls	r0, r3, #16
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6819      	ldr	r1, [r3, #0]
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	4302      	orrs	r2, r0
 8006d10:	3340      	adds	r3, #64	@ 0x40
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	440b      	add	r3, r1
 8006d16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	460b      	mov	r3, r1
 8006d30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	887a      	ldrh	r2, [r7, #2]
 8006d38:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d76:	4b05      	ldr	r3, [pc, #20]	@ (8006d8c <HAL_PCDEx_ActivateLPM+0x44>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	10000003 	.word	0x10000003

08006d90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d94:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a04      	ldr	r2, [pc, #16]	@ (8006dac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d9e:	6013      	str	r3, [r2, #0]
}
 8006da0:	bf00      	nop
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	40007000 	.word	0x40007000

08006db0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006db6:	2300      	movs	r3, #0
 8006db8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006dba:	4b23      	ldr	r3, [pc, #140]	@ (8006e48 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbe:	4a22      	ldr	r2, [pc, #136]	@ (8006e48 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dc6:	4b20      	ldr	r3, [pc, #128]	@ (8006e48 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8006e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8006e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ddc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dde:	f7fc feb1 	bl	8003b44 <HAL_GetTick>
 8006de2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006de4:	e009      	b.n	8006dfa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006de6:	f7fc fead 	bl	8003b44 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006df4:	d901      	bls.n	8006dfa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e022      	b.n	8006e40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006dfa:	4b14      	ldr	r3, [pc, #80]	@ (8006e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e06:	d1ee      	bne.n	8006de6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006e08:	4b10      	ldr	r3, [pc, #64]	@ (8006e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8006e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e14:	f7fc fe96 	bl	8003b44 <HAL_GetTick>
 8006e18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e1a:	e009      	b.n	8006e30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e1c:	f7fc fe92 	bl	8003b44 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e2a:	d901      	bls.n	8006e30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e007      	b.n	8006e40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e30:	4b06      	ldr	r3, [pc, #24]	@ (8006e4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e3c:	d1ee      	bne.n	8006e1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	40023800 	.word	0x40023800
 8006e4c:	40007000 	.word	0x40007000

08006e50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e29b      	b.n	800739e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 8087 	beq.w	8006f82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e74:	4b96      	ldr	r3, [pc, #600]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 030c 	and.w	r3, r3, #12
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d00c      	beq.n	8006e9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e80:	4b93      	ldr	r3, [pc, #588]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 030c 	and.w	r3, r3, #12
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d112      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x62>
 8006e8c:	4b90      	ldr	r3, [pc, #576]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e98:	d10b      	bne.n	8006eb2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e9a:	4b8d      	ldr	r3, [pc, #564]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d06c      	beq.n	8006f80 <HAL_RCC_OscConfig+0x130>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d168      	bne.n	8006f80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e275      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eba:	d106      	bne.n	8006eca <HAL_RCC_OscConfig+0x7a>
 8006ebc:	4b84      	ldr	r3, [pc, #528]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a83      	ldr	r2, [pc, #524]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	e02e      	b.n	8006f28 <HAL_RCC_OscConfig+0xd8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10c      	bne.n	8006eec <HAL_RCC_OscConfig+0x9c>
 8006ed2:	4b7f      	ldr	r3, [pc, #508]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a7e      	ldr	r2, [pc, #504]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	4b7c      	ldr	r3, [pc, #496]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a7b      	ldr	r2, [pc, #492]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006ee4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	e01d      	b.n	8006f28 <HAL_RCC_OscConfig+0xd8>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ef4:	d10c      	bne.n	8006f10 <HAL_RCC_OscConfig+0xc0>
 8006ef6:	4b76      	ldr	r3, [pc, #472]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a75      	ldr	r2, [pc, #468]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	4b73      	ldr	r3, [pc, #460]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a72      	ldr	r2, [pc, #456]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e00b      	b.n	8006f28 <HAL_RCC_OscConfig+0xd8>
 8006f10:	4b6f      	ldr	r3, [pc, #444]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a6e      	ldr	r2, [pc, #440]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	4b6c      	ldr	r3, [pc, #432]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a6b      	ldr	r2, [pc, #428]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d013      	beq.n	8006f58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f30:	f7fc fe08 	bl	8003b44 <HAL_GetTick>
 8006f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f38:	f7fc fe04 	bl	8003b44 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b64      	cmp	r3, #100	@ 0x64
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e229      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f4a:	4b61      	ldr	r3, [pc, #388]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0f0      	beq.n	8006f38 <HAL_RCC_OscConfig+0xe8>
 8006f56:	e014      	b.n	8006f82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f58:	f7fc fdf4 	bl	8003b44 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f60:	f7fc fdf0 	bl	8003b44 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b64      	cmp	r3, #100	@ 0x64
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e215      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f72:	4b57      	ldr	r3, [pc, #348]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x110>
 8006f7e:	e000      	b.n	8006f82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d069      	beq.n	8007062 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f8e:	4b50      	ldr	r3, [pc, #320]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f003 030c 	and.w	r3, r3, #12
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00b      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f003 030c 	and.w	r3, r3, #12
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d11c      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x190>
 8006fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d116      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fb2:	4b47      	ldr	r3, [pc, #284]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <HAL_RCC_OscConfig+0x17a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d001      	beq.n	8006fca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e1e9      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fca:	4b41      	ldr	r3, [pc, #260]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	493d      	ldr	r1, [pc, #244]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fde:	e040      	b.n	8007062 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d023      	beq.n	8007030 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fe8:	4b39      	ldr	r3, [pc, #228]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a38      	ldr	r2, [pc, #224]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8006fee:	f043 0301 	orr.w	r3, r3, #1
 8006ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff4:	f7fc fda6 	bl	8003b44 <HAL_GetTick>
 8006ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ffc:	f7fc fda2 	bl	8003b44 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e1c7      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800700e:	4b30      	ldr	r3, [pc, #192]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f0      	beq.n	8006ffc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800701a:	4b2d      	ldr	r3, [pc, #180]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	4929      	ldr	r1, [pc, #164]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 800702a:	4313      	orrs	r3, r2
 800702c:	600b      	str	r3, [r1, #0]
 800702e:	e018      	b.n	8007062 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007030:	4b27      	ldr	r3, [pc, #156]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a26      	ldr	r2, [pc, #152]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703c:	f7fc fd82 	bl	8003b44 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007042:	e008      	b.n	8007056 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007044:	f7fc fd7e 	bl	8003b44 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e1a3      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007056:	4b1e      	ldr	r3, [pc, #120]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f0      	bne.n	8007044 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d038      	beq.n	80070e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d019      	beq.n	80070aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007076:	4b16      	ldr	r3, [pc, #88]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 8007078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800707a:	4a15      	ldr	r2, [pc, #84]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 800707c:	f043 0301 	orr.w	r3, r3, #1
 8007080:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007082:	f7fc fd5f 	bl	8003b44 <HAL_GetTick>
 8007086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007088:	e008      	b.n	800709c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800708a:	f7fc fd5b 	bl	8003b44 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e180      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800709c:	4b0c      	ldr	r3, [pc, #48]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 800709e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d0f0      	beq.n	800708a <HAL_RCC_OscConfig+0x23a>
 80070a8:	e01a      	b.n	80070e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070aa:	4b09      	ldr	r3, [pc, #36]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 80070ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070ae:	4a08      	ldr	r2, [pc, #32]	@ (80070d0 <HAL_RCC_OscConfig+0x280>)
 80070b0:	f023 0301 	bic.w	r3, r3, #1
 80070b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b6:	f7fc fd45 	bl	8003b44 <HAL_GetTick>
 80070ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070bc:	e00a      	b.n	80070d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070be:	f7fc fd41 	bl	8003b44 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d903      	bls.n	80070d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e166      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
 80070d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070d4:	4b92      	ldr	r3, [pc, #584]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80070d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1ee      	bne.n	80070be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 80a4 	beq.w	8007236 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070ee:	4b8c      	ldr	r3, [pc, #560]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80070f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10d      	bne.n	8007116 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80070fa:	4b89      	ldr	r3, [pc, #548]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80070fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fe:	4a88      	ldr	r2, [pc, #544]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 8007100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007104:	6413      	str	r3, [r2, #64]	@ 0x40
 8007106:	4b86      	ldr	r3, [pc, #536]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 8007108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800710e:	60bb      	str	r3, [r7, #8]
 8007110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007112:	2301      	movs	r3, #1
 8007114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007116:	4b83      	ldr	r3, [pc, #524]	@ (8007324 <HAL_RCC_OscConfig+0x4d4>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711e:	2b00      	cmp	r3, #0
 8007120:	d118      	bne.n	8007154 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007122:	4b80      	ldr	r3, [pc, #512]	@ (8007324 <HAL_RCC_OscConfig+0x4d4>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a7f      	ldr	r2, [pc, #508]	@ (8007324 <HAL_RCC_OscConfig+0x4d4>)
 8007128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800712c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800712e:	f7fc fd09 	bl	8003b44 <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007134:	e008      	b.n	8007148 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007136:	f7fc fd05 	bl	8003b44 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b64      	cmp	r3, #100	@ 0x64
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e12a      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007148:	4b76      	ldr	r3, [pc, #472]	@ (8007324 <HAL_RCC_OscConfig+0x4d4>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0f0      	beq.n	8007136 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d106      	bne.n	800716a <HAL_RCC_OscConfig+0x31a>
 800715c:	4b70      	ldr	r3, [pc, #448]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 800715e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007160:	4a6f      	ldr	r2, [pc, #444]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 8007162:	f043 0301 	orr.w	r3, r3, #1
 8007166:	6713      	str	r3, [r2, #112]	@ 0x70
 8007168:	e02d      	b.n	80071c6 <HAL_RCC_OscConfig+0x376>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10c      	bne.n	800718c <HAL_RCC_OscConfig+0x33c>
 8007172:	4b6b      	ldr	r3, [pc, #428]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 8007174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007176:	4a6a      	ldr	r2, [pc, #424]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 8007178:	f023 0301 	bic.w	r3, r3, #1
 800717c:	6713      	str	r3, [r2, #112]	@ 0x70
 800717e:	4b68      	ldr	r3, [pc, #416]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 8007180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007182:	4a67      	ldr	r2, [pc, #412]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 8007184:	f023 0304 	bic.w	r3, r3, #4
 8007188:	6713      	str	r3, [r2, #112]	@ 0x70
 800718a:	e01c      	b.n	80071c6 <HAL_RCC_OscConfig+0x376>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b05      	cmp	r3, #5
 8007192:	d10c      	bne.n	80071ae <HAL_RCC_OscConfig+0x35e>
 8007194:	4b62      	ldr	r3, [pc, #392]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 8007196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007198:	4a61      	ldr	r2, [pc, #388]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 800719a:	f043 0304 	orr.w	r3, r3, #4
 800719e:	6713      	str	r3, [r2, #112]	@ 0x70
 80071a0:	4b5f      	ldr	r3, [pc, #380]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80071a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071a4:	4a5e      	ldr	r2, [pc, #376]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80071a6:	f043 0301 	orr.w	r3, r3, #1
 80071aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80071ac:	e00b      	b.n	80071c6 <HAL_RCC_OscConfig+0x376>
 80071ae:	4b5c      	ldr	r3, [pc, #368]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80071b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071b2:	4a5b      	ldr	r2, [pc, #364]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80071ba:	4b59      	ldr	r3, [pc, #356]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80071bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071be:	4a58      	ldr	r2, [pc, #352]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80071c0:	f023 0304 	bic.w	r3, r3, #4
 80071c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d015      	beq.n	80071fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ce:	f7fc fcb9 	bl	8003b44 <HAL_GetTick>
 80071d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d4:	e00a      	b.n	80071ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071d6:	f7fc fcb5 	bl	8003b44 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e0d8      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ec:	4b4c      	ldr	r3, [pc, #304]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80071ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0ee      	beq.n	80071d6 <HAL_RCC_OscConfig+0x386>
 80071f8:	e014      	b.n	8007224 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fa:	f7fc fca3 	bl	8003b44 <HAL_GetTick>
 80071fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007200:	e00a      	b.n	8007218 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007202:	f7fc fc9f 	bl	8003b44 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007210:	4293      	cmp	r3, r2
 8007212:	d901      	bls.n	8007218 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e0c2      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007218:	4b41      	ldr	r3, [pc, #260]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 800721a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1ee      	bne.n	8007202 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d105      	bne.n	8007236 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800722a:	4b3d      	ldr	r3, [pc, #244]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	4a3c      	ldr	r2, [pc, #240]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 8007230:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007234:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 80ae 	beq.w	800739c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007240:	4b37      	ldr	r3, [pc, #220]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f003 030c 	and.w	r3, r3, #12
 8007248:	2b08      	cmp	r3, #8
 800724a:	d06d      	beq.n	8007328 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	2b02      	cmp	r3, #2
 8007252:	d14b      	bne.n	80072ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007254:	4b32      	ldr	r3, [pc, #200]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a31      	ldr	r2, [pc, #196]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 800725a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800725e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007260:	f7fc fc70 	bl	8003b44 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007268:	f7fc fc6c 	bl	8003b44 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e091      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800727a:	4b29      	ldr	r3, [pc, #164]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1f0      	bne.n	8007268 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	69da      	ldr	r2, [r3, #28]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007294:	019b      	lsls	r3, r3, #6
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729c:	085b      	lsrs	r3, r3, #1
 800729e:	3b01      	subs	r3, #1
 80072a0:	041b      	lsls	r3, r3, #16
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a8:	061b      	lsls	r3, r3, #24
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b0:	071b      	lsls	r3, r3, #28
 80072b2:	491b      	ldr	r1, [pc, #108]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072b8:	4b19      	ldr	r3, [pc, #100]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a18      	ldr	r2, [pc, #96]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80072be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c4:	f7fc fc3e 	bl	8003b44 <HAL_GetTick>
 80072c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ca:	e008      	b.n	80072de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072cc:	f7fc fc3a 	bl	8003b44 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e05f      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072de:	4b10      	ldr	r3, [pc, #64]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0f0      	beq.n	80072cc <HAL_RCC_OscConfig+0x47c>
 80072ea:	e057      	b.n	800739c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a0b      	ldr	r2, [pc, #44]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 80072f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f8:	f7fc fc24 	bl	8003b44 <HAL_GetTick>
 80072fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072fe:	e008      	b.n	8007312 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007300:	f7fc fc20 	bl	8003b44 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b02      	cmp	r3, #2
 800730c:	d901      	bls.n	8007312 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e045      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007312:	4b03      	ldr	r3, [pc, #12]	@ (8007320 <HAL_RCC_OscConfig+0x4d0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1f0      	bne.n	8007300 <HAL_RCC_OscConfig+0x4b0>
 800731e:	e03d      	b.n	800739c <HAL_RCC_OscConfig+0x54c>
 8007320:	40023800 	.word	0x40023800
 8007324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007328:	4b1f      	ldr	r3, [pc, #124]	@ (80073a8 <HAL_RCC_OscConfig+0x558>)
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d030      	beq.n	8007398 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007340:	429a      	cmp	r2, r3
 8007342:	d129      	bne.n	8007398 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800734e:	429a      	cmp	r2, r3
 8007350:	d122      	bne.n	8007398 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007358:	4013      	ands	r3, r2
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800735e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007360:	4293      	cmp	r3, r2
 8007362:	d119      	bne.n	8007398 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	3b01      	subs	r3, #1
 8007372:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007374:	429a      	cmp	r2, r3
 8007376:	d10f      	bne.n	8007398 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007382:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007384:	429a      	cmp	r2, r3
 8007386:	d107      	bne.n	8007398 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007392:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007394:	429a      	cmp	r2, r3
 8007396:	d001      	beq.n	800739c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	40023800 	.word	0x40023800

080073ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e0d0      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007570 <HAL_RCC_ClockConfig+0x1c4>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 030f 	and.w	r3, r3, #15
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d910      	bls.n	80073f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073d2:	4b67      	ldr	r3, [pc, #412]	@ (8007570 <HAL_RCC_ClockConfig+0x1c4>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f023 020f 	bic.w	r2, r3, #15
 80073da:	4965      	ldr	r1, [pc, #404]	@ (8007570 <HAL_RCC_ClockConfig+0x1c4>)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	4313      	orrs	r3, r2
 80073e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073e2:	4b63      	ldr	r3, [pc, #396]	@ (8007570 <HAL_RCC_ClockConfig+0x1c4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d001      	beq.n	80073f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e0b8      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d020      	beq.n	8007442 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800740c:	4b59      	ldr	r3, [pc, #356]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	4a58      	ldr	r2, [pc, #352]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 8007412:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007416:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007424:	4b53      	ldr	r3, [pc, #332]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	4a52      	ldr	r2, [pc, #328]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 800742a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800742e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007430:	4b50      	ldr	r3, [pc, #320]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	494d      	ldr	r1, [pc, #308]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 800743e:	4313      	orrs	r3, r2
 8007440:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d040      	beq.n	80074d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d107      	bne.n	8007466 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007456:	4b47      	ldr	r3, [pc, #284]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d115      	bne.n	800748e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e07f      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2b02      	cmp	r3, #2
 800746c:	d107      	bne.n	800747e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800746e:	4b41      	ldr	r3, [pc, #260]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e073      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800747e:	4b3d      	ldr	r3, [pc, #244]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e06b      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800748e:	4b39      	ldr	r3, [pc, #228]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f023 0203 	bic.w	r2, r3, #3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	4936      	ldr	r1, [pc, #216]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 800749c:	4313      	orrs	r3, r2
 800749e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074a0:	f7fc fb50 	bl	8003b44 <HAL_GetTick>
 80074a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074a6:	e00a      	b.n	80074be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074a8:	f7fc fb4c 	bl	8003b44 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e053      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074be:	4b2d      	ldr	r3, [pc, #180]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 020c 	and.w	r2, r3, #12
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d1eb      	bne.n	80074a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074d0:	4b27      	ldr	r3, [pc, #156]	@ (8007570 <HAL_RCC_ClockConfig+0x1c4>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 030f 	and.w	r3, r3, #15
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d210      	bcs.n	8007500 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074de:	4b24      	ldr	r3, [pc, #144]	@ (8007570 <HAL_RCC_ClockConfig+0x1c4>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f023 020f 	bic.w	r2, r3, #15
 80074e6:	4922      	ldr	r1, [pc, #136]	@ (8007570 <HAL_RCC_ClockConfig+0x1c4>)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ee:	4b20      	ldr	r3, [pc, #128]	@ (8007570 <HAL_RCC_ClockConfig+0x1c4>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d001      	beq.n	8007500 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e032      	b.n	8007566 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800750c:	4b19      	ldr	r3, [pc, #100]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	4916      	ldr	r1, [pc, #88]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 800751a:	4313      	orrs	r3, r2
 800751c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d009      	beq.n	800753e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800752a:	4b12      	ldr	r3, [pc, #72]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	490e      	ldr	r1, [pc, #56]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 800753a:	4313      	orrs	r3, r2
 800753c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800753e:	f000 f821 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 8007542:	4602      	mov	r2, r0
 8007544:	4b0b      	ldr	r3, [pc, #44]	@ (8007574 <HAL_RCC_ClockConfig+0x1c8>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	091b      	lsrs	r3, r3, #4
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	490a      	ldr	r1, [pc, #40]	@ (8007578 <HAL_RCC_ClockConfig+0x1cc>)
 8007550:	5ccb      	ldrb	r3, [r1, r3]
 8007552:	fa22 f303 	lsr.w	r3, r2, r3
 8007556:	4a09      	ldr	r2, [pc, #36]	@ (800757c <HAL_RCC_ClockConfig+0x1d0>)
 8007558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800755a:	4b09      	ldr	r3, [pc, #36]	@ (8007580 <HAL_RCC_ClockConfig+0x1d4>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f7fc faac 	bl	8003abc <HAL_InitTick>

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	40023c00 	.word	0x40023c00
 8007574:	40023800 	.word	0x40023800
 8007578:	0800ee38 	.word	0x0800ee38
 800757c:	2000000c 	.word	0x2000000c
 8007580:	20000010 	.word	0x20000010

08007584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007588:	b094      	sub	sp, #80	@ 0x50
 800758a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007590:	2300      	movs	r3, #0
 8007592:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007594:	2300      	movs	r3, #0
 8007596:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800759c:	4b79      	ldr	r3, [pc, #484]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x200>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	f003 030c 	and.w	r3, r3, #12
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d00d      	beq.n	80075c4 <HAL_RCC_GetSysClockFreq+0x40>
 80075a8:	2b08      	cmp	r3, #8
 80075aa:	f200 80e1 	bhi.w	8007770 <HAL_RCC_GetSysClockFreq+0x1ec>
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <HAL_RCC_GetSysClockFreq+0x34>
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d003      	beq.n	80075be <HAL_RCC_GetSysClockFreq+0x3a>
 80075b6:	e0db      	b.n	8007770 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075b8:	4b73      	ldr	r3, [pc, #460]	@ (8007788 <HAL_RCC_GetSysClockFreq+0x204>)
 80075ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80075bc:	e0db      	b.n	8007776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075be:	4b73      	ldr	r3, [pc, #460]	@ (800778c <HAL_RCC_GetSysClockFreq+0x208>)
 80075c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80075c2:	e0d8      	b.n	8007776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075c4:	4b6f      	ldr	r3, [pc, #444]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x200>)
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80075ce:	4b6d      	ldr	r3, [pc, #436]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x200>)
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d063      	beq.n	80076a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075da:	4b6a      	ldr	r3, [pc, #424]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x200>)
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	099b      	lsrs	r3, r3, #6
 80075e0:	2200      	movs	r2, #0
 80075e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80075e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80075e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80075ee:	2300      	movs	r3, #0
 80075f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	f04f 0000 	mov.w	r0, #0
 80075fe:	f04f 0100 	mov.w	r1, #0
 8007602:	0159      	lsls	r1, r3, #5
 8007604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007608:	0150      	lsls	r0, r2, #5
 800760a:	4602      	mov	r2, r0
 800760c:	460b      	mov	r3, r1
 800760e:	4621      	mov	r1, r4
 8007610:	1a51      	subs	r1, r2, r1
 8007612:	6139      	str	r1, [r7, #16]
 8007614:	4629      	mov	r1, r5
 8007616:	eb63 0301 	sbc.w	r3, r3, r1
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007628:	4659      	mov	r1, fp
 800762a:	018b      	lsls	r3, r1, #6
 800762c:	4651      	mov	r1, sl
 800762e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007632:	4651      	mov	r1, sl
 8007634:	018a      	lsls	r2, r1, #6
 8007636:	4651      	mov	r1, sl
 8007638:	ebb2 0801 	subs.w	r8, r2, r1
 800763c:	4659      	mov	r1, fp
 800763e:	eb63 0901 	sbc.w	r9, r3, r1
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	f04f 0300 	mov.w	r3, #0
 800764a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800764e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007652:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007656:	4690      	mov	r8, r2
 8007658:	4699      	mov	r9, r3
 800765a:	4623      	mov	r3, r4
 800765c:	eb18 0303 	adds.w	r3, r8, r3
 8007660:	60bb      	str	r3, [r7, #8]
 8007662:	462b      	mov	r3, r5
 8007664:	eb49 0303 	adc.w	r3, r9, r3
 8007668:	60fb      	str	r3, [r7, #12]
 800766a:	f04f 0200 	mov.w	r2, #0
 800766e:	f04f 0300 	mov.w	r3, #0
 8007672:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007676:	4629      	mov	r1, r5
 8007678:	024b      	lsls	r3, r1, #9
 800767a:	4621      	mov	r1, r4
 800767c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007680:	4621      	mov	r1, r4
 8007682:	024a      	lsls	r2, r1, #9
 8007684:	4610      	mov	r0, r2
 8007686:	4619      	mov	r1, r3
 8007688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800768a:	2200      	movs	r2, #0
 800768c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800768e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007690:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007694:	f7f8 ff8c 	bl	80005b0 <__aeabi_uldivmod>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4613      	mov	r3, r2
 800769e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076a0:	e058      	b.n	8007754 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076a2:	4b38      	ldr	r3, [pc, #224]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x200>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	099b      	lsrs	r3, r3, #6
 80076a8:	2200      	movs	r2, #0
 80076aa:	4618      	mov	r0, r3
 80076ac:	4611      	mov	r1, r2
 80076ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80076b2:	623b      	str	r3, [r7, #32]
 80076b4:	2300      	movs	r3, #0
 80076b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80076b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80076bc:	4642      	mov	r2, r8
 80076be:	464b      	mov	r3, r9
 80076c0:	f04f 0000 	mov.w	r0, #0
 80076c4:	f04f 0100 	mov.w	r1, #0
 80076c8:	0159      	lsls	r1, r3, #5
 80076ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076ce:	0150      	lsls	r0, r2, #5
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4641      	mov	r1, r8
 80076d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80076da:	4649      	mov	r1, r9
 80076dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80076ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80076f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80076f4:	ebb2 040a 	subs.w	r4, r2, sl
 80076f8:	eb63 050b 	sbc.w	r5, r3, fp
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	00eb      	lsls	r3, r5, #3
 8007706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800770a:	00e2      	lsls	r2, r4, #3
 800770c:	4614      	mov	r4, r2
 800770e:	461d      	mov	r5, r3
 8007710:	4643      	mov	r3, r8
 8007712:	18e3      	adds	r3, r4, r3
 8007714:	603b      	str	r3, [r7, #0]
 8007716:	464b      	mov	r3, r9
 8007718:	eb45 0303 	adc.w	r3, r5, r3
 800771c:	607b      	str	r3, [r7, #4]
 800771e:	f04f 0200 	mov.w	r2, #0
 8007722:	f04f 0300 	mov.w	r3, #0
 8007726:	e9d7 4500 	ldrd	r4, r5, [r7]
 800772a:	4629      	mov	r1, r5
 800772c:	028b      	lsls	r3, r1, #10
 800772e:	4621      	mov	r1, r4
 8007730:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007734:	4621      	mov	r1, r4
 8007736:	028a      	lsls	r2, r1, #10
 8007738:	4610      	mov	r0, r2
 800773a:	4619      	mov	r1, r3
 800773c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800773e:	2200      	movs	r2, #0
 8007740:	61bb      	str	r3, [r7, #24]
 8007742:	61fa      	str	r2, [r7, #28]
 8007744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007748:	f7f8 ff32 	bl	80005b0 <__aeabi_uldivmod>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4613      	mov	r3, r2
 8007752:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007754:	4b0b      	ldr	r3, [pc, #44]	@ (8007784 <HAL_RCC_GetSysClockFreq+0x200>)
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	0c1b      	lsrs	r3, r3, #16
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	3301      	adds	r3, #1
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007764:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007768:	fbb2 f3f3 	udiv	r3, r2, r3
 800776c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800776e:	e002      	b.n	8007776 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007770:	4b05      	ldr	r3, [pc, #20]	@ (8007788 <HAL_RCC_GetSysClockFreq+0x204>)
 8007772:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007778:	4618      	mov	r0, r3
 800777a:	3750      	adds	r7, #80	@ 0x50
 800777c:	46bd      	mov	sp, r7
 800777e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007782:	bf00      	nop
 8007784:	40023800 	.word	0x40023800
 8007788:	00f42400 	.word	0x00f42400
 800778c:	007a1200 	.word	0x007a1200

08007790 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007794:	4b03      	ldr	r3, [pc, #12]	@ (80077a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007796:	681b      	ldr	r3, [r3, #0]
}
 8007798:	4618      	mov	r0, r3
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	2000000c 	.word	0x2000000c

080077a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077ac:	f7ff fff0 	bl	8007790 <HAL_RCC_GetHCLKFreq>
 80077b0:	4602      	mov	r2, r0
 80077b2:	4b05      	ldr	r3, [pc, #20]	@ (80077c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	0a9b      	lsrs	r3, r3, #10
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	4903      	ldr	r1, [pc, #12]	@ (80077cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80077be:	5ccb      	ldrb	r3, [r1, r3]
 80077c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	40023800 	.word	0x40023800
 80077cc:	0800ee48 	.word	0x0800ee48

080077d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077d4:	f7ff ffdc 	bl	8007790 <HAL_RCC_GetHCLKFreq>
 80077d8:	4602      	mov	r2, r0
 80077da:	4b05      	ldr	r3, [pc, #20]	@ (80077f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	0b5b      	lsrs	r3, r3, #13
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	4903      	ldr	r1, [pc, #12]	@ (80077f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077e6:	5ccb      	ldrb	r3, [r1, r3]
 80077e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	40023800 	.word	0x40023800
 80077f4:	0800ee48 	.word	0x0800ee48

080077f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007810:	2300      	movs	r3, #0
 8007812:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d012      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007820:	4b69      	ldr	r3, [pc, #420]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	4a68      	ldr	r2, [pc, #416]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007826:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800782a:	6093      	str	r3, [r2, #8]
 800782c:	4b66      	ldr	r3, [pc, #408]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800782e:	689a      	ldr	r2, [r3, #8]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007834:	4964      	ldr	r1, [pc, #400]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007836:	4313      	orrs	r3, r2
 8007838:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007842:	2301      	movs	r3, #1
 8007844:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d017      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007852:	4b5d      	ldr	r3, [pc, #372]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007858:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007860:	4959      	ldr	r1, [pc, #356]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007862:	4313      	orrs	r3, r2
 8007864:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800786c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007870:	d101      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007872:	2301      	movs	r3, #1
 8007874:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800787e:	2301      	movs	r3, #1
 8007880:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d017      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800788e:	4b4e      	ldr	r3, [pc, #312]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007890:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007894:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789c:	494a      	ldr	r1, [pc, #296]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078ac:	d101      	bne.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80078ae:	2301      	movs	r3, #1
 80078b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80078ba:	2301      	movs	r3, #1
 80078bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80078ca:	2301      	movs	r3, #1
 80078cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 808b 	beq.w	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80078dc:	4b3a      	ldr	r3, [pc, #232]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e0:	4a39      	ldr	r2, [pc, #228]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80078e8:	4b37      	ldr	r3, [pc, #220]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078f0:	60bb      	str	r3, [r7, #8]
 80078f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078f4:	4b35      	ldr	r3, [pc, #212]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a34      	ldr	r2, [pc, #208]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007900:	f7fc f920 	bl	8003b44 <HAL_GetTick>
 8007904:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007906:	e008      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007908:	f7fc f91c 	bl	8003b44 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b64      	cmp	r3, #100	@ 0x64
 8007914:	d901      	bls.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e38f      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800791a:	4b2c      	ldr	r3, [pc, #176]	@ (80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0f0      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007926:	4b28      	ldr	r3, [pc, #160]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800792a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800792e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d035      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800793a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	429a      	cmp	r2, r3
 8007942:	d02e      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007944:	4b20      	ldr	r3, [pc, #128]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800794c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800794e:	4b1e      	ldr	r3, [pc, #120]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007952:	4a1d      	ldr	r2, [pc, #116]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007958:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800795a:	4b1b      	ldr	r3, [pc, #108]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800795c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800795e:	4a1a      	ldr	r2, [pc, #104]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007960:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007964:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007966:	4a18      	ldr	r2, [pc, #96]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800796c:	4b16      	ldr	r3, [pc, #88]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800796e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b01      	cmp	r3, #1
 8007976:	d114      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007978:	f7fc f8e4 	bl	8003b44 <HAL_GetTick>
 800797c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800797e:	e00a      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007980:	f7fc f8e0 	bl	8003b44 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800798e:	4293      	cmp	r3, r2
 8007990:	d901      	bls.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e351      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007996:	4b0c      	ldr	r3, [pc, #48]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0ee      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079ae:	d111      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80079b0:	4b05      	ldr	r3, [pc, #20]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80079bc:	4b04      	ldr	r3, [pc, #16]	@ (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079be:	400b      	ands	r3, r1
 80079c0:	4901      	ldr	r1, [pc, #4]	@ (80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	608b      	str	r3, [r1, #8]
 80079c6:	e00b      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80079c8:	40023800 	.word	0x40023800
 80079cc:	40007000 	.word	0x40007000
 80079d0:	0ffffcff 	.word	0x0ffffcff
 80079d4:	4bac      	ldr	r3, [pc, #688]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	4aab      	ldr	r2, [pc, #684]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079da:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80079de:	6093      	str	r3, [r2, #8]
 80079e0:	4ba9      	ldr	r3, [pc, #676]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079ec:	49a6      	ldr	r1, [pc, #664]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0310 	and.w	r3, r3, #16
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d010      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079fe:	4ba2      	ldr	r3, [pc, #648]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a04:	4aa0      	ldr	r2, [pc, #640]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a0a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007a0e:	4b9e      	ldr	r3, [pc, #632]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a10:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a18:	499b      	ldr	r1, [pc, #620]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a2c:	4b96      	ldr	r3, [pc, #600]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a32:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a3a:	4993      	ldr	r1, [pc, #588]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a4e:	4b8e      	ldr	r3, [pc, #568]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a5c:	498a      	ldr	r1, [pc, #552]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a70:	4b85      	ldr	r3, [pc, #532]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a7e:	4982      	ldr	r1, [pc, #520]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a92:	4b7d      	ldr	r3, [pc, #500]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aa0:	4979      	ldr	r1, [pc, #484]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00a      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ab4:	4b74      	ldr	r3, [pc, #464]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aba:	f023 0203 	bic.w	r2, r3, #3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac2:	4971      	ldr	r1, [pc, #452]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ad6:	4b6c      	ldr	r3, [pc, #432]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007adc:	f023 020c 	bic.w	r2, r3, #12
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ae4:	4968      	ldr	r1, [pc, #416]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00a      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007af8:	4b63      	ldr	r3, [pc, #396]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007afe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b06:	4960      	ldr	r1, [pc, #384]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00a      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b20:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b28:	4957      	ldr	r1, [pc, #348]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00a      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b3c:	4b52      	ldr	r3, [pc, #328]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b4a:	494f      	ldr	r1, [pc, #316]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b64:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b6c:	4946      	ldr	r1, [pc, #280]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007b80:	4b41      	ldr	r3, [pc, #260]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b86:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b8e:	493e      	ldr	r1, [pc, #248]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b90:	4313      	orrs	r3, r2
 8007b92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ba2:	4b39      	ldr	r3, [pc, #228]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bb0:	4935      	ldr	r1, [pc, #212]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00a      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007bc4:	4b30      	ldr	r3, [pc, #192]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bd2:	492d      	ldr	r1, [pc, #180]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d011      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007be6:	4b28      	ldr	r3, [pc, #160]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bf4:	4924      	ldr	r1, [pc, #144]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c04:	d101      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c06:	2301      	movs	r3, #1
 8007c08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0308 	and.w	r3, r3, #8
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007c16:	2301      	movs	r3, #1
 8007c18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c26:	4b18      	ldr	r3, [pc, #96]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c2c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c34:	4914      	ldr	r1, [pc, #80]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00b      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c48:	4b0f      	ldr	r3, [pc, #60]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c4e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c58:	490b      	ldr	r1, [pc, #44]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00f      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007c6c:	4b06      	ldr	r3, [pc, #24]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c72:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c7c:	4902      	ldr	r1, [pc, #8]	@ (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007c84:	e002      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007c86:	bf00      	nop
 8007c88:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c98:	4b8a      	ldr	r3, [pc, #552]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca8:	4986      	ldr	r1, [pc, #536]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00b      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007cbc:	4b81      	ldr	r3, [pc, #516]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cc2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ccc:	497d      	ldr	r1, [pc, #500]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d006      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80d6 	beq.w	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ce8:	4b76      	ldr	r3, [pc, #472]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a75      	ldr	r2, [pc, #468]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf4:	f7fb ff26 	bl	8003b44 <HAL_GetTick>
 8007cf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cfa:	e008      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007cfc:	f7fb ff22 	bl	8003b44 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	2b64      	cmp	r3, #100	@ 0x64
 8007d08:	d901      	bls.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e195      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1f0      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d021      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d11d      	bne.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d2e:	4b65      	ldr	r3, [pc, #404]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d34:	0c1b      	lsrs	r3, r3, #16
 8007d36:	f003 0303 	and.w	r3, r3, #3
 8007d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d3c:	4b61      	ldr	r3, [pc, #388]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d42:	0e1b      	lsrs	r3, r3, #24
 8007d44:	f003 030f 	and.w	r3, r3, #15
 8007d48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	019a      	lsls	r2, r3, #6
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	041b      	lsls	r3, r3, #16
 8007d54:	431a      	orrs	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	061b      	lsls	r3, r3, #24
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	071b      	lsls	r3, r3, #28
 8007d62:	4958      	ldr	r1, [pc, #352]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d004      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d7e:	d00a      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d02e      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d94:	d129      	bne.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d96:	4b4b      	ldr	r3, [pc, #300]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d9c:	0c1b      	lsrs	r3, r3, #16
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007da4:	4b47      	ldr	r3, [pc, #284]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007daa:	0f1b      	lsrs	r3, r3, #28
 8007dac:	f003 0307 	and.w	r3, r3, #7
 8007db0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	019a      	lsls	r2, r3, #6
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	041b      	lsls	r3, r3, #16
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	061b      	lsls	r3, r3, #24
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	071b      	lsls	r3, r3, #28
 8007dca:	493e      	ldr	r1, [pc, #248]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dd8:	f023 021f 	bic.w	r2, r3, #31
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de0:	3b01      	subs	r3, #1
 8007de2:	4938      	ldr	r1, [pc, #224]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d01d      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007df6:	4b33      	ldr	r3, [pc, #204]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dfc:	0e1b      	lsrs	r3, r3, #24
 8007dfe:	f003 030f 	and.w	r3, r3, #15
 8007e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e04:	4b2f      	ldr	r3, [pc, #188]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e0a:	0f1b      	lsrs	r3, r3, #28
 8007e0c:	f003 0307 	and.w	r3, r3, #7
 8007e10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	019a      	lsls	r2, r3, #6
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	041b      	lsls	r3, r3, #16
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	061b      	lsls	r3, r3, #24
 8007e24:	431a      	orrs	r2, r3
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	071b      	lsls	r3, r3, #28
 8007e2a:	4926      	ldr	r1, [pc, #152]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d011      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	019a      	lsls	r2, r3, #6
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	041b      	lsls	r3, r3, #16
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	061b      	lsls	r3, r3, #24
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	071b      	lsls	r3, r3, #28
 8007e5a:	491a      	ldr	r1, [pc, #104]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e62:	4b18      	ldr	r3, [pc, #96]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a17      	ldr	r2, [pc, #92]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e6e:	f7fb fe69 	bl	8003b44 <HAL_GetTick>
 8007e72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e74:	e008      	b.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e76:	f7fb fe65 	bl	8003b44 <HAL_GetTick>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	2b64      	cmp	r3, #100	@ 0x64
 8007e82:	d901      	bls.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e84:	2303      	movs	r3, #3
 8007e86:	e0d8      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e88:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0f0      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	f040 80ce 	bne.w	8008038 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007e9c:	4b09      	ldr	r3, [pc, #36]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a08      	ldr	r2, [pc, #32]	@ (8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ea8:	f7fb fe4c 	bl	8003b44 <HAL_GetTick>
 8007eac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007eae:	e00b      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007eb0:	f7fb fe48 	bl	8003b44 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b64      	cmp	r3, #100	@ 0x64
 8007ebc:	d904      	bls.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e0bb      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007ec2:	bf00      	nop
 8007ec4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ed0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed4:	d0ec      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d009      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d02e      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d12a      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007efe:	4b51      	ldr	r3, [pc, #324]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f04:	0c1b      	lsrs	r3, r3, #16
 8007f06:	f003 0303 	and.w	r3, r3, #3
 8007f0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f12:	0f1b      	lsrs	r3, r3, #28
 8007f14:	f003 0307 	and.w	r3, r3, #7
 8007f18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	019a      	lsls	r2, r3, #6
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	041b      	lsls	r3, r3, #16
 8007f24:	431a      	orrs	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	061b      	lsls	r3, r3, #24
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	071b      	lsls	r3, r3, #28
 8007f32:	4944      	ldr	r1, [pc, #272]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f3a:	4b42      	ldr	r3, [pc, #264]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	021b      	lsls	r3, r3, #8
 8007f4c:	493d      	ldr	r1, [pc, #244]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d022      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f68:	d11d      	bne.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f6a:	4b36      	ldr	r3, [pc, #216]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f70:	0e1b      	lsrs	r3, r3, #24
 8007f72:	f003 030f 	and.w	r3, r3, #15
 8007f76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f78:	4b32      	ldr	r3, [pc, #200]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f7e:	0f1b      	lsrs	r3, r3, #28
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	019a      	lsls	r2, r3, #6
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1b      	ldr	r3, [r3, #32]
 8007f90:	041b      	lsls	r3, r3, #16
 8007f92:	431a      	orrs	r2, r3
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	061b      	lsls	r3, r3, #24
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	071b      	lsls	r3, r3, #28
 8007f9e:	4929      	ldr	r1, [pc, #164]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0308 	and.w	r3, r3, #8
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d028      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fb2:	4b24      	ldr	r3, [pc, #144]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fb8:	0e1b      	lsrs	r3, r3, #24
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007fc0:	4b20      	ldr	r3, [pc, #128]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fc6:	0c1b      	lsrs	r3, r3, #16
 8007fc8:	f003 0303 	and.w	r3, r3, #3
 8007fcc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	019a      	lsls	r2, r3, #6
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	041b      	lsls	r3, r3, #16
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	061b      	lsls	r3, r3, #24
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	071b      	lsls	r3, r3, #28
 8007fe6:	4917      	ldr	r1, [pc, #92]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007fee:	4b15      	ldr	r3, [pc, #84]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ff4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffc:	4911      	ldr	r1, [pc, #68]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008004:	4b0f      	ldr	r3, [pc, #60]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a0e      	ldr	r2, [pc, #56]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800800a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800800e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008010:	f7fb fd98 	bl	8003b44 <HAL_GetTick>
 8008014:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008016:	e008      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008018:	f7fb fd94 	bl	8003b44 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	2b64      	cmp	r3, #100	@ 0x64
 8008024:	d901      	bls.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e007      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800802a:	4b06      	ldr	r3, [pc, #24]	@ (8008044 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008036:	d1ef      	bne.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008038:	2300      	movs	r3, #0
}
 800803a:	4618      	mov	r0, r3
 800803c:	3720      	adds	r7, #32
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	40023800 	.word	0x40023800

08008048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e049      	b.n	80080ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d106      	bne.n	8008074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7fb f95e 	bl	8003330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3304      	adds	r3, #4
 8008084:	4619      	mov	r1, r3
 8008086:	4610      	mov	r0, r2
 8008088:	f000 fd5e 	bl	8008b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b01      	cmp	r3, #1
 800810a:	d001      	beq.n	8008110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e054      	b.n	80081ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f042 0201 	orr.w	r2, r2, #1
 8008126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a26      	ldr	r2, [pc, #152]	@ (80081c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d022      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800813a:	d01d      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a22      	ldr	r2, [pc, #136]	@ (80081cc <HAL_TIM_Base_Start_IT+0xd4>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d018      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a21      	ldr	r2, [pc, #132]	@ (80081d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d013      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a1f      	ldr	r2, [pc, #124]	@ (80081d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d00e      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a1e      	ldr	r2, [pc, #120]	@ (80081d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d009      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a1c      	ldr	r2, [pc, #112]	@ (80081dc <HAL_TIM_Base_Start_IT+0xe4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d004      	beq.n	8008178 <HAL_TIM_Base_Start_IT+0x80>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a1b      	ldr	r2, [pc, #108]	@ (80081e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d115      	bne.n	80081a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	4b19      	ldr	r3, [pc, #100]	@ (80081e4 <HAL_TIM_Base_Start_IT+0xec>)
 8008180:	4013      	ands	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b06      	cmp	r3, #6
 8008188:	d015      	beq.n	80081b6 <HAL_TIM_Base_Start_IT+0xbe>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008190:	d011      	beq.n	80081b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f042 0201 	orr.w	r2, r2, #1
 80081a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a2:	e008      	b.n	80081b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f042 0201 	orr.w	r2, r2, #1
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	e000      	b.n	80081b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	40010000 	.word	0x40010000
 80081cc:	40000400 	.word	0x40000400
 80081d0:	40000800 	.word	0x40000800
 80081d4:	40000c00 	.word	0x40000c00
 80081d8:	40010400 	.word	0x40010400
 80081dc:	40014000 	.word	0x40014000
 80081e0:	40001800 	.word	0x40001800
 80081e4:	00010007 	.word	0x00010007

080081e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0201 	bic.w	r2, r2, #1
 80081fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6a1a      	ldr	r2, [r3, #32]
 8008206:	f241 1311 	movw	r3, #4369	@ 0x1111
 800820a:	4013      	ands	r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10f      	bne.n	8008230 <HAL_TIM_Base_Stop_IT+0x48>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6a1a      	ldr	r2, [r3, #32]
 8008216:	f240 4344 	movw	r3, #1092	@ 0x444
 800821a:	4013      	ands	r3, r2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d107      	bne.n	8008230 <HAL_TIM_Base_Stop_IT+0x48>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0201 	bic.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d101      	bne.n	8008258 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e049      	b.n	80082ec <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b00      	cmp	r3, #0
 8008262:	d106      	bne.n	8008272 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f841 	bl	80082f4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2202      	movs	r2, #2
 8008276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3304      	adds	r3, #4
 8008282:	4619      	mov	r1, r3
 8008284:	4610      	mov	r0, r2
 8008286:	f000 fc5f 	bl	8008b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d104      	bne.n	8008326 <HAL_TIM_IC_Start_IT+0x1e>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008322:	b2db      	uxtb	r3, r3
 8008324:	e023      	b.n	800836e <HAL_TIM_IC_Start_IT+0x66>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b04      	cmp	r3, #4
 800832a:	d104      	bne.n	8008336 <HAL_TIM_IC_Start_IT+0x2e>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008332:	b2db      	uxtb	r3, r3
 8008334:	e01b      	b.n	800836e <HAL_TIM_IC_Start_IT+0x66>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b08      	cmp	r3, #8
 800833a:	d104      	bne.n	8008346 <HAL_TIM_IC_Start_IT+0x3e>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008342:	b2db      	uxtb	r3, r3
 8008344:	e013      	b.n	800836e <HAL_TIM_IC_Start_IT+0x66>
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b0c      	cmp	r3, #12
 800834a:	d104      	bne.n	8008356 <HAL_TIM_IC_Start_IT+0x4e>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008352:	b2db      	uxtb	r3, r3
 8008354:	e00b      	b.n	800836e <HAL_TIM_IC_Start_IT+0x66>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b10      	cmp	r3, #16
 800835a:	d104      	bne.n	8008366 <HAL_TIM_IC_Start_IT+0x5e>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008362:	b2db      	uxtb	r3, r3
 8008364:	e003      	b.n	800836e <HAL_TIM_IC_Start_IT+0x66>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800836c:	b2db      	uxtb	r3, r3
 800836e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d104      	bne.n	8008380 <HAL_TIM_IC_Start_IT+0x78>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800837c:	b2db      	uxtb	r3, r3
 800837e:	e013      	b.n	80083a8 <HAL_TIM_IC_Start_IT+0xa0>
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b04      	cmp	r3, #4
 8008384:	d104      	bne.n	8008390 <HAL_TIM_IC_Start_IT+0x88>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800838c:	b2db      	uxtb	r3, r3
 800838e:	e00b      	b.n	80083a8 <HAL_TIM_IC_Start_IT+0xa0>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2b08      	cmp	r3, #8
 8008394:	d104      	bne.n	80083a0 <HAL_TIM_IC_Start_IT+0x98>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800839c:	b2db      	uxtb	r3, r3
 800839e:	e003      	b.n	80083a8 <HAL_TIM_IC_Start_IT+0xa0>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d102      	bne.n	80083b6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80083b0:	7b7b      	ldrb	r3, [r7, #13]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d001      	beq.n	80083ba <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e0e2      	b.n	8008580 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d104      	bne.n	80083ca <HAL_TIM_IC_Start_IT+0xc2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2202      	movs	r2, #2
 80083c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083c8:	e023      	b.n	8008412 <HAL_TIM_IC_Start_IT+0x10a>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d104      	bne.n	80083da <HAL_TIM_IC_Start_IT+0xd2>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083d8:	e01b      	b.n	8008412 <HAL_TIM_IC_Start_IT+0x10a>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d104      	bne.n	80083ea <HAL_TIM_IC_Start_IT+0xe2>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083e8:	e013      	b.n	8008412 <HAL_TIM_IC_Start_IT+0x10a>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b0c      	cmp	r3, #12
 80083ee:	d104      	bne.n	80083fa <HAL_TIM_IC_Start_IT+0xf2>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083f8:	e00b      	b.n	8008412 <HAL_TIM_IC_Start_IT+0x10a>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b10      	cmp	r3, #16
 80083fe:	d104      	bne.n	800840a <HAL_TIM_IC_Start_IT+0x102>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008408:	e003      	b.n	8008412 <HAL_TIM_IC_Start_IT+0x10a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2202      	movs	r2, #2
 800840e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d104      	bne.n	8008422 <HAL_TIM_IC_Start_IT+0x11a>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008420:	e013      	b.n	800844a <HAL_TIM_IC_Start_IT+0x142>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b04      	cmp	r3, #4
 8008426:	d104      	bne.n	8008432 <HAL_TIM_IC_Start_IT+0x12a>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008430:	e00b      	b.n	800844a <HAL_TIM_IC_Start_IT+0x142>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b08      	cmp	r3, #8
 8008436:	d104      	bne.n	8008442 <HAL_TIM_IC_Start_IT+0x13a>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008440:	e003      	b.n	800844a <HAL_TIM_IC_Start_IT+0x142>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2202      	movs	r2, #2
 8008446:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b0c      	cmp	r3, #12
 800844e:	d841      	bhi.n	80084d4 <HAL_TIM_IC_Start_IT+0x1cc>
 8008450:	a201      	add	r2, pc, #4	@ (adr r2, 8008458 <HAL_TIM_IC_Start_IT+0x150>)
 8008452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008456:	bf00      	nop
 8008458:	0800848d 	.word	0x0800848d
 800845c:	080084d5 	.word	0x080084d5
 8008460:	080084d5 	.word	0x080084d5
 8008464:	080084d5 	.word	0x080084d5
 8008468:	0800849f 	.word	0x0800849f
 800846c:	080084d5 	.word	0x080084d5
 8008470:	080084d5 	.word	0x080084d5
 8008474:	080084d5 	.word	0x080084d5
 8008478:	080084b1 	.word	0x080084b1
 800847c:	080084d5 	.word	0x080084d5
 8008480:	080084d5 	.word	0x080084d5
 8008484:	080084d5 	.word	0x080084d5
 8008488:	080084c3 	.word	0x080084c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68da      	ldr	r2, [r3, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0202 	orr.w	r2, r2, #2
 800849a:	60da      	str	r2, [r3, #12]
      break;
 800849c:	e01d      	b.n	80084da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f042 0204 	orr.w	r2, r2, #4
 80084ac:	60da      	str	r2, [r3, #12]
      break;
 80084ae:	e014      	b.n	80084da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0208 	orr.w	r2, r2, #8
 80084be:	60da      	str	r2, [r3, #12]
      break;
 80084c0:	e00b      	b.n	80084da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68da      	ldr	r2, [r3, #12]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 0210 	orr.w	r2, r2, #16
 80084d0:	60da      	str	r2, [r3, #12]
      break;
 80084d2:	e002      	b.n	80084da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	73fb      	strb	r3, [r7, #15]
      break;
 80084d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d14e      	bne.n	800857e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2201      	movs	r2, #1
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f000 fd9d 	bl	8009028 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a25      	ldr	r2, [pc, #148]	@ (8008588 <HAL_TIM_IC_Start_IT+0x280>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d022      	beq.n	800853e <HAL_TIM_IC_Start_IT+0x236>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008500:	d01d      	beq.n	800853e <HAL_TIM_IC_Start_IT+0x236>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a21      	ldr	r2, [pc, #132]	@ (800858c <HAL_TIM_IC_Start_IT+0x284>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d018      	beq.n	800853e <HAL_TIM_IC_Start_IT+0x236>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a1f      	ldr	r2, [pc, #124]	@ (8008590 <HAL_TIM_IC_Start_IT+0x288>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d013      	beq.n	800853e <HAL_TIM_IC_Start_IT+0x236>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a1e      	ldr	r2, [pc, #120]	@ (8008594 <HAL_TIM_IC_Start_IT+0x28c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00e      	beq.n	800853e <HAL_TIM_IC_Start_IT+0x236>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a1c      	ldr	r2, [pc, #112]	@ (8008598 <HAL_TIM_IC_Start_IT+0x290>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d009      	beq.n	800853e <HAL_TIM_IC_Start_IT+0x236>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a1b      	ldr	r2, [pc, #108]	@ (800859c <HAL_TIM_IC_Start_IT+0x294>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d004      	beq.n	800853e <HAL_TIM_IC_Start_IT+0x236>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a19      	ldr	r2, [pc, #100]	@ (80085a0 <HAL_TIM_IC_Start_IT+0x298>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d115      	bne.n	800856a <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	4b17      	ldr	r3, [pc, #92]	@ (80085a4 <HAL_TIM_IC_Start_IT+0x29c>)
 8008546:	4013      	ands	r3, r2
 8008548:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b06      	cmp	r3, #6
 800854e:	d015      	beq.n	800857c <HAL_TIM_IC_Start_IT+0x274>
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008556:	d011      	beq.n	800857c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f042 0201 	orr.w	r2, r2, #1
 8008566:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008568:	e008      	b.n	800857c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f042 0201 	orr.w	r2, r2, #1
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	e000      	b.n	800857e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800857c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800857e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	40010000 	.word	0x40010000
 800858c:	40000400 	.word	0x40000400
 8008590:	40000800 	.word	0x40000800
 8008594:	40000c00 	.word	0x40000c00
 8008598:	40010400 	.word	0x40010400
 800859c:	40014000 	.word	0x40014000
 80085a0:	40001800 	.word	0x40001800
 80085a4:	00010007 	.word	0x00010007

080085a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d020      	beq.n	800860c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01b      	beq.n	800860c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f06f 0202 	mvn.w	r2, #2
 80085dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f003 0303 	and.w	r3, r3, #3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f7fb f8d2 	bl	800379c <HAL_TIM_IC_CaptureCallback>
 80085f8:	e005      	b.n	8008606 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa86 	bl	8008b0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fa8d 	bl	8008b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f003 0304 	and.w	r3, r3, #4
 8008612:	2b00      	cmp	r3, #0
 8008614:	d020      	beq.n	8008658 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d01b      	beq.n	8008658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0204 	mvn.w	r2, #4
 8008628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2202      	movs	r2, #2
 800862e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7fb f8ac 	bl	800379c <HAL_TIM_IC_CaptureCallback>
 8008644:	e005      	b.n	8008652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa60 	bl	8008b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fa67 	bl	8008b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d020      	beq.n	80086a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f003 0308 	and.w	r3, r3, #8
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01b      	beq.n	80086a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0208 	mvn.w	r2, #8
 8008674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2204      	movs	r2, #4
 800867a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7fb f886 	bl	800379c <HAL_TIM_IC_CaptureCallback>
 8008690:	e005      	b.n	800869e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fa3a 	bl	8008b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fa41 	bl	8008b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f003 0310 	and.w	r3, r3, #16
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d020      	beq.n	80086f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d01b      	beq.n	80086f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f06f 0210 	mvn.w	r2, #16
 80086c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2208      	movs	r2, #8
 80086c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7fb f860 	bl	800379c <HAL_TIM_IC_CaptureCallback>
 80086dc:	e005      	b.n	80086ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa14 	bl	8008b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fa1b 	bl	8008b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00c      	beq.n	8008714 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	2b00      	cmp	r3, #0
 8008702:	d007      	beq.n	8008714 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f06f 0201 	mvn.w	r2, #1
 800870c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7fb f822 	bl	8003758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800871a:	2b00      	cmp	r3, #0
 800871c:	d104      	bne.n	8008728 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00c      	beq.n	8008742 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800872e:	2b00      	cmp	r3, #0
 8008730:	d007      	beq.n	8008742 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800873a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fd31 	bl	80091a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00c      	beq.n	8008766 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800875e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fd29 	bl	80091b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00c      	beq.n	800878a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008776:	2b00      	cmp	r3, #0
 8008778:	d007      	beq.n	800878a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f9d5 	bl	8008b34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f003 0320 	and.w	r3, r3, #32
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00c      	beq.n	80087ae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d007      	beq.n	80087ae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f06f 0220 	mvn.w	r2, #32
 80087a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fcf1 	bl	8009190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b086      	sub	sp, #24
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d101      	bne.n	80087d4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80087d0:	2302      	movs	r3, #2
 80087d2:	e088      	b.n	80088e6 <HAL_TIM_IC_ConfigChannel+0x130>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d11b      	bne.n	800881a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80087f2:	f000 fa55 	bl	8008ca0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699a      	ldr	r2, [r3, #24]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 020c 	bic.w	r2, r2, #12
 8008804:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6999      	ldr	r1, [r3, #24]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	430a      	orrs	r2, r1
 8008816:	619a      	str	r2, [r3, #24]
 8008818:	e060      	b.n	80088dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b04      	cmp	r3, #4
 800881e:	d11c      	bne.n	800885a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008830:	f000 fad9 	bl	8008de6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	699a      	ldr	r2, [r3, #24]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008842:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6999      	ldr	r1, [r3, #24]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	021a      	lsls	r2, r3, #8
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	619a      	str	r2, [r3, #24]
 8008858:	e040      	b.n	80088dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b08      	cmp	r3, #8
 800885e:	d11b      	bne.n	8008898 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008870:	f000 fb26 	bl	8008ec0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	69da      	ldr	r2, [r3, #28]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f022 020c 	bic.w	r2, r2, #12
 8008882:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	69d9      	ldr	r1, [r3, #28]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	689a      	ldr	r2, [r3, #8]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	61da      	str	r2, [r3, #28]
 8008896:	e021      	b.n	80088dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b0c      	cmp	r3, #12
 800889c:	d11c      	bne.n	80088d8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80088ae:	f000 fb43 	bl	8008f38 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69da      	ldr	r2, [r3, #28]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80088c0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69d9      	ldr	r1, [r3, #28]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	021a      	lsls	r2, r3, #8
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	61da      	str	r2, [r3, #28]
 80088d6:	e001      	b.n	80088dc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_TIM_ConfigClockSource+0x1c>
 8008908:	2302      	movs	r3, #2
 800890a:	e0b4      	b.n	8008a76 <HAL_TIM_ConfigClockSource+0x186>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	4b56      	ldr	r3, [pc, #344]	@ (8008a80 <HAL_TIM_ConfigClockSource+0x190>)
 8008928:	4013      	ands	r3, r2
 800892a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008944:	d03e      	beq.n	80089c4 <HAL_TIM_ConfigClockSource+0xd4>
 8008946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800894a:	f200 8087 	bhi.w	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800894e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008952:	f000 8086 	beq.w	8008a62 <HAL_TIM_ConfigClockSource+0x172>
 8008956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800895a:	d87f      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800895c:	2b70      	cmp	r3, #112	@ 0x70
 800895e:	d01a      	beq.n	8008996 <HAL_TIM_ConfigClockSource+0xa6>
 8008960:	2b70      	cmp	r3, #112	@ 0x70
 8008962:	d87b      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 8008964:	2b60      	cmp	r3, #96	@ 0x60
 8008966:	d050      	beq.n	8008a0a <HAL_TIM_ConfigClockSource+0x11a>
 8008968:	2b60      	cmp	r3, #96	@ 0x60
 800896a:	d877      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800896c:	2b50      	cmp	r3, #80	@ 0x50
 800896e:	d03c      	beq.n	80089ea <HAL_TIM_ConfigClockSource+0xfa>
 8008970:	2b50      	cmp	r3, #80	@ 0x50
 8008972:	d873      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 8008974:	2b40      	cmp	r3, #64	@ 0x40
 8008976:	d058      	beq.n	8008a2a <HAL_TIM_ConfigClockSource+0x13a>
 8008978:	2b40      	cmp	r3, #64	@ 0x40
 800897a:	d86f      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800897c:	2b30      	cmp	r3, #48	@ 0x30
 800897e:	d064      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x15a>
 8008980:	2b30      	cmp	r3, #48	@ 0x30
 8008982:	d86b      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 8008984:	2b20      	cmp	r3, #32
 8008986:	d060      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x15a>
 8008988:	2b20      	cmp	r3, #32
 800898a:	d867      	bhi.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
 800898c:	2b00      	cmp	r3, #0
 800898e:	d05c      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x15a>
 8008990:	2b10      	cmp	r3, #16
 8008992:	d05a      	beq.n	8008a4a <HAL_TIM_ConfigClockSource+0x15a>
 8008994:	e062      	b.n	8008a5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089a6:	f000 fb1f 	bl	8008fe8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80089b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	609a      	str	r2, [r3, #8]
      break;
 80089c2:	e04f      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089d4:	f000 fb08 	bl	8008fe8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	689a      	ldr	r2, [r3, #8]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089e6:	609a      	str	r2, [r3, #8]
      break;
 80089e8:	e03c      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089f6:	461a      	mov	r2, r3
 80089f8:	f000 f9c6 	bl	8008d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2150      	movs	r1, #80	@ 0x50
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 fad5 	bl	8008fb2 <TIM_ITRx_SetConfig>
      break;
 8008a08:	e02c      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a16:	461a      	mov	r2, r3
 8008a18:	f000 fa22 	bl	8008e60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2160      	movs	r1, #96	@ 0x60
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fac5 	bl	8008fb2 <TIM_ITRx_SetConfig>
      break;
 8008a28:	e01c      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a36:	461a      	mov	r2, r3
 8008a38:	f000 f9a6 	bl	8008d88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2140      	movs	r1, #64	@ 0x40
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fab5 	bl	8008fb2 <TIM_ITRx_SetConfig>
      break;
 8008a48:	e00c      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f000 faac 	bl	8008fb2 <TIM_ITRx_SetConfig>
      break;
 8008a5a:	e003      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a60:	e000      	b.n	8008a64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	fffeff88 	.word	0xfffeff88

08008a84 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	2b0c      	cmp	r3, #12
 8008a96:	d831      	bhi.n	8008afc <HAL_TIM_ReadCapturedValue+0x78>
 8008a98:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008ad5 	.word	0x08008ad5
 8008aa4:	08008afd 	.word	0x08008afd
 8008aa8:	08008afd 	.word	0x08008afd
 8008aac:	08008afd 	.word	0x08008afd
 8008ab0:	08008adf 	.word	0x08008adf
 8008ab4:	08008afd 	.word	0x08008afd
 8008ab8:	08008afd 	.word	0x08008afd
 8008abc:	08008afd 	.word	0x08008afd
 8008ac0:	08008ae9 	.word	0x08008ae9
 8008ac4:	08008afd 	.word	0x08008afd
 8008ac8:	08008afd 	.word	0x08008afd
 8008acc:	08008afd 	.word	0x08008afd
 8008ad0:	08008af3 	.word	0x08008af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ada:	60fb      	str	r3, [r7, #12]

      break;
 8008adc:	e00f      	b.n	8008afe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ae4:	60fb      	str	r3, [r7, #12]

      break;
 8008ae6:	e00a      	b.n	8008afe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aee:	60fb      	str	r3, [r7, #12]

      break;
 8008af0:	e005      	b.n	8008afe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008af8:	60fb      	str	r3, [r7, #12]

      break;
 8008afa:	e000      	b.n	8008afe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008afc:	bf00      	nop
  }

  return tmpreg;
 8008afe:	68fb      	ldr	r3, [r7, #12]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3714      	adds	r7, #20
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a46      	ldr	r2, [pc, #280]	@ (8008c74 <TIM_Base_SetConfig+0x12c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d013      	beq.n	8008b88 <TIM_Base_SetConfig+0x40>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b66:	d00f      	beq.n	8008b88 <TIM_Base_SetConfig+0x40>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a43      	ldr	r2, [pc, #268]	@ (8008c78 <TIM_Base_SetConfig+0x130>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d00b      	beq.n	8008b88 <TIM_Base_SetConfig+0x40>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a42      	ldr	r2, [pc, #264]	@ (8008c7c <TIM_Base_SetConfig+0x134>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d007      	beq.n	8008b88 <TIM_Base_SetConfig+0x40>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a41      	ldr	r2, [pc, #260]	@ (8008c80 <TIM_Base_SetConfig+0x138>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d003      	beq.n	8008b88 <TIM_Base_SetConfig+0x40>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a40      	ldr	r2, [pc, #256]	@ (8008c84 <TIM_Base_SetConfig+0x13c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d108      	bne.n	8008b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a35      	ldr	r2, [pc, #212]	@ (8008c74 <TIM_Base_SetConfig+0x12c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d02b      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ba8:	d027      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a32      	ldr	r2, [pc, #200]	@ (8008c78 <TIM_Base_SetConfig+0x130>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d023      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a31      	ldr	r2, [pc, #196]	@ (8008c7c <TIM_Base_SetConfig+0x134>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d01f      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a30      	ldr	r2, [pc, #192]	@ (8008c80 <TIM_Base_SetConfig+0x138>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d01b      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8008c84 <TIM_Base_SetConfig+0x13c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d017      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8008c88 <TIM_Base_SetConfig+0x140>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d013      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8008c8c <TIM_Base_SetConfig+0x144>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d00f      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a2c      	ldr	r2, [pc, #176]	@ (8008c90 <TIM_Base_SetConfig+0x148>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d00b      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a2b      	ldr	r2, [pc, #172]	@ (8008c94 <TIM_Base_SetConfig+0x14c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d007      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a2a      	ldr	r2, [pc, #168]	@ (8008c98 <TIM_Base_SetConfig+0x150>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d003      	beq.n	8008bfa <TIM_Base_SetConfig+0xb2>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a29      	ldr	r2, [pc, #164]	@ (8008c9c <TIM_Base_SetConfig+0x154>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d108      	bne.n	8008c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a10      	ldr	r2, [pc, #64]	@ (8008c74 <TIM_Base_SetConfig+0x12c>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d003      	beq.n	8008c40 <TIM_Base_SetConfig+0xf8>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a12      	ldr	r2, [pc, #72]	@ (8008c84 <TIM_Base_SetConfig+0x13c>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d103      	bne.n	8008c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	691a      	ldr	r2, [r3, #16]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d105      	bne.n	8008c66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	f023 0201 	bic.w	r2, r3, #1
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	611a      	str	r2, [r3, #16]
  }
}
 8008c66:	bf00      	nop
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	40010000 	.word	0x40010000
 8008c78:	40000400 	.word	0x40000400
 8008c7c:	40000800 	.word	0x40000800
 8008c80:	40000c00 	.word	0x40000c00
 8008c84:	40010400 	.word	0x40010400
 8008c88:	40014000 	.word	0x40014000
 8008c8c:	40014400 	.word	0x40014400
 8008c90:	40014800 	.word	0x40014800
 8008c94:	40001800 	.word	0x40001800
 8008c98:	40001c00 	.word	0x40001c00
 8008c9c:	40002000 	.word	0x40002000

08008ca0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	60b9      	str	r1, [r7, #8]
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	f023 0201 	bic.w	r2, r3, #1
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4a28      	ldr	r2, [pc, #160]	@ (8008d6c <TIM_TI1_SetConfig+0xcc>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d01b      	beq.n	8008d06 <TIM_TI1_SetConfig+0x66>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cd4:	d017      	beq.n	8008d06 <TIM_TI1_SetConfig+0x66>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	4a25      	ldr	r2, [pc, #148]	@ (8008d70 <TIM_TI1_SetConfig+0xd0>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d013      	beq.n	8008d06 <TIM_TI1_SetConfig+0x66>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4a24      	ldr	r2, [pc, #144]	@ (8008d74 <TIM_TI1_SetConfig+0xd4>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d00f      	beq.n	8008d06 <TIM_TI1_SetConfig+0x66>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4a23      	ldr	r2, [pc, #140]	@ (8008d78 <TIM_TI1_SetConfig+0xd8>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d00b      	beq.n	8008d06 <TIM_TI1_SetConfig+0x66>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4a22      	ldr	r2, [pc, #136]	@ (8008d7c <TIM_TI1_SetConfig+0xdc>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d007      	beq.n	8008d06 <TIM_TI1_SetConfig+0x66>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	4a21      	ldr	r2, [pc, #132]	@ (8008d80 <TIM_TI1_SetConfig+0xe0>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d003      	beq.n	8008d06 <TIM_TI1_SetConfig+0x66>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4a20      	ldr	r2, [pc, #128]	@ (8008d84 <TIM_TI1_SetConfig+0xe4>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d101      	bne.n	8008d0a <TIM_TI1_SetConfig+0x6a>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <TIM_TI1_SetConfig+0x6c>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d008      	beq.n	8008d22 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f023 0303 	bic.w	r3, r3, #3
 8008d16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	e003      	b.n	8008d2a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f043 0301 	orr.w	r3, r3, #1
 8008d28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	011b      	lsls	r3, r3, #4
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f023 030a 	bic.w	r3, r3, #10
 8008d44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f003 030a 	and.w	r3, r3, #10
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	621a      	str	r2, [r3, #32]
}
 8008d5e:	bf00      	nop
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	40010000 	.word	0x40010000
 8008d70:	40000400 	.word	0x40000400
 8008d74:	40000800 	.word	0x40000800
 8008d78:	40000c00 	.word	0x40000c00
 8008d7c:	40010400 	.word	0x40010400
 8008d80:	40014000 	.word	0x40014000
 8008d84:	40001800 	.word	0x40001800

08008d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	f023 0201 	bic.w	r2, r3, #1
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	011b      	lsls	r3, r3, #4
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f023 030a 	bic.w	r3, r3, #10
 8008dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	621a      	str	r2, [r3, #32]
}
 8008dda:	bf00      	nop
 8008ddc:	371c      	adds	r7, #28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b087      	sub	sp, #28
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	607a      	str	r2, [r7, #4]
 8008df2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	f023 0210 	bic.w	r2, r3, #16
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	031b      	lsls	r3, r3, #12
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	693a      	ldr	r2, [r7, #16]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e38:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	011b      	lsls	r3, r3, #4
 8008e3e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	621a      	str	r2, [r3, #32]
}
 8008e54:	bf00      	nop
 8008e56:	371c      	adds	r7, #28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	f023 0210 	bic.w	r2, r3, #16
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	031b      	lsls	r3, r3, #12
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	011b      	lsls	r3, r3, #4
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	621a      	str	r2, [r3, #32]
}
 8008eb4:	bf00      	nop
 8008eb6:	371c      	adds	r7, #28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
 8008ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6a1b      	ldr	r3, [r3, #32]
 8008ed8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	f023 0303 	bic.w	r3, r3, #3
 8008eec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008eee:	693a      	ldr	r2, [r7, #16]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008efc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	011b      	lsls	r3, r3, #4
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008f10:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	021b      	lsls	r3, r3, #8
 8008f16:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	697a      	ldr	r2, [r7, #20]
 8008f2a:	621a      	str	r2, [r3, #32]
}
 8008f2c:	bf00      	nop
 8008f2e:	371c      	adds	r7, #28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	021b      	lsls	r3, r3, #8
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f76:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	031b      	lsls	r3, r3, #12
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008f8a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	031b      	lsls	r3, r3, #12
 8008f90:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	621a      	str	r2, [r3, #32]
}
 8008fa6:	bf00      	nop
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b085      	sub	sp, #20
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	f043 0307 	orr.w	r3, r3, #7
 8008fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	609a      	str	r2, [r3, #8]
}
 8008fdc:	bf00      	nop
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	021a      	lsls	r2, r3, #8
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	431a      	orrs	r2, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	4313      	orrs	r3, r2
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	4313      	orrs	r3, r2
 8009014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	609a      	str	r2, [r3, #8]
}
 800901c:	bf00      	nop
 800901e:	371c      	adds	r7, #28
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009028:	b480      	push	{r7}
 800902a:	b087      	sub	sp, #28
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	f003 031f 	and.w	r3, r3, #31
 800903a:	2201      	movs	r2, #1
 800903c:	fa02 f303 	lsl.w	r3, r2, r3
 8009040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a1a      	ldr	r2, [r3, #32]
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	43db      	mvns	r3, r3
 800904a:	401a      	ands	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6a1a      	ldr	r2, [r3, #32]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f003 031f 	and.w	r3, r3, #31
 800905a:	6879      	ldr	r1, [r7, #4]
 800905c:	fa01 f303 	lsl.w	r3, r1, r3
 8009060:	431a      	orrs	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	621a      	str	r2, [r3, #32]
}
 8009066:	bf00      	nop
 8009068:	371c      	adds	r7, #28
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
	...

08009074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009088:	2302      	movs	r3, #2
 800908a:	e06d      	b.n	8009168 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a30      	ldr	r2, [pc, #192]	@ (8009174 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d004      	beq.n	80090c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a2f      	ldr	r2, [pc, #188]	@ (8009178 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d108      	bne.n	80090d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80090c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a20      	ldr	r2, [pc, #128]	@ (8009174 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d022      	beq.n	800913c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090fe:	d01d      	beq.n	800913c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a1d      	ldr	r2, [pc, #116]	@ (800917c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d018      	beq.n	800913c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a1c      	ldr	r2, [pc, #112]	@ (8009180 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d013      	beq.n	800913c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a1a      	ldr	r2, [pc, #104]	@ (8009184 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d00e      	beq.n	800913c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a15      	ldr	r2, [pc, #84]	@ (8009178 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d009      	beq.n	800913c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a16      	ldr	r2, [pc, #88]	@ (8009188 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d004      	beq.n	800913c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a15      	ldr	r2, [pc, #84]	@ (800918c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d10c      	bne.n	8009156 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009142:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	4313      	orrs	r3, r2
 800914c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	40010000 	.word	0x40010000
 8009178:	40010400 	.word	0x40010400
 800917c:	40000400 	.word	0x40000400
 8009180:	40000800 	.word	0x40000800
 8009184:	40000c00 	.word	0x40000c00
 8009188:	40014000 	.word	0x40014000
 800918c:	40001800 	.word	0x40001800

08009190 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e040      	b.n	8009260 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d106      	bne.n	80091f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f7fa f920 	bl	8003434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2224      	movs	r2, #36	@ 0x24
 80091f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 0201 	bic.w	r2, r2, #1
 8009208:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fe24 	bl	8009e60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fbbd 	bl	8009998 <UART_SetConfig>
 800921e:	4603      	mov	r3, r0
 8009220:	2b01      	cmp	r3, #1
 8009222:	d101      	bne.n	8009228 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e01b      	b.n	8009260 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689a      	ldr	r2, [r3, #8]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f042 0201 	orr.w	r2, r2, #1
 8009256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fea3 	bl	8009fa4 <UART_CheckIdleState>
 800925e:	4603      	mov	r3, r0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08a      	sub	sp, #40	@ 0x28
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800927a:	2b20      	cmp	r3, #32
 800927c:	d165      	bne.n	800934a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <HAL_UART_Transmit_DMA+0x22>
 8009284:	88fb      	ldrh	r3, [r7, #6]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d101      	bne.n	800928e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e05e      	b.n	800934c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	88fa      	ldrh	r2, [r7, #6]
 8009298:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	88fa      	ldrh	r2, [r7, #6]
 80092a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2221      	movs	r2, #33	@ 0x21
 80092b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d027      	beq.n	800930a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092be:	4a25      	ldr	r2, [pc, #148]	@ (8009354 <HAL_UART_Transmit_DMA+0xec>)
 80092c0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092c6:	4a24      	ldr	r2, [pc, #144]	@ (8009358 <HAL_UART_Transmit_DMA+0xf0>)
 80092c8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ce:	4a23      	ldr	r2, [pc, #140]	@ (800935c <HAL_UART_Transmit_DMA+0xf4>)
 80092d0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d6:	2200      	movs	r2, #0
 80092d8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092e2:	4619      	mov	r1, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3328      	adds	r3, #40	@ 0x28
 80092ea:	461a      	mov	r2, r3
 80092ec:	88fb      	ldrh	r3, [r7, #6]
 80092ee:	f7fb fa3d 	bl	800476c <HAL_DMA_Start_IT>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d008      	beq.n	800930a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2210      	movs	r2, #16
 80092fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2220      	movs	r2, #32
 8009304:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e020      	b.n	800934c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2240      	movs	r2, #64	@ 0x40
 8009310:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3308      	adds	r3, #8
 8009318:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	613b      	str	r3, [r7, #16]
   return(result);
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009328:	627b      	str	r3, [r7, #36]	@ 0x24
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3308      	adds	r3, #8
 8009330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009332:	623a      	str	r2, [r7, #32]
 8009334:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	69f9      	ldr	r1, [r7, #28]
 8009338:	6a3a      	ldr	r2, [r7, #32]
 800933a:	e841 2300 	strex	r3, r2, [r1]
 800933e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e5      	bne.n	8009312 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	e000      	b.n	800934c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800934a:	2302      	movs	r3, #2
  }
}
 800934c:	4618      	mov	r0, r3
 800934e:	3728      	adds	r7, #40	@ 0x28
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	0800a2e3 	.word	0x0800a2e3
 8009358:	0800a379 	.word	0x0800a379
 800935c:	0800a395 	.word	0x0800a395

08009360 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b0ba      	sub	sp, #232	@ 0xe8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009386:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800938a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800938e:	4013      	ands	r3, r2
 8009390:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009394:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009398:	2b00      	cmp	r3, #0
 800939a:	d115      	bne.n	80093c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800939c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093a0:	f003 0320 	and.w	r3, r3, #32
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00f      	beq.n	80093c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093ac:	f003 0320 	and.w	r3, r3, #32
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d009      	beq.n	80093c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 82ac 	beq.w	8009916 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4798      	blx	r3
      }
      return;
 80093c6:	e2a6      	b.n	8009916 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f000 8117 	beq.w	8009600 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80093d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d106      	bne.n	80093ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80093de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80093e2:	4b85      	ldr	r3, [pc, #532]	@ (80095f8 <HAL_UART_IRQHandler+0x298>)
 80093e4:	4013      	ands	r3, r2
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f000 810a 	beq.w	8009600 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d011      	beq.n	800941c <HAL_UART_IRQHandler+0xbc>
 80093f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2201      	movs	r2, #1
 800940a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009412:	f043 0201 	orr.w	r2, r3, #1
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800941c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d011      	beq.n	800944c <HAL_UART_IRQHandler+0xec>
 8009428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2202      	movs	r2, #2
 800943a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009442:	f043 0204 	orr.w	r2, r3, #4
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800944c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009450:	f003 0304 	and.w	r3, r3, #4
 8009454:	2b00      	cmp	r3, #0
 8009456:	d011      	beq.n	800947c <HAL_UART_IRQHandler+0x11c>
 8009458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00b      	beq.n	800947c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2204      	movs	r2, #4
 800946a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009472:	f043 0202 	orr.w	r2, r3, #2
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800947c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009480:	f003 0308 	and.w	r3, r3, #8
 8009484:	2b00      	cmp	r3, #0
 8009486:	d017      	beq.n	80094b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800948c:	f003 0320 	and.w	r3, r3, #32
 8009490:	2b00      	cmp	r3, #0
 8009492:	d105      	bne.n	80094a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009498:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00b      	beq.n	80094b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2208      	movs	r2, #8
 80094a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094ae:	f043 0208 	orr.w	r2, r3, #8
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d012      	beq.n	80094ea <HAL_UART_IRQHandler+0x18a>
 80094c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00c      	beq.n	80094ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094e0:	f043 0220 	orr.w	r2, r3, #32
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 8212 	beq.w	800991a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80094f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094fa:	f003 0320 	and.w	r3, r3, #32
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00d      	beq.n	800951e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009506:	f003 0320 	and.w	r3, r3, #32
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009524:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009532:	2b40      	cmp	r3, #64	@ 0x40
 8009534:	d005      	beq.n	8009542 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800953a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800953e:	2b00      	cmp	r3, #0
 8009540:	d04f      	beq.n	80095e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fe69 	bl	800a21a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009552:	2b40      	cmp	r3, #64	@ 0x40
 8009554:	d141      	bne.n	80095da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3308      	adds	r3, #8
 800955c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009560:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009564:	e853 3f00 	ldrex	r3, [r3]
 8009568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800956c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009574:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3308      	adds	r3, #8
 800957e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009582:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009586:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800958e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009592:	e841 2300 	strex	r3, r2, [r1]
 8009596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800959a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1d9      	bne.n	8009556 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d013      	beq.n	80095d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ae:	4a13      	ldr	r2, [pc, #76]	@ (80095fc <HAL_UART_IRQHandler+0x29c>)
 80095b0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fb f9a8 	bl	800490c <HAL_DMA_Abort_IT>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d017      	beq.n	80095f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80095cc:	4610      	mov	r0, r2
 80095ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d0:	e00f      	b.n	80095f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f9c0 	bl	8009958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d8:	e00b      	b.n	80095f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f9bc 	bl	8009958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095e0:	e007      	b.n	80095f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f9b8 	bl	8009958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80095f0:	e193      	b.n	800991a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095f2:	bf00      	nop
    return;
 80095f4:	e191      	b.n	800991a <HAL_UART_IRQHandler+0x5ba>
 80095f6:	bf00      	nop
 80095f8:	04000120 	.word	0x04000120
 80095fc:	0800a413 	.word	0x0800a413

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009604:	2b01      	cmp	r3, #1
 8009606:	f040 814c 	bne.w	80098a2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800960a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800960e:	f003 0310 	and.w	r3, r3, #16
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 8145 	beq.w	80098a2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800961c:	f003 0310 	and.w	r3, r3, #16
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 813e 	beq.w	80098a2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2210      	movs	r2, #16
 800962c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009638:	2b40      	cmp	r3, #64	@ 0x40
 800963a:	f040 80b6 	bne.w	80097aa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800964a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800964e:	2b00      	cmp	r3, #0
 8009650:	f000 8165 	beq.w	800991e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800965a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800965e:	429a      	cmp	r2, r3
 8009660:	f080 815d 	bcs.w	800991e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800966a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009678:	f000 8086 	beq.w	8009788 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009684:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009690:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009698:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	461a      	mov	r2, r3
 80096a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80096a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80096aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80096b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80096b6:	e841 2300 	strex	r3, r2, [r1]
 80096ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80096be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1da      	bne.n	800967c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3308      	adds	r3, #8
 80096cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80096d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096d8:	f023 0301 	bic.w	r3, r3, #1
 80096dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3308      	adds	r3, #8
 80096e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80096ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80096ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80096f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80096fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e1      	bne.n	80096c6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3308      	adds	r3, #8
 8009708:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3308      	adds	r3, #8
 8009722:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009726:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009728:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800972c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800972e:	e841 2300 	strex	r3, r2, [r1]
 8009732:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e3      	bne.n	8009702 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2220      	movs	r2, #32
 800973e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009750:	e853 3f00 	ldrex	r3, [r3]
 8009754:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009758:	f023 0310 	bic.w	r3, r3, #16
 800975c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	461a      	mov	r2, r3
 8009766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800976a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800976c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009770:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009772:	e841 2300 	strex	r3, r2, [r1]
 8009776:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800977a:	2b00      	cmp	r3, #0
 800977c:	d1e4      	bne.n	8009748 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009782:	4618      	mov	r0, r3
 8009784:	f7fb f852 	bl	800482c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800979a:	b29b      	uxth	r3, r3
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	b29b      	uxth	r3, r3
 80097a0:	4619      	mov	r1, r3
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f8e2 	bl	800996c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097a8:	e0b9      	b.n	800991e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 80ab 	beq.w	8009922 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80097cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 80a6 	beq.w	8009922 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097de:	e853 3f00 	ldrex	r3, [r3]
 80097e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80097f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80097fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009800:	e841 2300 	strex	r3, r2, [r1]
 8009804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e4      	bne.n	80097d6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3308      	adds	r3, #8
 8009812:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009816:	e853 3f00 	ldrex	r3, [r3]
 800981a:	623b      	str	r3, [r7, #32]
   return(result);
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	f023 0301 	bic.w	r3, r3, #1
 8009822:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3308      	adds	r3, #8
 800982c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009830:	633a      	str	r2, [r7, #48]	@ 0x30
 8009832:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009834:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009838:	e841 2300 	strex	r3, r2, [r1]
 800983c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800983e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1e3      	bne.n	800980c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2220      	movs	r2, #32
 8009848:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	e853 3f00 	ldrex	r3, [r3]
 8009864:	60fb      	str	r3, [r7, #12]
   return(result);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f023 0310 	bic.w	r3, r3, #16
 800986c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800987a:	61fb      	str	r3, [r7, #28]
 800987c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987e:	69b9      	ldr	r1, [r7, #24]
 8009880:	69fa      	ldr	r2, [r7, #28]
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	617b      	str	r3, [r7, #20]
   return(result);
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e4      	bne.n	8009858 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2202      	movs	r2, #2
 8009892:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009898:	4619      	mov	r1, r3
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f866 	bl	800996c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098a0:	e03f      	b.n	8009922 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00e      	beq.n	80098cc <HAL_UART_IRQHandler+0x56c>
 80098ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d008      	beq.n	80098cc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80098c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f85d 	bl	8009984 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098ca:	e02d      	b.n	8009928 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80098cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00e      	beq.n	80098f6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80098d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d008      	beq.n	80098f6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d01c      	beq.n	8009926 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	4798      	blx	r3
    }
    return;
 80098f4:	e017      	b.n	8009926 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d012      	beq.n	8009928 <HAL_UART_IRQHandler+0x5c8>
 8009902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00c      	beq.n	8009928 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fd95 	bl	800a43e <UART_EndTransmit_IT>
    return;
 8009914:	e008      	b.n	8009928 <HAL_UART_IRQHandler+0x5c8>
      return;
 8009916:	bf00      	nop
 8009918:	e006      	b.n	8009928 <HAL_UART_IRQHandler+0x5c8>
    return;
 800991a:	bf00      	nop
 800991c:	e004      	b.n	8009928 <HAL_UART_IRQHandler+0x5c8>
      return;
 800991e:	bf00      	nop
 8009920:	e002      	b.n	8009928 <HAL_UART_IRQHandler+0x5c8>
      return;
 8009922:	bf00      	nop
 8009924:	e000      	b.n	8009928 <HAL_UART_IRQHandler+0x5c8>
    return;
 8009926:	bf00      	nop
  }

}
 8009928:	37e8      	adds	r7, #232	@ 0xe8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop

08009930 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	460b      	mov	r3, r1
 8009976:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	689a      	ldr	r2, [r3, #8]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	431a      	orrs	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	69db      	ldr	r3, [r3, #28]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	4ba6      	ldr	r3, [pc, #664]	@ (8009c5c <UART_SetConfig+0x2c4>)
 80099c4:	4013      	ands	r3, r2
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	6812      	ldr	r2, [r2, #0]
 80099ca:	6979      	ldr	r1, [r7, #20]
 80099cc:	430b      	orrs	r3, r1
 80099ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68da      	ldr	r2, [r3, #12]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	4313      	orrs	r3, r2
 80099f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	697a      	ldr	r2, [r7, #20]
 8009a06:	430a      	orrs	r2, r1
 8009a08:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a94      	ldr	r2, [pc, #592]	@ (8009c60 <UART_SetConfig+0x2c8>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d120      	bne.n	8009a56 <UART_SetConfig+0xbe>
 8009a14:	4b93      	ldr	r3, [pc, #588]	@ (8009c64 <UART_SetConfig+0x2cc>)
 8009a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a1a:	f003 0303 	and.w	r3, r3, #3
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d816      	bhi.n	8009a50 <UART_SetConfig+0xb8>
 8009a22:	a201      	add	r2, pc, #4	@ (adr r2, 8009a28 <UART_SetConfig+0x90>)
 8009a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a28:	08009a39 	.word	0x08009a39
 8009a2c:	08009a45 	.word	0x08009a45
 8009a30:	08009a3f 	.word	0x08009a3f
 8009a34:	08009a4b 	.word	0x08009a4b
 8009a38:	2301      	movs	r3, #1
 8009a3a:	77fb      	strb	r3, [r7, #31]
 8009a3c:	e150      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009a3e:	2302      	movs	r3, #2
 8009a40:	77fb      	strb	r3, [r7, #31]
 8009a42:	e14d      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009a44:	2304      	movs	r3, #4
 8009a46:	77fb      	strb	r3, [r7, #31]
 8009a48:	e14a      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009a4a:	2308      	movs	r3, #8
 8009a4c:	77fb      	strb	r3, [r7, #31]
 8009a4e:	e147      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009a50:	2310      	movs	r3, #16
 8009a52:	77fb      	strb	r3, [r7, #31]
 8009a54:	e144      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a83      	ldr	r2, [pc, #524]	@ (8009c68 <UART_SetConfig+0x2d0>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d132      	bne.n	8009ac6 <UART_SetConfig+0x12e>
 8009a60:	4b80      	ldr	r3, [pc, #512]	@ (8009c64 <UART_SetConfig+0x2cc>)
 8009a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a66:	f003 030c 	and.w	r3, r3, #12
 8009a6a:	2b0c      	cmp	r3, #12
 8009a6c:	d828      	bhi.n	8009ac0 <UART_SetConfig+0x128>
 8009a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a74 <UART_SetConfig+0xdc>)
 8009a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a74:	08009aa9 	.word	0x08009aa9
 8009a78:	08009ac1 	.word	0x08009ac1
 8009a7c:	08009ac1 	.word	0x08009ac1
 8009a80:	08009ac1 	.word	0x08009ac1
 8009a84:	08009ab5 	.word	0x08009ab5
 8009a88:	08009ac1 	.word	0x08009ac1
 8009a8c:	08009ac1 	.word	0x08009ac1
 8009a90:	08009ac1 	.word	0x08009ac1
 8009a94:	08009aaf 	.word	0x08009aaf
 8009a98:	08009ac1 	.word	0x08009ac1
 8009a9c:	08009ac1 	.word	0x08009ac1
 8009aa0:	08009ac1 	.word	0x08009ac1
 8009aa4:	08009abb 	.word	0x08009abb
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	77fb      	strb	r3, [r7, #31]
 8009aac:	e118      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009aae:	2302      	movs	r3, #2
 8009ab0:	77fb      	strb	r3, [r7, #31]
 8009ab2:	e115      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009ab4:	2304      	movs	r3, #4
 8009ab6:	77fb      	strb	r3, [r7, #31]
 8009ab8:	e112      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009aba:	2308      	movs	r3, #8
 8009abc:	77fb      	strb	r3, [r7, #31]
 8009abe:	e10f      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009ac0:	2310      	movs	r3, #16
 8009ac2:	77fb      	strb	r3, [r7, #31]
 8009ac4:	e10c      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a68      	ldr	r2, [pc, #416]	@ (8009c6c <UART_SetConfig+0x2d4>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d120      	bne.n	8009b12 <UART_SetConfig+0x17a>
 8009ad0:	4b64      	ldr	r3, [pc, #400]	@ (8009c64 <UART_SetConfig+0x2cc>)
 8009ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ad6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009ada:	2b30      	cmp	r3, #48	@ 0x30
 8009adc:	d013      	beq.n	8009b06 <UART_SetConfig+0x16e>
 8009ade:	2b30      	cmp	r3, #48	@ 0x30
 8009ae0:	d814      	bhi.n	8009b0c <UART_SetConfig+0x174>
 8009ae2:	2b20      	cmp	r3, #32
 8009ae4:	d009      	beq.n	8009afa <UART_SetConfig+0x162>
 8009ae6:	2b20      	cmp	r3, #32
 8009ae8:	d810      	bhi.n	8009b0c <UART_SetConfig+0x174>
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d002      	beq.n	8009af4 <UART_SetConfig+0x15c>
 8009aee:	2b10      	cmp	r3, #16
 8009af0:	d006      	beq.n	8009b00 <UART_SetConfig+0x168>
 8009af2:	e00b      	b.n	8009b0c <UART_SetConfig+0x174>
 8009af4:	2300      	movs	r3, #0
 8009af6:	77fb      	strb	r3, [r7, #31]
 8009af8:	e0f2      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009afa:	2302      	movs	r3, #2
 8009afc:	77fb      	strb	r3, [r7, #31]
 8009afe:	e0ef      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009b00:	2304      	movs	r3, #4
 8009b02:	77fb      	strb	r3, [r7, #31]
 8009b04:	e0ec      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009b06:	2308      	movs	r3, #8
 8009b08:	77fb      	strb	r3, [r7, #31]
 8009b0a:	e0e9      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009b0c:	2310      	movs	r3, #16
 8009b0e:	77fb      	strb	r3, [r7, #31]
 8009b10:	e0e6      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a56      	ldr	r2, [pc, #344]	@ (8009c70 <UART_SetConfig+0x2d8>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d120      	bne.n	8009b5e <UART_SetConfig+0x1c6>
 8009b1c:	4b51      	ldr	r3, [pc, #324]	@ (8009c64 <UART_SetConfig+0x2cc>)
 8009b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b28:	d013      	beq.n	8009b52 <UART_SetConfig+0x1ba>
 8009b2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b2c:	d814      	bhi.n	8009b58 <UART_SetConfig+0x1c0>
 8009b2e:	2b80      	cmp	r3, #128	@ 0x80
 8009b30:	d009      	beq.n	8009b46 <UART_SetConfig+0x1ae>
 8009b32:	2b80      	cmp	r3, #128	@ 0x80
 8009b34:	d810      	bhi.n	8009b58 <UART_SetConfig+0x1c0>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <UART_SetConfig+0x1a8>
 8009b3a:	2b40      	cmp	r3, #64	@ 0x40
 8009b3c:	d006      	beq.n	8009b4c <UART_SetConfig+0x1b4>
 8009b3e:	e00b      	b.n	8009b58 <UART_SetConfig+0x1c0>
 8009b40:	2300      	movs	r3, #0
 8009b42:	77fb      	strb	r3, [r7, #31]
 8009b44:	e0cc      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009b46:	2302      	movs	r3, #2
 8009b48:	77fb      	strb	r3, [r7, #31]
 8009b4a:	e0c9      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009b4c:	2304      	movs	r3, #4
 8009b4e:	77fb      	strb	r3, [r7, #31]
 8009b50:	e0c6      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009b52:	2308      	movs	r3, #8
 8009b54:	77fb      	strb	r3, [r7, #31]
 8009b56:	e0c3      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009b58:	2310      	movs	r3, #16
 8009b5a:	77fb      	strb	r3, [r7, #31]
 8009b5c:	e0c0      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a44      	ldr	r2, [pc, #272]	@ (8009c74 <UART_SetConfig+0x2dc>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d125      	bne.n	8009bb4 <UART_SetConfig+0x21c>
 8009b68:	4b3e      	ldr	r3, [pc, #248]	@ (8009c64 <UART_SetConfig+0x2cc>)
 8009b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b76:	d017      	beq.n	8009ba8 <UART_SetConfig+0x210>
 8009b78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b7c:	d817      	bhi.n	8009bae <UART_SetConfig+0x216>
 8009b7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b82:	d00b      	beq.n	8009b9c <UART_SetConfig+0x204>
 8009b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b88:	d811      	bhi.n	8009bae <UART_SetConfig+0x216>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <UART_SetConfig+0x1fe>
 8009b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b92:	d006      	beq.n	8009ba2 <UART_SetConfig+0x20a>
 8009b94:	e00b      	b.n	8009bae <UART_SetConfig+0x216>
 8009b96:	2300      	movs	r3, #0
 8009b98:	77fb      	strb	r3, [r7, #31]
 8009b9a:	e0a1      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	77fb      	strb	r3, [r7, #31]
 8009ba0:	e09e      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009ba2:	2304      	movs	r3, #4
 8009ba4:	77fb      	strb	r3, [r7, #31]
 8009ba6:	e09b      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009ba8:	2308      	movs	r3, #8
 8009baa:	77fb      	strb	r3, [r7, #31]
 8009bac:	e098      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009bae:	2310      	movs	r3, #16
 8009bb0:	77fb      	strb	r3, [r7, #31]
 8009bb2:	e095      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8009c78 <UART_SetConfig+0x2e0>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d125      	bne.n	8009c0a <UART_SetConfig+0x272>
 8009bbe:	4b29      	ldr	r3, [pc, #164]	@ (8009c64 <UART_SetConfig+0x2cc>)
 8009bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009bc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bcc:	d017      	beq.n	8009bfe <UART_SetConfig+0x266>
 8009bce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bd2:	d817      	bhi.n	8009c04 <UART_SetConfig+0x26c>
 8009bd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bd8:	d00b      	beq.n	8009bf2 <UART_SetConfig+0x25a>
 8009bda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bde:	d811      	bhi.n	8009c04 <UART_SetConfig+0x26c>
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <UART_SetConfig+0x254>
 8009be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009be8:	d006      	beq.n	8009bf8 <UART_SetConfig+0x260>
 8009bea:	e00b      	b.n	8009c04 <UART_SetConfig+0x26c>
 8009bec:	2301      	movs	r3, #1
 8009bee:	77fb      	strb	r3, [r7, #31]
 8009bf0:	e076      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009bf2:	2302      	movs	r3, #2
 8009bf4:	77fb      	strb	r3, [r7, #31]
 8009bf6:	e073      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009bf8:	2304      	movs	r3, #4
 8009bfa:	77fb      	strb	r3, [r7, #31]
 8009bfc:	e070      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009bfe:	2308      	movs	r3, #8
 8009c00:	77fb      	strb	r3, [r7, #31]
 8009c02:	e06d      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009c04:	2310      	movs	r3, #16
 8009c06:	77fb      	strb	r3, [r7, #31]
 8009c08:	e06a      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8009c7c <UART_SetConfig+0x2e4>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d138      	bne.n	8009c86 <UART_SetConfig+0x2ee>
 8009c14:	4b13      	ldr	r3, [pc, #76]	@ (8009c64 <UART_SetConfig+0x2cc>)
 8009c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c1a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009c1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c22:	d017      	beq.n	8009c54 <UART_SetConfig+0x2bc>
 8009c24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c28:	d82a      	bhi.n	8009c80 <UART_SetConfig+0x2e8>
 8009c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c2e:	d00b      	beq.n	8009c48 <UART_SetConfig+0x2b0>
 8009c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c34:	d824      	bhi.n	8009c80 <UART_SetConfig+0x2e8>
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d003      	beq.n	8009c42 <UART_SetConfig+0x2aa>
 8009c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c3e:	d006      	beq.n	8009c4e <UART_SetConfig+0x2b6>
 8009c40:	e01e      	b.n	8009c80 <UART_SetConfig+0x2e8>
 8009c42:	2300      	movs	r3, #0
 8009c44:	77fb      	strb	r3, [r7, #31]
 8009c46:	e04b      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009c48:	2302      	movs	r3, #2
 8009c4a:	77fb      	strb	r3, [r7, #31]
 8009c4c:	e048      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009c4e:	2304      	movs	r3, #4
 8009c50:	77fb      	strb	r3, [r7, #31]
 8009c52:	e045      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009c54:	2308      	movs	r3, #8
 8009c56:	77fb      	strb	r3, [r7, #31]
 8009c58:	e042      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009c5a:	bf00      	nop
 8009c5c:	efff69f3 	.word	0xefff69f3
 8009c60:	40011000 	.word	0x40011000
 8009c64:	40023800 	.word	0x40023800
 8009c68:	40004400 	.word	0x40004400
 8009c6c:	40004800 	.word	0x40004800
 8009c70:	40004c00 	.word	0x40004c00
 8009c74:	40005000 	.word	0x40005000
 8009c78:	40011400 	.word	0x40011400
 8009c7c:	40007800 	.word	0x40007800
 8009c80:	2310      	movs	r3, #16
 8009c82:	77fb      	strb	r3, [r7, #31]
 8009c84:	e02c      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a72      	ldr	r2, [pc, #456]	@ (8009e54 <UART_SetConfig+0x4bc>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d125      	bne.n	8009cdc <UART_SetConfig+0x344>
 8009c90:	4b71      	ldr	r3, [pc, #452]	@ (8009e58 <UART_SetConfig+0x4c0>)
 8009c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c96:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009c9a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009c9e:	d017      	beq.n	8009cd0 <UART_SetConfig+0x338>
 8009ca0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009ca4:	d817      	bhi.n	8009cd6 <UART_SetConfig+0x33e>
 8009ca6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009caa:	d00b      	beq.n	8009cc4 <UART_SetConfig+0x32c>
 8009cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cb0:	d811      	bhi.n	8009cd6 <UART_SetConfig+0x33e>
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d003      	beq.n	8009cbe <UART_SetConfig+0x326>
 8009cb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cba:	d006      	beq.n	8009cca <UART_SetConfig+0x332>
 8009cbc:	e00b      	b.n	8009cd6 <UART_SetConfig+0x33e>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	77fb      	strb	r3, [r7, #31]
 8009cc2:	e00d      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	77fb      	strb	r3, [r7, #31]
 8009cc8:	e00a      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009cca:	2304      	movs	r3, #4
 8009ccc:	77fb      	strb	r3, [r7, #31]
 8009cce:	e007      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009cd0:	2308      	movs	r3, #8
 8009cd2:	77fb      	strb	r3, [r7, #31]
 8009cd4:	e004      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009cd6:	2310      	movs	r3, #16
 8009cd8:	77fb      	strb	r3, [r7, #31]
 8009cda:	e001      	b.n	8009ce0 <UART_SetConfig+0x348>
 8009cdc:	2310      	movs	r3, #16
 8009cde:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	69db      	ldr	r3, [r3, #28]
 8009ce4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ce8:	d15b      	bne.n	8009da2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009cea:	7ffb      	ldrb	r3, [r7, #31]
 8009cec:	2b08      	cmp	r3, #8
 8009cee:	d828      	bhi.n	8009d42 <UART_SetConfig+0x3aa>
 8009cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf8 <UART_SetConfig+0x360>)
 8009cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf6:	bf00      	nop
 8009cf8:	08009d1d 	.word	0x08009d1d
 8009cfc:	08009d25 	.word	0x08009d25
 8009d00:	08009d2d 	.word	0x08009d2d
 8009d04:	08009d43 	.word	0x08009d43
 8009d08:	08009d33 	.word	0x08009d33
 8009d0c:	08009d43 	.word	0x08009d43
 8009d10:	08009d43 	.word	0x08009d43
 8009d14:	08009d43 	.word	0x08009d43
 8009d18:	08009d3b 	.word	0x08009d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d1c:	f7fd fd44 	bl	80077a8 <HAL_RCC_GetPCLK1Freq>
 8009d20:	61b8      	str	r0, [r7, #24]
        break;
 8009d22:	e013      	b.n	8009d4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d24:	f7fd fd54 	bl	80077d0 <HAL_RCC_GetPCLK2Freq>
 8009d28:	61b8      	str	r0, [r7, #24]
        break;
 8009d2a:	e00f      	b.n	8009d4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8009e5c <UART_SetConfig+0x4c4>)
 8009d2e:	61bb      	str	r3, [r7, #24]
        break;
 8009d30:	e00c      	b.n	8009d4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d32:	f7fd fc27 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 8009d36:	61b8      	str	r0, [r7, #24]
        break;
 8009d38:	e008      	b.n	8009d4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d3e:	61bb      	str	r3, [r7, #24]
        break;
 8009d40:	e004      	b.n	8009d4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009d42:	2300      	movs	r3, #0
 8009d44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	77bb      	strb	r3, [r7, #30]
        break;
 8009d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d074      	beq.n	8009e3c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	005a      	lsls	r2, r3, #1
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	085b      	lsrs	r3, r3, #1
 8009d5c:	441a      	add	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	2b0f      	cmp	r3, #15
 8009d6c:	d916      	bls.n	8009d9c <UART_SetConfig+0x404>
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d74:	d212      	bcs.n	8009d9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	f023 030f 	bic.w	r3, r3, #15
 8009d7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	085b      	lsrs	r3, r3, #1
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	89fb      	ldrh	r3, [r7, #14]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	89fa      	ldrh	r2, [r7, #14]
 8009d98:	60da      	str	r2, [r3, #12]
 8009d9a:	e04f      	b.n	8009e3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	77bb      	strb	r3, [r7, #30]
 8009da0:	e04c      	b.n	8009e3c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009da2:	7ffb      	ldrb	r3, [r7, #31]
 8009da4:	2b08      	cmp	r3, #8
 8009da6:	d828      	bhi.n	8009dfa <UART_SetConfig+0x462>
 8009da8:	a201      	add	r2, pc, #4	@ (adr r2, 8009db0 <UART_SetConfig+0x418>)
 8009daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dae:	bf00      	nop
 8009db0:	08009dd5 	.word	0x08009dd5
 8009db4:	08009ddd 	.word	0x08009ddd
 8009db8:	08009de5 	.word	0x08009de5
 8009dbc:	08009dfb 	.word	0x08009dfb
 8009dc0:	08009deb 	.word	0x08009deb
 8009dc4:	08009dfb 	.word	0x08009dfb
 8009dc8:	08009dfb 	.word	0x08009dfb
 8009dcc:	08009dfb 	.word	0x08009dfb
 8009dd0:	08009df3 	.word	0x08009df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dd4:	f7fd fce8 	bl	80077a8 <HAL_RCC_GetPCLK1Freq>
 8009dd8:	61b8      	str	r0, [r7, #24]
        break;
 8009dda:	e013      	b.n	8009e04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ddc:	f7fd fcf8 	bl	80077d0 <HAL_RCC_GetPCLK2Freq>
 8009de0:	61b8      	str	r0, [r7, #24]
        break;
 8009de2:	e00f      	b.n	8009e04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009de4:	4b1d      	ldr	r3, [pc, #116]	@ (8009e5c <UART_SetConfig+0x4c4>)
 8009de6:	61bb      	str	r3, [r7, #24]
        break;
 8009de8:	e00c      	b.n	8009e04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dea:	f7fd fbcb 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 8009dee:	61b8      	str	r0, [r7, #24]
        break;
 8009df0:	e008      	b.n	8009e04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009df6:	61bb      	str	r3, [r7, #24]
        break;
 8009df8:	e004      	b.n	8009e04 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	77bb      	strb	r3, [r7, #30]
        break;
 8009e02:	bf00      	nop
    }

    if (pclk != 0U)
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d018      	beq.n	8009e3c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	085a      	lsrs	r2, r3, #1
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	441a      	add	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	2b0f      	cmp	r3, #15
 8009e22:	d909      	bls.n	8009e38 <UART_SetConfig+0x4a0>
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e2a:	d205      	bcs.n	8009e38 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	60da      	str	r2, [r3, #12]
 8009e36:	e001      	b.n	8009e3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009e48:	7fbb      	ldrb	r3, [r7, #30]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3720      	adds	r7, #32
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	40007c00 	.word	0x40007c00
 8009e58:	40023800 	.word	0x40023800
 8009e5c:	00f42400 	.word	0x00f42400

08009e60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e6c:	f003 0308 	and.w	r3, r3, #8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00a      	beq.n	8009e8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	430a      	orrs	r2, r1
 8009e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb0:	f003 0302 	and.w	r3, r3, #2
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00a      	beq.n	8009ece <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed2:	f003 0304 	and.w	r3, r3, #4
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d00a      	beq.n	8009ef0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	430a      	orrs	r2, r1
 8009eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef4:	f003 0310 	and.w	r3, r3, #16
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00a      	beq.n	8009f12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f16:	f003 0320 	and.w	r3, r3, #32
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d01a      	beq.n	8009f76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f5e:	d10a      	bne.n	8009f76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00a      	beq.n	8009f98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	430a      	orrs	r2, r1
 8009f96:	605a      	str	r2, [r3, #4]
  }
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b098      	sub	sp, #96	@ 0x60
 8009fa8:	af02      	add	r7, sp, #8
 8009faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fb4:	f7f9 fdc6 	bl	8003b44 <HAL_GetTick>
 8009fb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0308 	and.w	r3, r3, #8
 8009fc4:	2b08      	cmp	r3, #8
 8009fc6:	d12e      	bne.n	800a026 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f88c 	bl	800a0f4 <UART_WaitOnFlagUntilTimeout>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d021      	beq.n	800a026 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fea:	e853 3f00 	ldrex	r3, [r3]
 8009fee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ff6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a000:	647b      	str	r3, [r7, #68]	@ 0x44
 800a002:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a004:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a006:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a008:	e841 2300 	strex	r3, r2, [r1]
 800a00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a00e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1e6      	bne.n	8009fe2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2220      	movs	r2, #32
 800a018:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e062      	b.n	800a0ec <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 0304 	and.w	r3, r3, #4
 800a030:	2b04      	cmp	r3, #4
 800a032:	d149      	bne.n	800a0c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a034:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a03c:	2200      	movs	r2, #0
 800a03e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f856 	bl	800a0f4 <UART_WaitOnFlagUntilTimeout>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d03c      	beq.n	800a0c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a056:	e853 3f00 	ldrex	r3, [r3]
 800a05a:	623b      	str	r3, [r7, #32]
   return(result);
 800a05c:	6a3b      	ldr	r3, [r7, #32]
 800a05e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	461a      	mov	r2, r3
 800a06a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a06c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a06e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a070:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a074:	e841 2300 	strex	r3, r2, [r1]
 800a078:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1e6      	bne.n	800a04e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	3308      	adds	r3, #8
 800a086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	e853 3f00 	ldrex	r3, [r3]
 800a08e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f023 0301 	bic.w	r3, r3, #1
 800a096:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3308      	adds	r3, #8
 800a09e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0a0:	61fa      	str	r2, [r7, #28]
 800a0a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0a4:	69b9      	ldr	r1, [r7, #24]
 800a0a6:	69fa      	ldr	r2, [r7, #28]
 800a0a8:	e841 2300 	strex	r3, r2, [r1]
 800a0ac:	617b      	str	r3, [r7, #20]
   return(result);
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d1e5      	bne.n	800a080 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2220      	movs	r2, #32
 800a0b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e011      	b.n	800a0ec <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2220      	movs	r2, #32
 800a0d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3758      	adds	r7, #88	@ 0x58
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	603b      	str	r3, [r7, #0]
 800a100:	4613      	mov	r3, r2
 800a102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a104:	e04f      	b.n	800a1a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10c:	d04b      	beq.n	800a1a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a10e:	f7f9 fd19 	bl	8003b44 <HAL_GetTick>
 800a112:	4602      	mov	r2, r0
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d302      	bcc.n	800a124 <UART_WaitOnFlagUntilTimeout+0x30>
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e04e      	b.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f003 0304 	and.w	r3, r3, #4
 800a132:	2b00      	cmp	r3, #0
 800a134:	d037      	beq.n	800a1a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	2b80      	cmp	r3, #128	@ 0x80
 800a13a:	d034      	beq.n	800a1a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b40      	cmp	r3, #64	@ 0x40
 800a140:	d031      	beq.n	800a1a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	69db      	ldr	r3, [r3, #28]
 800a148:	f003 0308 	and.w	r3, r3, #8
 800a14c:	2b08      	cmp	r3, #8
 800a14e:	d110      	bne.n	800a172 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2208      	movs	r2, #8
 800a156:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f000 f85e 	bl	800a21a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2208      	movs	r2, #8
 800a162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e029      	b.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	69db      	ldr	r3, [r3, #28]
 800a178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a17c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a180:	d111      	bne.n	800a1a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a18a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 f844 	bl	800a21a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2220      	movs	r2, #32
 800a196:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e00f      	b.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	69da      	ldr	r2, [r3, #28]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	bf0c      	ite	eq
 800a1b6:	2301      	moveq	r3, #1
 800a1b8:	2300      	movne	r3, #0
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	461a      	mov	r2, r3
 800a1be:	79fb      	ldrb	r3, [r7, #7]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d0a0      	beq.n	800a106 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b089      	sub	sp, #36	@ 0x24
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	e853 3f00 	ldrex	r3, [r3]
 800a1e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a1ea:	61fb      	str	r3, [r7, #28]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	61bb      	str	r3, [r7, #24]
 800a1f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f8:	6979      	ldr	r1, [r7, #20]
 800a1fa:	69ba      	ldr	r2, [r7, #24]
 800a1fc:	e841 2300 	strex	r3, r2, [r1]
 800a200:	613b      	str	r3, [r7, #16]
   return(result);
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1e6      	bne.n	800a1d6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2220      	movs	r2, #32
 800a20c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a20e:	bf00      	nop
 800a210:	3724      	adds	r7, #36	@ 0x24
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b095      	sub	sp, #84	@ 0x54
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22a:	e853 3f00 	ldrex	r3, [r3]
 800a22e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	461a      	mov	r2, r3
 800a23e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a240:	643b      	str	r3, [r7, #64]	@ 0x40
 800a242:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a244:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a246:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a248:	e841 2300 	strex	r3, r2, [r1]
 800a24c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e6      	bne.n	800a222 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	3308      	adds	r3, #8
 800a25a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	e853 3f00 	ldrex	r3, [r3]
 800a262:	61fb      	str	r3, [r7, #28]
   return(result);
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	f023 0301 	bic.w	r3, r3, #1
 800a26a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	3308      	adds	r3, #8
 800a272:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a274:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a276:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a278:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a27a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a27c:	e841 2300 	strex	r3, r2, [r1]
 800a280:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1e5      	bne.n	800a254 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d118      	bne.n	800a2c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	e853 3f00 	ldrex	r3, [r3]
 800a29c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	f023 0310 	bic.w	r3, r3, #16
 800a2a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2ae:	61bb      	str	r3, [r7, #24]
 800a2b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b2:	6979      	ldr	r1, [r7, #20]
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	e841 2300 	strex	r3, r2, [r1]
 800a2ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1e6      	bne.n	800a290 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2220      	movs	r2, #32
 800a2c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a2d6:	bf00      	nop
 800a2d8:	3754      	adds	r7, #84	@ 0x54
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b090      	sub	sp, #64	@ 0x40
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2f8:	d037      	beq.n	800a36a <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a2fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3308      	adds	r3, #8
 800a308:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30c:	e853 3f00 	ldrex	r3, [r3]
 800a310:	623b      	str	r3, [r7, #32]
   return(result);
 800a312:	6a3b      	ldr	r3, [r7, #32]
 800a314:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a318:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a31a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3308      	adds	r3, #8
 800a320:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a322:	633a      	str	r2, [r7, #48]	@ 0x30
 800a324:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a326:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a32a:	e841 2300 	strex	r3, r2, [r1]
 800a32e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1e5      	bne.n	800a302 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	e853 3f00 	ldrex	r3, [r3]
 800a342:	60fb      	str	r3, [r7, #12]
   return(result);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a34a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a34c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	461a      	mov	r2, r3
 800a352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a354:	61fb      	str	r3, [r7, #28]
 800a356:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a358:	69b9      	ldr	r1, [r7, #24]
 800a35a:	69fa      	ldr	r2, [r7, #28]
 800a35c:	e841 2300 	strex	r3, r2, [r1]
 800a360:	617b      	str	r3, [r7, #20]
   return(result);
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1e6      	bne.n	800a336 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a368:	e002      	b.n	800a370 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a36a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a36c:	f7ff fae0 	bl	8009930 <HAL_UART_TxCpltCallback>
}
 800a370:	bf00      	nop
 800a372:	3740      	adds	r7, #64	@ 0x40
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a384:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f7ff fadc 	bl	8009944 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a38c:	bf00      	nop
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a3a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3ba:	2b80      	cmp	r3, #128	@ 0x80
 800a3bc:	d109      	bne.n	800a3d2 <UART_DMAError+0x3e>
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	2b21      	cmp	r3, #33	@ 0x21
 800a3c2:	d106      	bne.n	800a3d2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800a3cc:	6978      	ldr	r0, [r7, #20]
 800a3ce:	f7ff fefe 	bl	800a1ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3dc:	2b40      	cmp	r3, #64	@ 0x40
 800a3de:	d109      	bne.n	800a3f4 <UART_DMAError+0x60>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2b22      	cmp	r3, #34	@ 0x22
 800a3e4:	d106      	bne.n	800a3f4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800a3ee:	6978      	ldr	r0, [r7, #20]
 800a3f0:	f7ff ff13 	bl	800a21a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3fa:	f043 0210 	orr.w	r2, r3, #16
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a404:	6978      	ldr	r0, [r7, #20]
 800a406:	f7ff faa7 	bl	8009958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a40a:	bf00      	nop
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b084      	sub	sp, #16
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a41e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f7ff fa91 	bl	8009958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a436:	bf00      	nop
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b088      	sub	sp, #32
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	e853 3f00 	ldrex	r3, [r3]
 800a452:	60bb      	str	r3, [r7, #8]
   return(result);
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a45a:	61fb      	str	r3, [r7, #28]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	461a      	mov	r2, r3
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	61bb      	str	r3, [r7, #24]
 800a466:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a468:	6979      	ldr	r1, [r7, #20]
 800a46a:	69ba      	ldr	r2, [r7, #24]
 800a46c:	e841 2300 	strex	r3, r2, [r1]
 800a470:	613b      	str	r3, [r7, #16]
   return(result);
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e6      	bne.n	800a446 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2220      	movs	r2, #32
 800a47c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7ff fa53 	bl	8009930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a48a:	bf00      	nop
 800a48c:	3720      	adds	r7, #32
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
	...

0800a494 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a494:	b084      	sub	sp, #16
 800a496:	b580      	push	{r7, lr}
 800a498:	b084      	sub	sp, #16
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	f107 001c 	add.w	r0, r7, #28
 800a4a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d121      	bne.n	800a4f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68da      	ldr	r2, [r3, #12]
 800a4be:	4b21      	ldr	r3, [pc, #132]	@ (800a544 <USB_CoreInit+0xb0>)
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a4d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d105      	bne.n	800a4e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f001 fade 	bl	800baa8 <USB_CoreReset>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	73fb      	strb	r3, [r7, #15]
 800a4f0:	e010      	b.n	800a514 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f001 fad2 	bl	800baa8 <USB_CoreReset>
 800a504:	4603      	mov	r3, r0
 800a506:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a50c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800a514:	7fbb      	ldrb	r3, [r7, #30]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d10b      	bne.n	800a532 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	f043 0206 	orr.w	r2, r3, #6
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f043 0220 	orr.w	r2, r3, #32
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a532:	7bfb      	ldrb	r3, [r7, #15]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a53e:	b004      	add	sp, #16
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	ffbdffbf 	.word	0xffbdffbf

0800a548 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a548:	b480      	push	{r7}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	4613      	mov	r3, r2
 800a554:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a556:	79fb      	ldrb	r3, [r7, #7]
 800a558:	2b02      	cmp	r3, #2
 800a55a:	d165      	bne.n	800a628 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	4a41      	ldr	r2, [pc, #260]	@ (800a664 <USB_SetTurnaroundTime+0x11c>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d906      	bls.n	800a572 <USB_SetTurnaroundTime+0x2a>
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	4a40      	ldr	r2, [pc, #256]	@ (800a668 <USB_SetTurnaroundTime+0x120>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d202      	bcs.n	800a572 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a56c:	230f      	movs	r3, #15
 800a56e:	617b      	str	r3, [r7, #20]
 800a570:	e062      	b.n	800a638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	4a3c      	ldr	r2, [pc, #240]	@ (800a668 <USB_SetTurnaroundTime+0x120>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d306      	bcc.n	800a588 <USB_SetTurnaroundTime+0x40>
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	4a3b      	ldr	r2, [pc, #236]	@ (800a66c <USB_SetTurnaroundTime+0x124>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d202      	bcs.n	800a588 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a582:	230e      	movs	r3, #14
 800a584:	617b      	str	r3, [r7, #20]
 800a586:	e057      	b.n	800a638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	4a38      	ldr	r2, [pc, #224]	@ (800a66c <USB_SetTurnaroundTime+0x124>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d306      	bcc.n	800a59e <USB_SetTurnaroundTime+0x56>
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	4a37      	ldr	r2, [pc, #220]	@ (800a670 <USB_SetTurnaroundTime+0x128>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d202      	bcs.n	800a59e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a598:	230d      	movs	r3, #13
 800a59a:	617b      	str	r3, [r7, #20]
 800a59c:	e04c      	b.n	800a638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	4a33      	ldr	r2, [pc, #204]	@ (800a670 <USB_SetTurnaroundTime+0x128>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d306      	bcc.n	800a5b4 <USB_SetTurnaroundTime+0x6c>
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	4a32      	ldr	r2, [pc, #200]	@ (800a674 <USB_SetTurnaroundTime+0x12c>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d802      	bhi.n	800a5b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a5ae:	230c      	movs	r3, #12
 800a5b0:	617b      	str	r3, [r7, #20]
 800a5b2:	e041      	b.n	800a638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	4a2f      	ldr	r2, [pc, #188]	@ (800a674 <USB_SetTurnaroundTime+0x12c>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d906      	bls.n	800a5ca <USB_SetTurnaroundTime+0x82>
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	4a2e      	ldr	r2, [pc, #184]	@ (800a678 <USB_SetTurnaroundTime+0x130>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d802      	bhi.n	800a5ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a5c4:	230b      	movs	r3, #11
 800a5c6:	617b      	str	r3, [r7, #20]
 800a5c8:	e036      	b.n	800a638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	4a2a      	ldr	r2, [pc, #168]	@ (800a678 <USB_SetTurnaroundTime+0x130>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d906      	bls.n	800a5e0 <USB_SetTurnaroundTime+0x98>
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	4a29      	ldr	r2, [pc, #164]	@ (800a67c <USB_SetTurnaroundTime+0x134>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d802      	bhi.n	800a5e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a5da:	230a      	movs	r3, #10
 800a5dc:	617b      	str	r3, [r7, #20]
 800a5de:	e02b      	b.n	800a638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	4a26      	ldr	r2, [pc, #152]	@ (800a67c <USB_SetTurnaroundTime+0x134>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d906      	bls.n	800a5f6 <USB_SetTurnaroundTime+0xae>
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	4a25      	ldr	r2, [pc, #148]	@ (800a680 <USB_SetTurnaroundTime+0x138>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d202      	bcs.n	800a5f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a5f0:	2309      	movs	r3, #9
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	e020      	b.n	800a638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	4a21      	ldr	r2, [pc, #132]	@ (800a680 <USB_SetTurnaroundTime+0x138>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d306      	bcc.n	800a60c <USB_SetTurnaroundTime+0xc4>
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	4a20      	ldr	r2, [pc, #128]	@ (800a684 <USB_SetTurnaroundTime+0x13c>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d802      	bhi.n	800a60c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a606:	2308      	movs	r3, #8
 800a608:	617b      	str	r3, [r7, #20]
 800a60a:	e015      	b.n	800a638 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	4a1d      	ldr	r2, [pc, #116]	@ (800a684 <USB_SetTurnaroundTime+0x13c>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d906      	bls.n	800a622 <USB_SetTurnaroundTime+0xda>
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	4a1c      	ldr	r2, [pc, #112]	@ (800a688 <USB_SetTurnaroundTime+0x140>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d202      	bcs.n	800a622 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a61c:	2307      	movs	r3, #7
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	e00a      	b.n	800a638 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a622:	2306      	movs	r3, #6
 800a624:	617b      	str	r3, [r7, #20]
 800a626:	e007      	b.n	800a638 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a628:	79fb      	ldrb	r3, [r7, #7]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d102      	bne.n	800a634 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a62e:	2309      	movs	r3, #9
 800a630:	617b      	str	r3, [r7, #20]
 800a632:	e001      	b.n	800a638 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a634:	2309      	movs	r3, #9
 800a636:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68da      	ldr	r2, [r3, #12]
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	029b      	lsls	r3, r3, #10
 800a64c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a650:	431a      	orrs	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	371c      	adds	r7, #28
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	00d8acbf 	.word	0x00d8acbf
 800a668:	00e4e1c0 	.word	0x00e4e1c0
 800a66c:	00f42400 	.word	0x00f42400
 800a670:	01067380 	.word	0x01067380
 800a674:	011a499f 	.word	0x011a499f
 800a678:	01312cff 	.word	0x01312cff
 800a67c:	014ca43f 	.word	0x014ca43f
 800a680:	016e3600 	.word	0x016e3600
 800a684:	01a6ab1f 	.word	0x01a6ab1f
 800a688:	01e84800 	.word	0x01e84800

0800a68c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	f043 0201 	orr.w	r2, r3, #1
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	f023 0201 	bic.w	r2, r3, #1
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a6ec:	78fb      	ldrb	r3, [r7, #3]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d115      	bne.n	800a71e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a6fe:	200a      	movs	r0, #10
 800a700:	f7f9 fa2c 	bl	8003b5c <HAL_Delay>
      ms += 10U;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	330a      	adds	r3, #10
 800a708:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f001 f93b 	bl	800b986 <USB_GetMode>
 800a710:	4603      	mov	r3, r0
 800a712:	2b01      	cmp	r3, #1
 800a714:	d01e      	beq.n	800a754 <USB_SetCurrentMode+0x84>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2bc7      	cmp	r3, #199	@ 0xc7
 800a71a:	d9f0      	bls.n	800a6fe <USB_SetCurrentMode+0x2e>
 800a71c:	e01a      	b.n	800a754 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a71e:	78fb      	ldrb	r3, [r7, #3]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d115      	bne.n	800a750 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a730:	200a      	movs	r0, #10
 800a732:	f7f9 fa13 	bl	8003b5c <HAL_Delay>
      ms += 10U;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	330a      	adds	r3, #10
 800a73a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f001 f922 	bl	800b986 <USB_GetMode>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d005      	beq.n	800a754 <USB_SetCurrentMode+0x84>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a74c:	d9f0      	bls.n	800a730 <USB_SetCurrentMode+0x60>
 800a74e:	e001      	b.n	800a754 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e005      	b.n	800a760 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2bc8      	cmp	r3, #200	@ 0xc8
 800a758:	d101      	bne.n	800a75e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e000      	b.n	800a760 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a768:	b084      	sub	sp, #16
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b086      	sub	sp, #24
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a782:	2300      	movs	r3, #0
 800a784:	613b      	str	r3, [r7, #16]
 800a786:	e009      	b.n	800a79c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	3340      	adds	r3, #64	@ 0x40
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	4413      	add	r3, r2
 800a792:	2200      	movs	r2, #0
 800a794:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	3301      	adds	r3, #1
 800a79a:	613b      	str	r3, [r7, #16]
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	2b0e      	cmp	r3, #14
 800a7a0:	d9f2      	bls.n	800a788 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a7a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d11c      	bne.n	800a7e4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7b8:	f043 0302 	orr.w	r3, r3, #2
 800a7bc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	e005      	b.n	800a7f0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a800:	2b01      	cmp	r3, #1
 800a802:	d10d      	bne.n	800a820 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a804:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d104      	bne.n	800a816 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a80c:	2100      	movs	r1, #0
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f968 	bl	800aae4 <USB_SetDevSpeed>
 800a814:	e008      	b.n	800a828 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a816:	2101      	movs	r1, #1
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f963 	bl	800aae4 <USB_SetDevSpeed>
 800a81e:	e003      	b.n	800a828 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a820:	2103      	movs	r1, #3
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f95e 	bl	800aae4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a828:	2110      	movs	r1, #16
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f8fa 	bl	800aa24 <USB_FlushTxFifo>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d001      	beq.n	800a83a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f924 	bl	800aa88 <USB_FlushRxFifo>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a850:	461a      	mov	r2, r3
 800a852:	2300      	movs	r3, #0
 800a854:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a85c:	461a      	mov	r2, r3
 800a85e:	2300      	movs	r3, #0
 800a860:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a868:	461a      	mov	r2, r3
 800a86a:	2300      	movs	r3, #0
 800a86c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a86e:	2300      	movs	r3, #0
 800a870:	613b      	str	r3, [r7, #16]
 800a872:	e043      	b.n	800a8fc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	015a      	lsls	r2, r3, #5
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a886:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a88a:	d118      	bne.n	800a8be <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10a      	bne.n	800a8a8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	015a      	lsls	r2, r3, #5
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4413      	add	r3, r2
 800a89a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a89e:	461a      	mov	r2, r3
 800a8a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a8a4:	6013      	str	r3, [r2, #0]
 800a8a6:	e013      	b.n	800a8d0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	015a      	lsls	r2, r3, #5
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a8ba:	6013      	str	r3, [r2, #0]
 800a8bc:	e008      	b.n	800a8d0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	015a      	lsls	r2, r3, #5
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	015a      	lsls	r2, r3, #5
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8dc:	461a      	mov	r2, r3
 800a8de:	2300      	movs	r3, #0
 800a8e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a8f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	613b      	str	r3, [r7, #16]
 800a8fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a900:	461a      	mov	r2, r3
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	4293      	cmp	r3, r2
 800a906:	d3b5      	bcc.n	800a874 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a908:	2300      	movs	r3, #0
 800a90a:	613b      	str	r3, [r7, #16]
 800a90c:	e043      	b.n	800a996 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	015a      	lsls	r2, r3, #5
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4413      	add	r3, r2
 800a916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a920:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a924:	d118      	bne.n	800a958 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10a      	bne.n	800a942 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a938:	461a      	mov	r2, r3
 800a93a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	e013      	b.n	800a96a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	015a      	lsls	r2, r3, #5
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a94e:	461a      	mov	r2, r3
 800a950:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	e008      	b.n	800a96a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	015a      	lsls	r2, r3, #5
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4413      	add	r3, r2
 800a960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a964:	461a      	mov	r2, r3
 800a966:	2300      	movs	r3, #0
 800a968:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	015a      	lsls	r2, r3, #5
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4413      	add	r3, r2
 800a972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a976:	461a      	mov	r2, r3
 800a978:	2300      	movs	r3, #0
 800a97a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	015a      	lsls	r2, r3, #5
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4413      	add	r3, r2
 800a984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a988:	461a      	mov	r2, r3
 800a98a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a98e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	3301      	adds	r3, #1
 800a994:	613b      	str	r3, [r7, #16]
 800a996:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a99a:	461a      	mov	r2, r3
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d3b5      	bcc.n	800a90e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a9c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a9c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d105      	bne.n	800a9d8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	f043 0210 	orr.w	r2, r3, #16
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	699a      	ldr	r2, [r3, #24]
 800a9dc:	4b0f      	ldr	r3, [pc, #60]	@ (800aa1c <USB_DevInit+0x2b4>)
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a9e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d005      	beq.n	800a9f8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	f043 0208 	orr.w	r2, r3, #8
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a9f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d105      	bne.n	800aa0c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	699a      	ldr	r2, [r3, #24]
 800aa04:	4b06      	ldr	r3, [pc, #24]	@ (800aa20 <USB_DevInit+0x2b8>)
 800aa06:	4313      	orrs	r3, r2
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3718      	adds	r7, #24
 800aa12:	46bd      	mov	sp, r7
 800aa14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa18:	b004      	add	sp, #16
 800aa1a:	4770      	bx	lr
 800aa1c:	803c3800 	.word	0x803c3800
 800aa20:	40000004 	.word	0x40000004

0800aa24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3301      	adds	r3, #1
 800aa36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa3e:	d901      	bls.n	800aa44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e01b      	b.n	800aa7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	daf2      	bge.n	800aa32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	019b      	lsls	r3, r3, #6
 800aa54:	f043 0220 	orr.w	r2, r3, #32
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa68:	d901      	bls.n	800aa6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	e006      	b.n	800aa7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	f003 0320 	and.w	r3, r3, #32
 800aa76:	2b20      	cmp	r3, #32
 800aa78:	d0f0      	beq.n	800aa5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa90:	2300      	movs	r3, #0
 800aa92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3301      	adds	r3, #1
 800aa98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aaa0:	d901      	bls.n	800aaa6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	e018      	b.n	800aad8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	daf2      	bge.n	800aa94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2210      	movs	r2, #16
 800aab6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3301      	adds	r3, #1
 800aabc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aac4:	d901      	bls.n	800aaca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e006      	b.n	800aad8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	f003 0310 	and.w	r3, r3, #16
 800aad2:	2b10      	cmp	r3, #16
 800aad4:	d0f0      	beq.n	800aab8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	78fb      	ldrb	r3, [r7, #3]
 800aafe:	68f9      	ldr	r1, [r7, #12]
 800ab00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab04:	4313      	orrs	r3, r2
 800ab06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3714      	adds	r7, #20
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b087      	sub	sp, #28
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	f003 0306 	and.w	r3, r3, #6
 800ab2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d102      	bne.n	800ab3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ab36:	2300      	movs	r3, #0
 800ab38:	75fb      	strb	r3, [r7, #23]
 800ab3a:	e00a      	b.n	800ab52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d002      	beq.n	800ab48 <USB_GetDevSpeed+0x32>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b06      	cmp	r3, #6
 800ab46:	d102      	bne.n	800ab4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ab48:	2302      	movs	r3, #2
 800ab4a:	75fb      	strb	r3, [r7, #23]
 800ab4c:	e001      	b.n	800ab52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ab4e:	230f      	movs	r3, #15
 800ab50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ab52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	371c      	adds	r7, #28
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	785b      	ldrb	r3, [r3, #1]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d139      	bne.n	800abf0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab82:	69da      	ldr	r2, [r3, #28]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	f003 030f 	and.w	r3, r3, #15
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	68f9      	ldr	r1, [r7, #12]
 800ab96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	015a      	lsls	r2, r3, #5
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	4413      	add	r3, r2
 800aba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d153      	bne.n	800ac5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	015a      	lsls	r2, r3, #5
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	791b      	ldrb	r3, [r3, #4]
 800abce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800abd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	059b      	lsls	r3, r3, #22
 800abd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800abd8:	431a      	orrs	r2, r3
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	0159      	lsls	r1, r3, #5
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	440b      	add	r3, r1
 800abe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe6:	4619      	mov	r1, r3
 800abe8:	4b20      	ldr	r3, [pc, #128]	@ (800ac6c <USB_ActivateEndpoint+0x10c>)
 800abea:	4313      	orrs	r3, r2
 800abec:	600b      	str	r3, [r1, #0]
 800abee:	e035      	b.n	800ac5c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abf6:	69da      	ldr	r2, [r3, #28]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	f003 030f 	and.w	r3, r3, #15
 800ac00:	2101      	movs	r1, #1
 800ac02:	fa01 f303 	lsl.w	r3, r1, r3
 800ac06:	041b      	lsls	r3, r3, #16
 800ac08:	68f9      	ldr	r1, [r7, #12]
 800ac0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	015a      	lsls	r2, r3, #5
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	4413      	add	r3, r2
 800ac1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d119      	bne.n	800ac5c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	015a      	lsls	r2, r3, #5
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	791b      	ldrb	r3, [r3, #4]
 800ac42:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ac44:	430b      	orrs	r3, r1
 800ac46:	431a      	orrs	r2, r3
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	0159      	lsls	r1, r3, #5
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	440b      	add	r3, r1
 800ac50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac54:	4619      	mov	r1, r3
 800ac56:	4b05      	ldr	r3, [pc, #20]	@ (800ac6c <USB_ActivateEndpoint+0x10c>)
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3714      	adds	r7, #20
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	10008000 	.word	0x10008000

0800ac70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	785b      	ldrb	r3, [r3, #1]
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d161      	bne.n	800ad50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	015a      	lsls	r2, r3, #5
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4413      	add	r3, r2
 800ac94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aca2:	d11f      	bne.n	800ace4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	015a      	lsls	r2, r3, #5
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	4413      	add	r3, r2
 800acac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68ba      	ldr	r2, [r7, #8]
 800acb4:	0151      	lsls	r1, r2, #5
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	440a      	add	r2, r1
 800acba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800acc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	0151      	lsls	r1, r2, #5
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	440a      	add	r2, r1
 800acda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ace2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	f003 030f 	and.w	r3, r3, #15
 800acf4:	2101      	movs	r1, #1
 800acf6:	fa01 f303 	lsl.w	r3, r1, r3
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	43db      	mvns	r3, r3
 800acfe:	68f9      	ldr	r1, [r7, #12]
 800ad00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad04:	4013      	ands	r3, r2
 800ad06:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad0e:	69da      	ldr	r2, [r3, #28]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	f003 030f 	and.w	r3, r3, #15
 800ad18:	2101      	movs	r1, #1
 800ad1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	43db      	mvns	r3, r3
 800ad22:	68f9      	ldr	r1, [r7, #12]
 800ad24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad28:	4013      	ands	r3, r2
 800ad2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	015a      	lsls	r2, r3, #5
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	4413      	add	r3, r2
 800ad34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	0159      	lsls	r1, r3, #5
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	440b      	add	r3, r1
 800ad42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad46:	4619      	mov	r1, r3
 800ad48:	4b35      	ldr	r3, [pc, #212]	@ (800ae20 <USB_DeactivateEndpoint+0x1b0>)
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	600b      	str	r3, [r1, #0]
 800ad4e:	e060      	b.n	800ae12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	015a      	lsls	r2, r3, #5
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	4413      	add	r3, r2
 800ad58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad66:	d11f      	bne.n	800ada8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	015a      	lsls	r2, r3, #5
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	4413      	add	r3, r2
 800ad70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	0151      	lsls	r1, r2, #5
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	440a      	add	r2, r1
 800ad7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ad86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	0151      	lsls	r1, r2, #5
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	440a      	add	r2, r1
 800ad9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ada2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ada6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	f003 030f 	and.w	r3, r3, #15
 800adb8:	2101      	movs	r1, #1
 800adba:	fa01 f303 	lsl.w	r3, r1, r3
 800adbe:	041b      	lsls	r3, r3, #16
 800adc0:	43db      	mvns	r3, r3
 800adc2:	68f9      	ldr	r1, [r7, #12]
 800adc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800adc8:	4013      	ands	r3, r2
 800adca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800add2:	69da      	ldr	r2, [r3, #28]
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	f003 030f 	and.w	r3, r3, #15
 800addc:	2101      	movs	r1, #1
 800adde:	fa01 f303 	lsl.w	r3, r1, r3
 800ade2:	041b      	lsls	r3, r3, #16
 800ade4:	43db      	mvns	r3, r3
 800ade6:	68f9      	ldr	r1, [r7, #12]
 800ade8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800adec:	4013      	ands	r3, r2
 800adee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	0159      	lsls	r1, r3, #5
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	440b      	add	r3, r1
 800ae06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	4b05      	ldr	r3, [pc, #20]	@ (800ae24 <USB_DeactivateEndpoint+0x1b4>)
 800ae0e:	4013      	ands	r3, r2
 800ae10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr
 800ae20:	ec337800 	.word	0xec337800
 800ae24:	eff37800 	.word	0xeff37800

0800ae28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08a      	sub	sp, #40	@ 0x28
 800ae2c:	af02      	add	r7, sp, #8
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	4613      	mov	r3, r2
 800ae34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	785b      	ldrb	r3, [r3, #1]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	f040 8181 	bne.w	800b14c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d132      	bne.n	800aeb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	015a      	lsls	r2, r3, #5
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	4413      	add	r3, r2
 800ae5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae5e:	691a      	ldr	r2, [r3, #16]
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	0159      	lsls	r1, r3, #5
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	440b      	add	r3, r1
 800ae68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4ba5      	ldr	r3, [pc, #660]	@ (800b104 <USB_EPStartXfer+0x2dc>)
 800ae70:	4013      	ands	r3, r2
 800ae72:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	015a      	lsls	r2, r3, #5
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	69ba      	ldr	r2, [r7, #24]
 800ae84:	0151      	lsls	r1, r2, #5
 800ae86:	69fa      	ldr	r2, [r7, #28]
 800ae88:	440a      	add	r2, r1
 800ae8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	015a      	lsls	r2, r3, #5
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aea0:	691a      	ldr	r2, [r3, #16]
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	0159      	lsls	r1, r3, #5
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	440b      	add	r3, r1
 800aeaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4b95      	ldr	r3, [pc, #596]	@ (800b108 <USB_EPStartXfer+0x2e0>)
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	610b      	str	r3, [r1, #16]
 800aeb6:	e092      	b.n	800afde <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	015a      	lsls	r2, r3, #5
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	4413      	add	r3, r2
 800aec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aec4:	691a      	ldr	r2, [r3, #16]
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	0159      	lsls	r1, r3, #5
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	440b      	add	r3, r1
 800aece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aed2:	4619      	mov	r1, r3
 800aed4:	4b8c      	ldr	r3, [pc, #560]	@ (800b108 <USB_EPStartXfer+0x2e0>)
 800aed6:	4013      	ands	r3, r2
 800aed8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	015a      	lsls	r2, r3, #5
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	4413      	add	r3, r2
 800aee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aee6:	691a      	ldr	r2, [r3, #16]
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	0159      	lsls	r1, r3, #5
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	440b      	add	r3, r1
 800aef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aef4:	4619      	mov	r1, r3
 800aef6:	4b83      	ldr	r3, [pc, #524]	@ (800b104 <USB_EPStartXfer+0x2dc>)
 800aef8:	4013      	ands	r3, r2
 800aefa:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d11a      	bne.n	800af38 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	691a      	ldr	r2, [r3, #16]
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d903      	bls.n	800af16 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	689a      	ldr	r2, [r3, #8]
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	69ba      	ldr	r2, [r7, #24]
 800af26:	0151      	lsls	r1, r2, #5
 800af28:	69fa      	ldr	r2, [r7, #28]
 800af2a:	440a      	add	r2, r1
 800af2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af34:	6113      	str	r3, [r2, #16]
 800af36:	e01b      	b.n	800af70 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af44:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	6919      	ldr	r1, [r3, #16]
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	440b      	add	r3, r1
 800af50:	1e59      	subs	r1, r3, #1
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	fbb1 f3f3 	udiv	r3, r1, r3
 800af5a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800af5c:	4b6b      	ldr	r3, [pc, #428]	@ (800b10c <USB_EPStartXfer+0x2e4>)
 800af5e:	400b      	ands	r3, r1
 800af60:	69b9      	ldr	r1, [r7, #24]
 800af62:	0148      	lsls	r0, r1, #5
 800af64:	69f9      	ldr	r1, [r7, #28]
 800af66:	4401      	add	r1, r0
 800af68:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800af6c:	4313      	orrs	r3, r2
 800af6e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af7c:	691a      	ldr	r2, [r3, #16]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af86:	69b9      	ldr	r1, [r7, #24]
 800af88:	0148      	lsls	r0, r1, #5
 800af8a:	69f9      	ldr	r1, [r7, #28]
 800af8c:	4401      	add	r1, r0
 800af8e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800af92:	4313      	orrs	r3, r2
 800af94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	791b      	ldrb	r3, [r3, #4]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d11f      	bne.n	800afde <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	015a      	lsls	r2, r3, #5
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	4413      	add	r3, r2
 800afa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	69ba      	ldr	r2, [r7, #24]
 800afae:	0151      	lsls	r1, r2, #5
 800afb0:	69fa      	ldr	r2, [r7, #28]
 800afb2:	440a      	add	r2, r1
 800afb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afb8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800afbc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	015a      	lsls	r2, r3, #5
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	69ba      	ldr	r2, [r7, #24]
 800afce:	0151      	lsls	r1, r2, #5
 800afd0:	69fa      	ldr	r2, [r7, #28]
 800afd2:	440a      	add	r2, r1
 800afd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afd8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800afdc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800afde:	79fb      	ldrb	r3, [r7, #7]
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d14b      	bne.n	800b07c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	69db      	ldr	r3, [r3, #28]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d009      	beq.n	800b000 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aff8:	461a      	mov	r2, r3
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	69db      	ldr	r3, [r3, #28]
 800affe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	791b      	ldrb	r3, [r3, #4]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d128      	bne.n	800b05a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b014:	2b00      	cmp	r3, #0
 800b016:	d110      	bne.n	800b03a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	015a      	lsls	r2, r3, #5
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	4413      	add	r3, r2
 800b020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	0151      	lsls	r1, r2, #5
 800b02a:	69fa      	ldr	r2, [r7, #28]
 800b02c:	440a      	add	r2, r1
 800b02e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b032:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b036:	6013      	str	r3, [r2, #0]
 800b038:	e00f      	b.n	800b05a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	015a      	lsls	r2, r3, #5
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	4413      	add	r3, r2
 800b042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	69ba      	ldr	r2, [r7, #24]
 800b04a:	0151      	lsls	r1, r2, #5
 800b04c:	69fa      	ldr	r2, [r7, #28]
 800b04e:	440a      	add	r2, r1
 800b050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b058:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	015a      	lsls	r2, r3, #5
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	4413      	add	r3, r2
 800b062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	69ba      	ldr	r2, [r7, #24]
 800b06a:	0151      	lsls	r1, r2, #5
 800b06c:	69fa      	ldr	r2, [r7, #28]
 800b06e:	440a      	add	r2, r1
 800b070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b074:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b078:	6013      	str	r3, [r2, #0]
 800b07a:	e16a      	b.n	800b352 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	015a      	lsls	r2, r3, #5
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	4413      	add	r3, r2
 800b084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	69ba      	ldr	r2, [r7, #24]
 800b08c:	0151      	lsls	r1, r2, #5
 800b08e:	69fa      	ldr	r2, [r7, #28]
 800b090:	440a      	add	r2, r1
 800b092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b096:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b09a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	791b      	ldrb	r3, [r3, #4]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d015      	beq.n	800b0d0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 8152 	beq.w	800b352 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	f003 030f 	and.w	r3, r3, #15
 800b0be:	2101      	movs	r1, #1
 800b0c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b0c4:	69f9      	ldr	r1, [r7, #28]
 800b0c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	634b      	str	r3, [r1, #52]	@ 0x34
 800b0ce:	e140      	b.n	800b352 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0d6:	689b      	ldr	r3, [r3, #8]
 800b0d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d117      	bne.n	800b110 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b0e0:	69bb      	ldr	r3, [r7, #24]
 800b0e2:	015a      	lsls	r2, r3, #5
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	69ba      	ldr	r2, [r7, #24]
 800b0f0:	0151      	lsls	r1, r2, #5
 800b0f2:	69fa      	ldr	r2, [r7, #28]
 800b0f4:	440a      	add	r2, r1
 800b0f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0fa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b0fe:	6013      	str	r3, [r2, #0]
 800b100:	e016      	b.n	800b130 <USB_EPStartXfer+0x308>
 800b102:	bf00      	nop
 800b104:	e007ffff 	.word	0xe007ffff
 800b108:	fff80000 	.word	0xfff80000
 800b10c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	015a      	lsls	r2, r3, #5
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	4413      	add	r3, r2
 800b118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	69ba      	ldr	r2, [r7, #24]
 800b120:	0151      	lsls	r1, r2, #5
 800b122:	69fa      	ldr	r2, [r7, #28]
 800b124:	440a      	add	r2, r1
 800b126:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b12a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b12e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	68d9      	ldr	r1, [r3, #12]
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	781a      	ldrb	r2, [r3, #0]
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	b298      	uxth	r0, r3
 800b13e:	79fb      	ldrb	r3, [r7, #7]
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	4603      	mov	r3, r0
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f000 f9b9 	bl	800b4bc <USB_WritePacket>
 800b14a:	e102      	b.n	800b352 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	015a      	lsls	r2, r3, #5
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	4413      	add	r3, r2
 800b154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b158:	691a      	ldr	r2, [r3, #16]
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	0159      	lsls	r1, r3, #5
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	440b      	add	r3, r1
 800b162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b166:	4619      	mov	r1, r3
 800b168:	4b7c      	ldr	r3, [pc, #496]	@ (800b35c <USB_EPStartXfer+0x534>)
 800b16a:	4013      	ands	r3, r2
 800b16c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b17a:	691a      	ldr	r2, [r3, #16]
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	0159      	lsls	r1, r3, #5
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	440b      	add	r3, r1
 800b184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b188:	4619      	mov	r1, r3
 800b18a:	4b75      	ldr	r3, [pc, #468]	@ (800b360 <USB_EPStartXfer+0x538>)
 800b18c:	4013      	ands	r3, r2
 800b18e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d12f      	bne.n	800b1f6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	689a      	ldr	r2, [r3, #8]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	689a      	ldr	r2, [r3, #8]
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	015a      	lsls	r2, r3, #5
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ba:	691a      	ldr	r2, [r3, #16]
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	6a1b      	ldr	r3, [r3, #32]
 800b1c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1c4:	69b9      	ldr	r1, [r7, #24]
 800b1c6:	0148      	lsls	r0, r1, #5
 800b1c8:	69f9      	ldr	r1, [r7, #28]
 800b1ca:	4401      	add	r1, r0
 800b1cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	015a      	lsls	r2, r3, #5
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	4413      	add	r3, r2
 800b1dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	69ba      	ldr	r2, [r7, #24]
 800b1e4:	0151      	lsls	r1, r2, #5
 800b1e6:	69fa      	ldr	r2, [r7, #28]
 800b1e8:	440a      	add	r2, r1
 800b1ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b1f2:	6113      	str	r3, [r2, #16]
 800b1f4:	e05f      	b.n	800b2b6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d123      	bne.n	800b246 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	015a      	lsls	r2, r3, #5
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	4413      	add	r3, r2
 800b206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b20a:	691a      	ldr	r2, [r3, #16]
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b214:	69b9      	ldr	r1, [r7, #24]
 800b216:	0148      	lsls	r0, r1, #5
 800b218:	69f9      	ldr	r1, [r7, #28]
 800b21a:	4401      	add	r1, r0
 800b21c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b220:	4313      	orrs	r3, r2
 800b222:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	015a      	lsls	r2, r3, #5
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	4413      	add	r3, r2
 800b22c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	69ba      	ldr	r2, [r7, #24]
 800b234:	0151      	lsls	r1, r2, #5
 800b236:	69fa      	ldr	r2, [r7, #28]
 800b238:	440a      	add	r2, r1
 800b23a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b23e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b242:	6113      	str	r3, [r2, #16]
 800b244:	e037      	b.n	800b2b6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	691a      	ldr	r2, [r3, #16]
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	4413      	add	r3, r2
 800b250:	1e5a      	subs	r2, r3, #1
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	8afa      	ldrh	r2, [r7, #22]
 800b262:	fb03 f202 	mul.w	r2, r3, r2
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	015a      	lsls	r2, r3, #5
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	4413      	add	r3, r2
 800b272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b276:	691a      	ldr	r2, [r3, #16]
 800b278:	8afb      	ldrh	r3, [r7, #22]
 800b27a:	04d9      	lsls	r1, r3, #19
 800b27c:	4b39      	ldr	r3, [pc, #228]	@ (800b364 <USB_EPStartXfer+0x53c>)
 800b27e:	400b      	ands	r3, r1
 800b280:	69b9      	ldr	r1, [r7, #24]
 800b282:	0148      	lsls	r0, r1, #5
 800b284:	69f9      	ldr	r1, [r7, #28]
 800b286:	4401      	add	r1, r0
 800b288:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b28c:	4313      	orrs	r3, r2
 800b28e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	015a      	lsls	r2, r3, #5
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	4413      	add	r3, r2
 800b298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b29c:	691a      	ldr	r2, [r3, #16]
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2a6:	69b9      	ldr	r1, [r7, #24]
 800b2a8:	0148      	lsls	r0, r1, #5
 800b2aa:	69f9      	ldr	r1, [r7, #28]
 800b2ac:	4401      	add	r1, r0
 800b2ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b2b6:	79fb      	ldrb	r3, [r7, #7]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d10d      	bne.n	800b2d8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d009      	beq.n	800b2d8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	68d9      	ldr	r1, [r3, #12]
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	015a      	lsls	r2, r3, #5
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2d4:	460a      	mov	r2, r1
 800b2d6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	791b      	ldrb	r3, [r3, #4]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d128      	bne.n	800b332 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d110      	bne.n	800b312 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	015a      	lsls	r2, r3, #5
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	69ba      	ldr	r2, [r7, #24]
 800b300:	0151      	lsls	r1, r2, #5
 800b302:	69fa      	ldr	r2, [r7, #28]
 800b304:	440a      	add	r2, r1
 800b306:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b30a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b30e:	6013      	str	r3, [r2, #0]
 800b310:	e00f      	b.n	800b332 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	015a      	lsls	r2, r3, #5
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	4413      	add	r3, r2
 800b31a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	69ba      	ldr	r2, [r7, #24]
 800b322:	0151      	lsls	r1, r2, #5
 800b324:	69fa      	ldr	r2, [r7, #28]
 800b326:	440a      	add	r2, r1
 800b328:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b32c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b330:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	015a      	lsls	r2, r3, #5
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	4413      	add	r3, r2
 800b33a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	69ba      	ldr	r2, [r7, #24]
 800b342:	0151      	lsls	r1, r2, #5
 800b344:	69fa      	ldr	r2, [r7, #28]
 800b346:	440a      	add	r2, r1
 800b348:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b34c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b350:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3720      	adds	r7, #32
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	fff80000 	.word	0xfff80000
 800b360:	e007ffff 	.word	0xe007ffff
 800b364:	1ff80000 	.word	0x1ff80000

0800b368 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b368:	b480      	push	{r7}
 800b36a:	b087      	sub	sp, #28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b372:	2300      	movs	r3, #0
 800b374:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	785b      	ldrb	r3, [r3, #1]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d14a      	bne.n	800b41c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	015a      	lsls	r2, r3, #5
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	4413      	add	r3, r2
 800b390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b39a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b39e:	f040 8086 	bne.w	800b4ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	015a      	lsls	r2, r3, #5
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	7812      	ldrb	r2, [r2, #0]
 800b3b6:	0151      	lsls	r1, r2, #5
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	440a      	add	r2, r1
 800b3bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b3c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	015a      	lsls	r2, r3, #5
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	7812      	ldrb	r2, [r2, #0]
 800b3da:	0151      	lsls	r1, r2, #5
 800b3dc:	693a      	ldr	r2, [r7, #16]
 800b3de:	440a      	add	r2, r1
 800b3e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b3e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d902      	bls.n	800b400 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	75fb      	strb	r3, [r7, #23]
          break;
 800b3fe:	e056      	b.n	800b4ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	015a      	lsls	r2, r3, #5
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	4413      	add	r3, r2
 800b40a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b414:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b418:	d0e7      	beq.n	800b3ea <USB_EPStopXfer+0x82>
 800b41a:	e048      	b.n	800b4ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	015a      	lsls	r2, r3, #5
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	4413      	add	r3, r2
 800b426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b430:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b434:	d13b      	bne.n	800b4ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	015a      	lsls	r2, r3, #5
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	4413      	add	r3, r2
 800b440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	7812      	ldrb	r2, [r2, #0]
 800b44a:	0151      	lsls	r1, r2, #5
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	440a      	add	r2, r1
 800b450:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b454:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b458:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	7812      	ldrb	r2, [r2, #0]
 800b46e:	0151      	lsls	r1, r2, #5
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	440a      	add	r2, r1
 800b474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b478:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b47c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3301      	adds	r3, #1
 800b482:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d902      	bls.n	800b494 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	75fb      	strb	r3, [r7, #23]
          break;
 800b492:	e00c      	b.n	800b4ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4ac:	d0e7      	beq.n	800b47e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b4ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	371c      	adds	r7, #28
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b089      	sub	sp, #36	@ 0x24
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	71fb      	strb	r3, [r7, #7]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b4da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d123      	bne.n	800b52a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b4e2:	88bb      	ldrh	r3, [r7, #4]
 800b4e4:	3303      	adds	r3, #3
 800b4e6:	089b      	lsrs	r3, r3, #2
 800b4e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	61bb      	str	r3, [r7, #24]
 800b4ee:	e018      	b.n	800b522 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b4f0:	79fb      	ldrb	r3, [r7, #7]
 800b4f2:	031a      	lsls	r2, r3, #12
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	3301      	adds	r3, #1
 800b508:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	3301      	adds	r3, #1
 800b50e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	3301      	adds	r3, #1
 800b514:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	3301      	adds	r3, #1
 800b51a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	3301      	adds	r3, #1
 800b520:	61bb      	str	r3, [r7, #24]
 800b522:	69ba      	ldr	r2, [r7, #24]
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	429a      	cmp	r2, r3
 800b528:	d3e2      	bcc.n	800b4f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3724      	adds	r7, #36	@ 0x24
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b538:	b480      	push	{r7}
 800b53a:	b08b      	sub	sp, #44	@ 0x2c
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	4613      	mov	r3, r2
 800b544:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b54e:	88fb      	ldrh	r3, [r7, #6]
 800b550:	089b      	lsrs	r3, r3, #2
 800b552:	b29b      	uxth	r3, r3
 800b554:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b556:	88fb      	ldrh	r3, [r7, #6]
 800b558:	f003 0303 	and.w	r3, r3, #3
 800b55c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b55e:	2300      	movs	r3, #0
 800b560:	623b      	str	r3, [r7, #32]
 800b562:	e014      	b.n	800b58e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b572:	3301      	adds	r3, #1
 800b574:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b578:	3301      	adds	r3, #1
 800b57a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57e:	3301      	adds	r3, #1
 800b580:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b584:	3301      	adds	r3, #1
 800b586:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b588:	6a3b      	ldr	r3, [r7, #32]
 800b58a:	3301      	adds	r3, #1
 800b58c:	623b      	str	r3, [r7, #32]
 800b58e:	6a3a      	ldr	r2, [r7, #32]
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	429a      	cmp	r2, r3
 800b594:	d3e6      	bcc.n	800b564 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b596:	8bfb      	ldrh	r3, [r7, #30]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d01e      	beq.n	800b5da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b59c:	2300      	movs	r3, #0
 800b59e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b5a0:	69bb      	ldr	r3, [r7, #24]
 800b5a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	f107 0310 	add.w	r3, r7, #16
 800b5ac:	6812      	ldr	r2, [r2, #0]
 800b5ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b5b0:	693a      	ldr	r2, [r7, #16]
 800b5b2:	6a3b      	ldr	r3, [r7, #32]
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	00db      	lsls	r3, r3, #3
 800b5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c0:	701a      	strb	r2, [r3, #0]
      i++;
 800b5c2:	6a3b      	ldr	r3, [r7, #32]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	623b      	str	r3, [r7, #32]
      pDest++;
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b5ce:	8bfb      	ldrh	r3, [r7, #30]
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b5d4:	8bfb      	ldrh	r3, [r7, #30]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1ea      	bne.n	800b5b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	372c      	adds	r7, #44	@ 0x2c
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	785b      	ldrb	r3, [r3, #1]
 800b600:	2b01      	cmp	r3, #1
 800b602:	d12c      	bne.n	800b65e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	015a      	lsls	r2, r3, #5
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	4413      	add	r3, r2
 800b60c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	db12      	blt.n	800b63c <USB_EPSetStall+0x54>
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00f      	beq.n	800b63c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	015a      	lsls	r2, r3, #5
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	4413      	add	r3, r2
 800b624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	0151      	lsls	r1, r2, #5
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	440a      	add	r2, r1
 800b632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b636:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b63a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	015a      	lsls	r2, r3, #5
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	4413      	add	r3, r2
 800b644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	0151      	lsls	r1, r2, #5
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	440a      	add	r2, r1
 800b652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b656:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b65a:	6013      	str	r3, [r2, #0]
 800b65c:	e02b      	b.n	800b6b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	015a      	lsls	r2, r3, #5
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	4413      	add	r3, r2
 800b666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	db12      	blt.n	800b696 <USB_EPSetStall+0xae>
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00f      	beq.n	800b696 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	015a      	lsls	r2, r3, #5
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4413      	add	r3, r2
 800b67e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68ba      	ldr	r2, [r7, #8]
 800b686:	0151      	lsls	r1, r2, #5
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	440a      	add	r2, r1
 800b68c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b690:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b694:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	015a      	lsls	r2, r3, #5
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	4413      	add	r3, r2
 800b69e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68ba      	ldr	r2, [r7, #8]
 800b6a6:	0151      	lsls	r1, r2, #5
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	440a      	add	r2, r1
 800b6ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b6b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	785b      	ldrb	r3, [r3, #1]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d128      	bne.n	800b732 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	0151      	lsls	r1, r2, #5
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	440a      	add	r2, r1
 800b6f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b6fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	791b      	ldrb	r3, [r3, #4]
 800b704:	2b03      	cmp	r3, #3
 800b706:	d003      	beq.n	800b710 <USB_EPClearStall+0x4c>
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	791b      	ldrb	r3, [r3, #4]
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d138      	bne.n	800b782 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4413      	add	r3, r2
 800b718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	0151      	lsls	r1, r2, #5
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	440a      	add	r2, r1
 800b726:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b72a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b72e:	6013      	str	r3, [r2, #0]
 800b730:	e027      	b.n	800b782 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	015a      	lsls	r2, r3, #5
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	4413      	add	r3, r2
 800b73a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	0151      	lsls	r1, r2, #5
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	440a      	add	r2, r1
 800b748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b74c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b750:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	791b      	ldrb	r3, [r3, #4]
 800b756:	2b03      	cmp	r3, #3
 800b758:	d003      	beq.n	800b762 <USB_EPClearStall+0x9e>
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	791b      	ldrb	r3, [r3, #4]
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d10f      	bne.n	800b782 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	0151      	lsls	r1, r2, #5
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	440a      	add	r2, r1
 800b778:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b77c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b780:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3714      	adds	r7, #20
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	460b      	mov	r3, r1
 800b79a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b7ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b7b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	78fb      	ldrb	r3, [r7, #3]
 800b7be:	011b      	lsls	r3, r3, #4
 800b7c0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b7c4:	68f9      	ldr	r1, [r7, #12]
 800b7c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b7f6:	f023 0303 	bic.w	r3, r3, #3
 800b7fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b80a:	f023 0302 	bic.w	r3, r3, #2
 800b80e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b81e:	b480      	push	{r7}
 800b820:	b085      	sub	sp, #20
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b838:	f023 0303 	bic.w	r3, r3, #3
 800b83c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b84c:	f043 0302 	orr.w	r3, r3, #2
 800b850:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	4013      	ands	r3, r2
 800b876:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b878:	68fb      	ldr	r3, [r7, #12]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b886:	b480      	push	{r7}
 800b888:	b085      	sub	sp, #20
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8a2:	69db      	ldr	r3, [r3, #28]
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	4013      	ands	r3, r2
 800b8a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	0c1b      	lsrs	r3, r3, #16
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3714      	adds	r7, #20
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b085      	sub	sp, #20
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8cc:	699b      	ldr	r3, [r3, #24]
 800b8ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8d6:	69db      	ldr	r3, [r3, #28]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	4013      	ands	r3, r2
 800b8dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	b29b      	uxth	r3, r3
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3714      	adds	r7, #20
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr

0800b8ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b8ee:	b480      	push	{r7}
 800b8f0:	b085      	sub	sp, #20
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b8fe:	78fb      	ldrb	r3, [r7, #3]
 800b900:	015a      	lsls	r2, r3, #5
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	4413      	add	r3, r2
 800b906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	68ba      	ldr	r2, [r7, #8]
 800b918:	4013      	ands	r3, r2
 800b91a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b91c:	68bb      	ldr	r3, [r7, #8]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b087      	sub	sp, #28
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	460b      	mov	r3, r1
 800b934:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b940:	691b      	ldr	r3, [r3, #16]
 800b942:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b94a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b94c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b94e:	78fb      	ldrb	r3, [r7, #3]
 800b950:	f003 030f 	and.w	r3, r3, #15
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	fa22 f303 	lsr.w	r3, r2, r3
 800b95a:	01db      	lsls	r3, r3, #7
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	4313      	orrs	r3, r2
 800b962:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b964:	78fb      	ldrb	r3, [r7, #3]
 800b966:	015a      	lsls	r2, r3, #5
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	4413      	add	r3, r2
 800b96c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	4013      	ands	r3, r2
 800b976:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b978:	68bb      	ldr	r3, [r7, #8]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	371c      	adds	r7, #28
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b986:	b480      	push	{r7}
 800b988:	b083      	sub	sp, #12
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	695b      	ldr	r3, [r3, #20]
 800b992:	f003 0301 	and.w	r3, r3, #1
}
 800b996:	4618      	mov	r0, r3
 800b998:	370c      	adds	r7, #12
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr
	...

0800b9a4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9be:	4619      	mov	r1, r3
 800b9c0:	4b09      	ldr	r3, [pc, #36]	@ (800b9e8 <USB_ActivateSetup+0x44>)
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b9d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	fffff800 	.word	0xfffff800

0800b9ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b087      	sub	sp, #28
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	607a      	str	r2, [r7, #4]
 800b9f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	333c      	adds	r3, #60	@ 0x3c
 800ba02:	3304      	adds	r3, #4
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	4a26      	ldr	r2, [pc, #152]	@ (800baa4 <USB_EP0_OutStart+0xb8>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d90a      	bls.n	800ba26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba20:	d101      	bne.n	800ba26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	e037      	b.n	800ba96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	2300      	movs	r3, #0
 800ba30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	697a      	ldr	r2, [r7, #20]
 800ba3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	697a      	ldr	r2, [r7, #20]
 800ba50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba54:	f043 0318 	orr.w	r3, r3, #24
 800ba58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba68:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ba6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ba6e:	7afb      	ldrb	r3, [r7, #11]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d10f      	bne.n	800ba94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	697a      	ldr	r2, [r7, #20]
 800ba8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba8e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ba92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba94:	2300      	movs	r3, #0
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	371c      	adds	r7, #28
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	4f54300a 	.word	0x4f54300a

0800baa8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bab0:	2300      	movs	r3, #0
 800bab2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3301      	adds	r3, #1
 800bab8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bac0:	d901      	bls.n	800bac6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e01b      	b.n	800bafe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	daf2      	bge.n	800bab4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bace:	2300      	movs	r3, #0
 800bad0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	f043 0201 	orr.w	r2, r3, #1
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3301      	adds	r3, #1
 800bae2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800baea:	d901      	bls.n	800baf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800baec:	2303      	movs	r3, #3
 800baee:	e006      	b.n	800bafe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	f003 0301 	and.w	r3, r3, #1
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d0f0      	beq.n	800bade <USB_CoreReset+0x36>

  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
	...

0800bb0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	460b      	mov	r3, r1
 800bb16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb18:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bb1c:	f002 fd8c 	bl	800e638 <malloc>
 800bb20:	4603      	mov	r3, r0
 800bb22:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d109      	bne.n	800bb3e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	32b0      	adds	r2, #176	@ 0xb0
 800bb34:	2100      	movs	r1, #0
 800bb36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	e0d4      	b.n	800bce8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bb3e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bb42:	2100      	movs	r1, #0
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f002 fe35 	bl	800e7b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	32b0      	adds	r2, #176	@ 0xb0
 800bb54:	68f9      	ldr	r1, [r7, #12]
 800bb56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	32b0      	adds	r2, #176	@ 0xb0
 800bb64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	7c1b      	ldrb	r3, [r3, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d138      	bne.n	800bbe8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bb76:	4b5e      	ldr	r3, [pc, #376]	@ (800bcf0 <USBD_CDC_Init+0x1e4>)
 800bb78:	7819      	ldrb	r1, [r3, #0]
 800bb7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb7e:	2202      	movs	r2, #2
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f002 fbb6 	bl	800e2f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bb86:	4b5a      	ldr	r3, [pc, #360]	@ (800bcf0 <USBD_CDC_Init+0x1e4>)
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	f003 020f 	and.w	r2, r3, #15
 800bb8e:	6879      	ldr	r1, [r7, #4]
 800bb90:	4613      	mov	r3, r2
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4413      	add	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	440b      	add	r3, r1
 800bb9a:	3324      	adds	r3, #36	@ 0x24
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bba0:	4b54      	ldr	r3, [pc, #336]	@ (800bcf4 <USBD_CDC_Init+0x1e8>)
 800bba2:	7819      	ldrb	r1, [r3, #0]
 800bba4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bba8:	2202      	movs	r2, #2
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f002 fba1 	bl	800e2f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bbb0:	4b50      	ldr	r3, [pc, #320]	@ (800bcf4 <USBD_CDC_Init+0x1e8>)
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	f003 020f 	and.w	r2, r3, #15
 800bbb8:	6879      	ldr	r1, [r7, #4]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	440b      	add	r3, r1
 800bbc4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bbc8:	2201      	movs	r2, #1
 800bbca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bbcc:	4b4a      	ldr	r3, [pc, #296]	@ (800bcf8 <USBD_CDC_Init+0x1ec>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	f003 020f 	and.w	r2, r3, #15
 800bbd4:	6879      	ldr	r1, [r7, #4]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	440b      	add	r3, r1
 800bbe0:	3326      	adds	r3, #38	@ 0x26
 800bbe2:	2210      	movs	r2, #16
 800bbe4:	801a      	strh	r2, [r3, #0]
 800bbe6:	e035      	b.n	800bc54 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bbe8:	4b41      	ldr	r3, [pc, #260]	@ (800bcf0 <USBD_CDC_Init+0x1e4>)
 800bbea:	7819      	ldrb	r1, [r3, #0]
 800bbec:	2340      	movs	r3, #64	@ 0x40
 800bbee:	2202      	movs	r2, #2
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f002 fb7e 	bl	800e2f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bbf6:	4b3e      	ldr	r3, [pc, #248]	@ (800bcf0 <USBD_CDC_Init+0x1e4>)
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	f003 020f 	and.w	r2, r3, #15
 800bbfe:	6879      	ldr	r1, [r7, #4]
 800bc00:	4613      	mov	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	440b      	add	r3, r1
 800bc0a:	3324      	adds	r3, #36	@ 0x24
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc10:	4b38      	ldr	r3, [pc, #224]	@ (800bcf4 <USBD_CDC_Init+0x1e8>)
 800bc12:	7819      	ldrb	r1, [r3, #0]
 800bc14:	2340      	movs	r3, #64	@ 0x40
 800bc16:	2202      	movs	r2, #2
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f002 fb6a 	bl	800e2f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bc1e:	4b35      	ldr	r3, [pc, #212]	@ (800bcf4 <USBD_CDC_Init+0x1e8>)
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	f003 020f 	and.w	r2, r3, #15
 800bc26:	6879      	ldr	r1, [r7, #4]
 800bc28:	4613      	mov	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4413      	add	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	440b      	add	r3, r1
 800bc32:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc36:	2201      	movs	r2, #1
 800bc38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bc3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bcf8 <USBD_CDC_Init+0x1ec>)
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	f003 020f 	and.w	r2, r3, #15
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	4613      	mov	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	440b      	add	r3, r1
 800bc4e:	3326      	adds	r3, #38	@ 0x26
 800bc50:	2210      	movs	r2, #16
 800bc52:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc54:	4b28      	ldr	r3, [pc, #160]	@ (800bcf8 <USBD_CDC_Init+0x1ec>)
 800bc56:	7819      	ldrb	r1, [r3, #0]
 800bc58:	2308      	movs	r3, #8
 800bc5a:	2203      	movs	r2, #3
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f002 fb48 	bl	800e2f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bc62:	4b25      	ldr	r3, [pc, #148]	@ (800bcf8 <USBD_CDC_Init+0x1ec>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	f003 020f 	and.w	r2, r3, #15
 800bc6a:	6879      	ldr	r1, [r7, #4]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	440b      	add	r3, r1
 800bc76:	3324      	adds	r3, #36	@ 0x24
 800bc78:	2201      	movs	r2, #1
 800bc7a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	33b0      	adds	r3, #176	@ 0xb0
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	4413      	add	r3, r2
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800bcb2:	2302      	movs	r3, #2
 800bcb4:	e018      	b.n	800bce8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	7c1b      	ldrb	r3, [r3, #16]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10a      	bne.n	800bcd4 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bcbe:	4b0d      	ldr	r3, [pc, #52]	@ (800bcf4 <USBD_CDC_Init+0x1e8>)
 800bcc0:	7819      	ldrb	r1, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bcc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f002 fbff 	bl	800e4d0 <USBD_LL_PrepareReceive>
 800bcd2:	e008      	b.n	800bce6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bcd4:	4b07      	ldr	r3, [pc, #28]	@ (800bcf4 <USBD_CDC_Init+0x1e8>)
 800bcd6:	7819      	ldrb	r1, [r3, #0]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bcde:	2340      	movs	r3, #64	@ 0x40
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f002 fbf5 	bl	800e4d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	2000009f 	.word	0x2000009f
 800bcf4:	200000a0 	.word	0x200000a0
 800bcf8:	200000a1 	.word	0x200000a1

0800bcfc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	460b      	mov	r3, r1
 800bd06:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bd08:	4b3a      	ldr	r3, [pc, #232]	@ (800bdf4 <USBD_CDC_DeInit+0xf8>)
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f002 fb15 	bl	800e33e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bd14:	4b37      	ldr	r3, [pc, #220]	@ (800bdf4 <USBD_CDC_DeInit+0xf8>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	f003 020f 	and.w	r2, r3, #15
 800bd1c:	6879      	ldr	r1, [r7, #4]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	440b      	add	r3, r1
 800bd28:	3324      	adds	r3, #36	@ 0x24
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bd2e:	4b32      	ldr	r3, [pc, #200]	@ (800bdf8 <USBD_CDC_DeInit+0xfc>)
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f002 fb02 	bl	800e33e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bd3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bdf8 <USBD_CDC_DeInit+0xfc>)
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	f003 020f 	and.w	r2, r3, #15
 800bd42:	6879      	ldr	r1, [r7, #4]
 800bd44:	4613      	mov	r3, r2
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4413      	add	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	440b      	add	r3, r1
 800bd4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bd52:	2200      	movs	r2, #0
 800bd54:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bd56:	4b29      	ldr	r3, [pc, #164]	@ (800bdfc <USBD_CDC_DeInit+0x100>)
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f002 faee 	bl	800e33e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bd62:	4b26      	ldr	r3, [pc, #152]	@ (800bdfc <USBD_CDC_DeInit+0x100>)
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	f003 020f 	and.w	r2, r3, #15
 800bd6a:	6879      	ldr	r1, [r7, #4]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	440b      	add	r3, r1
 800bd76:	3324      	adds	r3, #36	@ 0x24
 800bd78:	2200      	movs	r2, #0
 800bd7a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bd7c:	4b1f      	ldr	r3, [pc, #124]	@ (800bdfc <USBD_CDC_DeInit+0x100>)
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	f003 020f 	and.w	r2, r3, #15
 800bd84:	6879      	ldr	r1, [r7, #4]
 800bd86:	4613      	mov	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	440b      	add	r3, r1
 800bd90:	3326      	adds	r3, #38	@ 0x26
 800bd92:	2200      	movs	r2, #0
 800bd94:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	32b0      	adds	r2, #176	@ 0xb0
 800bda0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d01f      	beq.n	800bde8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	33b0      	adds	r3, #176	@ 0xb0
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	4413      	add	r3, r2
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	32b0      	adds	r2, #176	@ 0xb0
 800bdc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f002 fc3c 	bl	800e648 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	32b0      	adds	r2, #176	@ 0xb0
 800bdda:	2100      	movs	r1, #0
 800bddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	2000009f 	.word	0x2000009f
 800bdf8:	200000a0 	.word	0x200000a0
 800bdfc:	200000a1 	.word	0x200000a1

0800be00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	32b0      	adds	r2, #176	@ 0xb0
 800be14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800be1a:	2300      	movs	r3, #0
 800be1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800be1e:	2300      	movs	r3, #0
 800be20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800be22:	2300      	movs	r3, #0
 800be24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d101      	bne.n	800be30 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800be2c:	2303      	movs	r3, #3
 800be2e:	e0bf      	b.n	800bfb0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d050      	beq.n	800bede <USBD_CDC_Setup+0xde>
 800be3c:	2b20      	cmp	r3, #32
 800be3e:	f040 80af 	bne.w	800bfa0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	88db      	ldrh	r3, [r3, #6]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d03a      	beq.n	800bec0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	b25b      	sxtb	r3, r3
 800be50:	2b00      	cmp	r3, #0
 800be52:	da1b      	bge.n	800be8c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	33b0      	adds	r3, #176	@ 0xb0
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	4413      	add	r3, r2
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800be6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	88d2      	ldrh	r2, [r2, #6]
 800be70:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	88db      	ldrh	r3, [r3, #6]
 800be76:	2b07      	cmp	r3, #7
 800be78:	bf28      	it	cs
 800be7a:	2307      	movcs	r3, #7
 800be7c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	89fa      	ldrh	r2, [r7, #14]
 800be82:	4619      	mov	r1, r3
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f001 fdbd 	bl	800da04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800be8a:	e090      	b.n	800bfae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	785a      	ldrb	r2, [r3, #1]
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	88db      	ldrh	r3, [r3, #6]
 800be9a:	2b3f      	cmp	r3, #63	@ 0x3f
 800be9c:	d803      	bhi.n	800bea6 <USBD_CDC_Setup+0xa6>
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	88db      	ldrh	r3, [r3, #6]
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	e000      	b.n	800bea8 <USBD_CDC_Setup+0xa8>
 800bea6:	2240      	movs	r2, #64	@ 0x40
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800beae:	6939      	ldr	r1, [r7, #16]
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800beb6:	461a      	mov	r2, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f001 fdcf 	bl	800da5c <USBD_CtlPrepareRx>
      break;
 800bebe:	e076      	b.n	800bfae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	33b0      	adds	r3, #176	@ 0xb0
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	7850      	ldrb	r0, [r2, #1]
 800bed6:	2200      	movs	r2, #0
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	4798      	blx	r3
      break;
 800bedc:	e067      	b.n	800bfae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	785b      	ldrb	r3, [r3, #1]
 800bee2:	2b0b      	cmp	r3, #11
 800bee4:	d851      	bhi.n	800bf8a <USBD_CDC_Setup+0x18a>
 800bee6:	a201      	add	r2, pc, #4	@ (adr r2, 800beec <USBD_CDC_Setup+0xec>)
 800bee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beec:	0800bf1d 	.word	0x0800bf1d
 800bef0:	0800bf99 	.word	0x0800bf99
 800bef4:	0800bf8b 	.word	0x0800bf8b
 800bef8:	0800bf8b 	.word	0x0800bf8b
 800befc:	0800bf8b 	.word	0x0800bf8b
 800bf00:	0800bf8b 	.word	0x0800bf8b
 800bf04:	0800bf8b 	.word	0x0800bf8b
 800bf08:	0800bf8b 	.word	0x0800bf8b
 800bf0c:	0800bf8b 	.word	0x0800bf8b
 800bf10:	0800bf8b 	.word	0x0800bf8b
 800bf14:	0800bf47 	.word	0x0800bf47
 800bf18:	0800bf71 	.word	0x0800bf71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	d107      	bne.n	800bf38 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf28:	f107 030a 	add.w	r3, r7, #10
 800bf2c:	2202      	movs	r2, #2
 800bf2e:	4619      	mov	r1, r3
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	f001 fd67 	bl	800da04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf36:	e032      	b.n	800bf9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f001 fce5 	bl	800d90a <USBD_CtlError>
            ret = USBD_FAIL;
 800bf40:	2303      	movs	r3, #3
 800bf42:	75fb      	strb	r3, [r7, #23]
          break;
 800bf44:	e02b      	b.n	800bf9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	2b03      	cmp	r3, #3
 800bf50:	d107      	bne.n	800bf62 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bf52:	f107 030d 	add.w	r3, r7, #13
 800bf56:	2201      	movs	r2, #1
 800bf58:	4619      	mov	r1, r3
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f001 fd52 	bl	800da04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf60:	e01d      	b.n	800bf9e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bf62:	6839      	ldr	r1, [r7, #0]
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f001 fcd0 	bl	800d90a <USBD_CtlError>
            ret = USBD_FAIL;
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	75fb      	strb	r3, [r7, #23]
          break;
 800bf6e:	e016      	b.n	800bf9e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	2b03      	cmp	r3, #3
 800bf7a:	d00f      	beq.n	800bf9c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f001 fcc3 	bl	800d90a <USBD_CtlError>
            ret = USBD_FAIL;
 800bf84:	2303      	movs	r3, #3
 800bf86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bf88:	e008      	b.n	800bf9c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bf8a:	6839      	ldr	r1, [r7, #0]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f001 fcbc 	bl	800d90a <USBD_CtlError>
          ret = USBD_FAIL;
 800bf92:	2303      	movs	r3, #3
 800bf94:	75fb      	strb	r3, [r7, #23]
          break;
 800bf96:	e002      	b.n	800bf9e <USBD_CDC_Setup+0x19e>
          break;
 800bf98:	bf00      	nop
 800bf9a:	e008      	b.n	800bfae <USBD_CDC_Setup+0x1ae>
          break;
 800bf9c:	bf00      	nop
      }
      break;
 800bf9e:	e006      	b.n	800bfae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f001 fcb1 	bl	800d90a <USBD_CtlError>
      ret = USBD_FAIL;
 800bfa8:	2303      	movs	r3, #3
 800bfaa:	75fb      	strb	r3, [r7, #23]
      break;
 800bfac:	bf00      	nop
  }

  return (uint8_t)ret;
 800bfae:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3718      	adds	r7, #24
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	32b0      	adds	r2, #176	@ 0xb0
 800bfd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d101      	bne.n	800bfe2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bfde:	2303      	movs	r3, #3
 800bfe0:	e065      	b.n	800c0ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	32b0      	adds	r2, #176	@ 0xb0
 800bfec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bff2:	78fb      	ldrb	r3, [r7, #3]
 800bff4:	f003 020f 	and.w	r2, r3, #15
 800bff8:	6879      	ldr	r1, [r7, #4]
 800bffa:	4613      	mov	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4413      	add	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	440b      	add	r3, r1
 800c004:	3318      	adds	r3, #24
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d02f      	beq.n	800c06c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c00c:	78fb      	ldrb	r3, [r7, #3]
 800c00e:	f003 020f 	and.w	r2, r3, #15
 800c012:	6879      	ldr	r1, [r7, #4]
 800c014:	4613      	mov	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	440b      	add	r3, r1
 800c01e:	3318      	adds	r3, #24
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	78fb      	ldrb	r3, [r7, #3]
 800c024:	f003 010f 	and.w	r1, r3, #15
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	460b      	mov	r3, r1
 800c02c:	00db      	lsls	r3, r3, #3
 800c02e:	440b      	add	r3, r1
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4403      	add	r3, r0
 800c034:	331c      	adds	r3, #28
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	fbb2 f1f3 	udiv	r1, r2, r3
 800c03c:	fb01 f303 	mul.w	r3, r1, r3
 800c040:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c042:	2b00      	cmp	r3, #0
 800c044:	d112      	bne.n	800c06c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c046:	78fb      	ldrb	r3, [r7, #3]
 800c048:	f003 020f 	and.w	r2, r3, #15
 800c04c:	6879      	ldr	r1, [r7, #4]
 800c04e:	4613      	mov	r3, r2
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	4413      	add	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	440b      	add	r3, r1
 800c058:	3318      	adds	r3, #24
 800c05a:	2200      	movs	r2, #0
 800c05c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c05e:	78f9      	ldrb	r1, [r7, #3]
 800c060:	2300      	movs	r3, #0
 800c062:	2200      	movs	r2, #0
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f002 fa12 	bl	800e48e <USBD_LL_Transmit>
 800c06a:	e01f      	b.n	800c0ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	2200      	movs	r2, #0
 800c070:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	33b0      	adds	r3, #176	@ 0xb0
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	4413      	add	r3, r2
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	691b      	ldr	r3, [r3, #16]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d010      	beq.n	800c0ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	33b0      	adds	r3, #176	@ 0xb0
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	4413      	add	r3, r2
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c0a8:	78fa      	ldrb	r2, [r7, #3]
 800c0aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b084      	sub	sp, #16
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	460b      	mov	r3, r1
 800c0c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	32b0      	adds	r2, #176	@ 0xb0
 800c0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	32b0      	adds	r2, #176	@ 0xb0
 800c0dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d101      	bne.n	800c0e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c0e4:	2303      	movs	r3, #3
 800c0e6:	e01a      	b.n	800c11e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c0e8:	78fb      	ldrb	r3, [r7, #3]
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f002 fa10 	bl	800e512 <USBD_LL_GetRxDataSize>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	33b0      	adds	r3, #176	@ 0xb0
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c118:	4611      	mov	r1, r2
 800c11a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b084      	sub	sp, #16
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	32b0      	adds	r2, #176	@ 0xb0
 800c138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c13c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d101      	bne.n	800c148 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c144:	2303      	movs	r3, #3
 800c146:	e024      	b.n	800c192 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	33b0      	adds	r3, #176	@ 0xb0
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d019      	beq.n	800c190 <USBD_CDC_EP0_RxReady+0x6a>
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c162:	2bff      	cmp	r3, #255	@ 0xff
 800c164:	d014      	beq.n	800c190 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	33b0      	adds	r3, #176	@ 0xb0
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4413      	add	r3, r2
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c17e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c186:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	22ff      	movs	r2, #255	@ 0xff
 800c18c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
	...

0800c19c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b086      	sub	sp, #24
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c1a4:	2182      	movs	r1, #130	@ 0x82
 800c1a6:	4818      	ldr	r0, [pc, #96]	@ (800c208 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c1a8:	f000 fd4f 	bl	800cc4a <USBD_GetEpDesc>
 800c1ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	4815      	ldr	r0, [pc, #84]	@ (800c208 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c1b2:	f000 fd4a 	bl	800cc4a <USBD_GetEpDesc>
 800c1b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c1b8:	2181      	movs	r1, #129	@ 0x81
 800c1ba:	4813      	ldr	r0, [pc, #76]	@ (800c208 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c1bc:	f000 fd45 	bl	800cc4a <USBD_GetEpDesc>
 800c1c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	2210      	movs	r2, #16
 800c1cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d006      	beq.n	800c1e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c1dc:	711a      	strb	r2, [r3, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d006      	beq.n	800c1f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c1f0:	711a      	strb	r2, [r3, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2243      	movs	r2, #67	@ 0x43
 800c1fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c1fc:	4b02      	ldr	r3, [pc, #8]	@ (800c208 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3718      	adds	r7, #24
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	2000005c 	.word	0x2000005c

0800c20c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b086      	sub	sp, #24
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c214:	2182      	movs	r1, #130	@ 0x82
 800c216:	4818      	ldr	r0, [pc, #96]	@ (800c278 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c218:	f000 fd17 	bl	800cc4a <USBD_GetEpDesc>
 800c21c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c21e:	2101      	movs	r1, #1
 800c220:	4815      	ldr	r0, [pc, #84]	@ (800c278 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c222:	f000 fd12 	bl	800cc4a <USBD_GetEpDesc>
 800c226:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c228:	2181      	movs	r1, #129	@ 0x81
 800c22a:	4813      	ldr	r0, [pc, #76]	@ (800c278 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c22c:	f000 fd0d 	bl	800cc4a <USBD_GetEpDesc>
 800c230:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	2210      	movs	r2, #16
 800c23c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d006      	beq.n	800c252 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	2200      	movs	r2, #0
 800c248:	711a      	strb	r2, [r3, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	f042 0202 	orr.w	r2, r2, #2
 800c250:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d006      	beq.n	800c266 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2200      	movs	r2, #0
 800c25c:	711a      	strb	r2, [r3, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	f042 0202 	orr.w	r2, r2, #2
 800c264:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2243      	movs	r2, #67	@ 0x43
 800c26a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c26c:	4b02      	ldr	r3, [pc, #8]	@ (800c278 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	2000005c 	.word	0x2000005c

0800c27c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c284:	2182      	movs	r1, #130	@ 0x82
 800c286:	4818      	ldr	r0, [pc, #96]	@ (800c2e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c288:	f000 fcdf 	bl	800cc4a <USBD_GetEpDesc>
 800c28c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c28e:	2101      	movs	r1, #1
 800c290:	4815      	ldr	r0, [pc, #84]	@ (800c2e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c292:	f000 fcda 	bl	800cc4a <USBD_GetEpDesc>
 800c296:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c298:	2181      	movs	r1, #129	@ 0x81
 800c29a:	4813      	ldr	r0, [pc, #76]	@ (800c2e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c29c:	f000 fcd5 	bl	800cc4a <USBD_GetEpDesc>
 800c2a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d002      	beq.n	800c2ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	2210      	movs	r2, #16
 800c2ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d006      	beq.n	800c2c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2bc:	711a      	strb	r2, [r3, #4]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d006      	beq.n	800c2d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2d0:	711a      	strb	r2, [r3, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2243      	movs	r2, #67	@ 0x43
 800c2da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c2dc:	4b02      	ldr	r3, [pc, #8]	@ (800c2e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3718      	adds	r7, #24
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	2000005c 	.word	0x2000005c

0800c2ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	220a      	movs	r2, #10
 800c2f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c2fa:	4b03      	ldr	r3, [pc, #12]	@ (800c308 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	20000018 	.word	0x20000018

0800c30c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d101      	bne.n	800c320 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c31c:	2303      	movs	r3, #3
 800c31e:	e009      	b.n	800c334 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	33b0      	adds	r3, #176	@ 0xb0
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4413      	add	r3, r2
 800c32e:	683a      	ldr	r2, [r7, #0]
 800c330:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c340:	b480      	push	{r7}
 800c342:	b087      	sub	sp, #28
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	32b0      	adds	r2, #176	@ 0xb0
 800c356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c35a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c362:	2303      	movs	r3, #3
 800c364:	e008      	b.n	800c378 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	371c      	adds	r7, #28
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	32b0      	adds	r2, #176	@ 0xb0
 800c398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d101      	bne.n	800c3a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c3a4:	2303      	movs	r3, #3
 800c3a6:	e004      	b.n	800c3b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3714      	adds	r7, #20
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
	...

0800c3c0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	32b0      	adds	r2, #176	@ 0xb0
 800c3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d101      	bne.n	800c3e6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	e025      	b.n	800c432 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d11f      	bne.n	800c430 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c3f8:	4b10      	ldr	r3, [pc, #64]	@ (800c43c <USBD_CDC_TransmitPacket+0x7c>)
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	f003 020f 	and.w	r2, r3, #15
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	4613      	mov	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	4413      	add	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	4403      	add	r3, r0
 800c412:	3318      	adds	r3, #24
 800c414:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c416:	4b09      	ldr	r3, [pc, #36]	@ (800c43c <USBD_CDC_TransmitPacket+0x7c>)
 800c418:	7819      	ldrb	r1, [r3, #0]
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f002 f831 	bl	800e48e <USBD_LL_Transmit>

    ret = USBD_OK;
 800c42c:	2300      	movs	r3, #0
 800c42e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c430:	7bfb      	ldrb	r3, [r7, #15]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	2000009f 	.word	0x2000009f

0800c440 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	32b0      	adds	r2, #176	@ 0xb0
 800c452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c456:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	32b0      	adds	r2, #176	@ 0xb0
 800c462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d101      	bne.n	800c46e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e018      	b.n	800c4a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	7c1b      	ldrb	r3, [r3, #16]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d10a      	bne.n	800c48c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c476:	4b0c      	ldr	r3, [pc, #48]	@ (800c4a8 <USBD_CDC_ReceivePacket+0x68>)
 800c478:	7819      	ldrb	r1, [r3, #0]
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c480:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f002 f823 	bl	800e4d0 <USBD_LL_PrepareReceive>
 800c48a:	e008      	b.n	800c49e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c48c:	4b06      	ldr	r3, [pc, #24]	@ (800c4a8 <USBD_CDC_ReceivePacket+0x68>)
 800c48e:	7819      	ldrb	r1, [r3, #0]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c496:	2340      	movs	r3, #64	@ 0x40
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f002 f819 	bl	800e4d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	200000a0 	.word	0x200000a0

0800c4ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d101      	bne.n	800c4c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c4c0:	2303      	movs	r3, #3
 800c4c2:	e01f      	b.n	800c504 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d003      	beq.n	800c4ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	79fa      	ldrb	r2, [r7, #7]
 800c4f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c4f8:	68f8      	ldr	r0, [r7, #12]
 800c4fa:	f001 fe93 	bl	800e224 <USBD_LL_Init>
 800c4fe:	4603      	mov	r3, r0
 800c500:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c502:	7dfb      	ldrb	r3, [r7, #23]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3718      	adds	r7, #24
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c516:	2300      	movs	r3, #0
 800c518:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d101      	bne.n	800c524 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c520:	2303      	movs	r3, #3
 800c522:	e025      	b.n	800c570 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	683a      	ldr	r2, [r7, #0]
 800c528:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	32ae      	adds	r2, #174	@ 0xae
 800c536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00f      	beq.n	800c560 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	32ae      	adds	r2, #174	@ 0xae
 800c54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c550:	f107 020e 	add.w	r2, r7, #14
 800c554:	4610      	mov	r0, r2
 800c556:	4798      	blx	r3
 800c558:	4602      	mov	r2, r0
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c566:	1c5a      	adds	r2, r3, #1
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f001 fe9b 	bl	800e2bc <USBD_LL_Start>
 800c586:	4603      	mov	r3, r0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c598:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	370c      	adds	r7, #12
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d009      	beq.n	800c5d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	78fa      	ldrb	r2, [r7, #3]
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	4798      	blx	r3
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b084      	sub	sp, #16
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	78fa      	ldrb	r2, [r7, #3]
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	4798      	blx	r3
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c604:	2303      	movs	r3, #3
 800c606:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c608:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b084      	sub	sp, #16
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
 800c61a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	4618      	mov	r0, r3
 800c626:	f001 f936 	bl	800d896 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2201      	movs	r2, #1
 800c62e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c638:	461a      	mov	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c646:	f003 031f 	and.w	r3, r3, #31
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d01a      	beq.n	800c684 <USBD_LL_SetupStage+0x72>
 800c64e:	2b02      	cmp	r3, #2
 800c650:	d822      	bhi.n	800c698 <USBD_LL_SetupStage+0x86>
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <USBD_LL_SetupStage+0x4a>
 800c656:	2b01      	cmp	r3, #1
 800c658:	d00a      	beq.n	800c670 <USBD_LL_SetupStage+0x5e>
 800c65a:	e01d      	b.n	800c698 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c662:	4619      	mov	r1, r3
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fb63 	bl	800cd30 <USBD_StdDevReq>
 800c66a:	4603      	mov	r3, r0
 800c66c:	73fb      	strb	r3, [r7, #15]
      break;
 800c66e:	e020      	b.n	800c6b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c676:	4619      	mov	r1, r3
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 fbcb 	bl	800ce14 <USBD_StdItfReq>
 800c67e:	4603      	mov	r3, r0
 800c680:	73fb      	strb	r3, [r7, #15]
      break;
 800c682:	e016      	b.n	800c6b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fc2d 	bl	800ceec <USBD_StdEPReq>
 800c692:	4603      	mov	r3, r0
 800c694:	73fb      	strb	r3, [r7, #15]
      break;
 800c696:	e00c      	b.n	800c6b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c69e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f001 fe68 	bl	800e37c <USBD_LL_StallEP>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c6b0:	bf00      	nop
  }

  return ret;
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	607a      	str	r2, [r7, #4]
 800c6c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c6ce:	7afb      	ldrb	r3, [r7, #11]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d16e      	bne.n	800c7b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c6da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c6e2:	2b03      	cmp	r3, #3
 800c6e4:	f040 8098 	bne.w	800c818 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	689a      	ldr	r2, [r3, #8]
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d913      	bls.n	800c71c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	689a      	ldr	r2, [r3, #8]
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	1ad2      	subs	r2, r2, r3
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	68da      	ldr	r2, [r3, #12]
 800c706:	693b      	ldr	r3, [r7, #16]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	4293      	cmp	r3, r2
 800c70c:	bf28      	it	cs
 800c70e:	4613      	movcs	r3, r2
 800c710:	461a      	mov	r2, r3
 800c712:	6879      	ldr	r1, [r7, #4]
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f001 f9be 	bl	800da96 <USBD_CtlContinueRx>
 800c71a:	e07d      	b.n	800c818 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c722:	f003 031f 	and.w	r3, r3, #31
 800c726:	2b02      	cmp	r3, #2
 800c728:	d014      	beq.n	800c754 <USBD_LL_DataOutStage+0x98>
 800c72a:	2b02      	cmp	r3, #2
 800c72c:	d81d      	bhi.n	800c76a <USBD_LL_DataOutStage+0xae>
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d002      	beq.n	800c738 <USBD_LL_DataOutStage+0x7c>
 800c732:	2b01      	cmp	r3, #1
 800c734:	d003      	beq.n	800c73e <USBD_LL_DataOutStage+0x82>
 800c736:	e018      	b.n	800c76a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c738:	2300      	movs	r3, #0
 800c73a:	75bb      	strb	r3, [r7, #22]
            break;
 800c73c:	e018      	b.n	800c770 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c744:	b2db      	uxtb	r3, r3
 800c746:	4619      	mov	r1, r3
 800c748:	68f8      	ldr	r0, [r7, #12]
 800c74a:	f000 fa64 	bl	800cc16 <USBD_CoreFindIF>
 800c74e:	4603      	mov	r3, r0
 800c750:	75bb      	strb	r3, [r7, #22]
            break;
 800c752:	e00d      	b.n	800c770 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	4619      	mov	r1, r3
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f000 fa66 	bl	800cc30 <USBD_CoreFindEP>
 800c764:	4603      	mov	r3, r0
 800c766:	75bb      	strb	r3, [r7, #22]
            break;
 800c768:	e002      	b.n	800c770 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c76a:	2300      	movs	r3, #0
 800c76c:	75bb      	strb	r3, [r7, #22]
            break;
 800c76e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c770:	7dbb      	ldrb	r3, [r7, #22]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d119      	bne.n	800c7aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	2b03      	cmp	r3, #3
 800c780:	d113      	bne.n	800c7aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c782:	7dba      	ldrb	r2, [r7, #22]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	32ae      	adds	r2, #174	@ 0xae
 800c788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00b      	beq.n	800c7aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c792:	7dba      	ldrb	r2, [r7, #22]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c79a:	7dba      	ldrb	r2, [r7, #22]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	32ae      	adds	r2, #174	@ 0xae
 800c7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7a4:	691b      	ldr	r3, [r3, #16]
 800c7a6:	68f8      	ldr	r0, [r7, #12]
 800c7a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f001 f984 	bl	800dab8 <USBD_CtlSendStatus>
 800c7b0:	e032      	b.n	800c818 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c7b2:	7afb      	ldrb	r3, [r7, #11]
 800c7b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 fa37 	bl	800cc30 <USBD_CoreFindEP>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7c6:	7dbb      	ldrb	r3, [r7, #22]
 800c7c8:	2bff      	cmp	r3, #255	@ 0xff
 800c7ca:	d025      	beq.n	800c818 <USBD_LL_DataOutStage+0x15c>
 800c7cc:	7dbb      	ldrb	r3, [r7, #22]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d122      	bne.n	800c818 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b03      	cmp	r3, #3
 800c7dc:	d117      	bne.n	800c80e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c7de:	7dba      	ldrb	r2, [r7, #22]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	32ae      	adds	r2, #174	@ 0xae
 800c7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00f      	beq.n	800c80e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c7ee:	7dba      	ldrb	r2, [r7, #22]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c7f6:	7dba      	ldrb	r2, [r7, #22]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	32ae      	adds	r2, #174	@ 0xae
 800c7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c800:	699b      	ldr	r3, [r3, #24]
 800c802:	7afa      	ldrb	r2, [r7, #11]
 800c804:	4611      	mov	r1, r2
 800c806:	68f8      	ldr	r0, [r7, #12]
 800c808:	4798      	blx	r3
 800c80a:	4603      	mov	r3, r0
 800c80c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c80e:	7dfb      	ldrb	r3, [r7, #23]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d001      	beq.n	800c818 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c814:	7dfb      	ldrb	r3, [r7, #23]
 800c816:	e000      	b.n	800c81a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3718      	adds	r7, #24
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b086      	sub	sp, #24
 800c826:	af00      	add	r7, sp, #0
 800c828:	60f8      	str	r0, [r7, #12]
 800c82a:	460b      	mov	r3, r1
 800c82c:	607a      	str	r2, [r7, #4]
 800c82e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c830:	7afb      	ldrb	r3, [r7, #11]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d16f      	bne.n	800c916 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3314      	adds	r3, #20
 800c83a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c842:	2b02      	cmp	r3, #2
 800c844:	d15a      	bne.n	800c8fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	689a      	ldr	r2, [r3, #8]
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d914      	bls.n	800c87c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	689a      	ldr	r2, [r3, #8]
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	1ad2      	subs	r2, r2, r3
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	461a      	mov	r2, r3
 800c866:	6879      	ldr	r1, [r7, #4]
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f001 f8e6 	bl	800da3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c86e:	2300      	movs	r3, #0
 800c870:	2200      	movs	r2, #0
 800c872:	2100      	movs	r1, #0
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f001 fe2b 	bl	800e4d0 <USBD_LL_PrepareReceive>
 800c87a:	e03f      	b.n	800c8fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	68da      	ldr	r2, [r3, #12]
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	429a      	cmp	r2, r3
 800c886:	d11c      	bne.n	800c8c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c890:	429a      	cmp	r2, r3
 800c892:	d316      	bcc.n	800c8c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	685a      	ldr	r2, [r3, #4]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d20f      	bcs.n	800c8c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f001 f8c7 	bl	800da3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f001 fe08 	bl	800e4d0 <USBD_LL_PrepareReceive>
 800c8c0:	e01c      	b.n	800c8fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	2b03      	cmp	r3, #3
 800c8cc:	d10f      	bne.n	800c8ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d009      	beq.n	800c8ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8ee:	2180      	movs	r1, #128	@ 0x80
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f001 fd43 	bl	800e37c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	f001 f8f1 	bl	800dade <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d03a      	beq.n	800c97c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f7ff fe42 	bl	800c590 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c914:	e032      	b.n	800c97c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c916:	7afb      	ldrb	r3, [r7, #11]
 800c918:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	4619      	mov	r1, r3
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	f000 f985 	bl	800cc30 <USBD_CoreFindEP>
 800c926:	4603      	mov	r3, r0
 800c928:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c92a:	7dfb      	ldrb	r3, [r7, #23]
 800c92c:	2bff      	cmp	r3, #255	@ 0xff
 800c92e:	d025      	beq.n	800c97c <USBD_LL_DataInStage+0x15a>
 800c930:	7dfb      	ldrb	r3, [r7, #23]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d122      	bne.n	800c97c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	2b03      	cmp	r3, #3
 800c940:	d11c      	bne.n	800c97c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c942:	7dfa      	ldrb	r2, [r7, #23]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	32ae      	adds	r2, #174	@ 0xae
 800c948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d014      	beq.n	800c97c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c952:	7dfa      	ldrb	r2, [r7, #23]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c95a:	7dfa      	ldrb	r2, [r7, #23]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	32ae      	adds	r2, #174	@ 0xae
 800c960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c964:	695b      	ldr	r3, [r3, #20]
 800c966:	7afa      	ldrb	r2, [r7, #11]
 800c968:	4611      	mov	r1, r2
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	4798      	blx	r3
 800c96e:	4603      	mov	r3, r0
 800c970:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c972:	7dbb      	ldrb	r3, [r7, #22]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c978:	7dbb      	ldrb	r3, [r7, #22]
 800c97a:	e000      	b.n	800c97e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3718      	adds	r7, #24
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2201      	movs	r2, #1
 800c996:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d014      	beq.n	800c9ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00e      	beq.n	800c9ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	6852      	ldr	r2, [r2, #4]
 800c9da:	b2d2      	uxtb	r2, r2
 800c9dc:	4611      	mov	r1, r2
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	4798      	blx	r3
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d001      	beq.n	800c9ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9ec:	2340      	movs	r3, #64	@ 0x40
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f001 fc7d 	bl	800e2f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2240      	movs	r2, #64	@ 0x40
 800ca04:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca08:	2340      	movs	r3, #64	@ 0x40
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	2180      	movs	r1, #128	@ 0x80
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f001 fc6f 	bl	800e2f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2240      	movs	r2, #64	@ 0x40
 800ca1e:	621a      	str	r2, [r3, #32]

  return ret;
 800ca20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3710      	adds	r7, #16
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}

0800ca2a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ca2a:	b480      	push	{r7}
 800ca2c:	b083      	sub	sp, #12
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
 800ca32:	460b      	mov	r3, r1
 800ca34:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	78fa      	ldrb	r2, [r7, #3]
 800ca3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	370c      	adds	r7, #12
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b083      	sub	sp, #12
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b04      	cmp	r3, #4
 800ca5c:	d006      	beq.n	800ca6c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca64:	b2da      	uxtb	r2, r3
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2204      	movs	r2, #4
 800ca70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr

0800ca82 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ca82:	b480      	push	{r7}
 800ca84:	b083      	sub	sp, #12
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	2b04      	cmp	r3, #4
 800ca94:	d106      	bne.n	800caa4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ca9c:	b2da      	uxtb	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	370c      	adds	r7, #12
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b082      	sub	sp, #8
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	2b03      	cmp	r3, #3
 800cac4:	d110      	bne.n	800cae8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d00b      	beq.n	800cae8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cad6:	69db      	ldr	r3, [r3, #28]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d005      	beq.n	800cae8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cae2:	69db      	ldr	r3, [r3, #28]
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cae8:	2300      	movs	r3, #0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3708      	adds	r7, #8
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b082      	sub	sp, #8
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
 800cafa:	460b      	mov	r3, r1
 800cafc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	32ae      	adds	r2, #174	@ 0xae
 800cb08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d101      	bne.n	800cb14 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cb10:	2303      	movs	r3, #3
 800cb12:	e01c      	b.n	800cb4e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b03      	cmp	r3, #3
 800cb1e:	d115      	bne.n	800cb4c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	32ae      	adds	r2, #174	@ 0xae
 800cb2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb2e:	6a1b      	ldr	r3, [r3, #32]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d00b      	beq.n	800cb4c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	32ae      	adds	r2, #174	@ 0xae
 800cb3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb42:	6a1b      	ldr	r3, [r3, #32]
 800cb44:	78fa      	ldrb	r2, [r7, #3]
 800cb46:	4611      	mov	r1, r2
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3708      	adds	r7, #8
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b082      	sub	sp, #8
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
 800cb5e:	460b      	mov	r3, r1
 800cb60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	32ae      	adds	r2, #174	@ 0xae
 800cb6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d101      	bne.n	800cb78 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cb74:	2303      	movs	r3, #3
 800cb76:	e01c      	b.n	800cbb2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	2b03      	cmp	r3, #3
 800cb82:	d115      	bne.n	800cbb0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	32ae      	adds	r2, #174	@ 0xae
 800cb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d00b      	beq.n	800cbb0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	32ae      	adds	r2, #174	@ 0xae
 800cba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cba8:	78fa      	ldrb	r2, [r7, #3]
 800cbaa:	4611      	mov	r1, r2
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b083      	sub	sp, #12
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00e      	beq.n	800cc0c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	6852      	ldr	r2, [r2, #4]
 800cbfa:	b2d2      	uxtb	r2, r2
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	4798      	blx	r3
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d001      	beq.n	800cc0c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cc08:	2303      	movs	r3, #3
 800cc0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3710      	adds	r7, #16
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cc16:	b480      	push	{r7}
 800cc18:	b083      	sub	sp, #12
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	460b      	mov	r3, r1
 800cc20:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc22:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	460b      	mov	r3, r1
 800cc3a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc3c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	370c      	adds	r7, #12
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr

0800cc4a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b086      	sub	sp, #24
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	460b      	mov	r3, r1
 800cc54:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	885b      	ldrh	r3, [r3, #2]
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	7812      	ldrb	r2, [r2, #0]
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d91f      	bls.n	800ccb0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cc76:	e013      	b.n	800cca0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cc78:	f107 030a 	add.w	r3, r7, #10
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	6978      	ldr	r0, [r7, #20]
 800cc80:	f000 f81b 	bl	800ccba <USBD_GetNextDesc>
 800cc84:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	785b      	ldrb	r3, [r3, #1]
 800cc8a:	2b05      	cmp	r3, #5
 800cc8c:	d108      	bne.n	800cca0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	789b      	ldrb	r3, [r3, #2]
 800cc96:	78fa      	ldrb	r2, [r7, #3]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d008      	beq.n	800ccae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	885b      	ldrh	r3, [r3, #2]
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	897b      	ldrh	r3, [r7, #10]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d8e5      	bhi.n	800cc78 <USBD_GetEpDesc+0x2e>
 800ccac:	e000      	b.n	800ccb0 <USBD_GetEpDesc+0x66>
          break;
 800ccae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ccb0:	693b      	ldr	r3, [r7, #16]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3718      	adds	r7, #24
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ccba:	b480      	push	{r7}
 800ccbc:	b085      	sub	sp, #20
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	881b      	ldrh	r3, [r3, #0]
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	7812      	ldrb	r2, [r2, #0]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	b29a      	uxth	r2, r3
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	4413      	add	r3, r2
 800cce2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cce4:	68fb      	ldr	r3, [r7, #12]
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3714      	adds	r7, #20
 800ccea:	46bd      	mov	sp, r7
 800ccec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf0:	4770      	bx	lr

0800ccf2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ccf2:	b480      	push	{r7}
 800ccf4:	b087      	sub	sp, #28
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	3301      	adds	r3, #1
 800cd08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cd10:	8a3b      	ldrh	r3, [r7, #16]
 800cd12:	021b      	lsls	r3, r3, #8
 800cd14:	b21a      	sxth	r2, r3
 800cd16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	b21b      	sxth	r3, r3
 800cd1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cd20:	89fb      	ldrh	r3, [r7, #14]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	371c      	adds	r7, #28
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
	...

0800cd30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd46:	2b40      	cmp	r3, #64	@ 0x40
 800cd48:	d005      	beq.n	800cd56 <USBD_StdDevReq+0x26>
 800cd4a:	2b40      	cmp	r3, #64	@ 0x40
 800cd4c:	d857      	bhi.n	800cdfe <USBD_StdDevReq+0xce>
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d00f      	beq.n	800cd72 <USBD_StdDevReq+0x42>
 800cd52:	2b20      	cmp	r3, #32
 800cd54:	d153      	bne.n	800cdfe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	32ae      	adds	r2, #174	@ 0xae
 800cd60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	6839      	ldr	r1, [r7, #0]
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	4798      	blx	r3
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	73fb      	strb	r3, [r7, #15]
      break;
 800cd70:	e04a      	b.n	800ce08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	785b      	ldrb	r3, [r3, #1]
 800cd76:	2b09      	cmp	r3, #9
 800cd78:	d83b      	bhi.n	800cdf2 <USBD_StdDevReq+0xc2>
 800cd7a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd80 <USBD_StdDevReq+0x50>)
 800cd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd80:	0800cdd5 	.word	0x0800cdd5
 800cd84:	0800cde9 	.word	0x0800cde9
 800cd88:	0800cdf3 	.word	0x0800cdf3
 800cd8c:	0800cddf 	.word	0x0800cddf
 800cd90:	0800cdf3 	.word	0x0800cdf3
 800cd94:	0800cdb3 	.word	0x0800cdb3
 800cd98:	0800cda9 	.word	0x0800cda9
 800cd9c:	0800cdf3 	.word	0x0800cdf3
 800cda0:	0800cdcb 	.word	0x0800cdcb
 800cda4:	0800cdbd 	.word	0x0800cdbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fa3c 	bl	800d228 <USBD_GetDescriptor>
          break;
 800cdb0:	e024      	b.n	800cdfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cdb2:	6839      	ldr	r1, [r7, #0]
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f000 fbcb 	bl	800d550 <USBD_SetAddress>
          break;
 800cdba:	e01f      	b.n	800cdfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cdbc:	6839      	ldr	r1, [r7, #0]
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fc0a 	bl	800d5d8 <USBD_SetConfig>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	73fb      	strb	r3, [r7, #15]
          break;
 800cdc8:	e018      	b.n	800cdfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fcad 	bl	800d72c <USBD_GetConfig>
          break;
 800cdd2:	e013      	b.n	800cdfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cdd4:	6839      	ldr	r1, [r7, #0]
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 fcde 	bl	800d798 <USBD_GetStatus>
          break;
 800cddc:	e00e      	b.n	800cdfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cdde:	6839      	ldr	r1, [r7, #0]
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 fd0d 	bl	800d800 <USBD_SetFeature>
          break;
 800cde6:	e009      	b.n	800cdfc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cde8:	6839      	ldr	r1, [r7, #0]
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 fd31 	bl	800d852 <USBD_ClrFeature>
          break;
 800cdf0:	e004      	b.n	800cdfc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cdf2:	6839      	ldr	r1, [r7, #0]
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 fd88 	bl	800d90a <USBD_CtlError>
          break;
 800cdfa:	bf00      	nop
      }
      break;
 800cdfc:	e004      	b.n	800ce08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cdfe:	6839      	ldr	r1, [r7, #0]
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 fd82 	bl	800d90a <USBD_CtlError>
      break;
 800ce06:	bf00      	nop
  }

  return ret;
 800ce08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}
 800ce12:	bf00      	nop

0800ce14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ce2a:	2b40      	cmp	r3, #64	@ 0x40
 800ce2c:	d005      	beq.n	800ce3a <USBD_StdItfReq+0x26>
 800ce2e:	2b40      	cmp	r3, #64	@ 0x40
 800ce30:	d852      	bhi.n	800ced8 <USBD_StdItfReq+0xc4>
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <USBD_StdItfReq+0x26>
 800ce36:	2b20      	cmp	r3, #32
 800ce38:	d14e      	bne.n	800ced8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	3b01      	subs	r3, #1
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	d840      	bhi.n	800ceca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	889b      	ldrh	r3, [r3, #4]
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d836      	bhi.n	800cec0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	889b      	ldrh	r3, [r3, #4]
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	4619      	mov	r1, r3
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7ff fedb 	bl	800cc16 <USBD_CoreFindIF>
 800ce60:	4603      	mov	r3, r0
 800ce62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce64:	7bbb      	ldrb	r3, [r7, #14]
 800ce66:	2bff      	cmp	r3, #255	@ 0xff
 800ce68:	d01d      	beq.n	800cea6 <USBD_StdItfReq+0x92>
 800ce6a:	7bbb      	ldrb	r3, [r7, #14]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d11a      	bne.n	800cea6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ce70:	7bba      	ldrb	r2, [r7, #14]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	32ae      	adds	r2, #174	@ 0xae
 800ce76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce7a:	689b      	ldr	r3, [r3, #8]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00f      	beq.n	800cea0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ce80:	7bba      	ldrb	r2, [r7, #14]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ce88:	7bba      	ldrb	r2, [r7, #14]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	32ae      	adds	r2, #174	@ 0xae
 800ce8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	4798      	blx	r3
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ce9e:	e004      	b.n	800ceaa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cea0:	2303      	movs	r3, #3
 800cea2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cea4:	e001      	b.n	800ceaa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cea6:	2303      	movs	r3, #3
 800cea8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	88db      	ldrh	r3, [r3, #6]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d110      	bne.n	800ced4 <USBD_StdItfReq+0xc0>
 800ceb2:	7bfb      	ldrb	r3, [r7, #15]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d10d      	bne.n	800ced4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 fdfd 	bl	800dab8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cebe:	e009      	b.n	800ced4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cec0:	6839      	ldr	r1, [r7, #0]
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 fd21 	bl	800d90a <USBD_CtlError>
          break;
 800cec8:	e004      	b.n	800ced4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ceca:	6839      	ldr	r1, [r7, #0]
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 fd1c 	bl	800d90a <USBD_CtlError>
          break;
 800ced2:	e000      	b.n	800ced6 <USBD_StdItfReq+0xc2>
          break;
 800ced4:	bf00      	nop
      }
      break;
 800ced6:	e004      	b.n	800cee2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ced8:	6839      	ldr	r1, [r7, #0]
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fd15 	bl	800d90a <USBD_CtlError>
      break;
 800cee0:	bf00      	nop
  }

  return ret;
 800cee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3710      	adds	r7, #16
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cef6:	2300      	movs	r3, #0
 800cef8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	889b      	ldrh	r3, [r3, #4]
 800cefe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf08:	2b40      	cmp	r3, #64	@ 0x40
 800cf0a:	d007      	beq.n	800cf1c <USBD_StdEPReq+0x30>
 800cf0c:	2b40      	cmp	r3, #64	@ 0x40
 800cf0e:	f200 817f 	bhi.w	800d210 <USBD_StdEPReq+0x324>
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d02a      	beq.n	800cf6c <USBD_StdEPReq+0x80>
 800cf16:	2b20      	cmp	r3, #32
 800cf18:	f040 817a 	bne.w	800d210 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cf1c:	7bbb      	ldrb	r3, [r7, #14]
 800cf1e:	4619      	mov	r1, r3
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f7ff fe85 	bl	800cc30 <USBD_CoreFindEP>
 800cf26:	4603      	mov	r3, r0
 800cf28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf2a:	7b7b      	ldrb	r3, [r7, #13]
 800cf2c:	2bff      	cmp	r3, #255	@ 0xff
 800cf2e:	f000 8174 	beq.w	800d21a <USBD_StdEPReq+0x32e>
 800cf32:	7b7b      	ldrb	r3, [r7, #13]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	f040 8170 	bne.w	800d21a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cf3a:	7b7a      	ldrb	r2, [r7, #13]
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cf42:	7b7a      	ldrb	r2, [r7, #13]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	32ae      	adds	r2, #174	@ 0xae
 800cf48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f000 8163 	beq.w	800d21a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cf54:	7b7a      	ldrb	r2, [r7, #13]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	32ae      	adds	r2, #174	@ 0xae
 800cf5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	6839      	ldr	r1, [r7, #0]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	4798      	blx	r3
 800cf66:	4603      	mov	r3, r0
 800cf68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cf6a:	e156      	b.n	800d21a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	785b      	ldrb	r3, [r3, #1]
 800cf70:	2b03      	cmp	r3, #3
 800cf72:	d008      	beq.n	800cf86 <USBD_StdEPReq+0x9a>
 800cf74:	2b03      	cmp	r3, #3
 800cf76:	f300 8145 	bgt.w	800d204 <USBD_StdEPReq+0x318>
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	f000 809b 	beq.w	800d0b6 <USBD_StdEPReq+0x1ca>
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d03c      	beq.n	800cffe <USBD_StdEPReq+0x112>
 800cf84:	e13e      	b.n	800d204 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	d002      	beq.n	800cf98 <USBD_StdEPReq+0xac>
 800cf92:	2b03      	cmp	r3, #3
 800cf94:	d016      	beq.n	800cfc4 <USBD_StdEPReq+0xd8>
 800cf96:	e02c      	b.n	800cff2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00d      	beq.n	800cfba <USBD_StdEPReq+0xce>
 800cf9e:	7bbb      	ldrb	r3, [r7, #14]
 800cfa0:	2b80      	cmp	r3, #128	@ 0x80
 800cfa2:	d00a      	beq.n	800cfba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cfa4:	7bbb      	ldrb	r3, [r7, #14]
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f001 f9e7 	bl	800e37c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfae:	2180      	movs	r1, #128	@ 0x80
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f001 f9e3 	bl	800e37c <USBD_LL_StallEP>
 800cfb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cfb8:	e020      	b.n	800cffc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cfba:	6839      	ldr	r1, [r7, #0]
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fca4 	bl	800d90a <USBD_CtlError>
              break;
 800cfc2:	e01b      	b.n	800cffc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	885b      	ldrh	r3, [r3, #2]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d10e      	bne.n	800cfea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cfcc:	7bbb      	ldrb	r3, [r7, #14]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00b      	beq.n	800cfea <USBD_StdEPReq+0xfe>
 800cfd2:	7bbb      	ldrb	r3, [r7, #14]
 800cfd4:	2b80      	cmp	r3, #128	@ 0x80
 800cfd6:	d008      	beq.n	800cfea <USBD_StdEPReq+0xfe>
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	88db      	ldrh	r3, [r3, #6]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d104      	bne.n	800cfea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cfe0:	7bbb      	ldrb	r3, [r7, #14]
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f001 f9c9 	bl	800e37c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 fd64 	bl	800dab8 <USBD_CtlSendStatus>

              break;
 800cff0:	e004      	b.n	800cffc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cff2:	6839      	ldr	r1, [r7, #0]
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f000 fc88 	bl	800d90a <USBD_CtlError>
              break;
 800cffa:	bf00      	nop
          }
          break;
 800cffc:	e107      	b.n	800d20e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d004:	b2db      	uxtb	r3, r3
 800d006:	2b02      	cmp	r3, #2
 800d008:	d002      	beq.n	800d010 <USBD_StdEPReq+0x124>
 800d00a:	2b03      	cmp	r3, #3
 800d00c:	d016      	beq.n	800d03c <USBD_StdEPReq+0x150>
 800d00e:	e04b      	b.n	800d0a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d010:	7bbb      	ldrb	r3, [r7, #14]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00d      	beq.n	800d032 <USBD_StdEPReq+0x146>
 800d016:	7bbb      	ldrb	r3, [r7, #14]
 800d018:	2b80      	cmp	r3, #128	@ 0x80
 800d01a:	d00a      	beq.n	800d032 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d01c:	7bbb      	ldrb	r3, [r7, #14]
 800d01e:	4619      	mov	r1, r3
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f001 f9ab 	bl	800e37c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d026:	2180      	movs	r1, #128	@ 0x80
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f001 f9a7 	bl	800e37c <USBD_LL_StallEP>
 800d02e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d030:	e040      	b.n	800d0b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fc68 	bl	800d90a <USBD_CtlError>
              break;
 800d03a:	e03b      	b.n	800d0b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	885b      	ldrh	r3, [r3, #2]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d136      	bne.n	800d0b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d044:	7bbb      	ldrb	r3, [r7, #14]
 800d046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d004      	beq.n	800d058 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d04e:	7bbb      	ldrb	r3, [r7, #14]
 800d050:	4619      	mov	r1, r3
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f001 f9b1 	bl	800e3ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 fd2d 	bl	800dab8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d05e:	7bbb      	ldrb	r3, [r7, #14]
 800d060:	4619      	mov	r1, r3
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7ff fde4 	bl	800cc30 <USBD_CoreFindEP>
 800d068:	4603      	mov	r3, r0
 800d06a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d06c:	7b7b      	ldrb	r3, [r7, #13]
 800d06e:	2bff      	cmp	r3, #255	@ 0xff
 800d070:	d01f      	beq.n	800d0b2 <USBD_StdEPReq+0x1c6>
 800d072:	7b7b      	ldrb	r3, [r7, #13]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d11c      	bne.n	800d0b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d078:	7b7a      	ldrb	r2, [r7, #13]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d080:	7b7a      	ldrb	r2, [r7, #13]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	32ae      	adds	r2, #174	@ 0xae
 800d086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d010      	beq.n	800d0b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d090:	7b7a      	ldrb	r2, [r7, #13]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	32ae      	adds	r2, #174	@ 0xae
 800d096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	6839      	ldr	r1, [r7, #0]
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	4798      	blx	r3
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d0a6:	e004      	b.n	800d0b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d0a8:	6839      	ldr	r1, [r7, #0]
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 fc2d 	bl	800d90a <USBD_CtlError>
              break;
 800d0b0:	e000      	b.n	800d0b4 <USBD_StdEPReq+0x1c8>
              break;
 800d0b2:	bf00      	nop
          }
          break;
 800d0b4:	e0ab      	b.n	800d20e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b02      	cmp	r3, #2
 800d0c0:	d002      	beq.n	800d0c8 <USBD_StdEPReq+0x1dc>
 800d0c2:	2b03      	cmp	r3, #3
 800d0c4:	d032      	beq.n	800d12c <USBD_StdEPReq+0x240>
 800d0c6:	e097      	b.n	800d1f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0c8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d007      	beq.n	800d0de <USBD_StdEPReq+0x1f2>
 800d0ce:	7bbb      	ldrb	r3, [r7, #14]
 800d0d0:	2b80      	cmp	r3, #128	@ 0x80
 800d0d2:	d004      	beq.n	800d0de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d0d4:	6839      	ldr	r1, [r7, #0]
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 fc17 	bl	800d90a <USBD_CtlError>
                break;
 800d0dc:	e091      	b.n	800d202 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	da0b      	bge.n	800d0fe <USBD_StdEPReq+0x212>
 800d0e6:	7bbb      	ldrb	r3, [r7, #14]
 800d0e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	3310      	adds	r3, #16
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	3304      	adds	r3, #4
 800d0fc:	e00b      	b.n	800d116 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d0fe:	7bbb      	ldrb	r3, [r7, #14]
 800d100:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d104:	4613      	mov	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	4413      	add	r3, r2
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	4413      	add	r3, r2
 800d114:	3304      	adds	r3, #4
 800d116:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	2200      	movs	r2, #0
 800d11c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	2202      	movs	r2, #2
 800d122:	4619      	mov	r1, r3
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 fc6d 	bl	800da04 <USBD_CtlSendData>
              break;
 800d12a:	e06a      	b.n	800d202 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d12c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d130:	2b00      	cmp	r3, #0
 800d132:	da11      	bge.n	800d158 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d134:	7bbb      	ldrb	r3, [r7, #14]
 800d136:	f003 020f 	and.w	r2, r3, #15
 800d13a:	6879      	ldr	r1, [r7, #4]
 800d13c:	4613      	mov	r3, r2
 800d13e:	009b      	lsls	r3, r3, #2
 800d140:	4413      	add	r3, r2
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	440b      	add	r3, r1
 800d146:	3324      	adds	r3, #36	@ 0x24
 800d148:	881b      	ldrh	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d117      	bne.n	800d17e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d14e:	6839      	ldr	r1, [r7, #0]
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 fbda 	bl	800d90a <USBD_CtlError>
                  break;
 800d156:	e054      	b.n	800d202 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d158:	7bbb      	ldrb	r3, [r7, #14]
 800d15a:	f003 020f 	and.w	r2, r3, #15
 800d15e:	6879      	ldr	r1, [r7, #4]
 800d160:	4613      	mov	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4413      	add	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	440b      	add	r3, r1
 800d16a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d16e:	881b      	ldrh	r3, [r3, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d104      	bne.n	800d17e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d174:	6839      	ldr	r1, [r7, #0]
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 fbc7 	bl	800d90a <USBD_CtlError>
                  break;
 800d17c:	e041      	b.n	800d202 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d17e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d182:	2b00      	cmp	r3, #0
 800d184:	da0b      	bge.n	800d19e <USBD_StdEPReq+0x2b2>
 800d186:	7bbb      	ldrb	r3, [r7, #14]
 800d188:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d18c:	4613      	mov	r3, r2
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	4413      	add	r3, r2
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	3310      	adds	r3, #16
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	4413      	add	r3, r2
 800d19a:	3304      	adds	r3, #4
 800d19c:	e00b      	b.n	800d1b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d19e:	7bbb      	ldrb	r3, [r7, #14]
 800d1a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d1b8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d002      	beq.n	800d1c4 <USBD_StdEPReq+0x2d8>
 800d1be:	7bbb      	ldrb	r3, [r7, #14]
 800d1c0:	2b80      	cmp	r3, #128	@ 0x80
 800d1c2:	d103      	bne.n	800d1cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	601a      	str	r2, [r3, #0]
 800d1ca:	e00e      	b.n	800d1ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d1cc:	7bbb      	ldrb	r3, [r7, #14]
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f001 f911 	bl	800e3f8 <USBD_LL_IsStallEP>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d003      	beq.n	800d1e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	601a      	str	r2, [r3, #0]
 800d1e2:	e002      	b.n	800d1ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	2202      	movs	r2, #2
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fc07 	bl	800da04 <USBD_CtlSendData>
              break;
 800d1f6:	e004      	b.n	800d202 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d1f8:	6839      	ldr	r1, [r7, #0]
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 fb85 	bl	800d90a <USBD_CtlError>
              break;
 800d200:	bf00      	nop
          }
          break;
 800d202:	e004      	b.n	800d20e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d204:	6839      	ldr	r1, [r7, #0]
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fb7f 	bl	800d90a <USBD_CtlError>
          break;
 800d20c:	bf00      	nop
      }
      break;
 800d20e:	e005      	b.n	800d21c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d210:	6839      	ldr	r1, [r7, #0]
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 fb79 	bl	800d90a <USBD_CtlError>
      break;
 800d218:	e000      	b.n	800d21c <USBD_StdEPReq+0x330>
      break;
 800d21a:	bf00      	nop
  }

  return ret;
 800d21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
	...

0800d228 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d232:	2300      	movs	r3, #0
 800d234:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d236:	2300      	movs	r3, #0
 800d238:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d23a:	2300      	movs	r3, #0
 800d23c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	885b      	ldrh	r3, [r3, #2]
 800d242:	0a1b      	lsrs	r3, r3, #8
 800d244:	b29b      	uxth	r3, r3
 800d246:	3b01      	subs	r3, #1
 800d248:	2b0e      	cmp	r3, #14
 800d24a:	f200 8152 	bhi.w	800d4f2 <USBD_GetDescriptor+0x2ca>
 800d24e:	a201      	add	r2, pc, #4	@ (adr r2, 800d254 <USBD_GetDescriptor+0x2c>)
 800d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d254:	0800d2c5 	.word	0x0800d2c5
 800d258:	0800d2dd 	.word	0x0800d2dd
 800d25c:	0800d31d 	.word	0x0800d31d
 800d260:	0800d4f3 	.word	0x0800d4f3
 800d264:	0800d4f3 	.word	0x0800d4f3
 800d268:	0800d493 	.word	0x0800d493
 800d26c:	0800d4bf 	.word	0x0800d4bf
 800d270:	0800d4f3 	.word	0x0800d4f3
 800d274:	0800d4f3 	.word	0x0800d4f3
 800d278:	0800d4f3 	.word	0x0800d4f3
 800d27c:	0800d4f3 	.word	0x0800d4f3
 800d280:	0800d4f3 	.word	0x0800d4f3
 800d284:	0800d4f3 	.word	0x0800d4f3
 800d288:	0800d4f3 	.word	0x0800d4f3
 800d28c:	0800d291 	.word	0x0800d291
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d296:	69db      	ldr	r3, [r3, #28]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00b      	beq.n	800d2b4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2a2:	69db      	ldr	r3, [r3, #28]
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	7c12      	ldrb	r2, [r2, #16]
 800d2a8:	f107 0108 	add.w	r1, r7, #8
 800d2ac:	4610      	mov	r0, r2
 800d2ae:	4798      	blx	r3
 800d2b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d2b2:	e126      	b.n	800d502 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d2b4:	6839      	ldr	r1, [r7, #0]
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 fb27 	bl	800d90a <USBD_CtlError>
        err++;
 800d2bc:	7afb      	ldrb	r3, [r7, #11]
 800d2be:	3301      	adds	r3, #1
 800d2c0:	72fb      	strb	r3, [r7, #11]
      break;
 800d2c2:	e11e      	b.n	800d502 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	7c12      	ldrb	r2, [r2, #16]
 800d2d0:	f107 0108 	add.w	r1, r7, #8
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	4798      	blx	r3
 800d2d8:	60f8      	str	r0, [r7, #12]
      break;
 800d2da:	e112      	b.n	800d502 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	7c1b      	ldrb	r3, [r3, #16]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d10d      	bne.n	800d300 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ec:	f107 0208 	add.w	r2, r7, #8
 800d2f0:	4610      	mov	r0, r2
 800d2f2:	4798      	blx	r3
 800d2f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	2202      	movs	r2, #2
 800d2fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d2fe:	e100      	b.n	800d502 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d308:	f107 0208 	add.w	r2, r7, #8
 800d30c:	4610      	mov	r0, r2
 800d30e:	4798      	blx	r3
 800d310:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	3301      	adds	r3, #1
 800d316:	2202      	movs	r2, #2
 800d318:	701a      	strb	r2, [r3, #0]
      break;
 800d31a:	e0f2      	b.n	800d502 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	885b      	ldrh	r3, [r3, #2]
 800d320:	b2db      	uxtb	r3, r3
 800d322:	2b05      	cmp	r3, #5
 800d324:	f200 80ac 	bhi.w	800d480 <USBD_GetDescriptor+0x258>
 800d328:	a201      	add	r2, pc, #4	@ (adr r2, 800d330 <USBD_GetDescriptor+0x108>)
 800d32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d32e:	bf00      	nop
 800d330:	0800d349 	.word	0x0800d349
 800d334:	0800d37d 	.word	0x0800d37d
 800d338:	0800d3b1 	.word	0x0800d3b1
 800d33c:	0800d3e5 	.word	0x0800d3e5
 800d340:	0800d419 	.word	0x0800d419
 800d344:	0800d44d 	.word	0x0800d44d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d00b      	beq.n	800d36c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	7c12      	ldrb	r2, [r2, #16]
 800d360:	f107 0108 	add.w	r1, r7, #8
 800d364:	4610      	mov	r0, r2
 800d366:	4798      	blx	r3
 800d368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d36a:	e091      	b.n	800d490 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d36c:	6839      	ldr	r1, [r7, #0]
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 facb 	bl	800d90a <USBD_CtlError>
            err++;
 800d374:	7afb      	ldrb	r3, [r7, #11]
 800d376:	3301      	adds	r3, #1
 800d378:	72fb      	strb	r3, [r7, #11]
          break;
 800d37a:	e089      	b.n	800d490 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d00b      	beq.n	800d3a0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	7c12      	ldrb	r2, [r2, #16]
 800d394:	f107 0108 	add.w	r1, r7, #8
 800d398:	4610      	mov	r0, r2
 800d39a:	4798      	blx	r3
 800d39c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d39e:	e077      	b.n	800d490 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3a0:	6839      	ldr	r1, [r7, #0]
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 fab1 	bl	800d90a <USBD_CtlError>
            err++;
 800d3a8:	7afb      	ldrb	r3, [r7, #11]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	72fb      	strb	r3, [r7, #11]
          break;
 800d3ae:	e06f      	b.n	800d490 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00b      	beq.n	800d3d4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	7c12      	ldrb	r2, [r2, #16]
 800d3c8:	f107 0108 	add.w	r1, r7, #8
 800d3cc:	4610      	mov	r0, r2
 800d3ce:	4798      	blx	r3
 800d3d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3d2:	e05d      	b.n	800d490 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3d4:	6839      	ldr	r1, [r7, #0]
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 fa97 	bl	800d90a <USBD_CtlError>
            err++;
 800d3dc:	7afb      	ldrb	r3, [r7, #11]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	72fb      	strb	r3, [r7, #11]
          break;
 800d3e2:	e055      	b.n	800d490 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00b      	beq.n	800d408 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	7c12      	ldrb	r2, [r2, #16]
 800d3fc:	f107 0108 	add.w	r1, r7, #8
 800d400:	4610      	mov	r0, r2
 800d402:	4798      	blx	r3
 800d404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d406:	e043      	b.n	800d490 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d408:	6839      	ldr	r1, [r7, #0]
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 fa7d 	bl	800d90a <USBD_CtlError>
            err++;
 800d410:	7afb      	ldrb	r3, [r7, #11]
 800d412:	3301      	adds	r3, #1
 800d414:	72fb      	strb	r3, [r7, #11]
          break;
 800d416:	e03b      	b.n	800d490 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d41e:	695b      	ldr	r3, [r3, #20]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00b      	beq.n	800d43c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d42a:	695b      	ldr	r3, [r3, #20]
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	7c12      	ldrb	r2, [r2, #16]
 800d430:	f107 0108 	add.w	r1, r7, #8
 800d434:	4610      	mov	r0, r2
 800d436:	4798      	blx	r3
 800d438:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d43a:	e029      	b.n	800d490 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d43c:	6839      	ldr	r1, [r7, #0]
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 fa63 	bl	800d90a <USBD_CtlError>
            err++;
 800d444:	7afb      	ldrb	r3, [r7, #11]
 800d446:	3301      	adds	r3, #1
 800d448:	72fb      	strb	r3, [r7, #11]
          break;
 800d44a:	e021      	b.n	800d490 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d452:	699b      	ldr	r3, [r3, #24]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00b      	beq.n	800d470 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d45e:	699b      	ldr	r3, [r3, #24]
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	7c12      	ldrb	r2, [r2, #16]
 800d464:	f107 0108 	add.w	r1, r7, #8
 800d468:	4610      	mov	r0, r2
 800d46a:	4798      	blx	r3
 800d46c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d46e:	e00f      	b.n	800d490 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d470:	6839      	ldr	r1, [r7, #0]
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 fa49 	bl	800d90a <USBD_CtlError>
            err++;
 800d478:	7afb      	ldrb	r3, [r7, #11]
 800d47a:	3301      	adds	r3, #1
 800d47c:	72fb      	strb	r3, [r7, #11]
          break;
 800d47e:	e007      	b.n	800d490 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d480:	6839      	ldr	r1, [r7, #0]
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 fa41 	bl	800d90a <USBD_CtlError>
          err++;
 800d488:	7afb      	ldrb	r3, [r7, #11]
 800d48a:	3301      	adds	r3, #1
 800d48c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d48e:	bf00      	nop
      }
      break;
 800d490:	e037      	b.n	800d502 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	7c1b      	ldrb	r3, [r3, #16]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d109      	bne.n	800d4ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4a2:	f107 0208 	add.w	r2, r7, #8
 800d4a6:	4610      	mov	r0, r2
 800d4a8:	4798      	blx	r3
 800d4aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4ac:	e029      	b.n	800d502 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d4ae:	6839      	ldr	r1, [r7, #0]
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fa2a 	bl	800d90a <USBD_CtlError>
        err++;
 800d4b6:	7afb      	ldrb	r3, [r7, #11]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	72fb      	strb	r3, [r7, #11]
      break;
 800d4bc:	e021      	b.n	800d502 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	7c1b      	ldrb	r3, [r3, #16]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10d      	bne.n	800d4e2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4ce:	f107 0208 	add.w	r2, r7, #8
 800d4d2:	4610      	mov	r0, r2
 800d4d4:	4798      	blx	r3
 800d4d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	2207      	movs	r2, #7
 800d4de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4e0:	e00f      	b.n	800d502 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 fa10 	bl	800d90a <USBD_CtlError>
        err++;
 800d4ea:	7afb      	ldrb	r3, [r7, #11]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	72fb      	strb	r3, [r7, #11]
      break;
 800d4f0:	e007      	b.n	800d502 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d4f2:	6839      	ldr	r1, [r7, #0]
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 fa08 	bl	800d90a <USBD_CtlError>
      err++;
 800d4fa:	7afb      	ldrb	r3, [r7, #11]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	72fb      	strb	r3, [r7, #11]
      break;
 800d500:	bf00      	nop
  }

  if (err != 0U)
 800d502:	7afb      	ldrb	r3, [r7, #11]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d11e      	bne.n	800d546 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	88db      	ldrh	r3, [r3, #6]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d016      	beq.n	800d53e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d510:	893b      	ldrh	r3, [r7, #8]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d00e      	beq.n	800d534 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	88da      	ldrh	r2, [r3, #6]
 800d51a:	893b      	ldrh	r3, [r7, #8]
 800d51c:	4293      	cmp	r3, r2
 800d51e:	bf28      	it	cs
 800d520:	4613      	movcs	r3, r2
 800d522:	b29b      	uxth	r3, r3
 800d524:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d526:	893b      	ldrh	r3, [r7, #8]
 800d528:	461a      	mov	r2, r3
 800d52a:	68f9      	ldr	r1, [r7, #12]
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 fa69 	bl	800da04 <USBD_CtlSendData>
 800d532:	e009      	b.n	800d548 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d534:	6839      	ldr	r1, [r7, #0]
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 f9e7 	bl	800d90a <USBD_CtlError>
 800d53c:	e004      	b.n	800d548 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 faba 	bl	800dab8 <USBD_CtlSendStatus>
 800d544:	e000      	b.n	800d548 <USBD_GetDescriptor+0x320>
    return;
 800d546:	bf00      	nop
  }
}
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
 800d54e:	bf00      	nop

0800d550 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b084      	sub	sp, #16
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	889b      	ldrh	r3, [r3, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d131      	bne.n	800d5c6 <USBD_SetAddress+0x76>
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	88db      	ldrh	r3, [r3, #6]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d12d      	bne.n	800d5c6 <USBD_SetAddress+0x76>
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	885b      	ldrh	r3, [r3, #2]
 800d56e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d570:	d829      	bhi.n	800d5c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	885b      	ldrh	r3, [r3, #2]
 800d576:	b2db      	uxtb	r3, r3
 800d578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d57c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d584:	b2db      	uxtb	r3, r3
 800d586:	2b03      	cmp	r3, #3
 800d588:	d104      	bne.n	800d594 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d58a:	6839      	ldr	r1, [r7, #0]
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 f9bc 	bl	800d90a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d592:	e01d      	b.n	800d5d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	7bfa      	ldrb	r2, [r7, #15]
 800d598:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d59c:	7bfb      	ldrb	r3, [r7, #15]
 800d59e:	4619      	mov	r1, r3
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 ff55 	bl	800e450 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 fa86 	bl	800dab8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d5ac:	7bfb      	ldrb	r3, [r7, #15]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d004      	beq.n	800d5bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2202      	movs	r2, #2
 800d5b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5ba:	e009      	b.n	800d5d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5c4:	e004      	b.n	800d5d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f99e 	bl	800d90a <USBD_CtlError>
  }
}
 800d5ce:	bf00      	nop
 800d5d0:	bf00      	nop
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	885b      	ldrh	r3, [r3, #2]
 800d5ea:	b2da      	uxtb	r2, r3
 800d5ec:	4b4e      	ldr	r3, [pc, #312]	@ (800d728 <USBD_SetConfig+0x150>)
 800d5ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d5f0:	4b4d      	ldr	r3, [pc, #308]	@ (800d728 <USBD_SetConfig+0x150>)
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d905      	bls.n	800d604 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d5f8:	6839      	ldr	r1, [r7, #0]
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 f985 	bl	800d90a <USBD_CtlError>
    return USBD_FAIL;
 800d600:	2303      	movs	r3, #3
 800d602:	e08c      	b.n	800d71e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d002      	beq.n	800d616 <USBD_SetConfig+0x3e>
 800d610:	2b03      	cmp	r3, #3
 800d612:	d029      	beq.n	800d668 <USBD_SetConfig+0x90>
 800d614:	e075      	b.n	800d702 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d616:	4b44      	ldr	r3, [pc, #272]	@ (800d728 <USBD_SetConfig+0x150>)
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d020      	beq.n	800d660 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d61e:	4b42      	ldr	r3, [pc, #264]	@ (800d728 <USBD_SetConfig+0x150>)
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	461a      	mov	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d628:	4b3f      	ldr	r3, [pc, #252]	@ (800d728 <USBD_SetConfig+0x150>)
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	4619      	mov	r1, r3
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7fe ffb9 	bl	800c5a6 <USBD_SetClassConfig>
 800d634:	4603      	mov	r3, r0
 800d636:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d638:	7bfb      	ldrb	r3, [r7, #15]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d008      	beq.n	800d650 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d63e:	6839      	ldr	r1, [r7, #0]
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 f962 	bl	800d90a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2202      	movs	r2, #2
 800d64a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d64e:	e065      	b.n	800d71c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fa31 	bl	800dab8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2203      	movs	r2, #3
 800d65a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d65e:	e05d      	b.n	800d71c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 fa29 	bl	800dab8 <USBD_CtlSendStatus>
      break;
 800d666:	e059      	b.n	800d71c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d668:	4b2f      	ldr	r3, [pc, #188]	@ (800d728 <USBD_SetConfig+0x150>)
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d112      	bne.n	800d696 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2202      	movs	r2, #2
 800d674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d678:	4b2b      	ldr	r3, [pc, #172]	@ (800d728 <USBD_SetConfig+0x150>)
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	461a      	mov	r2, r3
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d682:	4b29      	ldr	r3, [pc, #164]	@ (800d728 <USBD_SetConfig+0x150>)
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	4619      	mov	r1, r3
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f7fe ffa8 	bl	800c5de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 fa12 	bl	800dab8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d694:	e042      	b.n	800d71c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d696:	4b24      	ldr	r3, [pc, #144]	@ (800d728 <USBD_SetConfig+0x150>)
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	461a      	mov	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	685b      	ldr	r3, [r3, #4]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d02a      	beq.n	800d6fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f7fe ff96 	bl	800c5de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d6b2:	4b1d      	ldr	r3, [pc, #116]	@ (800d728 <USBD_SetConfig+0x150>)
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d6bc:	4b1a      	ldr	r3, [pc, #104]	@ (800d728 <USBD_SetConfig+0x150>)
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f7fe ff6f 	bl	800c5a6 <USBD_SetClassConfig>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d6cc:	7bfb      	ldrb	r3, [r7, #15]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00f      	beq.n	800d6f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d6d2:	6839      	ldr	r1, [r7, #0]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 f918 	bl	800d90a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f7fe ff7b 	bl	800c5de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2202      	movs	r2, #2
 800d6ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d6f0:	e014      	b.n	800d71c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 f9e0 	bl	800dab8 <USBD_CtlSendStatus>
      break;
 800d6f8:	e010      	b.n	800d71c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f9dc 	bl	800dab8 <USBD_CtlSendStatus>
      break;
 800d700:	e00c      	b.n	800d71c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d702:	6839      	ldr	r1, [r7, #0]
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 f900 	bl	800d90a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d70a:	4b07      	ldr	r3, [pc, #28]	@ (800d728 <USBD_SetConfig+0x150>)
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	4619      	mov	r1, r3
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7fe ff64 	bl	800c5de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d716:	2303      	movs	r3, #3
 800d718:	73fb      	strb	r3, [r7, #15]
      break;
 800d71a:	bf00      	nop
  }

  return ret;
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
 800d726:	bf00      	nop
 800d728:	2006ea88 	.word	0x2006ea88

0800d72c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	88db      	ldrh	r3, [r3, #6]
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d004      	beq.n	800d748 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d73e:	6839      	ldr	r1, [r7, #0]
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 f8e2 	bl	800d90a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d746:	e023      	b.n	800d790 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	2b02      	cmp	r3, #2
 800d752:	dc02      	bgt.n	800d75a <USBD_GetConfig+0x2e>
 800d754:	2b00      	cmp	r3, #0
 800d756:	dc03      	bgt.n	800d760 <USBD_GetConfig+0x34>
 800d758:	e015      	b.n	800d786 <USBD_GetConfig+0x5a>
 800d75a:	2b03      	cmp	r3, #3
 800d75c:	d00b      	beq.n	800d776 <USBD_GetConfig+0x4a>
 800d75e:	e012      	b.n	800d786 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	3308      	adds	r3, #8
 800d76a:	2201      	movs	r2, #1
 800d76c:	4619      	mov	r1, r3
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 f948 	bl	800da04 <USBD_CtlSendData>
        break;
 800d774:	e00c      	b.n	800d790 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	3304      	adds	r3, #4
 800d77a:	2201      	movs	r2, #1
 800d77c:	4619      	mov	r1, r3
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 f940 	bl	800da04 <USBD_CtlSendData>
        break;
 800d784:	e004      	b.n	800d790 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d786:	6839      	ldr	r1, [r7, #0]
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 f8be 	bl	800d90a <USBD_CtlError>
        break;
 800d78e:	bf00      	nop
}
 800d790:	bf00      	nop
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	3b01      	subs	r3, #1
 800d7ac:	2b02      	cmp	r3, #2
 800d7ae:	d81e      	bhi.n	800d7ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	88db      	ldrh	r3, [r3, #6]
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	d004      	beq.n	800d7c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d7b8:	6839      	ldr	r1, [r7, #0]
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f8a5 	bl	800d90a <USBD_CtlError>
        break;
 800d7c0:	e01a      	b.n	800d7f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d005      	beq.n	800d7de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	f043 0202 	orr.w	r2, r3, #2
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	330c      	adds	r3, #12
 800d7e2:	2202      	movs	r2, #2
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f90c 	bl	800da04 <USBD_CtlSendData>
      break;
 800d7ec:	e004      	b.n	800d7f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d7ee:	6839      	ldr	r1, [r7, #0]
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 f88a 	bl	800d90a <USBD_CtlError>
      break;
 800d7f6:	bf00      	nop
  }
}
 800d7f8:	bf00      	nop
 800d7fa:	3708      	adds	r7, #8
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	885b      	ldrh	r3, [r3, #2]
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d107      	bne.n	800d822 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2201      	movs	r2, #1
 800d816:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 f94c 	bl	800dab8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d820:	e013      	b.n	800d84a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	885b      	ldrh	r3, [r3, #2]
 800d826:	2b02      	cmp	r3, #2
 800d828:	d10b      	bne.n	800d842 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	889b      	ldrh	r3, [r3, #4]
 800d82e:	0a1b      	lsrs	r3, r3, #8
 800d830:	b29b      	uxth	r3, r3
 800d832:	b2da      	uxtb	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 f93c 	bl	800dab8 <USBD_CtlSendStatus>
}
 800d840:	e003      	b.n	800d84a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d842:	6839      	ldr	r1, [r7, #0]
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 f860 	bl	800d90a <USBD_CtlError>
}
 800d84a:	bf00      	nop
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}

0800d852 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d852:	b580      	push	{r7, lr}
 800d854:	b082      	sub	sp, #8
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
 800d85a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d862:	b2db      	uxtb	r3, r3
 800d864:	3b01      	subs	r3, #1
 800d866:	2b02      	cmp	r3, #2
 800d868:	d80b      	bhi.n	800d882 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	885b      	ldrh	r3, [r3, #2]
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d10c      	bne.n	800d88c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f91c 	bl	800dab8 <USBD_CtlSendStatus>
      }
      break;
 800d880:	e004      	b.n	800d88c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d882:	6839      	ldr	r1, [r7, #0]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 f840 	bl	800d90a <USBD_CtlError>
      break;
 800d88a:	e000      	b.n	800d88e <USBD_ClrFeature+0x3c>
      break;
 800d88c:	bf00      	nop
  }
}
 800d88e:	bf00      	nop
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}

0800d896 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b084      	sub	sp, #16
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
 800d89e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	781a      	ldrb	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	781a      	ldrb	r2, [r3, #0]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d8c0:	68f8      	ldr	r0, [r7, #12]
 800d8c2:	f7ff fa16 	bl	800ccf2 <SWAPBYTE>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	f7ff fa09 	bl	800ccf2 <SWAPBYTE>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	f7ff f9fc 	bl	800ccf2 <SWAPBYTE>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	461a      	mov	r2, r3
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	80da      	strh	r2, [r3, #6]
}
 800d902:	bf00      	nop
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b082      	sub	sp, #8
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d914:	2180      	movs	r1, #128	@ 0x80
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f000 fd30 	bl	800e37c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d91c:	2100      	movs	r1, #0
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 fd2c 	bl	800e37c <USBD_LL_StallEP>
}
 800d924:	bf00      	nop
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d938:	2300      	movs	r3, #0
 800d93a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d042      	beq.n	800d9c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d946:	6938      	ldr	r0, [r7, #16]
 800d948:	f000 f842 	bl	800d9d0 <USBD_GetLen>
 800d94c:	4603      	mov	r3, r0
 800d94e:	3301      	adds	r3, #1
 800d950:	005b      	lsls	r3, r3, #1
 800d952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d956:	d808      	bhi.n	800d96a <USBD_GetString+0x3e>
 800d958:	6938      	ldr	r0, [r7, #16]
 800d95a:	f000 f839 	bl	800d9d0 <USBD_GetLen>
 800d95e:	4603      	mov	r3, r0
 800d960:	3301      	adds	r3, #1
 800d962:	b29b      	uxth	r3, r3
 800d964:	005b      	lsls	r3, r3, #1
 800d966:	b29a      	uxth	r2, r3
 800d968:	e001      	b.n	800d96e <USBD_GetString+0x42>
 800d96a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d972:	7dfb      	ldrb	r3, [r7, #23]
 800d974:	68ba      	ldr	r2, [r7, #8]
 800d976:	4413      	add	r3, r2
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	7812      	ldrb	r2, [r2, #0]
 800d97c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d97e:	7dfb      	ldrb	r3, [r7, #23]
 800d980:	3301      	adds	r3, #1
 800d982:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d984:	7dfb      	ldrb	r3, [r7, #23]
 800d986:	68ba      	ldr	r2, [r7, #8]
 800d988:	4413      	add	r3, r2
 800d98a:	2203      	movs	r2, #3
 800d98c:	701a      	strb	r2, [r3, #0]
  idx++;
 800d98e:	7dfb      	ldrb	r3, [r7, #23]
 800d990:	3301      	adds	r3, #1
 800d992:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d994:	e013      	b.n	800d9be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d996:	7dfb      	ldrb	r3, [r7, #23]
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	4413      	add	r3, r2
 800d99c:	693a      	ldr	r2, [r7, #16]
 800d99e:	7812      	ldrb	r2, [r2, #0]
 800d9a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	613b      	str	r3, [r7, #16]
    idx++;
 800d9a8:	7dfb      	ldrb	r3, [r7, #23]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d9ae:	7dfb      	ldrb	r3, [r7, #23]
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	701a      	strb	r2, [r3, #0]
    idx++;
 800d9b8:	7dfb      	ldrb	r3, [r7, #23]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d1e7      	bne.n	800d996 <USBD_GetString+0x6a>
 800d9c6:	e000      	b.n	800d9ca <USBD_GetString+0x9e>
    return;
 800d9c8:	bf00      	nop
  }
}
 800d9ca:	3718      	adds	r7, #24
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d9e0:	e005      	b.n	800d9ee <USBD_GetLen+0x1e>
  {
    len++;
 800d9e2:	7bfb      	ldrb	r3, [r7, #15]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	3301      	adds	r3, #1
 800d9ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	781b      	ldrb	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1f5      	bne.n	800d9e2 <USBD_GetLen+0x12>
  }

  return len;
 800d9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3714      	adds	r7, #20
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b084      	sub	sp, #16
 800da08:	af00      	add	r7, sp, #0
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2202      	movs	r2, #2
 800da14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	2100      	movs	r1, #0
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f000 fd2f 	bl	800e48e <USBD_LL_Transmit>

  return USBD_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}

0800da3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b084      	sub	sp, #16
 800da3e:	af00      	add	r7, sp, #0
 800da40:	60f8      	str	r0, [r7, #12]
 800da42:	60b9      	str	r1, [r7, #8]
 800da44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	2100      	movs	r1, #0
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	f000 fd1e 	bl	800e48e <USBD_LL_Transmit>

  return USBD_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2203      	movs	r2, #3
 800da6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	68ba      	ldr	r2, [r7, #8]
 800da84:	2100      	movs	r1, #0
 800da86:	68f8      	ldr	r0, [r7, #12]
 800da88:	f000 fd22 	bl	800e4d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3710      	adds	r7, #16
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b084      	sub	sp, #16
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	60f8      	str	r0, [r7, #12]
 800da9e:	60b9      	str	r1, [r7, #8]
 800daa0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	2100      	movs	r1, #0
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f000 fd11 	bl	800e4d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2204      	movs	r2, #4
 800dac4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dac8:	2300      	movs	r3, #0
 800daca:	2200      	movs	r2, #0
 800dacc:	2100      	movs	r1, #0
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fcdd 	bl	800e48e <USBD_LL_Transmit>

  return USBD_OK;
 800dad4:	2300      	movs	r3, #0
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}

0800dade <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dade:	b580      	push	{r7, lr}
 800dae0:	b082      	sub	sp, #8
 800dae2:	af00      	add	r7, sp, #0
 800dae4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2205      	movs	r2, #5
 800daea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800daee:	2300      	movs	r3, #0
 800daf0:	2200      	movs	r2, #0
 800daf2:	2100      	movs	r1, #0
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 fceb 	bl	800e4d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db08:	2200      	movs	r2, #0
 800db0a:	4912      	ldr	r1, [pc, #72]	@ (800db54 <MX_USB_DEVICE_Init+0x50>)
 800db0c:	4812      	ldr	r0, [pc, #72]	@ (800db58 <MX_USB_DEVICE_Init+0x54>)
 800db0e:	f7fe fccd 	bl	800c4ac <USBD_Init>
 800db12:	4603      	mov	r3, r0
 800db14:	2b00      	cmp	r3, #0
 800db16:	d001      	beq.n	800db1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db18:	f7f5 f902 	bl	8002d20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800db1c:	490f      	ldr	r1, [pc, #60]	@ (800db5c <MX_USB_DEVICE_Init+0x58>)
 800db1e:	480e      	ldr	r0, [pc, #56]	@ (800db58 <MX_USB_DEVICE_Init+0x54>)
 800db20:	f7fe fcf4 	bl	800c50c <USBD_RegisterClass>
 800db24:	4603      	mov	r3, r0
 800db26:	2b00      	cmp	r3, #0
 800db28:	d001      	beq.n	800db2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db2a:	f7f5 f8f9 	bl	8002d20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800db2e:	490c      	ldr	r1, [pc, #48]	@ (800db60 <MX_USB_DEVICE_Init+0x5c>)
 800db30:	4809      	ldr	r0, [pc, #36]	@ (800db58 <MX_USB_DEVICE_Init+0x54>)
 800db32:	f7fe fbeb 	bl	800c30c <USBD_CDC_RegisterInterface>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d001      	beq.n	800db40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db3c:	f7f5 f8f0 	bl	8002d20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db40:	4805      	ldr	r0, [pc, #20]	@ (800db58 <MX_USB_DEVICE_Init+0x54>)
 800db42:	f7fe fd19 	bl	800c578 <USBD_Start>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d001      	beq.n	800db50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800db4c:	f7f5 f8e8 	bl	8002d20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db50:	bf00      	nop
 800db52:	bd80      	pop	{r7, pc}
 800db54:	200000b8 	.word	0x200000b8
 800db58:	2006ea8c 	.word	0x2006ea8c
 800db5c:	20000024 	.word	0x20000024
 800db60:	200000a4 	.word	0x200000a4

0800db64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db68:	2200      	movs	r2, #0
 800db6a:	4905      	ldr	r1, [pc, #20]	@ (800db80 <CDC_Init_FS+0x1c>)
 800db6c:	4805      	ldr	r0, [pc, #20]	@ (800db84 <CDC_Init_FS+0x20>)
 800db6e:	f7fe fbe7 	bl	800c340 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db72:	4905      	ldr	r1, [pc, #20]	@ (800db88 <CDC_Init_FS+0x24>)
 800db74:	4803      	ldr	r0, [pc, #12]	@ (800db84 <CDC_Init_FS+0x20>)
 800db76:	f7fe fc05 	bl	800c384 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800db7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	2006f568 	.word	0x2006f568
 800db84:	2006ea8c 	.word	0x2006ea8c
 800db88:	2006ed68 	.word	0x2006ed68

0800db8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800db8c:	b480      	push	{r7}
 800db8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800db90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800db92:	4618      	mov	r0, r3
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	4603      	mov	r3, r0
 800dba4:	6039      	str	r1, [r7, #0]
 800dba6:	71fb      	strb	r3, [r7, #7]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dbac:	79fb      	ldrb	r3, [r7, #7]
 800dbae:	2b23      	cmp	r3, #35	@ 0x23
 800dbb0:	d84a      	bhi.n	800dc48 <CDC_Control_FS+0xac>
 800dbb2:	a201      	add	r2, pc, #4	@ (adr r2, 800dbb8 <CDC_Control_FS+0x1c>)
 800dbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb8:	0800dc49 	.word	0x0800dc49
 800dbbc:	0800dc49 	.word	0x0800dc49
 800dbc0:	0800dc49 	.word	0x0800dc49
 800dbc4:	0800dc49 	.word	0x0800dc49
 800dbc8:	0800dc49 	.word	0x0800dc49
 800dbcc:	0800dc49 	.word	0x0800dc49
 800dbd0:	0800dc49 	.word	0x0800dc49
 800dbd4:	0800dc49 	.word	0x0800dc49
 800dbd8:	0800dc49 	.word	0x0800dc49
 800dbdc:	0800dc49 	.word	0x0800dc49
 800dbe0:	0800dc49 	.word	0x0800dc49
 800dbe4:	0800dc49 	.word	0x0800dc49
 800dbe8:	0800dc49 	.word	0x0800dc49
 800dbec:	0800dc49 	.word	0x0800dc49
 800dbf0:	0800dc49 	.word	0x0800dc49
 800dbf4:	0800dc49 	.word	0x0800dc49
 800dbf8:	0800dc49 	.word	0x0800dc49
 800dbfc:	0800dc49 	.word	0x0800dc49
 800dc00:	0800dc49 	.word	0x0800dc49
 800dc04:	0800dc49 	.word	0x0800dc49
 800dc08:	0800dc49 	.word	0x0800dc49
 800dc0c:	0800dc49 	.word	0x0800dc49
 800dc10:	0800dc49 	.word	0x0800dc49
 800dc14:	0800dc49 	.word	0x0800dc49
 800dc18:	0800dc49 	.word	0x0800dc49
 800dc1c:	0800dc49 	.word	0x0800dc49
 800dc20:	0800dc49 	.word	0x0800dc49
 800dc24:	0800dc49 	.word	0x0800dc49
 800dc28:	0800dc49 	.word	0x0800dc49
 800dc2c:	0800dc49 	.word	0x0800dc49
 800dc30:	0800dc49 	.word	0x0800dc49
 800dc34:	0800dc49 	.word	0x0800dc49
 800dc38:	0800dc49 	.word	0x0800dc49
 800dc3c:	0800dc49 	.word	0x0800dc49
 800dc40:	0800dc49 	.word	0x0800dc49
 800dc44:	0800dc49 	.word	0x0800dc49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc48:	bf00      	nop
  }

  return (USBD_OK);
 800dc4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	370c      	adds	r7, #12
 800dc50:	46bd      	mov	sp, r7
 800dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc56:	4770      	bx	lr

0800dc58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b082      	sub	sp, #8
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
 CDC_Receive_FS_App(Buf, Len); // <----  ADD THIS LINE HERE!  Call your callback function
 800dc62:	6839      	ldr	r1, [r7, #0]
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7f5 fe97 	bl	8003998 <CDC_Receive_FS_App>
 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dc6a:	6879      	ldr	r1, [r7, #4]
 800dc6c:	4805      	ldr	r0, [pc, #20]	@ (800dc84 <CDC_Receive_FS+0x2c>)
 800dc6e:	f7fe fb89 	bl	800c384 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dc72:	4804      	ldr	r0, [pc, #16]	@ (800dc84 <CDC_Receive_FS+0x2c>)
 800dc74:	f7fe fbe4 	bl	800c440 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dc78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	2006ea8c 	.word	0x2006ea8c

0800dc88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	460b      	mov	r3, r1
 800dc92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dc94:	2300      	movs	r3, #0
 800dc96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dc98:	4b0d      	ldr	r3, [pc, #52]	@ (800dcd0 <CDC_Transmit_FS+0x48>)
 800dc9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dc9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d001      	beq.n	800dcae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	e00b      	b.n	800dcc6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dcae:	887b      	ldrh	r3, [r7, #2]
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	6879      	ldr	r1, [r7, #4]
 800dcb4:	4806      	ldr	r0, [pc, #24]	@ (800dcd0 <CDC_Transmit_FS+0x48>)
 800dcb6:	f7fe fb43 	bl	800c340 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dcba:	4805      	ldr	r0, [pc, #20]	@ (800dcd0 <CDC_Transmit_FS+0x48>)
 800dcbc:	f7fe fb80 	bl	800c3c0 <USBD_CDC_TransmitPacket>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dcc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	2006ea8c 	.word	0x2006ea8c

0800dcd4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b087      	sub	sp, #28
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	4613      	mov	r3, r2
 800dce0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	371c      	adds	r7, #28
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
	...

0800dcf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	4603      	mov	r3, r0
 800dd00:	6039      	str	r1, [r7, #0]
 800dd02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	2212      	movs	r2, #18
 800dd08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dd0a:	4b03      	ldr	r3, [pc, #12]	@ (800dd18 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	200000d8 	.word	0x200000d8

0800dd1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	6039      	str	r1, [r7, #0]
 800dd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	2204      	movs	r2, #4
 800dd2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd2e:	4b03      	ldr	r3, [pc, #12]	@ (800dd3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr
 800dd3c:	200000f8 	.word	0x200000f8

0800dd40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	4603      	mov	r3, r0
 800dd48:	6039      	str	r1, [r7, #0]
 800dd4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd4c:	79fb      	ldrb	r3, [r7, #7]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d105      	bne.n	800dd5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd52:	683a      	ldr	r2, [r7, #0]
 800dd54:	4907      	ldr	r1, [pc, #28]	@ (800dd74 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd56:	4808      	ldr	r0, [pc, #32]	@ (800dd78 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd58:	f7ff fde8 	bl	800d92c <USBD_GetString>
 800dd5c:	e004      	b.n	800dd68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd5e:	683a      	ldr	r2, [r7, #0]
 800dd60:	4904      	ldr	r1, [pc, #16]	@ (800dd74 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd62:	4805      	ldr	r0, [pc, #20]	@ (800dd78 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd64:	f7ff fde2 	bl	800d92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd68:	4b02      	ldr	r3, [pc, #8]	@ (800dd74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	2006fd68 	.word	0x2006fd68
 800dd78:	0800ebf0 	.word	0x0800ebf0

0800dd7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	4603      	mov	r3, r0
 800dd84:	6039      	str	r1, [r7, #0]
 800dd86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd88:	683a      	ldr	r2, [r7, #0]
 800dd8a:	4904      	ldr	r1, [pc, #16]	@ (800dd9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dd8c:	4804      	ldr	r0, [pc, #16]	@ (800dda0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dd8e:	f7ff fdcd 	bl	800d92c <USBD_GetString>
  return USBD_StrDesc;
 800dd92:	4b02      	ldr	r3, [pc, #8]	@ (800dd9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	2006fd68 	.word	0x2006fd68
 800dda0:	0800ec08 	.word	0x0800ec08

0800dda4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	6039      	str	r1, [r7, #0]
 800ddae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	221a      	movs	r2, #26
 800ddb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ddb6:	f000 f855 	bl	800de64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ddba:	4b02      	ldr	r3, [pc, #8]	@ (800ddc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	200000fc 	.word	0x200000fc

0800ddc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	6039      	str	r1, [r7, #0]
 800ddd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddd4:	79fb      	ldrb	r3, [r7, #7]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d105      	bne.n	800dde6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddda:	683a      	ldr	r2, [r7, #0]
 800dddc:	4907      	ldr	r1, [pc, #28]	@ (800ddfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddde:	4808      	ldr	r0, [pc, #32]	@ (800de00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dde0:	f7ff fda4 	bl	800d92c <USBD_GetString>
 800dde4:	e004      	b.n	800ddf0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dde6:	683a      	ldr	r2, [r7, #0]
 800dde8:	4904      	ldr	r1, [pc, #16]	@ (800ddfc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddea:	4805      	ldr	r0, [pc, #20]	@ (800de00 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddec:	f7ff fd9e 	bl	800d92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddf0:	4b02      	ldr	r3, [pc, #8]	@ (800ddfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	2006fd68 	.word	0x2006fd68
 800de00:	0800ec1c 	.word	0x0800ec1c

0800de04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	4603      	mov	r3, r0
 800de0c:	6039      	str	r1, [r7, #0]
 800de0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d105      	bne.n	800de22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de16:	683a      	ldr	r2, [r7, #0]
 800de18:	4907      	ldr	r1, [pc, #28]	@ (800de38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de1a:	4808      	ldr	r0, [pc, #32]	@ (800de3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de1c:	f7ff fd86 	bl	800d92c <USBD_GetString>
 800de20:	e004      	b.n	800de2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	4904      	ldr	r1, [pc, #16]	@ (800de38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de26:	4805      	ldr	r0, [pc, #20]	@ (800de3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de28:	f7ff fd80 	bl	800d92c <USBD_GetString>
  }
  return USBD_StrDesc;
 800de2c:	4b02      	ldr	r3, [pc, #8]	@ (800de38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	2006fd68 	.word	0x2006fd68
 800de3c:	0800ec28 	.word	0x0800ec28

0800de40 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	4603      	mov	r3, r0
 800de48:	6039      	str	r1, [r7, #0]
 800de4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	220c      	movs	r2, #12
 800de50:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800de52:	4b03      	ldr	r3, [pc, #12]	@ (800de60 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800de54:	4618      	mov	r0, r3
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr
 800de60:	200000ec 	.word	0x200000ec

0800de64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de6a:	4b0f      	ldr	r3, [pc, #60]	@ (800dea8 <Get_SerialNum+0x44>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de70:	4b0e      	ldr	r3, [pc, #56]	@ (800deac <Get_SerialNum+0x48>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de76:	4b0e      	ldr	r3, [pc, #56]	@ (800deb0 <Get_SerialNum+0x4c>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de7c:	68fa      	ldr	r2, [r7, #12]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4413      	add	r3, r2
 800de82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d009      	beq.n	800de9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de8a:	2208      	movs	r2, #8
 800de8c:	4909      	ldr	r1, [pc, #36]	@ (800deb4 <Get_SerialNum+0x50>)
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f000 f814 	bl	800debc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de94:	2204      	movs	r2, #4
 800de96:	4908      	ldr	r1, [pc, #32]	@ (800deb8 <Get_SerialNum+0x54>)
 800de98:	68b8      	ldr	r0, [r7, #8]
 800de9a:	f000 f80f 	bl	800debc <IntToUnicode>
  }
}
 800de9e:	bf00      	nop
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	1ff0f420 	.word	0x1ff0f420
 800deac:	1ff0f424 	.word	0x1ff0f424
 800deb0:	1ff0f428 	.word	0x1ff0f428
 800deb4:	200000fe 	.word	0x200000fe
 800deb8:	2000010e 	.word	0x2000010e

0800debc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800debc:	b480      	push	{r7}
 800debe:	b087      	sub	sp, #28
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	4613      	mov	r3, r2
 800dec8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800deca:	2300      	movs	r3, #0
 800decc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dece:	2300      	movs	r3, #0
 800ded0:	75fb      	strb	r3, [r7, #23]
 800ded2:	e027      	b.n	800df24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	0f1b      	lsrs	r3, r3, #28
 800ded8:	2b09      	cmp	r3, #9
 800deda:	d80b      	bhi.n	800def4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	0f1b      	lsrs	r3, r3, #28
 800dee0:	b2da      	uxtb	r2, r3
 800dee2:	7dfb      	ldrb	r3, [r7, #23]
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	4619      	mov	r1, r3
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	440b      	add	r3, r1
 800deec:	3230      	adds	r2, #48	@ 0x30
 800deee:	b2d2      	uxtb	r2, r2
 800def0:	701a      	strb	r2, [r3, #0]
 800def2:	e00a      	b.n	800df0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	0f1b      	lsrs	r3, r3, #28
 800def8:	b2da      	uxtb	r2, r3
 800defa:	7dfb      	ldrb	r3, [r7, #23]
 800defc:	005b      	lsls	r3, r3, #1
 800defe:	4619      	mov	r1, r3
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	440b      	add	r3, r1
 800df04:	3237      	adds	r2, #55	@ 0x37
 800df06:	b2d2      	uxtb	r2, r2
 800df08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	011b      	lsls	r3, r3, #4
 800df0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	005b      	lsls	r3, r3, #1
 800df14:	3301      	adds	r3, #1
 800df16:	68ba      	ldr	r2, [r7, #8]
 800df18:	4413      	add	r3, r2
 800df1a:	2200      	movs	r2, #0
 800df1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800df1e:	7dfb      	ldrb	r3, [r7, #23]
 800df20:	3301      	adds	r3, #1
 800df22:	75fb      	strb	r3, [r7, #23]
 800df24:	7dfa      	ldrb	r2, [r7, #23]
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d3d3      	bcc.n	800ded4 <IntToUnicode+0x18>
  }
}
 800df2c:	bf00      	nop
 800df2e:	bf00      	nop
 800df30:	371c      	adds	r7, #28
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr
	...

0800df3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b0ae      	sub	sp, #184	@ 0xb8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800df48:	2200      	movs	r2, #0
 800df4a:	601a      	str	r2, [r3, #0]
 800df4c:	605a      	str	r2, [r3, #4]
 800df4e:	609a      	str	r2, [r3, #8]
 800df50:	60da      	str	r2, [r3, #12]
 800df52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800df54:	f107 0314 	add.w	r3, r7, #20
 800df58:	2290      	movs	r2, #144	@ 0x90
 800df5a:	2100      	movs	r1, #0
 800df5c:	4618      	mov	r0, r3
 800df5e:	f000 fc29 	bl	800e7b4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800df6a:	d161      	bne.n	800e030 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800df6c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800df70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800df72:	2300      	movs	r3, #0
 800df74:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800df78:	f107 0314 	add.w	r3, r7, #20
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7f9 fc3b 	bl	80077f8 <HAL_RCCEx_PeriphCLKConfig>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	d001      	beq.n	800df8c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800df88:	f7f4 feca 	bl	8002d20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df8c:	4b2a      	ldr	r3, [pc, #168]	@ (800e038 <HAL_PCD_MspInit+0xfc>)
 800df8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df90:	4a29      	ldr	r2, [pc, #164]	@ (800e038 <HAL_PCD_MspInit+0xfc>)
 800df92:	f043 0301 	orr.w	r3, r3, #1
 800df96:	6313      	str	r3, [r2, #48]	@ 0x30
 800df98:	4b27      	ldr	r3, [pc, #156]	@ (800e038 <HAL_PCD_MspInit+0xfc>)
 800df9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df9c:	f003 0301 	and.w	r3, r3, #1
 800dfa0:	613b      	str	r3, [r7, #16]
 800dfa2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800dfa4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800dfa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfac:	2302      	movs	r3, #2
 800dfae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dfb8:	2303      	movs	r3, #3
 800dfba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dfbe:	230a      	movs	r3, #10
 800dfc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfc4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800dfc8:	4619      	mov	r1, r3
 800dfca:	481c      	ldr	r0, [pc, #112]	@ (800e03c <HAL_PCD_MspInit+0x100>)
 800dfcc:	f7f7 fa78 	bl	80054c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800dfd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800dfe4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800dfe8:	4619      	mov	r1, r3
 800dfea:	4814      	ldr	r0, [pc, #80]	@ (800e03c <HAL_PCD_MspInit+0x100>)
 800dfec:	f7f7 fa68 	bl	80054c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dff0:	4b11      	ldr	r3, [pc, #68]	@ (800e038 <HAL_PCD_MspInit+0xfc>)
 800dff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dff4:	4a10      	ldr	r2, [pc, #64]	@ (800e038 <HAL_PCD_MspInit+0xfc>)
 800dff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dffa:	6353      	str	r3, [r2, #52]	@ 0x34
 800dffc:	4b0e      	ldr	r3, [pc, #56]	@ (800e038 <HAL_PCD_MspInit+0xfc>)
 800dffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e004:	60fb      	str	r3, [r7, #12]
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	4b0b      	ldr	r3, [pc, #44]	@ (800e038 <HAL_PCD_MspInit+0xfc>)
 800e00a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e00c:	4a0a      	ldr	r2, [pc, #40]	@ (800e038 <HAL_PCD_MspInit+0xfc>)
 800e00e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e012:	6453      	str	r3, [r2, #68]	@ 0x44
 800e014:	4b08      	ldr	r3, [pc, #32]	@ (800e038 <HAL_PCD_MspInit+0xfc>)
 800e016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e01c:	60bb      	str	r3, [r7, #8]
 800e01e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e020:	2200      	movs	r2, #0
 800e022:	2100      	movs	r1, #0
 800e024:	2043      	movs	r0, #67	@ 0x43
 800e026:	f7f6 fabc 	bl	80045a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e02a:	2043      	movs	r0, #67	@ 0x43
 800e02c:	f7f6 fad5 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e030:	bf00      	nop
 800e032:	37b8      	adds	r7, #184	@ 0xb8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	40023800 	.word	0x40023800
 800e03c:	40020000 	.word	0x40020000

0800e040 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e054:	4619      	mov	r1, r3
 800e056:	4610      	mov	r0, r2
 800e058:	f7fe fadb 	bl	800c612 <USBD_LL_SetupStage>
}
 800e05c:	bf00      	nop
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	460b      	mov	r3, r1
 800e06e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800e076:	78fa      	ldrb	r2, [r7, #3]
 800e078:	6879      	ldr	r1, [r7, #4]
 800e07a:	4613      	mov	r3, r2
 800e07c:	00db      	lsls	r3, r3, #3
 800e07e:	4413      	add	r3, r2
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	440b      	add	r3, r1
 800e084:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	78fb      	ldrb	r3, [r7, #3]
 800e08c:	4619      	mov	r1, r3
 800e08e:	f7fe fb15 	bl	800c6bc <USBD_LL_DataOutStage>
}
 800e092:	bf00      	nop
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b082      	sub	sp, #8
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
 800e0a2:	460b      	mov	r3, r1
 800e0a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800e0ac:	78fa      	ldrb	r2, [r7, #3]
 800e0ae:	6879      	ldr	r1, [r7, #4]
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	00db      	lsls	r3, r3, #3
 800e0b4:	4413      	add	r3, r2
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	440b      	add	r3, r1
 800e0ba:	3320      	adds	r3, #32
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	78fb      	ldrb	r3, [r7, #3]
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	f7fe fbae 	bl	800c822 <USBD_LL_DataInStage>
}
 800e0c6:	bf00      	nop
 800e0c8:	3708      	adds	r7, #8
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b082      	sub	sp, #8
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fe fce8 	bl	800cab2 <USBD_LL_SOF>
}
 800e0e2:	bf00      	nop
 800e0e4:	3708      	adds	r7, #8
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b084      	sub	sp, #16
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	79db      	ldrb	r3, [r3, #7]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d102      	bne.n	800e104 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e0fe:	2300      	movs	r3, #0
 800e100:	73fb      	strb	r3, [r7, #15]
 800e102:	e008      	b.n	800e116 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	79db      	ldrb	r3, [r3, #7]
 800e108:	2b02      	cmp	r3, #2
 800e10a:	d102      	bne.n	800e112 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e10c:	2301      	movs	r3, #1
 800e10e:	73fb      	strb	r3, [r7, #15]
 800e110:	e001      	b.n	800e116 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e112:	f7f4 fe05 	bl	8002d20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e11c:	7bfa      	ldrb	r2, [r7, #15]
 800e11e:	4611      	mov	r1, r2
 800e120:	4618      	mov	r0, r3
 800e122:	f7fe fc82 	bl	800ca2a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fe fc2a 	bl	800c986 <USBD_LL_Reset>
}
 800e132:	bf00      	nop
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
	...

0800e13c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fe fc7d 	bl	800ca4a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	6812      	ldr	r2, [r2, #0]
 800e15e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e162:	f043 0301 	orr.w	r3, r3, #1
 800e166:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	7adb      	ldrb	r3, [r3, #11]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d005      	beq.n	800e17c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e170:	4b04      	ldr	r3, [pc, #16]	@ (800e184 <HAL_PCD_SuspendCallback+0x48>)
 800e172:	691b      	ldr	r3, [r3, #16]
 800e174:	4a03      	ldr	r2, [pc, #12]	@ (800e184 <HAL_PCD_SuspendCallback+0x48>)
 800e176:	f043 0306 	orr.w	r3, r3, #6
 800e17a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e17c:	bf00      	nop
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	e000ed00 	.word	0xe000ed00

0800e188 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e196:	4618      	mov	r0, r3
 800e198:	f7fe fc73 	bl	800ca82 <USBD_LL_Resume>
}
 800e19c:	bf00      	nop
 800e19e:	3708      	adds	r7, #8
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e1b6:	78fa      	ldrb	r2, [r7, #3]
 800e1b8:	4611      	mov	r1, r2
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fe fccb 	bl	800cb56 <USBD_LL_IsoOUTIncomplete>
}
 800e1c0:	bf00      	nop
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e1da:	78fa      	ldrb	r2, [r7, #3]
 800e1dc:	4611      	mov	r1, r2
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe fc87 	bl	800caf2 <USBD_LL_IsoINIncomplete>
}
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fe fcdd 	bl	800cbba <USBD_LL_DevConnected>
}
 800e200:	bf00      	nop
 800e202:	3708      	adds	r7, #8
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e216:	4618      	mov	r0, r3
 800e218:	f7fe fcda 	bl	800cbd0 <USBD_LL_DevDisconnected>
}
 800e21c:	bf00      	nop
 800e21e:	3708      	adds	r7, #8
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d13c      	bne.n	800e2ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e234:	4a20      	ldr	r2, [pc, #128]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	4a1e      	ldr	r2, [pc, #120]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e240:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e244:	4b1c      	ldr	r3, [pc, #112]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e246:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e24a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e24c:	4b1a      	ldr	r3, [pc, #104]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e24e:	2206      	movs	r2, #6
 800e250:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e252:	4b19      	ldr	r3, [pc, #100]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e254:	2202      	movs	r2, #2
 800e256:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e258:	4b17      	ldr	r3, [pc, #92]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e25a:	2200      	movs	r2, #0
 800e25c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e25e:	4b16      	ldr	r3, [pc, #88]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e260:	2202      	movs	r2, #2
 800e262:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e264:	4b14      	ldr	r3, [pc, #80]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e266:	2201      	movs	r2, #1
 800e268:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e26a:	4b13      	ldr	r3, [pc, #76]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e270:	4b11      	ldr	r3, [pc, #68]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e272:	2200      	movs	r2, #0
 800e274:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e276:	4b10      	ldr	r3, [pc, #64]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e278:	2201      	movs	r2, #1
 800e27a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e27c:	4b0e      	ldr	r3, [pc, #56]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e27e:	2200      	movs	r2, #0
 800e280:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e282:	480d      	ldr	r0, [pc, #52]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e284:	f7f7 fafb 	bl	800587e <HAL_PCD_Init>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d001      	beq.n	800e292 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e28e:	f7f4 fd47 	bl	8002d20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e292:	2180      	movs	r1, #128	@ 0x80
 800e294:	4808      	ldr	r0, [pc, #32]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e296:	f7f8 fd46 	bl	8006d26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e29a:	2240      	movs	r2, #64	@ 0x40
 800e29c:	2100      	movs	r1, #0
 800e29e:	4806      	ldr	r0, [pc, #24]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e2a0:	f7f8 fcfa 	bl	8006c98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e2a4:	2280      	movs	r2, #128	@ 0x80
 800e2a6:	2101      	movs	r1, #1
 800e2a8:	4803      	ldr	r0, [pc, #12]	@ (800e2b8 <USBD_LL_Init+0x94>)
 800e2aa:	f7f8 fcf5 	bl	8006c98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e2ae:	2300      	movs	r3, #0
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3708      	adds	r7, #8
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd80      	pop	{r7, pc}
 800e2b8:	2006ff68 	.word	0x2006ff68

0800e2bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7f7 fbe9 	bl	8005aaa <HAL_PCD_Start>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2dc:	7bfb      	ldrb	r3, [r7, #15]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f000 f97e 	bl	800e5e0 <USBD_Get_USB_Status>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3710      	adds	r7, #16
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}

0800e2f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e2f2:	b580      	push	{r7, lr}
 800e2f4:	b084      	sub	sp, #16
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	6078      	str	r0, [r7, #4]
 800e2fa:	4608      	mov	r0, r1
 800e2fc:	4611      	mov	r1, r2
 800e2fe:	461a      	mov	r2, r3
 800e300:	4603      	mov	r3, r0
 800e302:	70fb      	strb	r3, [r7, #3]
 800e304:	460b      	mov	r3, r1
 800e306:	70bb      	strb	r3, [r7, #2]
 800e308:	4613      	mov	r3, r2
 800e30a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e30c:	2300      	movs	r3, #0
 800e30e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e310:	2300      	movs	r3, #0
 800e312:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e31a:	78bb      	ldrb	r3, [r7, #2]
 800e31c:	883a      	ldrh	r2, [r7, #0]
 800e31e:	78f9      	ldrb	r1, [r7, #3]
 800e320:	f7f8 f8d7 	bl	80064d2 <HAL_PCD_EP_Open>
 800e324:	4603      	mov	r3, r0
 800e326:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e328:	7bfb      	ldrb	r3, [r7, #15]
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 f958 	bl	800e5e0 <USBD_Get_USB_Status>
 800e330:	4603      	mov	r3, r0
 800e332:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e334:	7bbb      	ldrb	r3, [r7, #14]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}

0800e33e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e33e:	b580      	push	{r7, lr}
 800e340:	b084      	sub	sp, #16
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
 800e346:	460b      	mov	r3, r1
 800e348:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e34a:	2300      	movs	r3, #0
 800e34c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e34e:	2300      	movs	r3, #0
 800e350:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e358:	78fa      	ldrb	r2, [r7, #3]
 800e35a:	4611      	mov	r1, r2
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7f8 f920 	bl	80065a2 <HAL_PCD_EP_Close>
 800e362:	4603      	mov	r3, r0
 800e364:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e366:	7bfb      	ldrb	r3, [r7, #15]
 800e368:	4618      	mov	r0, r3
 800e36a:	f000 f939 	bl	800e5e0 <USBD_Get_USB_Status>
 800e36e:	4603      	mov	r3, r0
 800e370:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e372:	7bbb      	ldrb	r3, [r7, #14]
}
 800e374:	4618      	mov	r0, r3
 800e376:	3710      	adds	r7, #16
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	460b      	mov	r3, r1
 800e386:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e388:	2300      	movs	r3, #0
 800e38a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e38c:	2300      	movs	r3, #0
 800e38e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e396:	78fa      	ldrb	r2, [r7, #3]
 800e398:	4611      	mov	r1, r2
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7f8 f9d8 	bl	8006750 <HAL_PCD_EP_SetStall>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3a4:	7bfb      	ldrb	r3, [r7, #15]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f000 f91a 	bl	800e5e0 <USBD_Get_USB_Status>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3d4:	78fa      	ldrb	r2, [r7, #3]
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7f8 fa1c 	bl	8006816 <HAL_PCD_EP_ClrStall>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3e2:	7bfb      	ldrb	r3, [r7, #15]
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f000 f8fb 	bl	800e5e0 <USBD_Get_USB_Status>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3710      	adds	r7, #16
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b085      	sub	sp, #20
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
 800e400:	460b      	mov	r3, r1
 800e402:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e40a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e40c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e410:	2b00      	cmp	r3, #0
 800e412:	da0b      	bge.n	800e42c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e414:	78fb      	ldrb	r3, [r7, #3]
 800e416:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e41a:	68f9      	ldr	r1, [r7, #12]
 800e41c:	4613      	mov	r3, r2
 800e41e:	00db      	lsls	r3, r3, #3
 800e420:	4413      	add	r3, r2
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	440b      	add	r3, r1
 800e426:	3316      	adds	r3, #22
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	e00b      	b.n	800e444 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e42c:	78fb      	ldrb	r3, [r7, #3]
 800e42e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e432:	68f9      	ldr	r1, [r7, #12]
 800e434:	4613      	mov	r3, r2
 800e436:	00db      	lsls	r3, r3, #3
 800e438:	4413      	add	r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	440b      	add	r3, r1
 800e43e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e442:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e444:	4618      	mov	r0, r3
 800e446:	3714      	adds	r7, #20
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	460b      	mov	r3, r1
 800e45a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e45c:	2300      	movs	r3, #0
 800e45e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e460:	2300      	movs	r3, #0
 800e462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e46a:	78fa      	ldrb	r2, [r7, #3]
 800e46c:	4611      	mov	r1, r2
 800e46e:	4618      	mov	r0, r3
 800e470:	f7f8 f80b 	bl	800648a <HAL_PCD_SetAddress>
 800e474:	4603      	mov	r3, r0
 800e476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e478:	7bfb      	ldrb	r3, [r7, #15]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 f8b0 	bl	800e5e0 <USBD_Get_USB_Status>
 800e480:	4603      	mov	r3, r0
 800e482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e484:	7bbb      	ldrb	r3, [r7, #14]
}
 800e486:	4618      	mov	r0, r3
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}

0800e48e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b086      	sub	sp, #24
 800e492:	af00      	add	r7, sp, #0
 800e494:	60f8      	str	r0, [r7, #12]
 800e496:	607a      	str	r2, [r7, #4]
 800e498:	603b      	str	r3, [r7, #0]
 800e49a:	460b      	mov	r3, r1
 800e49c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e4ac:	7af9      	ldrb	r1, [r7, #11]
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	f7f8 f913 	bl	80066dc <HAL_PCD_EP_Transmit>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4ba:	7dfb      	ldrb	r3, [r7, #23]
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f000 f88f 	bl	800e5e0 <USBD_Get_USB_Status>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3718      	adds	r7, #24
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b086      	sub	sp, #24
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	607a      	str	r2, [r7, #4]
 800e4da:	603b      	str	r3, [r7, #0]
 800e4dc:	460b      	mov	r3, r1
 800e4de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e4ee:	7af9      	ldrb	r1, [r7, #11]
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	f7f8 f89f 	bl	8006636 <HAL_PCD_EP_Receive>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4fc:	7dfb      	ldrb	r3, [r7, #23]
 800e4fe:	4618      	mov	r0, r3
 800e500:	f000 f86e 	bl	800e5e0 <USBD_Get_USB_Status>
 800e504:	4603      	mov	r3, r0
 800e506:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e508:	7dbb      	ldrb	r3, [r7, #22]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3718      	adds	r7, #24
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}

0800e512 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b082      	sub	sp, #8
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
 800e51a:	460b      	mov	r3, r1
 800e51c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e524:	78fa      	ldrb	r2, [r7, #3]
 800e526:	4611      	mov	r1, r2
 800e528:	4618      	mov	r0, r3
 800e52a:	f7f8 f8bf 	bl	80066ac <HAL_PCD_EP_GetRxCount>
 800e52e:	4603      	mov	r3, r0
}
 800e530:	4618      	mov	r0, r3
 800e532:	3708      	adds	r7, #8
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	460b      	mov	r3, r1
 800e542:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e544:	78fb      	ldrb	r3, [r7, #3]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d002      	beq.n	800e550 <HAL_PCDEx_LPM_Callback+0x18>
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d01f      	beq.n	800e58e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e54e:	e03b      	b.n	800e5c8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	7adb      	ldrb	r3, [r3, #11]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d007      	beq.n	800e568 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e558:	f000 f83c 	bl	800e5d4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e55c:	4b1c      	ldr	r3, [pc, #112]	@ (800e5d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e55e:	691b      	ldr	r3, [r3, #16]
 800e560:	4a1b      	ldr	r2, [pc, #108]	@ (800e5d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e562:	f023 0306 	bic.w	r3, r3, #6
 800e566:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	687a      	ldr	r2, [r7, #4]
 800e574:	6812      	ldr	r2, [r2, #0]
 800e576:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e57a:	f023 0301 	bic.w	r3, r3, #1
 800e57e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e586:	4618      	mov	r0, r3
 800e588:	f7fe fa7b 	bl	800ca82 <USBD_LL_Resume>
    break;
 800e58c:	e01c      	b.n	800e5c8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	6812      	ldr	r2, [r2, #0]
 800e59c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e5a0:	f043 0301 	orr.w	r3, r3, #1
 800e5a4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7fe fa4c 	bl	800ca4a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	7adb      	ldrb	r3, [r3, #11]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d005      	beq.n	800e5c6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5ba:	4b05      	ldr	r3, [pc, #20]	@ (800e5d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5bc:	691b      	ldr	r3, [r3, #16]
 800e5be:	4a04      	ldr	r2, [pc, #16]	@ (800e5d0 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5c0:	f043 0306 	orr.w	r3, r3, #6
 800e5c4:	6113      	str	r3, [r2, #16]
    break;
 800e5c6:	bf00      	nop
}
 800e5c8:	bf00      	nop
 800e5ca:	3708      	adds	r7, #8
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}
 800e5d0:	e000ed00 	.word	0xe000ed00

0800e5d4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e5d8:	f7f3 ffb0 	bl	800253c <SystemClock_Config>
}
 800e5dc:	bf00      	nop
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e5ee:	79fb      	ldrb	r3, [r7, #7]
 800e5f0:	2b03      	cmp	r3, #3
 800e5f2:	d817      	bhi.n	800e624 <USBD_Get_USB_Status+0x44>
 800e5f4:	a201      	add	r2, pc, #4	@ (adr r2, 800e5fc <USBD_Get_USB_Status+0x1c>)
 800e5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5fa:	bf00      	nop
 800e5fc:	0800e60d 	.word	0x0800e60d
 800e600:	0800e613 	.word	0x0800e613
 800e604:	0800e619 	.word	0x0800e619
 800e608:	0800e61f 	.word	0x0800e61f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e60c:	2300      	movs	r3, #0
 800e60e:	73fb      	strb	r3, [r7, #15]
    break;
 800e610:	e00b      	b.n	800e62a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e612:	2303      	movs	r3, #3
 800e614:	73fb      	strb	r3, [r7, #15]
    break;
 800e616:	e008      	b.n	800e62a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e618:	2301      	movs	r3, #1
 800e61a:	73fb      	strb	r3, [r7, #15]
    break;
 800e61c:	e005      	b.n	800e62a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e61e:	2303      	movs	r3, #3
 800e620:	73fb      	strb	r3, [r7, #15]
    break;
 800e622:	e002      	b.n	800e62a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e624:	2303      	movs	r3, #3
 800e626:	73fb      	strb	r3, [r7, #15]
    break;
 800e628:	bf00      	nop
  }
  return usb_status;
 800e62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3714      	adds	r7, #20
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr

0800e638 <malloc>:
 800e638:	4b02      	ldr	r3, [pc, #8]	@ (800e644 <malloc+0xc>)
 800e63a:	4601      	mov	r1, r0
 800e63c:	6818      	ldr	r0, [r3, #0]
 800e63e:	f000 b82d 	b.w	800e69c <_malloc_r>
 800e642:	bf00      	nop
 800e644:	20000118 	.word	0x20000118

0800e648 <free>:
 800e648:	4b02      	ldr	r3, [pc, #8]	@ (800e654 <free+0xc>)
 800e64a:	4601      	mov	r1, r0
 800e64c:	6818      	ldr	r0, [r3, #0]
 800e64e:	f000 b997 	b.w	800e980 <_free_r>
 800e652:	bf00      	nop
 800e654:	20000118 	.word	0x20000118

0800e658 <sbrk_aligned>:
 800e658:	b570      	push	{r4, r5, r6, lr}
 800e65a:	4e0f      	ldr	r6, [pc, #60]	@ (800e698 <sbrk_aligned+0x40>)
 800e65c:	460c      	mov	r4, r1
 800e65e:	6831      	ldr	r1, [r6, #0]
 800e660:	4605      	mov	r5, r0
 800e662:	b911      	cbnz	r1, 800e66a <sbrk_aligned+0x12>
 800e664:	f000 f8ae 	bl	800e7c4 <_sbrk_r>
 800e668:	6030      	str	r0, [r6, #0]
 800e66a:	4621      	mov	r1, r4
 800e66c:	4628      	mov	r0, r5
 800e66e:	f000 f8a9 	bl	800e7c4 <_sbrk_r>
 800e672:	1c43      	adds	r3, r0, #1
 800e674:	d103      	bne.n	800e67e <sbrk_aligned+0x26>
 800e676:	f04f 34ff 	mov.w	r4, #4294967295
 800e67a:	4620      	mov	r0, r4
 800e67c:	bd70      	pop	{r4, r5, r6, pc}
 800e67e:	1cc4      	adds	r4, r0, #3
 800e680:	f024 0403 	bic.w	r4, r4, #3
 800e684:	42a0      	cmp	r0, r4
 800e686:	d0f8      	beq.n	800e67a <sbrk_aligned+0x22>
 800e688:	1a21      	subs	r1, r4, r0
 800e68a:	4628      	mov	r0, r5
 800e68c:	f000 f89a 	bl	800e7c4 <_sbrk_r>
 800e690:	3001      	adds	r0, #1
 800e692:	d1f2      	bne.n	800e67a <sbrk_aligned+0x22>
 800e694:	e7ef      	b.n	800e676 <sbrk_aligned+0x1e>
 800e696:	bf00      	nop
 800e698:	20070448 	.word	0x20070448

0800e69c <_malloc_r>:
 800e69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6a0:	1ccd      	adds	r5, r1, #3
 800e6a2:	f025 0503 	bic.w	r5, r5, #3
 800e6a6:	3508      	adds	r5, #8
 800e6a8:	2d0c      	cmp	r5, #12
 800e6aa:	bf38      	it	cc
 800e6ac:	250c      	movcc	r5, #12
 800e6ae:	2d00      	cmp	r5, #0
 800e6b0:	4606      	mov	r6, r0
 800e6b2:	db01      	blt.n	800e6b8 <_malloc_r+0x1c>
 800e6b4:	42a9      	cmp	r1, r5
 800e6b6:	d904      	bls.n	800e6c2 <_malloc_r+0x26>
 800e6b8:	230c      	movs	r3, #12
 800e6ba:	6033      	str	r3, [r6, #0]
 800e6bc:	2000      	movs	r0, #0
 800e6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e798 <_malloc_r+0xfc>
 800e6c6:	f000 f869 	bl	800e79c <__malloc_lock>
 800e6ca:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ce:	461c      	mov	r4, r3
 800e6d0:	bb44      	cbnz	r4, 800e724 <_malloc_r+0x88>
 800e6d2:	4629      	mov	r1, r5
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	f7ff ffbf 	bl	800e658 <sbrk_aligned>
 800e6da:	1c43      	adds	r3, r0, #1
 800e6dc:	4604      	mov	r4, r0
 800e6de:	d158      	bne.n	800e792 <_malloc_r+0xf6>
 800e6e0:	f8d8 4000 	ldr.w	r4, [r8]
 800e6e4:	4627      	mov	r7, r4
 800e6e6:	2f00      	cmp	r7, #0
 800e6e8:	d143      	bne.n	800e772 <_malloc_r+0xd6>
 800e6ea:	2c00      	cmp	r4, #0
 800e6ec:	d04b      	beq.n	800e786 <_malloc_r+0xea>
 800e6ee:	6823      	ldr	r3, [r4, #0]
 800e6f0:	4639      	mov	r1, r7
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	eb04 0903 	add.w	r9, r4, r3
 800e6f8:	f000 f864 	bl	800e7c4 <_sbrk_r>
 800e6fc:	4581      	cmp	r9, r0
 800e6fe:	d142      	bne.n	800e786 <_malloc_r+0xea>
 800e700:	6821      	ldr	r1, [r4, #0]
 800e702:	1a6d      	subs	r5, r5, r1
 800e704:	4629      	mov	r1, r5
 800e706:	4630      	mov	r0, r6
 800e708:	f7ff ffa6 	bl	800e658 <sbrk_aligned>
 800e70c:	3001      	adds	r0, #1
 800e70e:	d03a      	beq.n	800e786 <_malloc_r+0xea>
 800e710:	6823      	ldr	r3, [r4, #0]
 800e712:	442b      	add	r3, r5
 800e714:	6023      	str	r3, [r4, #0]
 800e716:	f8d8 3000 	ldr.w	r3, [r8]
 800e71a:	685a      	ldr	r2, [r3, #4]
 800e71c:	bb62      	cbnz	r2, 800e778 <_malloc_r+0xdc>
 800e71e:	f8c8 7000 	str.w	r7, [r8]
 800e722:	e00f      	b.n	800e744 <_malloc_r+0xa8>
 800e724:	6822      	ldr	r2, [r4, #0]
 800e726:	1b52      	subs	r2, r2, r5
 800e728:	d420      	bmi.n	800e76c <_malloc_r+0xd0>
 800e72a:	2a0b      	cmp	r2, #11
 800e72c:	d917      	bls.n	800e75e <_malloc_r+0xc2>
 800e72e:	1961      	adds	r1, r4, r5
 800e730:	42a3      	cmp	r3, r4
 800e732:	6025      	str	r5, [r4, #0]
 800e734:	bf18      	it	ne
 800e736:	6059      	strne	r1, [r3, #4]
 800e738:	6863      	ldr	r3, [r4, #4]
 800e73a:	bf08      	it	eq
 800e73c:	f8c8 1000 	streq.w	r1, [r8]
 800e740:	5162      	str	r2, [r4, r5]
 800e742:	604b      	str	r3, [r1, #4]
 800e744:	4630      	mov	r0, r6
 800e746:	f000 f82f 	bl	800e7a8 <__malloc_unlock>
 800e74a:	f104 000b 	add.w	r0, r4, #11
 800e74e:	1d23      	adds	r3, r4, #4
 800e750:	f020 0007 	bic.w	r0, r0, #7
 800e754:	1ac2      	subs	r2, r0, r3
 800e756:	bf1c      	itt	ne
 800e758:	1a1b      	subne	r3, r3, r0
 800e75a:	50a3      	strne	r3, [r4, r2]
 800e75c:	e7af      	b.n	800e6be <_malloc_r+0x22>
 800e75e:	6862      	ldr	r2, [r4, #4]
 800e760:	42a3      	cmp	r3, r4
 800e762:	bf0c      	ite	eq
 800e764:	f8c8 2000 	streq.w	r2, [r8]
 800e768:	605a      	strne	r2, [r3, #4]
 800e76a:	e7eb      	b.n	800e744 <_malloc_r+0xa8>
 800e76c:	4623      	mov	r3, r4
 800e76e:	6864      	ldr	r4, [r4, #4]
 800e770:	e7ae      	b.n	800e6d0 <_malloc_r+0x34>
 800e772:	463c      	mov	r4, r7
 800e774:	687f      	ldr	r7, [r7, #4]
 800e776:	e7b6      	b.n	800e6e6 <_malloc_r+0x4a>
 800e778:	461a      	mov	r2, r3
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	42a3      	cmp	r3, r4
 800e77e:	d1fb      	bne.n	800e778 <_malloc_r+0xdc>
 800e780:	2300      	movs	r3, #0
 800e782:	6053      	str	r3, [r2, #4]
 800e784:	e7de      	b.n	800e744 <_malloc_r+0xa8>
 800e786:	230c      	movs	r3, #12
 800e788:	6033      	str	r3, [r6, #0]
 800e78a:	4630      	mov	r0, r6
 800e78c:	f000 f80c 	bl	800e7a8 <__malloc_unlock>
 800e790:	e794      	b.n	800e6bc <_malloc_r+0x20>
 800e792:	6005      	str	r5, [r0, #0]
 800e794:	e7d6      	b.n	800e744 <_malloc_r+0xa8>
 800e796:	bf00      	nop
 800e798:	2007044c 	.word	0x2007044c

0800e79c <__malloc_lock>:
 800e79c:	4801      	ldr	r0, [pc, #4]	@ (800e7a4 <__malloc_lock+0x8>)
 800e79e:	f000 b84b 	b.w	800e838 <__retarget_lock_acquire_recursive>
 800e7a2:	bf00      	nop
 800e7a4:	2007058c 	.word	0x2007058c

0800e7a8 <__malloc_unlock>:
 800e7a8:	4801      	ldr	r0, [pc, #4]	@ (800e7b0 <__malloc_unlock+0x8>)
 800e7aa:	f000 b846 	b.w	800e83a <__retarget_lock_release_recursive>
 800e7ae:	bf00      	nop
 800e7b0:	2007058c 	.word	0x2007058c

0800e7b4 <memset>:
 800e7b4:	4402      	add	r2, r0
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d100      	bne.n	800e7be <memset+0xa>
 800e7bc:	4770      	bx	lr
 800e7be:	f803 1b01 	strb.w	r1, [r3], #1
 800e7c2:	e7f9      	b.n	800e7b8 <memset+0x4>

0800e7c4 <_sbrk_r>:
 800e7c4:	b538      	push	{r3, r4, r5, lr}
 800e7c6:	4d06      	ldr	r5, [pc, #24]	@ (800e7e0 <_sbrk_r+0x1c>)
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	4608      	mov	r0, r1
 800e7ce:	602b      	str	r3, [r5, #0]
 800e7d0:	f7f4 fff0 	bl	80037b4 <_sbrk>
 800e7d4:	1c43      	adds	r3, r0, #1
 800e7d6:	d102      	bne.n	800e7de <_sbrk_r+0x1a>
 800e7d8:	682b      	ldr	r3, [r5, #0]
 800e7da:	b103      	cbz	r3, 800e7de <_sbrk_r+0x1a>
 800e7dc:	6023      	str	r3, [r4, #0]
 800e7de:	bd38      	pop	{r3, r4, r5, pc}
 800e7e0:	20070588 	.word	0x20070588

0800e7e4 <__errno>:
 800e7e4:	4b01      	ldr	r3, [pc, #4]	@ (800e7ec <__errno+0x8>)
 800e7e6:	6818      	ldr	r0, [r3, #0]
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop
 800e7ec:	20000118 	.word	0x20000118

0800e7f0 <__libc_init_array>:
 800e7f0:	b570      	push	{r4, r5, r6, lr}
 800e7f2:	4d0d      	ldr	r5, [pc, #52]	@ (800e828 <__libc_init_array+0x38>)
 800e7f4:	4c0d      	ldr	r4, [pc, #52]	@ (800e82c <__libc_init_array+0x3c>)
 800e7f6:	1b64      	subs	r4, r4, r5
 800e7f8:	10a4      	asrs	r4, r4, #2
 800e7fa:	2600      	movs	r6, #0
 800e7fc:	42a6      	cmp	r6, r4
 800e7fe:	d109      	bne.n	800e814 <__libc_init_array+0x24>
 800e800:	4d0b      	ldr	r5, [pc, #44]	@ (800e830 <__libc_init_array+0x40>)
 800e802:	4c0c      	ldr	r4, [pc, #48]	@ (800e834 <__libc_init_array+0x44>)
 800e804:	f000 f9e6 	bl	800ebd4 <_init>
 800e808:	1b64      	subs	r4, r4, r5
 800e80a:	10a4      	asrs	r4, r4, #2
 800e80c:	2600      	movs	r6, #0
 800e80e:	42a6      	cmp	r6, r4
 800e810:	d105      	bne.n	800e81e <__libc_init_array+0x2e>
 800e812:	bd70      	pop	{r4, r5, r6, pc}
 800e814:	f855 3b04 	ldr.w	r3, [r5], #4
 800e818:	4798      	blx	r3
 800e81a:	3601      	adds	r6, #1
 800e81c:	e7ee      	b.n	800e7fc <__libc_init_array+0xc>
 800e81e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e822:	4798      	blx	r3
 800e824:	3601      	adds	r6, #1
 800e826:	e7f2      	b.n	800e80e <__libc_init_array+0x1e>
 800e828:	0800efa0 	.word	0x0800efa0
 800e82c:	0800efa0 	.word	0x0800efa0
 800e830:	0800efa0 	.word	0x0800efa0
 800e834:	0800efa4 	.word	0x0800efa4

0800e838 <__retarget_lock_acquire_recursive>:
 800e838:	4770      	bx	lr

0800e83a <__retarget_lock_release_recursive>:
 800e83a:	4770      	bx	lr

0800e83c <memcpy>:
 800e83c:	440a      	add	r2, r1
 800e83e:	4291      	cmp	r1, r2
 800e840:	f100 33ff 	add.w	r3, r0, #4294967295
 800e844:	d100      	bne.n	800e848 <memcpy+0xc>
 800e846:	4770      	bx	lr
 800e848:	b510      	push	{r4, lr}
 800e84a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e84e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e852:	4291      	cmp	r1, r2
 800e854:	d1f9      	bne.n	800e84a <memcpy+0xe>
 800e856:	bd10      	pop	{r4, pc}

0800e858 <ldexpf>:
 800e858:	b510      	push	{r4, lr}
 800e85a:	ed2d 8b02 	vpush	{d8}
 800e85e:	4604      	mov	r4, r0
 800e860:	eeb0 8a40 	vmov.f32	s16, s0
 800e864:	f000 f882 	bl	800e96c <finitef>
 800e868:	b1b8      	cbz	r0, 800e89a <ldexpf+0x42>
 800e86a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e872:	d012      	beq.n	800e89a <ldexpf+0x42>
 800e874:	eeb0 0a48 	vmov.f32	s0, s16
 800e878:	4620      	mov	r0, r4
 800e87a:	f000 f813 	bl	800e8a4 <scalbnf>
 800e87e:	eeb0 8a40 	vmov.f32	s16, s0
 800e882:	f000 f873 	bl	800e96c <finitef>
 800e886:	b120      	cbz	r0, 800e892 <ldexpf+0x3a>
 800e888:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e890:	d103      	bne.n	800e89a <ldexpf+0x42>
 800e892:	f7ff ffa7 	bl	800e7e4 <__errno>
 800e896:	2322      	movs	r3, #34	@ 0x22
 800e898:	6003      	str	r3, [r0, #0]
 800e89a:	eeb0 0a48 	vmov.f32	s0, s16
 800e89e:	ecbd 8b02 	vpop	{d8}
 800e8a2:	bd10      	pop	{r4, pc}

0800e8a4 <scalbnf>:
 800e8a4:	ee10 3a10 	vmov	r3, s0
 800e8a8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e8ac:	d02a      	beq.n	800e904 <scalbnf+0x60>
 800e8ae:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e8b2:	d302      	bcc.n	800e8ba <scalbnf+0x16>
 800e8b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e8b8:	4770      	bx	lr
 800e8ba:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e8be:	d122      	bne.n	800e906 <scalbnf+0x62>
 800e8c0:	4b23      	ldr	r3, [pc, #140]	@ (800e950 <scalbnf+0xac>)
 800e8c2:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800e954 <scalbnf+0xb0>
 800e8c6:	4298      	cmp	r0, r3
 800e8c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e8cc:	db16      	blt.n	800e8fc <scalbnf+0x58>
 800e8ce:	ee10 3a10 	vmov	r3, s0
 800e8d2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e8d6:	3a19      	subs	r2, #25
 800e8d8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e8dc:	4288      	cmp	r0, r1
 800e8de:	dd14      	ble.n	800e90a <scalbnf+0x66>
 800e8e0:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 800e958 <scalbnf+0xb4>
 800e8e4:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800e95c <scalbnf+0xb8>
 800e8e8:	ee10 3a10 	vmov	r3, s0
 800e8ec:	eeb0 7a67 	vmov.f32	s14, s15
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800e8f6:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e8fa:	4770      	bx	lr
 800e8fc:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800e960 <scalbnf+0xbc>
 800e900:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e904:	4770      	bx	lr
 800e906:	0dd2      	lsrs	r2, r2, #23
 800e908:	e7e6      	b.n	800e8d8 <scalbnf+0x34>
 800e90a:	4410      	add	r0, r2
 800e90c:	28fe      	cmp	r0, #254	@ 0xfe
 800e90e:	dce7      	bgt.n	800e8e0 <scalbnf+0x3c>
 800e910:	2800      	cmp	r0, #0
 800e912:	dd06      	ble.n	800e922 <scalbnf+0x7e>
 800e914:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e918:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e91c:	ee00 3a10 	vmov	s0, r3
 800e920:	4770      	bx	lr
 800e922:	f110 0f16 	cmn.w	r0, #22
 800e926:	da09      	bge.n	800e93c <scalbnf+0x98>
 800e928:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e960 <scalbnf+0xbc>
 800e92c:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800e964 <scalbnf+0xc0>
 800e930:	ee10 3a10 	vmov	r3, s0
 800e934:	eeb0 7a67 	vmov.f32	s14, s15
 800e938:	2b00      	cmp	r3, #0
 800e93a:	e7da      	b.n	800e8f2 <scalbnf+0x4e>
 800e93c:	3019      	adds	r0, #25
 800e93e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e942:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e946:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e968 <scalbnf+0xc4>
 800e94a:	ee07 3a90 	vmov	s15, r3
 800e94e:	e7d7      	b.n	800e900 <scalbnf+0x5c>
 800e950:	ffff3cb0 	.word	0xffff3cb0
 800e954:	4c000000 	.word	0x4c000000
 800e958:	7149f2ca 	.word	0x7149f2ca
 800e95c:	f149f2ca 	.word	0xf149f2ca
 800e960:	0da24260 	.word	0x0da24260
 800e964:	8da24260 	.word	0x8da24260
 800e968:	33000000 	.word	0x33000000

0800e96c <finitef>:
 800e96c:	ee10 3a10 	vmov	r3, s0
 800e970:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e974:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e978:	bfac      	ite	ge
 800e97a:	2000      	movge	r0, #0
 800e97c:	2001      	movlt	r0, #1
 800e97e:	4770      	bx	lr

0800e980 <_free_r>:
 800e980:	b538      	push	{r3, r4, r5, lr}
 800e982:	4605      	mov	r5, r0
 800e984:	2900      	cmp	r1, #0
 800e986:	d041      	beq.n	800ea0c <_free_r+0x8c>
 800e988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e98c:	1f0c      	subs	r4, r1, #4
 800e98e:	2b00      	cmp	r3, #0
 800e990:	bfb8      	it	lt
 800e992:	18e4      	addlt	r4, r4, r3
 800e994:	f7ff ff02 	bl	800e79c <__malloc_lock>
 800e998:	4a1d      	ldr	r2, [pc, #116]	@ (800ea10 <_free_r+0x90>)
 800e99a:	6813      	ldr	r3, [r2, #0]
 800e99c:	b933      	cbnz	r3, 800e9ac <_free_r+0x2c>
 800e99e:	6063      	str	r3, [r4, #4]
 800e9a0:	6014      	str	r4, [r2, #0]
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9a8:	f7ff befe 	b.w	800e7a8 <__malloc_unlock>
 800e9ac:	42a3      	cmp	r3, r4
 800e9ae:	d908      	bls.n	800e9c2 <_free_r+0x42>
 800e9b0:	6820      	ldr	r0, [r4, #0]
 800e9b2:	1821      	adds	r1, r4, r0
 800e9b4:	428b      	cmp	r3, r1
 800e9b6:	bf01      	itttt	eq
 800e9b8:	6819      	ldreq	r1, [r3, #0]
 800e9ba:	685b      	ldreq	r3, [r3, #4]
 800e9bc:	1809      	addeq	r1, r1, r0
 800e9be:	6021      	streq	r1, [r4, #0]
 800e9c0:	e7ed      	b.n	800e99e <_free_r+0x1e>
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	b10b      	cbz	r3, 800e9cc <_free_r+0x4c>
 800e9c8:	42a3      	cmp	r3, r4
 800e9ca:	d9fa      	bls.n	800e9c2 <_free_r+0x42>
 800e9cc:	6811      	ldr	r1, [r2, #0]
 800e9ce:	1850      	adds	r0, r2, r1
 800e9d0:	42a0      	cmp	r0, r4
 800e9d2:	d10b      	bne.n	800e9ec <_free_r+0x6c>
 800e9d4:	6820      	ldr	r0, [r4, #0]
 800e9d6:	4401      	add	r1, r0
 800e9d8:	1850      	adds	r0, r2, r1
 800e9da:	4283      	cmp	r3, r0
 800e9dc:	6011      	str	r1, [r2, #0]
 800e9de:	d1e0      	bne.n	800e9a2 <_free_r+0x22>
 800e9e0:	6818      	ldr	r0, [r3, #0]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	6053      	str	r3, [r2, #4]
 800e9e6:	4408      	add	r0, r1
 800e9e8:	6010      	str	r0, [r2, #0]
 800e9ea:	e7da      	b.n	800e9a2 <_free_r+0x22>
 800e9ec:	d902      	bls.n	800e9f4 <_free_r+0x74>
 800e9ee:	230c      	movs	r3, #12
 800e9f0:	602b      	str	r3, [r5, #0]
 800e9f2:	e7d6      	b.n	800e9a2 <_free_r+0x22>
 800e9f4:	6820      	ldr	r0, [r4, #0]
 800e9f6:	1821      	adds	r1, r4, r0
 800e9f8:	428b      	cmp	r3, r1
 800e9fa:	bf04      	itt	eq
 800e9fc:	6819      	ldreq	r1, [r3, #0]
 800e9fe:	685b      	ldreq	r3, [r3, #4]
 800ea00:	6063      	str	r3, [r4, #4]
 800ea02:	bf04      	itt	eq
 800ea04:	1809      	addeq	r1, r1, r0
 800ea06:	6021      	streq	r1, [r4, #0]
 800ea08:	6054      	str	r4, [r2, #4]
 800ea0a:	e7ca      	b.n	800e9a2 <_free_r+0x22>
 800ea0c:	bd38      	pop	{r3, r4, r5, pc}
 800ea0e:	bf00      	nop
 800ea10:	2007044c 	.word	0x2007044c

0800ea14 <sinf_poly>:
 800ea14:	07cb      	lsls	r3, r1, #31
 800ea16:	d412      	bmi.n	800ea3e <sinf_poly+0x2a>
 800ea18:	ee21 5b00 	vmul.f64	d5, d1, d0
 800ea1c:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800ea20:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800ea24:	eea6 7b01 	vfma.f64	d7, d6, d1
 800ea28:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800ea2c:	ee21 1b05 	vmul.f64	d1, d1, d5
 800ea30:	eea6 0b05 	vfma.f64	d0, d6, d5
 800ea34:	eea7 0b01 	vfma.f64	d0, d7, d1
 800ea38:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ea3c:	4770      	bx	lr
 800ea3e:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800ea42:	ee21 5b01 	vmul.f64	d5, d1, d1
 800ea46:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800ea4a:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800ea4e:	eea1 7b06 	vfma.f64	d7, d1, d6
 800ea52:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800ea56:	eea1 0b06 	vfma.f64	d0, d1, d6
 800ea5a:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800ea5e:	ee21 1b05 	vmul.f64	d1, d1, d5
 800ea62:	eea5 0b06 	vfma.f64	d0, d5, d6
 800ea66:	e7e5      	b.n	800ea34 <sinf_poly+0x20>

0800ea68 <sinf>:
 800ea68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea6a:	ee10 4a10 	vmov	r4, s0
 800ea6e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800ea72:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800ea76:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800ea7a:	eef0 7a40 	vmov.f32	s15, s0
 800ea7e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800ea82:	d218      	bcs.n	800eab6 <sinf+0x4e>
 800ea84:	ee26 1b06 	vmul.f64	d1, d6, d6
 800ea88:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800ea8c:	d20a      	bcs.n	800eaa4 <sinf+0x3c>
 800ea8e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 800ea92:	d103      	bne.n	800ea9c <sinf+0x34>
 800ea94:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800ea98:	ed8d 1a01 	vstr	s2, [sp, #4]
 800ea9c:	eeb0 0a67 	vmov.f32	s0, s15
 800eaa0:	b003      	add	sp, #12
 800eaa2:	bd30      	pop	{r4, r5, pc}
 800eaa4:	483a      	ldr	r0, [pc, #232]	@ (800eb90 <sinf+0x128>)
 800eaa6:	eeb0 0b46 	vmov.f64	d0, d6
 800eaaa:	2100      	movs	r1, #0
 800eaac:	b003      	add	sp, #12
 800eaae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eab2:	f7ff bfaf 	b.w	800ea14 <sinf_poly>
 800eab6:	f240 422e 	movw	r2, #1070	@ 0x42e
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d824      	bhi.n	800eb08 <sinf+0xa0>
 800eabe:	4b34      	ldr	r3, [pc, #208]	@ (800eb90 <sinf+0x128>)
 800eac0:	ed93 7b08 	vldr	d7, [r3, #32]
 800eac4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eac8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800eacc:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800ead0:	ee17 1a90 	vmov	r1, s15
 800ead4:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800ead8:	1609      	asrs	r1, r1, #24
 800eada:	ee07 1a90 	vmov	s15, r1
 800eade:	f001 0203 	and.w	r2, r1, #3
 800eae2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800eae6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800eaea:	ed92 0b00 	vldr	d0, [r2]
 800eaee:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800eaf2:	f011 0f02 	tst.w	r1, #2
 800eaf6:	eea5 6b47 	vfms.f64	d6, d5, d7
 800eafa:	bf08      	it	eq
 800eafc:	4618      	moveq	r0, r3
 800eafe:	ee26 1b06 	vmul.f64	d1, d6, d6
 800eb02:	ee20 0b06 	vmul.f64	d0, d0, d6
 800eb06:	e7d1      	b.n	800eaac <sinf+0x44>
 800eb08:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800eb0c:	d237      	bcs.n	800eb7e <sinf+0x116>
 800eb0e:	4921      	ldr	r1, [pc, #132]	@ (800eb94 <sinf+0x12c>)
 800eb10:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800eb14:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800eb18:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800eb1c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800eb20:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800eb24:	6a10      	ldr	r0, [r2, #32]
 800eb26:	6912      	ldr	r2, [r2, #16]
 800eb28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800eb2c:	40ab      	lsls	r3, r5
 800eb2e:	fba0 5003 	umull	r5, r0, r0, r3
 800eb32:	4359      	muls	r1, r3
 800eb34:	fbe3 0102 	umlal	r0, r1, r3, r2
 800eb38:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800eb3c:	0f9d      	lsrs	r5, r3, #30
 800eb3e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800eb42:	1ac9      	subs	r1, r1, r3
 800eb44:	f7f1 fd06 	bl	8000554 <__aeabi_l2d>
 800eb48:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800eb4c:	4b10      	ldr	r3, [pc, #64]	@ (800eb90 <sinf+0x128>)
 800eb4e:	f004 0203 	and.w	r2, r4, #3
 800eb52:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800eb56:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 800eb88 <sinf+0x120>
 800eb5a:	ed92 0b00 	vldr	d0, [r2]
 800eb5e:	ec41 0b17 	vmov	d7, r0, r1
 800eb62:	f014 0f02 	tst.w	r4, #2
 800eb66:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eb6a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800eb6e:	4629      	mov	r1, r5
 800eb70:	bf08      	it	eq
 800eb72:	4618      	moveq	r0, r3
 800eb74:	ee27 1b07 	vmul.f64	d1, d7, d7
 800eb78:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eb7c:	e796      	b.n	800eaac <sinf+0x44>
 800eb7e:	b003      	add	sp, #12
 800eb80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb84:	f000 b816 	b.w	800ebb4 <__math_invalidf>
 800eb88:	54442d18 	.word	0x54442d18
 800eb8c:	3c1921fb 	.word	0x3c1921fb
 800eb90:	0800eeb8 	.word	0x0800eeb8
 800eb94:	0800ee58 	.word	0x0800ee58

0800eb98 <with_errnof>:
 800eb98:	b510      	push	{r4, lr}
 800eb9a:	ed2d 8b02 	vpush	{d8}
 800eb9e:	eeb0 8a40 	vmov.f32	s16, s0
 800eba2:	4604      	mov	r4, r0
 800eba4:	f7ff fe1e 	bl	800e7e4 <__errno>
 800eba8:	eeb0 0a48 	vmov.f32	s0, s16
 800ebac:	ecbd 8b02 	vpop	{d8}
 800ebb0:	6004      	str	r4, [r0, #0]
 800ebb2:	bd10      	pop	{r4, pc}

0800ebb4 <__math_invalidf>:
 800ebb4:	eef0 7a40 	vmov.f32	s15, s0
 800ebb8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ebbc:	eef4 7a67 	vcmp.f32	s15, s15
 800ebc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ebc8:	d602      	bvs.n	800ebd0 <__math_invalidf+0x1c>
 800ebca:	2021      	movs	r0, #33	@ 0x21
 800ebcc:	f7ff bfe4 	b.w	800eb98 <with_errnof>
 800ebd0:	4770      	bx	lr
	...

0800ebd4 <_init>:
 800ebd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebd6:	bf00      	nop
 800ebd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebda:	bc08      	pop	{r3}
 800ebdc:	469e      	mov	lr, r3
 800ebde:	4770      	bx	lr

0800ebe0 <_fini>:
 800ebe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebe2:	bf00      	nop
 800ebe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebe6:	bc08      	pop	{r3}
 800ebe8:	469e      	mov	lr, r3
 800ebea:	4770      	bx	lr
