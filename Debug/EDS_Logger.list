
EDS_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb1c  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800ed18  0800ed18  0000fd18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0c0  0800f0c0  000112a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0c0  0800f0c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0c8  0800f0c8  000112a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0c8  0800f0c8  000100c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f0cc  0800f0cc  000100cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800f0d0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000168  0800f238  00011168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000208  0800f2d8  00011208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00070304  200002a8  0800f378  000112a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200705ac  0800f378  000115ac  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000112a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024cb7  00000000  00000000  000112d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000537c  00000000  00000000  00035f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c80  00000000  00000000  0003b310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015d7  00000000  00000000  0003cf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e71a  00000000  00000000  0003e567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026de8  00000000  00000000  0006cc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010e179  00000000  00000000  00093a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a1be2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007bf4  00000000  00000000  001a1c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004b  00000000  00000000  001a981c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200002a8 	.word	0x200002a8
 8000214:	00000000 	.word	0x00000000
 8000218:	0800ecfc 	.word	0x0800ecfc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200002ac 	.word	0x200002ac
 8000234:	0800ecfc 	.word	0x0800ecfc

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295
 80005c4:	f000 b96a 	b.w	800089c <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9d08      	ldr	r5, [sp, #32]
 80005e6:	460c      	mov	r4, r1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d14e      	bne.n	800068a <__udivmoddi4+0xaa>
 80005ec:	4694      	mov	ip, r2
 80005ee:	458c      	cmp	ip, r1
 80005f0:	4686      	mov	lr, r0
 80005f2:	fab2 f282 	clz	r2, r2
 80005f6:	d962      	bls.n	80006be <__udivmoddi4+0xde>
 80005f8:	b14a      	cbz	r2, 800060e <__udivmoddi4+0x2e>
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	4091      	lsls	r1, r2
 8000600:	fa20 f303 	lsr.w	r3, r0, r3
 8000604:	fa0c fc02 	lsl.w	ip, ip, r2
 8000608:	4319      	orrs	r1, r3
 800060a:	fa00 fe02 	lsl.w	lr, r0, r2
 800060e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000612:	fa1f f68c 	uxth.w	r6, ip
 8000616:	fbb1 f4f7 	udiv	r4, r1, r7
 800061a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061e:	fb07 1114 	mls	r1, r7, r4, r1
 8000622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000626:	fb04 f106 	mul.w	r1, r4, r6
 800062a:	4299      	cmp	r1, r3
 800062c:	d90a      	bls.n	8000644 <__udivmoddi4+0x64>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f104 30ff 	add.w	r0, r4, #4294967295
 8000636:	f080 8112 	bcs.w	800085e <__udivmoddi4+0x27e>
 800063a:	4299      	cmp	r1, r3
 800063c:	f240 810f 	bls.w	800085e <__udivmoddi4+0x27e>
 8000640:	3c02      	subs	r4, #2
 8000642:	4463      	add	r3, ip
 8000644:	1a59      	subs	r1, r3, r1
 8000646:	fa1f f38e 	uxth.w	r3, lr
 800064a:	fbb1 f0f7 	udiv	r0, r1, r7
 800064e:	fb07 1110 	mls	r1, r7, r0, r1
 8000652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000656:	fb00 f606 	mul.w	r6, r0, r6
 800065a:	429e      	cmp	r6, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x94>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 31ff 	add.w	r1, r0, #4294967295
 8000666:	f080 80fc 	bcs.w	8000862 <__udivmoddi4+0x282>
 800066a:	429e      	cmp	r6, r3
 800066c:	f240 80f9 	bls.w	8000862 <__udivmoddi4+0x282>
 8000670:	4463      	add	r3, ip
 8000672:	3802      	subs	r0, #2
 8000674:	1b9b      	subs	r3, r3, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	2100      	movs	r1, #0
 800067c:	b11d      	cbz	r5, 8000686 <__udivmoddi4+0xa6>
 800067e:	40d3      	lsrs	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	e9c5 3200 	strd	r3, r2, [r5]
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	428b      	cmp	r3, r1
 800068c:	d905      	bls.n	800069a <__udivmoddi4+0xba>
 800068e:	b10d      	cbz	r5, 8000694 <__udivmoddi4+0xb4>
 8000690:	e9c5 0100 	strd	r0, r1, [r5]
 8000694:	2100      	movs	r1, #0
 8000696:	4608      	mov	r0, r1
 8000698:	e7f5      	b.n	8000686 <__udivmoddi4+0xa6>
 800069a:	fab3 f183 	clz	r1, r3
 800069e:	2900      	cmp	r1, #0
 80006a0:	d146      	bne.n	8000730 <__udivmoddi4+0x150>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xcc>
 80006a6:	4290      	cmp	r0, r2
 80006a8:	f0c0 80f0 	bcc.w	800088c <__udivmoddi4+0x2ac>
 80006ac:	1a86      	subs	r6, r0, r2
 80006ae:	eb64 0303 	sbc.w	r3, r4, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d0e6      	beq.n	8000686 <__udivmoddi4+0xa6>
 80006b8:	e9c5 6300 	strd	r6, r3, [r5]
 80006bc:	e7e3      	b.n	8000686 <__udivmoddi4+0xa6>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f040 8090 	bne.w	80007e4 <__udivmoddi4+0x204>
 80006c4:	eba1 040c 	sub.w	r4, r1, ip
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa1f f78c 	uxth.w	r7, ip
 80006d0:	2101      	movs	r1, #1
 80006d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb08 4416 	mls	r4, r8, r6, r4
 80006de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e2:	fb07 f006 	mul.w	r0, r7, r6
 80006e6:	4298      	cmp	r0, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x11c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0x11a>
 80006f4:	4298      	cmp	r0, r3
 80006f6:	f200 80cd 	bhi.w	8000894 <__udivmoddi4+0x2b4>
 80006fa:	4626      	mov	r6, r4
 80006fc:	1a1c      	subs	r4, r3, r0
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb4 f0f8 	udiv	r0, r4, r8
 8000706:	fb08 4410 	mls	r4, r8, r0, r4
 800070a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070e:	fb00 f707 	mul.w	r7, r0, r7
 8000712:	429f      	cmp	r7, r3
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x148>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 34ff 	add.w	r4, r0, #4294967295
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x146>
 8000720:	429f      	cmp	r7, r3
 8000722:	f200 80b0 	bhi.w	8000886 <__udivmoddi4+0x2a6>
 8000726:	4620      	mov	r0, r4
 8000728:	1bdb      	subs	r3, r3, r7
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	e7a5      	b.n	800067c <__udivmoddi4+0x9c>
 8000730:	f1c1 0620 	rsb	r6, r1, #32
 8000734:	408b      	lsls	r3, r1
 8000736:	fa22 f706 	lsr.w	r7, r2, r6
 800073a:	431f      	orrs	r7, r3
 800073c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000740:	fa04 f301 	lsl.w	r3, r4, r1
 8000744:	ea43 030c 	orr.w	r3, r3, ip
 8000748:	40f4      	lsrs	r4, r6
 800074a:	fa00 f801 	lsl.w	r8, r0, r1
 800074e:	0c38      	lsrs	r0, r7, #16
 8000750:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000754:	fbb4 fef0 	udiv	lr, r4, r0
 8000758:	fa1f fc87 	uxth.w	ip, r7
 800075c:	fb00 441e 	mls	r4, r0, lr, r4
 8000760:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000764:	fb0e f90c 	mul.w	r9, lr, ip
 8000768:	45a1      	cmp	r9, r4
 800076a:	fa02 f201 	lsl.w	r2, r2, r1
 800076e:	d90a      	bls.n	8000786 <__udivmoddi4+0x1a6>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000776:	f080 8084 	bcs.w	8000882 <__udivmoddi4+0x2a2>
 800077a:	45a1      	cmp	r9, r4
 800077c:	f240 8081 	bls.w	8000882 <__udivmoddi4+0x2a2>
 8000780:	f1ae 0e02 	sub.w	lr, lr, #2
 8000784:	443c      	add	r4, r7
 8000786:	eba4 0409 	sub.w	r4, r4, r9
 800078a:	fa1f f983 	uxth.w	r9, r3
 800078e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000792:	fb00 4413 	mls	r4, r0, r3, r4
 8000796:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079a:	fb03 fc0c 	mul.w	ip, r3, ip
 800079e:	45a4      	cmp	ip, r4
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x1d2>
 80007a2:	193c      	adds	r4, r7, r4
 80007a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a8:	d267      	bcs.n	800087a <__udivmoddi4+0x29a>
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d965      	bls.n	800087a <__udivmoddi4+0x29a>
 80007ae:	3b02      	subs	r3, #2
 80007b0:	443c      	add	r4, r7
 80007b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007b6:	fba0 9302 	umull	r9, r3, r0, r2
 80007ba:	eba4 040c 	sub.w	r4, r4, ip
 80007be:	429c      	cmp	r4, r3
 80007c0:	46ce      	mov	lr, r9
 80007c2:	469c      	mov	ip, r3
 80007c4:	d351      	bcc.n	800086a <__udivmoddi4+0x28a>
 80007c6:	d04e      	beq.n	8000866 <__udivmoddi4+0x286>
 80007c8:	b155      	cbz	r5, 80007e0 <__udivmoddi4+0x200>
 80007ca:	ebb8 030e 	subs.w	r3, r8, lr
 80007ce:	eb64 040c 	sbc.w	r4, r4, ip
 80007d2:	fa04 f606 	lsl.w	r6, r4, r6
 80007d6:	40cb      	lsrs	r3, r1
 80007d8:	431e      	orrs	r6, r3
 80007da:	40cc      	lsrs	r4, r1
 80007dc:	e9c5 6400 	strd	r6, r4, [r5]
 80007e0:	2100      	movs	r1, #0
 80007e2:	e750      	b.n	8000686 <__udivmoddi4+0xa6>
 80007e4:	f1c2 0320 	rsb	r3, r2, #32
 80007e8:	fa20 f103 	lsr.w	r1, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	fa24 f303 	lsr.w	r3, r4, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	430c      	orrs	r4, r1
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000800:	fa1f f78c 	uxth.w	r7, ip
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3110 	mls	r1, r8, r0, r3
 800080c:	0c23      	lsrs	r3, r4, #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb00 f107 	mul.w	r1, r0, r7
 8000816:	4299      	cmp	r1, r3
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x24c>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000822:	d22c      	bcs.n	800087e <__udivmoddi4+0x29e>
 8000824:	4299      	cmp	r1, r3
 8000826:	d92a      	bls.n	800087e <__udivmoddi4+0x29e>
 8000828:	3802      	subs	r0, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f1f8 	udiv	r1, r3, r8
 8000834:	fb08 3311 	mls	r3, r8, r1, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb01 f307 	mul.w	r3, r1, r7
 8000840:	42a3      	cmp	r3, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x276>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f101 36ff 	add.w	r6, r1, #4294967295
 800084c:	d213      	bcs.n	8000876 <__udivmoddi4+0x296>
 800084e:	42a3      	cmp	r3, r4
 8000850:	d911      	bls.n	8000876 <__udivmoddi4+0x296>
 8000852:	3902      	subs	r1, #2
 8000854:	4464      	add	r4, ip
 8000856:	1ae4      	subs	r4, r4, r3
 8000858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800085c:	e739      	b.n	80006d2 <__udivmoddi4+0xf2>
 800085e:	4604      	mov	r4, r0
 8000860:	e6f0      	b.n	8000644 <__udivmoddi4+0x64>
 8000862:	4608      	mov	r0, r1
 8000864:	e706      	b.n	8000674 <__udivmoddi4+0x94>
 8000866:	45c8      	cmp	r8, r9
 8000868:	d2ae      	bcs.n	80007c8 <__udivmoddi4+0x1e8>
 800086a:	ebb9 0e02 	subs.w	lr, r9, r2
 800086e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000872:	3801      	subs	r0, #1
 8000874:	e7a8      	b.n	80007c8 <__udivmoddi4+0x1e8>
 8000876:	4631      	mov	r1, r6
 8000878:	e7ed      	b.n	8000856 <__udivmoddi4+0x276>
 800087a:	4603      	mov	r3, r0
 800087c:	e799      	b.n	80007b2 <__udivmoddi4+0x1d2>
 800087e:	4630      	mov	r0, r6
 8000880:	e7d4      	b.n	800082c <__udivmoddi4+0x24c>
 8000882:	46d6      	mov	lr, sl
 8000884:	e77f      	b.n	8000786 <__udivmoddi4+0x1a6>
 8000886:	4463      	add	r3, ip
 8000888:	3802      	subs	r0, #2
 800088a:	e74d      	b.n	8000728 <__udivmoddi4+0x148>
 800088c:	4606      	mov	r6, r0
 800088e:	4623      	mov	r3, r4
 8000890:	4608      	mov	r0, r1
 8000892:	e70f      	b.n	80006b4 <__udivmoddi4+0xd4>
 8000894:	3e02      	subs	r6, #2
 8000896:	4463      	add	r3, ip
 8000898:	e730      	b.n	80006fc <__udivmoddi4+0x11c>
 800089a:	bf00      	nop

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(void) = 0;

void bldc_interface_init(void(*func)(unsigned char *data, unsigned int len)) {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	send_func = func;
 80008a8:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <bldc_interface_init+0x1c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	2000098c 	.word	0x2000098c

080008c0 <bldc_interface_send_packet>:
 * The packet data.
 *
 * @param len
 * The data length.
 */
void bldc_interface_send_packet(unsigned char *data, unsigned int len) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	if (send_func) {
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <bldc_interface_send_packet+0x24>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d004      	beq.n	80008dc <bldc_interface_send_packet+0x1c>
		send_func(data, len);
 80008d2:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <bldc_interface_send_packet+0x24>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6839      	ldr	r1, [r7, #0]
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	4798      	blx	r3
	}
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000098c 	.word	0x2000098c

080008e8 <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	if (!len) {
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f001 8205 	beq.w	8001d04 <bldc_interface_process_packet+0x141c>
		return;
	}

	if (forward_func) {
 80008fa:	4bc1      	ldr	r3, [pc, #772]	@ (8000c00 <bldc_interface_process_packet+0x318>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d006      	beq.n	8000910 <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 8000902:	4bbf      	ldr	r3, [pc, #764]	@ (8000c00 <bldc_interface_process_packet+0x318>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6839      	ldr	r1, [r7, #0]
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	4798      	blx	r3
		return;
 800090c:	f001 ba13 	b.w	8001d36 <bldc_interface_process_packet+0x144e>
	}

	int32_t ind = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
	unsigned char id = data[0];
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	74fb      	strb	r3, [r7, #19]
	data++;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3301      	adds	r3, #1
 8000922:	607b      	str	r3, [r7, #4]
	len--;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	3b01      	subs	r3, #1
 8000928:	603b      	str	r3, [r7, #0]

	switch (id) {
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	2b21      	cmp	r3, #33	@ 0x21
 800092e:	f201 81eb 	bhi.w	8001d08 <bldc_interface_process_packet+0x1420>
 8000932:	a201      	add	r2, pc, #4	@ (adr r2, 8000938 <bldc_interface_process_packet+0x50>)
 8000934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000938:	080009c1 	.word	0x080009c1
 800093c:	08001d09 	.word	0x08001d09
 8000940:	08001d09 	.word	0x08001d09
 8000944:	08001d09 	.word	0x08001d09
 8000948:	08000a0b 	.word	0x08000a0b
 800094c:	08001d09 	.word	0x08001d09
 8000950:	08001d09 	.word	0x08001d09
 8000954:	08001d09 	.word	0x08001d09
 8000958:	08001d09 	.word	0x08001d09
 800095c:	08001d09 	.word	0x08001d09
 8000960:	08001d09 	.word	0x08001d09
 8000964:	08001d09 	.word	0x08001d09
 8000968:	08001d09 	.word	0x08001d09
 800096c:	08001ce5 	.word	0x08001ce5
 8000970:	08000c91 	.word	0x08000c91
 8000974:	08000c91 	.word	0x08000c91
 8000978:	08001cf5 	.word	0x08001cf5
 800097c:	0800153d 	.word	0x0800153d
 8000980:	0800153d 	.word	0x0800153d
 8000984:	08001d09 	.word	0x08001d09
 8000988:	08001d09 	.word	0x08001d09
 800098c:	08000c25 	.word	0x08000c25
 8000990:	08000c45 	.word	0x08000c45
 8000994:	08001d09 	.word	0x08001d09
 8000998:	08001b4d 	.word	0x08001b4d
 800099c:	08001d09 	.word	0x08001d09
 80009a0:	08001d09 	.word	0x08001d09
 80009a4:	08001d09 	.word	0x08001d09
 80009a8:	08001d09 	.word	0x08001d09
 80009ac:	08001d09 	.word	0x08001d09
 80009b0:	08001d09 	.word	0x08001d09
 80009b4:	08001bf5 	.word	0x08001bf5
 80009b8:	08001c51 	.word	0x08001c51
 80009bc:	08001cad 	.word	0x08001cad
	case COMM_FW_VERSION:
		if (len == 2) {
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d117      	bne.n	80009f6 <bldc_interface_process_packet+0x10e>
			ind = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	60fa      	str	r2, [r7, #12]
 80009d0:	461a      	mov	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b8a      	ldr	r3, [pc, #552]	@ (8000c04 <bldc_interface_process_packet+0x31c>)
 80009dc:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	60fa      	str	r2, [r7, #12]
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b86      	ldr	r3, [pc, #536]	@ (8000c08 <bldc_interface_process_packet+0x320>)
 80009f0:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 80009f2:	f001 b9a0 	b.w	8001d36 <bldc_interface_process_packet+0x144e>
			fw_major = -1;
 80009f6:	4b83      	ldr	r3, [pc, #524]	@ (8000c04 <bldc_interface_process_packet+0x31c>)
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 80009fe:	4b82      	ldr	r3, [pc, #520]	@ (8000c08 <bldc_interface_process_packet+0x320>)
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	601a      	str	r2, [r3, #0]
		break;
 8000a06:	f001 b996 	b.w	8001d36 <bldc_interface_process_packet+0x144e>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f001 fb32 	bl	8002082 <buffer_get_float16>
 8000a1e:	eef0 7a40 	vmov.f32	s15, s0
 8000a22:	4b7a      	ldr	r3, [pc, #488]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a24:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f001 fb25 	bl	8002082 <buffer_get_float16>
 8000a38:	eef0 7a40 	vmov.f32	s15, s0
 8000a3c:	4b73      	ldr	r3, [pc, #460]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a3e:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4619      	mov	r1, r3
 8000a48:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f001 fb33 	bl	80020b8 <buffer_get_float32>
 8000a52:	eef0 7a40 	vmov.f32	s15, s0
 8000a56:	4b6d      	ldr	r3, [pc, #436]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a58:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4619      	mov	r1, r3
 8000a62:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f001 fb26 	bl	80020b8 <buffer_get_float32>
 8000a6c:	eef0 7a40 	vmov.f32	s15, s0
 8000a70:	4b66      	ldr	r3, [pc, #408]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a72:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f001 fb19 	bl	80020b8 <buffer_get_float32>
 8000a86:	eef0 7a40 	vmov.f32	s15, s0
 8000a8a:	4b60      	ldr	r3, [pc, #384]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a8c:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f001 fb0c 	bl	80020b8 <buffer_get_float32>
 8000aa0:	eef0 7a40 	vmov.f32	s15, s0
 8000aa4:	4b59      	ldr	r3, [pc, #356]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000aa6:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8000c14 <bldc_interface_process_packet+0x32c>
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f001 fae4 	bl	8002082 <buffer_get_float16>
 8000aba:	eef0 7a40 	vmov.f32	s15, s0
 8000abe:	4b53      	ldr	r3, [pc, #332]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000ac0:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4619      	mov	r1, r3
 8000aca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f001 faf2 	bl	80020b8 <buffer_get_float32>
 8000ad4:	eef0 7a40 	vmov.f32	s15, s0
 8000ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000ada:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f001 faca 	bl	8002082 <buffer_get_float16>
 8000aee:	eef0 7a40 	vmov.f32	s15, s0
 8000af2:	4b46      	ldr	r3, [pc, #280]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000af4:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f001 fad8 	bl	80020b8 <buffer_get_float32>
 8000b08:	eef0 7a40 	vmov.f32	s15, s0
 8000b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b0e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f001 facb 	bl	80020b8 <buffer_get_float32>
 8000b22:	eef0 7a40 	vmov.f32	s15, s0
 8000b26:	4b39      	ldr	r3, [pc, #228]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b28:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f001 fabe 	bl	80020b8 <buffer_get_float32>
 8000b3c:	eef0 7a40 	vmov.f32	s15, s0
 8000b40:	4b32      	ldr	r3, [pc, #200]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b42:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f001 fab1 	bl	80020b8 <buffer_get_float32>
 8000b56:	eef0 7a40 	vmov.f32	s15, s0
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b5c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f001 fa2b 	bl	8001fc2 <buffer_get_int32>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a27      	ldr	r2, [pc, #156]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b70:	6353      	str	r3, [r2, #52]	@ 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4619      	mov	r1, r3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f001 fa22 	bl	8001fc2 <buffer_get_int32>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a22      	ldr	r2, [pc, #136]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b82:	6393      	str	r3, [r2, #56]	@ 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60fa      	str	r2, [r7, #12]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		if (ind < (int)len) {
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	da0d      	bge.n	8000bbc <bldc_interface_process_packet+0x2d4>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8000c1c <bldc_interface_process_packet+0x334>
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f001 fa84 	bl	80020b8 <buffer_get_float32>
 8000bb0:	eef0 7a40 	vmov.f32	s15, s0
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bb6:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
 8000bba:	e003      	b.n	8000bc4 <bldc_interface_process_packet+0x2dc>
		} else {
			values.pid_pos = 0.0;
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		if (ind < (int)len) {
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	da0a      	bge.n	8000be2 <bldc_interface_process_packet+0x2fa>
			values.vesc_id = data[ind++];
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60fa      	str	r2, [r7, #12]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000be0:	e003      	b.n	8000bea <bldc_interface_process_packet+0x302>
		} else {
			values.vesc_id = 255;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000be4:	22ff      	movs	r2, #255	@ 0xff
 8000be6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		}

		if (rx_value_func) {
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <bldc_interface_process_packet+0x338>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f001 808c 	beq.w	8001d0c <bldc_interface_process_packet+0x1424>
			rx_value_func(&values);
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <bldc_interface_process_packet+0x338>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bfa:	4798      	blx	r3
		}
		break;
 8000bfc:	f001 b886 	b.w	8001d0c <bldc_interface_process_packet+0x1424>
 8000c00:	20000990 	.word	0x20000990
 8000c04:	2000070c 	.word	0x2000070c
 8000c08:	20000710 	.word	0x20000710
 8000c0c:	200006c4 	.word	0x200006c4
 8000c10:	42c80000 	.word	0x42c80000
 8000c14:	447a0000 	.word	0x447a0000
 8000c18:	461c4000 	.word	0x461c4000
 8000c1c:	49742400 	.word	0x49742400
 8000c20:	20000994 	.word	0x20000994

	case COMM_PRINT:
		if (rx_printf_func) {
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <bldc_interface_process_packet+0x398>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f001 8071 	beq.w	8001d10 <bldc_interface_process_packet+0x1428>
			data[len] = '\0';
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <bldc_interface_process_packet+0x398>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	4798      	blx	r3
		}
		break;
 8000c40:	f001 b866 	b.w	8001d10 <bldc_interface_process_packet+0x1428>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000c84 <bldc_interface_process_packet+0x39c>
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f001 fa30 	bl	80020b8 <buffer_get_float32>
 8000c58:	eef0 7a40 	vmov.f32	s15, s0
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <bldc_interface_process_packet+0x3a0>)
 8000c5e:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <bldc_interface_process_packet+0x3a4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f001 8054 	beq.w	8001d14 <bldc_interface_process_packet+0x142c>
			rx_rotor_pos_func(rotor_pos);
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <bldc_interface_process_packet+0x3a4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <bldc_interface_process_packet+0x3a0>)
 8000c72:	edd2 7a00 	vldr	s15, [r2]
 8000c76:	eeb0 0a67 	vmov.f32	s0, s15
 8000c7a:	4798      	blx	r3
		}
		break;
 8000c7c:	f001 b84a 	b.w	8001d14 <bldc_interface_process_packet+0x142c>
 8000c80:	20000998 	.word	0x20000998
 8000c84:	47c35000 	.word	0x47c35000
 8000c88:	20000714 	.word	0x20000714
 8000c8c:	2000099c 	.word	0x2000099c
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
		mcconf.pwm_mode = data[ind++];
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60fa      	str	r2, [r7, #12]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781a      	ldrb	r2, [r3, #0]
 8000ca2:	4bc7      	ldr	r3, [pc, #796]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ca4:	701a      	strb	r2, [r3, #0]
		mcconf.comm_mode = data[ind++];
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	60fa      	str	r2, [r7, #12]
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4bc2      	ldr	r3, [pc, #776]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cb6:	705a      	strb	r2, [r3, #1]
		mcconf.motor_type = data[ind++];
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60fa      	str	r2, [r7, #12]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	4bbe      	ldr	r3, [pc, #760]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cc8:	709a      	strb	r2, [r3, #2]
		mcconf.sensor_mode = data[ind++];
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	60fa      	str	r2, [r7, #12]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	4bb9      	ldr	r3, [pc, #740]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cda:	70da      	strb	r2, [r3, #3]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f001 fa04 	bl	80020f0 <buffer_get_float32_auto>
 8000ce8:	eef0 7a40 	vmov.f32	s15, s0
 8000cec:	4bb4      	ldr	r3, [pc, #720]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cee:	edc3 7a01 	vstr	s15, [r3, #4]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f001 f9f9 	bl	80020f0 <buffer_get_float32_auto>
 8000cfe:	eef0 7a40 	vmov.f32	s15, s0
 8000d02:	4baf      	ldr	r3, [pc, #700]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d04:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f001 f9ee 	bl	80020f0 <buffer_get_float32_auto>
 8000d14:	eef0 7a40 	vmov.f32	s15, s0
 8000d18:	4ba9      	ldr	r3, [pc, #676]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d1a:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f001 f9e3 	bl	80020f0 <buffer_get_float32_auto>
 8000d2a:	eef0 7a40 	vmov.f32	s15, s0
 8000d2e:	4ba4      	ldr	r3, [pc, #656]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d30:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f001 f9d8 	bl	80020f0 <buffer_get_float32_auto>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
 8000d44:	4b9e      	ldr	r3, [pc, #632]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d46:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f001 f9cd 	bl	80020f0 <buffer_get_float32_auto>
 8000d56:	eef0 7a40 	vmov.f32	s15, s0
 8000d5a:	4b99      	ldr	r3, [pc, #612]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d5c:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f001 f9c2 	bl	80020f0 <buffer_get_float32_auto>
 8000d6c:	eef0 7a40 	vmov.f32	s15, s0
 8000d70:	4b93      	ldr	r3, [pc, #588]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d72:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f001 f9b7 	bl	80020f0 <buffer_get_float32_auto>
 8000d82:	eef0 7a40 	vmov.f32	s15, s0
 8000d86:	4b8e      	ldr	r3, [pc, #568]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d88:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f001 f9ac 	bl	80020f0 <buffer_get_float32_auto>
 8000d98:	eef0 7a40 	vmov.f32	s15, s0
 8000d9c:	4b88      	ldr	r3, [pc, #544]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d9e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f001 f9a1 	bl	80020f0 <buffer_get_float32_auto>
 8000dae:	eef0 7a40 	vmov.f32	s15, s0
 8000db2:	4b83      	ldr	r3, [pc, #524]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000db4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f001 f996 	bl	80020f0 <buffer_get_float32_auto>
 8000dc4:	eef0 7a40 	vmov.f32	s15, s0
 8000dc8:	4b7d      	ldr	r3, [pc, #500]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000dca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f001 f98b 	bl	80020f0 <buffer_get_float32_auto>
 8000dda:	eef0 7a40 	vmov.f32	s15, s0
 8000dde:	4b78      	ldr	r3, [pc, #480]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000de0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4619      	mov	r1, r3
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f001 f980 	bl	80020f0 <buffer_get_float32_auto>
 8000df0:	eef0 7a40 	vmov.f32	s15, s0
 8000df4:	4b72      	ldr	r3, [pc, #456]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000df6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f001 f975 	bl	80020f0 <buffer_get_float32_auto>
 8000e06:	eef0 7a40 	vmov.f32	s15, s0
 8000e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e0c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		mcconf.l_slow_abs_current = data[ind++];
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	60fa      	str	r2, [r7, #12]
 8000e16:	461a      	mov	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b65      	ldr	r3, [pc, #404]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f001 f95b 	bl	80020f0 <buffer_get_float32_auto>
 8000e3a:	eef0 7a40 	vmov.f32	s15, s0
 8000e3e:	4b60      	ldr	r3, [pc, #384]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e40:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4619      	mov	r1, r3
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f001 f950 	bl	80020f0 <buffer_get_float32_auto>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
 8000e54:	4b5a      	ldr	r3, [pc, #360]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e56:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f001 f945 	bl	80020f0 <buffer_get_float32_auto>
 8000e66:	eef0 7a40 	vmov.f32	s15, s0
 8000e6a:	4b55      	ldr	r3, [pc, #340]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e6c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f001 f93a 	bl	80020f0 <buffer_get_float32_auto>
 8000e7c:	eef0 7a40 	vmov.f32	s15, s0
 8000e80:	4b4f      	ldr	r3, [pc, #316]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e82:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f001 f92f 	bl	80020f0 <buffer_get_float32_auto>
 8000e92:	eef0 7a40 	vmov.f32	s15, s0
 8000e96:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e98:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f001 f924 	bl	80020f0 <buffer_get_float32_auto>
 8000ea8:	eef0 7a40 	vmov.f32	s15, s0
 8000eac:	4b44      	ldr	r3, [pc, #272]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000eae:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f001 f919 	bl	80020f0 <buffer_get_float32_auto>
 8000ebe:	eef0 7a40 	vmov.f32	s15, s0
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ec4:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f001 f90e 	bl	80020f0 <buffer_get_float32_auto>
 8000ed4:	eef0 7a40 	vmov.f32	s15, s0
 8000ed8:	4b39      	ldr	r3, [pc, #228]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000eda:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 f903 	bl	80020f0 <buffer_get_float32_auto>
 8000eea:	eef0 7a40 	vmov.f32	s15, s0
 8000eee:	4b34      	ldr	r3, [pc, #208]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ef0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

		mcconf.lo_current_max = mcconf.l_current_max;
 8000ef4:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4a31      	ldr	r2, [pc, #196]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000efa:	6653      	str	r3, [r2, #100]	@ 0x64
		mcconf.lo_current_min = mcconf.l_current_min;
 8000efc:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f02:	6693      	str	r3, [r2, #104]	@ 0x68
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 8000f04:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f0a:	66d3      	str	r3, [r2, #108]	@ 0x6c
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f12:	6713      	str	r3, [r2, #112]	@ 0x70
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 8000f14:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4a29      	ldr	r2, [pc, #164]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f1a:	6753      	str	r3, [r2, #116]	@ 0x74
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4a27      	ldr	r2, [pc, #156]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f22:	6793      	str	r3, [r2, #120]	@ 0x78

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 f8e0 	bl	80020f0 <buffer_get_float32_auto>
 8000f30:	eef0 7a40 	vmov.f32	s15, s0
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f36:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f001 f8d5 	bl	80020f0 <buffer_get_float32_auto>
 8000f46:	eef0 7a40 	vmov.f32	s15, s0
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f4c:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f001 f8ca 	bl	80020f0 <buffer_get_float32_auto>
 8000f5c:	eef0 7a40 	vmov.f32	s15, s0
 8000f60:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f62:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f001 f8bf 	bl	80020f0 <buffer_get_float32_auto>
 8000f72:	eef0 7a40 	vmov.f32	s15, s0
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f78:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f001 f8b4 	bl	80020f0 <buffer_get_float32_auto>
 8000f88:	eef0 7a40 	vmov.f32	s15, s0
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f8e:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f001 f8a9 	bl	80020f0 <buffer_get_float32_auto>
 8000f9e:	eef0 7a40 	vmov.f32	s15, s0
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000fa4:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4619      	mov	r1, r3
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f001 f89e 	bl	80020f0 <buffer_get_float32_auto>
 8000fb4:	eef0 7a40 	vmov.f32	s15, s0
 8000fb8:	4b01      	ldr	r3, [pc, #4]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000fba:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
 8000fbe:	e001      	b.n	8000fc4 <bldc_interface_process_packet+0x6dc>
 8000fc0:	20000718 	.word	0x20000718

		memcpy(mcconf.hall_table, data + ind, 8);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	441a      	add	r2, r3
 8000fcc:	4bc9      	ldr	r3, [pc, #804]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8000fce:	3398      	adds	r3, #152	@ 0x98
 8000fd0:	6810      	ldr	r0, [r2, #0]
 8000fd2:	6851      	ldr	r1, [r2, #4]
 8000fd4:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3308      	adds	r3, #8
 8000fda:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f001 f884 	bl	80020f0 <buffer_get_float32_auto>
 8000fe8:	eef0 7a40 	vmov.f32	s15, s0
 8000fec:	4bc1      	ldr	r3, [pc, #772]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8000fee:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f001 f879 	bl	80020f0 <buffer_get_float32_auto>
 8000ffe:	eef0 7a40 	vmov.f32	s15, s0
 8001002:	4bbc      	ldr	r3, [pc, #752]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001004:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f001 f86e 	bl	80020f0 <buffer_get_float32_auto>
 8001014:	eef0 7a40 	vmov.f32	s15, s0
 8001018:	4bb6      	ldr	r3, [pc, #728]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800101a:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4619      	mov	r1, r3
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f001 f863 	bl	80020f0 <buffer_get_float32_auto>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	4bb1      	ldr	r3, [pc, #708]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001030:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f001 f858 	bl	80020f0 <buffer_get_float32_auto>
 8001040:	eef0 7a40 	vmov.f32	s15, s0
 8001044:	4bab      	ldr	r3, [pc, #684]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001046:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
		mcconf.foc_encoder_inverted = data[ind++];
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	60fa      	str	r2, [r7, #12]
 8001050:	461a      	mov	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf14      	ite	ne
 800105c:	2301      	movne	r3, #1
 800105e:	2300      	moveq	r3, #0
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4ba4      	ldr	r3, [pc, #656]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001064:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f001 f83e 	bl	80020f0 <buffer_get_float32_auto>
 8001074:	eef0 7a40 	vmov.f32	s15, s0
 8001078:	4b9e      	ldr	r3, [pc, #632]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800107a:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4619      	mov	r1, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f001 f833 	bl	80020f0 <buffer_get_float32_auto>
 800108a:	eef0 7a40 	vmov.f32	s15, s0
 800108e:	4b99      	ldr	r3, [pc, #612]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001090:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		mcconf.foc_sensor_mode = data[ind++];
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	60fa      	str	r2, [r7, #12]
 800109a:	461a      	mov	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	4b94      	ldr	r3, [pc, #592]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010a4:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f001 f81e 	bl	80020f0 <buffer_get_float32_auto>
 80010b4:	eef0 7a40 	vmov.f32	s15, s0
 80010b8:	4b8e      	ldr	r3, [pc, #568]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010ba:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f001 f813 	bl	80020f0 <buffer_get_float32_auto>
 80010ca:	eef0 7a40 	vmov.f32	s15, s0
 80010ce:	4b89      	ldr	r3, [pc, #548]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010d0:	edc3 7a36 	vstr	s15, [r3, #216]	@ 0xd8
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f001 f808 	bl	80020f0 <buffer_get_float32_auto>
 80010e0:	eef0 7a40 	vmov.f32	s15, s0
 80010e4:	4b83      	ldr	r3, [pc, #524]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010e6:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fffd 	bl	80020f0 <buffer_get_float32_auto>
 80010f6:	eef0 7a40 	vmov.f32	s15, s0
 80010fa:	4b7e      	ldr	r3, [pc, #504]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010fc:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fff2 	bl	80020f0 <buffer_get_float32_auto>
 800110c:	eef0 7a40 	vmov.f32	s15, s0
 8001110:	4b78      	ldr	r3, [pc, #480]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001112:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 ffe7 	bl	80020f0 <buffer_get_float32_auto>
 8001122:	eef0 7a40 	vmov.f32	s15, s0
 8001126:	4b73      	ldr	r3, [pc, #460]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001128:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4619      	mov	r1, r3
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 ffdc 	bl	80020f0 <buffer_get_float32_auto>
 8001138:	eef0 7a40 	vmov.f32	s15, s0
 800113c:	4b6d      	ldr	r3, [pc, #436]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800113e:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	4619      	mov	r1, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 ffd1 	bl	80020f0 <buffer_get_float32_auto>
 800114e:	eef0 7a40 	vmov.f32	s15, s0
 8001152:	4b68      	ldr	r3, [pc, #416]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001154:	edc3 7a37 	vstr	s15, [r3, #220]	@ 0xdc
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 ffc6 	bl	80020f0 <buffer_get_float32_auto>
 8001164:	eef0 7a40 	vmov.f32	s15, s0
 8001168:	4b62      	ldr	r3, [pc, #392]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800116a:	edc3 7a38 	vstr	s15, [r3, #224]	@ 0xe0
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4619      	mov	r1, r3
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 ffbb 	bl	80020f0 <buffer_get_float32_auto>
 800117a:	eef0 7a40 	vmov.f32	s15, s0
 800117e:	4b5d      	ldr	r3, [pc, #372]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001180:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 ffb0 	bl	80020f0 <buffer_get_float32_auto>
 8001190:	eef0 7a40 	vmov.f32	s15, s0
 8001194:	4b57      	ldr	r3, [pc, #348]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001196:	edc3 7a3a 	vstr	s15, [r3, #232]	@ 0xe8
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 ffa5 	bl	80020f0 <buffer_get_float32_auto>
 80011a6:	eef0 7a40 	vmov.f32	s15, s0
 80011aa:	4b52      	ldr	r3, [pc, #328]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011ac:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 ff9a 	bl	80020f0 <buffer_get_float32_auto>
 80011bc:	eef0 7a40 	vmov.f32	s15, s0
 80011c0:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011c2:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 ff8f 	bl	80020f0 <buffer_get_float32_auto>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
 80011d6:	4b47      	ldr	r3, [pc, #284]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011d8:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	441a      	add	r2, r3
 80011e4:	4b43      	ldr	r3, [pc, #268]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011e6:	33f9      	adds	r3, #249	@ 0xf9
 80011e8:	6811      	ldr	r1, [r2, #0]
 80011ea:	6852      	ldr	r2, [r2, #4]
 80011ec:	6019      	str	r1, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
		ind += 8;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3308      	adds	r3, #8
 80011f4:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 ff77 	bl	80020f0 <buffer_get_float32_auto>
 8001202:	eef0 7a40 	vmov.f32	s15, s0
 8001206:	4b3b      	ldr	r3, [pc, #236]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001208:	edc3 7a41 	vstr	s15, [r3, #260]	@ 0x104
		mcconf.foc_sample_v0_v7 = data[ind++];
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	60fa      	str	r2, [r7, #12]
 8001212:	461a      	mov	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf14      	ite	ne
 800121e:	2301      	movne	r3, #1
 8001220:	2300      	moveq	r3, #0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b33      	ldr	r3, [pc, #204]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001226:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
		mcconf.foc_sample_high_current = data[ind++];
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	60fa      	str	r2, [r7, #12]
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001244:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 ff4e 	bl	80020f0 <buffer_get_float32_auto>
 8001254:	eef0 7a40 	vmov.f32	s15, s0
 8001258:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800125a:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
		mcconf.foc_temp_comp = data[ind++];
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	60fa      	str	r2, [r7, #12]
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf14      	ite	ne
 8001270:	2301      	movne	r3, #1
 8001272:	2300      	moveq	r3, #0
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001278:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 ff34 	bl	80020f0 <buffer_get_float32_auto>
 8001288:	eef0 7a40 	vmov.f32	s15, s0
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800128e:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 ff29 	bl	80020f0 <buffer_get_float32_auto>
 800129e:	eef0 7a40 	vmov.f32	s15, s0
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012a4:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 ff1e 	bl	80020f0 <buffer_get_float32_auto>
 80012b4:	eef0 7a40 	vmov.f32	s15, s0
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012ba:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 ff13 	bl	80020f0 <buffer_get_float32_auto>
 80012ca:	eef0 7a40 	vmov.f32	s15, s0
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012d0:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 ff08 	bl	80020f0 <buffer_get_float32_auto>
 80012e0:	eef0 7a40 	vmov.f32	s15, s0
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012e6:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	e002      	b.n	80012f8 <bldc_interface_process_packet+0xa10>
 80012f2:	bf00      	nop
 80012f4:	20000718 	.word	0x20000718
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 fef9 	bl	80020f0 <buffer_get_float32_auto>
 80012fe:	eef0 7a40 	vmov.f32	s15, s0
 8001302:	4b8c      	ldr	r3, [pc, #560]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001304:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 feee 	bl	80020f0 <buffer_get_float32_auto>
 8001314:	eef0 7a40 	vmov.f32	s15, s0
 8001318:	4b86      	ldr	r3, [pc, #536]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800131a:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
		mcconf.s_pid_allow_braking = data[ind++];
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	60fa      	str	r2, [r7, #12]
 8001324:	461a      	mov	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b7f      	ldr	r3, [pc, #508]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001338:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	4619      	mov	r1, r3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fed4 	bl	80020f0 <buffer_get_float32_auto>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	4b79      	ldr	r3, [pc, #484]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800134e:	edc3 7a4d 	vstr	s15, [r3, #308]	@ 0x134
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 fec9 	bl	80020f0 <buffer_get_float32_auto>
 800135e:	eef0 7a40 	vmov.f32	s15, s0
 8001362:	4b74      	ldr	r3, [pc, #464]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001364:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 febe 	bl	80020f0 <buffer_get_float32_auto>
 8001374:	eef0 7a40 	vmov.f32	s15, s0
 8001378:	4b6e      	ldr	r3, [pc, #440]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800137a:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4619      	mov	r1, r3
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 feb3 	bl	80020f0 <buffer_get_float32_auto>
 800138a:	eef0 7a40 	vmov.f32	s15, s0
 800138e:	4b69      	ldr	r3, [pc, #420]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001390:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fea8 	bl	80020f0 <buffer_get_float32_auto>
 80013a0:	eef0 7a40 	vmov.f32	s15, s0
 80013a4:	4b63      	ldr	r3, [pc, #396]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013a6:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 fe9d 	bl	80020f0 <buffer_get_float32_auto>
 80013b6:	eef0 7a40 	vmov.f32	s15, s0
 80013ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013bc:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 fe92 	bl	80020f0 <buffer_get_float32_auto>
 80013cc:	eef0 7a40 	vmov.f32	s15, s0
 80013d0:	4b58      	ldr	r3, [pc, #352]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013d2:	edc3 7a53 	vstr	s15, [r3, #332]	@ 0x14c
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	4619      	mov	r1, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fe87 	bl	80020f0 <buffer_get_float32_auto>
 80013e2:	eef0 7a40 	vmov.f32	s15, s0
 80013e6:	4b53      	ldr	r3, [pc, #332]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013e8:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fe7c 	bl	80020f0 <buffer_get_float32_auto>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013fe:	edc3 7a55 	vstr	s15, [r3, #340]	@ 0x154

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 fdda 	bl	8001fc2 <buffer_get_int32>
 800140e:	4603      	mov	r3, r0
 8001410:	4a48      	ldr	r2, [pc, #288]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001412:	f8c2 3158 	str.w	r3, [r2, #344]	@ 0x158
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	4619      	mov	r1, r3
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fe67 	bl	80020f0 <buffer_get_float32_auto>
 8001422:	eef0 7a40 	vmov.f32	s15, s0
 8001426:	4b43      	ldr	r3, [pc, #268]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001428:	edc3 7a57 	vstr	s15, [r3, #348]	@ 0x15c
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4619      	mov	r1, r3
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fe5c 	bl	80020f0 <buffer_get_float32_auto>
 8001438:	eef0 7a40 	vmov.f32	s15, s0
 800143c:	4b3d      	ldr	r3, [pc, #244]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800143e:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	4619      	mov	r1, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fdea 	bl	8002022 <buffer_get_uint32>
 800144e:	4603      	mov	r3, r0
 8001450:	4a38      	ldr	r2, [pc, #224]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001452:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
		mcconf.m_sensor_port_mode = data[ind++];
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	60fa      	str	r2, [r7, #12]
 800145c:	461a      	mov	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001466:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
		mcconf.m_invert_direction = data[ind++];
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	60fa      	str	r2, [r7, #12]
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf14      	ite	ne
 800147c:	2301      	movne	r3, #1
 800147e:	2300      	moveq	r3, #0
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001484:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
		mcconf.m_drv8301_oc_mode = data[ind++];
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60fa      	str	r2, [r7, #12]
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001498:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
		mcconf.m_drv8301_oc_adj = data[ind++];
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60fa      	str	r2, [r7, #12]
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014ae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4619      	mov	r1, r3
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fe19 	bl	80020f0 <buffer_get_float32_auto>
 80014be:	eef0 7a40 	vmov.f32	s15, s0
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014c4:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	4619      	mov	r1, r3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fe0e 	bl	80020f0 <buffer_get_float32_auto>
 80014d4:	eef0 7a40 	vmov.f32	s15, s0
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014da:	edc3 7a5d 	vstr	s15, [r3, #372]	@ 0x174
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fe03 	bl	80020f0 <buffer_get_float32_auto>
 80014ea:	eef0 7a40 	vmov.f32	s15, s0
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014f0:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fdf8 	bl	80020f0 <buffer_get_float32_auto>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001506:	edc3 7a5f 	vstr	s15, [r3, #380]	@ 0x17c
		mcconf.m_out_aux_mode = data[ind++];
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	60fa      	str	r2, [r7, #12]
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800151a:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180

		if (rx_mcconf_func) {
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <bldc_interface_process_packet+0xc50>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 83f8 	beq.w	8001d18 <bldc_interface_process_packet+0x1430>
			rx_mcconf_func(&mcconf);
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <bldc_interface_process_packet+0xc50>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4801      	ldr	r0, [pc, #4]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800152e:	4798      	blx	r3
		}
		break;
 8001530:	e3f2      	b.n	8001d18 <bldc_interface_process_packet+0x1430>
 8001532:	bf00      	nop
 8001534:	20000718 	.word	0x20000718
 8001538:	200009a0 	.word	0x200009a0

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
		appconf.controller_id = data[ind++];
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60fa      	str	r2, [r7, #12]
 8001546:	461a      	mov	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	4bba      	ldr	r3, [pc, #744]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001550:	701a      	strb	r2, [r3, #0]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4619      	mov	r1, r3
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fd62 	bl	8002022 <buffer_get_uint32>
 800155e:	4603      	mov	r3, r0
 8001560:	4ab5      	ldr	r2, [pc, #724]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001562:	6053      	str	r3, [r2, #4]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fdc0 	bl	80020f0 <buffer_get_float32_auto>
 8001570:	eef0 7a40 	vmov.f32	s15, s0
 8001574:	4bb0      	ldr	r3, [pc, #704]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001576:	edc3 7a02 	vstr	s15, [r3, #8]
		appconf.send_can_status = data[ind++];
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	60fa      	str	r2, [r7, #12]
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf14      	ite	ne
 800158c:	2301      	movne	r3, #1
 800158e:	2300      	moveq	r3, #0
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4ba9      	ldr	r3, [pc, #676]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001594:	731a      	strb	r2, [r3, #12]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4619      	mov	r1, r3
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fced 	bl	8001f7c <buffer_get_uint16>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4ba4      	ldr	r3, [pc, #656]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015a8:	611a      	str	r2, [r3, #16]
		appconf.can_baud_rate = data[ind++];
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	60fa      	str	r2, [r7, #12]
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b9f      	ldr	r3, [pc, #636]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015ba:	751a      	strb	r2, [r3, #20]

		appconf.app_to_use = data[ind++];
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60fa      	str	r2, [r7, #12]
 80015c2:	461a      	mov	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	4b9b      	ldr	r3, [pc, #620]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015cc:	755a      	strb	r2, [r3, #21]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	60fa      	str	r2, [r7, #12]
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	4b96      	ldr	r3, [pc, #600]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015de:	761a      	strb	r2, [r3, #24]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fd82 	bl	80020f0 <buffer_get_float32_auto>
 80015ec:	eef0 7a40 	vmov.f32	s15, s0
 80015f0:	4b91      	ldr	r3, [pc, #580]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015f2:	edc3 7a07 	vstr	s15, [r3, #28]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4619      	mov	r1, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fd77 	bl	80020f0 <buffer_get_float32_auto>
 8001602:	eef0 7a40 	vmov.f32	s15, s0
 8001606:	4b8c      	ldr	r3, [pc, #560]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001608:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 fd6c 	bl	80020f0 <buffer_get_float32_auto>
 8001618:	eef0 7a40 	vmov.f32	s15, s0
 800161c:	4b86      	ldr	r3, [pc, #536]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800161e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fd61 	bl	80020f0 <buffer_get_float32_auto>
 800162e:	eef0 7a40 	vmov.f32	s15, s0
 8001632:	4b81      	ldr	r3, [pc, #516]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001634:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fd56 	bl	80020f0 <buffer_get_float32_auto>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
 8001648:	4b7b      	ldr	r3, [pc, #492]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800164a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		appconf.app_ppm_conf.median_filter = data[ind++];
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	60fa      	str	r2, [r7, #12]
 8001654:	461a      	mov	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b74      	ldr	r3, [pc, #464]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		appconf.app_ppm_conf.safe_start = data[ind++];
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60fa      	str	r2, [r7, #12]
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf14      	ite	ne
 800167e:	2301      	movne	r3, #1
 8001680:	2300      	moveq	r3, #0
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b6c      	ldr	r3, [pc, #432]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001686:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4619      	mov	r1, r3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fd2d 	bl	80020f0 <buffer_get_float32_auto>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
 800169a:	4b67      	ldr	r3, [pc, #412]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800169c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fd22 	bl	80020f0 <buffer_get_float32_auto>
 80016ac:	eef0 7a40 	vmov.f32	s15, s0
 80016b0:	4b61      	ldr	r3, [pc, #388]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016b2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60fa      	str	r2, [r7, #12]
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fd0d 	bl	80020f0 <buffer_get_float32_auto>
 80016d6:	eef0 7a40 	vmov.f32	s15, s0
 80016da:	4b57      	ldr	r3, [pc, #348]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016dc:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fd02 	bl	80020f0 <buffer_get_float32_auto>
 80016ec:	eef0 7a40 	vmov.f32	s15, s0
 80016f0:	4b51      	ldr	r3, [pc, #324]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016f2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		appconf.app_ppm_conf.multi_esc = data[ind++];
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	60fa      	str	r2, [r7, #12]
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b4a      	ldr	r3, [pc, #296]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001710:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		appconf.app_ppm_conf.tc = data[ind++];
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60fa      	str	r2, [r7, #12]
 800171a:	461a      	mov	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	bf14      	ite	ne
 8001726:	2301      	movne	r3, #1
 8001728:	2300      	moveq	r3, #0
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b42      	ldr	r3, [pc, #264]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800172e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fcd9 	bl	80020f0 <buffer_get_float32_auto>
 800173e:	eef0 7a40 	vmov.f32	s15, s0
 8001742:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001744:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

		appconf.app_adc_conf.ctrl_type = data[ind++];
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60fa      	str	r2, [r7, #12]
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fcc4 	bl	80020f0 <buffer_get_float32_auto>
 8001768:	eef0 7a40 	vmov.f32	s15, s0
 800176c:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800176e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fcb9 	bl	80020f0 <buffer_get_float32_auto>
 800177e:	eef0 7a40 	vmov.f32	s15, s0
 8001782:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001784:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fcae 	bl	80020f0 <buffer_get_float32_auto>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800179a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fca3 	bl	80020f0 <buffer_get_float32_auto>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017b0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4619      	mov	r1, r3
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fc98 	bl	80020f0 <buffer_get_float32_auto>
 80017c0:	eef0 7a40 	vmov.f32	s15, s0
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017c6:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fc8d 	bl	80020f0 <buffer_get_float32_auto>
 80017d6:	eef0 7a40 	vmov.f32	s15, s0
 80017da:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017dc:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
		appconf.app_adc_conf.use_filter = data[ind++];
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60fa      	str	r2, [r7, #12]
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017fa:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
		appconf.app_adc_conf.safe_start = data[ind++];
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	60fa      	str	r2, [r7, #12]
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001818:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60fa      	str	r2, [r7, #12]
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2da      	uxtb	r2, r3
 8001834:	e002      	b.n	800183c <bldc_interface_process_packet+0xf54>
 8001836:	bf00      	nop
 8001838:	2000089c 	.word	0x2000089c
 800183c:	4bb6      	ldr	r3, [pc, #728]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800183e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	60fa      	str	r2, [r7, #12]
 8001848:	461a      	mov	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4baf      	ldr	r3, [pc, #700]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800185c:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60fa      	str	r2, [r7, #12]
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4ba7      	ldr	r3, [pc, #668]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800187a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	60fa      	str	r2, [r7, #12]
 8001884:	461a      	mov	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4ba0      	ldr	r3, [pc, #640]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001898:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fc24 	bl	80020f0 <buffer_get_float32_auto>
 80018a8:	eef0 7a40 	vmov.f32	s15, s0
 80018ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018ae:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4619      	mov	r1, r3
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fc19 	bl	80020f0 <buffer_get_float32_auto>
 80018be:	eef0 7a40 	vmov.f32	s15, s0
 80018c2:	4b95      	ldr	r3, [pc, #596]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018c4:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	60fa      	str	r2, [r7, #12]
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	4b90      	ldr	r3, [pc, #576]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018d8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	4619      	mov	r1, r3
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fc04 	bl	80020f0 <buffer_get_float32_auto>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	4b8a      	ldr	r3, [pc, #552]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018ee:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fbf9 	bl	80020f0 <buffer_get_float32_auto>
 80018fe:	eef0 7a40 	vmov.f32	s15, s0
 8001902:	4b85      	ldr	r3, [pc, #532]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001904:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
		appconf.app_adc_conf.multi_esc = data[ind++];
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60fa      	str	r2, [r7, #12]
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b7d      	ldr	r3, [pc, #500]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001922:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		appconf.app_adc_conf.tc = data[ind++];
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	60fa      	str	r2, [r7, #12]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b76      	ldr	r3, [pc, #472]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001940:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fbd0 	bl	80020f0 <buffer_get_float32_auto>
 8001950:	eef0 7a40 	vmov.f32	s15, s0
 8001954:	4b70      	ldr	r3, [pc, #448]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001956:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fb0b 	bl	8001f7c <buffer_get_uint16>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b6b      	ldr	r3, [pc, #428]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800196c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4619      	mov	r1, r3
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fb53 	bl	8002022 <buffer_get_uint32>
 800197c:	4603      	mov	r3, r0
 800197e:	4a66      	ldr	r2, [pc, #408]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001980:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60fa      	str	r2, [r7, #12]
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	4b61      	ldr	r3, [pc, #388]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001994:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fba6 	bl	80020f0 <buffer_get_float32_auto>
 80019a4:	eef0 7a40 	vmov.f32	s15, s0
 80019a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019aa:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fb9b 	bl	80020f0 <buffer_get_float32_auto>
 80019ba:	eef0 7a40 	vmov.f32	s15, s0
 80019be:	4b56      	ldr	r3, [pc, #344]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019c0:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	4619      	mov	r1, r3
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fb90 	bl	80020f0 <buffer_get_float32_auto>
 80019d0:	eef0 7a40 	vmov.f32	s15, s0
 80019d4:	4b50      	ldr	r3, [pc, #320]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019d6:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fb85 	bl	80020f0 <buffer_get_float32_auto>
 80019e6:	eef0 7a40 	vmov.f32	s15, s0
 80019ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019ec:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fb7a 	bl	80020f0 <buffer_get_float32_auto>
 80019fc:	eef0 7a40 	vmov.f32	s15, s0
 8001a00:	4b45      	ldr	r3, [pc, #276]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a02:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fb6f 	bl	80020f0 <buffer_get_float32_auto>
 8001a12:	eef0 7a40 	vmov.f32	s15, s0
 8001a16:	4b40      	ldr	r3, [pc, #256]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a18:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60fa      	str	r2, [r7, #12]
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a2c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
		appconf.app_chuk_conf.multi_esc = data[ind++];
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60fa      	str	r2, [r7, #12]
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a4a:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
		appconf.app_chuk_conf.tc = data[ind++];
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	60fa      	str	r2, [r7, #12]
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf14      	ite	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	2300      	moveq	r3, #0
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b2c      	ldr	r3, [pc, #176]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a68:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fb3c 	bl	80020f0 <buffer_get_float32_auto>
 8001a78:	eef0 7a40 	vmov.f32	s15, s0
 8001a7c:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a7e:	edc3 7a2e 	vstr	s15, [r3, #184]	@ 0xb8

		appconf.app_nrf_conf.speed = data[ind++];
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60fa      	str	r2, [r7, #12]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	4b21      	ldr	r3, [pc, #132]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a92:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
		appconf.app_nrf_conf.power = data[ind++];
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60fa      	str	r2, [r7, #12]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001aa6:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
		appconf.app_nrf_conf.crc_type = data[ind++];
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	60fa      	str	r2, [r7, #12]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001aba:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
		appconf.app_nrf_conf.retry_delay = data[ind++];
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	60fa      	str	r2, [r7, #12]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001ace:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
		appconf.app_nrf_conf.retries = data[ind++];
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	60fa      	str	r2, [r7, #12]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001ae2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		appconf.app_nrf_conf.channel = data[ind++];
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	60fa      	str	r2, [r7, #12]
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001af6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	461a      	mov	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	441a      	add	r2, r3
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001b04:	33c2      	adds	r3, #194	@ 0xc2
 8001b06:	8811      	ldrh	r1, [r2, #0]
 8001b08:	7892      	ldrb	r2, [r2, #2]
 8001b0a:	8019      	strh	r1, [r3, #0]
 8001b0c:	709a      	strb	r2, [r3, #2]
		ind += 3;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3303      	adds	r3, #3
 8001b12:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	e001      	b.n	8001b1c <bldc_interface_process_packet+0x1234>
 8001b18:	2000089c 	.word	0x2000089c
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	60fa      	str	r2, [r7, #12]
 8001b20:	461a      	mov	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b82      	ldr	r3, [pc, #520]	@ (8001d3c <bldc_interface_process_packet+0x1454>)
 8001b34:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

		if (rx_appconf_func) {
 8001b38:	4b81      	ldr	r3, [pc, #516]	@ (8001d40 <bldc_interface_process_packet+0x1458>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80ed 	beq.w	8001d1c <bldc_interface_process_packet+0x1434>
			rx_appconf_func(&appconf);
 8001b42:	4b7f      	ldr	r3, [pc, #508]	@ (8001d40 <bldc_interface_process_packet+0x1458>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	487d      	ldr	r0, [pc, #500]	@ (8001d3c <bldc_interface_process_packet+0x1454>)
 8001b48:	4798      	blx	r3
		}
		break;
 8001b4a:	e0e7      	b.n	8001d1c <bldc_interface_process_packet+0x1434>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 8001d44 <bldc_interface_process_packet+0x145c>
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 faac 	bl	80020b8 <buffer_get_float32>
 8001b60:	eef0 7a40 	vmov.f32	s15, s0
 8001b64:	4b78      	ldr	r3, [pc, #480]	@ (8001d48 <bldc_interface_process_packet+0x1460>)
 8001b66:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8001d44 <bldc_interface_process_packet+0x145c>
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fa9f 	bl	80020b8 <buffer_get_float32>
 8001b7a:	eef0 7a40 	vmov.f32	s15, s0
 8001b7e:	4b73      	ldr	r3, [pc, #460]	@ (8001d4c <bldc_interface_process_packet+0x1464>)
 8001b80:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e00f      	b.n	8001baa <bldc_interface_process_packet+0x12c2>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	60fa      	str	r2, [r7, #12]
 8001b90:	461a      	mov	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b259      	sxtb	r1, r3
 8001b9a:	4a6d      	ldr	r2, [pc, #436]	@ (8001d50 <bldc_interface_process_packet+0x1468>)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b07      	cmp	r3, #7
 8001bae:	ddec      	ble.n	8001b8a <bldc_interface_process_packet+0x12a2>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60fa      	str	r2, [r7, #12]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b25a      	sxtb	r2, r3
 8001bc0:	4b64      	ldr	r3, [pc, #400]	@ (8001d54 <bldc_interface_process_packet+0x146c>)
 8001bc2:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 8001bc4:	4b64      	ldr	r3, [pc, #400]	@ (8001d58 <bldc_interface_process_packet+0x1470>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a9 	beq.w	8001d20 <bldc_interface_process_packet+0x1438>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 8001bce:	4b62      	ldr	r3, [pc, #392]	@ (8001d58 <bldc_interface_process_packet+0x1470>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a5d      	ldr	r2, [pc, #372]	@ (8001d48 <bldc_interface_process_packet+0x1460>)
 8001bd4:	edd2 7a00 	vldr	s15, [r2]
 8001bd8:	4a5c      	ldr	r2, [pc, #368]	@ (8001d4c <bldc_interface_process_packet+0x1464>)
 8001bda:	ed92 7a00 	vldr	s14, [r2]
 8001bde:	4a5d      	ldr	r2, [pc, #372]	@ (8001d54 <bldc_interface_process_packet+0x146c>)
 8001be0:	f992 2000 	ldrsb.w	r2, [r2]
 8001be4:	4611      	mov	r1, r2
 8001be6:	485a      	ldr	r0, [pc, #360]	@ (8001d50 <bldc_interface_process_packet+0x1468>)
 8001be8:	eef0 0a47 	vmov.f32	s1, s14
 8001bec:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf0:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 8001bf2:	e095      	b.n	8001d20 <bldc_interface_process_packet+0x1438>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fa58 	bl	80020b8 <buffer_get_float32>
 8001c08:	eef0 7a40 	vmov.f32	s15, s0
 8001c0c:	4b54      	ldr	r3, [pc, #336]	@ (8001d60 <bldc_interface_process_packet+0x1478>)
 8001c0e:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4619      	mov	r1, r3
 8001c18:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fa4b 	bl	80020b8 <buffer_get_float32>
 8001c22:	eef0 7a40 	vmov.f32	s15, s0
 8001c26:	4b4f      	ldr	r3, [pc, #316]	@ (8001d64 <bldc_interface_process_packet+0x147c>)
 8001c28:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 8001c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001d68 <bldc_interface_process_packet+0x1480>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d077      	beq.n	8001d24 <bldc_interface_process_packet+0x143c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 8001c34:	4b4c      	ldr	r3, [pc, #304]	@ (8001d68 <bldc_interface_process_packet+0x1480>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a49      	ldr	r2, [pc, #292]	@ (8001d60 <bldc_interface_process_packet+0x1478>)
 8001c3a:	edd2 7a00 	vldr	s15, [r2]
 8001c3e:	4a49      	ldr	r2, [pc, #292]	@ (8001d64 <bldc_interface_process_packet+0x147c>)
 8001c40:	ed92 7a00 	vldr	s14, [r2]
 8001c44:	eef0 0a47 	vmov.f32	s1, s14
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	4798      	blx	r3
		}
		break;
 8001c4e:	e069      	b.n	8001d24 <bldc_interface_process_packet+0x143c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fa2a 	bl	80020b8 <buffer_get_float32>
 8001c64:	eef0 7a40 	vmov.f32	s15, s0
 8001c68:	4b40      	ldr	r3, [pc, #256]	@ (8001d6c <bldc_interface_process_packet+0x1484>)
 8001c6a:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4619      	mov	r1, r3
 8001c74:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fa1d 	bl	80020b8 <buffer_get_float32>
 8001c7e:	eef0 7a40 	vmov.f32	s15, s0
 8001c82:	4b3b      	ldr	r3, [pc, #236]	@ (8001d70 <bldc_interface_process_packet+0x1488>)
 8001c84:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 8001c88:	4b3a      	ldr	r3, [pc, #232]	@ (8001d74 <bldc_interface_process_packet+0x148c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d04b      	beq.n	8001d28 <bldc_interface_process_packet+0x1440>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 8001c90:	4b38      	ldr	r3, [pc, #224]	@ (8001d74 <bldc_interface_process_packet+0x148c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a35      	ldr	r2, [pc, #212]	@ (8001d6c <bldc_interface_process_packet+0x1484>)
 8001c96:	edd2 7a00 	vldr	s15, [r2]
 8001c9a:	4a35      	ldr	r2, [pc, #212]	@ (8001d70 <bldc_interface_process_packet+0x1488>)
 8001c9c:	ed92 7a00 	vldr	s14, [r2]
 8001ca0:	eef0 0a47 	vmov.f32	s1, s14
 8001ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca8:	4798      	blx	r3
		}
		break;
 8001caa:	e03d      	b.n	8001d28 <bldc_interface_process_packet+0x1440>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f9fc 	bl	80020b8 <buffer_get_float32>
 8001cc0:	eef0 7a40 	vmov.f32	s15, s0
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <bldc_interface_process_packet+0x1490>)
 8001cc6:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <bldc_interface_process_packet+0x1494>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d02c      	beq.n	8001d2c <bldc_interface_process_packet+0x1444>
			rx_dec_chuk_func(dec_chuk);
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <bldc_interface_process_packet+0x1494>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a28      	ldr	r2, [pc, #160]	@ (8001d78 <bldc_interface_process_packet+0x1490>)
 8001cd8:	edd2 7a00 	vldr	s15, [r2]
 8001cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce0:	4798      	blx	r3
		}
		break;
 8001ce2:	e023      	b.n	8001d2c <bldc_interface_process_packet+0x1444>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 8001ce4:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <bldc_interface_process_packet+0x1498>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d021      	beq.n	8001d30 <bldc_interface_process_packet+0x1448>
			rx_mcconf_received_func();
 8001cec:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <bldc_interface_process_packet+0x1498>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4798      	blx	r3
		}
		break;
 8001cf2:	e01d      	b.n	8001d30 <bldc_interface_process_packet+0x1448>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <bldc_interface_process_packet+0x149c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01b      	beq.n	8001d34 <bldc_interface_process_packet+0x144c>
			rx_appconf_received_func();
 8001cfc:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <bldc_interface_process_packet+0x149c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4798      	blx	r3
		}
		break;
 8001d02:	e017      	b.n	8001d34 <bldc_interface_process_packet+0x144c>
		return;
 8001d04:	bf00      	nop
 8001d06:	e016      	b.n	8001d36 <bldc_interface_process_packet+0x144e>

	default:
		break;
 8001d08:	bf00      	nop
 8001d0a:	e014      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d0c:	bf00      	nop
 8001d0e:	e012      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d10:	bf00      	nop
 8001d12:	e010      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d14:	bf00      	nop
 8001d16:	e00e      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d18:	bf00      	nop
 8001d1a:	e00c      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d1c:	bf00      	nop
 8001d1e:	e00a      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d20:	bf00      	nop
 8001d22:	e008      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d24:	bf00      	nop
 8001d26:	e006      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d28:	bf00      	nop
 8001d2a:	e004      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d2c:	bf00      	nop
 8001d2e:	e002      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d30:	bf00      	nop
 8001d32:	e000      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d34:	bf00      	nop
	}
}
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2000089c 	.word	0x2000089c
 8001d40:	200009a4 	.word	0x200009a4
 8001d44:	447a0000 	.word	0x447a0000
 8001d48:	20000964 	.word	0x20000964
 8001d4c:	20000968 	.word	0x20000968
 8001d50:	2000096c 	.word	0x2000096c
 8001d54:	20000974 	.word	0x20000974
 8001d58:	200009a8 	.word	0x200009a8
 8001d5c:	49742400 	.word	0x49742400
 8001d60:	20000978 	.word	0x20000978
 8001d64:	2000097c 	.word	0x2000097c
 8001d68:	200009ac 	.word	0x200009ac
 8001d6c:	20000980 	.word	0x20000980
 8001d70:	20000984 	.word	0x20000984
 8001d74:	200009b0 	.word	0x200009b0
 8001d78:	20000988 	.word	0x20000988
 8001d7c:	200009b4 	.word	0x200009b4
 8001d80:	200009b8 	.word	0x200009b8
 8001d84:	200009bc 	.word	0x200009bc

08001d88 <bldc_interface_set_rpm>:
	send_buffer[send_index++] = COMM_SET_CURRENT_BRAKE;
	buffer_append_float32(send_buffer, current, 1000.0, &send_index);
	send_packet_no_fwd(send_buffer, send_index);
}

void bldc_interface_set_rpm(int rpm) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	if (motor_control_set_func) {
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <bldc_interface_set_rpm+0x58>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <bldc_interface_set_rpm+0x28>
		motor_control_set_func(MOTOR_CONTROL_RPM, rpm);
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <bldc_interface_set_rpm+0x58>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	ee07 2a90 	vmov	s15, r2
 8001da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da6:	eeb0 0a67 	vmov.f32	s0, s15
 8001daa:	2003      	movs	r0, #3
 8001dac:	4798      	blx	r3
 8001dae:	e013      	b.n	8001dd8 <bldc_interface_set_rpm+0x50>
		return;
	}
	int32_t send_index = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
	send_buffer[send_index++] = COMM_SET_RPM;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60fa      	str	r2, [r7, #12]
 8001dba:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <bldc_interface_set_rpm+0x5c>)
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	54d1      	strb	r1, [r2, r3]
	buffer_append_int32(send_buffer, rpm, &send_index);
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4806      	ldr	r0, [pc, #24]	@ (8001de4 <bldc_interface_set_rpm+0x5c>)
 8001dca:	f000 f879 	bl	8001ec0 <buffer_append_int32>
	send_packet_no_fwd(send_buffer, send_index);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4804      	ldr	r0, [pc, #16]	@ (8001de4 <bldc_interface_set_rpm+0x5c>)
 8001dd4:	f000 f808 	bl	8001de8 <send_packet_no_fwd>
}
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200009c0 	.word	0x200009c0
 8001de4:	200002c4 	.word	0x200002c4

08001de8 <send_packet_no_fwd>:
	default: return "Unknown fault";
	}
}

// Private functions
void send_packet_no_fwd(unsigned char *data, unsigned int len) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
	if (!forward_func) {
 8001df2:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <send_packet_no_fwd+0x24>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <send_packet_no_fwd+0x1a>
		bldc_interface_send_packet(data, len);
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7fe fd5f 	bl	80008c0 <bldc_interface_send_packet>
	}
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000990 	.word	0x20000990

08001e10 <bldc_interface_uart_init>:
 * sending packets.
 *
 * @param func
 * Function provided for sending packets.
 */
void bldc_interface_uart_init(void(*func)(unsigned char *data, unsigned int len)) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	// Initialize packet handler
	packet_init(func, process_packet, PACKET_HANDLER);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4905      	ldr	r1, [pc, #20]	@ (8001e30 <bldc_interface_uart_init+0x20>)
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f001 f885 	bl	8002f2c <packet_init>

	// Initialize the bldc interface and provide a send function
	bldc_interface_init(send_packet_bldc_interface);
 8001e22:	4804      	ldr	r0, [pc, #16]	@ (8001e34 <bldc_interface_uart_init+0x24>)
 8001e24:	f7fe fd3c 	bl	80008a0 <bldc_interface_init>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	08001e39 	.word	0x08001e39
 8001e34:	08001e53 	.word	0x08001e53

08001e38 <process_packet>:
 * @param data
 * Data array pointer
 * @param len
 * Data array length
 */
static void process_packet(unsigned char *data, unsigned int len) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
	// Let bldc_interface process the packet.
	bldc_interface_process_packet(data, len);
 8001e42:	6839      	ldr	r1, [r7, #0]
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7fe fd4f 	bl	80008e8 <bldc_interface_process_packet>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <send_packet_bldc_interface>:
 * @param data
 * Data array pointer
 * @param len
 * Data array length
 */
static void send_packet_bldc_interface(unsigned char *data, unsigned int len) {
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
	// Pass the packet to the packet handler to add checksum, length, start and stop bytes.
	packet_send_packet(data, len, PACKET_HANDLER);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6839      	ldr	r1, [r7, #0]
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f001 f885 	bl	8002f70 <packet_send_packet>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <send_packet>:


void send_packet(unsigned char *data, unsigned int len)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	if (len > (PACKET_MAX_PL_LEN + 5)) {
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f240 2205 	movw	r2, #517	@ 0x205
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d812      	bhi.n	8001eaa <send_packet+0x3a>
		return;
	}

	// Copy the data to a new buffer to ensure it's not overwritten
	static uint8_t buffer[PACKET_MAX_PL_LEN + 5];
	memcpy(buffer, data, len);
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	480a      	ldr	r0, [pc, #40]	@ (8001eb4 <send_packet+0x44>)
 8001e8a:	f00c fd69 	bl	800e960 <memcpy>

	HAL_GPIO_WritePin(GPIOB, LD3_Pin,GPIO_PIN_SET);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e94:	4808      	ldr	r0, [pc, #32]	@ (8001eb8 <send_packet+0x48>)
 8001e96:	f003 fd6b 	bl	8005970 <HAL_GPIO_WritePin>
	// Send the data over UART
	HAL_UART_Transmit_DMA(&huart2, buffer, len);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4904      	ldr	r1, [pc, #16]	@ (8001eb4 <send_packet+0x44>)
 8001ea2:	4806      	ldr	r0, [pc, #24]	@ (8001ebc <send_packet+0x4c>)
 8001ea4:	f007 fa72 	bl	800938c <HAL_UART_Transmit_DMA>
 8001ea8:	e000      	b.n	8001eac <send_packet+0x3c>
		return;
 8001eaa:	bf00      	nop

}
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200009c4 	.word	0x200009c4
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	20000e74 	.word	0x20000e74

08001ec0 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1618      	asrs	r0, r3, #24
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	1c59      	adds	r1, r3, #1
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6011      	str	r1, [r2, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2c2      	uxtb	r2, r0
 8001ee2:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1418      	asrs	r0, r3, #16
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1c59      	adds	r1, r3, #1
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6011      	str	r1, [r2, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2c2      	uxtb	r2, r0
 8001efa:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1218      	asrs	r0, r3, #8
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	1c59      	adds	r1, r3, #1
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6011      	str	r1, [r2, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b2c2      	uxtb	r2, r0
 8001f12:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1c59      	adds	r1, r3, #1
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6011      	str	r1, [r2, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	440b      	add	r3, r1
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1c9a      	adds	r2, r3, #2
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	601a      	str	r2, [r3, #0]
	return res;
 8001f6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	440b      	add	r3, r1
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1c9a      	adds	r2, r3, #2
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	601a      	str	r2, [r3, #0]
	return res;
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	440b      	add	r3, r1
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8001fe8:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3302      	adds	r3, #2
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	440b      	add	r3, r1
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8001ff8:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	3203      	adds	r2, #3
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	440a      	add	r2, r1
 8002004:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 8002006:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8002008:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	1d1a      	adds	r2, r3, #4
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	601a      	str	r2, [r3, #0]
	return res;
 8002014:	68fb      	ldr	r3, [r7, #12]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	440b      	add	r3, r1
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8002048:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3302      	adds	r3, #2
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	440b      	add	r3, r1
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8002058:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	3203      	adds	r2, #3
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	440a      	add	r2, r1
 8002064:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1d1a      	adds	r2, r3, #4
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	601a      	str	r2, [r3, #0]
	return res;
 8002074:	68fb      	ldr	r3, [r7, #12]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	ed87 0a02 	vstr	s0, [r7, #8]
 800208e:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f7ff ff4f 	bl	8001f36 <buffer_get_int16>
 8002098:	4603      	mov	r3, r0
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80020a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80020ae:	eeb0 0a67 	vmov.f32	s0, s15
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80020c4:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff ff7a 	bl	8001fc2 <buffer_get_int32>
 80020ce:	ee07 0a90 	vmov	s15, r0
 80020d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80020da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020de:	eef0 7a66 	vmov.f32	s15, s13
}
 80020e2:	eeb0 0a67 	vmov.f32	s0, s15
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	0000      	movs	r0, r0
	...

080020f0 <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 80020fa:	6839      	ldr	r1, [r7, #0]
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff90 	bl	8002022 <buffer_get_uint32>
 8002102:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	0ddb      	lsrs	r3, r3, #23
 8002108:	b2db      	uxtb	r3, r3
 800210a:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002112:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	bf14      	ite	ne
 800211e:	2301      	movne	r3, #1
 8002120:	2300      	moveq	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <buffer_get_float32_auto+0x46>
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d015      	beq.n	8002162 <buffer_get_float32_auto+0x72>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002140:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002144:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8002190 <buffer_get_float32_auto+0xa0>
 8002148:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800214c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8002150:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002154:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002158:	edc7 7a06 	vstr	s15, [r7, #24]
		e -= 126;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	3b7e      	subs	r3, #126	@ 0x7e
 8002160:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <buffer_get_float32_auto+0x84>
		sig = -sig;
 8002168:	edd7 7a06 	vldr	s15, [r7, #24]
 800216c:	eef1 7a67 	vneg.f32	s15, s15
 8002170:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 8002174:	69f8      	ldr	r0, [r7, #28]
 8002176:	ed97 0a06 	vldr	s0, [r7, #24]
 800217a:	f00c fbff 	bl	800e97c <ldexpf>
 800217e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002182:	eeb0 0a67 	vmov.f32	s0, s15
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	f3af 8000 	nop.w
 8002190:	00000000 	.word	0x00000000
 8002194:	41700000 	.word	0x41700000

08002198 <Motor_Input>:
float sine_amplitude = 1000.0f;
float set_rpm;


float Motor_Input(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
	/*EXAMPLE Sine Wave */
	float time = Get_MilliSecond()/1000.0f; // Time in seconds
 800219e:	f000 f9e7 	bl	8002570 <Get_MilliSecond>
 80021a2:	ee07 0a90 	vmov	s15, r0
 80021a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021aa:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002280 <Motor_Input+0xe8>
 80021ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b2:	edc7 7a01 	vstr	s15, [r7, #4]
	sine1 = sinf(2*M_PI*f_sine*time);
 80021b6:	4b33      	ldr	r3, [pc, #204]	@ (8002284 <Motor_Input+0xec>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021c0:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8002278 <Motor_Input+0xe0>
 80021c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021d8:	eeb0 0a67 	vmov.f32	s0, s15
 80021dc:	f00c fcd8 	bl	800eb90 <sinf>
 80021e0:	eef0 7a40 	vmov.f32	s15, s0
 80021e4:	4b28      	ldr	r3, [pc, #160]	@ (8002288 <Motor_Input+0xf0>)
 80021e6:	edc3 7a00 	vstr	s15, [r3]
	sine2 = sinf(2*M_PI*f_sine*time);
 80021ea:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <Motor_Input+0xec>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021f4:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8002278 <Motor_Input+0xe0>
 80021f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002200:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002204:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002208:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800220c:	eeb0 0a67 	vmov.f32	s0, s15
 8002210:	f00c fcbe 	bl	800eb90 <sinf>
 8002214:	eef0 7a40 	vmov.f32	s15, s0
 8002218:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <Motor_Input+0xf4>)
 800221a:	edc3 7a00 	vstr	s15, [r3]
	set_rpm = sine_bias+ sine_amplitude*sine1 + sine_amplitude/2*sine2;
 800221e:	4b1c      	ldr	r3, [pc, #112]	@ (8002290 <Motor_Input+0xf8>)
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <Motor_Input+0xf0>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222e:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <Motor_Input+0xfc>)
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <Motor_Input+0xf8>)
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8002242:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002246:	4b11      	ldr	r3, [pc, #68]	@ (800228c <Motor_Input+0xf4>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <Motor_Input+0x100>)
 8002256:	edc3 7a00 	vstr	s15, [r3]

	set_rpm = 1500.0f;
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <Motor_Input+0x100>)
 800225c:	4a0f      	ldr	r2, [pc, #60]	@ (800229c <Motor_Input+0x104>)
 800225e:	601a      	str	r2, [r3, #0]

	return set_rpm;
 8002260:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <Motor_Input+0x100>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	ee07 3a90 	vmov	s15, r3
}
 8002268:	eeb0 0a67 	vmov.f32	s0, s15
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	f3af 8000 	nop.w
 8002278:	54442d18 	.word	0x54442d18
 800227c:	401921fb 	.word	0x401921fb
 8002280:	447a0000 	.word	0x447a0000
 8002284:	20000000 	.word	0x20000000
 8002288:	20000bcc 	.word	0x20000bcc
 800228c:	20000bd0 	.word	0x20000bd0
 8002290:	20000008 	.word	0x20000008
 8002294:	20000004 	.word	0x20000004
 8002298:	20000bd4 	.word	0x20000bd4
 800229c:	44bb8000 	.word	0x44bb8000

080022a0 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e016      	b.n	80022e2 <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 80022b4:	897b      	ldrh	r3, [r7, #10]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	404b      	eors	r3, r1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4a0b      	ldr	r2, [pc, #44]	@ (80022f8 <crc16+0x58>)
 80022ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022ce:	b21a      	sxth	r2, r3
 80022d0:	897b      	ldrh	r3, [r7, #10]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4053      	eors	r3, r2
 80022d8:	b21b      	sxth	r3, r3
 80022da:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3301      	adds	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3e4      	bcc.n	80022b4 <crc16+0x14>
	}
	return cksum;
 80022ea:	897b      	ldrh	r3, [r7, #10]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	0800ed60 	.word	0x0800ed60

080022fc <DataAcq_Init>:

/**
 * @brief Initialize the data acquisition module
 */
HAL_StatusTypeDef DataAcq_Init(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
	// Initialize counters and flags
	usb_buffer_cnt = 0;
 8002300:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <DataAcq_Init+0x28>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
	active_buffer = 0;
 8002306:	4b08      	ldr	r3, [pc, #32]	@ (8002328 <DataAcq_Init+0x2c>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
	buffer_ready_flag = 3;
 800230c:	4b07      	ldr	r3, [pc, #28]	@ (800232c <DataAcq_Init+0x30>)
 800230e:	2203      	movs	r2, #3
 8002310:	701a      	strb	r2, [r3, #0]
	time_ms = 0;
 8002312:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <DataAcq_Init+0x34>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	20000bd8 	.word	0x20000bd8
 8002328:	20000bdc 	.word	0x20000bdc
 800232c:	20000bdd 	.word	0x20000bdd
 8002330:	20000be0 	.word	0x20000be0

08002334 <DataAcq_ScaleFloatValue>:

/**
 * @brief Scale float value to uint32_t with defined scaling factor
 */
static uint32_t DataAcq_ScaleFloatValue(float value)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	ed87 0a01 	vstr	s0, [r7, #4]
	return (uint32_t)(value * SCALING_FACTOR);
 800233e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002342:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002360 <DataAcq_ScaleFloatValue+0x2c>
 8002346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800234a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800234e:	ee17 3a90 	vmov	r3, s15
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	447a0000 	.word	0x447a0000

08002364 <DataAcq_SwitchBuffers>:

/**
 * @brief Switch between double buffers
 */
static void DataAcq_SwitchBuffers(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
	active_buffer = 1 - active_buffer;  // Toggle between 0 and 1
 8002368:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <DataAcq_SwitchBuffers+0x3c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f1c3 0301 	rsb	r3, r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <DataAcq_SwitchBuffers+0x3c>)
 8002376:	701a      	strb	r2, [r3, #0]
	usb_buffer_cnt = 0;
 8002378:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <DataAcq_SwitchBuffers+0x40>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]

	// Update buffer ready flag
	buffer_ready_flag = active_buffer ? BUFFER_STATE_READY_0 : BUFFER_STATE_READY_1;
 800237e:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <DataAcq_SwitchBuffers+0x3c>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <DataAcq_SwitchBuffers+0x44>)
 8002392:	701a      	strb	r2, [r3, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000bdc 	.word	0x20000bdc
 80023a4:	20000bd8 	.word	0x20000bd8
 80023a8:	20000bdd 	.word	0x20000bdd

080023ac <DataAcq_ProcessSamples>:

/**
 * @brief Process new data samples in timer interrupt
 */
void DataAcq_ProcessSamples(TIM_HandleTypeDef* htim)
{
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	if (htim->Instance != TIM3) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a62      	ldr	r2, [pc, #392]	@ (8002544 <DataAcq_ProcessSamples+0x198>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	f040 80bd 	bne.w	800253a <DataAcq_ProcessSamples+0x18e>
	// Toggle LED to indicate sampling
	//HAL_GPIO_TogglePin(GPIOB, LD1_Pin);


	// Get motor data
	float set_rpm = Motor_Input();
 80023c0:	f7ff feea 	bl	8002198 <Motor_Input>
 80023c4:	ed87 0a05 	vstr	s0, [r7, #20]
	bldc_interface_set_rpm(Motor_Input());
 80023c8:	f7ff fee6 	bl	8002198 <Motor_Input>
 80023cc:	eef0 7a40 	vmov.f32	s15, s0
 80023d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d4:	ee17 0a90 	vmov	r0, s15
 80023d8:	f7ff fcd6 	bl	8001d88 <bldc_interface_set_rpm>
	float current_speed = MotorSpeed_GetRPM();
 80023dc:	f000 fd1c 	bl	8002e18 <MotorSpeed_GetRPM>
 80023e0:	ed87 0a04 	vstr	s0, [r7, #16]

	// Scale float values to integers
	uint32_t scaled_set_rpm = DataAcq_ScaleFloatValue(set_rpm);
 80023e4:	ed97 0a05 	vldr	s0, [r7, #20]
 80023e8:	f7ff ffa4 	bl	8002334 <DataAcq_ScaleFloatValue>
 80023ec:	60f8      	str	r0, [r7, #12]
	uint32_t scaled_current_speed = DataAcq_ScaleFloatValue(current_speed);
 80023ee:	ed97 0a04 	vldr	s0, [r7, #16]
 80023f2:	f7ff ff9f 	bl	8002334 <DataAcq_ScaleFloatValue>
 80023f6:	60b8      	str	r0, [r7, #8]

	// Update time counter
	time_ms++;
 80023f8:	4b53      	ldr	r3, [pc, #332]	@ (8002548 <DataAcq_ProcessSamples+0x19c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	4a52      	ldr	r2, [pc, #328]	@ (8002548 <DataAcq_ProcessSamples+0x19c>)
 8002400:	6013      	str	r3, [r2, #0]

	if (live_mode) {
 8002402:	4b52      	ldr	r3, [pc, #328]	@ (800254c <DataAcq_ProcessSamples+0x1a0>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d02f      	beq.n	800246a <DataAcq_ProcessSamples+0xbe>
		// Store in live_buffer
		live_buffer_cnt++;
 800240a:	4b51      	ldr	r3, [pc, #324]	@ (8002550 <DataAcq_ProcessSamples+0x1a4>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	b2da      	uxtb	r2, r3
 8002414:	4b4e      	ldr	r3, [pc, #312]	@ (8002550 <DataAcq_ProcessSamples+0x1a4>)
 8002416:	701a      	strb	r2, [r3, #0]
		if (live_buffer_cnt % 10 == 0)
 8002418:	4b4d      	ldr	r3, [pc, #308]	@ (8002550 <DataAcq_ProcessSamples+0x1a4>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b4d      	ldr	r3, [pc, #308]	@ (8002554 <DataAcq_ProcessSamples+0x1a8>)
 8002420:	fba3 1302 	umull	r1, r3, r3, r2
 8002424:	08d9      	lsrs	r1, r3, #3
 8002426:	460b      	mov	r3, r1
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 8082 	bne.w	800253c <DataAcq_ProcessSamples+0x190>
		{
			live_buffer[0] = time_ms;
 8002438:	4b43      	ldr	r3, [pc, #268]	@ (8002548 <DataAcq_ProcessSamples+0x19c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a46      	ldr	r2, [pc, #280]	@ (8002558 <DataAcq_ProcessSamples+0x1ac>)
 800243e:	6013      	str	r3, [r2, #0]
			live_buffer[1] = adc_buffer[0];
 8002440:	4b46      	ldr	r3, [pc, #280]	@ (800255c <DataAcq_ProcessSamples+0x1b0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a44      	ldr	r2, [pc, #272]	@ (8002558 <DataAcq_ProcessSamples+0x1ac>)
 8002446:	6053      	str	r3, [r2, #4]
			live_buffer[2] = adc_buffer[1];
 8002448:	4b44      	ldr	r3, [pc, #272]	@ (800255c <DataAcq_ProcessSamples+0x1b0>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4a42      	ldr	r2, [pc, #264]	@ (8002558 <DataAcq_ProcessSamples+0x1ac>)
 800244e:	6093      	str	r3, [r2, #8]
			live_buffer[3] = scaled_set_rpm;
 8002450:	4a41      	ldr	r2, [pc, #260]	@ (8002558 <DataAcq_ProcessSamples+0x1ac>)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	60d3      	str	r3, [r2, #12]
			live_buffer[4] = scaled_current_speed;
 8002456:	4a40      	ldr	r2, [pc, #256]	@ (8002558 <DataAcq_ProcessSamples+0x1ac>)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	6113      	str	r3, [r2, #16]
			live_buffer_cnt = 0;
 800245c:	4b3c      	ldr	r3, [pc, #240]	@ (8002550 <DataAcq_ProcessSamples+0x1a4>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
			live_send_flag = 1;
 8002462:	4b3f      	ldr	r3, [pc, #252]	@ (8002560 <DataAcq_ProcessSamples+0x1b4>)
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	e068      	b.n	800253c <DataAcq_ProcessSamples+0x190>
		}
	}
	else if (!live_mode)
 800246a:	4b38      	ldr	r3, [pc, #224]	@ (800254c <DataAcq_ProcessSamples+0x1a0>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d164      	bne.n	800253c <DataAcq_ProcessSamples+0x190>
		{
		// Store data in active buffer
		usb_buffer[active_buffer][0][usb_buffer_cnt] = time_ms;
 8002472:	4b3c      	ldr	r3, [pc, #240]	@ (8002564 <DataAcq_ProcessSamples+0x1b8>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461c      	mov	r4, r3
 800247a:	4b3b      	ldr	r3, [pc, #236]	@ (8002568 <DataAcq_ProcessSamples+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a32      	ldr	r2, [pc, #200]	@ (8002548 <DataAcq_ProcessSamples+0x19c>)
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	483a      	ldr	r0, [pc, #232]	@ (800256c <DataAcq_ProcessSamples+0x1c0>)
 8002484:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 8002488:	fb04 f101 	mul.w	r1, r4, r1
 800248c:	440b      	add	r3, r1
 800248e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		usb_buffer[active_buffer][1][usb_buffer_cnt] = adc_buffer[0];  // Panasonic
 8002492:	4b34      	ldr	r3, [pc, #208]	@ (8002564 <DataAcq_ProcessSamples+0x1b8>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461c      	mov	r4, r3
 800249a:	4b33      	ldr	r3, [pc, #204]	@ (8002568 <DataAcq_ProcessSamples+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a2f      	ldr	r2, [pc, #188]	@ (800255c <DataAcq_ProcessSamples+0x1b0>)
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	4832      	ldr	r0, [pc, #200]	@ (800256c <DataAcq_ProcessSamples+0x1c0>)
 80024a4:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 80024a8:	fb04 f101 	mul.w	r1, r4, r1
 80024ac:	440b      	add	r3, r1
 80024ae:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 80024b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		usb_buffer[active_buffer][2][usb_buffer_cnt] = adc_buffer[1];  // Load Cell 1
 80024b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002564 <DataAcq_ProcessSamples+0x1b8>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461c      	mov	r4, r3
 80024be:	4b2a      	ldr	r3, [pc, #168]	@ (8002568 <DataAcq_ProcessSamples+0x1bc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a26      	ldr	r2, [pc, #152]	@ (800255c <DataAcq_ProcessSamples+0x1b0>)
 80024c4:	6852      	ldr	r2, [r2, #4]
 80024c6:	4829      	ldr	r0, [pc, #164]	@ (800256c <DataAcq_ProcessSamples+0x1c0>)
 80024c8:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 80024cc:	fb04 f101 	mul.w	r1, r4, r1
 80024d0:	440b      	add	r3, r1
 80024d2:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 80024d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		usb_buffer[active_buffer][3][usb_buffer_cnt] = scaled_set_rpm; // Motor setpoint
 80024da:	4b22      	ldr	r3, [pc, #136]	@ (8002564 <DataAcq_ProcessSamples+0x1b8>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4618      	mov	r0, r3
 80024e2:	4b21      	ldr	r3, [pc, #132]	@ (8002568 <DataAcq_ProcessSamples+0x1bc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4921      	ldr	r1, [pc, #132]	@ (800256c <DataAcq_ProcessSamples+0x1c0>)
 80024e8:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 80024ec:	fb00 f202 	mul.w	r2, r0, r2
 80024f0:	441a      	add	r2, r3
 80024f2:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 80024f6:	4413      	add	r3, r2
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		usb_buffer[active_buffer][4][usb_buffer_cnt] = scaled_current_speed; // Current speed
 80024fe:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <DataAcq_ProcessSamples+0x1b8>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <DataAcq_ProcessSamples+0x1bc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4918      	ldr	r1, [pc, #96]	@ (800256c <DataAcq_ProcessSamples+0x1c0>)
 800250c:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 8002510:	fb00 f202 	mul.w	r2, r0, r2
 8002514:	4413      	add	r3, r2
 8002516:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Increment buffer counter
		usb_buffer_cnt++;
 8002520:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <DataAcq_ProcessSamples+0x1bc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	4a10      	ldr	r2, [pc, #64]	@ (8002568 <DataAcq_ProcessSamples+0x1bc>)
 8002528:	6013      	str	r3, [r2, #0]

		// Check if buffer is full
		if (usb_buffer_cnt >= USB_BUFFER_SIZE) {
 800252a:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <DataAcq_ProcessSamples+0x1bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8002532:	d303      	bcc.n	800253c <DataAcq_ProcessSamples+0x190>
			DataAcq_SwitchBuffers();
 8002534:	f7ff ff16 	bl	8002364 <DataAcq_SwitchBuffers>
 8002538:	e000      	b.n	800253c <DataAcq_ProcessSamples+0x190>
		return;
 800253a:	bf00      	nop
		}
	}

}
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}
 8002542:	bf00      	nop
 8002544:	40000400 	.word	0x40000400
 8002548:	20000be0 	.word	0x20000be0
 800254c:	20000be4 	.word	0x20000be4
 8002550:	20000bfc 	.word	0x20000bfc
 8002554:	cccccccd 	.word	0xcccccccd
 8002558:	20000be8 	.word	0x20000be8
 800255c:	20001044 	.word	0x20001044
 8002560:	20000be5 	.word	0x20000be5
 8002564:	20000bdc 	.word	0x20000bdc
 8002568:	20000bd8 	.word	0x20000bd8
 800256c:	20001498 	.word	0x20001498

08002570 <Get_MilliSecond>:
{
	return buffer_ready_flag;
}

uint32_t Get_MilliSecond(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
	return time_ms;
 8002574:	4b03      	ldr	r3, [pc, #12]	@ (8002584 <Get_MilliSecond+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000be0 	.word	0x20000be0

08002588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800258c:	f001 fb35 	bl	8003bfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002590:	f000 f81e 	bl	80025d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002594:	f000 fb22 	bl	8002bdc <MX_GPIO_Init>
  MX_DMA_Init();
 8002598:	f000 fae6 	bl	8002b68 <MX_DMA_Init>
  MX_ETH_Init();
 800259c:	f000 f912 	bl	80027c4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80025a0:	f000 fab2 	bl	8002b08 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80025a4:	f000 f884 	bl	80026b0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80025a8:	f000 f95a 	bl	8002860 <MX_TIM2_Init>
  MX_TIM3_Init();
 80025ac:	f000 f9a6 	bl	80028fc <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80025b0:	f00b fb3a 	bl	800dc28 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80025b4:	f000 f9f0 	bl	8002998 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80025b8:	f000 fa76 	bl	8002aa8 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  /* Initialize Application Modules */
  if (ApplicationInit_Sequence() != HAL_OK) {
 80025bc:	f000 fbb0 	bl	8002d20 <ApplicationInit_Sequence>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <main+0x42>
      Error_Handler();
 80025c6:	f000 fbf5 	bl	8002db4 <Error_Handler>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	Application();
 80025ca:	f000 fbed 	bl	8002da8 <Application>
 80025ce:	e7fc      	b.n	80025ca <main+0x42>

080025d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b094      	sub	sp, #80	@ 0x50
 80025d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d6:	f107 031c 	add.w	r3, r7, #28
 80025da:	2234      	movs	r2, #52	@ 0x34
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f00c f97a 	bl	800e8d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80025f4:	f004 fc5e 	bl	8006eb4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f8:	4b2b      	ldr	r3, [pc, #172]	@ (80026a8 <SystemClock_Config+0xd8>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	4a2a      	ldr	r2, [pc, #168]	@ (80026a8 <SystemClock_Config+0xd8>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002602:	6413      	str	r3, [r2, #64]	@ 0x40
 8002604:	4b28      	ldr	r3, [pc, #160]	@ (80026a8 <SystemClock_Config+0xd8>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002610:	4b26      	ldr	r3, [pc, #152]	@ (80026ac <SystemClock_Config+0xdc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a25      	ldr	r2, [pc, #148]	@ (80026ac <SystemClock_Config+0xdc>)
 8002616:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b23      	ldr	r3, [pc, #140]	@ (80026ac <SystemClock_Config+0xdc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002628:	2301      	movs	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800262c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002630:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002632:	2302      	movs	r3, #2
 8002634:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800263a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800263c:	2304      	movs	r3, #4
 800263e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002640:	23d8      	movs	r3, #216	@ 0xd8
 8002642:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002644:	2302      	movs	r3, #2
 8002646:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002648:	2309      	movs	r3, #9
 800264a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800264c:	2302      	movs	r3, #2
 800264e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	4618      	mov	r0, r3
 8002656:	f004 fc8d 	bl	8006f74 <HAL_RCC_OscConfig>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002660:	f000 fba8 	bl	8002db4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002664:	f004 fc36 	bl	8006ed4 <HAL_PWREx_EnableOverDrive>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800266e:	f000 fba1 	bl	8002db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002672:	230f      	movs	r3, #15
 8002674:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002676:	2302      	movs	r3, #2
 8002678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800267e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002688:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800268a:	f107 0308 	add.w	r3, r7, #8
 800268e:	2107      	movs	r1, #7
 8002690:	4618      	mov	r0, r3
 8002692:	f004 ff1d 	bl	80074d0 <HAL_RCC_ClockConfig>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800269c:	f000 fb8a 	bl	8002db4 <Error_Handler>
  }
}
 80026a0:	bf00      	nop
 80026a2:	3750      	adds	r7, #80	@ 0x50
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40007000 	.word	0x40007000

080026b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026b6:	463b      	mov	r3, r7
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026c2:	4b3e      	ldr	r3, [pc, #248]	@ (80027bc <MX_ADC1_Init+0x10c>)
 80026c4:	4a3e      	ldr	r2, [pc, #248]	@ (80027c0 <MX_ADC1_Init+0x110>)
 80026c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80026c8:	4b3c      	ldr	r3, [pc, #240]	@ (80027bc <MX_ADC1_Init+0x10c>)
 80026ca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026d0:	4b3a      	ldr	r3, [pc, #232]	@ (80027bc <MX_ADC1_Init+0x10c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026d6:	4b39      	ldr	r3, [pc, #228]	@ (80027bc <MX_ADC1_Init+0x10c>)
 80026d8:	2201      	movs	r2, #1
 80026da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80026dc:	4b37      	ldr	r3, [pc, #220]	@ (80027bc <MX_ADC1_Init+0x10c>)
 80026de:	2201      	movs	r2, #1
 80026e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026e2:	4b36      	ldr	r3, [pc, #216]	@ (80027bc <MX_ADC1_Init+0x10c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80026ea:	4b34      	ldr	r3, [pc, #208]	@ (80027bc <MX_ADC1_Init+0x10c>)
 80026ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80026f2:	4b32      	ldr	r3, [pc, #200]	@ (80027bc <MX_ADC1_Init+0x10c>)
 80026f4:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 80026f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026fa:	4b30      	ldr	r3, [pc, #192]	@ (80027bc <MX_ADC1_Init+0x10c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8002700:	4b2e      	ldr	r3, [pc, #184]	@ (80027bc <MX_ADC1_Init+0x10c>)
 8002702:	2205      	movs	r2, #5
 8002704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002706:	4b2d      	ldr	r3, [pc, #180]	@ (80027bc <MX_ADC1_Init+0x10c>)
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800270e:	4b2b      	ldr	r3, [pc, #172]	@ (80027bc <MX_ADC1_Init+0x10c>)
 8002710:	2200      	movs	r2, #0
 8002712:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002714:	4829      	ldr	r0, [pc, #164]	@ (80027bc <MX_ADC1_Init+0x10c>)
 8002716:	f001 faf1 	bl	8003cfc <HAL_ADC_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002720:	f000 fb48 	bl	8002db4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002724:	2300      	movs	r3, #0
 8002726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002728:	2301      	movs	r3, #1
 800272a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800272c:	2304      	movs	r3, #4
 800272e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002730:	463b      	mov	r3, r7
 8002732:	4619      	mov	r1, r3
 8002734:	4821      	ldr	r0, [pc, #132]	@ (80027bc <MX_ADC1_Init+0x10c>)
 8002736:	f001 fc33 	bl	8003fa0 <HAL_ADC_ConfigChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002740:	f000 fb38 	bl	8002db4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002744:	2303      	movs	r3, #3
 8002746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002748:	2302      	movs	r3, #2
 800274a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800274c:	463b      	mov	r3, r7
 800274e:	4619      	mov	r1, r3
 8002750:	481a      	ldr	r0, [pc, #104]	@ (80027bc <MX_ADC1_Init+0x10c>)
 8002752:	f001 fc25 	bl	8003fa0 <HAL_ADC_ConfigChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800275c:	f000 fb2a 	bl	8002db4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002760:	2304      	movs	r3, #4
 8002762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002764:	2303      	movs	r3, #3
 8002766:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002768:	463b      	mov	r3, r7
 800276a:	4619      	mov	r1, r3
 800276c:	4813      	ldr	r0, [pc, #76]	@ (80027bc <MX_ADC1_Init+0x10c>)
 800276e:	f001 fc17 	bl	8003fa0 <HAL_ADC_ConfigChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002778:	f000 fb1c 	bl	8002db4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800277c:	2305      	movs	r3, #5
 800277e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002780:	2304      	movs	r3, #4
 8002782:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002784:	463b      	mov	r3, r7
 8002786:	4619      	mov	r1, r3
 8002788:	480c      	ldr	r0, [pc, #48]	@ (80027bc <MX_ADC1_Init+0x10c>)
 800278a:	f001 fc09 	bl	8003fa0 <HAL_ADC_ConfigChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002794:	f000 fb0e 	bl	8002db4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002798:	2306      	movs	r3, #6
 800279a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800279c:	2305      	movs	r3, #5
 800279e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a0:	463b      	mov	r3, r7
 80027a2:	4619      	mov	r1, r3
 80027a4:	4805      	ldr	r0, [pc, #20]	@ (80027bc <MX_ADC1_Init+0x10c>)
 80027a6:	f001 fbfb 	bl	8003fa0 <HAL_ADC_ConfigChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80027b0:	f000 fb00 	bl	8002db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000c38 	.word	0x20000c38
 80027c0:	40012000 	.word	0x40012000

080027c4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80027c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002848 <MX_ETH_Init+0x84>)
 80027ca:	4a20      	ldr	r2, [pc, #128]	@ (800284c <MX_ETH_Init+0x88>)
 80027cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80027ce:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <MX_ETH_Init+0x8c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80027d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <MX_ETH_Init+0x8c>)
 80027d6:	2280      	movs	r2, #128	@ 0x80
 80027d8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80027da:	4b1d      	ldr	r3, [pc, #116]	@ (8002850 <MX_ETH_Init+0x8c>)
 80027dc:	22e1      	movs	r2, #225	@ 0xe1
 80027de:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002850 <MX_ETH_Init+0x8c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80027e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <MX_ETH_Init+0x8c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80027ec:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <MX_ETH_Init+0x8c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80027f2:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <MX_ETH_Init+0x84>)
 80027f4:	4a16      	ldr	r2, [pc, #88]	@ (8002850 <MX_ETH_Init+0x8c>)
 80027f6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80027f8:	4b13      	ldr	r3, [pc, #76]	@ (8002848 <MX_ETH_Init+0x84>)
 80027fa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80027fe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002800:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <MX_ETH_Init+0x84>)
 8002802:	4a14      	ldr	r2, [pc, #80]	@ (8002854 <MX_ETH_Init+0x90>)
 8002804:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002806:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <MX_ETH_Init+0x84>)
 8002808:	4a13      	ldr	r2, [pc, #76]	@ (8002858 <MX_ETH_Init+0x94>)
 800280a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800280c:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <MX_ETH_Init+0x84>)
 800280e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002812:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002814:	480c      	ldr	r0, [pc, #48]	@ (8002848 <MX_ETH_Init+0x84>)
 8002816:	f002 fbb1 	bl	8004f7c <HAL_ETH_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002820:	f000 fac8 	bl	8002db4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002824:	2238      	movs	r2, #56	@ 0x38
 8002826:	2100      	movs	r1, #0
 8002828:	480c      	ldr	r0, [pc, #48]	@ (800285c <MX_ETH_Init+0x98>)
 800282a:	f00c f855 	bl	800e8d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800282e:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <MX_ETH_Init+0x98>)
 8002830:	2221      	movs	r2, #33	@ 0x21
 8002832:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002834:	4b09      	ldr	r3, [pc, #36]	@ (800285c <MX_ETH_Init+0x98>)
 8002836:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800283a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800283c:	4b07      	ldr	r3, [pc, #28]	@ (800285c <MX_ETH_Init+0x98>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000ce0 	.word	0x20000ce0
 800284c:	40028000 	.word	0x40028000
 8002850:	20001058 	.word	0x20001058
 8002854:	20000208 	.word	0x20000208
 8002858:	20000168 	.word	0x20000168
 800285c:	20000c00 	.word	0x20000c00

08002860 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002866:	f107 0310 	add.w	r3, r7, #16
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800287e:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <MX_TIM2_Init+0x98>)
 8002880:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002884:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002886:	4b1c      	ldr	r3, [pc, #112]	@ (80028f8 <MX_TIM2_Init+0x98>)
 8002888:	2247      	movs	r2, #71	@ 0x47
 800288a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288c:	4b1a      	ldr	r3, [pc, #104]	@ (80028f8 <MX_TIM2_Init+0x98>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 8002892:	4b19      	ldr	r3, [pc, #100]	@ (80028f8 <MX_TIM2_Init+0x98>)
 8002894:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002898:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289a:	4b17      	ldr	r3, [pc, #92]	@ (80028f8 <MX_TIM2_Init+0x98>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028a0:	4b15      	ldr	r3, [pc, #84]	@ (80028f8 <MX_TIM2_Init+0x98>)
 80028a2:	2280      	movs	r2, #128	@ 0x80
 80028a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028a6:	4814      	ldr	r0, [pc, #80]	@ (80028f8 <MX_TIM2_Init+0x98>)
 80028a8:	f005 fc60 	bl	800816c <HAL_TIM_Base_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80028b2:	f000 fa7f 	bl	8002db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	4619      	mov	r1, r3
 80028c2:	480d      	ldr	r0, [pc, #52]	@ (80028f8 <MX_TIM2_Init+0x98>)
 80028c4:	f006 f8a6 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80028ce:	f000 fa71 	bl	8002db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028d2:	2320      	movs	r3, #32
 80028d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	4619      	mov	r1, r3
 80028de:	4806      	ldr	r0, [pc, #24]	@ (80028f8 <MX_TIM2_Init+0x98>)
 80028e0:	f006 fc5a 	bl	8009198 <HAL_TIMEx_MasterConfigSynchronization>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80028ea:	f000 fa63 	bl	8002db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028ee:	bf00      	nop
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000d90 	.word	0x20000d90

080028fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002902:	f107 0310 	add.w	r3, r7, #16
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002910:	1d3b      	adds	r3, r7, #4
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800291a:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <MX_TIM3_Init+0x94>)
 800291c:	4a1d      	ldr	r2, [pc, #116]	@ (8002994 <MX_TIM3_Init+0x98>)
 800291e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 8002920:	4b1b      	ldr	r3, [pc, #108]	@ (8002990 <MX_TIM3_Init+0x94>)
 8002922:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8002926:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002928:	4b19      	ldr	r3, [pc, #100]	@ (8002990 <MX_TIM3_Init+0x94>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800292e:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <MX_TIM3_Init+0x94>)
 8002930:	2209      	movs	r2, #9
 8002932:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002934:	4b16      	ldr	r3, [pc, #88]	@ (8002990 <MX_TIM3_Init+0x94>)
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800293a:	4b15      	ldr	r3, [pc, #84]	@ (8002990 <MX_TIM3_Init+0x94>)
 800293c:	2280      	movs	r2, #128	@ 0x80
 800293e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002940:	4813      	ldr	r0, [pc, #76]	@ (8002990 <MX_TIM3_Init+0x94>)
 8002942:	f005 fc13 	bl	800816c <HAL_TIM_Base_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800294c:	f000 fa32 	bl	8002db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002954:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4619      	mov	r1, r3
 800295c:	480c      	ldr	r0, [pc, #48]	@ (8002990 <MX_TIM3_Init+0x94>)
 800295e:	f006 f859 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002968:	f000 fa24 	bl	8002db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	4619      	mov	r1, r3
 8002978:	4805      	ldr	r0, [pc, #20]	@ (8002990 <MX_TIM3_Init+0x94>)
 800297a:	f006 fc0d 	bl	8009198 <HAL_TIMEx_MasterConfigSynchronization>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002984:	f000 fa16 	bl	8002db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002988:	bf00      	nop
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000ddc 	.word	0x20000ddc
 8002994:	40000400 	.word	0x40000400

08002998 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08c      	sub	sp, #48	@ 0x30
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800299e:	f107 0320 	add.w	r3, r7, #32
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029c4:	4b36      	ldr	r3, [pc, #216]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 80029c6:	4a37      	ldr	r2, [pc, #220]	@ (8002aa4 <MX_TIM4_Init+0x10c>)
 80029c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 80029ca:	4b35      	ldr	r3, [pc, #212]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 80029cc:	226b      	movs	r2, #107	@ 0x6b
 80029ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d0:	4b33      	ldr	r3, [pc, #204]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80029d6:	4b32      	ldr	r3, [pc, #200]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 80029d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029de:	4b30      	ldr	r3, [pc, #192]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e4:	4b2e      	ldr	r3, [pc, #184]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80029ea:	482d      	ldr	r0, [pc, #180]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 80029ec:	f005 fbbe 	bl	800816c <HAL_TIM_Base_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80029f6:	f000 f9dd 	bl	8002db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a00:	f107 0320 	add.w	r3, r7, #32
 8002a04:	4619      	mov	r1, r3
 8002a06:	4826      	ldr	r0, [pc, #152]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 8002a08:	f006 f804 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002a12:	f000 f9cf 	bl	8002db4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002a16:	4822      	ldr	r0, [pc, #136]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 8002a18:	f005 fca7 	bl	800836a <HAL_TIM_IC_Init>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002a22:	f000 f9c7 	bl	8002db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	481a      	ldr	r0, [pc, #104]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 8002a36:	f006 fbaf 	bl	8009198 <HAL_TIMEx_MasterConfigSynchronization>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8002a40:	f000 f9b8 	bl	8002db4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a44:	2300      	movs	r3, #0
 8002a46:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 8002a50:	230f      	movs	r3, #15
 8002a52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a54:	1d3b      	adds	r3, r7, #4
 8002a56:	2200      	movs	r2, #0
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4811      	ldr	r0, [pc, #68]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 8002a5c:	f005 ff3d 	bl	80088da <HAL_TIM_IC_ConfigChannel>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8002a66:	f000 f9a5 	bl	8002db4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	480b      	ldr	r0, [pc, #44]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 8002a72:	f005 ff32 	bl	80088da <HAL_TIM_IC_ConfigChannel>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8002a7c:	f000 f99a 	bl	8002db4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	2208      	movs	r2, #8
 8002a84:	4619      	mov	r1, r3
 8002a86:	4806      	ldr	r0, [pc, #24]	@ (8002aa0 <MX_TIM4_Init+0x108>)
 8002a88:	f005 ff27 	bl	80088da <HAL_TIM_IC_ConfigChannel>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8002a92:	f000 f98f 	bl	8002db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a96:	bf00      	nop
 8002a98:	3730      	adds	r7, #48	@ 0x30
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000e28 	.word	0x20000e28
 8002aa4:	40000800 	.word	0x40000800

08002aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002aac:	4b14      	ldr	r3, [pc, #80]	@ (8002b00 <MX_USART2_UART_Init+0x58>)
 8002aae:	4a15      	ldr	r2, [pc, #84]	@ (8002b04 <MX_USART2_UART_Init+0x5c>)
 8002ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ab2:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ab4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aba:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <MX_USART2_UART_Init+0x58>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ace:	220c      	movs	r2, #12
 8002ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad8:	4b09      	ldr	r3, [pc, #36]	@ (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ade:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aea:	4805      	ldr	r0, [pc, #20]	@ (8002b00 <MX_USART2_UART_Init+0x58>)
 8002aec:	f006 fc00 	bl	80092f0 <HAL_UART_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002af6:	f000 f95d 	bl	8002db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000e74 	.word	0x20000e74
 8002b04:	40004400 	.word	0x40004400

08002b08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b0c:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b0e:	4a15      	ldr	r2, [pc, #84]	@ (8002b64 <MX_USART3_UART_Init+0x5c>)
 8002b10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b12:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1a:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b20:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b2e:	220c      	movs	r2, #12
 8002b30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b32:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b38:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b3e:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b44:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b4a:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b4c:	f006 fbd0 	bl	80092f0 <HAL_UART_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002b56:	f000 f92d 	bl	8002db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000efc 	.word	0x20000efc
 8002b64:	40004800 	.word	0x40004800

08002b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd8 <MX_DMA_Init+0x70>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	4a19      	ldr	r2, [pc, #100]	@ (8002bd8 <MX_DMA_Init+0x70>)
 8002b74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7a:	4b17      	ldr	r3, [pc, #92]	@ (8002bd8 <MX_DMA_Init+0x70>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b86:	4b14      	ldr	r3, [pc, #80]	@ (8002bd8 <MX_DMA_Init+0x70>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	4a13      	ldr	r2, [pc, #76]	@ (8002bd8 <MX_DMA_Init+0x70>)
 8002b8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b92:	4b11      	ldr	r3, [pc, #68]	@ (8002bd8 <MX_DMA_Init+0x70>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	2010      	movs	r0, #16
 8002ba4:	f001 fda9 	bl	80046fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ba8:	2010      	movs	r0, #16
 8002baa:	f001 fdc2 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	2011      	movs	r0, #17
 8002bb4:	f001 fda1 	bl	80046fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002bb8:	2011      	movs	r0, #17
 8002bba:	f001 fdba 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	2038      	movs	r0, #56	@ 0x38
 8002bc4:	f001 fd99 	bl	80046fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002bc8:	2038      	movs	r0, #56	@ 0x38
 8002bca:	f001 fdb2 	bl	8004732 <HAL_NVIC_EnableIRQ>

}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800

08002bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08c      	sub	sp, #48	@ 0x30
 8002be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]
 8002bf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf2:	4b47      	ldr	r3, [pc, #284]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	4a46      	ldr	r2, [pc, #280]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfe:	4b44      	ldr	r3, [pc, #272]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c0a:	4b41      	ldr	r3, [pc, #260]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4a40      	ldr	r2, [pc, #256]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c16:	4b3e      	ldr	r3, [pc, #248]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c22:	4b3b      	ldr	r3, [pc, #236]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	4a3a      	ldr	r2, [pc, #232]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2e:	4b38      	ldr	r3, [pc, #224]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3a:	4b35      	ldr	r3, [pc, #212]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	4a34      	ldr	r2, [pc, #208]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c46:	4b32      	ldr	r3, [pc, #200]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c52:	4b2f      	ldr	r3, [pc, #188]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	4a2e      	ldr	r2, [pc, #184]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c6a:	4b29      	ldr	r3, [pc, #164]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	4a28      	ldr	r2, [pc, #160]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c76:	4b26      	ldr	r3, [pc, #152]	@ (8002d10 <MX_GPIO_Init+0x134>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c82:	2200      	movs	r2, #0
 8002c84:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002c88:	4822      	ldr	r0, [pc, #136]	@ (8002d14 <MX_GPIO_Init+0x138>)
 8002c8a:	f002 fe71 	bl	8005970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2140      	movs	r1, #64	@ 0x40
 8002c92:	4821      	ldr	r0, [pc, #132]	@ (8002d18 <MX_GPIO_Init+0x13c>)
 8002c94:	f002 fe6c 	bl	8005970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002c98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002ca8:	f107 031c 	add.w	r3, r7, #28
 8002cac:	4619      	mov	r1, r3
 8002cae:	481b      	ldr	r0, [pc, #108]	@ (8002d1c <MX_GPIO_Init+0x140>)
 8002cb0:	f002 fcb2 	bl	8005618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002cb4:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc6:	f107 031c 	add.w	r3, r7, #28
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4811      	ldr	r0, [pc, #68]	@ (8002d14 <MX_GPIO_Init+0x138>)
 8002cce:	f002 fca3 	bl	8005618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002cd2:	2340      	movs	r3, #64	@ 0x40
 8002cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002ce2:	f107 031c 	add.w	r3, r7, #28
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	480b      	ldr	r0, [pc, #44]	@ (8002d18 <MX_GPIO_Init+0x13c>)
 8002cea:	f002 fc95 	bl	8005618 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002cee:	2380      	movs	r3, #128	@ 0x80
 8002cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cfa:	f107 031c 	add.w	r3, r7, #28
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4805      	ldr	r0, [pc, #20]	@ (8002d18 <MX_GPIO_Init+0x13c>)
 8002d02:	f002 fc89 	bl	8005618 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d06:	bf00      	nop
 8002d08:	3730      	adds	r7, #48	@ 0x30
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40020400 	.word	0x40020400
 8002d18:	40021800 	.word	0x40021800
 8002d1c:	40020800 	.word	0x40020800

08002d20 <ApplicationInit_Sequence>:

/* USER CODE BEGIN 4 */


static HAL_StatusTypeDef ApplicationInit_Sequence(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
    /* Start ADC with DMA */
    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE) != HAL_OK) {
 8002d24:	2205      	movs	r2, #5
 8002d26:	491c      	ldr	r1, [pc, #112]	@ (8002d98 <ApplicationInit_Sequence+0x78>)
 8002d28:	481c      	ldr	r0, [pc, #112]	@ (8002d9c <ApplicationInit_Sequence+0x7c>)
 8002d2a:	f001 f82b 	bl	8003d84 <HAL_ADC_Start_DMA>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <ApplicationInit_Sequence+0x18>
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e02d      	b.n	8002d94 <ApplicationInit_Sequence+0x74>
       }

    /* Initialize motor speed monitoring */
    if (MotorSpeed_Init(&htim4) != HAL_OK) {
 8002d38:	4819      	ldr	r0, [pc, #100]	@ (8002da0 <ApplicationInit_Sequence+0x80>)
 8002d3a:	f000 f841 	bl	8002dc0 <MotorSpeed_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <ApplicationInit_Sequence+0x28>
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e025      	b.n	8002d94 <ApplicationInit_Sequence+0x74>
    }

    /* Start timer input capture for all channels */
    if (HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1) != HAL_OK) return HAL_ERROR;
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4815      	ldr	r0, [pc, #84]	@ (8002da0 <ApplicationInit_Sequence+0x80>)
 8002d4c:	f005 fb6e 	bl	800842c <HAL_TIM_IC_Start_IT>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <ApplicationInit_Sequence+0x3a>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e01c      	b.n	8002d94 <ApplicationInit_Sequence+0x74>
    if (HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2) != HAL_OK) return HAL_ERROR;
 8002d5a:	2104      	movs	r1, #4
 8002d5c:	4810      	ldr	r0, [pc, #64]	@ (8002da0 <ApplicationInit_Sequence+0x80>)
 8002d5e:	f005 fb65 	bl	800842c <HAL_TIM_IC_Start_IT>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <ApplicationInit_Sequence+0x4c>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e013      	b.n	8002d94 <ApplicationInit_Sequence+0x74>
    if (HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3) != HAL_OK) return HAL_ERROR;
 8002d6c:	2108      	movs	r1, #8
 8002d6e:	480c      	ldr	r0, [pc, #48]	@ (8002da0 <ApplicationInit_Sequence+0x80>)
 8002d70:	f005 fb5c 	bl	800842c <HAL_TIM_IC_Start_IT>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <ApplicationInit_Sequence+0x5e>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00a      	b.n	8002d94 <ApplicationInit_Sequence+0x74>

    /* Initialize data acquisition system */
    if (DataAcq_Init() != HAL_OK) {
 8002d7e:	f7ff fabd 	bl	80022fc <DataAcq_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <ApplicationInit_Sequence+0x6c>
    	return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e003      	b.n	8002d94 <ApplicationInit_Sequence+0x74>
    }

    /* Initialize BLDC interface */
    bldc_interface_uart_init(send_packet);
 8002d8c:	4805      	ldr	r0, [pc, #20]	@ (8002da4 <ApplicationInit_Sequence+0x84>)
 8002d8e:	f7ff f83f 	bl	8001e10 <bldc_interface_uart_init>

    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20001044 	.word	0x20001044
 8002d9c:	20000c38 	.word	0x20000c38
 8002da0:	20000e28 	.word	0x20000e28
 8002da4:	08001e71 	.word	0x08001e71

08002da8 <Application>:


static void Application(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
	usb_transmit_task();
 8002dac:	f000 fe16 	bl	80039dc <usb_transmit_task>

}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002db8:	b672      	cpsid	i
}
 8002dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <Error_Handler+0x8>

08002dc0 <MotorSpeed_Init>:

/**
 * @brief Initialize the motor speed monitoring module
 */
HAL_StatusTypeDef MotorSpeed_Init(TIM_HandleTypeDef* htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    if (htim == NULL || htim->Instance != TIM4) {
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <MotorSpeed_Init+0x18>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8002e04 <MotorSpeed_Init+0x44>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d001      	beq.n	8002ddc <MotorSpeed_Init+0x1c>
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e00d      	b.n	8002df8 <MotorSpeed_Init+0x38>
    }

    motor_timer = htim;
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8002e08 <MotorSpeed_Init+0x48>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6013      	str	r3, [r2, #0]
    last_capture = 0;
 8002de2:	4b0a      	ldr	r3, [pc, #40]	@ (8002e0c <MotorSpeed_Init+0x4c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
    pulse_period = 0;
 8002de8:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <MotorSpeed_Init+0x50>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
    current_rpm = 0.0f;
 8002dee:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <MotorSpeed_Init+0x54>)
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40000800 	.word	0x40000800
 8002e08:	20001060 	.word	0x20001060
 8002e0c:	20001064 	.word	0x20001064
 8002e10:	20001068 	.word	0x20001068
 8002e14:	2000106c 	.word	0x2000106c

08002e18 <MotorSpeed_GetRPM>:

/**
 * @brief Get the current motor speed in RPM
 */
float MotorSpeed_GetRPM(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
    return current_rpm;
 8002e1c:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <MotorSpeed_GetRPM+0x18>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	ee07 3a90 	vmov	s15, r3
}
 8002e24:	eeb0 0a67 	vmov.f32	s0, s15
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	2000106c 	.word	0x2000106c

08002e34 <MotorSpeed_CalculatePeriod>:

/**
 * @brief Calculate time period between two captures, handling timer overflow
 */
static uint32_t MotorSpeed_CalculatePeriod(uint32_t current_capture)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
    if (current_capture > last_capture) {
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <MotorSpeed_CalculatePeriod+0x38>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d904      	bls.n	8002e50 <MotorSpeed_CalculatePeriod+0x1c>
        return current_capture - last_capture;
 8002e46:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <MotorSpeed_CalculatePeriod+0x38>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	e006      	b.n	8002e5e <MotorSpeed_CalculatePeriod+0x2a>
    } else {
        // Handle timer overflow
        return (0xFFFF - last_capture) + current_capture;
 8002e50:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <MotorSpeed_CalculatePeriod+0x38>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	1ad2      	subs	r2, r2, r3
 8002e58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e5c:	4413      	add	r3, r2
    }
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20001064 	.word	0x20001064

08002e70 <MotorSpeed_TimerCallback>:

/**
 * @brief Timer input capture callback handler
 */
void MotorSpeed_TimerCallback(TIM_HandleTypeDef* htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM4) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a26      	ldr	r2, [pc, #152]	@ (8002f18 <MotorSpeed_TimerCallback+0xa8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d143      	bne.n	8002f0a <MotorSpeed_TimerCallback+0x9a>
        return;
    }

    uint32_t current_capture = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]

    // Determine which channel triggered the interrupt
    switch (htim->Channel) {
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7f1b      	ldrb	r3, [r3, #28]
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d012      	beq.n	8002eb4 <MotorSpeed_TimerCallback+0x44>
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	dc3d      	bgt.n	8002f0e <MotorSpeed_TimerCallback+0x9e>
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d002      	beq.n	8002e9c <MotorSpeed_TimerCallback+0x2c>
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d006      	beq.n	8002ea8 <MotorSpeed_TimerCallback+0x38>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
            break;

        default:
            return;  // Invalid channel
 8002e9a:	e038      	b.n	8002f0e <MotorSpeed_TimerCallback+0x9e>
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f005 fe82 	bl	8008ba8 <HAL_TIM_ReadCapturedValue>
 8002ea4:	60f8      	str	r0, [r7, #12]
            break;
 8002ea6:	e00b      	b.n	8002ec0 <MotorSpeed_TimerCallback+0x50>
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002ea8:	2104      	movs	r1, #4
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f005 fe7c 	bl	8008ba8 <HAL_TIM_ReadCapturedValue>
 8002eb0:	60f8      	str	r0, [r7, #12]
            break;
 8002eb2:	e005      	b.n	8002ec0 <MotorSpeed_TimerCallback+0x50>
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002eb4:	2108      	movs	r1, #8
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f005 fe76 	bl	8008ba8 <HAL_TIM_ReadCapturedValue>
 8002ebc:	60f8      	str	r0, [r7, #12]
            break;
 8002ebe:	bf00      	nop
    }

    // Calculate period between pulses
    pulse_period = MotorSpeed_CalculatePeriod(current_capture);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff ffb7 	bl	8002e34 <MotorSpeed_CalculatePeriod>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4a14      	ldr	r2, [pc, #80]	@ (8002f1c <MotorSpeed_TimerCallback+0xac>)
 8002eca:	6013      	str	r3, [r2, #0]
    last_capture = current_capture;
 8002ecc:	4a14      	ldr	r2, [pc, #80]	@ (8002f20 <MotorSpeed_TimerCallback+0xb0>)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6013      	str	r3, [r2, #0]

    // Calculate RPM
    if (pulse_period > 0) {
 8002ed2:	4b12      	ldr	r3, [pc, #72]	@ (8002f1c <MotorSpeed_TimerCallback+0xac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d012      	beq.n	8002f00 <MotorSpeed_TimerCallback+0x90>
        // RPM = (60 * timer_clock) / (pulses_per_rev * pulse_period)
    	current_rpm = 60000000.0f / (MOTOR_SPEED_HALL_PULSES_PER_REV * pulse_period);
 8002eda:	4b10      	ldr	r3, [pc, #64]	@ (8002f1c <MotorSpeed_TimerCallback+0xac>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00da      	lsls	r2, r3, #3
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	ee07 3a90 	vmov	s15, r3
 8002eec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ef0:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002f24 <MotorSpeed_TimerCallback+0xb4>
 8002ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <MotorSpeed_TimerCallback+0xb8>)
 8002efa:	edc3 7a00 	vstr	s15, [r3]
 8002efe:	e007      	b.n	8002f10 <MotorSpeed_TimerCallback+0xa0>
    } else {
        current_rpm = 0.0f;  // Motor stopped
 8002f00:	4b09      	ldr	r3, [pc, #36]	@ (8002f28 <MotorSpeed_TimerCallback+0xb8>)
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e002      	b.n	8002f10 <MotorSpeed_TimerCallback+0xa0>
        return;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <MotorSpeed_TimerCallback+0xa0>
            return;  // Invalid channel
 8002f0e:	bf00      	nop
    }
}
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40000800 	.word	0x40000800
 8002f1c:	20001068 	.word	0x20001068
 8002f20:	20001064 	.word	0x20001064
 8002f24:	4c64e1c0 	.word	0x4c64e1c0
 8002f28:	2000106c 	.word	0x2000106c

08002f2c <packet_init>:
} PACKET_STATE_t;

static PACKET_STATE_t handler_states[PACKET_HANDLERS];

void packet_init(void (*s_func)(unsigned char *data, unsigned int len),
		void (*p_func)(unsigned char *data, unsigned int len), int handler_num) {
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
	handler_states[handler_num].send_func = s_func;
 8002f38:	490c      	ldr	r1, [pc, #48]	@ (8002f6c <packet_init+0x40>)
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	015b      	lsls	r3, r3, #5
 8002f40:	4413      	add	r3, r2
 8002f42:	015b      	lsls	r3, r3, #5
 8002f44:	440b      	add	r3, r1
 8002f46:	3304      	adds	r3, #4
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]
	handler_states[handler_num].process_func = p_func;
 8002f4c:	4907      	ldr	r1, [pc, #28]	@ (8002f6c <packet_init+0x40>)
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	015b      	lsls	r3, r3, #5
 8002f54:	4413      	add	r3, r2
 8002f56:	015b      	lsls	r3, r3, #5
 8002f58:	440b      	add	r3, r1
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	601a      	str	r2, [r3, #0]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	20001070 	.word	0x20001070

08002f70 <packet_send_packet>:

void packet_send_packet(unsigned char *data, unsigned int len, int handler_num) {
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
	if (len > PACKET_MAX_PL_LEN) {
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f82:	f200 80c8 	bhi.w	8003116 <packet_send_packet+0x1a6>
		return;
	}

	int b_ind = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]

	if (len <= 256) {
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f90:	d820      	bhi.n	8002fd4 <packet_send_packet+0x64>
		handler_states[handler_num].tx_buffer[b_ind++] = 2;
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	1c53      	adds	r3, r2, #1
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	4861      	ldr	r0, [pc, #388]	@ (8003120 <packet_send_packet+0x1b0>)
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	015b      	lsls	r3, r3, #5
 8002fa0:	440b      	add	r3, r1
 8002fa2:	015b      	lsls	r3, r3, #5
 8002fa4:	4403      	add	r3, r0
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002fac:	2202      	movs	r2, #2
 8002fae:	701a      	strb	r2, [r3, #0]
		handler_states[handler_num].tx_buffer[b_ind++] = len;
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	1c53      	adds	r3, r2, #1
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	b2dc      	uxtb	r4, r3
 8002fba:	4859      	ldr	r0, [pc, #356]	@ (8003120 <packet_send_packet+0x1b0>)
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	015b      	lsls	r3, r3, #5
 8002fc2:	440b      	add	r3, r1
 8002fc4:	015b      	lsls	r3, r3, #5
 8002fc6:	4403      	add	r3, r0
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002fce:	4622      	mov	r2, r4
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e031      	b.n	8003038 <packet_send_packet+0xc8>
	} else {
		handler_states[handler_num].tx_buffer[b_ind++] = 3;
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	1c53      	adds	r3, r2, #1
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	4851      	ldr	r0, [pc, #324]	@ (8003120 <packet_send_packet+0x1b0>)
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	015b      	lsls	r3, r3, #5
 8002fe2:	440b      	add	r3, r1
 8002fe4:	015b      	lsls	r3, r3, #5
 8002fe6:	4403      	add	r3, r0
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002fee:	2203      	movs	r2, #3
 8002ff0:	701a      	strb	r2, [r3, #0]
		handler_states[handler_num].tx_buffer[b_ind++] = len >> 8;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	0a19      	lsrs	r1, r3, #8
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	1c53      	adds	r3, r2, #1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	b2cc      	uxtb	r4, r1
 8002ffe:	4848      	ldr	r0, [pc, #288]	@ (8003120 <packet_send_packet+0x1b0>)
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	015b      	lsls	r3, r3, #5
 8003006:	440b      	add	r3, r1
 8003008:	015b      	lsls	r3, r3, #5
 800300a:	4403      	add	r3, r0
 800300c:	4413      	add	r3, r2
 800300e:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003012:	4622      	mov	r2, r4
 8003014:	701a      	strb	r2, [r3, #0]
		handler_states[handler_num].tx_buffer[b_ind++] = len & 0xFF;
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	1c53      	adds	r3, r2, #1
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	b2dc      	uxtb	r4, r3
 8003020:	483f      	ldr	r0, [pc, #252]	@ (8003120 <packet_send_packet+0x1b0>)
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	015b      	lsls	r3, r3, #5
 8003028:	440b      	add	r3, r1
 800302a:	015b      	lsls	r3, r3, #5
 800302c:	4403      	add	r3, r0
 800302e:	4413      	add	r3, r2
 8003030:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003034:	4622      	mov	r2, r4
 8003036:	701a      	strb	r2, [r3, #0]
	}

	memcpy(handler_states[handler_num].tx_buffer + b_ind, data, len);
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	015b      	lsls	r3, r3, #5
 800303e:	4413      	add	r3, r2
 8003040:	015b      	lsls	r3, r3, #5
 8003042:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003046:	4a36      	ldr	r2, [pc, #216]	@ (8003120 <packet_send_packet+0x1b0>)
 8003048:	441a      	add	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	4413      	add	r3, r2
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	68f9      	ldr	r1, [r7, #12]
 8003052:	4618      	mov	r0, r3
 8003054:	f00b fc84 	bl	800e960 <memcpy>
	b_ind += len;
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	4413      	add	r3, r2
 800305e:	617b      	str	r3, [r7, #20]

	unsigned short crc = crc16(data, len);
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f7ff f91c 	bl	80022a0 <crc16>
 8003068:	4603      	mov	r3, r0
 800306a:	827b      	strh	r3, [r7, #18]
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 800306c:	8a7b      	ldrh	r3, [r7, #18]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	b299      	uxth	r1, r3
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	1c53      	adds	r3, r2, #1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	b2cc      	uxtb	r4, r1
 800307a:	4829      	ldr	r0, [pc, #164]	@ (8003120 <packet_send_packet+0x1b0>)
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	015b      	lsls	r3, r3, #5
 8003082:	440b      	add	r3, r1
 8003084:	015b      	lsls	r3, r3, #5
 8003086:	4403      	add	r3, r0
 8003088:	4413      	add	r3, r2
 800308a:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800308e:	4622      	mov	r2, r4
 8003090:	701a      	strb	r2, [r3, #0]
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	1c53      	adds	r3, r2, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	8a7b      	ldrh	r3, [r7, #18]
 800309a:	b2dc      	uxtb	r4, r3
 800309c:	4820      	ldr	r0, [pc, #128]	@ (8003120 <packet_send_packet+0x1b0>)
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	015b      	lsls	r3, r3, #5
 80030a4:	440b      	add	r3, r1
 80030a6:	015b      	lsls	r3, r3, #5
 80030a8:	4403      	add	r3, r0
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80030b0:	4622      	mov	r2, r4
 80030b2:	701a      	strb	r2, [r3, #0]
	handler_states[handler_num].tx_buffer[b_ind++] = 3;
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	1c53      	adds	r3, r2, #1
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	4819      	ldr	r0, [pc, #100]	@ (8003120 <packet_send_packet+0x1b0>)
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	015b      	lsls	r3, r3, #5
 80030c2:	440b      	add	r3, r1
 80030c4:	015b      	lsls	r3, r3, #5
 80030c6:	4403      	add	r3, r0
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80030ce:	2203      	movs	r2, #3
 80030d0:	701a      	strb	r2, [r3, #0]

	if (handler_states[handler_num].send_func) {
 80030d2:	4913      	ldr	r1, [pc, #76]	@ (8003120 <packet_send_packet+0x1b0>)
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	015b      	lsls	r3, r3, #5
 80030da:	4413      	add	r3, r2
 80030dc:	015b      	lsls	r3, r3, #5
 80030de:	440b      	add	r3, r1
 80030e0:	3304      	adds	r3, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d017      	beq.n	8003118 <packet_send_packet+0x1a8>
		handler_states[handler_num].send_func(handler_states[handler_num].tx_buffer, b_ind);
 80030e8:	490d      	ldr	r1, [pc, #52]	@ (8003120 <packet_send_packet+0x1b0>)
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	015b      	lsls	r3, r3, #5
 80030f0:	4413      	add	r3, r2
 80030f2:	015b      	lsls	r3, r3, #5
 80030f4:	440b      	add	r3, r1
 80030f6:	3304      	adds	r3, #4
 80030f8:	681c      	ldr	r4, [r3, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	015b      	lsls	r3, r3, #5
 8003100:	4413      	add	r3, r2
 8003102:	015b      	lsls	r3, r3, #5
 8003104:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003108:	4a05      	ldr	r2, [pc, #20]	@ (8003120 <packet_send_packet+0x1b0>)
 800310a:	4413      	add	r3, r2
 800310c:	697a      	ldr	r2, [r7, #20]
 800310e:	4611      	mov	r1, r2
 8003110:	4618      	mov	r0, r3
 8003112:	47a0      	blx	r4
 8003114:	e000      	b.n	8003118 <packet_send_packet+0x1a8>
		return;
 8003116:	bf00      	nop
	}
}
 8003118:	371c      	adds	r7, #28
 800311a:	46bd      	mov	sp, r7
 800311c:	bd90      	pop	{r4, r7, pc}
 800311e:	bf00      	nop
 8003120:	20001070 	.word	0x20001070

08003124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <HAL_MspInit+0x44>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	4a0e      	ldr	r2, [pc, #56]	@ (8003168 <HAL_MspInit+0x44>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	@ 0x40
 8003136:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <HAL_MspInit+0x44>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003142:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <HAL_MspInit+0x44>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	4a08      	ldr	r2, [pc, #32]	@ (8003168 <HAL_MspInit+0x44>)
 8003148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800314c:	6453      	str	r3, [r2, #68]	@ 0x44
 800314e:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <HAL_MspInit+0x44>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	@ 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2d      	ldr	r2, [pc, #180]	@ (8003240 <HAL_ADC_MspInit+0xd4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d154      	bne.n	8003238 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800318e:	4b2d      	ldr	r3, [pc, #180]	@ (8003244 <HAL_ADC_MspInit+0xd8>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	4a2c      	ldr	r2, [pc, #176]	@ (8003244 <HAL_ADC_MspInit+0xd8>)
 8003194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003198:	6453      	str	r3, [r2, #68]	@ 0x44
 800319a:	4b2a      	ldr	r3, [pc, #168]	@ (8003244 <HAL_ADC_MspInit+0xd8>)
 800319c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a6:	4b27      	ldr	r3, [pc, #156]	@ (8003244 <HAL_ADC_MspInit+0xd8>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031aa:	4a26      	ldr	r2, [pc, #152]	@ (8003244 <HAL_ADC_MspInit+0xd8>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b2:	4b24      	ldr	r3, [pc, #144]	@ (8003244 <HAL_ADC_MspInit+0xd8>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80031be:	2379      	movs	r3, #121	@ 0x79
 80031c0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031c2:	2303      	movs	r3, #3
 80031c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	481d      	ldr	r0, [pc, #116]	@ (8003248 <HAL_ADC_MspInit+0xdc>)
 80031d2:	f002 fa21 	bl	8005618 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80031d6:	4b1d      	ldr	r3, [pc, #116]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 80031d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003250 <HAL_ADC_MspInit+0xe4>)
 80031da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 80031de:	2200      	movs	r2, #0
 80031e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031e2:	4b1a      	ldr	r3, [pc, #104]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e8:	4b18      	ldr	r3, [pc, #96]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031ee:	4b17      	ldr	r3, [pc, #92]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 80031f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031f6:	4b15      	ldr	r3, [pc, #84]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 80031f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031fe:	4b13      	ldr	r3, [pc, #76]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 8003200:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003204:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003206:	4b11      	ldr	r3, [pc, #68]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 8003208:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800320c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800320e:	4b0f      	ldr	r3, [pc, #60]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 8003210:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003214:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003216:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 8003218:	2200      	movs	r2, #0
 800321a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800321c:	480b      	ldr	r0, [pc, #44]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 800321e:	f001 faa3 	bl	8004768 <HAL_DMA_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8003228:	f7ff fdc4 	bl	8002db4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a07      	ldr	r2, [pc, #28]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 8003230:	639a      	str	r2, [r3, #56]	@ 0x38
 8003232:	4a06      	ldr	r2, [pc, #24]	@ (800324c <HAL_ADC_MspInit+0xe0>)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003238:	bf00      	nop
 800323a:	3728      	adds	r7, #40	@ 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40012000 	.word	0x40012000
 8003244:	40023800 	.word	0x40023800
 8003248:	40020000 	.word	0x40020000
 800324c:	20000c80 	.word	0x20000c80
 8003250:	40026410 	.word	0x40026410

08003254 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08e      	sub	sp, #56	@ 0x38
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800325c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
 800326a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a4e      	ldr	r2, [pc, #312]	@ (80033ac <HAL_ETH_MspInit+0x158>)
 8003272:	4293      	cmp	r3, r2
 8003274:	f040 8096 	bne.w	80033a4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003278:	4b4d      	ldr	r3, [pc, #308]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327c:	4a4c      	ldr	r2, [pc, #304]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 800327e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003282:	6313      	str	r3, [r2, #48]	@ 0x30
 8003284:	4b4a      	ldr	r3, [pc, #296]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328c:	623b      	str	r3, [r7, #32]
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	4b47      	ldr	r3, [pc, #284]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	4a46      	ldr	r2, [pc, #280]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 8003296:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800329a:	6313      	str	r3, [r2, #48]	@ 0x30
 800329c:	4b44      	ldr	r3, [pc, #272]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	4b41      	ldr	r3, [pc, #260]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	4a40      	ldr	r2, [pc, #256]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 80032ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80032b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b4:	4b3e      	ldr	r3, [pc, #248]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 80032b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c0:	4b3b      	ldr	r3, [pc, #236]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	4a3a      	ldr	r2, [pc, #232]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 80032c6:	f043 0304 	orr.w	r3, r3, #4
 80032ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80032cc:	4b38      	ldr	r3, [pc, #224]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d8:	4b35      	ldr	r3, [pc, #212]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 80032da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032dc:	4a34      	ldr	r2, [pc, #208]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032e4:	4b32      	ldr	r3, [pc, #200]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f0:	4b2f      	ldr	r3, [pc, #188]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f4:	4a2e      	ldr	r2, [pc, #184]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 80032f6:	f043 0302 	orr.w	r3, r3, #2
 80032fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80032fc:	4b2c      	ldr	r3, [pc, #176]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003308:	4b29      	ldr	r3, [pc, #164]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330c:	4a28      	ldr	r2, [pc, #160]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 800330e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003312:	6313      	str	r3, [r2, #48]	@ 0x30
 8003314:	4b26      	ldr	r3, [pc, #152]	@ (80033b0 <HAL_ETH_MspInit+0x15c>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003320:	2332      	movs	r3, #50	@ 0x32
 8003322:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332c:	2303      	movs	r3, #3
 800332e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003330:	230b      	movs	r3, #11
 8003332:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003338:	4619      	mov	r1, r3
 800333a:	481e      	ldr	r0, [pc, #120]	@ (80033b4 <HAL_ETH_MspInit+0x160>)
 800333c:	f002 f96c 	bl	8005618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003340:	2386      	movs	r3, #134	@ 0x86
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003350:	230b      	movs	r3, #11
 8003352:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003358:	4619      	mov	r1, r3
 800335a:	4817      	ldr	r0, [pc, #92]	@ (80033b8 <HAL_ETH_MspInit+0x164>)
 800335c:	f002 f95c 	bl	8005618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003360:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336e:	2303      	movs	r3, #3
 8003370:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003372:	230b      	movs	r3, #11
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800337a:	4619      	mov	r1, r3
 800337c:	480f      	ldr	r0, [pc, #60]	@ (80033bc <HAL_ETH_MspInit+0x168>)
 800337e:	f002 f94b 	bl	8005618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003382:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003386:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003388:	2302      	movs	r3, #2
 800338a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	2300      	movs	r3, #0
 800338e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003390:	2303      	movs	r3, #3
 8003392:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003394:	230b      	movs	r3, #11
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003398:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800339c:	4619      	mov	r1, r3
 800339e:	4808      	ldr	r0, [pc, #32]	@ (80033c0 <HAL_ETH_MspInit+0x16c>)
 80033a0:	f002 f93a 	bl	8005618 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80033a4:	bf00      	nop
 80033a6:	3738      	adds	r7, #56	@ 0x38
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40028000 	.word	0x40028000
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40020800 	.word	0x40020800
 80033b8:	40020000 	.word	0x40020000
 80033bc:	40020400 	.word	0x40020400
 80033c0:	40021800 	.word	0x40021800

080033c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08c      	sub	sp, #48	@ 0x30
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 031c 	add.w	r3, r7, #28
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e4:	d114      	bne.n	8003410 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033e6:	4b34      	ldr	r3, [pc, #208]	@ (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	4a33      	ldr	r2, [pc, #204]	@ (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033f2:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80033fe:	2200      	movs	r2, #0
 8003400:	2101      	movs	r1, #1
 8003402:	201c      	movs	r0, #28
 8003404:	f001 f979 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003408:	201c      	movs	r0, #28
 800340a:	f001 f992 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800340e:	e04f      	b.n	80034b0 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM3)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a29      	ldr	r2, [pc, #164]	@ (80034bc <HAL_TIM_Base_MspInit+0xf8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d114      	bne.n	8003444 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800341a:	4b27      	ldr	r3, [pc, #156]	@ (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	4a26      	ldr	r2, [pc, #152]	@ (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	6413      	str	r3, [r2, #64]	@ 0x40
 8003426:	4b24      	ldr	r3, [pc, #144]	@ (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2101      	movs	r1, #1
 8003436:	201d      	movs	r0, #29
 8003438:	f001 f95f 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800343c:	201d      	movs	r0, #29
 800343e:	f001 f978 	bl	8004732 <HAL_NVIC_EnableIRQ>
}
 8003442:	e035      	b.n	80034b0 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM4)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1d      	ldr	r2, [pc, #116]	@ (80034c0 <HAL_TIM_Base_MspInit+0xfc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d130      	bne.n	80034b0 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800344e:	4b1a      	ldr	r3, [pc, #104]	@ (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	4a19      	ldr	r2, [pc, #100]	@ (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	6413      	str	r3, [r2, #64]	@ 0x40
 800345a:	4b17      	ldr	r3, [pc, #92]	@ (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003466:	4b14      	ldr	r3, [pc, #80]	@ (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346a:	4a13      	ldr	r2, [pc, #76]	@ (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 800346c:	f043 0308 	orr.w	r3, r3, #8
 8003470:	6313      	str	r3, [r2, #48]	@ 0x30
 8003472:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <HAL_TIM_Base_MspInit+0xf4>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800347e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8003482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348c:	2300      	movs	r3, #0
 800348e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003490:	2302      	movs	r3, #2
 8003492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003494:	f107 031c 	add.w	r3, r7, #28
 8003498:	4619      	mov	r1, r3
 800349a:	480a      	ldr	r0, [pc, #40]	@ (80034c4 <HAL_TIM_Base_MspInit+0x100>)
 800349c:	f002 f8bc 	bl	8005618 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80034a0:	2200      	movs	r2, #0
 80034a2:	2100      	movs	r1, #0
 80034a4:	201e      	movs	r0, #30
 80034a6:	f001 f928 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80034aa:	201e      	movs	r0, #30
 80034ac:	f001 f941 	bl	8004732 <HAL_NVIC_EnableIRQ>
}
 80034b0:	bf00      	nop
 80034b2:	3730      	adds	r7, #48	@ 0x30
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800
 80034c4:	40020c00 	.word	0x40020c00

080034c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b0b0      	sub	sp, #192	@ 0xc0
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034e0:	f107 031c 	add.w	r3, r7, #28
 80034e4:	2290      	movs	r2, #144	@ 0x90
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f00b f9f5 	bl	800e8d8 <memset>
  if(huart->Instance==USART2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a76      	ldr	r2, [pc, #472]	@ (80036cc <HAL_UART_MspInit+0x204>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	f040 80a2 	bne.w	800363e <HAL_UART_MspInit+0x176>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034fa:	2380      	movs	r3, #128	@ 0x80
 80034fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034fe:	2300      	movs	r3, #0
 8003500:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003502:	f107 031c 	add.w	r3, r7, #28
 8003506:	4618      	mov	r0, r3
 8003508:	f004 fa08 	bl	800791c <HAL_RCCEx_PeriphCLKConfig>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003512:	f7ff fc4f 	bl	8002db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003516:	4b6e      	ldr	r3, [pc, #440]	@ (80036d0 <HAL_UART_MspInit+0x208>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	4a6d      	ldr	r2, [pc, #436]	@ (80036d0 <HAL_UART_MspInit+0x208>)
 800351c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003520:	6413      	str	r3, [r2, #64]	@ 0x40
 8003522:	4b6b      	ldr	r3, [pc, #428]	@ (80036d0 <HAL_UART_MspInit+0x208>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800352e:	4b68      	ldr	r3, [pc, #416]	@ (80036d0 <HAL_UART_MspInit+0x208>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	4a67      	ldr	r2, [pc, #412]	@ (80036d0 <HAL_UART_MspInit+0x208>)
 8003534:	f043 0308 	orr.w	r3, r3, #8
 8003538:	6313      	str	r3, [r2, #48]	@ 0x30
 800353a:	4b65      	ldr	r3, [pc, #404]	@ (80036d0 <HAL_UART_MspInit+0x208>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003546:	2360      	movs	r3, #96	@ 0x60
 8003548:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003558:	2303      	movs	r3, #3
 800355a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800355e:	2307      	movs	r3, #7
 8003560:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003564:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003568:	4619      	mov	r1, r3
 800356a:	485a      	ldr	r0, [pc, #360]	@ (80036d4 <HAL_UART_MspInit+0x20c>)
 800356c:	f002 f854 	bl	8005618 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003570:	4b59      	ldr	r3, [pc, #356]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 8003572:	4a5a      	ldr	r2, [pc, #360]	@ (80036dc <HAL_UART_MspInit+0x214>)
 8003574:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003576:	4b58      	ldr	r3, [pc, #352]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 8003578:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800357c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800357e:	4b56      	ldr	r3, [pc, #344]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 8003580:	2200      	movs	r2, #0
 8003582:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003584:	4b54      	ldr	r3, [pc, #336]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 8003586:	2200      	movs	r2, #0
 8003588:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800358a:	4b53      	ldr	r3, [pc, #332]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 800358c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003590:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003592:	4b51      	ldr	r3, [pc, #324]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 8003594:	2200      	movs	r2, #0
 8003596:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003598:	4b4f      	ldr	r3, [pc, #316]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 800359a:	2200      	movs	r2, #0
 800359c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800359e:	4b4e      	ldr	r3, [pc, #312]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 80035a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035a6:	4b4c      	ldr	r3, [pc, #304]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035ac:	4b4a      	ldr	r3, [pc, #296]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80035b2:	4849      	ldr	r0, [pc, #292]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 80035b4:	f001 f8d8 	bl	8004768 <HAL_DMA_Init>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 80035be:	f7ff fbf9 	bl	8002db4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a44      	ldr	r2, [pc, #272]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 80035c6:	675a      	str	r2, [r3, #116]	@ 0x74
 80035c8:	4a43      	ldr	r2, [pc, #268]	@ (80036d8 <HAL_UART_MspInit+0x210>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80035ce:	4b44      	ldr	r3, [pc, #272]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 80035d0:	4a44      	ldr	r2, [pc, #272]	@ (80036e4 <HAL_UART_MspInit+0x21c>)
 80035d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80035d4:	4b42      	ldr	r3, [pc, #264]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 80035d6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80035da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035dc:	4b40      	ldr	r3, [pc, #256]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 80035de:	2240      	movs	r2, #64	@ 0x40
 80035e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e2:	4b3f      	ldr	r3, [pc, #252]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035e8:	4b3d      	ldr	r3, [pc, #244]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 80035ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035f0:	4b3b      	ldr	r3, [pc, #236]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035f6:	4b3a      	ldr	r3, [pc, #232]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80035fc:	4b38      	ldr	r3, [pc, #224]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 80035fe:	2200      	movs	r2, #0
 8003600:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003602:	4b37      	ldr	r3, [pc, #220]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 8003604:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003608:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800360a:	4b35      	ldr	r3, [pc, #212]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 800360c:	2200      	movs	r2, #0
 800360e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003610:	4833      	ldr	r0, [pc, #204]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 8003612:	f001 f8a9 	bl	8004768 <HAL_DMA_Init>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 800361c:	f7ff fbca 	bl	8002db4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a2f      	ldr	r2, [pc, #188]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 8003624:	671a      	str	r2, [r3, #112]	@ 0x70
 8003626:	4a2e      	ldr	r2, [pc, #184]	@ (80036e0 <HAL_UART_MspInit+0x218>)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800362c:	2200      	movs	r2, #0
 800362e:	2101      	movs	r1, #1
 8003630:	2026      	movs	r0, #38	@ 0x26
 8003632:	f001 f862 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003636:	2026      	movs	r0, #38	@ 0x26
 8003638:	f001 f87b 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800363c:	e041      	b.n	80036c2 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a29      	ldr	r2, [pc, #164]	@ (80036e8 <HAL_UART_MspInit+0x220>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d13c      	bne.n	80036c2 <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800364c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800364e:	2300      	movs	r3, #0
 8003650:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003652:	f107 031c 	add.w	r3, r7, #28
 8003656:	4618      	mov	r0, r3
 8003658:	f004 f960 	bl	800791c <HAL_RCCEx_PeriphCLKConfig>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8003662:	f7ff fba7 	bl	8002db4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003666:	4b1a      	ldr	r3, [pc, #104]	@ (80036d0 <HAL_UART_MspInit+0x208>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	4a19      	ldr	r2, [pc, #100]	@ (80036d0 <HAL_UART_MspInit+0x208>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003670:	6413      	str	r3, [r2, #64]	@ 0x40
 8003672:	4b17      	ldr	r3, [pc, #92]	@ (80036d0 <HAL_UART_MspInit+0x208>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800367e:	4b14      	ldr	r3, [pc, #80]	@ (80036d0 <HAL_UART_MspInit+0x208>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	4a13      	ldr	r2, [pc, #76]	@ (80036d0 <HAL_UART_MspInit+0x208>)
 8003684:	f043 0308 	orr.w	r3, r3, #8
 8003688:	6313      	str	r3, [r2, #48]	@ 0x30
 800368a:	4b11      	ldr	r3, [pc, #68]	@ (80036d0 <HAL_UART_MspInit+0x208>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003696:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800369a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369e:	2302      	movs	r3, #2
 80036a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036aa:	2303      	movs	r3, #3
 80036ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036b0:	2307      	movs	r3, #7
 80036b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036b6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80036ba:	4619      	mov	r1, r3
 80036bc:	4805      	ldr	r0, [pc, #20]	@ (80036d4 <HAL_UART_MspInit+0x20c>)
 80036be:	f001 ffab 	bl	8005618 <HAL_GPIO_Init>
}
 80036c2:	bf00      	nop
 80036c4:	37c0      	adds	r7, #192	@ 0xc0
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40004400 	.word	0x40004400
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40020c00 	.word	0x40020c00
 80036d8:	20000f84 	.word	0x20000f84
 80036dc:	40026088 	.word	0x40026088
 80036e0:	20000fe4 	.word	0x20000fe4
 80036e4:	400260a0 	.word	0x400260a0
 80036e8:	40004800 	.word	0x40004800

080036ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80036f0:	bf00      	nop
 80036f2:	e7fd      	b.n	80036f0 <NMI_Handler+0x4>

080036f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <HardFault_Handler+0x4>

080036fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <MemManage_Handler+0x4>

08003704 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <BusFault_Handler+0x4>

0800370c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <UsageFault_Handler+0x4>

08003714 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003742:	f000 fa97 	bl	8003c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003750:	4802      	ldr	r0, [pc, #8]	@ (800375c <DMA1_Stream5_IRQHandler+0x10>)
 8003752:	f001 f9a9 	bl	8004aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000f84 	.word	0x20000f84

08003760 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003764:	4802      	ldr	r0, [pc, #8]	@ (8003770 <DMA1_Stream6_IRQHandler+0x10>)
 8003766:	f001 f99f 	bl	8004aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	20000fe4 	.word	0x20000fe4

08003774 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003778:	4802      	ldr	r0, [pc, #8]	@ (8003784 <TIM2_IRQHandler+0x10>)
 800377a:	f004 ffa7 	bl	80086cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000d90 	.word	0x20000d90

08003788 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800378c:	4802      	ldr	r0, [pc, #8]	@ (8003798 <TIM3_IRQHandler+0x10>)
 800378e:	f004 ff9d 	bl	80086cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000ddc 	.word	0x20000ddc

0800379c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80037a0:	4802      	ldr	r0, [pc, #8]	@ (80037ac <TIM4_IRQHandler+0x10>)
 80037a2:	f004 ff93 	bl	80086cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037a6:	bf00      	nop
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000e28 	.word	0x20000e28

080037b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037b4:	4802      	ldr	r0, [pc, #8]	@ (80037c0 <USART2_IRQHandler+0x10>)
 80037b6:	f005 fe65 	bl	8009484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037ba:	bf00      	nop
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000e74 	.word	0x20000e74

080037c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037c8:	4802      	ldr	r0, [pc, #8]	@ (80037d4 <DMA2_Stream0_IRQHandler+0x10>)
 80037ca:	f001 f96d 	bl	8004aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000c80 	.word	0x20000c80

080037d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80037dc:	4802      	ldr	r0, [pc, #8]	@ (80037e8 <OTG_FS_IRQHandler+0x10>)
 80037de:	f002 fa18 	bl	8005c12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	2006ff84 	.word	0x2006ff84

080037ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a04      	ldr	r2, [pc, #16]	@ (800380c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d102      	bne.n	8003804 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		DataAcq_ProcessSamples(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe fdd4 	bl	80023ac <DataAcq_ProcessSamples>
	}


}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40000400 	.word	0x40000400

08003810 <HAL_ADC_ConvCpltCallback>:


/*ADC Measurement*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	// Called when DMA fills the ENTIRE buffer
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_TIM_IC_CaptureCallback>:




void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	MotorSpeed_TimerCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff fb1f 	bl	8002e70 <MotorSpeed_TimerCallback>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003844:	4a14      	ldr	r2, [pc, #80]	@ (8003898 <_sbrk+0x5c>)
 8003846:	4b15      	ldr	r3, [pc, #84]	@ (800389c <_sbrk+0x60>)
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003850:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <_sbrk+0x64>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003858:	4b11      	ldr	r3, [pc, #68]	@ (80038a0 <_sbrk+0x64>)
 800385a:	4a12      	ldr	r2, [pc, #72]	@ (80038a4 <_sbrk+0x68>)
 800385c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800385e:	4b10      	ldr	r3, [pc, #64]	@ (80038a0 <_sbrk+0x64>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	429a      	cmp	r2, r3
 800386a:	d207      	bcs.n	800387c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800386c:	f00b f84c 	bl	800e908 <__errno>
 8003870:	4603      	mov	r3, r0
 8003872:	220c      	movs	r2, #12
 8003874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003876:	f04f 33ff 	mov.w	r3, #4294967295
 800387a:	e009      	b.n	8003890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800387c:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <_sbrk+0x64>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003882:	4b07      	ldr	r3, [pc, #28]	@ (80038a0 <_sbrk+0x64>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	4a05      	ldr	r2, [pc, #20]	@ (80038a0 <_sbrk+0x64>)
 800388c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800388e:	68fb      	ldr	r3, [r7, #12]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20080000 	.word	0x20080000
 800389c:	00000400 	.word	0x00000400
 80038a0:	20001490 	.word	0x20001490
 80038a4:	200705b0 	.word	0x200705b0

080038a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038ac:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <SystemInit+0x20>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b2:	4a05      	ldr	r2, [pc, #20]	@ (80038c8 <SystemInit+0x20>)
 80038b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <transmit_usb_packet>:
extern volatile uint8_t live_buffer_cnt;

// Assuming usb_buffer is defined like this (adjust types if needed):
// uint32_t usb_buffer[2][5][USB_BUFFER_SIZE];
// Function to transmit a single USB packet
static uint8_t transmit_usb_packet(uint32_t* data, uint16_t data_len) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]
	uint8_t status;
	uint32_t start_time = HAL_GetTick();
 80038d8:	f000 f9e0 	bl	8003c9c <HAL_GetTick>
 80038dc:	6178      	str	r0, [r7, #20]

	do {
		status = CDC_Transmit_FS((uint8_t*)data, data_len);
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	4619      	mov	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f00a fa62 	bl	800ddac <CDC_Transmit_FS>
 80038e8:	4603      	mov	r3, r0
 80038ea:	74fb      	strb	r3, [r7, #19]
	} while (status != USBD_OK);
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f5      	bne.n	80038de <transmit_usb_packet+0x12>

	uint32_t transmit_time = HAL_GetTick() - start_time;
 80038f2:	f000 f9d3 	bl	8003c9c <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	60fb      	str	r3, [r7, #12]

	if (transmit_time > 10) {
		// Log or debug if transmit time exceeds threshold
	}
	return status; // Return the status of transmission.
 80038fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <process_and_transmit_buffer>:


// Function to process and transmit a buffer
static void process_and_transmit_buffer(uint8_t buffer_index, uint32_t* packet_counter) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b08c      	sub	sp, #48	@ 0x30
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	6039      	str	r1, [r7, #0]
 8003912:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++) {
 8003914:	2300      	movs	r3, #0
 8003916:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003918:	e052      	b.n	80039c0 <process_and_transmit_buffer+0xb8>
		uint32_t header = 0xddccbbaa;
 800391a:	4b2e      	ldr	r3, [pc, #184]	@ (80039d4 <process_and_transmit_buffer+0xcc>)
 800391c:	62bb      	str	r3, [r7, #40]	@ 0x28
		uint32_t values[7] = {
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	60fb      	str	r3, [r7, #12]
				header,
				(*packet_counter)++, // Increment and use the packet counter. Important to dereference it.
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	1c59      	adds	r1, r3, #1
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	6011      	str	r1, [r2, #0]
		uint32_t values[7] = {
 800392c:	613b      	str	r3, [r7, #16]
				usb_buffer[buffer_index][0][i],
 800392e:	79fa      	ldrb	r2, [r7, #7]
 8003930:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003932:	4929      	ldr	r1, [pc, #164]	@ (80039d8 <process_and_transmit_buffer+0xd0>)
 8003934:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 8003938:	fb00 f202 	mul.w	r2, r0, r2
 800393c:	4413      	add	r3, r2
 800393e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
		uint32_t values[7] = {
 8003942:	617b      	str	r3, [r7, #20]
				usb_buffer[buffer_index][1][i],
 8003944:	79fa      	ldrb	r2, [r7, #7]
 8003946:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003948:	4923      	ldr	r1, [pc, #140]	@ (80039d8 <process_and_transmit_buffer+0xd0>)
 800394a:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 800394e:	fb00 f202 	mul.w	r2, r0, r2
 8003952:	4413      	add	r3, r2
 8003954:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 8003958:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
		uint32_t values[7] = {
 800395c:	61bb      	str	r3, [r7, #24]
				usb_buffer[buffer_index][2][i],
 800395e:	79fa      	ldrb	r2, [r7, #7]
 8003960:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003962:	491d      	ldr	r1, [pc, #116]	@ (80039d8 <process_and_transmit_buffer+0xd0>)
 8003964:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 8003968:	fb00 f202 	mul.w	r2, r0, r2
 800396c:	4413      	add	r3, r2
 800396e:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 8003972:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
		uint32_t values[7] = {
 8003976:	61fb      	str	r3, [r7, #28]
				usb_buffer[buffer_index][3][i],
 8003978:	79fa      	ldrb	r2, [r7, #7]
 800397a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800397c:	4916      	ldr	r1, [pc, #88]	@ (80039d8 <process_and_transmit_buffer+0xd0>)
 800397e:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 8003982:	fb00 f202 	mul.w	r2, r0, r2
 8003986:	441a      	add	r2, r3
 8003988:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 800398c:	4413      	add	r3, r2
 800398e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
		uint32_t values[7] = {
 8003992:	623b      	str	r3, [r7, #32]
				usb_buffer[buffer_index][4][i]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003998:	490f      	ldr	r1, [pc, #60]	@ (80039d8 <process_and_transmit_buffer+0xd0>)
 800399a:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 800399e:	fb00 f202 	mul.w	r2, r0, r2
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 80039a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
		uint32_t values[7] = {
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
		};

		transmit_usb_packet(values, sizeof(values));
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	211c      	movs	r1, #28
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff89 	bl	80038cc <transmit_usb_packet>
	for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++) {
 80039ba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80039bc:	3301      	adds	r3, #1
 80039be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80039c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80039c2:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80039c6:	d3a8      	bcc.n	800391a <process_and_transmit_buffer+0x12>
	}
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	3730      	adds	r7, #48	@ 0x30
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	ddccbbaa 	.word	0xddccbbaa
 80039d8:	20001498 	.word	0x20001498

080039dc <usb_transmit_task>:


void usb_transmit_task() {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
	if (live_mode && live_send_flag) {
 80039e2:	4b27      	ldr	r3, [pc, #156]	@ (8003a80 <usb_transmit_task+0xa4>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d025      	beq.n	8003a36 <usb_transmit_task+0x5a>
 80039ea:	4b26      	ldr	r3, [pc, #152]	@ (8003a84 <usb_transmit_task+0xa8>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d020      	beq.n	8003a36 <usb_transmit_task+0x5a>
		// Send live_buffer
			uint32_t header = 0xddccbbaa;
 80039f4:	4b24      	ldr	r3, [pc, #144]	@ (8003a88 <usb_transmit_task+0xac>)
 80039f6:	61fb      	str	r3, [r7, #28]
			uint32_t values[7] = {
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	603b      	str	r3, [r7, #0]
					header,
					packet_counter++,
 80039fc:	4b23      	ldr	r3, [pc, #140]	@ (8003a8c <usb_transmit_task+0xb0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	4922      	ldr	r1, [pc, #136]	@ (8003a8c <usb_transmit_task+0xb0>)
 8003a04:	600a      	str	r2, [r1, #0]
			uint32_t values[7] = {
 8003a06:	607b      	str	r3, [r7, #4]
					live_buffer[0],
 8003a08:	4b21      	ldr	r3, [pc, #132]	@ (8003a90 <usb_transmit_task+0xb4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
			uint32_t values[7] = {
 8003a0c:	60bb      	str	r3, [r7, #8]
					live_buffer[1],
 8003a0e:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <usb_transmit_task+0xb4>)
 8003a10:	685b      	ldr	r3, [r3, #4]
			uint32_t values[7] = {
 8003a12:	60fb      	str	r3, [r7, #12]
					live_buffer[2],
 8003a14:	4b1e      	ldr	r3, [pc, #120]	@ (8003a90 <usb_transmit_task+0xb4>)
 8003a16:	689b      	ldr	r3, [r3, #8]
			uint32_t values[7] = {
 8003a18:	613b      	str	r3, [r7, #16]
					live_buffer[3],
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <usb_transmit_task+0xb4>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
			uint32_t values[7] = {
 8003a1e:	617b      	str	r3, [r7, #20]
					live_buffer[4]
 8003a20:	4b1b      	ldr	r3, [pc, #108]	@ (8003a90 <usb_transmit_task+0xb4>)
 8003a22:	691b      	ldr	r3, [r3, #16]
			uint32_t values[7] = {
 8003a24:	61bb      	str	r3, [r7, #24]
			};
			transmit_usb_packet(values, sizeof(values));
 8003a26:	463b      	mov	r3, r7
 8003a28:	211c      	movs	r1, #28
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff ff4e 	bl	80038cc <transmit_usb_packet>
			live_send_flag = 0;
 8003a30:	4b14      	ldr	r3, [pc, #80]	@ (8003a84 <usb_transmit_task+0xa8>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]
		}


		if (buffer_ready_flag == BUFFER_STATE_READY_0 && !live_mode) {
 8003a36:	4b17      	ldr	r3, [pc, #92]	@ (8003a94 <usb_transmit_task+0xb8>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <usb_transmit_task+0x7c>
 8003a40:	4b0f      	ldr	r3, [pc, #60]	@ (8003a80 <usb_transmit_task+0xa4>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <usb_transmit_task+0x7c>
			process_and_transmit_buffer(0, &packet_counter);
 8003a48:	4910      	ldr	r1, [pc, #64]	@ (8003a8c <usb_transmit_task+0xb0>)
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f7ff ff5c 	bl	8003908 <process_and_transmit_buffer>
			buffer_ready_flag = BUFFER_STATE_BUSY;
 8003a50:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <usb_transmit_task+0xb8>)
 8003a52:	2203      	movs	r2, #3
 8003a54:	701a      	strb	r2, [r3, #0]
		} else if (buffer_ready_flag == BUFFER_STATE_READY_1 && !live_mode) {
			process_and_transmit_buffer(1, &packet_counter);
			buffer_ready_flag = BUFFER_STATE_BUSY;
		}
	}
 8003a56:	e00f      	b.n	8003a78 <usb_transmit_task+0x9c>
		} else if (buffer_ready_flag == BUFFER_STATE_READY_1 && !live_mode) {
 8003a58:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <usb_transmit_task+0xb8>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d10a      	bne.n	8003a78 <usb_transmit_task+0x9c>
 8003a62:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <usb_transmit_task+0xa4>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <usb_transmit_task+0x9c>
			process_and_transmit_buffer(1, &packet_counter);
 8003a6a:	4908      	ldr	r1, [pc, #32]	@ (8003a8c <usb_transmit_task+0xb0>)
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7ff ff4b 	bl	8003908 <process_and_transmit_buffer>
			buffer_ready_flag = BUFFER_STATE_BUSY;
 8003a72:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <usb_transmit_task+0xb8>)
 8003a74:	2203      	movs	r2, #3
 8003a76:	701a      	strb	r2, [r3, #0]
	}
 8003a78:	bf00      	nop
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000be4 	.word	0x20000be4
 8003a84:	20000be5 	.word	0x20000be5
 8003a88:	ddccbbaa 	.word	0xddccbbaa
 8003a8c:	2006ea98 	.word	0x2006ea98
 8003a90:	20000be8 	.word	0x20000be8
 8003a94:	20000bdd 	.word	0x20000bdd

08003a98 <CDC_Receive_FS_App>:

uint8_t CDC_Receive_FS_App(uint8_t *Buf, uint32_t *Len)
	{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
	    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4835      	ldr	r0, [pc, #212]	@ (8003b7c <CDC_Receive_FS_App+0xe4>)
 8003aa6:	f008 fcff 	bl	800c4a8 <USBD_CDC_SetRxBuffer>
	    if (*Len > 0) {
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d05f      	beq.n	8003b72 <CDC_Receive_FS_App+0xda>
	        if (Buf[0] == 'S') { // Start normal mode
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b53      	cmp	r3, #83	@ 0x53
 8003ab8:	d11e      	bne.n	8003af8 <CDC_Receive_FS_App+0x60>
	            if (!data_acquisition_running) {
 8003aba:	4b31      	ldr	r3, [pc, #196]	@ (8003b80 <CDC_Receive_FS_App+0xe8>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d157      	bne.n	8003b72 <CDC_Receive_FS_App+0xda>
	                HAL_TIM_Base_Start_IT(&htim3);
 8003ac2:	4830      	ldr	r0, [pc, #192]	@ (8003b84 <CDC_Receive_FS_App+0xec>)
 8003ac4:	f004 fbaa 	bl	800821c <HAL_TIM_Base_Start_IT>
	                HAL_TIM_Base_Start_IT(&htim2);
 8003ac8:	482f      	ldr	r0, [pc, #188]	@ (8003b88 <CDC_Receive_FS_App+0xf0>)
 8003aca:	f004 fba7 	bl	800821c <HAL_TIM_Base_Start_IT>
	                data_acquisition_running = 1;
 8003ace:	4b2c      	ldr	r3, [pc, #176]	@ (8003b80 <CDC_Receive_FS_App+0xe8>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
	                live_mode = 0;
 8003ad4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b8c <CDC_Receive_FS_App+0xf4>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
	                buffer_ready_flag = 3;
 8003ada:	4b2d      	ldr	r3, [pc, #180]	@ (8003b90 <CDC_Receive_FS_App+0xf8>)
 8003adc:	2203      	movs	r2, #3
 8003ade:	701a      	strb	r2, [r3, #0]
	                packet_counter = 0;
 8003ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b94 <CDC_Receive_FS_App+0xfc>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
	                DataAcq_Init();
 8003ae6:	f7fe fc09 	bl	80022fc <DataAcq_Init>
	                MotorSpeed_Init(&htim4);
 8003aea:	482b      	ldr	r0, [pc, #172]	@ (8003b98 <CDC_Receive_FS_App+0x100>)
 8003aec:	f7ff f968 	bl	8002dc0 <MotorSpeed_Init>
	                active_buffer = 0;
 8003af0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b9c <CDC_Receive_FS_App+0x104>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e03c      	b.n	8003b72 <CDC_Receive_FS_App+0xda>
	            }
	        } else if (Buf[0] == 'L') { // Start live mode
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b4c      	cmp	r3, #76	@ 0x4c
 8003afe:	d121      	bne.n	8003b44 <CDC_Receive_FS_App+0xac>
	            if (!data_acquisition_running) {
 8003b00:	4b1f      	ldr	r3, [pc, #124]	@ (8003b80 <CDC_Receive_FS_App+0xe8>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d134      	bne.n	8003b72 <CDC_Receive_FS_App+0xda>
	                HAL_TIM_Base_Start_IT(&htim3);
 8003b08:	481e      	ldr	r0, [pc, #120]	@ (8003b84 <CDC_Receive_FS_App+0xec>)
 8003b0a:	f004 fb87 	bl	800821c <HAL_TIM_Base_Start_IT>
	                HAL_TIM_Base_Start_IT(&htim2);
 8003b0e:	481e      	ldr	r0, [pc, #120]	@ (8003b88 <CDC_Receive_FS_App+0xf0>)
 8003b10:	f004 fb84 	bl	800821c <HAL_TIM_Base_Start_IT>
	                data_acquisition_running = 1;
 8003b14:	4b1a      	ldr	r3, [pc, #104]	@ (8003b80 <CDC_Receive_FS_App+0xe8>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
	                live_mode = 1;
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b8c <CDC_Receive_FS_App+0xf4>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	701a      	strb	r2, [r3, #0]
	                buffer_ready_flag = 3;
 8003b20:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <CDC_Receive_FS_App+0xf8>)
 8003b22:	2203      	movs	r2, #3
 8003b24:	701a      	strb	r2, [r3, #0]
	                packet_counter = 0;
 8003b26:	4b1b      	ldr	r3, [pc, #108]	@ (8003b94 <CDC_Receive_FS_App+0xfc>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
	                DataAcq_Init();
 8003b2c:	f7fe fbe6 	bl	80022fc <DataAcq_Init>
	                MotorSpeed_Init(&htim4);
 8003b30:	4819      	ldr	r0, [pc, #100]	@ (8003b98 <CDC_Receive_FS_App+0x100>)
 8003b32:	f7ff f945 	bl	8002dc0 <MotorSpeed_Init>
	                live_buffer_cnt = 0;
 8003b36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba0 <CDC_Receive_FS_App+0x108>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
	                live_send_flag = 0;
 8003b3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ba4 <CDC_Receive_FS_App+0x10c>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	e016      	b.n	8003b72 <CDC_Receive_FS_App+0xda>
	            }
	        } else if (Buf[0] == 'T') { // Stop
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b54      	cmp	r3, #84	@ 0x54
 8003b4a:	d112      	bne.n	8003b72 <CDC_Receive_FS_App+0xda>
	            if (data_acquisition_running) {
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <CDC_Receive_FS_App+0xe8>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00e      	beq.n	8003b72 <CDC_Receive_FS_App+0xda>
	                HAL_TIM_Base_Stop_IT(&htim3);
 8003b54:	480b      	ldr	r0, [pc, #44]	@ (8003b84 <CDC_Receive_FS_App+0xec>)
 8003b56:	f004 fbd9 	bl	800830c <HAL_TIM_Base_Stop_IT>
	                HAL_TIM_Base_Stop_IT(&htim2);
 8003b5a:	480b      	ldr	r0, [pc, #44]	@ (8003b88 <CDC_Receive_FS_App+0xf0>)
 8003b5c:	f004 fbd6 	bl	800830c <HAL_TIM_Base_Stop_IT>
	                data_acquisition_running = 0;
 8003b60:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <CDC_Receive_FS_App+0xe8>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
	                live_mode = 0;
 8003b66:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <CDC_Receive_FS_App+0xf4>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]
	                buffer_ready_flag = 3;
 8003b6c:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <CDC_Receive_FS_App+0xf8>)
 8003b6e:	2203      	movs	r2, #3
 8003b70:	701a      	strb	r2, [r3, #0]
	            }
	        }
	    }
	    return USBD_OK;
 8003b72:	2300      	movs	r3, #0
	}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	2006eaa8 	.word	0x2006eaa8
 8003b80:	2006ea9c 	.word	0x2006ea9c
 8003b84:	20000ddc 	.word	0x20000ddc
 8003b88:	20000d90 	.word	0x20000d90
 8003b8c:	20000be4 	.word	0x20000be4
 8003b90:	20000bdd 	.word	0x20000bdd
 8003b94:	2006ea98 	.word	0x2006ea98
 8003b98:	20000e28 	.word	0x20000e28
 8003b9c:	20001494 	.word	0x20001494
 8003ba0:	20000bfc 	.word	0x20000bfc
 8003ba4:	20000be5 	.word	0x20000be5

08003ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ba8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003be0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bac:	f7ff fe7c 	bl	80038a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bb0:	480c      	ldr	r0, [pc, #48]	@ (8003be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bb2:	490d      	ldr	r1, [pc, #52]	@ (8003be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bb8:	e002      	b.n	8003bc0 <LoopCopyDataInit>

08003bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bbe:	3304      	adds	r3, #4

08003bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bc4:	d3f9      	bcc.n	8003bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8003bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bcc:	e001      	b.n	8003bd2 <LoopFillZerobss>

08003bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bd0:	3204      	adds	r2, #4

08003bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bd4:	d3fb      	bcc.n	8003bce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003bd6:	f00a fe9d 	bl	800e914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bda:	f7fe fcd5 	bl	8002588 <main>
  bx  lr    
 8003bde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003be0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003be8:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8003bec:	0800f0d0 	.word	0x0800f0d0
  ldr r2, =_sbss
 8003bf0:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8003bf4:	200705ac 	.word	0x200705ac

08003bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf8:	e7fe      	b.n	8003bf8 <ADC_IRQHandler>

08003bfa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bfe:	2003      	movs	r0, #3
 8003c00:	f000 fd70 	bl	80046e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c04:	2000      	movs	r0, #0
 8003c06:	f000 f805 	bl	8003c14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c0a:	f7ff fa8b 	bl	8003124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c1c:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <HAL_InitTick+0x54>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b12      	ldr	r3, [pc, #72]	@ (8003c6c <HAL_InitTick+0x58>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	4619      	mov	r1, r3
 8003c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fd8b 	bl	800474e <HAL_SYSTICK_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e00e      	b.n	8003c60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b0f      	cmp	r3, #15
 8003c46:	d80a      	bhi.n	8003c5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c48:	2200      	movs	r2, #0
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c50:	f000 fd53 	bl	80046fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c54:	4a06      	ldr	r2, [pc, #24]	@ (8003c70 <HAL_InitTick+0x5c>)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e000      	b.n	8003c60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	2000000c 	.word	0x2000000c
 8003c6c:	20000014 	.word	0x20000014
 8003c70:	20000010 	.word	0x20000010

08003c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c78:	4b06      	ldr	r3, [pc, #24]	@ (8003c94 <HAL_IncTick+0x20>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <HAL_IncTick+0x24>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4413      	add	r3, r2
 8003c84:	4a04      	ldr	r2, [pc, #16]	@ (8003c98 <HAL_IncTick+0x24>)
 8003c86:	6013      	str	r3, [r2, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000014 	.word	0x20000014
 8003c98:	2006eaa0 	.word	0x2006eaa0

08003c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003ca0:	4b03      	ldr	r3, [pc, #12]	@ (8003cb0 <HAL_GetTick+0x14>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	2006eaa0 	.word	0x2006eaa0

08003cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cbc:	f7ff ffee 	bl	8003c9c <HAL_GetTick>
 8003cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d005      	beq.n	8003cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cce:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <HAL_Delay+0x44>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cda:	bf00      	nop
 8003cdc:	f7ff ffde 	bl	8003c9c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d8f7      	bhi.n	8003cdc <HAL_Delay+0x28>
  {
  }
}
 8003cec:	bf00      	nop
 8003cee:	bf00      	nop
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000014 	.word	0x20000014

08003cfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e031      	b.n	8003d76 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff fa26 	bl	800316c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d116      	bne.n	8003d68 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d3e:	4b10      	ldr	r3, [pc, #64]	@ (8003d80 <HAL_ADC_Init+0x84>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	f043 0202 	orr.w	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fa7e 	bl	800424c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	f043 0201 	orr.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d66:	e001      	b.n	8003d6c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	ffffeefd 	.word	0xffffeefd

08003d84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_ADC_Start_DMA+0x1e>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e0d4      	b.n	8003f4c <HAL_ADC_Start_DMA+0x1c8>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d018      	beq.n	8003dea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0201 	orr.w	r2, r2, #1
 8003dc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003dc8:	4b62      	ldr	r3, [pc, #392]	@ (8003f54 <HAL_ADC_Start_DMA+0x1d0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a62      	ldr	r2, [pc, #392]	@ (8003f58 <HAL_ADC_Start_DMA+0x1d4>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	0c9a      	lsrs	r2, r3, #18
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4413      	add	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003ddc:	e002      	b.n	8003de4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f9      	bne.n	8003dde <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	f040 809c 	bne.w	8003f32 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003dfe:	4b57      	ldr	r3, [pc, #348]	@ (8003f5c <HAL_ADC_Start_DMA+0x1d8>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d007      	beq.n	8003e28 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e20:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e34:	d106      	bne.n	8003e44 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	f023 0206 	bic.w	r2, r3, #6
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e42:	e002      	b.n	8003e4a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e56:	4a42      	ldr	r2, [pc, #264]	@ (8003f60 <HAL_ADC_Start_DMA+0x1dc>)
 8003e58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5e:	4a41      	ldr	r2, [pc, #260]	@ (8003f64 <HAL_ADC_Start_DMA+0x1e0>)
 8003e60:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e66:	4a40      	ldr	r2, [pc, #256]	@ (8003f68 <HAL_ADC_Start_DMA+0x1e4>)
 8003e68:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003e72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003e82:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e92:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	334c      	adds	r3, #76	@ 0x4c
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f000 fd0e 	bl	80048c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003ea8:	4b30      	ldr	r3, [pc, #192]	@ (8003f6c <HAL_ADC_Start_DMA+0x1e8>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10f      	bne.n	8003ed4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d143      	bne.n	8003f4a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003ed0:	609a      	str	r2, [r3, #8]
 8003ed2:	e03a      	b.n	8003f4a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a25      	ldr	r2, [pc, #148]	@ (8003f70 <HAL_ADC_Start_DMA+0x1ec>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10e      	bne.n	8003efc <HAL_ADC_Start_DMA+0x178>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d107      	bne.n	8003efc <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003efa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003efc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f6c <HAL_ADC_Start_DMA+0x1e8>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d120      	bne.n	8003f4a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a19      	ldr	r2, [pc, #100]	@ (8003f74 <HAL_ADC_Start_DMA+0x1f0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d11b      	bne.n	8003f4a <HAL_ADC_Start_DMA+0x1c6>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d114      	bne.n	8003f4a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	e00b      	b.n	8003f4a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	f043 0210 	orr.w	r2, r3, #16
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	f043 0201 	orr.w	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	2000000c 	.word	0x2000000c
 8003f58:	431bde83 	.word	0x431bde83
 8003f5c:	fffff8fe 	.word	0xfffff8fe
 8003f60:	08004441 	.word	0x08004441
 8003f64:	080044fb 	.word	0x080044fb
 8003f68:	08004517 	.word	0x08004517
 8003f6c:	40012300 	.word	0x40012300
 8003f70:	40012000 	.word	0x40012000
 8003f74:	40012200 	.word	0x40012200

08003f78 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x1c>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e136      	b.n	800422a <HAL_ADC_ConfigChannel+0x28a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b09      	cmp	r3, #9
 8003fca:	d93a      	bls.n	8004042 <HAL_ADC_ConfigChannel+0xa2>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fd4:	d035      	beq.n	8004042 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68d9      	ldr	r1, [r3, #12]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	4413      	add	r3, r2
 8003fea:	3b1e      	subs	r3, #30
 8003fec:	2207      	movs	r2, #7
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43da      	mvns	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	400a      	ands	r2, r1
 8003ffa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a8d      	ldr	r2, [pc, #564]	@ (8004238 <HAL_ADC_ConfigChannel+0x298>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10a      	bne.n	800401c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68d9      	ldr	r1, [r3, #12]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	061a      	lsls	r2, r3, #24
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800401a:	e035      	b.n	8004088 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68d9      	ldr	r1, [r3, #12]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	4618      	mov	r0, r3
 800402e:	4603      	mov	r3, r0
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	4403      	add	r3, r0
 8004034:	3b1e      	subs	r3, #30
 8004036:	409a      	lsls	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004040:	e022      	b.n	8004088 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6919      	ldr	r1, [r3, #16]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	461a      	mov	r2, r3
 8004050:	4613      	mov	r3, r2
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4413      	add	r3, r2
 8004056:	2207      	movs	r2, #7
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43da      	mvns	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	400a      	ands	r2, r1
 8004064:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6919      	ldr	r1, [r3, #16]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	b29b      	uxth	r3, r3
 8004076:	4618      	mov	r0, r3
 8004078:	4603      	mov	r3, r0
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4403      	add	r3, r0
 800407e:	409a      	lsls	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b06      	cmp	r3, #6
 800408e:	d824      	bhi.n	80040da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	3b05      	subs	r3, #5
 80040a2:	221f      	movs	r2, #31
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43da      	mvns	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	400a      	ands	r2, r1
 80040b0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	4618      	mov	r0, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	3b05      	subs	r3, #5
 80040cc:	fa00 f203 	lsl.w	r2, r0, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80040d8:	e04c      	b.n	8004174 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d824      	bhi.n	800412c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	3b23      	subs	r3, #35	@ 0x23
 80040f4:	221f      	movs	r2, #31
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43da      	mvns	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	400a      	ands	r2, r1
 8004102:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	b29b      	uxth	r3, r3
 8004110:	4618      	mov	r0, r3
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	3b23      	subs	r3, #35	@ 0x23
 800411e:	fa00 f203 	lsl.w	r2, r0, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	631a      	str	r2, [r3, #48]	@ 0x30
 800412a:	e023      	b.n	8004174 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	3b41      	subs	r3, #65	@ 0x41
 800413e:	221f      	movs	r2, #31
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43da      	mvns	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	400a      	ands	r2, r1
 800414c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	4618      	mov	r0, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	3b41      	subs	r3, #65	@ 0x41
 8004168:	fa00 f203 	lsl.w	r2, r0, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a30      	ldr	r2, [pc, #192]	@ (800423c <HAL_ADC_ConfigChannel+0x29c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d10a      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x1f4>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004186:	d105      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004188:	4b2d      	ldr	r3, [pc, #180]	@ (8004240 <HAL_ADC_ConfigChannel+0x2a0>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4a2c      	ldr	r2, [pc, #176]	@ (8004240 <HAL_ADC_ConfigChannel+0x2a0>)
 800418e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004192:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a28      	ldr	r2, [pc, #160]	@ (800423c <HAL_ADC_ConfigChannel+0x29c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d10f      	bne.n	80041be <HAL_ADC_ConfigChannel+0x21e>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b12      	cmp	r3, #18
 80041a4:	d10b      	bne.n	80041be <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80041a6:	4b26      	ldr	r3, [pc, #152]	@ (8004240 <HAL_ADC_ConfigChannel+0x2a0>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4a25      	ldr	r2, [pc, #148]	@ (8004240 <HAL_ADC_ConfigChannel+0x2a0>)
 80041ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80041b0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80041b2:	4b23      	ldr	r3, [pc, #140]	@ (8004240 <HAL_ADC_ConfigChannel+0x2a0>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4a22      	ldr	r2, [pc, #136]	@ (8004240 <HAL_ADC_ConfigChannel+0x2a0>)
 80041b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041bc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1e      	ldr	r2, [pc, #120]	@ (800423c <HAL_ADC_ConfigChannel+0x29c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d12b      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x280>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004238 <HAL_ADC_ConfigChannel+0x298>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <HAL_ADC_ConfigChannel+0x23a>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b11      	cmp	r3, #17
 80041d8:	d122      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80041da:	4b19      	ldr	r3, [pc, #100]	@ (8004240 <HAL_ADC_ConfigChannel+0x2a0>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4a18      	ldr	r2, [pc, #96]	@ (8004240 <HAL_ADC_ConfigChannel+0x2a0>)
 80041e0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80041e4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80041e6:	4b16      	ldr	r3, [pc, #88]	@ (8004240 <HAL_ADC_ConfigChannel+0x2a0>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4a15      	ldr	r2, [pc, #84]	@ (8004240 <HAL_ADC_ConfigChannel+0x2a0>)
 80041ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a10      	ldr	r2, [pc, #64]	@ (8004238 <HAL_ADC_ConfigChannel+0x298>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d111      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80041fc:	4b11      	ldr	r3, [pc, #68]	@ (8004244 <HAL_ADC_ConfigChannel+0x2a4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a11      	ldr	r2, [pc, #68]	@ (8004248 <HAL_ADC_ConfigChannel+0x2a8>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	0c9a      	lsrs	r2, r3, #18
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004212:	e002      	b.n	800421a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3b01      	subs	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f9      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	10000012 	.word	0x10000012
 800423c:	40012000 	.word	0x40012000
 8004240:	40012300 	.word	0x40012300
 8004244:	2000000c 	.word	0x2000000c
 8004248:	431bde83 	.word	0x431bde83

0800424c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004254:	4b78      	ldr	r3, [pc, #480]	@ (8004438 <ADC_Init+0x1ec>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4a77      	ldr	r2, [pc, #476]	@ (8004438 <ADC_Init+0x1ec>)
 800425a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800425e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004260:	4b75      	ldr	r3, [pc, #468]	@ (8004438 <ADC_Init+0x1ec>)
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	4973      	ldr	r1, [pc, #460]	@ (8004438 <ADC_Init+0x1ec>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800427c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	021a      	lsls	r2, r3, #8
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80042a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	4a58      	ldr	r2, [pc, #352]	@ (800443c <ADC_Init+0x1f0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6899      	ldr	r1, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004310:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6899      	ldr	r1, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	e00f      	b.n	8004346 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004334:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004344:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0202 	bic.w	r2, r2, #2
 8004354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6899      	ldr	r1, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	005a      	lsls	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004382:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004392:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	3b01      	subs	r3, #1
 80043a0:	035a      	lsls	r2, r3, #13
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	e007      	b.n	80043bc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80043ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	051a      	lsls	r2, r3, #20
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80043f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6899      	ldr	r1, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043fe:	025a      	lsls	r2, r3, #9
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6899      	ldr	r1, [r3, #8]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	029a      	lsls	r2, r3, #10
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40012300 	.word	0x40012300
 800443c:	0f000001 	.word	0x0f000001

08004440 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800444c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004456:	2b00      	cmp	r3, #0
 8004458:	d13c      	bne.n	80044d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d12b      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004478:	2b00      	cmp	r3, #0
 800447a:	d127      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004486:	2b00      	cmp	r3, #0
 8004488:	d006      	beq.n	8004498 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004494:	2b00      	cmp	r3, #0
 8004496:	d119      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0220 	bic.w	r2, r2, #32
 80044a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d105      	bne.n	80044cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c4:	f043 0201 	orr.w	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7ff f99f 	bl	8003810 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044d2:	e00e      	b.n	80044f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff fd53 	bl	8003f8c <HAL_ADC_ErrorCallback>
}
 80044e6:	e004      	b.n	80044f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004506:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7ff fd35 	bl	8003f78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004522:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2240      	movs	r2, #64	@ 0x40
 8004528:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452e:	f043 0204 	orr.w	r2, r3, #4
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7ff fd28 	bl	8003f8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004554:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <__NVIC_SetPriorityGrouping+0x40>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004560:	4013      	ands	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <__NVIC_SetPriorityGrouping+0x44>)
 800456e:	4313      	orrs	r3, r2
 8004570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004572:	4a04      	ldr	r2, [pc, #16]	@ (8004584 <__NVIC_SetPriorityGrouping+0x40>)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	60d3      	str	r3, [r2, #12]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000ed00 	.word	0xe000ed00
 8004588:	05fa0000 	.word	0x05fa0000

0800458c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004590:	4b04      	ldr	r3, [pc, #16]	@ (80045a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	f003 0307 	and.w	r3, r3, #7
}
 800459a:	4618      	mov	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	db0b      	blt.n	80045d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	f003 021f 	and.w	r2, r3, #31
 80045c0:	4907      	ldr	r1, [pc, #28]	@ (80045e0 <__NVIC_EnableIRQ+0x38>)
 80045c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2001      	movs	r0, #1
 80045ca:	fa00 f202 	lsl.w	r2, r0, r2
 80045ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	e000e100 	.word	0xe000e100

080045e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	6039      	str	r1, [r7, #0]
 80045ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	db0a      	blt.n	800460e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	490c      	ldr	r1, [pc, #48]	@ (8004630 <__NVIC_SetPriority+0x4c>)
 80045fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004602:	0112      	lsls	r2, r2, #4
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	440b      	add	r3, r1
 8004608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800460c:	e00a      	b.n	8004624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4908      	ldr	r1, [pc, #32]	@ (8004634 <__NVIC_SetPriority+0x50>)
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	3b04      	subs	r3, #4
 800461c:	0112      	lsls	r2, r2, #4
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	440b      	add	r3, r1
 8004622:	761a      	strb	r2, [r3, #24]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000e100 	.word	0xe000e100
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	@ 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f1c3 0307 	rsb	r3, r3, #7
 8004652:	2b04      	cmp	r3, #4
 8004654:	bf28      	it	cs
 8004656:	2304      	movcs	r3, #4
 8004658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3304      	adds	r3, #4
 800465e:	2b06      	cmp	r3, #6
 8004660:	d902      	bls.n	8004668 <NVIC_EncodePriority+0x30>
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3b03      	subs	r3, #3
 8004666:	e000      	b.n	800466a <NVIC_EncodePriority+0x32>
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800466c:	f04f 32ff 	mov.w	r2, #4294967295
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43da      	mvns	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	401a      	ands	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004680:	f04f 31ff 	mov.w	r1, #4294967295
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	43d9      	mvns	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004690:	4313      	orrs	r3, r2
         );
}
 8004692:	4618      	mov	r0, r3
 8004694:	3724      	adds	r7, #36	@ 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046b0:	d301      	bcc.n	80046b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046b2:	2301      	movs	r3, #1
 80046b4:	e00f      	b.n	80046d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b6:	4a0a      	ldr	r2, [pc, #40]	@ (80046e0 <SysTick_Config+0x40>)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046be:	210f      	movs	r1, #15
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	f7ff ff8e 	bl	80045e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c8:	4b05      	ldr	r3, [pc, #20]	@ (80046e0 <SysTick_Config+0x40>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ce:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <SysTick_Config+0x40>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	e000e010 	.word	0xe000e010

080046e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff ff29 	bl	8004544 <__NVIC_SetPriorityGrouping>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
 8004706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800470c:	f7ff ff3e 	bl	800458c <__NVIC_GetPriorityGrouping>
 8004710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	6978      	ldr	r0, [r7, #20]
 8004718:	f7ff ff8e 	bl	8004638 <NVIC_EncodePriority>
 800471c:	4602      	mov	r2, r0
 800471e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff5d 	bl	80045e4 <__NVIC_SetPriority>
}
 800472a:	bf00      	nop
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	4603      	mov	r3, r0
 800473a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800473c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff ff31 	bl	80045a8 <__NVIC_EnableIRQ>
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b082      	sub	sp, #8
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff ffa2 	bl	80046a0 <SysTick_Config>
 800475c:	4603      	mov	r3, r0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004774:	f7ff fa92 	bl	8003c9c <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e099      	b.n	80048b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047a4:	e00f      	b.n	80047c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047a6:	f7ff fa79 	bl	8003c9c <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b05      	cmp	r3, #5
 80047b2:	d908      	bls.n	80047c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2203      	movs	r2, #3
 80047be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e078      	b.n	80048b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e8      	bne.n	80047a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4b38      	ldr	r3, [pc, #224]	@ (80048c0 <HAL_DMA_Init+0x158>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800480a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	2b04      	cmp	r3, #4
 800481e:	d107      	bne.n	8004830 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004828:	4313      	orrs	r3, r2
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 0307 	bic.w	r3, r3, #7
 8004846:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	2b04      	cmp	r3, #4
 8004858:	d117      	bne.n	800488a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00e      	beq.n	800488a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fb09 	bl	8004e84 <DMA_CheckFifoParam>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2240      	movs	r2, #64	@ 0x40
 800487c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004886:	2301      	movs	r3, #1
 8004888:	e016      	b.n	80048b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fac0 	bl	8004e18 <DMA_CalcBaseAndBitshift>
 8004898:	4603      	mov	r3, r0
 800489a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a0:	223f      	movs	r2, #63	@ 0x3f
 80048a2:	409a      	lsls	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	e010803f 	.word	0xe010803f

080048c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_DMA_Start_IT+0x26>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e048      	b.n	800497c <HAL_DMA_Start_IT+0xb8>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d137      	bne.n	800496e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2202      	movs	r2, #2
 8004902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fa52 	bl	8004dbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491c:	223f      	movs	r2, #63	@ 0x3f
 800491e:	409a      	lsls	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0216 	orr.w	r2, r2, #22
 8004932:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004942:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0208 	orr.w	r2, r2, #8
 800495a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e005      	b.n	800497a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004976:	2302      	movs	r3, #2
 8004978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800497a:	7dfb      	ldrb	r3, [r7, #23]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004990:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004992:	f7ff f983 	bl	8003c9c <HAL_GetTick>
 8004996:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d008      	beq.n	80049b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2280      	movs	r2, #128	@ 0x80
 80049a8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e052      	b.n	8004a5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0216 	bic.w	r2, r2, #22
 80049c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d103      	bne.n	80049e6 <HAL_DMA_Abort+0x62>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0208 	bic.w	r2, r2, #8
 80049f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0201 	bic.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a06:	e013      	b.n	8004a30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a08:	f7ff f948 	bl	8003c9c <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b05      	cmp	r3, #5
 8004a14:	d90c      	bls.n	8004a30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2203      	movs	r2, #3
 8004a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e015      	b.n	8004a5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e4      	bne.n	8004a08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a42:	223f      	movs	r2, #63	@ 0x3f
 8004a44:	409a      	lsls	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d004      	beq.n	8004a82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2280      	movs	r2, #128	@ 0x80
 8004a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e00c      	b.n	8004a9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2205      	movs	r2, #5
 8004a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0201 	bic.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004ab4:	4b8e      	ldr	r3, [pc, #568]	@ (8004cf0 <HAL_DMA_IRQHandler+0x248>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a8e      	ldr	r2, [pc, #568]	@ (8004cf4 <HAL_DMA_IRQHandler+0x24c>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	0a9b      	lsrs	r3, r3, #10
 8004ac0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d01a      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d013      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0204 	bic.w	r2, r2, #4
 8004afa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b00:	2208      	movs	r2, #8
 8004b02:	409a      	lsls	r2, r3
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0c:	f043 0201 	orr.w	r2, r3, #1
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b18:	2201      	movs	r2, #1
 8004b1a:	409a      	lsls	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d012      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b36:	2201      	movs	r2, #1
 8004b38:	409a      	lsls	r2, r3
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b42:	f043 0202 	orr.w	r2, r3, #2
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4e:	2204      	movs	r2, #4
 8004b50:	409a      	lsls	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d012      	beq.n	8004b80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00b      	beq.n	8004b80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6c:	2204      	movs	r2, #4
 8004b6e:	409a      	lsls	r2, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b78:	f043 0204 	orr.w	r2, r3, #4
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b84:	2210      	movs	r2, #16
 8004b86:	409a      	lsls	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d043      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d03c      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba2:	2210      	movs	r2, #16
 8004ba4:	409a      	lsls	r2, r3
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d018      	beq.n	8004bea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d108      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d024      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
 8004bd6:	e01f      	b.n	8004c18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	4798      	blx	r3
 8004be8:	e016      	b.n	8004c18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d107      	bne.n	8004c08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0208 	bic.w	r2, r2, #8
 8004c06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 808f 	beq.w	8004d48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8087 	beq.w	8004d48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3e:	2220      	movs	r2, #32
 8004c40:	409a      	lsls	r2, r3
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d136      	bne.n	8004cc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0216 	bic.w	r2, r2, #22
 8004c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695a      	ldr	r2, [r3, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d103      	bne.n	8004c82 <HAL_DMA_IRQHandler+0x1da>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0208 	bic.w	r2, r2, #8
 8004c90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c96:	223f      	movs	r2, #63	@ 0x3f
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d07e      	beq.n	8004db4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4798      	blx	r3
        }
        return;
 8004cbe:	e079      	b.n	8004db4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01d      	beq.n	8004d0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10d      	bne.n	8004cf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d031      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
 8004cec:	e02c      	b.n	8004d48 <HAL_DMA_IRQHandler+0x2a0>
 8004cee:	bf00      	nop
 8004cf0:	2000000c 	.word	0x2000000c
 8004cf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d023      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4798      	blx	r3
 8004d08:	e01e      	b.n	8004d48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10f      	bne.n	8004d38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0210 	bic.w	r2, r2, #16
 8004d26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d032      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d022      	beq.n	8004da2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2205      	movs	r2, #5
 8004d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	3301      	adds	r3, #1
 8004d78:	60bb      	str	r3, [r7, #8]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d307      	bcc.n	8004d90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f2      	bne.n	8004d74 <HAL_DMA_IRQHandler+0x2cc>
 8004d8e:	e000      	b.n	8004d92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
 8004db2:	e000      	b.n	8004db6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004db4:	bf00      	nop
    }
  }
}
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004dd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b40      	cmp	r3, #64	@ 0x40
 8004de8:	d108      	bne.n	8004dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004dfa:	e007      	b.n	8004e0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	60da      	str	r2, [r3, #12]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	3b10      	subs	r3, #16
 8004e28:	4a13      	ldr	r2, [pc, #76]	@ (8004e78 <DMA_CalcBaseAndBitshift+0x60>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	091b      	lsrs	r3, r3, #4
 8004e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e32:	4a12      	ldr	r2, [pc, #72]	@ (8004e7c <DMA_CalcBaseAndBitshift+0x64>)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d908      	bls.n	8004e58 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e80 <DMA_CalcBaseAndBitshift+0x68>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	1d1a      	adds	r2, r3, #4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e56:	e006      	b.n	8004e66 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b08      	ldr	r3, [pc, #32]	@ (8004e80 <DMA_CalcBaseAndBitshift+0x68>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	aaaaaaab 	.word	0xaaaaaaab
 8004e7c:	0800ef78 	.word	0x0800ef78
 8004e80:	fffffc00 	.word	0xfffffc00

08004e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d11f      	bne.n	8004ede <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d856      	bhi.n	8004f52 <DMA_CheckFifoParam+0xce>
 8004ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <DMA_CheckFifoParam+0x28>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ebd 	.word	0x08004ebd
 8004eb0:	08004ecf 	.word	0x08004ecf
 8004eb4:	08004ebd 	.word	0x08004ebd
 8004eb8:	08004f53 	.word	0x08004f53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d046      	beq.n	8004f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ecc:	e043      	b.n	8004f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ed6:	d140      	bne.n	8004f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004edc:	e03d      	b.n	8004f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ee6:	d121      	bne.n	8004f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d837      	bhi.n	8004f5e <DMA_CheckFifoParam+0xda>
 8004eee:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef4 <DMA_CheckFifoParam+0x70>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f05 	.word	0x08004f05
 8004ef8:	08004f0b 	.word	0x08004f0b
 8004efc:	08004f05 	.word	0x08004f05
 8004f00:	08004f1d 	.word	0x08004f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      break;
 8004f08:	e030      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d025      	beq.n	8004f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1a:	e022      	b.n	8004f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f24:	d11f      	bne.n	8004f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f2a:	e01c      	b.n	8004f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d903      	bls.n	8004f3a <DMA_CheckFifoParam+0xb6>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d003      	beq.n	8004f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f38:	e018      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f3e:	e015      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00e      	beq.n	8004f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f50:	e00b      	b.n	8004f6a <DMA_CheckFifoParam+0xe6>
      break;
 8004f52:	bf00      	nop
 8004f54:	e00a      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      break;
 8004f56:	bf00      	nop
 8004f58:	e008      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e006      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e004      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      break;
 8004f62:	bf00      	nop
 8004f64:	e002      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f66:	bf00      	nop
 8004f68:	e000      	b.n	8004f6c <DMA_CheckFifoParam+0xe8>
      break;
 8004f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e086      	b.n	800509c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d106      	bne.n	8004fa6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2223      	movs	r2, #35	@ 0x23
 8004f9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7fe f957 	bl	8003254 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80050a4 <HAL_ETH_Init+0x128>)
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004faa:	4a3e      	ldr	r2, [pc, #248]	@ (80050a4 <HAL_ETH_Init+0x128>)
 8004fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80050a4 <HAL_ETH_Init+0x128>)
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fba:	60bb      	str	r3, [r7, #8]
 8004fbc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004fbe:	4b3a      	ldr	r3, [pc, #232]	@ (80050a8 <HAL_ETH_Init+0x12c>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4a39      	ldr	r2, [pc, #228]	@ (80050a8 <HAL_ETH_Init+0x12c>)
 8004fc4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004fc8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004fca:	4b37      	ldr	r3, [pc, #220]	@ (80050a8 <HAL_ETH_Init+0x12c>)
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	4935      	ldr	r1, [pc, #212]	@ (80050a8 <HAL_ETH_Init+0x12c>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004fd8:	4b33      	ldr	r3, [pc, #204]	@ (80050a8 <HAL_ETH_Init+0x12c>)
 8004fda:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	f043 0301 	orr.w	r3, r3, #1
 8004fee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ff2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ff4:	f7fe fe52 	bl	8003c9c <HAL_GetTick>
 8004ff8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004ffa:	e011      	b.n	8005020 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004ffc:	f7fe fe4e 	bl	8003c9c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800500a:	d909      	bls.n	8005020 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2204      	movs	r2, #4
 8005010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	22e0      	movs	r2, #224	@ 0xe0
 8005018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e03d      	b.n	800509c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e4      	bne.n	8004ffc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f97a 	bl	800532c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fa25 	bl	8005488 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fa7b 	bl	800553a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	461a      	mov	r2, r3
 800504a:	2100      	movs	r1, #0
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f9e3 	bl	8005418 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8005060:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b0f      	ldr	r3, [pc, #60]	@ (80050ac <HAL_ETH_Init+0x130>)
 8005070:	430b      	orrs	r3, r1
 8005072:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8005086:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2210      	movs	r2, #16
 8005096:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40013800 	.word	0x40013800
 80050ac:	00020060 	.word	0x00020060

080050b0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4b53      	ldr	r3, [pc, #332]	@ (8005214 <ETH_SetMACConfig+0x164>)
 80050c6:	4013      	ands	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	7b9b      	ldrb	r3, [r3, #14]
 80050ce:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	7c12      	ldrb	r2, [r2, #16]
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	d102      	bne.n	80050de <ETH_SetMACConfig+0x2e>
 80050d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80050dc:	e000      	b.n	80050e0 <ETH_SetMACConfig+0x30>
 80050de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80050e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	7c52      	ldrb	r2, [r2, #17]
 80050e6:	2a00      	cmp	r2, #0
 80050e8:	d102      	bne.n	80050f0 <ETH_SetMACConfig+0x40>
 80050ea:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80050ee:	e000      	b.n	80050f2 <ETH_SetMACConfig+0x42>
 80050f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80050f2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80050f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	7fdb      	ldrb	r3, [r3, #31]
 80050fe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005100:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005106:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	7f92      	ldrb	r2, [r2, #30]
 800510c:	2a00      	cmp	r2, #0
 800510e:	d102      	bne.n	8005116 <ETH_SetMACConfig+0x66>
 8005110:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005114:	e000      	b.n	8005118 <ETH_SetMACConfig+0x68>
 8005116:	2200      	movs	r2, #0
                        macconf->Speed |
 8005118:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	7f1b      	ldrb	r3, [r3, #28]
 800511e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005120:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005126:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	791b      	ldrb	r3, [r3, #4]
 800512c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800512e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005136:	2a00      	cmp	r2, #0
 8005138:	d102      	bne.n	8005140 <ETH_SetMACConfig+0x90>
 800513a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800513e:	e000      	b.n	8005142 <ETH_SetMACConfig+0x92>
 8005140:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005142:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	7bdb      	ldrb	r3, [r3, #15]
 8005148:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800514a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005150:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005158:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800515a:	4313      	orrs	r3, r2
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005172:	2001      	movs	r0, #1
 8005174:	f7fe fd9e 	bl	8003cb4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800518e:	4013      	ands	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005196:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800519e:	2a00      	cmp	r2, #0
 80051a0:	d101      	bne.n	80051a6 <ETH_SetMACConfig+0xf6>
 80051a2:	2280      	movs	r2, #128	@ 0x80
 80051a4:	e000      	b.n	80051a8 <ETH_SetMACConfig+0xf8>
 80051a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80051a8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80051ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80051b6:	2a01      	cmp	r2, #1
 80051b8:	d101      	bne.n	80051be <ETH_SetMACConfig+0x10e>
 80051ba:	2208      	movs	r2, #8
 80051bc:	e000      	b.n	80051c0 <ETH_SetMACConfig+0x110>
 80051be:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80051c0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80051c8:	2a01      	cmp	r2, #1
 80051ca:	d101      	bne.n	80051d0 <ETH_SetMACConfig+0x120>
 80051cc:	2204      	movs	r2, #4
 80051ce:	e000      	b.n	80051d2 <ETH_SetMACConfig+0x122>
 80051d0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80051d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80051da:	2a01      	cmp	r2, #1
 80051dc:	d101      	bne.n	80051e2 <ETH_SetMACConfig+0x132>
 80051de:	2202      	movs	r2, #2
 80051e0:	e000      	b.n	80051e4 <ETH_SetMACConfig+0x134>
 80051e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80051e4:	4313      	orrs	r3, r2
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051fc:	2001      	movs	r0, #1
 80051fe:	f7fe fd59 	bl	8003cb4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	619a      	str	r2, [r3, #24]
}
 800520a:	bf00      	nop
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	fd20810f 	.word	0xfd20810f

08005218 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4b3d      	ldr	r3, [pc, #244]	@ (8005328 <ETH_SetDMAConfig+0x110>)
 8005232:	4013      	ands	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	7b1b      	ldrb	r3, [r3, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <ETH_SetDMAConfig+0x2c>
 800523e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005242:	e000      	b.n	8005246 <ETH_SetDMAConfig+0x2e>
 8005244:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	7b5b      	ldrb	r3, [r3, #13]
 800524a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800524c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	7f52      	ldrb	r2, [r2, #29]
 8005252:	2a00      	cmp	r2, #0
 8005254:	d102      	bne.n	800525c <ETH_SetDMAConfig+0x44>
 8005256:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800525a:	e000      	b.n	800525e <ETH_SetDMAConfig+0x46>
 800525c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800525e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	7b9b      	ldrb	r3, [r3, #14]
 8005264:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005266:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800526c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	7f1b      	ldrb	r3, [r3, #28]
 8005272:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005274:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	7f9b      	ldrb	r3, [r3, #30]
 800527a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800527c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005282:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800528a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800528c:	4313      	orrs	r3, r2
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800529c:	461a      	mov	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80052ae:	2001      	movs	r0, #1
 80052b0:	f7fe fd00 	bl	8003cb4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052bc:	461a      	mov	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	791b      	ldrb	r3, [r3, #4]
 80052c6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80052cc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80052d2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80052d8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80052e0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80052e2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80052ea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80052f0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80052fe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800530c:	2001      	movs	r0, #1
 800530e:	f7fe fcd1 	bl	8003cb4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800531a:	461a      	mov	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6013      	str	r3, [r2, #0]
}
 8005320:	bf00      	nop
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	f8de3f23 	.word	0xf8de3f23

0800532c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b0a6      	sub	sp, #152	@ 0x98
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005334:	2301      	movs	r3, #1
 8005336:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800533a:	2301      	movs	r3, #1
 800533c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005340:	2300      	movs	r3, #0
 8005342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005344:	2300      	movs	r3, #0
 8005346:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005350:	2300      	movs	r3, #0
 8005352:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800535c:	2301      	movs	r3, #1
 800535e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005362:	2300      	movs	r3, #0
 8005364:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800536e:	2300      	movs	r3, #0
 8005370:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005372:	2300      	movs	r3, #0
 8005374:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005378:	2300      	movs	r3, #0
 800537a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800537c:	2300      	movs	r3, #0
 800537e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005382:	2300      	movs	r3, #0
 8005384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005388:	2300      	movs	r3, #0
 800538a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800538e:	2300      	movs	r3, #0
 8005390:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005394:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005398:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800539a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800539e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80053a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff fe7f 	bl	80050b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80053b2:	2301      	movs	r3, #1
 80053b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80053b6:	2301      	movs	r3, #1
 80053b8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80053c0:	2301      	movs	r3, #1
 80053c2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80053d4:	2300      	movs	r3, #0
 80053d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80053de:	2301      	movs	r3, #1
 80053e0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80053e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053e6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80053e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80053ec:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80053ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80053f2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005402:	f107 0308 	add.w	r3, r7, #8
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff ff05 	bl	8005218 <ETH_SetDMAConfig>
}
 800540e:	bf00      	nop
 8005410:	3798      	adds	r7, #152	@ 0x98
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
	...

08005418 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3305      	adds	r3, #5
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	021b      	lsls	r3, r3, #8
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	3204      	adds	r2, #4
 8005430:	7812      	ldrb	r2, [r2, #0]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	4b11      	ldr	r3, [pc, #68]	@ (8005480 <ETH_MACAddressConfig+0x68>)
 800543a:	4413      	add	r3, r2
 800543c:	461a      	mov	r2, r3
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3303      	adds	r3, #3
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	061a      	lsls	r2, r3, #24
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3302      	adds	r3, #2
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	041b      	lsls	r3, r3, #16
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3301      	adds	r3, #1
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	021b      	lsls	r3, r3, #8
 800545c:	4313      	orrs	r3, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	7812      	ldrb	r2, [r2, #0]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	4b06      	ldr	r3, [pc, #24]	@ (8005484 <ETH_MACAddressConfig+0x6c>)
 800546a:	4413      	add	r3, r2
 800546c:	461a      	mov	r2, r3
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	6013      	str	r3, [r2, #0]
}
 8005472:	bf00      	nop
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	40028040 	.word	0x40028040
 8005484:	40028044 	.word	0x40028044

08005488 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e03e      	b.n	8005514 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68d9      	ldr	r1, [r3, #12]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	440b      	add	r3, r1
 80054a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2200      	movs	r2, #0
 80054b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2200      	movs	r2, #0
 80054b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	3206      	adds	r2, #6
 80054c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d80c      	bhi.n	80054f8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68d9      	ldr	r1, [r3, #12]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	440b      	add	r3, r1
 80054f0:	461a      	mov	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	60da      	str	r2, [r3, #12]
 80054f6:	e004      	b.n	8005502 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	461a      	mov	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3301      	adds	r3, #1
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b03      	cmp	r3, #3
 8005518:	d9bd      	bls.n	8005496 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800552c:	611a      	str	r2, [r3, #16]
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	e048      	b.n	80055da <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6919      	ldr	r1, [r3, #16]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	440b      	add	r3, r1
 8005558:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2200      	movs	r2, #0
 8005564:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2200      	movs	r2, #0
 800556a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2200      	movs	r2, #0
 8005576:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2200      	movs	r2, #0
 800557c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005584:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	3212      	adds	r2, #18
 80055a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d80c      	bhi.n	80055ca <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6919      	ldr	r1, [r3, #16]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	440b      	add	r3, r1
 80055c2:	461a      	mov	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	60da      	str	r2, [r3, #12]
 80055c8:	e004      	b.n	80055d4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	461a      	mov	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d9b3      	bls.n	8005548 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800560a:	60da      	str	r2, [r3, #12]
}
 800560c:	bf00      	nop
 800560e:	3714      	adds	r7, #20
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005618:	b480      	push	{r7}
 800561a:	b089      	sub	sp, #36	@ 0x24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005622:	2300      	movs	r3, #0
 8005624:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800562e:	2300      	movs	r3, #0
 8005630:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005632:	2300      	movs	r3, #0
 8005634:	61fb      	str	r3, [r7, #28]
 8005636:	e175      	b.n	8005924 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005638:	2201      	movs	r2, #1
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	fa02 f303 	lsl.w	r3, r2, r3
 8005640:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	429a      	cmp	r2, r3
 8005652:	f040 8164 	bne.w	800591e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b01      	cmp	r3, #1
 8005660:	d005      	beq.n	800566e <HAL_GPIO_Init+0x56>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d130      	bne.n	80056d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	2203      	movs	r2, #3
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4013      	ands	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	fa02 f303 	lsl.w	r3, r2, r3
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	4313      	orrs	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056a4:	2201      	movs	r2, #1
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	43db      	mvns	r3, r3
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	4013      	ands	r3, r2
 80056b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	091b      	lsrs	r3, r3, #4
 80056ba:	f003 0201 	and.w	r2, r3, #1
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f003 0303 	and.w	r3, r3, #3
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d017      	beq.n	800570c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	2203      	movs	r2, #3
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	43db      	mvns	r3, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4013      	ands	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4313      	orrs	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 0303 	and.w	r3, r3, #3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d123      	bne.n	8005760 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	08da      	lsrs	r2, r3, #3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3208      	adds	r2, #8
 8005720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	220f      	movs	r2, #15
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43db      	mvns	r3, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4013      	ands	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4313      	orrs	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	08da      	lsrs	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3208      	adds	r2, #8
 800575a:	69b9      	ldr	r1, [r7, #24]
 800575c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	2203      	movs	r2, #3
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	43db      	mvns	r3, r3
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4013      	ands	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f003 0203 	and.w	r2, r3, #3
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4313      	orrs	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80be 	beq.w	800591e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057a2:	4b66      	ldr	r3, [pc, #408]	@ (800593c <HAL_GPIO_Init+0x324>)
 80057a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a6:	4a65      	ldr	r2, [pc, #404]	@ (800593c <HAL_GPIO_Init+0x324>)
 80057a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80057ae:	4b63      	ldr	r3, [pc, #396]	@ (800593c <HAL_GPIO_Init+0x324>)
 80057b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80057ba:	4a61      	ldr	r2, [pc, #388]	@ (8005940 <HAL_GPIO_Init+0x328>)
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	089b      	lsrs	r3, r3, #2
 80057c0:	3302      	adds	r3, #2
 80057c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	220f      	movs	r2, #15
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4013      	ands	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a58      	ldr	r2, [pc, #352]	@ (8005944 <HAL_GPIO_Init+0x32c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d037      	beq.n	8005856 <HAL_GPIO_Init+0x23e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a57      	ldr	r2, [pc, #348]	@ (8005948 <HAL_GPIO_Init+0x330>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d031      	beq.n	8005852 <HAL_GPIO_Init+0x23a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a56      	ldr	r2, [pc, #344]	@ (800594c <HAL_GPIO_Init+0x334>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d02b      	beq.n	800584e <HAL_GPIO_Init+0x236>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a55      	ldr	r2, [pc, #340]	@ (8005950 <HAL_GPIO_Init+0x338>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d025      	beq.n	800584a <HAL_GPIO_Init+0x232>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a54      	ldr	r2, [pc, #336]	@ (8005954 <HAL_GPIO_Init+0x33c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d01f      	beq.n	8005846 <HAL_GPIO_Init+0x22e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a53      	ldr	r2, [pc, #332]	@ (8005958 <HAL_GPIO_Init+0x340>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d019      	beq.n	8005842 <HAL_GPIO_Init+0x22a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a52      	ldr	r2, [pc, #328]	@ (800595c <HAL_GPIO_Init+0x344>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d013      	beq.n	800583e <HAL_GPIO_Init+0x226>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a51      	ldr	r2, [pc, #324]	@ (8005960 <HAL_GPIO_Init+0x348>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00d      	beq.n	800583a <HAL_GPIO_Init+0x222>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a50      	ldr	r2, [pc, #320]	@ (8005964 <HAL_GPIO_Init+0x34c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d007      	beq.n	8005836 <HAL_GPIO_Init+0x21e>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a4f      	ldr	r2, [pc, #316]	@ (8005968 <HAL_GPIO_Init+0x350>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d101      	bne.n	8005832 <HAL_GPIO_Init+0x21a>
 800582e:	2309      	movs	r3, #9
 8005830:	e012      	b.n	8005858 <HAL_GPIO_Init+0x240>
 8005832:	230a      	movs	r3, #10
 8005834:	e010      	b.n	8005858 <HAL_GPIO_Init+0x240>
 8005836:	2308      	movs	r3, #8
 8005838:	e00e      	b.n	8005858 <HAL_GPIO_Init+0x240>
 800583a:	2307      	movs	r3, #7
 800583c:	e00c      	b.n	8005858 <HAL_GPIO_Init+0x240>
 800583e:	2306      	movs	r3, #6
 8005840:	e00a      	b.n	8005858 <HAL_GPIO_Init+0x240>
 8005842:	2305      	movs	r3, #5
 8005844:	e008      	b.n	8005858 <HAL_GPIO_Init+0x240>
 8005846:	2304      	movs	r3, #4
 8005848:	e006      	b.n	8005858 <HAL_GPIO_Init+0x240>
 800584a:	2303      	movs	r3, #3
 800584c:	e004      	b.n	8005858 <HAL_GPIO_Init+0x240>
 800584e:	2302      	movs	r3, #2
 8005850:	e002      	b.n	8005858 <HAL_GPIO_Init+0x240>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <HAL_GPIO_Init+0x240>
 8005856:	2300      	movs	r3, #0
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	f002 0203 	and.w	r2, r2, #3
 800585e:	0092      	lsls	r2, r2, #2
 8005860:	4093      	lsls	r3, r2
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4313      	orrs	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005868:	4935      	ldr	r1, [pc, #212]	@ (8005940 <HAL_GPIO_Init+0x328>)
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	089b      	lsrs	r3, r3, #2
 800586e:	3302      	adds	r3, #2
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005876:	4b3d      	ldr	r3, [pc, #244]	@ (800596c <HAL_GPIO_Init+0x354>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	43db      	mvns	r3, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4013      	ands	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800589a:	4a34      	ldr	r2, [pc, #208]	@ (800596c <HAL_GPIO_Init+0x354>)
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058a0:	4b32      	ldr	r3, [pc, #200]	@ (800596c <HAL_GPIO_Init+0x354>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4013      	ands	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058c4:	4a29      	ldr	r2, [pc, #164]	@ (800596c <HAL_GPIO_Init+0x354>)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058ca:	4b28      	ldr	r3, [pc, #160]	@ (800596c <HAL_GPIO_Init+0x354>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	43db      	mvns	r3, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4013      	ands	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058ee:	4a1f      	ldr	r2, [pc, #124]	@ (800596c <HAL_GPIO_Init+0x354>)
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058f4:	4b1d      	ldr	r3, [pc, #116]	@ (800596c <HAL_GPIO_Init+0x354>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005918:	4a14      	ldr	r2, [pc, #80]	@ (800596c <HAL_GPIO_Init+0x354>)
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	3301      	adds	r3, #1
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b0f      	cmp	r3, #15
 8005928:	f67f ae86 	bls.w	8005638 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	3724      	adds	r7, #36	@ 0x24
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40023800 	.word	0x40023800
 8005940:	40013800 	.word	0x40013800
 8005944:	40020000 	.word	0x40020000
 8005948:	40020400 	.word	0x40020400
 800594c:	40020800 	.word	0x40020800
 8005950:	40020c00 	.word	0x40020c00
 8005954:	40021000 	.word	0x40021000
 8005958:	40021400 	.word	0x40021400
 800595c:	40021800 	.word	0x40021800
 8005960:	40021c00 	.word	0x40021c00
 8005964:	40022000 	.word	0x40022000
 8005968:	40022400 	.word	0x40022400
 800596c:	40013c00 	.word	0x40013c00

08005970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	807b      	strh	r3, [r7, #2]
 800597c:	4613      	mov	r3, r2
 800597e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005980:	787b      	ldrb	r3, [r7, #1]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005986:	887a      	ldrh	r2, [r7, #2]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800598c:	e003      	b.n	8005996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800598e:	887b      	ldrh	r3, [r7, #2]
 8005990:	041a      	lsls	r2, r3, #16
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	619a      	str	r2, [r3, #24]
}
 8005996:	bf00      	nop
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	af02      	add	r7, sp, #8
 80059a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e108      	b.n	8005bc6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f008 fb46 	bl	800e060 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2203      	movs	r2, #3
 80059d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e2:	d102      	bne.n	80059ea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f004 feef 	bl	800a7d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	7c1a      	ldrb	r2, [r3, #16]
 80059fc:	f88d 2000 	strb.w	r2, [sp]
 8005a00:	3304      	adds	r3, #4
 8005a02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a04:	f004 fdd8 	bl	800a5b8 <USB_CoreInit>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d005      	beq.n	8005a1a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2202      	movs	r2, #2
 8005a12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e0d5      	b.n	8005bc6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	f004 fee7 	bl	800a7f4 <USB_SetCurrentMode>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0c6      	b.n	8005bc6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a38:	2300      	movs	r3, #0
 8005a3a:	73fb      	strb	r3, [r7, #15]
 8005a3c:	e04a      	b.n	8005ad4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a3e:	7bfa      	ldrb	r2, [r7, #15]
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3315      	adds	r3, #21
 8005a4e:	2201      	movs	r2, #1
 8005a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a52:	7bfa      	ldrb	r2, [r7, #15]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	3314      	adds	r3, #20
 8005a62:	7bfa      	ldrb	r2, [r7, #15]
 8005a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a66:	7bfa      	ldrb	r2, [r7, #15]
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	b298      	uxth	r0, r3
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	332e      	adds	r3, #46	@ 0x2e
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a7e:	7bfa      	ldrb	r2, [r7, #15]
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3318      	adds	r3, #24
 8005a8e:	2200      	movs	r2, #0
 8005a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a92:	7bfa      	ldrb	r2, [r7, #15]
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	4613      	mov	r3, r2
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	440b      	add	r3, r1
 8005aa0:	331c      	adds	r3, #28
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005aa6:	7bfa      	ldrb	r2, [r7, #15]
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	3320      	adds	r3, #32
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005aba:	7bfa      	ldrb	r2, [r7, #15]
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	440b      	add	r3, r1
 8005ac8:	3324      	adds	r3, #36	@ 0x24
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	73fb      	strb	r3, [r7, #15]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	791b      	ldrb	r3, [r3, #4]
 8005ad8:	7bfa      	ldrb	r2, [r7, #15]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d3af      	bcc.n	8005a3e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	73fb      	strb	r3, [r7, #15]
 8005ae2:	e044      	b.n	8005b6e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ae4:	7bfa      	ldrb	r2, [r7, #15]
 8005ae6:	6879      	ldr	r1, [r7, #4]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005af6:	2200      	movs	r2, #0
 8005af8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005afa:	7bfa      	ldrb	r2, [r7, #15]
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005b0c:	7bfa      	ldrb	r2, [r7, #15]
 8005b0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b10:	7bfa      	ldrb	r2, [r7, #15]
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	4413      	add	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	440b      	add	r3, r1
 8005b1e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005b22:	2200      	movs	r2, #0
 8005b24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b26:	7bfa      	ldrb	r2, [r7, #15]
 8005b28:	6879      	ldr	r1, [r7, #4]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b3c:	7bfa      	ldrb	r2, [r7, #15]
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b52:	7bfa      	ldrb	r2, [r7, #15]
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	440b      	add	r3, r1
 8005b60:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	73fb      	strb	r3, [r7, #15]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	791b      	ldrb	r3, [r3, #4]
 8005b72:	7bfa      	ldrb	r2, [r7, #15]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d3b5      	bcc.n	8005ae4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	7c1a      	ldrb	r2, [r3, #16]
 8005b80:	f88d 2000 	strb.w	r2, [sp]
 8005b84:	3304      	adds	r3, #4
 8005b86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b88:	f004 fe80 	bl	800a88c <USB_DevInit>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2202      	movs	r2, #2
 8005b96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e013      	b.n	8005bc6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	7b1b      	ldrb	r3, [r3, #12]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d102      	bne.n	8005bba <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 f959 	bl	8006e6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f005 febf 	bl	800b942 <USB_DevDisconnect>

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_PCD_Start+0x16>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e012      	b.n	8005c0a <HAL_PCD_Start+0x3c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f004 fddd 	bl	800a7b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f005 fe80 	bl	800b900 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c12:	b590      	push	{r4, r7, lr}
 8005c14:	b08d      	sub	sp, #52	@ 0x34
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f005 ff3e 	bl	800baaa <USB_GetMode>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f040 84b9 	bne.w	80065a8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f005 fea2 	bl	800b984 <USB_ReadInterrupts>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 84af 	beq.w	80065a6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	0a1b      	lsrs	r3, r3, #8
 8005c52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f005 fe8f 	bl	800b984 <USB_ReadInterrupts>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d107      	bne.n	8005c80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695a      	ldr	r2, [r3, #20]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f002 0202 	and.w	r2, r2, #2
 8005c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f005 fe7d 	bl	800b984 <USB_ReadInterrupts>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d161      	bne.n	8005d58 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0210 	bic.w	r2, r2, #16
 8005ca2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	f003 020f 	and.w	r2, r3, #15
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	00db      	lsls	r3, r3, #3
 8005cb4:	4413      	add	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	0c5b      	lsrs	r3, r3, #17
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d124      	bne.n	8005d1a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d035      	beq.n	8005d48 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	091b      	lsrs	r3, r3, #4
 8005ce4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	6a38      	ldr	r0, [r7, #32]
 8005cf0:	f005 fcb4 	bl	800b65c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	091b      	lsrs	r3, r3, #4
 8005cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d00:	441a      	add	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	091b      	lsrs	r3, r3, #4
 8005d0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d12:	441a      	add	r2, r3
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	615a      	str	r2, [r3, #20]
 8005d18:	e016      	b.n	8005d48 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	0c5b      	lsrs	r3, r3, #17
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	2b06      	cmp	r3, #6
 8005d24:	d110      	bne.n	8005d48 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6a38      	ldr	r0, [r7, #32]
 8005d32:	f005 fc93 	bl	800b65c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	091b      	lsrs	r3, r3, #4
 8005d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d42:	441a      	add	r2, r3
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0210 	orr.w	r2, r2, #16
 8005d56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f005 fe11 	bl	800b984 <USB_ReadInterrupts>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005d6c:	f040 80a7 	bne.w	8005ebe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005d70:	2300      	movs	r3, #0
 8005d72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f005 fe16 	bl	800b9aa <USB_ReadDevAllOutEpInterrupt>
 8005d7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005d80:	e099      	b.n	8005eb6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 808e 	beq.w	8005eaa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	4611      	mov	r1, r2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f005 fe3a 	bl	800ba12 <USB_ReadDevOutEPInterrupt>
 8005d9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00c      	beq.n	8005dc4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db6:	461a      	mov	r2, r3
 8005db8:	2301      	movs	r3, #1
 8005dba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005dbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fece 	bl	8006b60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00c      	beq.n	8005de8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dda:	461a      	mov	r2, r3
 8005ddc:	2308      	movs	r3, #8
 8005dde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005de0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 ffa4 	bl	8006d30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d008      	beq.n	8005e04 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfe:	461a      	mov	r2, r3
 8005e00:	2310      	movs	r3, #16
 8005e02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d030      	beq.n	8005e70 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e16:	2b80      	cmp	r3, #128	@ 0x80
 8005e18:	d109      	bne.n	8005e2e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e2c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e30:	4613      	mov	r3, r2
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	4413      	add	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4413      	add	r3, r2
 8005e40:	3304      	adds	r3, #4
 8005e42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	78db      	ldrb	r3, [r3, #3]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d108      	bne.n	8005e5e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f008 fa35 	bl	800e2c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d008      	beq.n	8005e8c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e86:	461a      	mov	r2, r3
 8005e88:	2320      	movs	r3, #32
 8005e8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ea8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eac:	3301      	adds	r3, #1
 8005eae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb2:	085b      	lsrs	r3, r3, #1
 8005eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f47f af62 	bne.w	8005d82 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f005 fd5e 	bl	800b984 <USB_ReadInterrupts>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ece:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ed2:	f040 80db 	bne.w	800608c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f005 fd7f 	bl	800b9de <USB_ReadDevAllInEpInterrupt>
 8005ee0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005ee6:	e0cd      	b.n	8006084 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80c2 	beq.w	8006078 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f005 fda5 	bl	800ba4e <USB_ReadDevInEPInterrupt>
 8005f04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d057      	beq.n	8005fc0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	2201      	movs	r2, #1
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	69f9      	ldr	r1, [r7, #28]
 8005f2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f30:	4013      	ands	r3, r2
 8005f32:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f40:	461a      	mov	r2, r3
 8005f42:	2301      	movs	r3, #1
 8005f44:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	799b      	ldrb	r3, [r3, #6]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d132      	bne.n	8005fb4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f52:	4613      	mov	r3, r2
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	3320      	adds	r3, #32
 8005f5e:	6819      	ldr	r1, [r3, #0]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f64:	4613      	mov	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4403      	add	r3, r0
 8005f6e:	331c      	adds	r3, #28
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4419      	add	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f78:	4613      	mov	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	4413      	add	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4403      	add	r3, r0
 8005f82:	3320      	adds	r3, #32
 8005f84:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d113      	bne.n	8005fb4 <HAL_PCD_IRQHandler+0x3a2>
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f90:	4613      	mov	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	3324      	adds	r3, #36	@ 0x24
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d108      	bne.n	8005fb4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fac:	461a      	mov	r2, r3
 8005fae:	2101      	movs	r1, #1
 8005fb0:	f005 fdae 	bl	800bb10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f008 f8ff 	bl	800e1be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d008      	beq.n	8005fdc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	2308      	movs	r3, #8
 8005fda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d008      	beq.n	8005ff8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d008      	beq.n	8006014 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800600e:	461a      	mov	r2, r3
 8006010:	2340      	movs	r3, #64	@ 0x40
 8006012:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d023      	beq.n	8006066 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800601e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006020:	6a38      	ldr	r0, [r7, #32]
 8006022:	f004 fd91 	bl	800ab48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006028:	4613      	mov	r3, r2
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	3310      	adds	r3, #16
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4413      	add	r3, r2
 8006036:	3304      	adds	r3, #4
 8006038:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	78db      	ldrb	r3, [r3, #3]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d108      	bne.n	8006054 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2200      	movs	r2, #0
 8006046:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604a:	b2db      	uxtb	r3, r3
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f008 f94c 	bl	800e2ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006060:	461a      	mov	r2, r3
 8006062:	2302      	movs	r3, #2
 8006064:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006070:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fce8 	bl	8006a48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	3301      	adds	r3, #1
 800607c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800607e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006086:	2b00      	cmp	r3, #0
 8006088:	f47f af2e 	bne.w	8005ee8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4618      	mov	r0, r3
 8006092:	f005 fc77 	bl	800b984 <USB_ReadInterrupts>
 8006096:	4603      	mov	r3, r0
 8006098:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800609c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060a0:	d122      	bne.n	80060e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d108      	bne.n	80060d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80060c8:	2100      	movs	r1, #0
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f008 fac6 	bl	800e65c <HAL_PCDEx_LPM_Callback>
 80060d0:	e002      	b.n	80060d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f008 f8ea 	bl	800e2ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695a      	ldr	r2, [r3, #20]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80060e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f005 fc49 	bl	800b984 <USB_ReadInterrupts>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060fc:	d112      	bne.n	8006124 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b01      	cmp	r3, #1
 800610c:	d102      	bne.n	8006114 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f008 f8a6 	bl	800e260 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006122:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4618      	mov	r0, r3
 800612a:	f005 fc2b 	bl	800b984 <USB_ReadInterrupts>
 800612e:	4603      	mov	r3, r0
 8006130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006138:	d121      	bne.n	800617e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695a      	ldr	r2, [r3, #20]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006148:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006150:	2b00      	cmp	r3, #0
 8006152:	d111      	bne.n	8006178 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006162:	089b      	lsrs	r3, r3, #2
 8006164:	f003 020f 	and.w	r2, r3, #15
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800616e:	2101      	movs	r1, #1
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f008 fa73 	bl	800e65c <HAL_PCDEx_LPM_Callback>
 8006176:	e002      	b.n	800617e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f008 f871 	bl	800e260 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f005 fbfe 	bl	800b984 <USB_ReadInterrupts>
 8006188:	4603      	mov	r3, r0
 800618a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800618e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006192:	f040 80b7 	bne.w	8006304 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2110      	movs	r1, #16
 80061b0:	4618      	mov	r0, r3
 80061b2:	f004 fcc9 	bl	800ab48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061b6:	2300      	movs	r3, #0
 80061b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061ba:	e046      	b.n	800624a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80061bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c8:	461a      	mov	r2, r3
 80061ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80061ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80061f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061fc:	461a      	mov	r2, r3
 80061fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006202:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800621e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006222:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	440a      	add	r2, r1
 800623a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800623e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006242:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006246:	3301      	adds	r3, #1
 8006248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	791b      	ldrb	r3, [r3, #4]
 800624e:	461a      	mov	r2, r3
 8006250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006252:	4293      	cmp	r3, r2
 8006254:	d3b2      	bcc.n	80061bc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006264:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006268:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	7bdb      	ldrb	r3, [r3, #15]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d016      	beq.n	80062a0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006282:	f043 030b 	orr.w	r3, r3, #11
 8006286:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006298:	f043 030b 	orr.w	r3, r3, #11
 800629c:	6453      	str	r3, [r2, #68]	@ 0x44
 800629e:	e015      	b.n	80062cc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a6:	695a      	ldr	r2, [r3, #20]
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ae:	4619      	mov	r1, r3
 80062b0:	f242 032b 	movw	r3, #8235	@ 0x202b
 80062b4:	4313      	orrs	r3, r2
 80062b6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062c6:	f043 030b 	orr.w	r3, r3, #11
 80062ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80062de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80062ee:	461a      	mov	r2, r3
 80062f0:	f005 fc0e 	bl	800bb10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f005 fb3b 	bl	800b984 <USB_ReadInterrupts>
 800630e:	4603      	mov	r3, r0
 8006310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006318:	d123      	bne.n	8006362 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f005 fbd2 	bl	800bac8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4618      	mov	r0, r3
 800632a:	f004 fc86 	bl	800ac3a <USB_GetDevSpeed>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681c      	ldr	r4, [r3, #0]
 800633a:	f001 fabb 	bl	80078b4 <HAL_RCC_GetHCLKFreq>
 800633e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006344:	461a      	mov	r2, r3
 8006346:	4620      	mov	r0, r4
 8006348:	f004 f990 	bl	800a66c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f007 ff5e 	bl	800e20e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695a      	ldr	r2, [r3, #20]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006360:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4618      	mov	r0, r3
 8006368:	f005 fb0c 	bl	800b984 <USB_ReadInterrupts>
 800636c:	4603      	mov	r3, r0
 800636e:	f003 0308 	and.w	r3, r3, #8
 8006372:	2b08      	cmp	r3, #8
 8006374:	d10a      	bne.n	800638c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f007 ff3b 	bl	800e1f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695a      	ldr	r2, [r3, #20]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f002 0208 	and.w	r2, r2, #8
 800638a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f005 faf7 	bl	800b984 <USB_ReadInterrupts>
 8006396:	4603      	mov	r3, r0
 8006398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800639c:	2b80      	cmp	r3, #128	@ 0x80
 800639e:	d123      	bne.n	80063e8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063ac:	2301      	movs	r3, #1
 80063ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b0:	e014      	b.n	80063dc <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b6:	4613      	mov	r3, r2
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d105      	bne.n	80063d6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fb08 	bl	80069e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	3301      	adds	r3, #1
 80063da:	627b      	str	r3, [r7, #36]	@ 0x24
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	791b      	ldrb	r3, [r3, #4]
 80063e0:	461a      	mov	r2, r3
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d3e4      	bcc.n	80063b2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f005 fac9 	bl	800b984 <USB_ReadInterrupts>
 80063f2:	4603      	mov	r3, r0
 80063f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063fc:	d13c      	bne.n	8006478 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063fe:	2301      	movs	r3, #1
 8006400:	627b      	str	r3, [r7, #36]	@ 0x24
 8006402:	e02b      	b.n	800645c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006418:	4613      	mov	r3, r2
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	440b      	add	r3, r1
 8006422:	3318      	adds	r3, #24
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d115      	bne.n	8006456 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800642a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800642c:	2b00      	cmp	r3, #0
 800642e:	da12      	bge.n	8006456 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006434:	4613      	mov	r3, r2
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	3317      	adds	r3, #23
 8006440:	2201      	movs	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006446:	b2db      	uxtb	r3, r3
 8006448:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800644c:	b2db      	uxtb	r3, r3
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fac8 	bl	80069e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	3301      	adds	r3, #1
 800645a:	627b      	str	r3, [r7, #36]	@ 0x24
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	791b      	ldrb	r3, [r3, #4]
 8006460:	461a      	mov	r2, r3
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	4293      	cmp	r3, r2
 8006466:	d3cd      	bcc.n	8006404 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	695a      	ldr	r2, [r3, #20]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006476:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4618      	mov	r0, r3
 800647e:	f005 fa81 	bl	800b984 <USB_ReadInterrupts>
 8006482:	4603      	mov	r3, r0
 8006484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006488:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800648c:	d156      	bne.n	800653c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800648e:	2301      	movs	r3, #1
 8006490:	627b      	str	r3, [r7, #36]	@ 0x24
 8006492:	e045      	b.n	8006520 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064a8:	4613      	mov	r3, r2
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	440b      	add	r3, r1
 80064b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d12e      	bne.n	800651a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80064bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80064be:	2b00      	cmp	r3, #0
 80064c0:	da2b      	bge.n	800651a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80064ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d121      	bne.n	800651a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064da:	4613      	mov	r3, r2
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80064e8:	2201      	movs	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006512:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006516:	6053      	str	r3, [r2, #4]
            break;
 8006518:	e008      	b.n	800652c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800651a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800651c:	3301      	adds	r3, #1
 800651e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	791b      	ldrb	r3, [r3, #4]
 8006524:	461a      	mov	r2, r3
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	4293      	cmp	r3, r2
 800652a:	d3b3      	bcc.n	8006494 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695a      	ldr	r2, [r3, #20]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800653a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	f005 fa1f 	bl	800b984 <USB_ReadInterrupts>
 8006546:	4603      	mov	r3, r0
 8006548:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800654c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006550:	d10a      	bne.n	8006568 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f007 fedc 	bl	800e310 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f005 fa09 	bl	800b984 <USB_ReadInterrupts>
 8006572:	4603      	mov	r3, r0
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b04      	cmp	r3, #4
 800657a:	d115      	bne.n	80065a8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f007 fecc 	bl	800e32c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6859      	ldr	r1, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
 80065a4:	e000      	b.n	80065a8 <HAL_PCD_IRQHandler+0x996>
      return;
 80065a6:	bf00      	nop
    }
  }
}
 80065a8:	3734      	adds	r7, #52	@ 0x34
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd90      	pop	{r4, r7, pc}

080065ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	460b      	mov	r3, r1
 80065b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_PCD_SetAddress+0x1a>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e012      	b.n	80065ee <HAL_PCD_SetAddress+0x40>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	78fa      	ldrb	r2, [r7, #3]
 80065d4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	78fa      	ldrb	r2, [r7, #3]
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f005 f968 	bl	800b8b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	4608      	mov	r0, r1
 8006600:	4611      	mov	r1, r2
 8006602:	461a      	mov	r2, r3
 8006604:	4603      	mov	r3, r0
 8006606:	70fb      	strb	r3, [r7, #3]
 8006608:	460b      	mov	r3, r1
 800660a:	803b      	strh	r3, [r7, #0]
 800660c:	4613      	mov	r3, r2
 800660e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006618:	2b00      	cmp	r3, #0
 800661a:	da0f      	bge.n	800663c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	f003 020f 	and.w	r2, r3, #15
 8006622:	4613      	mov	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4413      	add	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	3310      	adds	r3, #16
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	4413      	add	r3, r2
 8006630:	3304      	adds	r3, #4
 8006632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	705a      	strb	r2, [r3, #1]
 800663a:	e00f      	b.n	800665c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	f003 020f 	and.w	r2, r3, #15
 8006642:	4613      	mov	r3, r2
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	4413      	add	r3, r2
 8006652:	3304      	adds	r3, #4
 8006654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	b2da      	uxtb	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006668:	883a      	ldrh	r2, [r7, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	78ba      	ldrb	r2, [r7, #2]
 8006672:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	785b      	ldrb	r3, [r3, #1]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d004      	beq.n	8006686 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006686:	78bb      	ldrb	r3, [r7, #2]
 8006688:	2b02      	cmp	r3, #2
 800668a:	d102      	bne.n	8006692 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_PCD_EP_Open+0xaa>
 800669c:	2302      	movs	r3, #2
 800669e:	e00e      	b.n	80066be <HAL_PCD_EP_Open+0xc8>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68f9      	ldr	r1, [r7, #12]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f004 fae8 	bl	800ac84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80066bc:	7afb      	ldrb	r3, [r7, #11]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da0f      	bge.n	80066fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066da:	78fb      	ldrb	r3, [r7, #3]
 80066dc:	f003 020f 	and.w	r2, r3, #15
 80066e0:	4613      	mov	r3, r2
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	3310      	adds	r3, #16
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	4413      	add	r3, r2
 80066ee:	3304      	adds	r3, #4
 80066f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	705a      	strb	r2, [r3, #1]
 80066f8:	e00f      	b.n	800671a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	f003 020f 	and.w	r2, r3, #15
 8006700:	4613      	mov	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	4413      	add	r3, r2
 8006710:	3304      	adds	r3, #4
 8006712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	f003 030f 	and.w	r3, r3, #15
 8006720:	b2da      	uxtb	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_PCD_EP_Close+0x6e>
 8006730:	2302      	movs	r3, #2
 8006732:	e00e      	b.n	8006752 <HAL_PCD_EP_Close+0x8c>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68f9      	ldr	r1, [r7, #12]
 8006742:	4618      	mov	r0, r3
 8006744:	f004 fb26 	bl	800ad94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b086      	sub	sp, #24
 800675e:	af00      	add	r7, sp, #0
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
 8006766:	460b      	mov	r3, r1
 8006768:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	f003 020f 	and.w	r2, r3, #15
 8006770:	4613      	mov	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	3304      	adds	r3, #4
 8006782:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2200      	movs	r2, #0
 8006794:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2200      	movs	r2, #0
 800679a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	799b      	ldrb	r3, [r3, #6]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d102      	bne.n	80067b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	799b      	ldrb	r3, [r3, #6]
 80067be:	461a      	mov	r2, r3
 80067c0:	6979      	ldr	r1, [r7, #20]
 80067c2:	f004 fbc3 	bl	800af4c <USB_EPStartXfer>

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	f003 020f 	and.w	r2, r3, #15
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	4613      	mov	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	4413      	add	r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	440b      	add	r3, r1
 80067ee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80067f2:	681b      	ldr	r3, [r3, #0]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	607a      	str	r2, [r7, #4]
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	460b      	mov	r3, r1
 800680e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	f003 020f 	and.w	r2, r3, #15
 8006816:	4613      	mov	r3, r2
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	3310      	adds	r3, #16
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	3304      	adds	r3, #4
 8006826:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2200      	movs	r2, #0
 8006838:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2201      	movs	r2, #1
 800683e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006840:	7afb      	ldrb	r3, [r7, #11]
 8006842:	f003 030f 	and.w	r3, r3, #15
 8006846:	b2da      	uxtb	r2, r3
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	799b      	ldrb	r3, [r3, #6]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d102      	bne.n	800685a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	799b      	ldrb	r3, [r3, #6]
 8006862:	461a      	mov	r2, r3
 8006864:	6979      	ldr	r1, [r7, #20]
 8006866:	f004 fb71 	bl	800af4c <USB_EPStartXfer>

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	7912      	ldrb	r2, [r2, #4]
 800688a:	4293      	cmp	r3, r2
 800688c:	d901      	bls.n	8006892 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e04f      	b.n	8006932 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006892:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006896:	2b00      	cmp	r3, #0
 8006898:	da0f      	bge.n	80068ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	f003 020f 	and.w	r2, r3, #15
 80068a0:	4613      	mov	r3, r2
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	3310      	adds	r3, #16
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	4413      	add	r3, r2
 80068ae:	3304      	adds	r3, #4
 80068b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	705a      	strb	r2, [r3, #1]
 80068b8:	e00d      	b.n	80068d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068ba:	78fa      	ldrb	r2, [r7, #3]
 80068bc:	4613      	mov	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	4413      	add	r3, r2
 80068cc:	3304      	adds	r3, #4
 80068ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2201      	movs	r2, #1
 80068da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068dc:	78fb      	ldrb	r3, [r7, #3]
 80068de:	f003 030f 	and.w	r3, r3, #15
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <HAL_PCD_EP_SetStall+0x82>
 80068f2:	2302      	movs	r3, #2
 80068f4:	e01d      	b.n	8006932 <HAL_PCD_EP_SetStall+0xbe>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68f9      	ldr	r1, [r7, #12]
 8006904:	4618      	mov	r0, r3
 8006906:	f004 ff01 	bl	800b70c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	2b00      	cmp	r3, #0
 8006912:	d109      	bne.n	8006928 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	7999      	ldrb	r1, [r3, #6]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006922:	461a      	mov	r2, r3
 8006924:	f005 f8f4 	bl	800bb10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	f003 030f 	and.w	r3, r3, #15
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7912      	ldrb	r2, [r2, #4]
 8006950:	4293      	cmp	r3, r2
 8006952:	d901      	bls.n	8006958 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e042      	b.n	80069de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800695c:	2b00      	cmp	r3, #0
 800695e:	da0f      	bge.n	8006980 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	f003 020f 	and.w	r2, r3, #15
 8006966:	4613      	mov	r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	3310      	adds	r3, #16
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	4413      	add	r3, r2
 8006974:	3304      	adds	r3, #4
 8006976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	705a      	strb	r2, [r3, #1]
 800697e:	e00f      	b.n	80069a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	f003 020f 	and.w	r2, r3, #15
 8006986:	4613      	mov	r3, r2
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	4413      	add	r3, r2
 8006996:	3304      	adds	r3, #4
 8006998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069a6:	78fb      	ldrb	r3, [r7, #3]
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_PCD_EP_ClrStall+0x86>
 80069bc:	2302      	movs	r3, #2
 80069be:	e00e      	b.n	80069de <HAL_PCD_EP_ClrStall+0xa4>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68f9      	ldr	r1, [r7, #12]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f004 ff0a 	bl	800b7e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80069f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da0c      	bge.n	8006a14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	f003 020f 	and.w	r2, r3, #15
 8006a00:	4613      	mov	r3, r2
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	4413      	add	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	3310      	adds	r3, #16
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3304      	adds	r3, #4
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	e00c      	b.n	8006a2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	f003 020f 	and.w	r2, r3, #15
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	00db      	lsls	r3, r3, #3
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	4413      	add	r3, r2
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f004 fd29 	bl	800b48c <USB_EPStopXfer>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006a3e:	7afb      	ldrb	r3, [r7, #11]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08a      	sub	sp, #40	@ 0x28
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	3310      	adds	r3, #16
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	695a      	ldr	r2, [r3, #20]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d901      	bls.n	8006a80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e06b      	b.n	8006b58 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	691a      	ldr	r2, [r3, #16]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d902      	bls.n	8006a9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	3303      	adds	r3, #3
 8006aa0:	089b      	lsrs	r3, r3, #2
 8006aa2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006aa4:	e02a      	b.n	8006afc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	69fa      	ldr	r2, [r7, #28]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d902      	bls.n	8006ac2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	3303      	adds	r3, #3
 8006ac6:	089b      	lsrs	r3, r3, #2
 8006ac8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	68d9      	ldr	r1, [r3, #12]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	4603      	mov	r3, r0
 8006ade:	6978      	ldr	r0, [r7, #20]
 8006ae0:	f004 fd7e 	bl	800b5e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	441a      	add	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	695a      	ldr	r2, [r3, #20]
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	441a      	add	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d809      	bhi.n	8006b26 <PCD_WriteEmptyTxFifo+0xde>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d203      	bcs.n	8006b26 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1bf      	bne.n	8006aa6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d811      	bhi.n	8006b56 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	2201      	movs	r2, #1
 8006b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	6939      	ldr	r1, [r7, #16]
 8006b4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b52:	4013      	ands	r3, r2
 8006b54:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	333c      	adds	r3, #60	@ 0x3c
 8006b78:	3304      	adds	r3, #4
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	799b      	ldrb	r3, [r3, #6]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d17b      	bne.n	8006c8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f003 0308 	and.w	r3, r3, #8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d015      	beq.n	8006bcc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4a61      	ldr	r2, [pc, #388]	@ (8006d28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	f240 80b9 	bls.w	8006d1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80b3 	beq.w	8006d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bc8:	6093      	str	r3, [r2, #8]
 8006bca:	e0a7      	b.n	8006d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be2:	461a      	mov	r2, r3
 8006be4:	2320      	movs	r3, #32
 8006be6:	6093      	str	r3, [r2, #8]
 8006be8:	e098      	b.n	8006d1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f040 8093 	bne.w	8006d1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8006d28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d90f      	bls.n	8006c1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c14:	461a      	mov	r2, r3
 8006c16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c1a:	6093      	str	r3, [r2, #8]
 8006c1c:	e07e      	b.n	8006d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	4613      	mov	r3, r2
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	4413      	add	r3, r2
 8006c30:	3304      	adds	r3, #4
 8006c32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a1a      	ldr	r2, [r3, #32]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	0159      	lsls	r1, r3, #5
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	440b      	add	r3, r1
 8006c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c4a:	1ad2      	subs	r2, r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d114      	bne.n	8006c80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d109      	bne.n	8006c72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c68:	461a      	mov	r2, r3
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	f004 ff50 	bl	800bb10 <USB_EP0_OutStart>
 8006c70:	e006      	b.n	8006c80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	441a      	add	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f007 fa7e 	bl	800e188 <HAL_PCD_DataOutStageCallback>
 8006c8c:	e046      	b.n	8006d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	4a26      	ldr	r2, [pc, #152]	@ (8006d2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d124      	bne.n	8006ce0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cac:	461a      	mov	r2, r3
 8006cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cb2:	6093      	str	r3, [r2, #8]
 8006cb4:	e032      	b.n	8006d1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d008      	beq.n	8006cd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ccc:	461a      	mov	r2, r3
 8006cce:	2320      	movs	r3, #32
 8006cd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f007 fa55 	bl	800e188 <HAL_PCD_DataOutStageCallback>
 8006cde:	e01d      	b.n	8006d1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d114      	bne.n	8006d10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	4613      	mov	r3, r2
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d108      	bne.n	8006d10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d08:	461a      	mov	r2, r3
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	f004 ff00 	bl	800bb10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f007 fa36 	bl	800e188 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	4f54300a 	.word	0x4f54300a
 8006d2c:	4f54310a 	.word	0x4f54310a

08006d30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	333c      	adds	r3, #60	@ 0x3c
 8006d48:	3304      	adds	r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4a15      	ldr	r2, [pc, #84]	@ (8006db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d90e      	bls.n	8006d84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	015a      	lsls	r2, r3, #5
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f007 f9ed 	bl	800e164 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006db8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d90c      	bls.n	8006dac <PCD_EP_OutSetupPacket_int+0x7c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	799b      	ldrb	r3, [r3, #6]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d108      	bne.n	8006dac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006da4:	461a      	mov	r2, r3
 8006da6:	2101      	movs	r1, #1
 8006da8:	f004 feb2 	bl	800bb10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3718      	adds	r7, #24
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	4f54300a 	.word	0x4f54300a

08006dbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d107      	bne.n	8006dea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006dda:	883b      	ldrh	r3, [r7, #0]
 8006ddc:	0419      	lsls	r1, r3, #16
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	629a      	str	r2, [r3, #40]	@ 0x28
 8006de8:	e028      	b.n	8006e3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df0:	0c1b      	lsrs	r3, r3, #16
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	4413      	add	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	e00d      	b.n	8006e1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	3340      	adds	r3, #64	@ 0x40
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	0c1b      	lsrs	r3, r3, #16
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	4413      	add	r3, r2
 8006e12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
 8006e16:	3301      	adds	r3, #1
 8006e18:	73fb      	strb	r3, [r7, #15]
 8006e1a:	7bfa      	ldrb	r2, [r7, #15]
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d3ec      	bcc.n	8006dfe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006e24:	883b      	ldrh	r3, [r7, #0]
 8006e26:	0418      	lsls	r0, r3, #16
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6819      	ldr	r1, [r3, #0]
 8006e2c:	78fb      	ldrb	r3, [r7, #3]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	4302      	orrs	r2, r0
 8006e34:	3340      	adds	r3, #64	@ 0x40
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	460b      	mov	r3, r1
 8006e54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	887a      	ldrh	r2, [r7, #2]
 8006e5c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e9a:	4b05      	ldr	r3, [pc, #20]	@ (8006eb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	10000003 	.word	0x10000003

08006eb4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eb8:	4b05      	ldr	r3, [pc, #20]	@ (8006ed0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a04      	ldr	r2, [pc, #16]	@ (8006ed0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ec2:	6013      	str	r3, [r2, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	40007000 	.word	0x40007000

08006ed4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006ede:	4b23      	ldr	r3, [pc, #140]	@ (8006f6c <HAL_PWREx_EnableOverDrive+0x98>)
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee2:	4a22      	ldr	r2, [pc, #136]	@ (8006f6c <HAL_PWREx_EnableOverDrive+0x98>)
 8006ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006eea:	4b20      	ldr	r3, [pc, #128]	@ (8006f6c <HAL_PWREx_EnableOverDrive+0x98>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1d      	ldr	r2, [pc, #116]	@ (8006f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f02:	f7fc fecb 	bl	8003c9c <HAL_GetTick>
 8006f06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f08:	e009      	b.n	8006f1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f0a:	f7fc fec7 	bl	8003c9c <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f18:	d901      	bls.n	8006f1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e022      	b.n	8006f64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f1e:	4b14      	ldr	r3, [pc, #80]	@ (8006f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f2a:	d1ee      	bne.n	8006f0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f2c:	4b10      	ldr	r3, [pc, #64]	@ (8006f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a0f      	ldr	r2, [pc, #60]	@ (8006f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f38:	f7fc feb0 	bl	8003c9c <HAL_GetTick>
 8006f3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f3e:	e009      	b.n	8006f54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f40:	f7fc feac 	bl	8003c9c <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f4e:	d901      	bls.n	8006f54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e007      	b.n	8006f64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f54:	4b06      	ldr	r3, [pc, #24]	@ (8006f70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f60:	d1ee      	bne.n	8006f40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	40023800 	.word	0x40023800
 8006f70:	40007000 	.word	0x40007000

08006f74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e29b      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 8087 	beq.w	80070a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f98:	4b96      	ldr	r3, [pc, #600]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 030c 	and.w	r3, r3, #12
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d00c      	beq.n	8006fbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fa4:	4b93      	ldr	r3, [pc, #588]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 030c 	and.w	r3, r3, #12
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d112      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x62>
 8006fb0:	4b90      	ldr	r3, [pc, #576]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fbc:	d10b      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fbe:	4b8d      	ldr	r3, [pc, #564]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d06c      	beq.n	80070a4 <HAL_RCC_OscConfig+0x130>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d168      	bne.n	80070a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e275      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fde:	d106      	bne.n	8006fee <HAL_RCC_OscConfig+0x7a>
 8006fe0:	4b84      	ldr	r3, [pc, #528]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a83      	ldr	r2, [pc, #524]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8006fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	e02e      	b.n	800704c <HAL_RCC_OscConfig+0xd8>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10c      	bne.n	8007010 <HAL_RCC_OscConfig+0x9c>
 8006ff6:	4b7f      	ldr	r3, [pc, #508]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a7e      	ldr	r2, [pc, #504]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8006ffc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	4b7c      	ldr	r3, [pc, #496]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a7b      	ldr	r2, [pc, #492]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007008:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e01d      	b.n	800704c <HAL_RCC_OscConfig+0xd8>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007018:	d10c      	bne.n	8007034 <HAL_RCC_OscConfig+0xc0>
 800701a:	4b76      	ldr	r3, [pc, #472]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a75      	ldr	r2, [pc, #468]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	4b73      	ldr	r3, [pc, #460]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a72      	ldr	r2, [pc, #456]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 800702c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	e00b      	b.n	800704c <HAL_RCC_OscConfig+0xd8>
 8007034:	4b6f      	ldr	r3, [pc, #444]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a6e      	ldr	r2, [pc, #440]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 800703a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	4b6c      	ldr	r3, [pc, #432]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a6b      	ldr	r2, [pc, #428]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800704a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d013      	beq.n	800707c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007054:	f7fc fe22 	bl	8003c9c <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800705c:	f7fc fe1e 	bl	8003c9c <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b64      	cmp	r3, #100	@ 0x64
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e229      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800706e:	4b61      	ldr	r3, [pc, #388]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f0      	beq.n	800705c <HAL_RCC_OscConfig+0xe8>
 800707a:	e014      	b.n	80070a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800707c:	f7fc fe0e 	bl	8003c9c <HAL_GetTick>
 8007080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007082:	e008      	b.n	8007096 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007084:	f7fc fe0a 	bl	8003c9c <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b64      	cmp	r3, #100	@ 0x64
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e215      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007096:	4b57      	ldr	r3, [pc, #348]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1f0      	bne.n	8007084 <HAL_RCC_OscConfig+0x110>
 80070a2:	e000      	b.n	80070a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d069      	beq.n	8007186 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070b2:	4b50      	ldr	r3, [pc, #320]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f003 030c 	and.w	r3, r3, #12
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00b      	beq.n	80070d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070be:	4b4d      	ldr	r3, [pc, #308]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 030c 	and.w	r3, r3, #12
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d11c      	bne.n	8007104 <HAL_RCC_OscConfig+0x190>
 80070ca:	4b4a      	ldr	r3, [pc, #296]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d116      	bne.n	8007104 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070d6:	4b47      	ldr	r3, [pc, #284]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_RCC_OscConfig+0x17a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d001      	beq.n	80070ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e1e9      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ee:	4b41      	ldr	r3, [pc, #260]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	493d      	ldr	r1, [pc, #244]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007102:	e040      	b.n	8007186 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d023      	beq.n	8007154 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800710c:	4b39      	ldr	r3, [pc, #228]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a38      	ldr	r2, [pc, #224]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007112:	f043 0301 	orr.w	r3, r3, #1
 8007116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007118:	f7fc fdc0 	bl	8003c9c <HAL_GetTick>
 800711c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007120:	f7fc fdbc 	bl	8003c9c <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e1c7      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007132:	4b30      	ldr	r3, [pc, #192]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0f0      	beq.n	8007120 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800713e:	4b2d      	ldr	r3, [pc, #180]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	00db      	lsls	r3, r3, #3
 800714c:	4929      	ldr	r1, [pc, #164]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 800714e:	4313      	orrs	r3, r2
 8007150:	600b      	str	r3, [r1, #0]
 8007152:	e018      	b.n	8007186 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007154:	4b27      	ldr	r3, [pc, #156]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a26      	ldr	r2, [pc, #152]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 800715a:	f023 0301 	bic.w	r3, r3, #1
 800715e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007160:	f7fc fd9c 	bl	8003c9c <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007168:	f7fc fd98 	bl	8003c9c <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e1a3      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800717a:	4b1e      	ldr	r3, [pc, #120]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1f0      	bne.n	8007168 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d038      	beq.n	8007204 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d019      	beq.n	80071ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800719a:	4b16      	ldr	r3, [pc, #88]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 800719c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800719e:	4a15      	ldr	r2, [pc, #84]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a6:	f7fc fd79 	bl	8003c9c <HAL_GetTick>
 80071aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ac:	e008      	b.n	80071c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071ae:	f7fc fd75 	bl	8003c9c <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d901      	bls.n	80071c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e180      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071c0:	4b0c      	ldr	r3, [pc, #48]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 80071c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0f0      	beq.n	80071ae <HAL_RCC_OscConfig+0x23a>
 80071cc:	e01a      	b.n	8007204 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071ce:	4b09      	ldr	r3, [pc, #36]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 80071d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071d2:	4a08      	ldr	r2, [pc, #32]	@ (80071f4 <HAL_RCC_OscConfig+0x280>)
 80071d4:	f023 0301 	bic.w	r3, r3, #1
 80071d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071da:	f7fc fd5f 	bl	8003c9c <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071e0:	e00a      	b.n	80071f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071e2:	f7fc fd5b 	bl	8003c9c <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d903      	bls.n	80071f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e166      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
 80071f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071f8:	4b92      	ldr	r3, [pc, #584]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80071fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1ee      	bne.n	80071e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0304 	and.w	r3, r3, #4
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 80a4 	beq.w	800735a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007212:	4b8c      	ldr	r3, [pc, #560]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10d      	bne.n	800723a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800721e:	4b89      	ldr	r3, [pc, #548]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007222:	4a88      	ldr	r2, [pc, #544]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007228:	6413      	str	r3, [r2, #64]	@ 0x40
 800722a:	4b86      	ldr	r3, [pc, #536]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007232:	60bb      	str	r3, [r7, #8]
 8007234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007236:	2301      	movs	r3, #1
 8007238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800723a:	4b83      	ldr	r3, [pc, #524]	@ (8007448 <HAL_RCC_OscConfig+0x4d4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007242:	2b00      	cmp	r3, #0
 8007244:	d118      	bne.n	8007278 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007246:	4b80      	ldr	r3, [pc, #512]	@ (8007448 <HAL_RCC_OscConfig+0x4d4>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a7f      	ldr	r2, [pc, #508]	@ (8007448 <HAL_RCC_OscConfig+0x4d4>)
 800724c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007252:	f7fc fd23 	bl	8003c9c <HAL_GetTick>
 8007256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007258:	e008      	b.n	800726c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800725a:	f7fc fd1f 	bl	8003c9c <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b64      	cmp	r3, #100	@ 0x64
 8007266:	d901      	bls.n	800726c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e12a      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800726c:	4b76      	ldr	r3, [pc, #472]	@ (8007448 <HAL_RCC_OscConfig+0x4d4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0f0      	beq.n	800725a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d106      	bne.n	800728e <HAL_RCC_OscConfig+0x31a>
 8007280:	4b70      	ldr	r3, [pc, #448]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007284:	4a6f      	ldr	r2, [pc, #444]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007286:	f043 0301 	orr.w	r3, r3, #1
 800728a:	6713      	str	r3, [r2, #112]	@ 0x70
 800728c:	e02d      	b.n	80072ea <HAL_RCC_OscConfig+0x376>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10c      	bne.n	80072b0 <HAL_RCC_OscConfig+0x33c>
 8007296:	4b6b      	ldr	r3, [pc, #428]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800729a:	4a6a      	ldr	r2, [pc, #424]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 800729c:	f023 0301 	bic.w	r3, r3, #1
 80072a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80072a2:	4b68      	ldr	r3, [pc, #416]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a6:	4a67      	ldr	r2, [pc, #412]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80072a8:	f023 0304 	bic.w	r3, r3, #4
 80072ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80072ae:	e01c      	b.n	80072ea <HAL_RCC_OscConfig+0x376>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	2b05      	cmp	r3, #5
 80072b6:	d10c      	bne.n	80072d2 <HAL_RCC_OscConfig+0x35e>
 80072b8:	4b62      	ldr	r3, [pc, #392]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80072ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072bc:	4a61      	ldr	r2, [pc, #388]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80072be:	f043 0304 	orr.w	r3, r3, #4
 80072c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80072c4:	4b5f      	ldr	r3, [pc, #380]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80072c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c8:	4a5e      	ldr	r2, [pc, #376]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80072d0:	e00b      	b.n	80072ea <HAL_RCC_OscConfig+0x376>
 80072d2:	4b5c      	ldr	r3, [pc, #368]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80072d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d6:	4a5b      	ldr	r2, [pc, #364]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80072de:	4b59      	ldr	r3, [pc, #356]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80072e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e2:	4a58      	ldr	r2, [pc, #352]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80072e4:	f023 0304 	bic.w	r3, r3, #4
 80072e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d015      	beq.n	800731e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072f2:	f7fc fcd3 	bl	8003c9c <HAL_GetTick>
 80072f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072f8:	e00a      	b.n	8007310 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072fa:	f7fc fccf 	bl	8003c9c <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007308:	4293      	cmp	r3, r2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e0d8      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007310:	4b4c      	ldr	r3, [pc, #304]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0ee      	beq.n	80072fa <HAL_RCC_OscConfig+0x386>
 800731c:	e014      	b.n	8007348 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800731e:	f7fc fcbd 	bl	8003c9c <HAL_GetTick>
 8007322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007324:	e00a      	b.n	800733c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007326:	f7fc fcb9 	bl	8003c9c <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007334:	4293      	cmp	r3, r2
 8007336:	d901      	bls.n	800733c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	e0c2      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800733c:	4b41      	ldr	r3, [pc, #260]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 800733e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1ee      	bne.n	8007326 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d105      	bne.n	800735a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800734e:	4b3d      	ldr	r3, [pc, #244]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007352:	4a3c      	ldr	r2, [pc, #240]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007354:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007358:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80ae 	beq.w	80074c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007364:	4b37      	ldr	r3, [pc, #220]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 030c 	and.w	r3, r3, #12
 800736c:	2b08      	cmp	r3, #8
 800736e:	d06d      	beq.n	800744c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	2b02      	cmp	r3, #2
 8007376:	d14b      	bne.n	8007410 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007378:	4b32      	ldr	r3, [pc, #200]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a31      	ldr	r2, [pc, #196]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 800737e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007384:	f7fc fc8a 	bl	8003c9c <HAL_GetTick>
 8007388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800738c:	f7fc fc86 	bl	8003c9c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e091      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800739e:	4b29      	ldr	r3, [pc, #164]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1f0      	bne.n	800738c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	69da      	ldr	r2, [r3, #28]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b8:	019b      	lsls	r3, r3, #6
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c0:	085b      	lsrs	r3, r3, #1
 80073c2:	3b01      	subs	r3, #1
 80073c4:	041b      	lsls	r3, r3, #16
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073cc:	061b      	lsls	r3, r3, #24
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d4:	071b      	lsls	r3, r3, #28
 80073d6:	491b      	ldr	r1, [pc, #108]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073dc:	4b19      	ldr	r3, [pc, #100]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a18      	ldr	r2, [pc, #96]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 80073e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e8:	f7fc fc58 	bl	8003c9c <HAL_GetTick>
 80073ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ee:	e008      	b.n	8007402 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f0:	f7fc fc54 	bl	8003c9c <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e05f      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007402:	4b10      	ldr	r3, [pc, #64]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0f0      	beq.n	80073f0 <HAL_RCC_OscConfig+0x47c>
 800740e:	e057      	b.n	80074c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007410:	4b0c      	ldr	r3, [pc, #48]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a0b      	ldr	r2, [pc, #44]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007416:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800741a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741c:	f7fc fc3e 	bl	8003c9c <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007424:	f7fc fc3a 	bl	8003c9c <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e045      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007436:	4b03      	ldr	r3, [pc, #12]	@ (8007444 <HAL_RCC_OscConfig+0x4d0>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f0      	bne.n	8007424 <HAL_RCC_OscConfig+0x4b0>
 8007442:	e03d      	b.n	80074c0 <HAL_RCC_OscConfig+0x54c>
 8007444:	40023800 	.word	0x40023800
 8007448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800744c:	4b1f      	ldr	r3, [pc, #124]	@ (80074cc <HAL_RCC_OscConfig+0x558>)
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d030      	beq.n	80074bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007464:	429a      	cmp	r2, r3
 8007466:	d129      	bne.n	80074bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007472:	429a      	cmp	r2, r3
 8007474:	d122      	bne.n	80074bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800747c:	4013      	ands	r3, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007482:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007484:	4293      	cmp	r3, r2
 8007486:	d119      	bne.n	80074bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007492:	085b      	lsrs	r3, r3, #1
 8007494:	3b01      	subs	r3, #1
 8007496:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007498:	429a      	cmp	r2, r3
 800749a:	d10f      	bne.n	80074bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d107      	bne.n	80074bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d001      	beq.n	80074c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	40023800 	.word	0x40023800

080074d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0d0      	b.n	800768a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074e8:	4b6a      	ldr	r3, [pc, #424]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 030f 	and.w	r3, r3, #15
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d910      	bls.n	8007518 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f6:	4b67      	ldr	r3, [pc, #412]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f023 020f 	bic.w	r2, r3, #15
 80074fe:	4965      	ldr	r1, [pc, #404]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	4313      	orrs	r3, r2
 8007504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007506:	4b63      	ldr	r3, [pc, #396]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 030f 	and.w	r3, r3, #15
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	429a      	cmp	r2, r3
 8007512:	d001      	beq.n	8007518 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e0b8      	b.n	800768a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d020      	beq.n	8007566 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007530:	4b59      	ldr	r3, [pc, #356]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	4a58      	ldr	r2, [pc, #352]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 8007536:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800753a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0308 	and.w	r3, r3, #8
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007548:	4b53      	ldr	r3, [pc, #332]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	4a52      	ldr	r2, [pc, #328]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 800754e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007552:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007554:	4b50      	ldr	r3, [pc, #320]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	494d      	ldr	r1, [pc, #308]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 8007562:	4313      	orrs	r3, r2
 8007564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d040      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d107      	bne.n	800758a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800757a:	4b47      	ldr	r3, [pc, #284]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d115      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e07f      	b.n	800768a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b02      	cmp	r3, #2
 8007590:	d107      	bne.n	80075a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007592:	4b41      	ldr	r3, [pc, #260]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d109      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e073      	b.n	800768a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a2:	4b3d      	ldr	r3, [pc, #244]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e06b      	b.n	800768a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075b2:	4b39      	ldr	r3, [pc, #228]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f023 0203 	bic.w	r2, r3, #3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	4936      	ldr	r1, [pc, #216]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075c4:	f7fc fb6a 	bl	8003c9c <HAL_GetTick>
 80075c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ca:	e00a      	b.n	80075e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075cc:	f7fc fb66 	bl	8003c9c <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075da:	4293      	cmp	r3, r2
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e053      	b.n	800768a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075e2:	4b2d      	ldr	r3, [pc, #180]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f003 020c 	and.w	r2, r3, #12
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d1eb      	bne.n	80075cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075f4:	4b27      	ldr	r3, [pc, #156]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 030f 	and.w	r3, r3, #15
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d210      	bcs.n	8007624 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007602:	4b24      	ldr	r3, [pc, #144]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f023 020f 	bic.w	r2, r3, #15
 800760a:	4922      	ldr	r1, [pc, #136]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	4313      	orrs	r3, r2
 8007610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007612:	4b20      	ldr	r3, [pc, #128]	@ (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d001      	beq.n	8007624 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e032      	b.n	800768a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0304 	and.w	r3, r3, #4
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007630:	4b19      	ldr	r3, [pc, #100]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	4916      	ldr	r1, [pc, #88]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 800763e:	4313      	orrs	r3, r2
 8007640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0308 	and.w	r3, r3, #8
 800764a:	2b00      	cmp	r3, #0
 800764c:	d009      	beq.n	8007662 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800764e:	4b12      	ldr	r3, [pc, #72]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	490e      	ldr	r1, [pc, #56]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 800765e:	4313      	orrs	r3, r2
 8007660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007662:	f000 f821 	bl	80076a8 <HAL_RCC_GetSysClockFreq>
 8007666:	4602      	mov	r2, r0
 8007668:	4b0b      	ldr	r3, [pc, #44]	@ (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	091b      	lsrs	r3, r3, #4
 800766e:	f003 030f 	and.w	r3, r3, #15
 8007672:	490a      	ldr	r1, [pc, #40]	@ (800769c <HAL_RCC_ClockConfig+0x1cc>)
 8007674:	5ccb      	ldrb	r3, [r1, r3]
 8007676:	fa22 f303 	lsr.w	r3, r2, r3
 800767a:	4a09      	ldr	r2, [pc, #36]	@ (80076a0 <HAL_RCC_ClockConfig+0x1d0>)
 800767c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800767e:	4b09      	ldr	r3, [pc, #36]	@ (80076a4 <HAL_RCC_ClockConfig+0x1d4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4618      	mov	r0, r3
 8007684:	f7fc fac6 	bl	8003c14 <HAL_InitTick>

  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	40023c00 	.word	0x40023c00
 8007698:	40023800 	.word	0x40023800
 800769c:	0800ef60 	.word	0x0800ef60
 80076a0:	2000000c 	.word	0x2000000c
 80076a4:	20000010 	.word	0x20000010

080076a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076ac:	b094      	sub	sp, #80	@ 0x50
 80076ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80076b4:	2300      	movs	r3, #0
 80076b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076b8:	2300      	movs	r3, #0
 80076ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076c0:	4b79      	ldr	r3, [pc, #484]	@ (80078a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f003 030c 	and.w	r3, r3, #12
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d00d      	beq.n	80076e8 <HAL_RCC_GetSysClockFreq+0x40>
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	f200 80e1 	bhi.w	8007894 <HAL_RCC_GetSysClockFreq+0x1ec>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <HAL_RCC_GetSysClockFreq+0x34>
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d003      	beq.n	80076e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80076da:	e0db      	b.n	8007894 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076dc:	4b73      	ldr	r3, [pc, #460]	@ (80078ac <HAL_RCC_GetSysClockFreq+0x204>)
 80076de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076e0:	e0db      	b.n	800789a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076e2:	4b73      	ldr	r3, [pc, #460]	@ (80078b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80076e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076e6:	e0d8      	b.n	800789a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076e8:	4b6f      	ldr	r3, [pc, #444]	@ (80078a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80076f2:	4b6d      	ldr	r3, [pc, #436]	@ (80078a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d063      	beq.n	80077c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076fe:	4b6a      	ldr	r3, [pc, #424]	@ (80078a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	099b      	lsrs	r3, r3, #6
 8007704:	2200      	movs	r2, #0
 8007706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007708:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800770a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800770c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007710:	633b      	str	r3, [r7, #48]	@ 0x30
 8007712:	2300      	movs	r3, #0
 8007714:	637b      	str	r3, [r7, #52]	@ 0x34
 8007716:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800771a:	4622      	mov	r2, r4
 800771c:	462b      	mov	r3, r5
 800771e:	f04f 0000 	mov.w	r0, #0
 8007722:	f04f 0100 	mov.w	r1, #0
 8007726:	0159      	lsls	r1, r3, #5
 8007728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800772c:	0150      	lsls	r0, r2, #5
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4621      	mov	r1, r4
 8007734:	1a51      	subs	r1, r2, r1
 8007736:	6139      	str	r1, [r7, #16]
 8007738:	4629      	mov	r1, r5
 800773a:	eb63 0301 	sbc.w	r3, r3, r1
 800773e:	617b      	str	r3, [r7, #20]
 8007740:	f04f 0200 	mov.w	r2, #0
 8007744:	f04f 0300 	mov.w	r3, #0
 8007748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800774c:	4659      	mov	r1, fp
 800774e:	018b      	lsls	r3, r1, #6
 8007750:	4651      	mov	r1, sl
 8007752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007756:	4651      	mov	r1, sl
 8007758:	018a      	lsls	r2, r1, #6
 800775a:	4651      	mov	r1, sl
 800775c:	ebb2 0801 	subs.w	r8, r2, r1
 8007760:	4659      	mov	r1, fp
 8007762:	eb63 0901 	sbc.w	r9, r3, r1
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	f04f 0300 	mov.w	r3, #0
 800776e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800777a:	4690      	mov	r8, r2
 800777c:	4699      	mov	r9, r3
 800777e:	4623      	mov	r3, r4
 8007780:	eb18 0303 	adds.w	r3, r8, r3
 8007784:	60bb      	str	r3, [r7, #8]
 8007786:	462b      	mov	r3, r5
 8007788:	eb49 0303 	adc.w	r3, r9, r3
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	f04f 0300 	mov.w	r3, #0
 8007796:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800779a:	4629      	mov	r1, r5
 800779c:	024b      	lsls	r3, r1, #9
 800779e:	4621      	mov	r1, r4
 80077a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80077a4:	4621      	mov	r1, r4
 80077a6:	024a      	lsls	r2, r1, #9
 80077a8:	4610      	mov	r0, r2
 80077aa:	4619      	mov	r1, r3
 80077ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ae:	2200      	movs	r2, #0
 80077b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80077b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80077b8:	f7f8 fefa 	bl	80005b0 <__aeabi_uldivmod>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	4613      	mov	r3, r2
 80077c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077c4:	e058      	b.n	8007878 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077c6:	4b38      	ldr	r3, [pc, #224]	@ (80078a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	099b      	lsrs	r3, r3, #6
 80077cc:	2200      	movs	r2, #0
 80077ce:	4618      	mov	r0, r3
 80077d0:	4611      	mov	r1, r2
 80077d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077d6:	623b      	str	r3, [r7, #32]
 80077d8:	2300      	movs	r3, #0
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
 80077dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077e0:	4642      	mov	r2, r8
 80077e2:	464b      	mov	r3, r9
 80077e4:	f04f 0000 	mov.w	r0, #0
 80077e8:	f04f 0100 	mov.w	r1, #0
 80077ec:	0159      	lsls	r1, r3, #5
 80077ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077f2:	0150      	lsls	r0, r2, #5
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4641      	mov	r1, r8
 80077fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80077fe:	4649      	mov	r1, r9
 8007800:	eb63 0b01 	sbc.w	fp, r3, r1
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007810:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007814:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007818:	ebb2 040a 	subs.w	r4, r2, sl
 800781c:	eb63 050b 	sbc.w	r5, r3, fp
 8007820:	f04f 0200 	mov.w	r2, #0
 8007824:	f04f 0300 	mov.w	r3, #0
 8007828:	00eb      	lsls	r3, r5, #3
 800782a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800782e:	00e2      	lsls	r2, r4, #3
 8007830:	4614      	mov	r4, r2
 8007832:	461d      	mov	r5, r3
 8007834:	4643      	mov	r3, r8
 8007836:	18e3      	adds	r3, r4, r3
 8007838:	603b      	str	r3, [r7, #0]
 800783a:	464b      	mov	r3, r9
 800783c:	eb45 0303 	adc.w	r3, r5, r3
 8007840:	607b      	str	r3, [r7, #4]
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	f04f 0300 	mov.w	r3, #0
 800784a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800784e:	4629      	mov	r1, r5
 8007850:	028b      	lsls	r3, r1, #10
 8007852:	4621      	mov	r1, r4
 8007854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007858:	4621      	mov	r1, r4
 800785a:	028a      	lsls	r2, r1, #10
 800785c:	4610      	mov	r0, r2
 800785e:	4619      	mov	r1, r3
 8007860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007862:	2200      	movs	r2, #0
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	61fa      	str	r2, [r7, #28]
 8007868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800786c:	f7f8 fea0 	bl	80005b0 <__aeabi_uldivmod>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4613      	mov	r3, r2
 8007876:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007878:	4b0b      	ldr	r3, [pc, #44]	@ (80078a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	0c1b      	lsrs	r3, r3, #16
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	3301      	adds	r3, #1
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007888:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800788a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800788c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007890:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007892:	e002      	b.n	800789a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007894:	4b05      	ldr	r3, [pc, #20]	@ (80078ac <HAL_RCC_GetSysClockFreq+0x204>)
 8007896:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800789a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800789c:	4618      	mov	r0, r3
 800789e:	3750      	adds	r7, #80	@ 0x50
 80078a0:	46bd      	mov	sp, r7
 80078a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078a6:	bf00      	nop
 80078a8:	40023800 	.word	0x40023800
 80078ac:	00f42400 	.word	0x00f42400
 80078b0:	007a1200 	.word	0x007a1200

080078b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078b8:	4b03      	ldr	r3, [pc, #12]	@ (80078c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80078ba:	681b      	ldr	r3, [r3, #0]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	2000000c 	.word	0x2000000c

080078cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078d0:	f7ff fff0 	bl	80078b4 <HAL_RCC_GetHCLKFreq>
 80078d4:	4602      	mov	r2, r0
 80078d6:	4b05      	ldr	r3, [pc, #20]	@ (80078ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	0a9b      	lsrs	r3, r3, #10
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	4903      	ldr	r1, [pc, #12]	@ (80078f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078e2:	5ccb      	ldrb	r3, [r1, r3]
 80078e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	40023800 	.word	0x40023800
 80078f0:	0800ef70 	.word	0x0800ef70

080078f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80078f8:	f7ff ffdc 	bl	80078b4 <HAL_RCC_GetHCLKFreq>
 80078fc:	4602      	mov	r2, r0
 80078fe:	4b05      	ldr	r3, [pc, #20]	@ (8007914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	0b5b      	lsrs	r3, r3, #13
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	4903      	ldr	r1, [pc, #12]	@ (8007918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800790a:	5ccb      	ldrb	r3, [r1, r3]
 800790c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007910:	4618      	mov	r0, r3
 8007912:	bd80      	pop	{r7, pc}
 8007914:	40023800 	.word	0x40023800
 8007918:	0800ef70 	.word	0x0800ef70

0800791c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d012      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007944:	4b69      	ldr	r3, [pc, #420]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	4a68      	ldr	r2, [pc, #416]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800794a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800794e:	6093      	str	r3, [r2, #8]
 8007950:	4b66      	ldr	r3, [pc, #408]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007958:	4964      	ldr	r1, [pc, #400]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800795a:	4313      	orrs	r3, r2
 800795c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007966:	2301      	movs	r3, #1
 8007968:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d017      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007976:	4b5d      	ldr	r3, [pc, #372]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800797c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007984:	4959      	ldr	r1, [pc, #356]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007990:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007994:	d101      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007996:	2301      	movs	r3, #1
 8007998:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80079a2:	2301      	movs	r3, #1
 80079a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d017      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80079b2:	4b4e      	ldr	r3, [pc, #312]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c0:	494a      	ldr	r1, [pc, #296]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079d0:	d101      	bne.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80079d2:	2301      	movs	r3, #1
 80079d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80079de:	2301      	movs	r3, #1
 80079e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80079ee:	2301      	movs	r3, #1
 80079f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 808b 	beq.w	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a00:	4b3a      	ldr	r3, [pc, #232]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a04:	4a39      	ldr	r2, [pc, #228]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a0c:	4b37      	ldr	r3, [pc, #220]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a14:	60bb      	str	r3, [r7, #8]
 8007a16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a18:	4b35      	ldr	r3, [pc, #212]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a34      	ldr	r2, [pc, #208]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a24:	f7fc f93a 	bl	8003c9c <HAL_GetTick>
 8007a28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a2c:	f7fc f936 	bl	8003c9c <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b64      	cmp	r3, #100	@ 0x64
 8007a38:	d901      	bls.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e38f      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a3e:	4b2c      	ldr	r3, [pc, #176]	@ (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0f0      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a4a:	4b28      	ldr	r3, [pc, #160]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d035      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d02e      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a68:	4b20      	ldr	r3, [pc, #128]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a72:	4b1e      	ldr	r3, [pc, #120]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a76:	4a1d      	ldr	r2, [pc, #116]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a7c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a82:	4a1a      	ldr	r2, [pc, #104]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a88:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a8a:	4a18      	ldr	r2, [pc, #96]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a90:	4b16      	ldr	r3, [pc, #88]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d114      	bne.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a9c:	f7fc f8fe 	bl	8003c9c <HAL_GetTick>
 8007aa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aa2:	e00a      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aa4:	f7fc f8fa 	bl	8003c9c <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d901      	bls.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e351      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aba:	4b0c      	ldr	r3, [pc, #48]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0ee      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ad2:	d111      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007ad4:	4b05      	ldr	r3, [pc, #20]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007ae0:	4b04      	ldr	r3, [pc, #16]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ae2:	400b      	ands	r3, r1
 8007ae4:	4901      	ldr	r1, [pc, #4]	@ (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	608b      	str	r3, [r1, #8]
 8007aea:	e00b      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007aec:	40023800 	.word	0x40023800
 8007af0:	40007000 	.word	0x40007000
 8007af4:	0ffffcff 	.word	0x0ffffcff
 8007af8:	4bac      	ldr	r3, [pc, #688]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	4aab      	ldr	r2, [pc, #684]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007afe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007b02:	6093      	str	r3, [r2, #8]
 8007b04:	4ba9      	ldr	r3, [pc, #676]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b10:	49a6      	ldr	r1, [pc, #664]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0310 	and.w	r3, r3, #16
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d010      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b22:	4ba2      	ldr	r3, [pc, #648]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b28:	4aa0      	ldr	r2, [pc, #640]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007b32:	4b9e      	ldr	r3, [pc, #632]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b34:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3c:	499b      	ldr	r1, [pc, #620]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00a      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b50:	4b96      	ldr	r3, [pc, #600]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b56:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b5e:	4993      	ldr	r1, [pc, #588]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b72:	4b8e      	ldr	r3, [pc, #568]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b80:	498a      	ldr	r1, [pc, #552]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00a      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b94:	4b85      	ldr	r3, [pc, #532]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ba2:	4982      	ldr	r1, [pc, #520]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bb6:	4b7d      	ldr	r3, [pc, #500]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bbc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc4:	4979      	ldr	r1, [pc, #484]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bd8:	4b74      	ldr	r3, [pc, #464]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bde:	f023 0203 	bic.w	r2, r3, #3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007be6:	4971      	ldr	r1, [pc, #452]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bfa:	4b6c      	ldr	r3, [pc, #432]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c00:	f023 020c 	bic.w	r2, r3, #12
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c08:	4968      	ldr	r1, [pc, #416]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c1c:	4b63      	ldr	r3, [pc, #396]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c22:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c2a:	4960      	ldr	r1, [pc, #384]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c3e:	4b5b      	ldr	r3, [pc, #364]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c44:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c4c:	4957      	ldr	r1, [pc, #348]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c60:	4b52      	ldr	r3, [pc, #328]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c6e:	494f      	ldr	r1, [pc, #316]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c82:	4b4a      	ldr	r3, [pc, #296]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c88:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c90:	4946      	ldr	r1, [pc, #280]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007ca4:	4b41      	ldr	r3, [pc, #260]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007caa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cb2:	493e      	ldr	r1, [pc, #248]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007cc6:	4b39      	ldr	r3, [pc, #228]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ccc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cd4:	4935      	ldr	r1, [pc, #212]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ce8:	4b30      	ldr	r3, [pc, #192]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cf6:	492d      	ldr	r1, [pc, #180]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d011      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d0a:	4b28      	ldr	r3, [pc, #160]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d10:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d18:	4924      	ldr	r1, [pc, #144]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d28:	d101      	bne.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0308 	and.w	r3, r3, #8
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d4a:	4b18      	ldr	r3, [pc, #96]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d50:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d58:	4914      	ldr	r1, [pc, #80]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d72:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d7c:	490b      	ldr	r1, [pc, #44]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00f      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007d90:	4b06      	ldr	r3, [pc, #24]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d96:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007da0:	4902      	ldr	r1, [pc, #8]	@ (8007dac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007da8:	e002      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007daa:	bf00      	nop
 8007dac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007dbc:	4b8a      	ldr	r3, [pc, #552]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dcc:	4986      	ldr	r1, [pc, #536]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007de0:	4b81      	ldr	r3, [pc, #516]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007de6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007df0:	497d      	ldr	r1, [pc, #500]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d006      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f000 80d6 	beq.w	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e0c:	4b76      	ldr	r3, [pc, #472]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a75      	ldr	r2, [pc, #468]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e18:	f7fb ff40 	bl	8003c9c <HAL_GetTick>
 8007e1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e1e:	e008      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e20:	f7fb ff3c 	bl	8003c9c <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b64      	cmp	r3, #100	@ 0x64
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e195      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e32:	4b6d      	ldr	r3, [pc, #436]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f0      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d021      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d11d      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e52:	4b65      	ldr	r3, [pc, #404]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e58:	0c1b      	lsrs	r3, r3, #16
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e60:	4b61      	ldr	r3, [pc, #388]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e66:	0e1b      	lsrs	r3, r3, #24
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	019a      	lsls	r2, r3, #6
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	041b      	lsls	r3, r3, #16
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	061b      	lsls	r3, r3, #24
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	071b      	lsls	r3, r3, #28
 8007e86:	4958      	ldr	r1, [pc, #352]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d004      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ea2:	d00a      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d02e      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007eb8:	d129      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007eba:	4b4b      	ldr	r3, [pc, #300]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ec0:	0c1b      	lsrs	r3, r3, #16
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ec8:	4b47      	ldr	r3, [pc, #284]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ece:	0f1b      	lsrs	r3, r3, #28
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	019a      	lsls	r2, r3, #6
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	041b      	lsls	r3, r3, #16
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	061b      	lsls	r3, r3, #24
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	071b      	lsls	r3, r3, #28
 8007eee:	493e      	ldr	r1, [pc, #248]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007ef6:	4b3c      	ldr	r3, [pc, #240]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007efc:	f023 021f 	bic.w	r2, r3, #31
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	3b01      	subs	r3, #1
 8007f06:	4938      	ldr	r1, [pc, #224]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d01d      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f1a:	4b33      	ldr	r3, [pc, #204]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f20:	0e1b      	lsrs	r3, r3, #24
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f28:	4b2f      	ldr	r3, [pc, #188]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f2e:	0f1b      	lsrs	r3, r3, #28
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	019a      	lsls	r2, r3, #6
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	041b      	lsls	r3, r3, #16
 8007f42:	431a      	orrs	r2, r3
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	061b      	lsls	r3, r3, #24
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	071b      	lsls	r3, r3, #28
 8007f4e:	4926      	ldr	r1, [pc, #152]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d011      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	019a      	lsls	r2, r3, #6
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	041b      	lsls	r3, r3, #16
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	061b      	lsls	r3, r3, #24
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	071b      	lsls	r3, r3, #28
 8007f7e:	491a      	ldr	r1, [pc, #104]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f86:	4b18      	ldr	r3, [pc, #96]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a17      	ldr	r2, [pc, #92]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f92:	f7fb fe83 	bl	8003c9c <HAL_GetTick>
 8007f96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f98:	e008      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f9a:	f7fb fe7f 	bl	8003c9c <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	2b64      	cmp	r3, #100	@ 0x64
 8007fa6:	d901      	bls.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e0d8      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fac:	4b0e      	ldr	r3, [pc, #56]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0f0      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	f040 80ce 	bne.w	800815c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007fc0:	4b09      	ldr	r3, [pc, #36]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a08      	ldr	r2, [pc, #32]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fcc:	f7fb fe66 	bl	8003c9c <HAL_GetTick>
 8007fd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fd2:	e00b      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fd4:	f7fb fe62 	bl	8003c9c <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b64      	cmp	r3, #100	@ 0x64
 8007fe0:	d904      	bls.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e0bb      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007fe6:	bf00      	nop
 8007fe8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fec:	4b5e      	ldr	r3, [pc, #376]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ff8:	d0ec      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800800a:	2b00      	cmp	r3, #0
 800800c:	d009      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008016:	2b00      	cmp	r3, #0
 8008018:	d02e      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801e:	2b00      	cmp	r3, #0
 8008020:	d12a      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008022:	4b51      	ldr	r3, [pc, #324]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008028:	0c1b      	lsrs	r3, r3, #16
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008030:	4b4d      	ldr	r3, [pc, #308]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008036:	0f1b      	lsrs	r3, r3, #28
 8008038:	f003 0307 	and.w	r3, r3, #7
 800803c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	019a      	lsls	r2, r3, #6
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	041b      	lsls	r3, r3, #16
 8008048:	431a      	orrs	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	061b      	lsls	r3, r3, #24
 8008050:	431a      	orrs	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	071b      	lsls	r3, r3, #28
 8008056:	4944      	ldr	r1, [pc, #272]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008058:	4313      	orrs	r3, r2
 800805a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800805e:	4b42      	ldr	r3, [pc, #264]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008064:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800806c:	3b01      	subs	r3, #1
 800806e:	021b      	lsls	r3, r3, #8
 8008070:	493d      	ldr	r1, [pc, #244]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008072:	4313      	orrs	r3, r2
 8008074:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d022      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008088:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800808c:	d11d      	bne.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800808e:	4b36      	ldr	r3, [pc, #216]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008094:	0e1b      	lsrs	r3, r3, #24
 8008096:	f003 030f 	and.w	r3, r3, #15
 800809a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800809c:	4b32      	ldr	r3, [pc, #200]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800809e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080a2:	0f1b      	lsrs	r3, r3, #28
 80080a4:	f003 0307 	and.w	r3, r3, #7
 80080a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	019a      	lsls	r2, r3, #6
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	041b      	lsls	r3, r3, #16
 80080b6:	431a      	orrs	r2, r3
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	061b      	lsls	r3, r3, #24
 80080bc:	431a      	orrs	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	071b      	lsls	r3, r3, #28
 80080c2:	4929      	ldr	r1, [pc, #164]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0308 	and.w	r3, r3, #8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d028      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080d6:	4b24      	ldr	r3, [pc, #144]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080dc:	0e1b      	lsrs	r3, r3, #24
 80080de:	f003 030f 	and.w	r3, r3, #15
 80080e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080e4:	4b20      	ldr	r3, [pc, #128]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ea:	0c1b      	lsrs	r3, r3, #16
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	019a      	lsls	r2, r3, #6
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	041b      	lsls	r3, r3, #16
 80080fc:	431a      	orrs	r2, r3
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	061b      	lsls	r3, r3, #24
 8008102:	431a      	orrs	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	071b      	lsls	r3, r3, #28
 800810a:	4917      	ldr	r1, [pc, #92]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800810c:	4313      	orrs	r3, r2
 800810e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008112:	4b15      	ldr	r3, [pc, #84]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008118:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008120:	4911      	ldr	r1, [pc, #68]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008122:	4313      	orrs	r3, r2
 8008124:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008128:	4b0f      	ldr	r3, [pc, #60]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a0e      	ldr	r2, [pc, #56]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800812e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008134:	f7fb fdb2 	bl	8003c9c <HAL_GetTick>
 8008138:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800813a:	e008      	b.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800813c:	f7fb fdae 	bl	8003c9c <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b64      	cmp	r3, #100	@ 0x64
 8008148:	d901      	bls.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e007      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800814e:	4b06      	ldr	r3, [pc, #24]	@ (8008168 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008156:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800815a:	d1ef      	bne.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3720      	adds	r7, #32
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	40023800 	.word	0x40023800

0800816c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e049      	b.n	8008212 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d106      	bne.n	8008198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7fb f916 	bl	80033c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3304      	adds	r3, #4
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f000 fd5e 	bl	8008c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
	...

0800821c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b01      	cmp	r3, #1
 800822e:	d001      	beq.n	8008234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008230:	2301      	movs	r3, #1
 8008232:	e054      	b.n	80082de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68da      	ldr	r2, [r3, #12]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a26      	ldr	r2, [pc, #152]	@ (80082ec <HAL_TIM_Base_Start_IT+0xd0>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d022      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800825e:	d01d      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a22      	ldr	r2, [pc, #136]	@ (80082f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d018      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a21      	ldr	r2, [pc, #132]	@ (80082f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d013      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1f      	ldr	r2, [pc, #124]	@ (80082f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00e      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a1e      	ldr	r2, [pc, #120]	@ (80082fc <HAL_TIM_Base_Start_IT+0xe0>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d009      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a1c      	ldr	r2, [pc, #112]	@ (8008300 <HAL_TIM_Base_Start_IT+0xe4>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d004      	beq.n	800829c <HAL_TIM_Base_Start_IT+0x80>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a1b      	ldr	r2, [pc, #108]	@ (8008304 <HAL_TIM_Base_Start_IT+0xe8>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d115      	bne.n	80082c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689a      	ldr	r2, [r3, #8]
 80082a2:	4b19      	ldr	r3, [pc, #100]	@ (8008308 <HAL_TIM_Base_Start_IT+0xec>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2b06      	cmp	r3, #6
 80082ac:	d015      	beq.n	80082da <HAL_TIM_Base_Start_IT+0xbe>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082b4:	d011      	beq.n	80082da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f042 0201 	orr.w	r2, r2, #1
 80082c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c6:	e008      	b.n	80082da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0201 	orr.w	r2, r2, #1
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	e000      	b.n	80082dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	40010000 	.word	0x40010000
 80082f0:	40000400 	.word	0x40000400
 80082f4:	40000800 	.word	0x40000800
 80082f8:	40000c00 	.word	0x40000c00
 80082fc:	40010400 	.word	0x40010400
 8008300:	40014000 	.word	0x40014000
 8008304:	40001800 	.word	0x40001800
 8008308:	00010007 	.word	0x00010007

0800830c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0201 	bic.w	r2, r2, #1
 8008322:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6a1a      	ldr	r2, [r3, #32]
 800832a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800832e:	4013      	ands	r3, r2
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10f      	bne.n	8008354 <HAL_TIM_Base_Stop_IT+0x48>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6a1a      	ldr	r2, [r3, #32]
 800833a:	f240 4344 	movw	r3, #1092	@ 0x444
 800833e:	4013      	ands	r3, r2
 8008340:	2b00      	cmp	r3, #0
 8008342:	d107      	bne.n	8008354 <HAL_TIM_Base_Stop_IT+0x48>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0201 	bic.w	r2, r2, #1
 8008352:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e049      	b.n	8008410 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d106      	bne.n	8008396 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f841 	bl	8008418 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2202      	movs	r2, #2
 800839a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	3304      	adds	r3, #4
 80083a6:	4619      	mov	r1, r3
 80083a8:	4610      	mov	r0, r2
 80083aa:	f000 fc5f 	bl	8008c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d104      	bne.n	800844a <HAL_TIM_IC_Start_IT+0x1e>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008446:	b2db      	uxtb	r3, r3
 8008448:	e023      	b.n	8008492 <HAL_TIM_IC_Start_IT+0x66>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b04      	cmp	r3, #4
 800844e:	d104      	bne.n	800845a <HAL_TIM_IC_Start_IT+0x2e>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008456:	b2db      	uxtb	r3, r3
 8008458:	e01b      	b.n	8008492 <HAL_TIM_IC_Start_IT+0x66>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b08      	cmp	r3, #8
 800845e:	d104      	bne.n	800846a <HAL_TIM_IC_Start_IT+0x3e>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008466:	b2db      	uxtb	r3, r3
 8008468:	e013      	b.n	8008492 <HAL_TIM_IC_Start_IT+0x66>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b0c      	cmp	r3, #12
 800846e:	d104      	bne.n	800847a <HAL_TIM_IC_Start_IT+0x4e>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008476:	b2db      	uxtb	r3, r3
 8008478:	e00b      	b.n	8008492 <HAL_TIM_IC_Start_IT+0x66>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b10      	cmp	r3, #16
 800847e:	d104      	bne.n	800848a <HAL_TIM_IC_Start_IT+0x5e>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008486:	b2db      	uxtb	r3, r3
 8008488:	e003      	b.n	8008492 <HAL_TIM_IC_Start_IT+0x66>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008490:	b2db      	uxtb	r3, r3
 8008492:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d104      	bne.n	80084a4 <HAL_TIM_IC_Start_IT+0x78>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	e013      	b.n	80084cc <HAL_TIM_IC_Start_IT+0xa0>
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d104      	bne.n	80084b4 <HAL_TIM_IC_Start_IT+0x88>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	e00b      	b.n	80084cc <HAL_TIM_IC_Start_IT+0xa0>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2b08      	cmp	r3, #8
 80084b8:	d104      	bne.n	80084c4 <HAL_TIM_IC_Start_IT+0x98>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	e003      	b.n	80084cc <HAL_TIM_IC_Start_IT+0xa0>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80084ce:	7bbb      	ldrb	r3, [r7, #14]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d102      	bne.n	80084da <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80084d4:	7b7b      	ldrb	r3, [r7, #13]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d001      	beq.n	80084de <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e0e2      	b.n	80086a4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d104      	bne.n	80084ee <HAL_TIM_IC_Start_IT+0xc2>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084ec:	e023      	b.n	8008536 <HAL_TIM_IC_Start_IT+0x10a>
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b04      	cmp	r3, #4
 80084f2:	d104      	bne.n	80084fe <HAL_TIM_IC_Start_IT+0xd2>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084fc:	e01b      	b.n	8008536 <HAL_TIM_IC_Start_IT+0x10a>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2b08      	cmp	r3, #8
 8008502:	d104      	bne.n	800850e <HAL_TIM_IC_Start_IT+0xe2>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2202      	movs	r2, #2
 8008508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800850c:	e013      	b.n	8008536 <HAL_TIM_IC_Start_IT+0x10a>
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2b0c      	cmp	r3, #12
 8008512:	d104      	bne.n	800851e <HAL_TIM_IC_Start_IT+0xf2>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2202      	movs	r2, #2
 8008518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800851c:	e00b      	b.n	8008536 <HAL_TIM_IC_Start_IT+0x10a>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	2b10      	cmp	r3, #16
 8008522:	d104      	bne.n	800852e <HAL_TIM_IC_Start_IT+0x102>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800852c:	e003      	b.n	8008536 <HAL_TIM_IC_Start_IT+0x10a>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d104      	bne.n	8008546 <HAL_TIM_IC_Start_IT+0x11a>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008544:	e013      	b.n	800856e <HAL_TIM_IC_Start_IT+0x142>
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b04      	cmp	r3, #4
 800854a:	d104      	bne.n	8008556 <HAL_TIM_IC_Start_IT+0x12a>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2202      	movs	r2, #2
 8008550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008554:	e00b      	b.n	800856e <HAL_TIM_IC_Start_IT+0x142>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b08      	cmp	r3, #8
 800855a:	d104      	bne.n	8008566 <HAL_TIM_IC_Start_IT+0x13a>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008564:	e003      	b.n	800856e <HAL_TIM_IC_Start_IT+0x142>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2202      	movs	r2, #2
 800856a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b0c      	cmp	r3, #12
 8008572:	d841      	bhi.n	80085f8 <HAL_TIM_IC_Start_IT+0x1cc>
 8008574:	a201      	add	r2, pc, #4	@ (adr r2, 800857c <HAL_TIM_IC_Start_IT+0x150>)
 8008576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857a:	bf00      	nop
 800857c:	080085b1 	.word	0x080085b1
 8008580:	080085f9 	.word	0x080085f9
 8008584:	080085f9 	.word	0x080085f9
 8008588:	080085f9 	.word	0x080085f9
 800858c:	080085c3 	.word	0x080085c3
 8008590:	080085f9 	.word	0x080085f9
 8008594:	080085f9 	.word	0x080085f9
 8008598:	080085f9 	.word	0x080085f9
 800859c:	080085d5 	.word	0x080085d5
 80085a0:	080085f9 	.word	0x080085f9
 80085a4:	080085f9 	.word	0x080085f9
 80085a8:	080085f9 	.word	0x080085f9
 80085ac:	080085e7 	.word	0x080085e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f042 0202 	orr.w	r2, r2, #2
 80085be:	60da      	str	r2, [r3, #12]
      break;
 80085c0:	e01d      	b.n	80085fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 0204 	orr.w	r2, r2, #4
 80085d0:	60da      	str	r2, [r3, #12]
      break;
 80085d2:	e014      	b.n	80085fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f042 0208 	orr.w	r2, r2, #8
 80085e2:	60da      	str	r2, [r3, #12]
      break;
 80085e4:	e00b      	b.n	80085fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f042 0210 	orr.w	r2, r2, #16
 80085f4:	60da      	str	r2, [r3, #12]
      break;
 80085f6:	e002      	b.n	80085fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	73fb      	strb	r3, [r7, #15]
      break;
 80085fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d14e      	bne.n	80086a2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2201      	movs	r2, #1
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fd9d 	bl	800914c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a25      	ldr	r2, [pc, #148]	@ (80086ac <HAL_TIM_IC_Start_IT+0x280>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d022      	beq.n	8008662 <HAL_TIM_IC_Start_IT+0x236>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008624:	d01d      	beq.n	8008662 <HAL_TIM_IC_Start_IT+0x236>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a21      	ldr	r2, [pc, #132]	@ (80086b0 <HAL_TIM_IC_Start_IT+0x284>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d018      	beq.n	8008662 <HAL_TIM_IC_Start_IT+0x236>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a1f      	ldr	r2, [pc, #124]	@ (80086b4 <HAL_TIM_IC_Start_IT+0x288>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d013      	beq.n	8008662 <HAL_TIM_IC_Start_IT+0x236>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a1e      	ldr	r2, [pc, #120]	@ (80086b8 <HAL_TIM_IC_Start_IT+0x28c>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d00e      	beq.n	8008662 <HAL_TIM_IC_Start_IT+0x236>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a1c      	ldr	r2, [pc, #112]	@ (80086bc <HAL_TIM_IC_Start_IT+0x290>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d009      	beq.n	8008662 <HAL_TIM_IC_Start_IT+0x236>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a1b      	ldr	r2, [pc, #108]	@ (80086c0 <HAL_TIM_IC_Start_IT+0x294>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d004      	beq.n	8008662 <HAL_TIM_IC_Start_IT+0x236>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a19      	ldr	r2, [pc, #100]	@ (80086c4 <HAL_TIM_IC_Start_IT+0x298>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d115      	bne.n	800868e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689a      	ldr	r2, [r3, #8]
 8008668:	4b17      	ldr	r3, [pc, #92]	@ (80086c8 <HAL_TIM_IC_Start_IT+0x29c>)
 800866a:	4013      	ands	r3, r2
 800866c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b06      	cmp	r3, #6
 8008672:	d015      	beq.n	80086a0 <HAL_TIM_IC_Start_IT+0x274>
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800867a:	d011      	beq.n	80086a0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0201 	orr.w	r2, r2, #1
 800868a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800868c:	e008      	b.n	80086a0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f042 0201 	orr.w	r2, r2, #1
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	e000      	b.n	80086a2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	40010000 	.word	0x40010000
 80086b0:	40000400 	.word	0x40000400
 80086b4:	40000800 	.word	0x40000800
 80086b8:	40000c00 	.word	0x40000c00
 80086bc:	40010400 	.word	0x40010400
 80086c0:	40014000 	.word	0x40014000
 80086c4:	40001800 	.word	0x40001800
 80086c8:	00010007 	.word	0x00010007

080086cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d020      	beq.n	8008730 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01b      	beq.n	8008730 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f06f 0202 	mvn.w	r2, #2
 8008700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	f003 0303 	and.w	r3, r3, #3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d003      	beq.n	800871e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7fb f884 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 800871c:	e005      	b.n	800872a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fa86 	bl	8008c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fa8d 	bl	8008c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f003 0304 	and.w	r3, r3, #4
 8008736:	2b00      	cmp	r3, #0
 8008738:	d020      	beq.n	800877c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01b      	beq.n	800877c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f06f 0204 	mvn.w	r2, #4
 800874c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2202      	movs	r2, #2
 8008752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7fb f85e 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 8008768:	e005      	b.n	8008776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 fa60 	bl	8008c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fa67 	bl	8008c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d020      	beq.n	80087c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f003 0308 	and.w	r3, r3, #8
 800878c:	2b00      	cmp	r3, #0
 800878e:	d01b      	beq.n	80087c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f06f 0208 	mvn.w	r2, #8
 8008798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2204      	movs	r2, #4
 800879e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7fb f838 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 80087b4:	e005      	b.n	80087c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fa3a 	bl	8008c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fa41 	bl	8008c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f003 0310 	and.w	r3, r3, #16
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d020      	beq.n	8008814 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f003 0310 	and.w	r3, r3, #16
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d01b      	beq.n	8008814 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f06f 0210 	mvn.w	r2, #16
 80087e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2208      	movs	r2, #8
 80087ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fb f812 	bl	8003824 <HAL_TIM_IC_CaptureCallback>
 8008800:	e005      	b.n	800880e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fa14 	bl	8008c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fa1b 	bl	8008c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00c      	beq.n	8008838 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d007      	beq.n	8008838 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f06f 0201 	mvn.w	r2, #1
 8008830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7fa ffda 	bl	80037ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800883e:	2b00      	cmp	r3, #0
 8008840:	d104      	bne.n	800884c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00c      	beq.n	8008866 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008852:	2b00      	cmp	r3, #0
 8008854:	d007      	beq.n	8008866 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800885e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fd31 	bl	80092c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00c      	beq.n	800888a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008876:	2b00      	cmp	r3, #0
 8008878:	d007      	beq.n	800888a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fd29 	bl	80092dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00c      	beq.n	80088ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80088a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f9d5 	bl	8008c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00c      	beq.n	80088d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d007      	beq.n	80088d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f06f 0220 	mvn.w	r2, #32
 80088ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fcf1 	bl	80092b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088d2:	bf00      	nop
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b086      	sub	sp, #24
 80088de:	af00      	add	r7, sp, #0
 80088e0:	60f8      	str	r0, [r7, #12]
 80088e2:	60b9      	str	r1, [r7, #8]
 80088e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e088      	b.n	8008a0a <HAL_TIM_IC_ConfigChannel+0x130>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d11b      	bne.n	800893e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008916:	f000 fa55 	bl	8008dc4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	699a      	ldr	r2, [r3, #24]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 020c 	bic.w	r2, r2, #12
 8008928:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6999      	ldr	r1, [r3, #24]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	689a      	ldr	r2, [r3, #8]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	619a      	str	r2, [r3, #24]
 800893c:	e060      	b.n	8008a00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b04      	cmp	r3, #4
 8008942:	d11c      	bne.n	800897e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008954:	f000 fad9 	bl	8008f0a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699a      	ldr	r2, [r3, #24]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008966:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6999      	ldr	r1, [r3, #24]
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	021a      	lsls	r2, r3, #8
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	619a      	str	r2, [r3, #24]
 800897c:	e040      	b.n	8008a00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2b08      	cmp	r3, #8
 8008982:	d11b      	bne.n	80089bc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008994:	f000 fb26 	bl	8008fe4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	69da      	ldr	r2, [r3, #28]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 020c 	bic.w	r2, r2, #12
 80089a6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	69d9      	ldr	r1, [r3, #28]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	61da      	str	r2, [r3, #28]
 80089ba:	e021      	b.n	8008a00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b0c      	cmp	r3, #12
 80089c0:	d11c      	bne.n	80089fc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80089d2:	f000 fb43 	bl	800905c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69da      	ldr	r2, [r3, #28]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80089e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69d9      	ldr	r1, [r3, #28]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	021a      	lsls	r2, r3, #8
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	61da      	str	r2, [r3, #28]
 80089fa:	e001      	b.n	8008a00 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d101      	bne.n	8008a30 <HAL_TIM_ConfigClockSource+0x1c>
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	e0b4      	b.n	8008b9a <HAL_TIM_ConfigClockSource+0x186>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	4b56      	ldr	r3, [pc, #344]	@ (8008ba4 <HAL_TIM_ConfigClockSource+0x190>)
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a68:	d03e      	beq.n	8008ae8 <HAL_TIM_ConfigClockSource+0xd4>
 8008a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a6e:	f200 8087 	bhi.w	8008b80 <HAL_TIM_ConfigClockSource+0x16c>
 8008a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a76:	f000 8086 	beq.w	8008b86 <HAL_TIM_ConfigClockSource+0x172>
 8008a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a7e:	d87f      	bhi.n	8008b80 <HAL_TIM_ConfigClockSource+0x16c>
 8008a80:	2b70      	cmp	r3, #112	@ 0x70
 8008a82:	d01a      	beq.n	8008aba <HAL_TIM_ConfigClockSource+0xa6>
 8008a84:	2b70      	cmp	r3, #112	@ 0x70
 8008a86:	d87b      	bhi.n	8008b80 <HAL_TIM_ConfigClockSource+0x16c>
 8008a88:	2b60      	cmp	r3, #96	@ 0x60
 8008a8a:	d050      	beq.n	8008b2e <HAL_TIM_ConfigClockSource+0x11a>
 8008a8c:	2b60      	cmp	r3, #96	@ 0x60
 8008a8e:	d877      	bhi.n	8008b80 <HAL_TIM_ConfigClockSource+0x16c>
 8008a90:	2b50      	cmp	r3, #80	@ 0x50
 8008a92:	d03c      	beq.n	8008b0e <HAL_TIM_ConfigClockSource+0xfa>
 8008a94:	2b50      	cmp	r3, #80	@ 0x50
 8008a96:	d873      	bhi.n	8008b80 <HAL_TIM_ConfigClockSource+0x16c>
 8008a98:	2b40      	cmp	r3, #64	@ 0x40
 8008a9a:	d058      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x13a>
 8008a9c:	2b40      	cmp	r3, #64	@ 0x40
 8008a9e:	d86f      	bhi.n	8008b80 <HAL_TIM_ConfigClockSource+0x16c>
 8008aa0:	2b30      	cmp	r3, #48	@ 0x30
 8008aa2:	d064      	beq.n	8008b6e <HAL_TIM_ConfigClockSource+0x15a>
 8008aa4:	2b30      	cmp	r3, #48	@ 0x30
 8008aa6:	d86b      	bhi.n	8008b80 <HAL_TIM_ConfigClockSource+0x16c>
 8008aa8:	2b20      	cmp	r3, #32
 8008aaa:	d060      	beq.n	8008b6e <HAL_TIM_ConfigClockSource+0x15a>
 8008aac:	2b20      	cmp	r3, #32
 8008aae:	d867      	bhi.n	8008b80 <HAL_TIM_ConfigClockSource+0x16c>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d05c      	beq.n	8008b6e <HAL_TIM_ConfigClockSource+0x15a>
 8008ab4:	2b10      	cmp	r3, #16
 8008ab6:	d05a      	beq.n	8008b6e <HAL_TIM_ConfigClockSource+0x15a>
 8008ab8:	e062      	b.n	8008b80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008aca:	f000 fb1f 	bl	800910c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008adc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	609a      	str	r2, [r3, #8]
      break;
 8008ae6:	e04f      	b.n	8008b88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008af8:	f000 fb08 	bl	800910c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b0a:	609a      	str	r2, [r3, #8]
      break;
 8008b0c:	e03c      	b.n	8008b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	f000 f9c6 	bl	8008eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2150      	movs	r1, #80	@ 0x50
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fad5 	bl	80090d6 <TIM_ITRx_SetConfig>
      break;
 8008b2c:	e02c      	b.n	8008b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f000 fa22 	bl	8008f84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2160      	movs	r1, #96	@ 0x60
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fac5 	bl	80090d6 <TIM_ITRx_SetConfig>
      break;
 8008b4c:	e01c      	b.n	8008b88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f000 f9a6 	bl	8008eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2140      	movs	r1, #64	@ 0x40
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 fab5 	bl	80090d6 <TIM_ITRx_SetConfig>
      break;
 8008b6c:	e00c      	b.n	8008b88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4619      	mov	r1, r3
 8008b78:	4610      	mov	r0, r2
 8008b7a:	f000 faac 	bl	80090d6 <TIM_ITRx_SetConfig>
      break;
 8008b7e:	e003      	b.n	8008b88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	73fb      	strb	r3, [r7, #15]
      break;
 8008b84:	e000      	b.n	8008b88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	fffeff88 	.word	0xfffeff88

08008ba8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b0c      	cmp	r3, #12
 8008bba:	d831      	bhi.n	8008c20 <HAL_TIM_ReadCapturedValue+0x78>
 8008bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8008bc4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc2:	bf00      	nop
 8008bc4:	08008bf9 	.word	0x08008bf9
 8008bc8:	08008c21 	.word	0x08008c21
 8008bcc:	08008c21 	.word	0x08008c21
 8008bd0:	08008c21 	.word	0x08008c21
 8008bd4:	08008c03 	.word	0x08008c03
 8008bd8:	08008c21 	.word	0x08008c21
 8008bdc:	08008c21 	.word	0x08008c21
 8008be0:	08008c21 	.word	0x08008c21
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	08008c21 	.word	0x08008c21
 8008bec:	08008c21 	.word	0x08008c21
 8008bf0:	08008c21 	.word	0x08008c21
 8008bf4:	08008c17 	.word	0x08008c17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bfe:	60fb      	str	r3, [r7, #12]

      break;
 8008c00:	e00f      	b.n	8008c22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c08:	60fb      	str	r3, [r7, #12]

      break;
 8008c0a:	e00a      	b.n	8008c22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c12:	60fb      	str	r3, [r7, #12]

      break;
 8008c14:	e005      	b.n	8008c22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c1c:	60fb      	str	r3, [r7, #12]

      break;
 8008c1e:	e000      	b.n	8008c22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008c20:	bf00      	nop
  }

  return tmpreg;
 8008c22:	68fb      	ldr	r3, [r7, #12]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a46      	ldr	r2, [pc, #280]	@ (8008d98 <TIM_Base_SetConfig+0x12c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d013      	beq.n	8008cac <TIM_Base_SetConfig+0x40>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c8a:	d00f      	beq.n	8008cac <TIM_Base_SetConfig+0x40>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a43      	ldr	r2, [pc, #268]	@ (8008d9c <TIM_Base_SetConfig+0x130>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d00b      	beq.n	8008cac <TIM_Base_SetConfig+0x40>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a42      	ldr	r2, [pc, #264]	@ (8008da0 <TIM_Base_SetConfig+0x134>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d007      	beq.n	8008cac <TIM_Base_SetConfig+0x40>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a41      	ldr	r2, [pc, #260]	@ (8008da4 <TIM_Base_SetConfig+0x138>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d003      	beq.n	8008cac <TIM_Base_SetConfig+0x40>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a40      	ldr	r2, [pc, #256]	@ (8008da8 <TIM_Base_SetConfig+0x13c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d108      	bne.n	8008cbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a35      	ldr	r2, [pc, #212]	@ (8008d98 <TIM_Base_SetConfig+0x12c>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d02b      	beq.n	8008d1e <TIM_Base_SetConfig+0xb2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ccc:	d027      	beq.n	8008d1e <TIM_Base_SetConfig+0xb2>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a32      	ldr	r2, [pc, #200]	@ (8008d9c <TIM_Base_SetConfig+0x130>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d023      	beq.n	8008d1e <TIM_Base_SetConfig+0xb2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a31      	ldr	r2, [pc, #196]	@ (8008da0 <TIM_Base_SetConfig+0x134>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d01f      	beq.n	8008d1e <TIM_Base_SetConfig+0xb2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a30      	ldr	r2, [pc, #192]	@ (8008da4 <TIM_Base_SetConfig+0x138>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d01b      	beq.n	8008d1e <TIM_Base_SetConfig+0xb2>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a2f      	ldr	r2, [pc, #188]	@ (8008da8 <TIM_Base_SetConfig+0x13c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d017      	beq.n	8008d1e <TIM_Base_SetConfig+0xb2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a2e      	ldr	r2, [pc, #184]	@ (8008dac <TIM_Base_SetConfig+0x140>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d013      	beq.n	8008d1e <TIM_Base_SetConfig+0xb2>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8008db0 <TIM_Base_SetConfig+0x144>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d00f      	beq.n	8008d1e <TIM_Base_SetConfig+0xb2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a2c      	ldr	r2, [pc, #176]	@ (8008db4 <TIM_Base_SetConfig+0x148>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d00b      	beq.n	8008d1e <TIM_Base_SetConfig+0xb2>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a2b      	ldr	r2, [pc, #172]	@ (8008db8 <TIM_Base_SetConfig+0x14c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d007      	beq.n	8008d1e <TIM_Base_SetConfig+0xb2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a2a      	ldr	r2, [pc, #168]	@ (8008dbc <TIM_Base_SetConfig+0x150>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d003      	beq.n	8008d1e <TIM_Base_SetConfig+0xb2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a29      	ldr	r2, [pc, #164]	@ (8008dc0 <TIM_Base_SetConfig+0x154>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d108      	bne.n	8008d30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	689a      	ldr	r2, [r3, #8]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a10      	ldr	r2, [pc, #64]	@ (8008d98 <TIM_Base_SetConfig+0x12c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d003      	beq.n	8008d64 <TIM_Base_SetConfig+0xf8>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a12      	ldr	r2, [pc, #72]	@ (8008da8 <TIM_Base_SetConfig+0x13c>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d103      	bne.n	8008d6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d105      	bne.n	8008d8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	f023 0201 	bic.w	r2, r3, #1
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	611a      	str	r2, [r3, #16]
  }
}
 8008d8a:	bf00      	nop
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	40010000 	.word	0x40010000
 8008d9c:	40000400 	.word	0x40000400
 8008da0:	40000800 	.word	0x40000800
 8008da4:	40000c00 	.word	0x40000c00
 8008da8:	40010400 	.word	0x40010400
 8008dac:	40014000 	.word	0x40014000
 8008db0:	40014400 	.word	0x40014400
 8008db4:	40014800 	.word	0x40014800
 8008db8:	40001800 	.word	0x40001800
 8008dbc:	40001c00 	.word	0x40001c00
 8008dc0:	40002000 	.word	0x40002000

08008dc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	f023 0201 	bic.w	r2, r3, #1
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4a28      	ldr	r2, [pc, #160]	@ (8008e90 <TIM_TI1_SetConfig+0xcc>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d01b      	beq.n	8008e2a <TIM_TI1_SetConfig+0x66>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008df8:	d017      	beq.n	8008e2a <TIM_TI1_SetConfig+0x66>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4a25      	ldr	r2, [pc, #148]	@ (8008e94 <TIM_TI1_SetConfig+0xd0>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d013      	beq.n	8008e2a <TIM_TI1_SetConfig+0x66>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4a24      	ldr	r2, [pc, #144]	@ (8008e98 <TIM_TI1_SetConfig+0xd4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d00f      	beq.n	8008e2a <TIM_TI1_SetConfig+0x66>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4a23      	ldr	r2, [pc, #140]	@ (8008e9c <TIM_TI1_SetConfig+0xd8>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d00b      	beq.n	8008e2a <TIM_TI1_SetConfig+0x66>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4a22      	ldr	r2, [pc, #136]	@ (8008ea0 <TIM_TI1_SetConfig+0xdc>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d007      	beq.n	8008e2a <TIM_TI1_SetConfig+0x66>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	4a21      	ldr	r2, [pc, #132]	@ (8008ea4 <TIM_TI1_SetConfig+0xe0>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d003      	beq.n	8008e2a <TIM_TI1_SetConfig+0x66>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4a20      	ldr	r2, [pc, #128]	@ (8008ea8 <TIM_TI1_SetConfig+0xe4>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d101      	bne.n	8008e2e <TIM_TI1_SetConfig+0x6a>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e000      	b.n	8008e30 <TIM_TI1_SetConfig+0x6c>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d008      	beq.n	8008e46 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f023 0303 	bic.w	r3, r3, #3
 8008e3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	617b      	str	r3, [r7, #20]
 8008e44:	e003      	b.n	8008e4e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f043 0301 	orr.w	r3, r3, #1
 8008e4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	697a      	ldr	r2, [r7, #20]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f023 030a 	bic.w	r3, r3, #10
 8008e68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f003 030a 	and.w	r3, r3, #10
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	693a      	ldr	r2, [r7, #16]
 8008e80:	621a      	str	r2, [r3, #32]
}
 8008e82:	bf00      	nop
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	40010000 	.word	0x40010000
 8008e94:	40000400 	.word	0x40000400
 8008e98:	40000800 	.word	0x40000800
 8008e9c:	40000c00 	.word	0x40000c00
 8008ea0:	40010400 	.word	0x40010400
 8008ea4:	40014000 	.word	0x40014000
 8008ea8:	40001800 	.word	0x40001800

08008eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	f023 0201 	bic.w	r2, r3, #1
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f023 030a 	bic.w	r3, r3, #10
 8008ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	621a      	str	r2, [r3, #32]
}
 8008efe:	bf00      	nop
 8008f00:	371c      	adds	r7, #28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b087      	sub	sp, #28
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	60f8      	str	r0, [r7, #12]
 8008f12:	60b9      	str	r1, [r7, #8]
 8008f14:	607a      	str	r2, [r7, #4]
 8008f16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a1b      	ldr	r3, [r3, #32]
 8008f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	f023 0210 	bic.w	r2, r3, #16
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	021b      	lsls	r3, r3, #8
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	031b      	lsls	r3, r3, #12
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	011b      	lsls	r3, r3, #4
 8008f62:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	621a      	str	r2, [r3, #32]
}
 8008f78:	bf00      	nop
 8008f7a:	371c      	adds	r7, #28
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b087      	sub	sp, #28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	f023 0210 	bic.w	r2, r3, #16
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	031b      	lsls	r3, r3, #12
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	011b      	lsls	r3, r3, #4
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	621a      	str	r2, [r3, #32]
}
 8008fd8:	bf00      	nop
 8008fda:	371c      	adds	r7, #28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b087      	sub	sp, #28
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f023 0303 	bic.w	r3, r3, #3
 8009010:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4313      	orrs	r3, r2
 8009018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009020:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	011b      	lsls	r3, r3, #4
 8009026:	b2db      	uxtb	r3, r3
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	4313      	orrs	r3, r2
 800902c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009034:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	021b      	lsls	r3, r3, #8
 800903a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4313      	orrs	r3, r2
 8009042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	621a      	str	r2, [r3, #32]
}
 8009050:	bf00      	nop
 8009052:	371c      	adds	r7, #28
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
 8009068:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009088:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	021b      	lsls	r3, r3, #8
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	4313      	orrs	r3, r2
 8009092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800909a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	031b      	lsls	r3, r3, #12
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80090ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	031b      	lsls	r3, r3, #12
 80090b4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	621a      	str	r2, [r3, #32]
}
 80090ca:	bf00      	nop
 80090cc:	371c      	adds	r7, #28
 80090ce:	46bd      	mov	sp, r7
 80090d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d4:	4770      	bx	lr

080090d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090d6:	b480      	push	{r7}
 80090d8:	b085      	sub	sp, #20
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	f043 0307 	orr.w	r3, r3, #7
 80090f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	609a      	str	r2, [r3, #8]
}
 8009100:	bf00      	nop
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	021a      	lsls	r2, r3, #8
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	431a      	orrs	r2, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	4313      	orrs	r3, r2
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	609a      	str	r2, [r3, #8]
}
 8009140:	bf00      	nop
 8009142:	371c      	adds	r7, #28
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800914c:	b480      	push	{r7}
 800914e:	b087      	sub	sp, #28
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	f003 031f 	and.w	r3, r3, #31
 800915e:	2201      	movs	r2, #1
 8009160:	fa02 f303 	lsl.w	r3, r2, r3
 8009164:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6a1a      	ldr	r2, [r3, #32]
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	43db      	mvns	r3, r3
 800916e:	401a      	ands	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6a1a      	ldr	r2, [r3, #32]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	f003 031f 	and.w	r3, r3, #31
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	fa01 f303 	lsl.w	r3, r1, r3
 8009184:	431a      	orrs	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	621a      	str	r2, [r3, #32]
}
 800918a:	bf00      	nop
 800918c:	371c      	adds	r7, #28
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
	...

08009198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d101      	bne.n	80091b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e06d      	b.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a30      	ldr	r2, [pc, #192]	@ (8009298 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d004      	beq.n	80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a2f      	ldr	r2, [pc, #188]	@ (800929c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d108      	bne.n	80091f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80091ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4313      	orrs	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a20      	ldr	r2, [pc, #128]	@ (8009298 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d022      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009222:	d01d      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a1d      	ldr	r2, [pc, #116]	@ (80092a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d018      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a1c      	ldr	r2, [pc, #112]	@ (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d013      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a1a      	ldr	r2, [pc, #104]	@ (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00e      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a15      	ldr	r2, [pc, #84]	@ (800929c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d009      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a16      	ldr	r2, [pc, #88]	@ (80092ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d004      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a15      	ldr	r2, [pc, #84]	@ (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d10c      	bne.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009266:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	4313      	orrs	r3, r2
 8009270:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	40010000 	.word	0x40010000
 800929c:	40010400 	.word	0x40010400
 80092a0:	40000400 	.word	0x40000400
 80092a4:	40000800 	.word	0x40000800
 80092a8:	40000c00 	.word	0x40000c00
 80092ac:	40014000 	.word	0x40014000
 80092b0:	40001800 	.word	0x40001800

080092b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e040      	b.n	8009384 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7fa f8d8 	bl	80034c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2224      	movs	r2, #36	@ 0x24
 800931c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 0201 	bic.w	r2, r2, #1
 800932c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fe24 	bl	8009f84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fbbd 	bl	8009abc <UART_SetConfig>
 8009342:	4603      	mov	r3, r0
 8009344:	2b01      	cmp	r3, #1
 8009346:	d101      	bne.n	800934c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	e01b      	b.n	8009384 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800935a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800936a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f042 0201 	orr.w	r2, r2, #1
 800937a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fea3 	bl	800a0c8 <UART_CheckIdleState>
 8009382:	4603      	mov	r3, r0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08a      	sub	sp, #40	@ 0x28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	4613      	mov	r3, r2
 8009398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800939e:	2b20      	cmp	r3, #32
 80093a0:	d165      	bne.n	800946e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <HAL_UART_Transmit_DMA+0x22>
 80093a8:	88fb      	ldrh	r3, [r7, #6]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e05e      	b.n	8009470 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	88fa      	ldrh	r2, [r7, #6]
 80093bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	88fa      	ldrh	r2, [r7, #6]
 80093c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2221      	movs	r2, #33	@ 0x21
 80093d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d027      	beq.n	800942e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093e2:	4a25      	ldr	r2, [pc, #148]	@ (8009478 <HAL_UART_Transmit_DMA+0xec>)
 80093e4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ea:	4a24      	ldr	r2, [pc, #144]	@ (800947c <HAL_UART_Transmit_DMA+0xf0>)
 80093ec:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093f2:	4a23      	ldr	r2, [pc, #140]	@ (8009480 <HAL_UART_Transmit_DMA+0xf4>)
 80093f4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093fa:	2200      	movs	r2, #0
 80093fc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009406:	4619      	mov	r1, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3328      	adds	r3, #40	@ 0x28
 800940e:	461a      	mov	r2, r3
 8009410:	88fb      	ldrh	r3, [r7, #6]
 8009412:	f7fb fa57 	bl	80048c4 <HAL_DMA_Start_IT>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d008      	beq.n	800942e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2210      	movs	r2, #16
 8009420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2220      	movs	r2, #32
 8009428:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e020      	b.n	8009470 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2240      	movs	r2, #64	@ 0x40
 8009434:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3308      	adds	r3, #8
 800943c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	e853 3f00 	ldrex	r3, [r3]
 8009444:	613b      	str	r3, [r7, #16]
   return(result);
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800944c:	627b      	str	r3, [r7, #36]	@ 0x24
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3308      	adds	r3, #8
 8009454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009456:	623a      	str	r2, [r7, #32]
 8009458:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945a:	69f9      	ldr	r1, [r7, #28]
 800945c:	6a3a      	ldr	r2, [r7, #32]
 800945e:	e841 2300 	strex	r3, r2, [r1]
 8009462:	61bb      	str	r3, [r7, #24]
   return(result);
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1e5      	bne.n	8009436 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800946a:	2300      	movs	r3, #0
 800946c:	e000      	b.n	8009470 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800946e:	2302      	movs	r3, #2
  }
}
 8009470:	4618      	mov	r0, r3
 8009472:	3728      	adds	r7, #40	@ 0x28
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	0800a407 	.word	0x0800a407
 800947c:	0800a49d 	.word	0x0800a49d
 8009480:	0800a4b9 	.word	0x0800a4b9

08009484 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b0ba      	sub	sp, #232	@ 0xe8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80094aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80094ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80094b2:	4013      	ands	r3, r2
 80094b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80094b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d115      	bne.n	80094ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80094c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094c4:	f003 0320 	and.w	r3, r3, #32
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00f      	beq.n	80094ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80094cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094d0:	f003 0320 	and.w	r3, r3, #32
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d009      	beq.n	80094ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 82ac 	beq.w	8009a3a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4798      	blx	r3
      }
      return;
 80094ea:	e2a6      	b.n	8009a3a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 8117 	beq.w	8009724 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80094f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d106      	bne.n	8009510 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009502:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009506:	4b85      	ldr	r3, [pc, #532]	@ (800971c <HAL_UART_IRQHandler+0x298>)
 8009508:	4013      	ands	r3, r2
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 810a 	beq.w	8009724 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	d011      	beq.n	8009540 <HAL_UART_IRQHandler+0xbc>
 800951c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00b      	beq.n	8009540 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2201      	movs	r2, #1
 800952e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009536:	f043 0201 	orr.w	r2, r3, #1
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009544:	f003 0302 	and.w	r3, r3, #2
 8009548:	2b00      	cmp	r3, #0
 800954a:	d011      	beq.n	8009570 <HAL_UART_IRQHandler+0xec>
 800954c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00b      	beq.n	8009570 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2202      	movs	r2, #2
 800955e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009566:	f043 0204 	orr.w	r2, r3, #4
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b00      	cmp	r3, #0
 800957a:	d011      	beq.n	80095a0 <HAL_UART_IRQHandler+0x11c>
 800957c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00b      	beq.n	80095a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2204      	movs	r2, #4
 800958e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009596:	f043 0202 	orr.w	r2, r3, #2
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095a4:	f003 0308 	and.w	r3, r3, #8
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d017      	beq.n	80095dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80095ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095b0:	f003 0320 	and.w	r3, r3, #32
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d105      	bne.n	80095c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80095b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00b      	beq.n	80095dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2208      	movs	r2, #8
 80095ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095d2:	f043 0208 	orr.w	r2, r3, #8
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80095dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d012      	beq.n	800960e <HAL_UART_IRQHandler+0x18a>
 80095e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00c      	beq.n	800960e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009604:	f043 0220 	orr.w	r2, r3, #32
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 8212 	beq.w	8009a3e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800961a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800961e:	f003 0320 	and.w	r3, r3, #32
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00d      	beq.n	8009642 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800962a:	f003 0320 	and.w	r3, r3, #32
 800962e:	2b00      	cmp	r3, #0
 8009630:	d007      	beq.n	8009642 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009648:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009656:	2b40      	cmp	r3, #64	@ 0x40
 8009658:	d005      	beq.n	8009666 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800965a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800965e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009662:	2b00      	cmp	r3, #0
 8009664:	d04f      	beq.n	8009706 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fe69 	bl	800a33e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009676:	2b40      	cmp	r3, #64	@ 0x40
 8009678:	d141      	bne.n	80096fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3308      	adds	r3, #8
 8009680:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009684:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009690:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009698:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3308      	adds	r3, #8
 80096a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80096a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80096aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80096b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80096b6:	e841 2300 	strex	r3, r2, [r1]
 80096ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80096be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1d9      	bne.n	800967a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d013      	beq.n	80096f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096d2:	4a13      	ldr	r2, [pc, #76]	@ (8009720 <HAL_UART_IRQHandler+0x29c>)
 80096d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fb f9c2 	bl	8004a64 <HAL_DMA_Abort_IT>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d017      	beq.n	8009716 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80096f0:	4610      	mov	r0, r2
 80096f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f4:	e00f      	b.n	8009716 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f9c0 	bl	8009a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096fc:	e00b      	b.n	8009716 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f9bc 	bl	8009a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009704:	e007      	b.n	8009716 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f9b8 	bl	8009a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009714:	e193      	b.n	8009a3e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009716:	bf00      	nop
    return;
 8009718:	e191      	b.n	8009a3e <HAL_UART_IRQHandler+0x5ba>
 800971a:	bf00      	nop
 800971c:	04000120 	.word	0x04000120
 8009720:	0800a537 	.word	0x0800a537

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009728:	2b01      	cmp	r3, #1
 800972a:	f040 814c 	bne.w	80099c6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800972e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009732:	f003 0310 	and.w	r3, r3, #16
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 8145 	beq.w	80099c6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800973c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009740:	f003 0310 	and.w	r3, r3, #16
 8009744:	2b00      	cmp	r3, #0
 8009746:	f000 813e 	beq.w	80099c6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2210      	movs	r2, #16
 8009750:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800975c:	2b40      	cmp	r3, #64	@ 0x40
 800975e:	f040 80b6 	bne.w	80098ce <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800976e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 8165 	beq.w	8009a42 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800977e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009782:	429a      	cmp	r2, r3
 8009784:	f080 815d 	bcs.w	8009a42 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800978e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800979c:	f000 8086 	beq.w	80098ac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80097b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80097b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80097ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80097ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80097d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80097e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1da      	bne.n	80097a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3308      	adds	r3, #8
 80097f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097f4:	e853 3f00 	ldrex	r3, [r3]
 80097f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80097fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097fc:	f023 0301 	bic.w	r3, r3, #1
 8009800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3308      	adds	r3, #8
 800980a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800980e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009812:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009816:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009820:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e1      	bne.n	80097ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3308      	adds	r3, #8
 800982c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009830:	e853 3f00 	ldrex	r3, [r3]
 8009834:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009838:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800983c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3308      	adds	r3, #8
 8009846:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800984a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800984c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009850:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009852:	e841 2300 	strex	r3, r2, [r1]
 8009856:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e3      	bne.n	8009826 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2220      	movs	r2, #32
 8009862:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009874:	e853 3f00 	ldrex	r3, [r3]
 8009878:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800987a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800987c:	f023 0310 	bic.w	r3, r3, #16
 8009880:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	461a      	mov	r2, r3
 800988a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800988e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009890:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009892:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009894:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009896:	e841 2300 	strex	r3, r2, [r1]
 800989a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800989c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1e4      	bne.n	800986c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fb f86c 	bl	8004984 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2202      	movs	r2, #2
 80098b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80098be:	b29b      	uxth	r3, r3
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f8e2 	bl	8009a90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098cc:	e0b9      	b.n	8009a42 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80098da:	b29b      	uxth	r3, r3
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 80ab 	beq.w	8009a46 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80098f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 80a6 	beq.w	8009a46 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009902:	e853 3f00 	ldrex	r3, [r3]
 8009906:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800990a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800990e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	461a      	mov	r2, r3
 8009918:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800991c:	647b      	str	r3, [r7, #68]	@ 0x44
 800991e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009920:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009924:	e841 2300 	strex	r3, r2, [r1]
 8009928:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800992a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e4      	bne.n	80098fa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3308      	adds	r3, #8
 8009936:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993a:	e853 3f00 	ldrex	r3, [r3]
 800993e:	623b      	str	r3, [r7, #32]
   return(result);
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	f023 0301 	bic.w	r3, r3, #1
 8009946:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3308      	adds	r3, #8
 8009950:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009954:	633a      	str	r2, [r7, #48]	@ 0x30
 8009956:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800995a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e3      	bne.n	8009930 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2220      	movs	r2, #32
 800996c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	60fb      	str	r3, [r7, #12]
   return(result);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f023 0310 	bic.w	r3, r3, #16
 8009990:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800999e:	61fb      	str	r3, [r7, #28]
 80099a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a2:	69b9      	ldr	r1, [r7, #24]
 80099a4:	69fa      	ldr	r2, [r7, #28]
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	617b      	str	r3, [r7, #20]
   return(result);
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1e4      	bne.n	800997c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2202      	movs	r2, #2
 80099b6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f866 	bl	8009a90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80099c4:	e03f      	b.n	8009a46 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80099c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00e      	beq.n	80099f0 <HAL_UART_IRQHandler+0x56c>
 80099d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d008      	beq.n	80099f0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80099e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f85d 	bl	8009aa8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099ee:	e02d      	b.n	8009a4c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80099f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00e      	beq.n	8009a1a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80099fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d008      	beq.n	8009a1a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d01c      	beq.n	8009a4a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	4798      	blx	r3
    }
    return;
 8009a18:	e017      	b.n	8009a4a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d012      	beq.n	8009a4c <HAL_UART_IRQHandler+0x5c8>
 8009a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00c      	beq.n	8009a4c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fd95 	bl	800a562 <UART_EndTransmit_IT>
    return;
 8009a38:	e008      	b.n	8009a4c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009a3a:	bf00      	nop
 8009a3c:	e006      	b.n	8009a4c <HAL_UART_IRQHandler+0x5c8>
    return;
 8009a3e:	bf00      	nop
 8009a40:	e004      	b.n	8009a4c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009a42:	bf00      	nop
 8009a44:	e002      	b.n	8009a4c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009a46:	bf00      	nop
 8009a48:	e000      	b.n	8009a4c <HAL_UART_IRQHandler+0x5c8>
    return;
 8009a4a:	bf00      	nop
  }

}
 8009a4c:	37e8      	adds	r7, #232	@ 0xe8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop

08009a54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	689a      	ldr	r2, [r3, #8]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	431a      	orrs	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	4ba6      	ldr	r3, [pc, #664]	@ (8009d80 <UART_SetConfig+0x2c4>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	6812      	ldr	r2, [r2, #0]
 8009aee:	6979      	ldr	r1, [r7, #20]
 8009af0:	430b      	orrs	r3, r1
 8009af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68da      	ldr	r2, [r3, #12]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a94      	ldr	r2, [pc, #592]	@ (8009d84 <UART_SetConfig+0x2c8>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d120      	bne.n	8009b7a <UART_SetConfig+0xbe>
 8009b38:	4b93      	ldr	r3, [pc, #588]	@ (8009d88 <UART_SetConfig+0x2cc>)
 8009b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d816      	bhi.n	8009b74 <UART_SetConfig+0xb8>
 8009b46:	a201      	add	r2, pc, #4	@ (adr r2, 8009b4c <UART_SetConfig+0x90>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009b5d 	.word	0x08009b5d
 8009b50:	08009b69 	.word	0x08009b69
 8009b54:	08009b63 	.word	0x08009b63
 8009b58:	08009b6f 	.word	0x08009b6f
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	77fb      	strb	r3, [r7, #31]
 8009b60:	e150      	b.n	8009e04 <UART_SetConfig+0x348>
 8009b62:	2302      	movs	r3, #2
 8009b64:	77fb      	strb	r3, [r7, #31]
 8009b66:	e14d      	b.n	8009e04 <UART_SetConfig+0x348>
 8009b68:	2304      	movs	r3, #4
 8009b6a:	77fb      	strb	r3, [r7, #31]
 8009b6c:	e14a      	b.n	8009e04 <UART_SetConfig+0x348>
 8009b6e:	2308      	movs	r3, #8
 8009b70:	77fb      	strb	r3, [r7, #31]
 8009b72:	e147      	b.n	8009e04 <UART_SetConfig+0x348>
 8009b74:	2310      	movs	r3, #16
 8009b76:	77fb      	strb	r3, [r7, #31]
 8009b78:	e144      	b.n	8009e04 <UART_SetConfig+0x348>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a83      	ldr	r2, [pc, #524]	@ (8009d8c <UART_SetConfig+0x2d0>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d132      	bne.n	8009bea <UART_SetConfig+0x12e>
 8009b84:	4b80      	ldr	r3, [pc, #512]	@ (8009d88 <UART_SetConfig+0x2cc>)
 8009b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b8a:	f003 030c 	and.w	r3, r3, #12
 8009b8e:	2b0c      	cmp	r3, #12
 8009b90:	d828      	bhi.n	8009be4 <UART_SetConfig+0x128>
 8009b92:	a201      	add	r2, pc, #4	@ (adr r2, 8009b98 <UART_SetConfig+0xdc>)
 8009b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b98:	08009bcd 	.word	0x08009bcd
 8009b9c:	08009be5 	.word	0x08009be5
 8009ba0:	08009be5 	.word	0x08009be5
 8009ba4:	08009be5 	.word	0x08009be5
 8009ba8:	08009bd9 	.word	0x08009bd9
 8009bac:	08009be5 	.word	0x08009be5
 8009bb0:	08009be5 	.word	0x08009be5
 8009bb4:	08009be5 	.word	0x08009be5
 8009bb8:	08009bd3 	.word	0x08009bd3
 8009bbc:	08009be5 	.word	0x08009be5
 8009bc0:	08009be5 	.word	0x08009be5
 8009bc4:	08009be5 	.word	0x08009be5
 8009bc8:	08009bdf 	.word	0x08009bdf
 8009bcc:	2300      	movs	r3, #0
 8009bce:	77fb      	strb	r3, [r7, #31]
 8009bd0:	e118      	b.n	8009e04 <UART_SetConfig+0x348>
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	77fb      	strb	r3, [r7, #31]
 8009bd6:	e115      	b.n	8009e04 <UART_SetConfig+0x348>
 8009bd8:	2304      	movs	r3, #4
 8009bda:	77fb      	strb	r3, [r7, #31]
 8009bdc:	e112      	b.n	8009e04 <UART_SetConfig+0x348>
 8009bde:	2308      	movs	r3, #8
 8009be0:	77fb      	strb	r3, [r7, #31]
 8009be2:	e10f      	b.n	8009e04 <UART_SetConfig+0x348>
 8009be4:	2310      	movs	r3, #16
 8009be6:	77fb      	strb	r3, [r7, #31]
 8009be8:	e10c      	b.n	8009e04 <UART_SetConfig+0x348>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a68      	ldr	r2, [pc, #416]	@ (8009d90 <UART_SetConfig+0x2d4>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d120      	bne.n	8009c36 <UART_SetConfig+0x17a>
 8009bf4:	4b64      	ldr	r3, [pc, #400]	@ (8009d88 <UART_SetConfig+0x2cc>)
 8009bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bfa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009bfe:	2b30      	cmp	r3, #48	@ 0x30
 8009c00:	d013      	beq.n	8009c2a <UART_SetConfig+0x16e>
 8009c02:	2b30      	cmp	r3, #48	@ 0x30
 8009c04:	d814      	bhi.n	8009c30 <UART_SetConfig+0x174>
 8009c06:	2b20      	cmp	r3, #32
 8009c08:	d009      	beq.n	8009c1e <UART_SetConfig+0x162>
 8009c0a:	2b20      	cmp	r3, #32
 8009c0c:	d810      	bhi.n	8009c30 <UART_SetConfig+0x174>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d002      	beq.n	8009c18 <UART_SetConfig+0x15c>
 8009c12:	2b10      	cmp	r3, #16
 8009c14:	d006      	beq.n	8009c24 <UART_SetConfig+0x168>
 8009c16:	e00b      	b.n	8009c30 <UART_SetConfig+0x174>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	77fb      	strb	r3, [r7, #31]
 8009c1c:	e0f2      	b.n	8009e04 <UART_SetConfig+0x348>
 8009c1e:	2302      	movs	r3, #2
 8009c20:	77fb      	strb	r3, [r7, #31]
 8009c22:	e0ef      	b.n	8009e04 <UART_SetConfig+0x348>
 8009c24:	2304      	movs	r3, #4
 8009c26:	77fb      	strb	r3, [r7, #31]
 8009c28:	e0ec      	b.n	8009e04 <UART_SetConfig+0x348>
 8009c2a:	2308      	movs	r3, #8
 8009c2c:	77fb      	strb	r3, [r7, #31]
 8009c2e:	e0e9      	b.n	8009e04 <UART_SetConfig+0x348>
 8009c30:	2310      	movs	r3, #16
 8009c32:	77fb      	strb	r3, [r7, #31]
 8009c34:	e0e6      	b.n	8009e04 <UART_SetConfig+0x348>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a56      	ldr	r2, [pc, #344]	@ (8009d94 <UART_SetConfig+0x2d8>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d120      	bne.n	8009c82 <UART_SetConfig+0x1c6>
 8009c40:	4b51      	ldr	r3, [pc, #324]	@ (8009d88 <UART_SetConfig+0x2cc>)
 8009c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009c4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c4c:	d013      	beq.n	8009c76 <UART_SetConfig+0x1ba>
 8009c4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009c50:	d814      	bhi.n	8009c7c <UART_SetConfig+0x1c0>
 8009c52:	2b80      	cmp	r3, #128	@ 0x80
 8009c54:	d009      	beq.n	8009c6a <UART_SetConfig+0x1ae>
 8009c56:	2b80      	cmp	r3, #128	@ 0x80
 8009c58:	d810      	bhi.n	8009c7c <UART_SetConfig+0x1c0>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <UART_SetConfig+0x1a8>
 8009c5e:	2b40      	cmp	r3, #64	@ 0x40
 8009c60:	d006      	beq.n	8009c70 <UART_SetConfig+0x1b4>
 8009c62:	e00b      	b.n	8009c7c <UART_SetConfig+0x1c0>
 8009c64:	2300      	movs	r3, #0
 8009c66:	77fb      	strb	r3, [r7, #31]
 8009c68:	e0cc      	b.n	8009e04 <UART_SetConfig+0x348>
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	77fb      	strb	r3, [r7, #31]
 8009c6e:	e0c9      	b.n	8009e04 <UART_SetConfig+0x348>
 8009c70:	2304      	movs	r3, #4
 8009c72:	77fb      	strb	r3, [r7, #31]
 8009c74:	e0c6      	b.n	8009e04 <UART_SetConfig+0x348>
 8009c76:	2308      	movs	r3, #8
 8009c78:	77fb      	strb	r3, [r7, #31]
 8009c7a:	e0c3      	b.n	8009e04 <UART_SetConfig+0x348>
 8009c7c:	2310      	movs	r3, #16
 8009c7e:	77fb      	strb	r3, [r7, #31]
 8009c80:	e0c0      	b.n	8009e04 <UART_SetConfig+0x348>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a44      	ldr	r2, [pc, #272]	@ (8009d98 <UART_SetConfig+0x2dc>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d125      	bne.n	8009cd8 <UART_SetConfig+0x21c>
 8009c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8009d88 <UART_SetConfig+0x2cc>)
 8009c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c9a:	d017      	beq.n	8009ccc <UART_SetConfig+0x210>
 8009c9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ca0:	d817      	bhi.n	8009cd2 <UART_SetConfig+0x216>
 8009ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ca6:	d00b      	beq.n	8009cc0 <UART_SetConfig+0x204>
 8009ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cac:	d811      	bhi.n	8009cd2 <UART_SetConfig+0x216>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <UART_SetConfig+0x1fe>
 8009cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cb6:	d006      	beq.n	8009cc6 <UART_SetConfig+0x20a>
 8009cb8:	e00b      	b.n	8009cd2 <UART_SetConfig+0x216>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	77fb      	strb	r3, [r7, #31]
 8009cbe:	e0a1      	b.n	8009e04 <UART_SetConfig+0x348>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	77fb      	strb	r3, [r7, #31]
 8009cc4:	e09e      	b.n	8009e04 <UART_SetConfig+0x348>
 8009cc6:	2304      	movs	r3, #4
 8009cc8:	77fb      	strb	r3, [r7, #31]
 8009cca:	e09b      	b.n	8009e04 <UART_SetConfig+0x348>
 8009ccc:	2308      	movs	r3, #8
 8009cce:	77fb      	strb	r3, [r7, #31]
 8009cd0:	e098      	b.n	8009e04 <UART_SetConfig+0x348>
 8009cd2:	2310      	movs	r3, #16
 8009cd4:	77fb      	strb	r3, [r7, #31]
 8009cd6:	e095      	b.n	8009e04 <UART_SetConfig+0x348>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a2f      	ldr	r2, [pc, #188]	@ (8009d9c <UART_SetConfig+0x2e0>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d125      	bne.n	8009d2e <UART_SetConfig+0x272>
 8009ce2:	4b29      	ldr	r3, [pc, #164]	@ (8009d88 <UART_SetConfig+0x2cc>)
 8009ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ce8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009cec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cf0:	d017      	beq.n	8009d22 <UART_SetConfig+0x266>
 8009cf2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009cf6:	d817      	bhi.n	8009d28 <UART_SetConfig+0x26c>
 8009cf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cfc:	d00b      	beq.n	8009d16 <UART_SetConfig+0x25a>
 8009cfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d02:	d811      	bhi.n	8009d28 <UART_SetConfig+0x26c>
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d003      	beq.n	8009d10 <UART_SetConfig+0x254>
 8009d08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d0c:	d006      	beq.n	8009d1c <UART_SetConfig+0x260>
 8009d0e:	e00b      	b.n	8009d28 <UART_SetConfig+0x26c>
 8009d10:	2301      	movs	r3, #1
 8009d12:	77fb      	strb	r3, [r7, #31]
 8009d14:	e076      	b.n	8009e04 <UART_SetConfig+0x348>
 8009d16:	2302      	movs	r3, #2
 8009d18:	77fb      	strb	r3, [r7, #31]
 8009d1a:	e073      	b.n	8009e04 <UART_SetConfig+0x348>
 8009d1c:	2304      	movs	r3, #4
 8009d1e:	77fb      	strb	r3, [r7, #31]
 8009d20:	e070      	b.n	8009e04 <UART_SetConfig+0x348>
 8009d22:	2308      	movs	r3, #8
 8009d24:	77fb      	strb	r3, [r7, #31]
 8009d26:	e06d      	b.n	8009e04 <UART_SetConfig+0x348>
 8009d28:	2310      	movs	r3, #16
 8009d2a:	77fb      	strb	r3, [r7, #31]
 8009d2c:	e06a      	b.n	8009e04 <UART_SetConfig+0x348>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a1b      	ldr	r2, [pc, #108]	@ (8009da0 <UART_SetConfig+0x2e4>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d138      	bne.n	8009daa <UART_SetConfig+0x2ee>
 8009d38:	4b13      	ldr	r3, [pc, #76]	@ (8009d88 <UART_SetConfig+0x2cc>)
 8009d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d3e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009d42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d46:	d017      	beq.n	8009d78 <UART_SetConfig+0x2bc>
 8009d48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009d4c:	d82a      	bhi.n	8009da4 <UART_SetConfig+0x2e8>
 8009d4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d52:	d00b      	beq.n	8009d6c <UART_SetConfig+0x2b0>
 8009d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d58:	d824      	bhi.n	8009da4 <UART_SetConfig+0x2e8>
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <UART_SetConfig+0x2aa>
 8009d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d62:	d006      	beq.n	8009d72 <UART_SetConfig+0x2b6>
 8009d64:	e01e      	b.n	8009da4 <UART_SetConfig+0x2e8>
 8009d66:	2300      	movs	r3, #0
 8009d68:	77fb      	strb	r3, [r7, #31]
 8009d6a:	e04b      	b.n	8009e04 <UART_SetConfig+0x348>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	77fb      	strb	r3, [r7, #31]
 8009d70:	e048      	b.n	8009e04 <UART_SetConfig+0x348>
 8009d72:	2304      	movs	r3, #4
 8009d74:	77fb      	strb	r3, [r7, #31]
 8009d76:	e045      	b.n	8009e04 <UART_SetConfig+0x348>
 8009d78:	2308      	movs	r3, #8
 8009d7a:	77fb      	strb	r3, [r7, #31]
 8009d7c:	e042      	b.n	8009e04 <UART_SetConfig+0x348>
 8009d7e:	bf00      	nop
 8009d80:	efff69f3 	.word	0xefff69f3
 8009d84:	40011000 	.word	0x40011000
 8009d88:	40023800 	.word	0x40023800
 8009d8c:	40004400 	.word	0x40004400
 8009d90:	40004800 	.word	0x40004800
 8009d94:	40004c00 	.word	0x40004c00
 8009d98:	40005000 	.word	0x40005000
 8009d9c:	40011400 	.word	0x40011400
 8009da0:	40007800 	.word	0x40007800
 8009da4:	2310      	movs	r3, #16
 8009da6:	77fb      	strb	r3, [r7, #31]
 8009da8:	e02c      	b.n	8009e04 <UART_SetConfig+0x348>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a72      	ldr	r2, [pc, #456]	@ (8009f78 <UART_SetConfig+0x4bc>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d125      	bne.n	8009e00 <UART_SetConfig+0x344>
 8009db4:	4b71      	ldr	r3, [pc, #452]	@ (8009f7c <UART_SetConfig+0x4c0>)
 8009db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009dbe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009dc2:	d017      	beq.n	8009df4 <UART_SetConfig+0x338>
 8009dc4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009dc8:	d817      	bhi.n	8009dfa <UART_SetConfig+0x33e>
 8009dca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dce:	d00b      	beq.n	8009de8 <UART_SetConfig+0x32c>
 8009dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dd4:	d811      	bhi.n	8009dfa <UART_SetConfig+0x33e>
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <UART_SetConfig+0x326>
 8009dda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dde:	d006      	beq.n	8009dee <UART_SetConfig+0x332>
 8009de0:	e00b      	b.n	8009dfa <UART_SetConfig+0x33e>
 8009de2:	2300      	movs	r3, #0
 8009de4:	77fb      	strb	r3, [r7, #31]
 8009de6:	e00d      	b.n	8009e04 <UART_SetConfig+0x348>
 8009de8:	2302      	movs	r3, #2
 8009dea:	77fb      	strb	r3, [r7, #31]
 8009dec:	e00a      	b.n	8009e04 <UART_SetConfig+0x348>
 8009dee:	2304      	movs	r3, #4
 8009df0:	77fb      	strb	r3, [r7, #31]
 8009df2:	e007      	b.n	8009e04 <UART_SetConfig+0x348>
 8009df4:	2308      	movs	r3, #8
 8009df6:	77fb      	strb	r3, [r7, #31]
 8009df8:	e004      	b.n	8009e04 <UART_SetConfig+0x348>
 8009dfa:	2310      	movs	r3, #16
 8009dfc:	77fb      	strb	r3, [r7, #31]
 8009dfe:	e001      	b.n	8009e04 <UART_SetConfig+0x348>
 8009e00:	2310      	movs	r3, #16
 8009e02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	69db      	ldr	r3, [r3, #28]
 8009e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e0c:	d15b      	bne.n	8009ec6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009e0e:	7ffb      	ldrb	r3, [r7, #31]
 8009e10:	2b08      	cmp	r3, #8
 8009e12:	d828      	bhi.n	8009e66 <UART_SetConfig+0x3aa>
 8009e14:	a201      	add	r2, pc, #4	@ (adr r2, 8009e1c <UART_SetConfig+0x360>)
 8009e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1a:	bf00      	nop
 8009e1c:	08009e41 	.word	0x08009e41
 8009e20:	08009e49 	.word	0x08009e49
 8009e24:	08009e51 	.word	0x08009e51
 8009e28:	08009e67 	.word	0x08009e67
 8009e2c:	08009e57 	.word	0x08009e57
 8009e30:	08009e67 	.word	0x08009e67
 8009e34:	08009e67 	.word	0x08009e67
 8009e38:	08009e67 	.word	0x08009e67
 8009e3c:	08009e5f 	.word	0x08009e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e40:	f7fd fd44 	bl	80078cc <HAL_RCC_GetPCLK1Freq>
 8009e44:	61b8      	str	r0, [r7, #24]
        break;
 8009e46:	e013      	b.n	8009e70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e48:	f7fd fd54 	bl	80078f4 <HAL_RCC_GetPCLK2Freq>
 8009e4c:	61b8      	str	r0, [r7, #24]
        break;
 8009e4e:	e00f      	b.n	8009e70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e50:	4b4b      	ldr	r3, [pc, #300]	@ (8009f80 <UART_SetConfig+0x4c4>)
 8009e52:	61bb      	str	r3, [r7, #24]
        break;
 8009e54:	e00c      	b.n	8009e70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e56:	f7fd fc27 	bl	80076a8 <HAL_RCC_GetSysClockFreq>
 8009e5a:	61b8      	str	r0, [r7, #24]
        break;
 8009e5c:	e008      	b.n	8009e70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e62:	61bb      	str	r3, [r7, #24]
        break;
 8009e64:	e004      	b.n	8009e70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	77bb      	strb	r3, [r7, #30]
        break;
 8009e6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d074      	beq.n	8009f60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	005a      	lsls	r2, r3, #1
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	085b      	lsrs	r3, r3, #1
 8009e80:	441a      	add	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	2b0f      	cmp	r3, #15
 8009e90:	d916      	bls.n	8009ec0 <UART_SetConfig+0x404>
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e98:	d212      	bcs.n	8009ec0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	f023 030f 	bic.w	r3, r3, #15
 8009ea2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	085b      	lsrs	r3, r3, #1
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	f003 0307 	and.w	r3, r3, #7
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	89fb      	ldrh	r3, [r7, #14]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	89fa      	ldrh	r2, [r7, #14]
 8009ebc:	60da      	str	r2, [r3, #12]
 8009ebe:	e04f      	b.n	8009f60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	77bb      	strb	r3, [r7, #30]
 8009ec4:	e04c      	b.n	8009f60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ec6:	7ffb      	ldrb	r3, [r7, #31]
 8009ec8:	2b08      	cmp	r3, #8
 8009eca:	d828      	bhi.n	8009f1e <UART_SetConfig+0x462>
 8009ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ed4 <UART_SetConfig+0x418>)
 8009ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed2:	bf00      	nop
 8009ed4:	08009ef9 	.word	0x08009ef9
 8009ed8:	08009f01 	.word	0x08009f01
 8009edc:	08009f09 	.word	0x08009f09
 8009ee0:	08009f1f 	.word	0x08009f1f
 8009ee4:	08009f0f 	.word	0x08009f0f
 8009ee8:	08009f1f 	.word	0x08009f1f
 8009eec:	08009f1f 	.word	0x08009f1f
 8009ef0:	08009f1f 	.word	0x08009f1f
 8009ef4:	08009f17 	.word	0x08009f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ef8:	f7fd fce8 	bl	80078cc <HAL_RCC_GetPCLK1Freq>
 8009efc:	61b8      	str	r0, [r7, #24]
        break;
 8009efe:	e013      	b.n	8009f28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f00:	f7fd fcf8 	bl	80078f4 <HAL_RCC_GetPCLK2Freq>
 8009f04:	61b8      	str	r0, [r7, #24]
        break;
 8009f06:	e00f      	b.n	8009f28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f08:	4b1d      	ldr	r3, [pc, #116]	@ (8009f80 <UART_SetConfig+0x4c4>)
 8009f0a:	61bb      	str	r3, [r7, #24]
        break;
 8009f0c:	e00c      	b.n	8009f28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f0e:	f7fd fbcb 	bl	80076a8 <HAL_RCC_GetSysClockFreq>
 8009f12:	61b8      	str	r0, [r7, #24]
        break;
 8009f14:	e008      	b.n	8009f28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f1a:	61bb      	str	r3, [r7, #24]
        break;
 8009f1c:	e004      	b.n	8009f28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	77bb      	strb	r3, [r7, #30]
        break;
 8009f26:	bf00      	nop
    }

    if (pclk != 0U)
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d018      	beq.n	8009f60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	085a      	lsrs	r2, r3, #1
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	441a      	add	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	2b0f      	cmp	r3, #15
 8009f46:	d909      	bls.n	8009f5c <UART_SetConfig+0x4a0>
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f4e:	d205      	bcs.n	8009f5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	60da      	str	r2, [r3, #12]
 8009f5a:	e001      	b.n	8009f60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009f6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3720      	adds	r7, #32
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	40007c00 	.word	0x40007c00
 8009f7c:	40023800 	.word	0x40023800
 8009f80:	00f42400 	.word	0x00f42400

08009f84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f90:	f003 0308 	and.w	r3, r3, #8
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00a      	beq.n	8009fae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb2:	f003 0301 	and.w	r3, r3, #1
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd4:	f003 0302 	and.w	r3, r3, #2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00a      	beq.n	8009ff2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff6:	f003 0304 	and.w	r3, r3, #4
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00a      	beq.n	800a014 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	430a      	orrs	r2, r1
 800a012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a018:	f003 0310 	and.w	r3, r3, #16
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00a      	beq.n	800a036 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a03a:	f003 0320 	and.w	r3, r3, #32
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00a      	beq.n	800a058 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	430a      	orrs	r2, r1
 800a056:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a060:	2b00      	cmp	r3, #0
 800a062:	d01a      	beq.n	800a09a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a07e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a082:	d10a      	bne.n	800a09a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00a      	beq.n	800a0bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	605a      	str	r2, [r3, #4]
  }
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b098      	sub	sp, #96	@ 0x60
 800a0cc:	af02      	add	r7, sp, #8
 800a0ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0d8:	f7f9 fde0 	bl	8003c9c <HAL_GetTick>
 800a0dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0308 	and.w	r3, r3, #8
 800a0e8:	2b08      	cmp	r3, #8
 800a0ea:	d12e      	bne.n	800a14a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f88c 	bl	800a218 <UART_WaitOnFlagUntilTimeout>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d021      	beq.n	800a14a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10e:	e853 3f00 	ldrex	r3, [r3]
 800a112:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a116:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a11a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	461a      	mov	r2, r3
 800a122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a124:	647b      	str	r3, [r7, #68]	@ 0x44
 800a126:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a128:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a12a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a12c:	e841 2300 	strex	r3, r2, [r1]
 800a130:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1e6      	bne.n	800a106 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2220      	movs	r2, #32
 800a13c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e062      	b.n	800a210 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 0304 	and.w	r3, r3, #4
 800a154:	2b04      	cmp	r3, #4
 800a156:	d149      	bne.n	800a1ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a158:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a15c:	9300      	str	r3, [sp, #0]
 800a15e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a160:	2200      	movs	r2, #0
 800a162:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f856 	bl	800a218 <UART_WaitOnFlagUntilTimeout>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d03c      	beq.n	800a1ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17a:	e853 3f00 	ldrex	r3, [r3]
 800a17e:	623b      	str	r3, [r7, #32]
   return(result);
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	461a      	mov	r2, r3
 800a18e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a190:	633b      	str	r3, [r7, #48]	@ 0x30
 800a192:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a194:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a198:	e841 2300 	strex	r3, r2, [r1]
 800a19c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1e6      	bne.n	800a172 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	e853 3f00 	ldrex	r3, [r3]
 800a1b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f023 0301 	bic.w	r3, r3, #1
 800a1ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1c4:	61fa      	str	r2, [r7, #28]
 800a1c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	69b9      	ldr	r1, [r7, #24]
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	e841 2300 	strex	r3, r2, [r1]
 800a1d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e5      	bne.n	800a1a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2220      	movs	r2, #32
 800a1dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e011      	b.n	800a210 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3758      	adds	r7, #88	@ 0x58
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	603b      	str	r3, [r7, #0]
 800a224:	4613      	mov	r3, r2
 800a226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a228:	e04f      	b.n	800a2ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a230:	d04b      	beq.n	800a2ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a232:	f7f9 fd33 	bl	8003c9c <HAL_GetTick>
 800a236:	4602      	mov	r2, r0
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	69ba      	ldr	r2, [r7, #24]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d302      	bcc.n	800a248 <UART_WaitOnFlagUntilTimeout+0x30>
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a248:	2303      	movs	r3, #3
 800a24a:	e04e      	b.n	800a2ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 0304 	and.w	r3, r3, #4
 800a256:	2b00      	cmp	r3, #0
 800a258:	d037      	beq.n	800a2ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	2b80      	cmp	r3, #128	@ 0x80
 800a25e:	d034      	beq.n	800a2ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b40      	cmp	r3, #64	@ 0x40
 800a264:	d031      	beq.n	800a2ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69db      	ldr	r3, [r3, #28]
 800a26c:	f003 0308 	and.w	r3, r3, #8
 800a270:	2b08      	cmp	r3, #8
 800a272:	d110      	bne.n	800a296 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2208      	movs	r2, #8
 800a27a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 f85e 	bl	800a33e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2208      	movs	r2, #8
 800a286:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e029      	b.n	800a2ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2a4:	d111      	bne.n	800a2ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a2ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f000 f844 	bl	800a33e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2220      	movs	r2, #32
 800a2ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e00f      	b.n	800a2ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	69da      	ldr	r2, [r3, #28]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	68ba      	ldr	r2, [r7, #8]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	bf0c      	ite	eq
 800a2da:	2301      	moveq	r3, #1
 800a2dc:	2300      	movne	r3, #0
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	79fb      	ldrb	r3, [r7, #7]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d0a0      	beq.n	800a22a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b089      	sub	sp, #36	@ 0x24
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	e853 3f00 	ldrex	r3, [r3]
 800a306:	60bb      	str	r3, [r7, #8]
   return(result);
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a30e:	61fb      	str	r3, [r7, #28]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	461a      	mov	r2, r3
 800a316:	69fb      	ldr	r3, [r7, #28]
 800a318:	61bb      	str	r3, [r7, #24]
 800a31a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31c:	6979      	ldr	r1, [r7, #20]
 800a31e:	69ba      	ldr	r2, [r7, #24]
 800a320:	e841 2300 	strex	r3, r2, [r1]
 800a324:	613b      	str	r3, [r7, #16]
   return(result);
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1e6      	bne.n	800a2fa <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2220      	movs	r2, #32
 800a330:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a332:	bf00      	nop
 800a334:	3724      	adds	r7, #36	@ 0x24
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a33e:	b480      	push	{r7}
 800a340:	b095      	sub	sp, #84	@ 0x54
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a34e:	e853 3f00 	ldrex	r3, [r3]
 800a352:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a356:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a35a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	461a      	mov	r2, r3
 800a362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a364:	643b      	str	r3, [r7, #64]	@ 0x40
 800a366:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a368:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a36a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a36c:	e841 2300 	strex	r3, r2, [r1]
 800a370:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1e6      	bne.n	800a346 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3308      	adds	r3, #8
 800a37e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a380:	6a3b      	ldr	r3, [r7, #32]
 800a382:	e853 3f00 	ldrex	r3, [r3]
 800a386:	61fb      	str	r3, [r7, #28]
   return(result);
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	f023 0301 	bic.w	r3, r3, #1
 800a38e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3308      	adds	r3, #8
 800a396:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a398:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a39a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a39c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a39e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3a0:	e841 2300 	strex	r3, r2, [r1]
 800a3a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1e5      	bne.n	800a378 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d118      	bne.n	800a3e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	e853 3f00 	ldrex	r3, [r3]
 800a3c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	f023 0310 	bic.w	r3, r3, #16
 800a3c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3d2:	61bb      	str	r3, [r7, #24]
 800a3d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d6:	6979      	ldr	r1, [r7, #20]
 800a3d8:	69ba      	ldr	r2, [r7, #24]
 800a3da:	e841 2300 	strex	r3, r2, [r1]
 800a3de:	613b      	str	r3, [r7, #16]
   return(result);
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1e6      	bne.n	800a3b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a3fa:	bf00      	nop
 800a3fc:	3754      	adds	r7, #84	@ 0x54
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b090      	sub	sp, #64	@ 0x40
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a412:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a41c:	d037      	beq.n	800a48e <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a420:	2200      	movs	r2, #0
 800a422:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3308      	adds	r3, #8
 800a42c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a430:	e853 3f00 	ldrex	r3, [r3]
 800a434:	623b      	str	r3, [r7, #32]
   return(result);
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a43c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a43e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3308      	adds	r3, #8
 800a444:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a446:	633a      	str	r2, [r7, #48]	@ 0x30
 800a448:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a44c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a44e:	e841 2300 	strex	r3, r2, [r1]
 800a452:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e5      	bne.n	800a426 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a45a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	e853 3f00 	ldrex	r3, [r3]
 800a466:	60fb      	str	r3, [r7, #12]
   return(result);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a46e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a478:	61fb      	str	r3, [r7, #28]
 800a47a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47c:	69b9      	ldr	r1, [r7, #24]
 800a47e:	69fa      	ldr	r2, [r7, #28]
 800a480:	e841 2300 	strex	r3, r2, [r1]
 800a484:	617b      	str	r3, [r7, #20]
   return(result);
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1e6      	bne.n	800a45a <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a48c:	e002      	b.n	800a494 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a48e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a490:	f7ff fae0 	bl	8009a54 <HAL_UART_TxCpltCallback>
}
 800a494:	bf00      	nop
 800a496:	3740      	adds	r7, #64	@ 0x40
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f7ff fadc 	bl	8009a68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4b0:	bf00      	nop
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a4ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4de:	2b80      	cmp	r3, #128	@ 0x80
 800a4e0:	d109      	bne.n	800a4f6 <UART_DMAError+0x3e>
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b21      	cmp	r3, #33	@ 0x21
 800a4e6:	d106      	bne.n	800a4f6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800a4f0:	6978      	ldr	r0, [r7, #20]
 800a4f2:	f7ff fefe 	bl	800a2f2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a500:	2b40      	cmp	r3, #64	@ 0x40
 800a502:	d109      	bne.n	800a518 <UART_DMAError+0x60>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b22      	cmp	r3, #34	@ 0x22
 800a508:	d106      	bne.n	800a518 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800a512:	6978      	ldr	r0, [r7, #20]
 800a514:	f7ff ff13 	bl	800a33e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a51e:	f043 0210 	orr.w	r2, r3, #16
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a528:	6978      	ldr	r0, [r7, #20]
 800a52a:	f7ff faa7 	bl	8009a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a52e:	bf00      	nop
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a542:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f7ff fa91 	bl	8009a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a55a:	bf00      	nop
 800a55c:	3710      	adds	r7, #16
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}

0800a562 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b088      	sub	sp, #32
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	e853 3f00 	ldrex	r3, [r3]
 800a576:	60bb      	str	r3, [r7, #8]
   return(result);
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a57e:	61fb      	str	r3, [r7, #28]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	461a      	mov	r2, r3
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	61bb      	str	r3, [r7, #24]
 800a58a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58c:	6979      	ldr	r1, [r7, #20]
 800a58e:	69ba      	ldr	r2, [r7, #24]
 800a590:	e841 2300 	strex	r3, r2, [r1]
 800a594:	613b      	str	r3, [r7, #16]
   return(result);
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1e6      	bne.n	800a56a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f7ff fa53 	bl	8009a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a5ae:	bf00      	nop
 800a5b0:	3720      	adds	r7, #32
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
 800a5c2:	f107 001c 	add.w	r0, r7, #28
 800a5c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d121      	bne.n	800a616 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	68da      	ldr	r2, [r3, #12]
 800a5e2:	4b21      	ldr	r3, [pc, #132]	@ (800a668 <USB_CoreInit+0xb0>)
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a5f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d105      	bne.n	800a60a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 fade 	bl	800bbcc <USB_CoreReset>
 800a610:	4603      	mov	r3, r0
 800a612:	73fb      	strb	r3, [r7, #15]
 800a614:	e010      	b.n	800a638 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f001 fad2 	bl	800bbcc <USB_CoreReset>
 800a628:	4603      	mov	r3, r0
 800a62a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a630:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800a638:	7fbb      	ldrb	r3, [r7, #30]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d10b      	bne.n	800a656 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f043 0206 	orr.w	r2, r3, #6
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f043 0220 	orr.w	r2, r3, #32
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a656:	7bfb      	ldrb	r3, [r7, #15]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a662:	b004      	add	sp, #16
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	ffbdffbf 	.word	0xffbdffbf

0800a66c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	4613      	mov	r3, r2
 800a678:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a67a:	79fb      	ldrb	r3, [r7, #7]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d165      	bne.n	800a74c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	4a41      	ldr	r2, [pc, #260]	@ (800a788 <USB_SetTurnaroundTime+0x11c>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d906      	bls.n	800a696 <USB_SetTurnaroundTime+0x2a>
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4a40      	ldr	r2, [pc, #256]	@ (800a78c <USB_SetTurnaroundTime+0x120>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d202      	bcs.n	800a696 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a690:	230f      	movs	r3, #15
 800a692:	617b      	str	r3, [r7, #20]
 800a694:	e062      	b.n	800a75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	4a3c      	ldr	r2, [pc, #240]	@ (800a78c <USB_SetTurnaroundTime+0x120>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d306      	bcc.n	800a6ac <USB_SetTurnaroundTime+0x40>
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	4a3b      	ldr	r2, [pc, #236]	@ (800a790 <USB_SetTurnaroundTime+0x124>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d202      	bcs.n	800a6ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a6a6:	230e      	movs	r3, #14
 800a6a8:	617b      	str	r3, [r7, #20]
 800a6aa:	e057      	b.n	800a75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	4a38      	ldr	r2, [pc, #224]	@ (800a790 <USB_SetTurnaroundTime+0x124>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d306      	bcc.n	800a6c2 <USB_SetTurnaroundTime+0x56>
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	4a37      	ldr	r2, [pc, #220]	@ (800a794 <USB_SetTurnaroundTime+0x128>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d202      	bcs.n	800a6c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a6bc:	230d      	movs	r3, #13
 800a6be:	617b      	str	r3, [r7, #20]
 800a6c0:	e04c      	b.n	800a75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	4a33      	ldr	r2, [pc, #204]	@ (800a794 <USB_SetTurnaroundTime+0x128>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d306      	bcc.n	800a6d8 <USB_SetTurnaroundTime+0x6c>
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	4a32      	ldr	r2, [pc, #200]	@ (800a798 <USB_SetTurnaroundTime+0x12c>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d802      	bhi.n	800a6d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a6d2:	230c      	movs	r3, #12
 800a6d4:	617b      	str	r3, [r7, #20]
 800a6d6:	e041      	b.n	800a75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	4a2f      	ldr	r2, [pc, #188]	@ (800a798 <USB_SetTurnaroundTime+0x12c>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d906      	bls.n	800a6ee <USB_SetTurnaroundTime+0x82>
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	4a2e      	ldr	r2, [pc, #184]	@ (800a79c <USB_SetTurnaroundTime+0x130>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d802      	bhi.n	800a6ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a6e8:	230b      	movs	r3, #11
 800a6ea:	617b      	str	r3, [r7, #20]
 800a6ec:	e036      	b.n	800a75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	4a2a      	ldr	r2, [pc, #168]	@ (800a79c <USB_SetTurnaroundTime+0x130>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d906      	bls.n	800a704 <USB_SetTurnaroundTime+0x98>
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	4a29      	ldr	r2, [pc, #164]	@ (800a7a0 <USB_SetTurnaroundTime+0x134>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d802      	bhi.n	800a704 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a6fe:	230a      	movs	r3, #10
 800a700:	617b      	str	r3, [r7, #20]
 800a702:	e02b      	b.n	800a75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	4a26      	ldr	r2, [pc, #152]	@ (800a7a0 <USB_SetTurnaroundTime+0x134>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d906      	bls.n	800a71a <USB_SetTurnaroundTime+0xae>
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	4a25      	ldr	r2, [pc, #148]	@ (800a7a4 <USB_SetTurnaroundTime+0x138>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d202      	bcs.n	800a71a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a714:	2309      	movs	r3, #9
 800a716:	617b      	str	r3, [r7, #20]
 800a718:	e020      	b.n	800a75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	4a21      	ldr	r2, [pc, #132]	@ (800a7a4 <USB_SetTurnaroundTime+0x138>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d306      	bcc.n	800a730 <USB_SetTurnaroundTime+0xc4>
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	4a20      	ldr	r2, [pc, #128]	@ (800a7a8 <USB_SetTurnaroundTime+0x13c>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d802      	bhi.n	800a730 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a72a:	2308      	movs	r3, #8
 800a72c:	617b      	str	r3, [r7, #20]
 800a72e:	e015      	b.n	800a75c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	4a1d      	ldr	r2, [pc, #116]	@ (800a7a8 <USB_SetTurnaroundTime+0x13c>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d906      	bls.n	800a746 <USB_SetTurnaroundTime+0xda>
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	4a1c      	ldr	r2, [pc, #112]	@ (800a7ac <USB_SetTurnaroundTime+0x140>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d202      	bcs.n	800a746 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a740:	2307      	movs	r3, #7
 800a742:	617b      	str	r3, [r7, #20]
 800a744:	e00a      	b.n	800a75c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a746:	2306      	movs	r3, #6
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	e007      	b.n	800a75c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a74c:	79fb      	ldrb	r3, [r7, #7]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d102      	bne.n	800a758 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a752:	2309      	movs	r3, #9
 800a754:	617b      	str	r3, [r7, #20]
 800a756:	e001      	b.n	800a75c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a758:	2309      	movs	r3, #9
 800a75a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	68da      	ldr	r2, [r3, #12]
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	029b      	lsls	r3, r3, #10
 800a770:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a774:	431a      	orrs	r2, r3
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	371c      	adds	r7, #28
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	00d8acbf 	.word	0x00d8acbf
 800a78c:	00e4e1c0 	.word	0x00e4e1c0
 800a790:	00f42400 	.word	0x00f42400
 800a794:	01067380 	.word	0x01067380
 800a798:	011a499f 	.word	0x011a499f
 800a79c:	01312cff 	.word	0x01312cff
 800a7a0:	014ca43f 	.word	0x014ca43f
 800a7a4:	016e3600 	.word	0x016e3600
 800a7a8:	01a6ab1f 	.word	0x01a6ab1f
 800a7ac:	01e84800 	.word	0x01e84800

0800a7b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	f043 0201 	orr.w	r2, r3, #1
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b083      	sub	sp, #12
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f023 0201 	bic.w	r2, r3, #1
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a800:	2300      	movs	r3, #0
 800a802:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a810:	78fb      	ldrb	r3, [r7, #3]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d115      	bne.n	800a842 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a822:	200a      	movs	r0, #10
 800a824:	f7f9 fa46 	bl	8003cb4 <HAL_Delay>
      ms += 10U;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	330a      	adds	r3, #10
 800a82c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 f93b 	bl	800baaa <USB_GetMode>
 800a834:	4603      	mov	r3, r0
 800a836:	2b01      	cmp	r3, #1
 800a838:	d01e      	beq.n	800a878 <USB_SetCurrentMode+0x84>
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a83e:	d9f0      	bls.n	800a822 <USB_SetCurrentMode+0x2e>
 800a840:	e01a      	b.n	800a878 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a842:	78fb      	ldrb	r3, [r7, #3]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d115      	bne.n	800a874 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a854:	200a      	movs	r0, #10
 800a856:	f7f9 fa2d 	bl	8003cb4 <HAL_Delay>
      ms += 10U;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	330a      	adds	r3, #10
 800a85e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f001 f922 	bl	800baaa <USB_GetMode>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d005      	beq.n	800a878 <USB_SetCurrentMode+0x84>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2bc7      	cmp	r3, #199	@ 0xc7
 800a870:	d9f0      	bls.n	800a854 <USB_SetCurrentMode+0x60>
 800a872:	e001      	b.n	800a878 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e005      	b.n	800a884 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2bc8      	cmp	r3, #200	@ 0xc8
 800a87c:	d101      	bne.n	800a882 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e000      	b.n	800a884 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a88c:	b084      	sub	sp, #16
 800a88e:	b580      	push	{r7, lr}
 800a890:	b086      	sub	sp, #24
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a89a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	613b      	str	r3, [r7, #16]
 800a8aa:	e009      	b.n	800a8c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	3340      	adds	r3, #64	@ 0x40
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	613b      	str	r3, [r7, #16]
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	2b0e      	cmp	r3, #14
 800a8c4:	d9f2      	bls.n	800a8ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a8c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d11c      	bne.n	800a908 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8dc:	f043 0302 	orr.w	r3, r3, #2
 800a8e0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	e005      	b.n	800a914 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a90c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a91a:	461a      	mov	r2, r3
 800a91c:	2300      	movs	r3, #0
 800a91e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a920:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a924:	2b01      	cmp	r3, #1
 800a926:	d10d      	bne.n	800a944 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d104      	bne.n	800a93a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a930:	2100      	movs	r1, #0
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f968 	bl	800ac08 <USB_SetDevSpeed>
 800a938:	e008      	b.n	800a94c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a93a:	2101      	movs	r1, #1
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f963 	bl	800ac08 <USB_SetDevSpeed>
 800a942:	e003      	b.n	800a94c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a944:	2103      	movs	r1, #3
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f95e 	bl	800ac08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a94c:	2110      	movs	r1, #16
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f8fa 	bl	800ab48 <USB_FlushTxFifo>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f924 	bl	800abac <USB_FlushRxFifo>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a974:	461a      	mov	r2, r3
 800a976:	2300      	movs	r3, #0
 800a978:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a980:	461a      	mov	r2, r3
 800a982:	2300      	movs	r3, #0
 800a984:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a98c:	461a      	mov	r2, r3
 800a98e:	2300      	movs	r3, #0
 800a990:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a992:	2300      	movs	r3, #0
 800a994:	613b      	str	r3, [r7, #16]
 800a996:	e043      	b.n	800aa20 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	015a      	lsls	r2, r3, #5
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	4413      	add	r3, r2
 800a9a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9ae:	d118      	bne.n	800a9e2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10a      	bne.n	800a9cc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	015a      	lsls	r2, r3, #5
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	4413      	add	r3, r2
 800a9be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a9c8:	6013      	str	r3, [r2, #0]
 800a9ca:	e013      	b.n	800a9f4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9d8:	461a      	mov	r2, r3
 800a9da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a9de:	6013      	str	r3, [r2, #0]
 800a9e0:	e008      	b.n	800a9f4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	015a      	lsls	r2, r3, #5
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa00:	461a      	mov	r2, r3
 800aa02:	2300      	movs	r3, #0
 800aa04:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	015a      	lsls	r2, r3, #5
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa12:	461a      	mov	r2, r3
 800aa14:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aa18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	613b      	str	r3, [r7, #16]
 800aa20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aa24:	461a      	mov	r2, r3
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d3b5      	bcc.n	800a998 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	613b      	str	r3, [r7, #16]
 800aa30:	e043      	b.n	800aaba <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	015a      	lsls	r2, r3, #5
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa48:	d118      	bne.n	800aa7c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10a      	bne.n	800aa66 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	015a      	lsls	r2, r3, #5
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	4413      	add	r3, r2
 800aa58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aa62:	6013      	str	r3, [r2, #0]
 800aa64:	e013      	b.n	800aa8e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa72:	461a      	mov	r2, r3
 800aa74:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aa78:	6013      	str	r3, [r2, #0]
 800aa7a:	e008      	b.n	800aa8e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	015a      	lsls	r2, r3, #5
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	4413      	add	r3, r2
 800aa84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa88:	461a      	mov	r2, r3
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	015a      	lsls	r2, r3, #5
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4413      	add	r3, r2
 800aa96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	015a      	lsls	r2, r3, #5
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaac:	461a      	mov	r2, r3
 800aaae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aab2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	3301      	adds	r3, #1
 800aab8:	613b      	str	r3, [r7, #16]
 800aaba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aabe:	461a      	mov	r2, r3
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d3b5      	bcc.n	800aa32 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aad8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2200      	movs	r2, #0
 800aade:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800aae6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aae8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d105      	bne.n	800aafc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	699b      	ldr	r3, [r3, #24]
 800aaf4:	f043 0210 	orr.w	r2, r3, #16
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	699a      	ldr	r2, [r3, #24]
 800ab00:	4b0f      	ldr	r3, [pc, #60]	@ (800ab40 <USB_DevInit+0x2b4>)
 800ab02:	4313      	orrs	r3, r2
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab08:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d005      	beq.n	800ab1c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	f043 0208 	orr.w	r2, r3, #8
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab1c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d105      	bne.n	800ab30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	699a      	ldr	r2, [r3, #24]
 800ab28:	4b06      	ldr	r3, [pc, #24]	@ (800ab44 <USB_DevInit+0x2b8>)
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3718      	adds	r7, #24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab3c:	b004      	add	sp, #16
 800ab3e:	4770      	bx	lr
 800ab40:	803c3800 	.word	0x803c3800
 800ab44:	40000004 	.word	0x40000004

0800ab48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab52:	2300      	movs	r3, #0
 800ab54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab62:	d901      	bls.n	800ab68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab64:	2303      	movs	r3, #3
 800ab66:	e01b      	b.n	800aba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	daf2      	bge.n	800ab56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab70:	2300      	movs	r3, #0
 800ab72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	019b      	lsls	r3, r3, #6
 800ab78:	f043 0220 	orr.w	r2, r3, #32
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	3301      	adds	r3, #1
 800ab84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab8c:	d901      	bls.n	800ab92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e006      	b.n	800aba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	f003 0320 	and.w	r3, r3, #32
 800ab9a:	2b20      	cmp	r3, #32
 800ab9c:	d0f0      	beq.n	800ab80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abb4:	2300      	movs	r3, #0
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3301      	adds	r3, #1
 800abbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abc4:	d901      	bls.n	800abca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e018      	b.n	800abfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	daf2      	bge.n	800abb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800abd2:	2300      	movs	r3, #0
 800abd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2210      	movs	r2, #16
 800abda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3301      	adds	r3, #1
 800abe0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abe8:	d901      	bls.n	800abee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	e006      	b.n	800abfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	f003 0310 	and.w	r3, r3, #16
 800abf6:	2b10      	cmp	r3, #16
 800abf8:	d0f0      	beq.n	800abdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	78fb      	ldrb	r3, [r7, #3]
 800ac22:	68f9      	ldr	r1, [r7, #12]
 800ac24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3714      	adds	r7, #20
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b087      	sub	sp, #28
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	f003 0306 	and.w	r3, r3, #6
 800ac52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d102      	bne.n	800ac60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	75fb      	strb	r3, [r7, #23]
 800ac5e:	e00a      	b.n	800ac76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d002      	beq.n	800ac6c <USB_GetDevSpeed+0x32>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2b06      	cmp	r3, #6
 800ac6a:	d102      	bne.n	800ac72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ac6c:	2302      	movs	r3, #2
 800ac6e:	75fb      	strb	r3, [r7, #23]
 800ac70:	e001      	b.n	800ac76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ac72:	230f      	movs	r3, #15
 800ac74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ac76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	371c      	adds	r7, #28
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	785b      	ldrb	r3, [r3, #1]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d139      	bne.n	800ad14 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aca6:	69da      	ldr	r2, [r3, #28]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	f003 030f 	and.w	r3, r3, #15
 800acb0:	2101      	movs	r1, #1
 800acb2:	fa01 f303 	lsl.w	r3, r1, r3
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	68f9      	ldr	r1, [r7, #12]
 800acba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800acbe:	4313      	orrs	r3, r2
 800acc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	015a      	lsls	r2, r3, #5
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	4413      	add	r3, r2
 800acca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d153      	bne.n	800ad80 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	015a      	lsls	r2, r3, #5
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4413      	add	r3, r2
 800ace0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	791b      	ldrb	r3, [r3, #4]
 800acf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	059b      	lsls	r3, r3, #22
 800acfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acfc:	431a      	orrs	r2, r3
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	0159      	lsls	r1, r3, #5
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	440b      	add	r3, r1
 800ad06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	4b20      	ldr	r3, [pc, #128]	@ (800ad90 <USB_ActivateEndpoint+0x10c>)
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	600b      	str	r3, [r1, #0]
 800ad12:	e035      	b.n	800ad80 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad1a:	69da      	ldr	r2, [r3, #28]
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	f003 030f 	and.w	r3, r3, #15
 800ad24:	2101      	movs	r1, #1
 800ad26:	fa01 f303 	lsl.w	r3, r1, r3
 800ad2a:	041b      	lsls	r3, r3, #16
 800ad2c:	68f9      	ldr	r1, [r7, #12]
 800ad2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad32:	4313      	orrs	r3, r2
 800ad34:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	015a      	lsls	r2, r3, #5
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d119      	bne.n	800ad80 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	791b      	ldrb	r3, [r3, #4]
 800ad66:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad68:	430b      	orrs	r3, r1
 800ad6a:	431a      	orrs	r2, r3
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	0159      	lsls	r1, r3, #5
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	440b      	add	r3, r1
 800ad74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad78:	4619      	mov	r1, r3
 800ad7a:	4b05      	ldr	r3, [pc, #20]	@ (800ad90 <USB_ActivateEndpoint+0x10c>)
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3714      	adds	r7, #20
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	10008000 	.word	0x10008000

0800ad94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	785b      	ldrb	r3, [r3, #1]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d161      	bne.n	800ae74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adc6:	d11f      	bne.n	800ae08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	0151      	lsls	r1, r2, #5
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	440a      	add	r2, r1
 800adde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ade2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ade6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	015a      	lsls	r2, r3, #5
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4413      	add	r3, r2
 800adf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	0151      	lsls	r1, r2, #5
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	440a      	add	r2, r1
 800adfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	f003 030f 	and.w	r3, r3, #15
 800ae18:	2101      	movs	r1, #1
 800ae1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	43db      	mvns	r3, r3
 800ae22:	68f9      	ldr	r1, [r7, #12]
 800ae24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae28:	4013      	ands	r3, r2
 800ae2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae32:	69da      	ldr	r2, [r3, #28]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	f003 030f 	and.w	r3, r3, #15
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	43db      	mvns	r3, r3
 800ae46:	68f9      	ldr	r1, [r7, #12]
 800ae48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	0159      	lsls	r1, r3, #5
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	440b      	add	r3, r1
 800ae66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4b35      	ldr	r3, [pc, #212]	@ (800af44 <USB_DeactivateEndpoint+0x1b0>)
 800ae6e:	4013      	ands	r3, r2
 800ae70:	600b      	str	r3, [r1, #0]
 800ae72:	e060      	b.n	800af36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	015a      	lsls	r2, r3, #5
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae8a:	d11f      	bne.n	800aecc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	0151      	lsls	r1, r2, #5
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	440a      	add	r2, r1
 800aea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aea6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aeaa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	0151      	lsls	r1, r2, #5
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	440a      	add	r2, r1
 800aec2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aec6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aeca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aed2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	f003 030f 	and.w	r3, r3, #15
 800aedc:	2101      	movs	r1, #1
 800aede:	fa01 f303 	lsl.w	r3, r1, r3
 800aee2:	041b      	lsls	r3, r3, #16
 800aee4:	43db      	mvns	r3, r3
 800aee6:	68f9      	ldr	r1, [r7, #12]
 800aee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aeec:	4013      	ands	r3, r2
 800aeee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aef6:	69da      	ldr	r2, [r3, #28]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	f003 030f 	and.w	r3, r3, #15
 800af00:	2101      	movs	r1, #1
 800af02:	fa01 f303 	lsl.w	r3, r1, r3
 800af06:	041b      	lsls	r3, r3, #16
 800af08:	43db      	mvns	r3, r3
 800af0a:	68f9      	ldr	r1, [r7, #12]
 800af0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af10:	4013      	ands	r3, r2
 800af12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	0159      	lsls	r1, r3, #5
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	440b      	add	r3, r1
 800af2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af2e:	4619      	mov	r1, r3
 800af30:	4b05      	ldr	r3, [pc, #20]	@ (800af48 <USB_DeactivateEndpoint+0x1b4>)
 800af32:	4013      	ands	r3, r2
 800af34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr
 800af44:	ec337800 	.word	0xec337800
 800af48:	eff37800 	.word	0xeff37800

0800af4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b08a      	sub	sp, #40	@ 0x28
 800af50:	af02      	add	r7, sp, #8
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	4613      	mov	r3, r2
 800af58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	785b      	ldrb	r3, [r3, #1]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	f040 8181 	bne.w	800b270 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d132      	bne.n	800afdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	015a      	lsls	r2, r3, #5
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	4413      	add	r3, r2
 800af7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af82:	691a      	ldr	r2, [r3, #16]
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	0159      	lsls	r1, r3, #5
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	440b      	add	r3, r1
 800af8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af90:	4619      	mov	r1, r3
 800af92:	4ba5      	ldr	r3, [pc, #660]	@ (800b228 <USB_EPStartXfer+0x2dc>)
 800af94:	4013      	ands	r3, r2
 800af96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	0151      	lsls	r1, r2, #5
 800afaa:	69fa      	ldr	r2, [r7, #28]
 800afac:	440a      	add	r2, r1
 800afae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800afb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	015a      	lsls	r2, r3, #5
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	4413      	add	r3, r2
 800afc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afc4:	691a      	ldr	r2, [r3, #16]
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	0159      	lsls	r1, r3, #5
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	440b      	add	r3, r1
 800afce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afd2:	4619      	mov	r1, r3
 800afd4:	4b95      	ldr	r3, [pc, #596]	@ (800b22c <USB_EPStartXfer+0x2e0>)
 800afd6:	4013      	ands	r3, r2
 800afd8:	610b      	str	r3, [r1, #16]
 800afda:	e092      	b.n	800b102 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	015a      	lsls	r2, r3, #5
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	4413      	add	r3, r2
 800afe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afe8:	691a      	ldr	r2, [r3, #16]
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	0159      	lsls	r1, r3, #5
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	440b      	add	r3, r1
 800aff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aff6:	4619      	mov	r1, r3
 800aff8:	4b8c      	ldr	r3, [pc, #560]	@ (800b22c <USB_EPStartXfer+0x2e0>)
 800affa:	4013      	ands	r3, r2
 800affc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	015a      	lsls	r2, r3, #5
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	4413      	add	r3, r2
 800b006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b00a:	691a      	ldr	r2, [r3, #16]
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	0159      	lsls	r1, r3, #5
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	440b      	add	r3, r1
 800b014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b018:	4619      	mov	r1, r3
 800b01a:	4b83      	ldr	r3, [pc, #524]	@ (800b228 <USB_EPStartXfer+0x2dc>)
 800b01c:	4013      	ands	r3, r2
 800b01e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d11a      	bne.n	800b05c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	691a      	ldr	r2, [r3, #16]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d903      	bls.n	800b03a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	689a      	ldr	r2, [r3, #8]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	015a      	lsls	r2, r3, #5
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	4413      	add	r3, r2
 800b042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b046:	691b      	ldr	r3, [r3, #16]
 800b048:	69ba      	ldr	r2, [r7, #24]
 800b04a:	0151      	lsls	r1, r2, #5
 800b04c:	69fa      	ldr	r2, [r7, #28]
 800b04e:	440a      	add	r2, r1
 800b050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b054:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b058:	6113      	str	r3, [r2, #16]
 800b05a:	e01b      	b.n	800b094 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	015a      	lsls	r2, r3, #5
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	4413      	add	r3, r2
 800b064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b068:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	6919      	ldr	r1, [r3, #16]
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	440b      	add	r3, r1
 800b074:	1e59      	subs	r1, r3, #1
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b07e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b080:	4b6b      	ldr	r3, [pc, #428]	@ (800b230 <USB_EPStartXfer+0x2e4>)
 800b082:	400b      	ands	r3, r1
 800b084:	69b9      	ldr	r1, [r7, #24]
 800b086:	0148      	lsls	r0, r1, #5
 800b088:	69f9      	ldr	r1, [r7, #28]
 800b08a:	4401      	add	r1, r0
 800b08c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b090:	4313      	orrs	r3, r2
 800b092:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	015a      	lsls	r2, r3, #5
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	4413      	add	r3, r2
 800b09c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0a0:	691a      	ldr	r2, [r3, #16]
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0aa:	69b9      	ldr	r1, [r7, #24]
 800b0ac:	0148      	lsls	r0, r1, #5
 800b0ae:	69f9      	ldr	r1, [r7, #28]
 800b0b0:	4401      	add	r1, r0
 800b0b2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	791b      	ldrb	r3, [r3, #4]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d11f      	bne.n	800b102 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	015a      	lsls	r2, r3, #5
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	0151      	lsls	r1, r2, #5
 800b0d4:	69fa      	ldr	r2, [r7, #28]
 800b0d6:	440a      	add	r2, r1
 800b0d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0dc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b0e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	015a      	lsls	r2, r3, #5
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	0151      	lsls	r1, r2, #5
 800b0f4:	69fa      	ldr	r2, [r7, #28]
 800b0f6:	440a      	add	r2, r1
 800b0f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b100:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b102:	79fb      	ldrb	r3, [r7, #7]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d14b      	bne.n	800b1a0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	69db      	ldr	r3, [r3, #28]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d009      	beq.n	800b124 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b110:	69bb      	ldr	r3, [r7, #24]
 800b112:	015a      	lsls	r2, r3, #5
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	4413      	add	r3, r2
 800b118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b11c:	461a      	mov	r2, r3
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	69db      	ldr	r3, [r3, #28]
 800b122:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	791b      	ldrb	r3, [r3, #4]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d128      	bne.n	800b17e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d110      	bne.n	800b15e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	0151      	lsls	r1, r2, #5
 800b14e:	69fa      	ldr	r2, [r7, #28]
 800b150:	440a      	add	r2, r1
 800b152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b156:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b15a:	6013      	str	r3, [r2, #0]
 800b15c:	e00f      	b.n	800b17e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	69ba      	ldr	r2, [r7, #24]
 800b16e:	0151      	lsls	r1, r2, #5
 800b170:	69fa      	ldr	r2, [r7, #28]
 800b172:	440a      	add	r2, r1
 800b174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b17c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	015a      	lsls	r2, r3, #5
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	4413      	add	r3, r2
 800b186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	69ba      	ldr	r2, [r7, #24]
 800b18e:	0151      	lsls	r1, r2, #5
 800b190:	69fa      	ldr	r2, [r7, #28]
 800b192:	440a      	add	r2, r1
 800b194:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b198:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b19c:	6013      	str	r3, [r2, #0]
 800b19e:	e16a      	b.n	800b476 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	015a      	lsls	r2, r3, #5
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	69ba      	ldr	r2, [r7, #24]
 800b1b0:	0151      	lsls	r1, r2, #5
 800b1b2:	69fa      	ldr	r2, [r7, #28]
 800b1b4:	440a      	add	r2, r1
 800b1b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b1be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	791b      	ldrb	r3, [r3, #4]
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d015      	beq.n	800b1f4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 8152 	beq.w	800b476 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	f003 030f 	and.w	r3, r3, #15
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b1e8:	69f9      	ldr	r1, [r7, #28]
 800b1ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	634b      	str	r3, [r1, #52]	@ 0x34
 800b1f2:	e140      	b.n	800b476 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b200:	2b00      	cmp	r3, #0
 800b202:	d117      	bne.n	800b234 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	015a      	lsls	r2, r3, #5
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	4413      	add	r3, r2
 800b20c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	69ba      	ldr	r2, [r7, #24]
 800b214:	0151      	lsls	r1, r2, #5
 800b216:	69fa      	ldr	r2, [r7, #28]
 800b218:	440a      	add	r2, r1
 800b21a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b21e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	e016      	b.n	800b254 <USB_EPStartXfer+0x308>
 800b226:	bf00      	nop
 800b228:	e007ffff 	.word	0xe007ffff
 800b22c:	fff80000 	.word	0xfff80000
 800b230:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	015a      	lsls	r2, r3, #5
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	4413      	add	r3, r2
 800b23c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	69ba      	ldr	r2, [r7, #24]
 800b244:	0151      	lsls	r1, r2, #5
 800b246:	69fa      	ldr	r2, [r7, #28]
 800b248:	440a      	add	r2, r1
 800b24a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b24e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b252:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	68d9      	ldr	r1, [r3, #12]
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	781a      	ldrb	r2, [r3, #0]
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	691b      	ldr	r3, [r3, #16]
 800b260:	b298      	uxth	r0, r3
 800b262:	79fb      	ldrb	r3, [r7, #7]
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	4603      	mov	r3, r0
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f000 f9b9 	bl	800b5e0 <USB_WritePacket>
 800b26e:	e102      	b.n	800b476 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	015a      	lsls	r2, r3, #5
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	4413      	add	r3, r2
 800b278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b27c:	691a      	ldr	r2, [r3, #16]
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	0159      	lsls	r1, r3, #5
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	440b      	add	r3, r1
 800b286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b28a:	4619      	mov	r1, r3
 800b28c:	4b7c      	ldr	r3, [pc, #496]	@ (800b480 <USB_EPStartXfer+0x534>)
 800b28e:	4013      	ands	r3, r2
 800b290:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	015a      	lsls	r2, r3, #5
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	4413      	add	r3, r2
 800b29a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b29e:	691a      	ldr	r2, [r3, #16]
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	0159      	lsls	r1, r3, #5
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	440b      	add	r3, r1
 800b2a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4b75      	ldr	r3, [pc, #468]	@ (800b484 <USB_EPStartXfer+0x538>)
 800b2b0:	4013      	ands	r3, r2
 800b2b2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d12f      	bne.n	800b31a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d003      	beq.n	800b2ca <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	689a      	ldr	r2, [r3, #8]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	689a      	ldr	r2, [r3, #8]
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	015a      	lsls	r2, r3, #5
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	4413      	add	r3, r2
 800b2da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2de:	691a      	ldr	r2, [r3, #16]
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	6a1b      	ldr	r3, [r3, #32]
 800b2e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2e8:	69b9      	ldr	r1, [r7, #24]
 800b2ea:	0148      	lsls	r0, r1, #5
 800b2ec:	69f9      	ldr	r1, [r7, #28]
 800b2ee:	4401      	add	r1, r0
 800b2f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2f8:	69bb      	ldr	r3, [r7, #24]
 800b2fa:	015a      	lsls	r2, r3, #5
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	4413      	add	r3, r2
 800b300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	0151      	lsls	r1, r2, #5
 800b30a:	69fa      	ldr	r2, [r7, #28]
 800b30c:	440a      	add	r2, r1
 800b30e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b312:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b316:	6113      	str	r3, [r2, #16]
 800b318:	e05f      	b.n	800b3da <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d123      	bne.n	800b36a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	015a      	lsls	r2, r3, #5
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	4413      	add	r3, r2
 800b32a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b32e:	691a      	ldr	r2, [r3, #16]
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b338:	69b9      	ldr	r1, [r7, #24]
 800b33a:	0148      	lsls	r0, r1, #5
 800b33c:	69f9      	ldr	r1, [r7, #28]
 800b33e:	4401      	add	r1, r0
 800b340:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b344:	4313      	orrs	r3, r2
 800b346:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	015a      	lsls	r2, r3, #5
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	4413      	add	r3, r2
 800b350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	69ba      	ldr	r2, [r7, #24]
 800b358:	0151      	lsls	r1, r2, #5
 800b35a:	69fa      	ldr	r2, [r7, #28]
 800b35c:	440a      	add	r2, r1
 800b35e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b362:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b366:	6113      	str	r3, [r2, #16]
 800b368:	e037      	b.n	800b3da <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	691a      	ldr	r2, [r3, #16]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	4413      	add	r3, r2
 800b374:	1e5a      	subs	r2, r3, #1
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b37e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	8afa      	ldrh	r2, [r7, #22]
 800b386:	fb03 f202 	mul.w	r2, r3, r2
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	015a      	lsls	r2, r3, #5
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b39a:	691a      	ldr	r2, [r3, #16]
 800b39c:	8afb      	ldrh	r3, [r7, #22]
 800b39e:	04d9      	lsls	r1, r3, #19
 800b3a0:	4b39      	ldr	r3, [pc, #228]	@ (800b488 <USB_EPStartXfer+0x53c>)
 800b3a2:	400b      	ands	r3, r1
 800b3a4:	69b9      	ldr	r1, [r7, #24]
 800b3a6:	0148      	lsls	r0, r1, #5
 800b3a8:	69f9      	ldr	r1, [r7, #28]
 800b3aa:	4401      	add	r1, r0
 800b3ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	015a      	lsls	r2, r3, #5
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3c0:	691a      	ldr	r2, [r3, #16]
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	6a1b      	ldr	r3, [r3, #32]
 800b3c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3ca:	69b9      	ldr	r1, [r7, #24]
 800b3cc:	0148      	lsls	r0, r1, #5
 800b3ce:	69f9      	ldr	r1, [r7, #28]
 800b3d0:	4401      	add	r1, r0
 800b3d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b3da:	79fb      	ldrb	r3, [r7, #7]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d10d      	bne.n	800b3fc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d009      	beq.n	800b3fc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	68d9      	ldr	r1, [r3, #12]
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3f8:	460a      	mov	r2, r1
 800b3fa:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	791b      	ldrb	r3, [r3, #4]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d128      	bne.n	800b456 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b410:	2b00      	cmp	r3, #0
 800b412:	d110      	bne.n	800b436 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	015a      	lsls	r2, r3, #5
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	69ba      	ldr	r2, [r7, #24]
 800b424:	0151      	lsls	r1, r2, #5
 800b426:	69fa      	ldr	r2, [r7, #28]
 800b428:	440a      	add	r2, r1
 800b42a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b42e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b432:	6013      	str	r3, [r2, #0]
 800b434:	e00f      	b.n	800b456 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	015a      	lsls	r2, r3, #5
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	4413      	add	r3, r2
 800b43e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	69ba      	ldr	r2, [r7, #24]
 800b446:	0151      	lsls	r1, r2, #5
 800b448:	69fa      	ldr	r2, [r7, #28]
 800b44a:	440a      	add	r2, r1
 800b44c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b454:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	015a      	lsls	r2, r3, #5
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	4413      	add	r3, r2
 800b45e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	69ba      	ldr	r2, [r7, #24]
 800b466:	0151      	lsls	r1, r2, #5
 800b468:	69fa      	ldr	r2, [r7, #28]
 800b46a:	440a      	add	r2, r1
 800b46c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b470:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b474:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3720      	adds	r7, #32
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	fff80000 	.word	0xfff80000
 800b484:	e007ffff 	.word	0xe007ffff
 800b488:	1ff80000 	.word	0x1ff80000

0800b48c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b087      	sub	sp, #28
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	785b      	ldrb	r3, [r3, #1]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d14a      	bne.n	800b540 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4c2:	f040 8086 	bne.w	800b5d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	7812      	ldrb	r2, [r2, #0]
 800b4da:	0151      	lsls	r1, r2, #5
 800b4dc:	693a      	ldr	r2, [r7, #16]
 800b4de:	440a      	add	r2, r1
 800b4e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b4e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	015a      	lsls	r2, r3, #5
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	7812      	ldrb	r2, [r2, #0]
 800b4fe:	0151      	lsls	r1, r2, #5
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	440a      	add	r2, r1
 800b504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b508:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b50c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	3301      	adds	r3, #1
 800b512:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d902      	bls.n	800b524 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	75fb      	strb	r3, [r7, #23]
          break;
 800b522:	e056      	b.n	800b5d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	015a      	lsls	r2, r3, #5
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	4413      	add	r3, r2
 800b52e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b53c:	d0e7      	beq.n	800b50e <USB_EPStopXfer+0x82>
 800b53e:	e048      	b.n	800b5d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	015a      	lsls	r2, r3, #5
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	4413      	add	r3, r2
 800b54a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b558:	d13b      	bne.n	800b5d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	015a      	lsls	r2, r3, #5
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	4413      	add	r3, r2
 800b564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	7812      	ldrb	r2, [r2, #0]
 800b56e:	0151      	lsls	r1, r2, #5
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	440a      	add	r2, r1
 800b574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b578:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b57c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	015a      	lsls	r2, r3, #5
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	4413      	add	r3, r2
 800b588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	7812      	ldrb	r2, [r2, #0]
 800b592:	0151      	lsls	r1, r2, #5
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	440a      	add	r2, r1
 800b598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b59c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b5a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d902      	bls.n	800b5b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b5b6:	e00c      	b.n	800b5d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	015a      	lsls	r2, r3, #5
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5d0:	d0e7      	beq.n	800b5a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b5d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	371c      	adds	r7, #28
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b089      	sub	sp, #36	@ 0x24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	4611      	mov	r1, r2
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	71fb      	strb	r3, [r7, #7]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b5fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b602:	2b00      	cmp	r3, #0
 800b604:	d123      	bne.n	800b64e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b606:	88bb      	ldrh	r3, [r7, #4]
 800b608:	3303      	adds	r3, #3
 800b60a:	089b      	lsrs	r3, r3, #2
 800b60c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b60e:	2300      	movs	r3, #0
 800b610:	61bb      	str	r3, [r7, #24]
 800b612:	e018      	b.n	800b646 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b614:	79fb      	ldrb	r3, [r7, #7]
 800b616:	031a      	lsls	r2, r3, #12
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	4413      	add	r3, r2
 800b61c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b620:	461a      	mov	r2, r3
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	3301      	adds	r3, #1
 800b62c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	3301      	adds	r3, #1
 800b632:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	3301      	adds	r3, #1
 800b638:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	3301      	adds	r3, #1
 800b63e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	3301      	adds	r3, #1
 800b644:	61bb      	str	r3, [r7, #24]
 800b646:	69ba      	ldr	r2, [r7, #24]
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d3e2      	bcc.n	800b614 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3724      	adds	r7, #36	@ 0x24
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b08b      	sub	sp, #44	@ 0x2c
 800b660:	af00      	add	r7, sp, #0
 800b662:	60f8      	str	r0, [r7, #12]
 800b664:	60b9      	str	r1, [r7, #8]
 800b666:	4613      	mov	r3, r2
 800b668:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b672:	88fb      	ldrh	r3, [r7, #6]
 800b674:	089b      	lsrs	r3, r3, #2
 800b676:	b29b      	uxth	r3, r3
 800b678:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b67a:	88fb      	ldrh	r3, [r7, #6]
 800b67c:	f003 0303 	and.w	r3, r3, #3
 800b680:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b682:	2300      	movs	r3, #0
 800b684:	623b      	str	r3, [r7, #32]
 800b686:	e014      	b.n	800b6b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b692:	601a      	str	r2, [r3, #0]
    pDest++;
 800b694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b696:	3301      	adds	r3, #1
 800b698:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69c:	3301      	adds	r3, #1
 800b69e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	623b      	str	r3, [r7, #32]
 800b6b2:	6a3a      	ldr	r2, [r7, #32]
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d3e6      	bcc.n	800b688 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b6ba:	8bfb      	ldrh	r3, [r7, #30]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d01e      	beq.n	800b6fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	f107 0310 	add.w	r3, r7, #16
 800b6d0:	6812      	ldr	r2, [r2, #0]
 800b6d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	00db      	lsls	r3, r3, #3
 800b6dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b6e0:	b2da      	uxtb	r2, r3
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e4:	701a      	strb	r2, [r3, #0]
      i++;
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	623b      	str	r3, [r7, #32]
      pDest++;
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b6f2:	8bfb      	ldrh	r3, [r7, #30]
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b6f8:	8bfb      	ldrh	r3, [r7, #30]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1ea      	bne.n	800b6d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b6fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b700:	4618      	mov	r0, r3
 800b702:	372c      	adds	r7, #44	@ 0x2c
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	785b      	ldrb	r3, [r3, #1]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d12c      	bne.n	800b782 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	015a      	lsls	r2, r3, #5
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	4413      	add	r3, r2
 800b730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	db12      	blt.n	800b760 <USB_EPSetStall+0x54>
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00f      	beq.n	800b760 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	015a      	lsls	r2, r3, #5
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	4413      	add	r3, r2
 800b748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	68ba      	ldr	r2, [r7, #8]
 800b750:	0151      	lsls	r1, r2, #5
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	440a      	add	r2, r1
 800b756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b75a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b75e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	015a      	lsls	r2, r3, #5
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	4413      	add	r3, r2
 800b768:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	68ba      	ldr	r2, [r7, #8]
 800b770:	0151      	lsls	r1, r2, #5
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	440a      	add	r2, r1
 800b776:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b77a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b77e:	6013      	str	r3, [r2, #0]
 800b780:	e02b      	b.n	800b7da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	015a      	lsls	r2, r3, #5
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	4413      	add	r3, r2
 800b78a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	db12      	blt.n	800b7ba <USB_EPSetStall+0xae>
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00f      	beq.n	800b7ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	0151      	lsls	r1, r2, #5
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	440a      	add	r2, r1
 800b7b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b7b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	015a      	lsls	r2, r3, #5
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	0151      	lsls	r1, r2, #5
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	440a      	add	r2, r1
 800b7d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b7d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	3714      	adds	r7, #20
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	785b      	ldrb	r3, [r3, #1]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d128      	bne.n	800b856 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	015a      	lsls	r2, r3, #5
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	4413      	add	r3, r2
 800b80c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68ba      	ldr	r2, [r7, #8]
 800b814:	0151      	lsls	r1, r2, #5
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	440a      	add	r2, r1
 800b81a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b81e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b822:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	791b      	ldrb	r3, [r3, #4]
 800b828:	2b03      	cmp	r3, #3
 800b82a:	d003      	beq.n	800b834 <USB_EPClearStall+0x4c>
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	791b      	ldrb	r3, [r3, #4]
 800b830:	2b02      	cmp	r3, #2
 800b832:	d138      	bne.n	800b8a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	015a      	lsls	r2, r3, #5
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	4413      	add	r3, r2
 800b83c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	0151      	lsls	r1, r2, #5
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	440a      	add	r2, r1
 800b84a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b84e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b852:	6013      	str	r3, [r2, #0]
 800b854:	e027      	b.n	800b8a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	015a      	lsls	r2, r3, #5
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	4413      	add	r3, r2
 800b85e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	0151      	lsls	r1, r2, #5
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	440a      	add	r2, r1
 800b86c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b870:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b874:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	791b      	ldrb	r3, [r3, #4]
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	d003      	beq.n	800b886 <USB_EPClearStall+0x9e>
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	791b      	ldrb	r3, [r3, #4]
 800b882:	2b02      	cmp	r3, #2
 800b884:	d10f      	bne.n	800b8a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	015a      	lsls	r2, r3, #5
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	4413      	add	r3, r2
 800b88e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	68ba      	ldr	r2, [r7, #8]
 800b896:	0151      	lsls	r1, r2, #5
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	440a      	add	r2, r1
 800b89c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b8d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	78fb      	ldrb	r3, [r7, #3]
 800b8e2:	011b      	lsls	r3, r3, #4
 800b8e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b8e8:	68f9      	ldr	r1, [r7, #12]
 800b8ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b91a:	f023 0303 	bic.w	r3, r3, #3
 800b91e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b92e:	f023 0302 	bic.w	r3, r3, #2
 800b932:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr

0800b942 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b942:	b480      	push	{r7}
 800b944:	b085      	sub	sp, #20
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b95c:	f023 0303 	bic.w	r3, r3, #3
 800b960:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b970:	f043 0302 	orr.w	r3, r3, #2
 800b974:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	695b      	ldr	r3, [r3, #20]
 800b990:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	4013      	ands	r3, r2
 800b99a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b99c:	68fb      	ldr	r3, [r7, #12]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9aa:	b480      	push	{r7}
 800b9ac:	b085      	sub	sp, #20
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9bc:	699b      	ldr	r3, [r3, #24]
 800b9be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9c6:	69db      	ldr	r3, [r3, #28]
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	4013      	ands	r3, r2
 800b9cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	0c1b      	lsrs	r3, r3, #16
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3714      	adds	r7, #20
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b085      	sub	sp, #20
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9fa:	69db      	ldr	r3, [r3, #28]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	4013      	ands	r3, r2
 800ba00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	b29b      	uxth	r3, r3
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3714      	adds	r7, #20
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba12:	b480      	push	{r7}
 800ba14:	b085      	sub	sp, #20
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ba22:	78fb      	ldrb	r3, [r7, #3]
 800ba24:	015a      	lsls	r2, r3, #5
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	4413      	add	r3, r2
 800ba2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba38:	695b      	ldr	r3, [r3, #20]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba40:	68bb      	ldr	r3, [r7, #8]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3714      	adds	r7, #20
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b087      	sub	sp, #28
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	460b      	mov	r3, r1
 800ba58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ba72:	78fb      	ldrb	r3, [r7, #3]
 800ba74:	f003 030f 	and.w	r3, r3, #15
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba7e:	01db      	lsls	r3, r3, #7
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	693a      	ldr	r2, [r7, #16]
 800ba84:	4313      	orrs	r3, r2
 800ba86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ba88:	78fb      	ldrb	r3, [r7, #3]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	4013      	ands	r3, r2
 800ba9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba9c:	68bb      	ldr	r3, [r7, #8]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	371c      	adds	r7, #28
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800baaa:	b480      	push	{r7}
 800baac:	b083      	sub	sp, #12
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	f003 0301 	and.w	r3, r3, #1
}
 800baba:	4618      	mov	r0, r3
 800babc:	370c      	adds	r7, #12
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
	...

0800bac8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bae2:	4619      	mov	r1, r3
 800bae4:	4b09      	ldr	r3, [pc, #36]	@ (800bb0c <USB_ActivateSetup+0x44>)
 800bae6:	4013      	ands	r3, r2
 800bae8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800baf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bafc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3714      	adds	r7, #20
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr
 800bb0c:	fffff800 	.word	0xfffff800

0800bb10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b087      	sub	sp, #28
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	333c      	adds	r3, #60	@ 0x3c
 800bb26:	3304      	adds	r3, #4
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	4a26      	ldr	r2, [pc, #152]	@ (800bbc8 <USB_EP0_OutStart+0xb8>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d90a      	bls.n	800bb4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb44:	d101      	bne.n	800bb4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	e037      	b.n	800bbba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb50:	461a      	mov	r2, r3
 800bb52:	2300      	movs	r3, #0
 800bb54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bb68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	697a      	ldr	r2, [r7, #20]
 800bb74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb78:	f043 0318 	orr.w	r3, r3, #24
 800bb7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	697a      	ldr	r2, [r7, #20]
 800bb88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb8c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bb90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bb92:	7afb      	ldrb	r3, [r7, #11]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d10f      	bne.n	800bbb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb9e:	461a      	mov	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	697a      	ldr	r2, [r7, #20]
 800bbae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbb2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bbb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	371c      	adds	r7, #28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	4f54300a 	.word	0x4f54300a

0800bbcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bbe4:	d901      	bls.n	800bbea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	e01b      	b.n	800bc22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	daf2      	bge.n	800bbd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	f043 0201 	orr.w	r2, r3, #1
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3301      	adds	r3, #1
 800bc06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc0e:	d901      	bls.n	800bc14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bc10:	2303      	movs	r3, #3
 800bc12:	e006      	b.n	800bc22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	691b      	ldr	r3, [r3, #16]
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d0f0      	beq.n	800bc02 <USB_CoreReset+0x36>

  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
	...

0800bc30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc3c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bc40:	f002 fd8c 	bl	800e75c <malloc>
 800bc44:	4603      	mov	r3, r0
 800bc46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d109      	bne.n	800bc62 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	32b0      	adds	r2, #176	@ 0xb0
 800bc58:	2100      	movs	r1, #0
 800bc5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bc5e:	2302      	movs	r3, #2
 800bc60:	e0d4      	b.n	800be0c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bc62:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bc66:	2100      	movs	r1, #0
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f002 fe35 	bl	800e8d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	32b0      	adds	r2, #176	@ 0xb0
 800bc78:	68f9      	ldr	r1, [r7, #12]
 800bc7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	32b0      	adds	r2, #176	@ 0xb0
 800bc88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	7c1b      	ldrb	r3, [r3, #16]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d138      	bne.n	800bd0c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bc9a:	4b5e      	ldr	r3, [pc, #376]	@ (800be14 <USBD_CDC_Init+0x1e4>)
 800bc9c:	7819      	ldrb	r1, [r3, #0]
 800bc9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bca2:	2202      	movs	r2, #2
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f002 fbb6 	bl	800e416 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bcaa:	4b5a      	ldr	r3, [pc, #360]	@ (800be14 <USBD_CDC_Init+0x1e4>)
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	f003 020f 	and.w	r2, r3, #15
 800bcb2:	6879      	ldr	r1, [r7, #4]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	440b      	add	r3, r1
 800bcbe:	3324      	adds	r3, #36	@ 0x24
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bcc4:	4b54      	ldr	r3, [pc, #336]	@ (800be18 <USBD_CDC_Init+0x1e8>)
 800bcc6:	7819      	ldrb	r1, [r3, #0]
 800bcc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bccc:	2202      	movs	r2, #2
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f002 fba1 	bl	800e416 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bcd4:	4b50      	ldr	r3, [pc, #320]	@ (800be18 <USBD_CDC_Init+0x1e8>)
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	f003 020f 	and.w	r2, r3, #15
 800bcdc:	6879      	ldr	r1, [r7, #4]
 800bcde:	4613      	mov	r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	4413      	add	r3, r2
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	440b      	add	r3, r1
 800bce8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bcec:	2201      	movs	r2, #1
 800bcee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bcf0:	4b4a      	ldr	r3, [pc, #296]	@ (800be1c <USBD_CDC_Init+0x1ec>)
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	f003 020f 	and.w	r2, r3, #15
 800bcf8:	6879      	ldr	r1, [r7, #4]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	4413      	add	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	440b      	add	r3, r1
 800bd04:	3326      	adds	r3, #38	@ 0x26
 800bd06:	2210      	movs	r2, #16
 800bd08:	801a      	strh	r2, [r3, #0]
 800bd0a:	e035      	b.n	800bd78 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bd0c:	4b41      	ldr	r3, [pc, #260]	@ (800be14 <USBD_CDC_Init+0x1e4>)
 800bd0e:	7819      	ldrb	r1, [r3, #0]
 800bd10:	2340      	movs	r3, #64	@ 0x40
 800bd12:	2202      	movs	r2, #2
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f002 fb7e 	bl	800e416 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bd1a:	4b3e      	ldr	r3, [pc, #248]	@ (800be14 <USBD_CDC_Init+0x1e4>)
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	f003 020f 	and.w	r2, r3, #15
 800bd22:	6879      	ldr	r1, [r7, #4]
 800bd24:	4613      	mov	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	4413      	add	r3, r2
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	440b      	add	r3, r1
 800bd2e:	3324      	adds	r3, #36	@ 0x24
 800bd30:	2201      	movs	r2, #1
 800bd32:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bd34:	4b38      	ldr	r3, [pc, #224]	@ (800be18 <USBD_CDC_Init+0x1e8>)
 800bd36:	7819      	ldrb	r1, [r3, #0]
 800bd38:	2340      	movs	r3, #64	@ 0x40
 800bd3a:	2202      	movs	r2, #2
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f002 fb6a 	bl	800e416 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd42:	4b35      	ldr	r3, [pc, #212]	@ (800be18 <USBD_CDC_Init+0x1e8>)
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	f003 020f 	and.w	r2, r3, #15
 800bd4a:	6879      	ldr	r1, [r7, #4]
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	440b      	add	r3, r1
 800bd56:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bd5e:	4b2f      	ldr	r3, [pc, #188]	@ (800be1c <USBD_CDC_Init+0x1ec>)
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	f003 020f 	and.w	r2, r3, #15
 800bd66:	6879      	ldr	r1, [r7, #4]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	4413      	add	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	440b      	add	r3, r1
 800bd72:	3326      	adds	r3, #38	@ 0x26
 800bd74:	2210      	movs	r2, #16
 800bd76:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bd78:	4b28      	ldr	r3, [pc, #160]	@ (800be1c <USBD_CDC_Init+0x1ec>)
 800bd7a:	7819      	ldrb	r1, [r3, #0]
 800bd7c:	2308      	movs	r3, #8
 800bd7e:	2203      	movs	r2, #3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f002 fb48 	bl	800e416 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bd86:	4b25      	ldr	r3, [pc, #148]	@ (800be1c <USBD_CDC_Init+0x1ec>)
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	f003 020f 	and.w	r2, r3, #15
 800bd8e:	6879      	ldr	r1, [r7, #4]
 800bd90:	4613      	mov	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4413      	add	r3, r2
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	440b      	add	r3, r1
 800bd9a:	3324      	adds	r3, #36	@ 0x24
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	33b0      	adds	r3, #176	@ 0xb0
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	4413      	add	r3, r2
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d101      	bne.n	800bdda <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	e018      	b.n	800be0c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	7c1b      	ldrb	r3, [r3, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10a      	bne.n	800bdf8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bde2:	4b0d      	ldr	r3, [pc, #52]	@ (800be18 <USBD_CDC_Init+0x1e8>)
 800bde4:	7819      	ldrb	r1, [r3, #0]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bdec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f002 fbff 	bl	800e5f4 <USBD_LL_PrepareReceive>
 800bdf6:	e008      	b.n	800be0a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bdf8:	4b07      	ldr	r3, [pc, #28]	@ (800be18 <USBD_CDC_Init+0x1e8>)
 800bdfa:	7819      	ldrb	r1, [r3, #0]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800be02:	2340      	movs	r3, #64	@ 0x40
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f002 fbf5 	bl	800e5f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	2000009f 	.word	0x2000009f
 800be18:	200000a0 	.word	0x200000a0
 800be1c:	200000a1 	.word	0x200000a1

0800be20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	460b      	mov	r3, r1
 800be2a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800be2c:	4b3a      	ldr	r3, [pc, #232]	@ (800bf18 <USBD_CDC_DeInit+0xf8>)
 800be2e:	781b      	ldrb	r3, [r3, #0]
 800be30:	4619      	mov	r1, r3
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f002 fb15 	bl	800e462 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800be38:	4b37      	ldr	r3, [pc, #220]	@ (800bf18 <USBD_CDC_DeInit+0xf8>)
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	f003 020f 	and.w	r2, r3, #15
 800be40:	6879      	ldr	r1, [r7, #4]
 800be42:	4613      	mov	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4413      	add	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	440b      	add	r3, r1
 800be4c:	3324      	adds	r3, #36	@ 0x24
 800be4e:	2200      	movs	r2, #0
 800be50:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800be52:	4b32      	ldr	r3, [pc, #200]	@ (800bf1c <USBD_CDC_DeInit+0xfc>)
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	4619      	mov	r1, r3
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f002 fb02 	bl	800e462 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800be5e:	4b2f      	ldr	r3, [pc, #188]	@ (800bf1c <USBD_CDC_DeInit+0xfc>)
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	f003 020f 	and.w	r2, r3, #15
 800be66:	6879      	ldr	r1, [r7, #4]
 800be68:	4613      	mov	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	440b      	add	r3, r1
 800be72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be76:	2200      	movs	r2, #0
 800be78:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800be7a:	4b29      	ldr	r3, [pc, #164]	@ (800bf20 <USBD_CDC_DeInit+0x100>)
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	4619      	mov	r1, r3
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f002 faee 	bl	800e462 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800be86:	4b26      	ldr	r3, [pc, #152]	@ (800bf20 <USBD_CDC_DeInit+0x100>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	f003 020f 	and.w	r2, r3, #15
 800be8e:	6879      	ldr	r1, [r7, #4]
 800be90:	4613      	mov	r3, r2
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	440b      	add	r3, r1
 800be9a:	3324      	adds	r3, #36	@ 0x24
 800be9c:	2200      	movs	r2, #0
 800be9e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bea0:	4b1f      	ldr	r3, [pc, #124]	@ (800bf20 <USBD_CDC_DeInit+0x100>)
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	f003 020f 	and.w	r2, r3, #15
 800bea8:	6879      	ldr	r1, [r7, #4]
 800beaa:	4613      	mov	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	4413      	add	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	440b      	add	r3, r1
 800beb4:	3326      	adds	r3, #38	@ 0x26
 800beb6:	2200      	movs	r2, #0
 800beb8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	32b0      	adds	r2, #176	@ 0xb0
 800bec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d01f      	beq.n	800bf0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	33b0      	adds	r3, #176	@ 0xb0
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	32b0      	adds	r2, #176	@ 0xb0
 800beea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beee:	4618      	mov	r0, r3
 800bef0:	f002 fc3c 	bl	800e76c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	32b0      	adds	r2, #176	@ 0xb0
 800befe:	2100      	movs	r1, #0
 800bf00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	2000009f 	.word	0x2000009f
 800bf1c:	200000a0 	.word	0x200000a0
 800bf20:	200000a1 	.word	0x200000a1

0800bf24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b086      	sub	sp, #24
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	32b0      	adds	r2, #176	@ 0xb0
 800bf38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bf42:	2300      	movs	r3, #0
 800bf44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d101      	bne.n	800bf54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bf50:	2303      	movs	r3, #3
 800bf52:	e0bf      	b.n	800c0d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d050      	beq.n	800c002 <USBD_CDC_Setup+0xde>
 800bf60:	2b20      	cmp	r3, #32
 800bf62:	f040 80af 	bne.w	800c0c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	88db      	ldrh	r3, [r3, #6]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d03a      	beq.n	800bfe4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	b25b      	sxtb	r3, r3
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	da1b      	bge.n	800bfb0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	33b0      	adds	r3, #176	@ 0xb0
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	683a      	ldr	r2, [r7, #0]
 800bf8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bf8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf90:	683a      	ldr	r2, [r7, #0]
 800bf92:	88d2      	ldrh	r2, [r2, #6]
 800bf94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	88db      	ldrh	r3, [r3, #6]
 800bf9a:	2b07      	cmp	r3, #7
 800bf9c:	bf28      	it	cs
 800bf9e:	2307      	movcs	r3, #7
 800bfa0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	89fa      	ldrh	r2, [r7, #14]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 fdbd 	bl	800db28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bfae:	e090      	b.n	800c0d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	785a      	ldrb	r2, [r3, #1]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	88db      	ldrh	r3, [r3, #6]
 800bfbe:	2b3f      	cmp	r3, #63	@ 0x3f
 800bfc0:	d803      	bhi.n	800bfca <USBD_CDC_Setup+0xa6>
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	88db      	ldrh	r3, [r3, #6]
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	e000      	b.n	800bfcc <USBD_CDC_Setup+0xa8>
 800bfca:	2240      	movs	r2, #64	@ 0x40
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bfd2:	6939      	ldr	r1, [r7, #16]
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bfda:	461a      	mov	r2, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f001 fdcf 	bl	800db80 <USBD_CtlPrepareRx>
      break;
 800bfe2:	e076      	b.n	800c0d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	33b0      	adds	r3, #176	@ 0xb0
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	683a      	ldr	r2, [r7, #0]
 800bff8:	7850      	ldrb	r0, [r2, #1]
 800bffa:	2200      	movs	r2, #0
 800bffc:	6839      	ldr	r1, [r7, #0]
 800bffe:	4798      	blx	r3
      break;
 800c000:	e067      	b.n	800c0d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	785b      	ldrb	r3, [r3, #1]
 800c006:	2b0b      	cmp	r3, #11
 800c008:	d851      	bhi.n	800c0ae <USBD_CDC_Setup+0x18a>
 800c00a:	a201      	add	r2, pc, #4	@ (adr r2, 800c010 <USBD_CDC_Setup+0xec>)
 800c00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c010:	0800c041 	.word	0x0800c041
 800c014:	0800c0bd 	.word	0x0800c0bd
 800c018:	0800c0af 	.word	0x0800c0af
 800c01c:	0800c0af 	.word	0x0800c0af
 800c020:	0800c0af 	.word	0x0800c0af
 800c024:	0800c0af 	.word	0x0800c0af
 800c028:	0800c0af 	.word	0x0800c0af
 800c02c:	0800c0af 	.word	0x0800c0af
 800c030:	0800c0af 	.word	0x0800c0af
 800c034:	0800c0af 	.word	0x0800c0af
 800c038:	0800c06b 	.word	0x0800c06b
 800c03c:	0800c095 	.word	0x0800c095
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c046:	b2db      	uxtb	r3, r3
 800c048:	2b03      	cmp	r3, #3
 800c04a:	d107      	bne.n	800c05c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c04c:	f107 030a 	add.w	r3, r7, #10
 800c050:	2202      	movs	r2, #2
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f001 fd67 	bl	800db28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c05a:	e032      	b.n	800c0c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f001 fce5 	bl	800da2e <USBD_CtlError>
            ret = USBD_FAIL;
 800c064:	2303      	movs	r3, #3
 800c066:	75fb      	strb	r3, [r7, #23]
          break;
 800c068:	e02b      	b.n	800c0c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b03      	cmp	r3, #3
 800c074:	d107      	bne.n	800c086 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c076:	f107 030d 	add.w	r3, r7, #13
 800c07a:	2201      	movs	r2, #1
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f001 fd52 	bl	800db28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c084:	e01d      	b.n	800c0c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f001 fcd0 	bl	800da2e <USBD_CtlError>
            ret = USBD_FAIL;
 800c08e:	2303      	movs	r3, #3
 800c090:	75fb      	strb	r3, [r7, #23]
          break;
 800c092:	e016      	b.n	800c0c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	2b03      	cmp	r3, #3
 800c09e:	d00f      	beq.n	800c0c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f001 fcc3 	bl	800da2e <USBD_CtlError>
            ret = USBD_FAIL;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c0ac:	e008      	b.n	800c0c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c0ae:	6839      	ldr	r1, [r7, #0]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f001 fcbc 	bl	800da2e <USBD_CtlError>
          ret = USBD_FAIL;
 800c0b6:	2303      	movs	r3, #3
 800c0b8:	75fb      	strb	r3, [r7, #23]
          break;
 800c0ba:	e002      	b.n	800c0c2 <USBD_CDC_Setup+0x19e>
          break;
 800c0bc:	bf00      	nop
 800c0be:	e008      	b.n	800c0d2 <USBD_CDC_Setup+0x1ae>
          break;
 800c0c0:	bf00      	nop
      }
      break;
 800c0c2:	e006      	b.n	800c0d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c0c4:	6839      	ldr	r1, [r7, #0]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f001 fcb1 	bl	800da2e <USBD_CtlError>
      ret = USBD_FAIL;
 800c0cc:	2303      	movs	r3, #3
 800c0ce:	75fb      	strb	r3, [r7, #23]
      break;
 800c0d0:	bf00      	nop
  }

  return (uint8_t)ret;
 800c0d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c0ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	32b0      	adds	r2, #176	@ 0xb0
 800c0fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d101      	bne.n	800c106 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c102:	2303      	movs	r3, #3
 800c104:	e065      	b.n	800c1d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	32b0      	adds	r2, #176	@ 0xb0
 800c110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c114:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c116:	78fb      	ldrb	r3, [r7, #3]
 800c118:	f003 020f 	and.w	r2, r3, #15
 800c11c:	6879      	ldr	r1, [r7, #4]
 800c11e:	4613      	mov	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4413      	add	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	440b      	add	r3, r1
 800c128:	3318      	adds	r3, #24
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d02f      	beq.n	800c190 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	f003 020f 	and.w	r2, r3, #15
 800c136:	6879      	ldr	r1, [r7, #4]
 800c138:	4613      	mov	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4413      	add	r3, r2
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	440b      	add	r3, r1
 800c142:	3318      	adds	r3, #24
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	78fb      	ldrb	r3, [r7, #3]
 800c148:	f003 010f 	and.w	r1, r3, #15
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	460b      	mov	r3, r1
 800c150:	00db      	lsls	r3, r3, #3
 800c152:	440b      	add	r3, r1
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	4403      	add	r3, r0
 800c158:	331c      	adds	r3, #28
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c160:	fb01 f303 	mul.w	r3, r1, r3
 800c164:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c166:	2b00      	cmp	r3, #0
 800c168:	d112      	bne.n	800c190 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c16a:	78fb      	ldrb	r3, [r7, #3]
 800c16c:	f003 020f 	and.w	r2, r3, #15
 800c170:	6879      	ldr	r1, [r7, #4]
 800c172:	4613      	mov	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	4413      	add	r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	440b      	add	r3, r1
 800c17c:	3318      	adds	r3, #24
 800c17e:	2200      	movs	r2, #0
 800c180:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c182:	78f9      	ldrb	r1, [r7, #3]
 800c184:	2300      	movs	r3, #0
 800c186:	2200      	movs	r2, #0
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f002 fa12 	bl	800e5b2 <USBD_LL_Transmit>
 800c18e:	e01f      	b.n	800c1d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2200      	movs	r2, #0
 800c194:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	33b0      	adds	r3, #176	@ 0xb0
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d010      	beq.n	800c1d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	33b0      	adds	r3, #176	@ 0xb0
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c1cc:	78fa      	ldrb	r2, [r7, #3]
 800c1ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	32b0      	adds	r2, #176	@ 0xb0
 800c1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	32b0      	adds	r2, #176	@ 0xb0
 800c200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d101      	bne.n	800c20c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c208:	2303      	movs	r3, #3
 800c20a:	e01a      	b.n	800c242 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c20c:	78fb      	ldrb	r3, [r7, #3]
 800c20e:	4619      	mov	r1, r3
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f002 fa10 	bl	800e636 <USBD_LL_GetRxDataSize>
 800c216:	4602      	mov	r2, r0
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	33b0      	adds	r3, #176	@ 0xb0
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	4413      	add	r3, r2
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c23c:	4611      	mov	r1, r2
 800c23e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	32b0      	adds	r2, #176	@ 0xb0
 800c25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c260:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c268:	2303      	movs	r3, #3
 800c26a:	e024      	b.n	800c2b6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	33b0      	adds	r3, #176	@ 0xb0
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d019      	beq.n	800c2b4 <USBD_CDC_EP0_RxReady+0x6a>
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c286:	2bff      	cmp	r3, #255	@ 0xff
 800c288:	d014      	beq.n	800c2b4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	33b0      	adds	r3, #176	@ 0xb0
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	4413      	add	r3, r2
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	689b      	ldr	r3, [r3, #8]
 800c29c:	68fa      	ldr	r2, [r7, #12]
 800c29e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c2a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c2aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	22ff      	movs	r2, #255	@ 0xff
 800c2b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c2b4:	2300      	movs	r3, #0
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
	...

0800c2c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c2c8:	2182      	movs	r1, #130	@ 0x82
 800c2ca:	4818      	ldr	r0, [pc, #96]	@ (800c32c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2cc:	f000 fd4f 	bl	800cd6e <USBD_GetEpDesc>
 800c2d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c2d2:	2101      	movs	r1, #1
 800c2d4:	4815      	ldr	r0, [pc, #84]	@ (800c32c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2d6:	f000 fd4a 	bl	800cd6e <USBD_GetEpDesc>
 800c2da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c2dc:	2181      	movs	r1, #129	@ 0x81
 800c2de:	4813      	ldr	r0, [pc, #76]	@ (800c32c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c2e0:	f000 fd45 	bl	800cd6e <USBD_GetEpDesc>
 800c2e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	2210      	movs	r2, #16
 800c2f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d006      	beq.n	800c306 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c300:	711a      	strb	r2, [r3, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d006      	beq.n	800c31a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2200      	movs	r2, #0
 800c310:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c314:	711a      	strb	r2, [r3, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2243      	movs	r2, #67	@ 0x43
 800c31e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c320:	4b02      	ldr	r3, [pc, #8]	@ (800c32c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c322:	4618      	mov	r0, r3
 800c324:	3718      	adds	r7, #24
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	2000005c 	.word	0x2000005c

0800c330 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c338:	2182      	movs	r1, #130	@ 0x82
 800c33a:	4818      	ldr	r0, [pc, #96]	@ (800c39c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c33c:	f000 fd17 	bl	800cd6e <USBD_GetEpDesc>
 800c340:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c342:	2101      	movs	r1, #1
 800c344:	4815      	ldr	r0, [pc, #84]	@ (800c39c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c346:	f000 fd12 	bl	800cd6e <USBD_GetEpDesc>
 800c34a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c34c:	2181      	movs	r1, #129	@ 0x81
 800c34e:	4813      	ldr	r0, [pc, #76]	@ (800c39c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c350:	f000 fd0d 	bl	800cd6e <USBD_GetEpDesc>
 800c354:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2210      	movs	r2, #16
 800c360:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d006      	beq.n	800c376 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	2200      	movs	r2, #0
 800c36c:	711a      	strb	r2, [r3, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f042 0202 	orr.w	r2, r2, #2
 800c374:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d006      	beq.n	800c38a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2200      	movs	r2, #0
 800c380:	711a      	strb	r2, [r3, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	f042 0202 	orr.w	r2, r2, #2
 800c388:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2243      	movs	r2, #67	@ 0x43
 800c38e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c390:	4b02      	ldr	r3, [pc, #8]	@ (800c39c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c392:	4618      	mov	r0, r3
 800c394:	3718      	adds	r7, #24
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	2000005c 	.word	0x2000005c

0800c3a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c3a8:	2182      	movs	r1, #130	@ 0x82
 800c3aa:	4818      	ldr	r0, [pc, #96]	@ (800c40c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c3ac:	f000 fcdf 	bl	800cd6e <USBD_GetEpDesc>
 800c3b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	4815      	ldr	r0, [pc, #84]	@ (800c40c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c3b6:	f000 fcda 	bl	800cd6e <USBD_GetEpDesc>
 800c3ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c3bc:	2181      	movs	r1, #129	@ 0x81
 800c3be:	4813      	ldr	r0, [pc, #76]	@ (800c40c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c3c0:	f000 fcd5 	bl	800cd6e <USBD_GetEpDesc>
 800c3c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d002      	beq.n	800c3d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	2210      	movs	r2, #16
 800c3d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d006      	beq.n	800c3e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c3e0:	711a      	strb	r2, [r3, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d006      	beq.n	800c3fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c3f4:	711a      	strb	r2, [r3, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2243      	movs	r2, #67	@ 0x43
 800c3fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c400:	4b02      	ldr	r3, [pc, #8]	@ (800c40c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c402:	4618      	mov	r0, r3
 800c404:	3718      	adds	r7, #24
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	2000005c 	.word	0x2000005c

0800c410 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	220a      	movs	r2, #10
 800c41c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c41e:	4b03      	ldr	r3, [pc, #12]	@ (800c42c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c420:	4618      	mov	r0, r3
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr
 800c42c:	20000018 	.word	0x20000018

0800c430 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d101      	bne.n	800c444 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c440:	2303      	movs	r3, #3
 800c442:	e009      	b.n	800c458 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	33b0      	adds	r3, #176	@ 0xb0
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	4413      	add	r3, r2
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c464:	b480      	push	{r7}
 800c466:	b087      	sub	sp, #28
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	32b0      	adds	r2, #176	@ 0xb0
 800c47a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c47e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d101      	bne.n	800c48a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c486:	2303      	movs	r3, #3
 800c488:	e008      	b.n	800c49c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c49a:	2300      	movs	r3, #0
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	371c      	adds	r7, #28
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	32b0      	adds	r2, #176	@ 0xb0
 800c4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e004      	b.n	800c4d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
	...

0800c4e4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	32b0      	adds	r2, #176	@ 0xb0
 800c4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4fa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d101      	bne.n	800c50a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c506:	2303      	movs	r3, #3
 800c508:	e025      	b.n	800c556 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c510:	2b00      	cmp	r3, #0
 800c512:	d11f      	bne.n	800c554 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	2201      	movs	r2, #1
 800c518:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c51c:	4b10      	ldr	r3, [pc, #64]	@ (800c560 <USBD_CDC_TransmitPacket+0x7c>)
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	f003 020f 	and.w	r2, r3, #15
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	4613      	mov	r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	4413      	add	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4403      	add	r3, r0
 800c536:	3318      	adds	r3, #24
 800c538:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c53a:	4b09      	ldr	r3, [pc, #36]	@ (800c560 <USBD_CDC_TransmitPacket+0x7c>)
 800c53c:	7819      	ldrb	r1, [r3, #0]
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f002 f831 	bl	800e5b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c550:	2300      	movs	r3, #0
 800c552:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c554:	7bfb      	ldrb	r3, [r7, #15]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	2000009f 	.word	0x2000009f

0800c564 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	32b0      	adds	r2, #176	@ 0xb0
 800c576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c57a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	32b0      	adds	r2, #176	@ 0xb0
 800c586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c58e:	2303      	movs	r3, #3
 800c590:	e018      	b.n	800c5c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	7c1b      	ldrb	r3, [r3, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10a      	bne.n	800c5b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c59a:	4b0c      	ldr	r3, [pc, #48]	@ (800c5cc <USBD_CDC_ReceivePacket+0x68>)
 800c59c:	7819      	ldrb	r1, [r3, #0]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c5a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f002 f823 	bl	800e5f4 <USBD_LL_PrepareReceive>
 800c5ae:	e008      	b.n	800c5c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c5b0:	4b06      	ldr	r3, [pc, #24]	@ (800c5cc <USBD_CDC_ReceivePacket+0x68>)
 800c5b2:	7819      	ldrb	r1, [r3, #0]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c5ba:	2340      	movs	r3, #64	@ 0x40
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f002 f819 	bl	800e5f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	200000a0 	.word	0x200000a0

0800c5d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b086      	sub	sp, #24
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d101      	bne.n	800c5e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	e01f      	b.n	800c628 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d003      	beq.n	800c60e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2201      	movs	r2, #1
 800c612:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	79fa      	ldrb	r2, [r7, #7]
 800c61a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f001 fe93 	bl	800e348 <USBD_LL_Init>
 800c622:	4603      	mov	r3, r0
 800c624:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c626:	7dfb      	ldrb	r3, [r7, #23]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3718      	adds	r7, #24
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c63a:	2300      	movs	r3, #0
 800c63c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c644:	2303      	movs	r3, #3
 800c646:	e025      	b.n	800c694 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	32ae      	adds	r2, #174	@ 0xae
 800c65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c65e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00f      	beq.n	800c684 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	32ae      	adds	r2, #174	@ 0xae
 800c66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c674:	f107 020e 	add.w	r2, r7, #14
 800c678:	4610      	mov	r0, r2
 800c67a:	4798      	blx	r3
 800c67c:	4602      	mov	r2, r0
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c68a:	1c5a      	adds	r2, r3, #1
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f001 fe9b 	bl	800e3e0 <USBD_LL_Start>
 800c6aa:	4603      	mov	r3, r0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	370c      	adds	r7, #12
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr

0800c6ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b084      	sub	sp, #16
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d009      	beq.n	800c6f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	78fa      	ldrb	r2, [r7, #3]
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	4798      	blx	r3
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b084      	sub	sp, #16
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	460b      	mov	r3, r1
 800c70c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c70e:	2300      	movs	r3, #0
 800c710:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	78fa      	ldrb	r2, [r7, #3]
 800c71c:	4611      	mov	r1, r2
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	4798      	blx	r3
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d001      	beq.n	800c72c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c728:	2303      	movs	r3, #3
 800c72a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b084      	sub	sp, #16
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
 800c73e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	4618      	mov	r0, r3
 800c74a:	f001 f936 	bl	800d9ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c75c:	461a      	mov	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c76a:	f003 031f 	and.w	r3, r3, #31
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d01a      	beq.n	800c7a8 <USBD_LL_SetupStage+0x72>
 800c772:	2b02      	cmp	r3, #2
 800c774:	d822      	bhi.n	800c7bc <USBD_LL_SetupStage+0x86>
 800c776:	2b00      	cmp	r3, #0
 800c778:	d002      	beq.n	800c780 <USBD_LL_SetupStage+0x4a>
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d00a      	beq.n	800c794 <USBD_LL_SetupStage+0x5e>
 800c77e:	e01d      	b.n	800c7bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c786:	4619      	mov	r1, r3
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 fb63 	bl	800ce54 <USBD_StdDevReq>
 800c78e:	4603      	mov	r3, r0
 800c790:	73fb      	strb	r3, [r7, #15]
      break;
 800c792:	e020      	b.n	800c7d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c79a:	4619      	mov	r1, r3
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 fbcb 	bl	800cf38 <USBD_StdItfReq>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73fb      	strb	r3, [r7, #15]
      break;
 800c7a6:	e016      	b.n	800c7d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 fc2d 	bl	800d010 <USBD_StdEPReq>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ba:	e00c      	b.n	800c7d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c7c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f001 fe68 	bl	800e4a0 <USBD_LL_StallEP>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c7d4:	bf00      	nop
  }

  return ret;
 800c7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3710      	adds	r7, #16
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	607a      	str	r2, [r7, #4]
 800c7ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c7f2:	7afb      	ldrb	r3, [r7, #11]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d16e      	bne.n	800c8d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c7fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c806:	2b03      	cmp	r3, #3
 800c808:	f040 8098 	bne.w	800c93c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	689a      	ldr	r2, [r3, #8]
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	429a      	cmp	r2, r3
 800c816:	d913      	bls.n	800c840 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	689a      	ldr	r2, [r3, #8]
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	1ad2      	subs	r2, r2, r3
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	68da      	ldr	r2, [r3, #12]
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	4293      	cmp	r3, r2
 800c830:	bf28      	it	cs
 800c832:	4613      	movcs	r3, r2
 800c834:	461a      	mov	r2, r3
 800c836:	6879      	ldr	r1, [r7, #4]
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f001 f9be 	bl	800dbba <USBD_CtlContinueRx>
 800c83e:	e07d      	b.n	800c93c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c846:	f003 031f 	and.w	r3, r3, #31
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d014      	beq.n	800c878 <USBD_LL_DataOutStage+0x98>
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d81d      	bhi.n	800c88e <USBD_LL_DataOutStage+0xae>
 800c852:	2b00      	cmp	r3, #0
 800c854:	d002      	beq.n	800c85c <USBD_LL_DataOutStage+0x7c>
 800c856:	2b01      	cmp	r3, #1
 800c858:	d003      	beq.n	800c862 <USBD_LL_DataOutStage+0x82>
 800c85a:	e018      	b.n	800c88e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c85c:	2300      	movs	r3, #0
 800c85e:	75bb      	strb	r3, [r7, #22]
            break;
 800c860:	e018      	b.n	800c894 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	4619      	mov	r1, r3
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f000 fa64 	bl	800cd3a <USBD_CoreFindIF>
 800c872:	4603      	mov	r3, r0
 800c874:	75bb      	strb	r3, [r7, #22]
            break;
 800c876:	e00d      	b.n	800c894 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	4619      	mov	r1, r3
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f000 fa66 	bl	800cd54 <USBD_CoreFindEP>
 800c888:	4603      	mov	r3, r0
 800c88a:	75bb      	strb	r3, [r7, #22]
            break;
 800c88c:	e002      	b.n	800c894 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c88e:	2300      	movs	r3, #0
 800c890:	75bb      	strb	r3, [r7, #22]
            break;
 800c892:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c894:	7dbb      	ldrb	r3, [r7, #22]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d119      	bne.n	800c8ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	2b03      	cmp	r3, #3
 800c8a4:	d113      	bne.n	800c8ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c8a6:	7dba      	ldrb	r2, [r7, #22]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	32ae      	adds	r2, #174	@ 0xae
 800c8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00b      	beq.n	800c8ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c8b6:	7dba      	ldrb	r2, [r7, #22]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c8be:	7dba      	ldrb	r2, [r7, #22]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	32ae      	adds	r2, #174	@ 0xae
 800c8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f001 f984 	bl	800dbdc <USBD_CtlSendStatus>
 800c8d4:	e032      	b.n	800c93c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c8d6:	7afb      	ldrb	r3, [r7, #11]
 800c8d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	4619      	mov	r1, r3
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	f000 fa37 	bl	800cd54 <USBD_CoreFindEP>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8ea:	7dbb      	ldrb	r3, [r7, #22]
 800c8ec:	2bff      	cmp	r3, #255	@ 0xff
 800c8ee:	d025      	beq.n	800c93c <USBD_LL_DataOutStage+0x15c>
 800c8f0:	7dbb      	ldrb	r3, [r7, #22]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d122      	bne.n	800c93c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	2b03      	cmp	r3, #3
 800c900:	d117      	bne.n	800c932 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c902:	7dba      	ldrb	r2, [r7, #22]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	32ae      	adds	r2, #174	@ 0xae
 800c908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00f      	beq.n	800c932 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c912:	7dba      	ldrb	r2, [r7, #22]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c91a:	7dba      	ldrb	r2, [r7, #22]
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	32ae      	adds	r2, #174	@ 0xae
 800c920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c924:	699b      	ldr	r3, [r3, #24]
 800c926:	7afa      	ldrb	r2, [r7, #11]
 800c928:	4611      	mov	r1, r2
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	4798      	blx	r3
 800c92e:	4603      	mov	r3, r0
 800c930:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d001      	beq.n	800c93c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c938:	7dfb      	ldrb	r3, [r7, #23]
 800c93a:	e000      	b.n	800c93e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b086      	sub	sp, #24
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	60f8      	str	r0, [r7, #12]
 800c94e:	460b      	mov	r3, r1
 800c950:	607a      	str	r2, [r7, #4]
 800c952:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c954:	7afb      	ldrb	r3, [r7, #11]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d16f      	bne.n	800ca3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	3314      	adds	r3, #20
 800c95e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c966:	2b02      	cmp	r3, #2
 800c968:	d15a      	bne.n	800ca20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	689a      	ldr	r2, [r3, #8]
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	429a      	cmp	r2, r3
 800c974:	d914      	bls.n	800c9a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	689a      	ldr	r2, [r3, #8]
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	1ad2      	subs	r2, r2, r3
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	461a      	mov	r2, r3
 800c98a:	6879      	ldr	r1, [r7, #4]
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f001 f8e6 	bl	800db5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c992:	2300      	movs	r3, #0
 800c994:	2200      	movs	r2, #0
 800c996:	2100      	movs	r1, #0
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f001 fe2b 	bl	800e5f4 <USBD_LL_PrepareReceive>
 800c99e:	e03f      	b.n	800ca20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	68da      	ldr	r2, [r3, #12]
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	429a      	cmp	r2, r3
 800c9aa:	d11c      	bne.n	800c9e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	685a      	ldr	r2, [r3, #4]
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d316      	bcc.n	800c9e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d20f      	bcs.n	800c9e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f001 f8c7 	bl	800db5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9d8:	2300      	movs	r3, #0
 800c9da:	2200      	movs	r2, #0
 800c9dc:	2100      	movs	r1, #0
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f001 fe08 	bl	800e5f4 <USBD_LL_PrepareReceive>
 800c9e4:	e01c      	b.n	800ca20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	2b03      	cmp	r3, #3
 800c9f0:	d10f      	bne.n	800ca12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d009      	beq.n	800ca12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2200      	movs	r2, #0
 800ca02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca12:	2180      	movs	r1, #128	@ 0x80
 800ca14:	68f8      	ldr	r0, [r7, #12]
 800ca16:	f001 fd43 	bl	800e4a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f001 f8f1 	bl	800dc02 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d03a      	beq.n	800caa0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f7ff fe42 	bl	800c6b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ca38:	e032      	b.n	800caa0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ca3a:	7afb      	ldrb	r3, [r7, #11]
 800ca3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	4619      	mov	r1, r3
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f000 f985 	bl	800cd54 <USBD_CoreFindEP>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca4e:	7dfb      	ldrb	r3, [r7, #23]
 800ca50:	2bff      	cmp	r3, #255	@ 0xff
 800ca52:	d025      	beq.n	800caa0 <USBD_LL_DataInStage+0x15a>
 800ca54:	7dfb      	ldrb	r3, [r7, #23]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d122      	bne.n	800caa0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	2b03      	cmp	r3, #3
 800ca64:	d11c      	bne.n	800caa0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ca66:	7dfa      	ldrb	r2, [r7, #23]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	32ae      	adds	r2, #174	@ 0xae
 800ca6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca70:	695b      	ldr	r3, [r3, #20]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d014      	beq.n	800caa0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ca76:	7dfa      	ldrb	r2, [r7, #23]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ca7e:	7dfa      	ldrb	r2, [r7, #23]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	32ae      	adds	r2, #174	@ 0xae
 800ca84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca88:	695b      	ldr	r3, [r3, #20]
 800ca8a:	7afa      	ldrb	r2, [r7, #11]
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	68f8      	ldr	r0, [r7, #12]
 800ca90:	4798      	blx	r3
 800ca92:	4603      	mov	r3, r0
 800ca94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ca96:	7dbb      	ldrb	r3, [r7, #22]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ca9c:	7dbb      	ldrb	r3, [r7, #22]
 800ca9e:	e000      	b.n	800caa2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3718      	adds	r7, #24
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b084      	sub	sp, #16
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2201      	movs	r2, #1
 800caba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d014      	beq.n	800cb10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00e      	beq.n	800cb10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	6852      	ldr	r2, [r2, #4]
 800cafe:	b2d2      	uxtb	r2, r2
 800cb00:	4611      	mov	r1, r2
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	4798      	blx	r3
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d001      	beq.n	800cb10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cb0c:	2303      	movs	r3, #3
 800cb0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb10:	2340      	movs	r3, #64	@ 0x40
 800cb12:	2200      	movs	r2, #0
 800cb14:	2100      	movs	r1, #0
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f001 fc7d 	bl	800e416 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2240      	movs	r2, #64	@ 0x40
 800cb28:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb2c:	2340      	movs	r3, #64	@ 0x40
 800cb2e:	2200      	movs	r2, #0
 800cb30:	2180      	movs	r1, #128	@ 0x80
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f001 fc6f 	bl	800e416 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2240      	movs	r2, #64	@ 0x40
 800cb42:	621a      	str	r2, [r3, #32]

  return ret;
 800cb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cb4e:	b480      	push	{r7}
 800cb50:	b083      	sub	sp, #12
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	460b      	mov	r3, r1
 800cb58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	78fa      	ldrb	r2, [r7, #3]
 800cb5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	370c      	adds	r7, #12
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr

0800cb6e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cb6e:	b480      	push	{r7}
 800cb70:	b083      	sub	sp, #12
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b04      	cmp	r3, #4
 800cb80:	d006      	beq.n	800cb90 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb88:	b2da      	uxtb	r2, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2204      	movs	r2, #4
 800cb94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	370c      	adds	r7, #12
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr

0800cba6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cba6:	b480      	push	{r7}
 800cba8:	b083      	sub	sp, #12
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	2b04      	cmp	r3, #4
 800cbb8:	d106      	bne.n	800cbc8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	370c      	adds	r7, #12
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b082      	sub	sp, #8
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	2b03      	cmp	r3, #3
 800cbe8:	d110      	bne.n	800cc0c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00b      	beq.n	800cc0c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbfa:	69db      	ldr	r3, [r3, #28]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d005      	beq.n	800cc0c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc06:	69db      	ldr	r3, [r3, #28]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cc0c:	2300      	movs	r3, #0
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b082      	sub	sp, #8
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	460b      	mov	r3, r1
 800cc20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	32ae      	adds	r2, #174	@ 0xae
 800cc2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d101      	bne.n	800cc38 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cc34:	2303      	movs	r3, #3
 800cc36:	e01c      	b.n	800cc72 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	2b03      	cmp	r3, #3
 800cc42:	d115      	bne.n	800cc70 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	32ae      	adds	r2, #174	@ 0xae
 800cc4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc52:	6a1b      	ldr	r3, [r3, #32]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00b      	beq.n	800cc70 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	32ae      	adds	r2, #174	@ 0xae
 800cc62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc66:	6a1b      	ldr	r3, [r3, #32]
 800cc68:	78fa      	ldrb	r2, [r7, #3]
 800cc6a:	4611      	mov	r1, r2
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}

0800cc7a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cc7a:	b580      	push	{r7, lr}
 800cc7c:	b082      	sub	sp, #8
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
 800cc82:	460b      	mov	r3, r1
 800cc84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	32ae      	adds	r2, #174	@ 0xae
 800cc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d101      	bne.n	800cc9c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	e01c      	b.n	800ccd6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	2b03      	cmp	r3, #3
 800cca6:	d115      	bne.n	800ccd4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	32ae      	adds	r2, #174	@ 0xae
 800ccb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d00b      	beq.n	800ccd4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	32ae      	adds	r2, #174	@ 0xae
 800ccc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cccc:	78fa      	ldrb	r2, [r7, #3]
 800ccce:	4611      	mov	r1, r2
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ccde:	b480      	push	{r7}
 800cce0:	b083      	sub	sp, #12
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cce6:	2300      	movs	r3, #0
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2201      	movs	r2, #1
 800cd04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00e      	beq.n	800cd30 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	6852      	ldr	r2, [r2, #4]
 800cd1e:	b2d2      	uxtb	r2, r2
 800cd20:	4611      	mov	r1, r2
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	4798      	blx	r3
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cd30:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cd3a:	b480      	push	{r7}
 800cd3c:	b083      	sub	sp, #12
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
 800cd42:	460b      	mov	r3, r1
 800cd44:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cd46:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	370c      	adds	r7, #12
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cd60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b086      	sub	sp, #24
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	460b      	mov	r3, r1
 800cd78:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	885b      	ldrh	r3, [r3, #2]
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	7812      	ldrb	r2, [r2, #0]
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d91f      	bls.n	800cdd4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cd9a:	e013      	b.n	800cdc4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cd9c:	f107 030a 	add.w	r3, r7, #10
 800cda0:	4619      	mov	r1, r3
 800cda2:	6978      	ldr	r0, [r7, #20]
 800cda4:	f000 f81b 	bl	800cdde <USBD_GetNextDesc>
 800cda8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	785b      	ldrb	r3, [r3, #1]
 800cdae:	2b05      	cmp	r3, #5
 800cdb0:	d108      	bne.n	800cdc4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	789b      	ldrb	r3, [r3, #2]
 800cdba:	78fa      	ldrb	r2, [r7, #3]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d008      	beq.n	800cdd2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	885b      	ldrh	r3, [r3, #2]
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	897b      	ldrh	r3, [r7, #10]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d8e5      	bhi.n	800cd9c <USBD_GetEpDesc+0x2e>
 800cdd0:	e000      	b.n	800cdd4 <USBD_GetEpDesc+0x66>
          break;
 800cdd2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cdd4:	693b      	ldr	r3, [r7, #16]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b085      	sub	sp, #20
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	881b      	ldrh	r3, [r3, #0]
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	7812      	ldrb	r2, [r2, #0]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	b29a      	uxth	r2, r3
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	461a      	mov	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4413      	add	r3, r2
 800ce06:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ce08:	68fb      	ldr	r3, [r7, #12]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3714      	adds	r7, #20
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr

0800ce16 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ce16:	b480      	push	{r7}
 800ce18:	b087      	sub	sp, #28
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ce34:	8a3b      	ldrh	r3, [r7, #16]
 800ce36:	021b      	lsls	r3, r3, #8
 800ce38:	b21a      	sxth	r2, r3
 800ce3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	b21b      	sxth	r3, r3
 800ce42:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ce44:	89fb      	ldrh	r3, [r7, #14]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	371c      	adds	r7, #28
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
	...

0800ce54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ce6a:	2b40      	cmp	r3, #64	@ 0x40
 800ce6c:	d005      	beq.n	800ce7a <USBD_StdDevReq+0x26>
 800ce6e:	2b40      	cmp	r3, #64	@ 0x40
 800ce70:	d857      	bhi.n	800cf22 <USBD_StdDevReq+0xce>
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00f      	beq.n	800ce96 <USBD_StdDevReq+0x42>
 800ce76:	2b20      	cmp	r3, #32
 800ce78:	d153      	bne.n	800cf22 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	32ae      	adds	r2, #174	@ 0xae
 800ce84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	6839      	ldr	r1, [r7, #0]
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	4798      	blx	r3
 800ce90:	4603      	mov	r3, r0
 800ce92:	73fb      	strb	r3, [r7, #15]
      break;
 800ce94:	e04a      	b.n	800cf2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	785b      	ldrb	r3, [r3, #1]
 800ce9a:	2b09      	cmp	r3, #9
 800ce9c:	d83b      	bhi.n	800cf16 <USBD_StdDevReq+0xc2>
 800ce9e:	a201      	add	r2, pc, #4	@ (adr r2, 800cea4 <USBD_StdDevReq+0x50>)
 800cea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea4:	0800cef9 	.word	0x0800cef9
 800cea8:	0800cf0d 	.word	0x0800cf0d
 800ceac:	0800cf17 	.word	0x0800cf17
 800ceb0:	0800cf03 	.word	0x0800cf03
 800ceb4:	0800cf17 	.word	0x0800cf17
 800ceb8:	0800ced7 	.word	0x0800ced7
 800cebc:	0800cecd 	.word	0x0800cecd
 800cec0:	0800cf17 	.word	0x0800cf17
 800cec4:	0800ceef 	.word	0x0800ceef
 800cec8:	0800cee1 	.word	0x0800cee1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cecc:	6839      	ldr	r1, [r7, #0]
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 fa3c 	bl	800d34c <USBD_GetDescriptor>
          break;
 800ced4:	e024      	b.n	800cf20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ced6:	6839      	ldr	r1, [r7, #0]
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 fbcb 	bl	800d674 <USBD_SetAddress>
          break;
 800cede:	e01f      	b.n	800cf20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cee0:	6839      	ldr	r1, [r7, #0]
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 fc0a 	bl	800d6fc <USBD_SetConfig>
 800cee8:	4603      	mov	r3, r0
 800ceea:	73fb      	strb	r3, [r7, #15]
          break;
 800ceec:	e018      	b.n	800cf20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 fcad 	bl	800d850 <USBD_GetConfig>
          break;
 800cef6:	e013      	b.n	800cf20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cef8:	6839      	ldr	r1, [r7, #0]
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 fcde 	bl	800d8bc <USBD_GetStatus>
          break;
 800cf00:	e00e      	b.n	800cf20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cf02:	6839      	ldr	r1, [r7, #0]
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 fd0d 	bl	800d924 <USBD_SetFeature>
          break;
 800cf0a:	e009      	b.n	800cf20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cf0c:	6839      	ldr	r1, [r7, #0]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 fd31 	bl	800d976 <USBD_ClrFeature>
          break;
 800cf14:	e004      	b.n	800cf20 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cf16:	6839      	ldr	r1, [r7, #0]
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 fd88 	bl	800da2e <USBD_CtlError>
          break;
 800cf1e:	bf00      	nop
      }
      break;
 800cf20:	e004      	b.n	800cf2c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cf22:	6839      	ldr	r1, [r7, #0]
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 fd82 	bl	800da2e <USBD_CtlError>
      break;
 800cf2a:	bf00      	nop
  }

  return ret;
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop

0800cf38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf4e:	2b40      	cmp	r3, #64	@ 0x40
 800cf50:	d005      	beq.n	800cf5e <USBD_StdItfReq+0x26>
 800cf52:	2b40      	cmp	r3, #64	@ 0x40
 800cf54:	d852      	bhi.n	800cffc <USBD_StdItfReq+0xc4>
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <USBD_StdItfReq+0x26>
 800cf5a:	2b20      	cmp	r3, #32
 800cf5c:	d14e      	bne.n	800cffc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	3b01      	subs	r3, #1
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d840      	bhi.n	800cfee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	889b      	ldrh	r3, [r3, #4]
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d836      	bhi.n	800cfe4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	889b      	ldrh	r3, [r3, #4]
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f7ff fedb 	bl	800cd3a <USBD_CoreFindIF>
 800cf84:	4603      	mov	r3, r0
 800cf86:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf88:	7bbb      	ldrb	r3, [r7, #14]
 800cf8a:	2bff      	cmp	r3, #255	@ 0xff
 800cf8c:	d01d      	beq.n	800cfca <USBD_StdItfReq+0x92>
 800cf8e:	7bbb      	ldrb	r3, [r7, #14]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d11a      	bne.n	800cfca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cf94:	7bba      	ldrb	r2, [r7, #14]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	32ae      	adds	r2, #174	@ 0xae
 800cf9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00f      	beq.n	800cfc4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cfa4:	7bba      	ldrb	r2, [r7, #14]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cfac:	7bba      	ldrb	r2, [r7, #14]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	32ae      	adds	r2, #174	@ 0xae
 800cfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	4798      	blx	r3
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cfc2:	e004      	b.n	800cfce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cfc4:	2303      	movs	r3, #3
 800cfc6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cfc8:	e001      	b.n	800cfce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cfca:	2303      	movs	r3, #3
 800cfcc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	88db      	ldrh	r3, [r3, #6]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d110      	bne.n	800cff8 <USBD_StdItfReq+0xc0>
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10d      	bne.n	800cff8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 fdfd 	bl	800dbdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cfe2:	e009      	b.n	800cff8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fd21 	bl	800da2e <USBD_CtlError>
          break;
 800cfec:	e004      	b.n	800cff8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cfee:	6839      	ldr	r1, [r7, #0]
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 fd1c 	bl	800da2e <USBD_CtlError>
          break;
 800cff6:	e000      	b.n	800cffa <USBD_StdItfReq+0xc2>
          break;
 800cff8:	bf00      	nop
      }
      break;
 800cffa:	e004      	b.n	800d006 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cffc:	6839      	ldr	r1, [r7, #0]
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 fd15 	bl	800da2e <USBD_CtlError>
      break;
 800d004:	bf00      	nop
  }

  return ret;
 800d006:	7bfb      	ldrb	r3, [r7, #15]
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	889b      	ldrh	r3, [r3, #4]
 800d022:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d02c:	2b40      	cmp	r3, #64	@ 0x40
 800d02e:	d007      	beq.n	800d040 <USBD_StdEPReq+0x30>
 800d030:	2b40      	cmp	r3, #64	@ 0x40
 800d032:	f200 817f 	bhi.w	800d334 <USBD_StdEPReq+0x324>
 800d036:	2b00      	cmp	r3, #0
 800d038:	d02a      	beq.n	800d090 <USBD_StdEPReq+0x80>
 800d03a:	2b20      	cmp	r3, #32
 800d03c:	f040 817a 	bne.w	800d334 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d040:	7bbb      	ldrb	r3, [r7, #14]
 800d042:	4619      	mov	r1, r3
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7ff fe85 	bl	800cd54 <USBD_CoreFindEP>
 800d04a:	4603      	mov	r3, r0
 800d04c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d04e:	7b7b      	ldrb	r3, [r7, #13]
 800d050:	2bff      	cmp	r3, #255	@ 0xff
 800d052:	f000 8174 	beq.w	800d33e <USBD_StdEPReq+0x32e>
 800d056:	7b7b      	ldrb	r3, [r7, #13]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f040 8170 	bne.w	800d33e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d05e:	7b7a      	ldrb	r2, [r7, #13]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d066:	7b7a      	ldrb	r2, [r7, #13]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	32ae      	adds	r2, #174	@ 0xae
 800d06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	2b00      	cmp	r3, #0
 800d074:	f000 8163 	beq.w	800d33e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d078:	7b7a      	ldrb	r2, [r7, #13]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	32ae      	adds	r2, #174	@ 0xae
 800d07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	6839      	ldr	r1, [r7, #0]
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	4798      	blx	r3
 800d08a:	4603      	mov	r3, r0
 800d08c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d08e:	e156      	b.n	800d33e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	785b      	ldrb	r3, [r3, #1]
 800d094:	2b03      	cmp	r3, #3
 800d096:	d008      	beq.n	800d0aa <USBD_StdEPReq+0x9a>
 800d098:	2b03      	cmp	r3, #3
 800d09a:	f300 8145 	bgt.w	800d328 <USBD_StdEPReq+0x318>
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	f000 809b 	beq.w	800d1da <USBD_StdEPReq+0x1ca>
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d03c      	beq.n	800d122 <USBD_StdEPReq+0x112>
 800d0a8:	e13e      	b.n	800d328 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	d002      	beq.n	800d0bc <USBD_StdEPReq+0xac>
 800d0b6:	2b03      	cmp	r3, #3
 800d0b8:	d016      	beq.n	800d0e8 <USBD_StdEPReq+0xd8>
 800d0ba:	e02c      	b.n	800d116 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0bc:	7bbb      	ldrb	r3, [r7, #14]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00d      	beq.n	800d0de <USBD_StdEPReq+0xce>
 800d0c2:	7bbb      	ldrb	r3, [r7, #14]
 800d0c4:	2b80      	cmp	r3, #128	@ 0x80
 800d0c6:	d00a      	beq.n	800d0de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d0c8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f001 f9e7 	bl	800e4a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0d2:	2180      	movs	r1, #128	@ 0x80
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f001 f9e3 	bl	800e4a0 <USBD_LL_StallEP>
 800d0da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d0dc:	e020      	b.n	800d120 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d0de:	6839      	ldr	r1, [r7, #0]
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fca4 	bl	800da2e <USBD_CtlError>
              break;
 800d0e6:	e01b      	b.n	800d120 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	885b      	ldrh	r3, [r3, #2]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d10e      	bne.n	800d10e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d0f0:	7bbb      	ldrb	r3, [r7, #14]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00b      	beq.n	800d10e <USBD_StdEPReq+0xfe>
 800d0f6:	7bbb      	ldrb	r3, [r7, #14]
 800d0f8:	2b80      	cmp	r3, #128	@ 0x80
 800d0fa:	d008      	beq.n	800d10e <USBD_StdEPReq+0xfe>
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	88db      	ldrh	r3, [r3, #6]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d104      	bne.n	800d10e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d104:	7bbb      	ldrb	r3, [r7, #14]
 800d106:	4619      	mov	r1, r3
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f001 f9c9 	bl	800e4a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 fd64 	bl	800dbdc <USBD_CtlSendStatus>

              break;
 800d114:	e004      	b.n	800d120 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d116:	6839      	ldr	r1, [r7, #0]
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 fc88 	bl	800da2e <USBD_CtlError>
              break;
 800d11e:	bf00      	nop
          }
          break;
 800d120:	e107      	b.n	800d332 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b02      	cmp	r3, #2
 800d12c:	d002      	beq.n	800d134 <USBD_StdEPReq+0x124>
 800d12e:	2b03      	cmp	r3, #3
 800d130:	d016      	beq.n	800d160 <USBD_StdEPReq+0x150>
 800d132:	e04b      	b.n	800d1cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d134:	7bbb      	ldrb	r3, [r7, #14]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00d      	beq.n	800d156 <USBD_StdEPReq+0x146>
 800d13a:	7bbb      	ldrb	r3, [r7, #14]
 800d13c:	2b80      	cmp	r3, #128	@ 0x80
 800d13e:	d00a      	beq.n	800d156 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d140:	7bbb      	ldrb	r3, [r7, #14]
 800d142:	4619      	mov	r1, r3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f001 f9ab 	bl	800e4a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d14a:	2180      	movs	r1, #128	@ 0x80
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f001 f9a7 	bl	800e4a0 <USBD_LL_StallEP>
 800d152:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d154:	e040      	b.n	800d1d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 fc68 	bl	800da2e <USBD_CtlError>
              break;
 800d15e:	e03b      	b.n	800d1d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	885b      	ldrh	r3, [r3, #2]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d136      	bne.n	800d1d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d168:	7bbb      	ldrb	r3, [r7, #14]
 800d16a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d004      	beq.n	800d17c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d172:	7bbb      	ldrb	r3, [r7, #14]
 800d174:	4619      	mov	r1, r3
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f001 f9b1 	bl	800e4de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 fd2d 	bl	800dbdc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d182:	7bbb      	ldrb	r3, [r7, #14]
 800d184:	4619      	mov	r1, r3
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f7ff fde4 	bl	800cd54 <USBD_CoreFindEP>
 800d18c:	4603      	mov	r3, r0
 800d18e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d190:	7b7b      	ldrb	r3, [r7, #13]
 800d192:	2bff      	cmp	r3, #255	@ 0xff
 800d194:	d01f      	beq.n	800d1d6 <USBD_StdEPReq+0x1c6>
 800d196:	7b7b      	ldrb	r3, [r7, #13]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d11c      	bne.n	800d1d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d19c:	7b7a      	ldrb	r2, [r7, #13]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d1a4:	7b7a      	ldrb	r2, [r7, #13]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	32ae      	adds	r2, #174	@ 0xae
 800d1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d010      	beq.n	800d1d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d1b4:	7b7a      	ldrb	r2, [r7, #13]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	32ae      	adds	r2, #174	@ 0xae
 800d1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1be:	689b      	ldr	r3, [r3, #8]
 800d1c0:	6839      	ldr	r1, [r7, #0]
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	4798      	blx	r3
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d1ca:	e004      	b.n	800d1d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d1cc:	6839      	ldr	r1, [r7, #0]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 fc2d 	bl	800da2e <USBD_CtlError>
              break;
 800d1d4:	e000      	b.n	800d1d8 <USBD_StdEPReq+0x1c8>
              break;
 800d1d6:	bf00      	nop
          }
          break;
 800d1d8:	e0ab      	b.n	800d332 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	2b02      	cmp	r3, #2
 800d1e4:	d002      	beq.n	800d1ec <USBD_StdEPReq+0x1dc>
 800d1e6:	2b03      	cmp	r3, #3
 800d1e8:	d032      	beq.n	800d250 <USBD_StdEPReq+0x240>
 800d1ea:	e097      	b.n	800d31c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1ec:	7bbb      	ldrb	r3, [r7, #14]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d007      	beq.n	800d202 <USBD_StdEPReq+0x1f2>
 800d1f2:	7bbb      	ldrb	r3, [r7, #14]
 800d1f4:	2b80      	cmp	r3, #128	@ 0x80
 800d1f6:	d004      	beq.n	800d202 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d1f8:	6839      	ldr	r1, [r7, #0]
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 fc17 	bl	800da2e <USBD_CtlError>
                break;
 800d200:	e091      	b.n	800d326 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d206:	2b00      	cmp	r3, #0
 800d208:	da0b      	bge.n	800d222 <USBD_StdEPReq+0x212>
 800d20a:	7bbb      	ldrb	r3, [r7, #14]
 800d20c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d210:	4613      	mov	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4413      	add	r3, r2
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	3310      	adds	r3, #16
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	4413      	add	r3, r2
 800d21e:	3304      	adds	r3, #4
 800d220:	e00b      	b.n	800d23a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d222:	7bbb      	ldrb	r3, [r7, #14]
 800d224:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d228:	4613      	mov	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	4413      	add	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	4413      	add	r3, r2
 800d238:	3304      	adds	r3, #4
 800d23a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	2200      	movs	r2, #0
 800d240:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	2202      	movs	r2, #2
 800d246:	4619      	mov	r1, r3
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fc6d 	bl	800db28 <USBD_CtlSendData>
              break;
 800d24e:	e06a      	b.n	800d326 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d250:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d254:	2b00      	cmp	r3, #0
 800d256:	da11      	bge.n	800d27c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d258:	7bbb      	ldrb	r3, [r7, #14]
 800d25a:	f003 020f 	and.w	r2, r3, #15
 800d25e:	6879      	ldr	r1, [r7, #4]
 800d260:	4613      	mov	r3, r2
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4413      	add	r3, r2
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	440b      	add	r3, r1
 800d26a:	3324      	adds	r3, #36	@ 0x24
 800d26c:	881b      	ldrh	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d117      	bne.n	800d2a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d272:	6839      	ldr	r1, [r7, #0]
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 fbda 	bl	800da2e <USBD_CtlError>
                  break;
 800d27a:	e054      	b.n	800d326 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d27c:	7bbb      	ldrb	r3, [r7, #14]
 800d27e:	f003 020f 	and.w	r2, r3, #15
 800d282:	6879      	ldr	r1, [r7, #4]
 800d284:	4613      	mov	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4413      	add	r3, r2
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	440b      	add	r3, r1
 800d28e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d292:	881b      	ldrh	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d104      	bne.n	800d2a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d298:	6839      	ldr	r1, [r7, #0]
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 fbc7 	bl	800da2e <USBD_CtlError>
                  break;
 800d2a0:	e041      	b.n	800d326 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	da0b      	bge.n	800d2c2 <USBD_StdEPReq+0x2b2>
 800d2aa:	7bbb      	ldrb	r3, [r7, #14]
 800d2ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	4413      	add	r3, r2
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	3310      	adds	r3, #16
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	4413      	add	r3, r2
 800d2be:	3304      	adds	r3, #4
 800d2c0:	e00b      	b.n	800d2da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d2c2:	7bbb      	ldrb	r3, [r7, #14]
 800d2c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2c8:	4613      	mov	r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	4413      	add	r3, r2
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	3304      	adds	r3, #4
 800d2da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d2dc:	7bbb      	ldrb	r3, [r7, #14]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d002      	beq.n	800d2e8 <USBD_StdEPReq+0x2d8>
 800d2e2:	7bbb      	ldrb	r3, [r7, #14]
 800d2e4:	2b80      	cmp	r3, #128	@ 0x80
 800d2e6:	d103      	bne.n	800d2f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	601a      	str	r2, [r3, #0]
 800d2ee:	e00e      	b.n	800d30e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d2f0:	7bbb      	ldrb	r3, [r7, #14]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f001 f911 	bl	800e51c <USBD_LL_IsStallEP>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d003      	beq.n	800d308 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	2201      	movs	r2, #1
 800d304:	601a      	str	r2, [r3, #0]
 800d306:	e002      	b.n	800d30e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	2200      	movs	r2, #0
 800d30c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	2202      	movs	r2, #2
 800d312:	4619      	mov	r1, r3
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 fc07 	bl	800db28 <USBD_CtlSendData>
              break;
 800d31a:	e004      	b.n	800d326 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d31c:	6839      	ldr	r1, [r7, #0]
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 fb85 	bl	800da2e <USBD_CtlError>
              break;
 800d324:	bf00      	nop
          }
          break;
 800d326:	e004      	b.n	800d332 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 fb7f 	bl	800da2e <USBD_CtlError>
          break;
 800d330:	bf00      	nop
      }
      break;
 800d332:	e005      	b.n	800d340 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d334:	6839      	ldr	r1, [r7, #0]
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 fb79 	bl	800da2e <USBD_CtlError>
      break;
 800d33c:	e000      	b.n	800d340 <USBD_StdEPReq+0x330>
      break;
 800d33e:	bf00      	nop
  }

  return ret;
 800d340:	7bfb      	ldrb	r3, [r7, #15]
}
 800d342:	4618      	mov	r0, r3
 800d344:	3710      	adds	r7, #16
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
	...

0800d34c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d356:	2300      	movs	r3, #0
 800d358:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d35e:	2300      	movs	r3, #0
 800d360:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	885b      	ldrh	r3, [r3, #2]
 800d366:	0a1b      	lsrs	r3, r3, #8
 800d368:	b29b      	uxth	r3, r3
 800d36a:	3b01      	subs	r3, #1
 800d36c:	2b0e      	cmp	r3, #14
 800d36e:	f200 8152 	bhi.w	800d616 <USBD_GetDescriptor+0x2ca>
 800d372:	a201      	add	r2, pc, #4	@ (adr r2, 800d378 <USBD_GetDescriptor+0x2c>)
 800d374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d378:	0800d3e9 	.word	0x0800d3e9
 800d37c:	0800d401 	.word	0x0800d401
 800d380:	0800d441 	.word	0x0800d441
 800d384:	0800d617 	.word	0x0800d617
 800d388:	0800d617 	.word	0x0800d617
 800d38c:	0800d5b7 	.word	0x0800d5b7
 800d390:	0800d5e3 	.word	0x0800d5e3
 800d394:	0800d617 	.word	0x0800d617
 800d398:	0800d617 	.word	0x0800d617
 800d39c:	0800d617 	.word	0x0800d617
 800d3a0:	0800d617 	.word	0x0800d617
 800d3a4:	0800d617 	.word	0x0800d617
 800d3a8:	0800d617 	.word	0x0800d617
 800d3ac:	0800d617 	.word	0x0800d617
 800d3b0:	0800d3b5 	.word	0x0800d3b5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3ba:	69db      	ldr	r3, [r3, #28]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00b      	beq.n	800d3d8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3c6:	69db      	ldr	r3, [r3, #28]
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	7c12      	ldrb	r2, [r2, #16]
 800d3cc:	f107 0108 	add.w	r1, r7, #8
 800d3d0:	4610      	mov	r0, r2
 800d3d2:	4798      	blx	r3
 800d3d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d3d6:	e126      	b.n	800d626 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d3d8:	6839      	ldr	r1, [r7, #0]
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f000 fb27 	bl	800da2e <USBD_CtlError>
        err++;
 800d3e0:	7afb      	ldrb	r3, [r7, #11]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	72fb      	strb	r3, [r7, #11]
      break;
 800d3e6:	e11e      	b.n	800d626 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	7c12      	ldrb	r2, [r2, #16]
 800d3f4:	f107 0108 	add.w	r1, r7, #8
 800d3f8:	4610      	mov	r0, r2
 800d3fa:	4798      	blx	r3
 800d3fc:	60f8      	str	r0, [r7, #12]
      break;
 800d3fe:	e112      	b.n	800d626 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	7c1b      	ldrb	r3, [r3, #16]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d10d      	bne.n	800d424 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d40e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d410:	f107 0208 	add.w	r2, r7, #8
 800d414:	4610      	mov	r0, r2
 800d416:	4798      	blx	r3
 800d418:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	3301      	adds	r3, #1
 800d41e:	2202      	movs	r2, #2
 800d420:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d422:	e100      	b.n	800d626 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d42c:	f107 0208 	add.w	r2, r7, #8
 800d430:	4610      	mov	r0, r2
 800d432:	4798      	blx	r3
 800d434:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	3301      	adds	r3, #1
 800d43a:	2202      	movs	r2, #2
 800d43c:	701a      	strb	r2, [r3, #0]
      break;
 800d43e:	e0f2      	b.n	800d626 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	885b      	ldrh	r3, [r3, #2]
 800d444:	b2db      	uxtb	r3, r3
 800d446:	2b05      	cmp	r3, #5
 800d448:	f200 80ac 	bhi.w	800d5a4 <USBD_GetDescriptor+0x258>
 800d44c:	a201      	add	r2, pc, #4	@ (adr r2, 800d454 <USBD_GetDescriptor+0x108>)
 800d44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d452:	bf00      	nop
 800d454:	0800d46d 	.word	0x0800d46d
 800d458:	0800d4a1 	.word	0x0800d4a1
 800d45c:	0800d4d5 	.word	0x0800d4d5
 800d460:	0800d509 	.word	0x0800d509
 800d464:	0800d53d 	.word	0x0800d53d
 800d468:	0800d571 	.word	0x0800d571
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00b      	beq.n	800d490 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	7c12      	ldrb	r2, [r2, #16]
 800d484:	f107 0108 	add.w	r1, r7, #8
 800d488:	4610      	mov	r0, r2
 800d48a:	4798      	blx	r3
 800d48c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d48e:	e091      	b.n	800d5b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d490:	6839      	ldr	r1, [r7, #0]
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 facb 	bl	800da2e <USBD_CtlError>
            err++;
 800d498:	7afb      	ldrb	r3, [r7, #11]
 800d49a:	3301      	adds	r3, #1
 800d49c:	72fb      	strb	r3, [r7, #11]
          break;
 800d49e:	e089      	b.n	800d5b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d00b      	beq.n	800d4c4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	7c12      	ldrb	r2, [r2, #16]
 800d4b8:	f107 0108 	add.w	r1, r7, #8
 800d4bc:	4610      	mov	r0, r2
 800d4be:	4798      	blx	r3
 800d4c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4c2:	e077      	b.n	800d5b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d4c4:	6839      	ldr	r1, [r7, #0]
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 fab1 	bl	800da2e <USBD_CtlError>
            err++;
 800d4cc:	7afb      	ldrb	r3, [r7, #11]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d4d2:	e06f      	b.n	800d5b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d00b      	beq.n	800d4f8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	7c12      	ldrb	r2, [r2, #16]
 800d4ec:	f107 0108 	add.w	r1, r7, #8
 800d4f0:	4610      	mov	r0, r2
 800d4f2:	4798      	blx	r3
 800d4f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4f6:	e05d      	b.n	800d5b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d4f8:	6839      	ldr	r1, [r7, #0]
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 fa97 	bl	800da2e <USBD_CtlError>
            err++;
 800d500:	7afb      	ldrb	r3, [r7, #11]
 800d502:	3301      	adds	r3, #1
 800d504:	72fb      	strb	r3, [r7, #11]
          break;
 800d506:	e055      	b.n	800d5b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d50e:	691b      	ldr	r3, [r3, #16]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00b      	beq.n	800d52c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	7c12      	ldrb	r2, [r2, #16]
 800d520:	f107 0108 	add.w	r1, r7, #8
 800d524:	4610      	mov	r0, r2
 800d526:	4798      	blx	r3
 800d528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d52a:	e043      	b.n	800d5b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d52c:	6839      	ldr	r1, [r7, #0]
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 fa7d 	bl	800da2e <USBD_CtlError>
            err++;
 800d534:	7afb      	ldrb	r3, [r7, #11]
 800d536:	3301      	adds	r3, #1
 800d538:	72fb      	strb	r3, [r7, #11]
          break;
 800d53a:	e03b      	b.n	800d5b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d542:	695b      	ldr	r3, [r3, #20]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00b      	beq.n	800d560 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d54e:	695b      	ldr	r3, [r3, #20]
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	7c12      	ldrb	r2, [r2, #16]
 800d554:	f107 0108 	add.w	r1, r7, #8
 800d558:	4610      	mov	r0, r2
 800d55a:	4798      	blx	r3
 800d55c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d55e:	e029      	b.n	800d5b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d560:	6839      	ldr	r1, [r7, #0]
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 fa63 	bl	800da2e <USBD_CtlError>
            err++;
 800d568:	7afb      	ldrb	r3, [r7, #11]
 800d56a:	3301      	adds	r3, #1
 800d56c:	72fb      	strb	r3, [r7, #11]
          break;
 800d56e:	e021      	b.n	800d5b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d576:	699b      	ldr	r3, [r3, #24]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d00b      	beq.n	800d594 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d582:	699b      	ldr	r3, [r3, #24]
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	7c12      	ldrb	r2, [r2, #16]
 800d588:	f107 0108 	add.w	r1, r7, #8
 800d58c:	4610      	mov	r0, r2
 800d58e:	4798      	blx	r3
 800d590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d592:	e00f      	b.n	800d5b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d594:	6839      	ldr	r1, [r7, #0]
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fa49 	bl	800da2e <USBD_CtlError>
            err++;
 800d59c:	7afb      	ldrb	r3, [r7, #11]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	72fb      	strb	r3, [r7, #11]
          break;
 800d5a2:	e007      	b.n	800d5b4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d5a4:	6839      	ldr	r1, [r7, #0]
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 fa41 	bl	800da2e <USBD_CtlError>
          err++;
 800d5ac:	7afb      	ldrb	r3, [r7, #11]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d5b2:	bf00      	nop
      }
      break;
 800d5b4:	e037      	b.n	800d626 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	7c1b      	ldrb	r3, [r3, #16]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d109      	bne.n	800d5d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5c6:	f107 0208 	add.w	r2, r7, #8
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	4798      	blx	r3
 800d5ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d5d0:	e029      	b.n	800d626 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d5d2:	6839      	ldr	r1, [r7, #0]
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 fa2a 	bl	800da2e <USBD_CtlError>
        err++;
 800d5da:	7afb      	ldrb	r3, [r7, #11]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	72fb      	strb	r3, [r7, #11]
      break;
 800d5e0:	e021      	b.n	800d626 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	7c1b      	ldrb	r3, [r3, #16]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d10d      	bne.n	800d606 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5f2:	f107 0208 	add.w	r2, r7, #8
 800d5f6:	4610      	mov	r0, r2
 800d5f8:	4798      	blx	r3
 800d5fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3301      	adds	r3, #1
 800d600:	2207      	movs	r2, #7
 800d602:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d604:	e00f      	b.n	800d626 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d606:	6839      	ldr	r1, [r7, #0]
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 fa10 	bl	800da2e <USBD_CtlError>
        err++;
 800d60e:	7afb      	ldrb	r3, [r7, #11]
 800d610:	3301      	adds	r3, #1
 800d612:	72fb      	strb	r3, [r7, #11]
      break;
 800d614:	e007      	b.n	800d626 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d616:	6839      	ldr	r1, [r7, #0]
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 fa08 	bl	800da2e <USBD_CtlError>
      err++;
 800d61e:	7afb      	ldrb	r3, [r7, #11]
 800d620:	3301      	adds	r3, #1
 800d622:	72fb      	strb	r3, [r7, #11]
      break;
 800d624:	bf00      	nop
  }

  if (err != 0U)
 800d626:	7afb      	ldrb	r3, [r7, #11]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d11e      	bne.n	800d66a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	88db      	ldrh	r3, [r3, #6]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d016      	beq.n	800d662 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d634:	893b      	ldrh	r3, [r7, #8]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00e      	beq.n	800d658 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	88da      	ldrh	r2, [r3, #6]
 800d63e:	893b      	ldrh	r3, [r7, #8]
 800d640:	4293      	cmp	r3, r2
 800d642:	bf28      	it	cs
 800d644:	4613      	movcs	r3, r2
 800d646:	b29b      	uxth	r3, r3
 800d648:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d64a:	893b      	ldrh	r3, [r7, #8]
 800d64c:	461a      	mov	r2, r3
 800d64e:	68f9      	ldr	r1, [r7, #12]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fa69 	bl	800db28 <USBD_CtlSendData>
 800d656:	e009      	b.n	800d66c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d658:	6839      	ldr	r1, [r7, #0]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 f9e7 	bl	800da2e <USBD_CtlError>
 800d660:	e004      	b.n	800d66c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 faba 	bl	800dbdc <USBD_CtlSendStatus>
 800d668:	e000      	b.n	800d66c <USBD_GetDescriptor+0x320>
    return;
 800d66a:	bf00      	nop
  }
}
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop

0800d674 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	889b      	ldrh	r3, [r3, #4]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d131      	bne.n	800d6ea <USBD_SetAddress+0x76>
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	88db      	ldrh	r3, [r3, #6]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d12d      	bne.n	800d6ea <USBD_SetAddress+0x76>
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	885b      	ldrh	r3, [r3, #2]
 800d692:	2b7f      	cmp	r3, #127	@ 0x7f
 800d694:	d829      	bhi.n	800d6ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	885b      	ldrh	r3, [r3, #2]
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d104      	bne.n	800d6b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d6ae:	6839      	ldr	r1, [r7, #0]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f000 f9bc 	bl	800da2e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6b6:	e01d      	b.n	800d6f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	7bfa      	ldrb	r2, [r7, #15]
 800d6bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 ff55 	bl	800e574 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fa86 	bl	800dbdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d004      	beq.n	800d6e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2202      	movs	r2, #2
 800d6da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6de:	e009      	b.n	800d6f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6e8:	e004      	b.n	800d6f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d6ea:	6839      	ldr	r1, [r7, #0]
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 f99e 	bl	800da2e <USBD_CtlError>
  }
}
 800d6f2:	bf00      	nop
 800d6f4:	bf00      	nop
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d706:	2300      	movs	r3, #0
 800d708:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	885b      	ldrh	r3, [r3, #2]
 800d70e:	b2da      	uxtb	r2, r3
 800d710:	4b4e      	ldr	r3, [pc, #312]	@ (800d84c <USBD_SetConfig+0x150>)
 800d712:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d714:	4b4d      	ldr	r3, [pc, #308]	@ (800d84c <USBD_SetConfig+0x150>)
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d905      	bls.n	800d728 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d71c:	6839      	ldr	r1, [r7, #0]
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 f985 	bl	800da2e <USBD_CtlError>
    return USBD_FAIL;
 800d724:	2303      	movs	r3, #3
 800d726:	e08c      	b.n	800d842 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	2b02      	cmp	r3, #2
 800d732:	d002      	beq.n	800d73a <USBD_SetConfig+0x3e>
 800d734:	2b03      	cmp	r3, #3
 800d736:	d029      	beq.n	800d78c <USBD_SetConfig+0x90>
 800d738:	e075      	b.n	800d826 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d73a:	4b44      	ldr	r3, [pc, #272]	@ (800d84c <USBD_SetConfig+0x150>)
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d020      	beq.n	800d784 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d742:	4b42      	ldr	r3, [pc, #264]	@ (800d84c <USBD_SetConfig+0x150>)
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	461a      	mov	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d74c:	4b3f      	ldr	r3, [pc, #252]	@ (800d84c <USBD_SetConfig+0x150>)
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	4619      	mov	r1, r3
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f7fe ffb9 	bl	800c6ca <USBD_SetClassConfig>
 800d758:	4603      	mov	r3, r0
 800d75a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d75c:	7bfb      	ldrb	r3, [r7, #15]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d008      	beq.n	800d774 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d762:	6839      	ldr	r1, [r7, #0]
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f000 f962 	bl	800da2e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2202      	movs	r2, #2
 800d76e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d772:	e065      	b.n	800d840 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 fa31 	bl	800dbdc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2203      	movs	r2, #3
 800d77e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d782:	e05d      	b.n	800d840 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 fa29 	bl	800dbdc <USBD_CtlSendStatus>
      break;
 800d78a:	e059      	b.n	800d840 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d78c:	4b2f      	ldr	r3, [pc, #188]	@ (800d84c <USBD_SetConfig+0x150>)
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d112      	bne.n	800d7ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2202      	movs	r2, #2
 800d798:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d79c:	4b2b      	ldr	r3, [pc, #172]	@ (800d84c <USBD_SetConfig+0x150>)
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d7a6:	4b29      	ldr	r3, [pc, #164]	@ (800d84c <USBD_SetConfig+0x150>)
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7fe ffa8 	bl	800c702 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fa12 	bl	800dbdc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d7b8:	e042      	b.n	800d840 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d7ba:	4b24      	ldr	r3, [pc, #144]	@ (800d84c <USBD_SetConfig+0x150>)
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	461a      	mov	r2, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d02a      	beq.n	800d81e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7fe ff96 	bl	800c702 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d7d6:	4b1d      	ldr	r3, [pc, #116]	@ (800d84c <USBD_SetConfig+0x150>)
 800d7d8:	781b      	ldrb	r3, [r3, #0]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d7e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d84c <USBD_SetConfig+0x150>)
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7fe ff6f 	bl	800c6ca <USBD_SetClassConfig>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d00f      	beq.n	800d816 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d7f6:	6839      	ldr	r1, [r7, #0]
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 f918 	bl	800da2e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	b2db      	uxtb	r3, r3
 800d804:	4619      	mov	r1, r3
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f7fe ff7b 	bl	800c702 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2202      	movs	r2, #2
 800d810:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d814:	e014      	b.n	800d840 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 f9e0 	bl	800dbdc <USBD_CtlSendStatus>
      break;
 800d81c:	e010      	b.n	800d840 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f9dc 	bl	800dbdc <USBD_CtlSendStatus>
      break;
 800d824:	e00c      	b.n	800d840 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d826:	6839      	ldr	r1, [r7, #0]
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 f900 	bl	800da2e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d82e:	4b07      	ldr	r3, [pc, #28]	@ (800d84c <USBD_SetConfig+0x150>)
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	4619      	mov	r1, r3
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7fe ff64 	bl	800c702 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d83a:	2303      	movs	r3, #3
 800d83c:	73fb      	strb	r3, [r7, #15]
      break;
 800d83e:	bf00      	nop
  }

  return ret;
 800d840:	7bfb      	ldrb	r3, [r7, #15]
}
 800d842:	4618      	mov	r0, r3
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	2006eaa4 	.word	0x2006eaa4

0800d850 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	88db      	ldrh	r3, [r3, #6]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d004      	beq.n	800d86c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d862:	6839      	ldr	r1, [r7, #0]
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f000 f8e2 	bl	800da2e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d86a:	e023      	b.n	800d8b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d872:	b2db      	uxtb	r3, r3
 800d874:	2b02      	cmp	r3, #2
 800d876:	dc02      	bgt.n	800d87e <USBD_GetConfig+0x2e>
 800d878:	2b00      	cmp	r3, #0
 800d87a:	dc03      	bgt.n	800d884 <USBD_GetConfig+0x34>
 800d87c:	e015      	b.n	800d8aa <USBD_GetConfig+0x5a>
 800d87e:	2b03      	cmp	r3, #3
 800d880:	d00b      	beq.n	800d89a <USBD_GetConfig+0x4a>
 800d882:	e012      	b.n	800d8aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2200      	movs	r2, #0
 800d888:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	3308      	adds	r3, #8
 800d88e:	2201      	movs	r2, #1
 800d890:	4619      	mov	r1, r3
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 f948 	bl	800db28 <USBD_CtlSendData>
        break;
 800d898:	e00c      	b.n	800d8b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	3304      	adds	r3, #4
 800d89e:	2201      	movs	r2, #1
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f000 f940 	bl	800db28 <USBD_CtlSendData>
        break;
 800d8a8:	e004      	b.n	800d8b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d8aa:	6839      	ldr	r1, [r7, #0]
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 f8be 	bl	800da2e <USBD_CtlError>
        break;
 800d8b2:	bf00      	nop
}
 800d8b4:	bf00      	nop
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	3b01      	subs	r3, #1
 800d8d0:	2b02      	cmp	r3, #2
 800d8d2:	d81e      	bhi.n	800d912 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	88db      	ldrh	r3, [r3, #6]
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d004      	beq.n	800d8e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d8dc:	6839      	ldr	r1, [r7, #0]
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 f8a5 	bl	800da2e <USBD_CtlError>
        break;
 800d8e4:	e01a      	b.n	800d91c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d005      	beq.n	800d902 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	f043 0202 	orr.w	r2, r3, #2
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	330c      	adds	r3, #12
 800d906:	2202      	movs	r2, #2
 800d908:	4619      	mov	r1, r3
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f90c 	bl	800db28 <USBD_CtlSendData>
      break;
 800d910:	e004      	b.n	800d91c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d912:	6839      	ldr	r1, [r7, #0]
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 f88a 	bl	800da2e <USBD_CtlError>
      break;
 800d91a:	bf00      	nop
  }
}
 800d91c:	bf00      	nop
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	885b      	ldrh	r3, [r3, #2]
 800d932:	2b01      	cmp	r3, #1
 800d934:	d107      	bne.n	800d946 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2201      	movs	r2, #1
 800d93a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 f94c 	bl	800dbdc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d944:	e013      	b.n	800d96e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	885b      	ldrh	r3, [r3, #2]
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d10b      	bne.n	800d966 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	889b      	ldrh	r3, [r3, #4]
 800d952:	0a1b      	lsrs	r3, r3, #8
 800d954:	b29b      	uxth	r3, r3
 800d956:	b2da      	uxtb	r2, r3
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f93c 	bl	800dbdc <USBD_CtlSendStatus>
}
 800d964:	e003      	b.n	800d96e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d966:	6839      	ldr	r1, [r7, #0]
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f860 	bl	800da2e <USBD_CtlError>
}
 800d96e:	bf00      	nop
 800d970:	3708      	adds	r7, #8
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}

0800d976 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d976:	b580      	push	{r7, lr}
 800d978:	b082      	sub	sp, #8
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
 800d97e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d986:	b2db      	uxtb	r3, r3
 800d988:	3b01      	subs	r3, #1
 800d98a:	2b02      	cmp	r3, #2
 800d98c:	d80b      	bhi.n	800d9a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	885b      	ldrh	r3, [r3, #2]
 800d992:	2b01      	cmp	r3, #1
 800d994:	d10c      	bne.n	800d9b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f91c 	bl	800dbdc <USBD_CtlSendStatus>
      }
      break;
 800d9a4:	e004      	b.n	800d9b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d9a6:	6839      	ldr	r1, [r7, #0]
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f000 f840 	bl	800da2e <USBD_CtlError>
      break;
 800d9ae:	e000      	b.n	800d9b2 <USBD_ClrFeature+0x3c>
      break;
 800d9b0:	bf00      	nop
  }
}
 800d9b2:	bf00      	nop
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}

0800d9ba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d9ba:	b580      	push	{r7, lr}
 800d9bc:	b084      	sub	sp, #16
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	6078      	str	r0, [r7, #4]
 800d9c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	781a      	ldrb	r2, [r3, #0]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	781a      	ldrb	r2, [r3, #0]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d9e4:	68f8      	ldr	r0, [r7, #12]
 800d9e6:	f7ff fa16 	bl	800ce16 <SWAPBYTE>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d9fe:	68f8      	ldr	r0, [r7, #12]
 800da00:	f7ff fa09 	bl	800ce16 <SWAPBYTE>
 800da04:	4603      	mov	r3, r0
 800da06:	461a      	mov	r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	3301      	adds	r3, #1
 800da10:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	3301      	adds	r3, #1
 800da16:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800da18:	68f8      	ldr	r0, [r7, #12]
 800da1a:	f7ff f9fc 	bl	800ce16 <SWAPBYTE>
 800da1e:	4603      	mov	r3, r0
 800da20:	461a      	mov	r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	80da      	strh	r2, [r3, #6]
}
 800da26:	bf00      	nop
 800da28:	3710      	adds	r7, #16
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b082      	sub	sp, #8
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800da38:	2180      	movs	r1, #128	@ 0x80
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 fd30 	bl	800e4a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800da40:	2100      	movs	r1, #0
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 fd2c 	bl	800e4a0 <USBD_LL_StallEP>
}
 800da48:	bf00      	nop
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800da5c:	2300      	movs	r3, #0
 800da5e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d042      	beq.n	800daec <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800da6a:	6938      	ldr	r0, [r7, #16]
 800da6c:	f000 f842 	bl	800daf4 <USBD_GetLen>
 800da70:	4603      	mov	r3, r0
 800da72:	3301      	adds	r3, #1
 800da74:	005b      	lsls	r3, r3, #1
 800da76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da7a:	d808      	bhi.n	800da8e <USBD_GetString+0x3e>
 800da7c:	6938      	ldr	r0, [r7, #16]
 800da7e:	f000 f839 	bl	800daf4 <USBD_GetLen>
 800da82:	4603      	mov	r3, r0
 800da84:	3301      	adds	r3, #1
 800da86:	b29b      	uxth	r3, r3
 800da88:	005b      	lsls	r3, r3, #1
 800da8a:	b29a      	uxth	r2, r3
 800da8c:	e001      	b.n	800da92 <USBD_GetString+0x42>
 800da8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800da96:	7dfb      	ldrb	r3, [r7, #23]
 800da98:	68ba      	ldr	r2, [r7, #8]
 800da9a:	4413      	add	r3, r2
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	7812      	ldrb	r2, [r2, #0]
 800daa0:	701a      	strb	r2, [r3, #0]
  idx++;
 800daa2:	7dfb      	ldrb	r3, [r7, #23]
 800daa4:	3301      	adds	r3, #1
 800daa6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800daa8:	7dfb      	ldrb	r3, [r7, #23]
 800daaa:	68ba      	ldr	r2, [r7, #8]
 800daac:	4413      	add	r3, r2
 800daae:	2203      	movs	r2, #3
 800dab0:	701a      	strb	r2, [r3, #0]
  idx++;
 800dab2:	7dfb      	ldrb	r3, [r7, #23]
 800dab4:	3301      	adds	r3, #1
 800dab6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dab8:	e013      	b.n	800dae2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800daba:	7dfb      	ldrb	r3, [r7, #23]
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	4413      	add	r3, r2
 800dac0:	693a      	ldr	r2, [r7, #16]
 800dac2:	7812      	ldrb	r2, [r2, #0]
 800dac4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	3301      	adds	r3, #1
 800daca:	613b      	str	r3, [r7, #16]
    idx++;
 800dacc:	7dfb      	ldrb	r3, [r7, #23]
 800dace:	3301      	adds	r3, #1
 800dad0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dad2:	7dfb      	ldrb	r3, [r7, #23]
 800dad4:	68ba      	ldr	r2, [r7, #8]
 800dad6:	4413      	add	r3, r2
 800dad8:	2200      	movs	r2, #0
 800dada:	701a      	strb	r2, [r3, #0]
    idx++;
 800dadc:	7dfb      	ldrb	r3, [r7, #23]
 800dade:	3301      	adds	r3, #1
 800dae0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d1e7      	bne.n	800daba <USBD_GetString+0x6a>
 800daea:	e000      	b.n	800daee <USBD_GetString+0x9e>
    return;
 800daec:	bf00      	nop
  }
}
 800daee:	3718      	adds	r7, #24
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dafc:	2300      	movs	r3, #0
 800dafe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800db04:	e005      	b.n	800db12 <USBD_GetLen+0x1e>
  {
    len++;
 800db06:	7bfb      	ldrb	r3, [r7, #15]
 800db08:	3301      	adds	r3, #1
 800db0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	3301      	adds	r3, #1
 800db10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	781b      	ldrb	r3, [r3, #0]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d1f5      	bne.n	800db06 <USBD_GetLen+0x12>
  }

  return len;
 800db1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3714      	adds	r7, #20
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2202      	movs	r2, #2
 800db38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	2100      	movs	r1, #0
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f000 fd2f 	bl	800e5b2 <USBD_LL_Transmit>

  return USBD_OK;
 800db54:	2300      	movs	r3, #0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b084      	sub	sp, #16
 800db62:	af00      	add	r7, sp, #0
 800db64:	60f8      	str	r0, [r7, #12]
 800db66:	60b9      	str	r1, [r7, #8]
 800db68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	2100      	movs	r1, #0
 800db70:	68f8      	ldr	r0, [r7, #12]
 800db72:	f000 fd1e 	bl	800e5b2 <USBD_LL_Transmit>

  return USBD_OK;
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3710      	adds	r7, #16
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2203      	movs	r2, #3
 800db90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68ba      	ldr	r2, [r7, #8]
 800dba8:	2100      	movs	r1, #0
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	f000 fd22 	bl	800e5f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dbb0:	2300      	movs	r3, #0
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3710      	adds	r7, #16
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b084      	sub	sp, #16
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	60f8      	str	r0, [r7, #12]
 800dbc2:	60b9      	str	r1, [r7, #8]
 800dbc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68ba      	ldr	r2, [r7, #8]
 800dbca:	2100      	movs	r1, #0
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f000 fd11 	bl	800e5f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dbd2:	2300      	movs	r3, #0
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2204      	movs	r2, #4
 800dbe8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dbec:	2300      	movs	r3, #0
 800dbee:	2200      	movs	r2, #0
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 fcdd 	bl	800e5b2 <USBD_LL_Transmit>

  return USBD_OK;
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3708      	adds	r7, #8
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b082      	sub	sp, #8
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2205      	movs	r2, #5
 800dc0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc12:	2300      	movs	r3, #0
 800dc14:	2200      	movs	r2, #0
 800dc16:	2100      	movs	r1, #0
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 fceb 	bl	800e5f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc1e:	2300      	movs	r3, #0
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	4912      	ldr	r1, [pc, #72]	@ (800dc78 <MX_USB_DEVICE_Init+0x50>)
 800dc30:	4812      	ldr	r0, [pc, #72]	@ (800dc7c <MX_USB_DEVICE_Init+0x54>)
 800dc32:	f7fe fccd 	bl	800c5d0 <USBD_Init>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d001      	beq.n	800dc40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dc3c:	f7f5 f8ba 	bl	8002db4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dc40:	490f      	ldr	r1, [pc, #60]	@ (800dc80 <MX_USB_DEVICE_Init+0x58>)
 800dc42:	480e      	ldr	r0, [pc, #56]	@ (800dc7c <MX_USB_DEVICE_Init+0x54>)
 800dc44:	f7fe fcf4 	bl	800c630 <USBD_RegisterClass>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d001      	beq.n	800dc52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dc4e:	f7f5 f8b1 	bl	8002db4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dc52:	490c      	ldr	r1, [pc, #48]	@ (800dc84 <MX_USB_DEVICE_Init+0x5c>)
 800dc54:	4809      	ldr	r0, [pc, #36]	@ (800dc7c <MX_USB_DEVICE_Init+0x54>)
 800dc56:	f7fe fbeb 	bl	800c430 <USBD_CDC_RegisterInterface>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d001      	beq.n	800dc64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dc60:	f7f5 f8a8 	bl	8002db4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dc64:	4805      	ldr	r0, [pc, #20]	@ (800dc7c <MX_USB_DEVICE_Init+0x54>)
 800dc66:	f7fe fd19 	bl	800c69c <USBD_Start>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d001      	beq.n	800dc74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dc70:	f7f5 f8a0 	bl	8002db4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dc74:	bf00      	nop
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	200000b8 	.word	0x200000b8
 800dc7c:	2006eaa8 	.word	0x2006eaa8
 800dc80:	20000024 	.word	0x20000024
 800dc84:	200000a4 	.word	0x200000a4

0800dc88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	4905      	ldr	r1, [pc, #20]	@ (800dca4 <CDC_Init_FS+0x1c>)
 800dc90:	4805      	ldr	r0, [pc, #20]	@ (800dca8 <CDC_Init_FS+0x20>)
 800dc92:	f7fe fbe7 	bl	800c464 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dc96:	4905      	ldr	r1, [pc, #20]	@ (800dcac <CDC_Init_FS+0x24>)
 800dc98:	4803      	ldr	r0, [pc, #12]	@ (800dca8 <CDC_Init_FS+0x20>)
 800dc9a:	f7fe fc05 	bl	800c4a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dc9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	2006f584 	.word	0x2006f584
 800dca8:	2006eaa8 	.word	0x2006eaa8
 800dcac:	2006ed84 	.word	0x2006ed84

0800dcb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dcb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr

0800dcc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	6039      	str	r1, [r7, #0]
 800dcca:	71fb      	strb	r3, [r7, #7]
 800dccc:	4613      	mov	r3, r2
 800dcce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dcd0:	79fb      	ldrb	r3, [r7, #7]
 800dcd2:	2b23      	cmp	r3, #35	@ 0x23
 800dcd4:	d84a      	bhi.n	800dd6c <CDC_Control_FS+0xac>
 800dcd6:	a201      	add	r2, pc, #4	@ (adr r2, 800dcdc <CDC_Control_FS+0x1c>)
 800dcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcdc:	0800dd6d 	.word	0x0800dd6d
 800dce0:	0800dd6d 	.word	0x0800dd6d
 800dce4:	0800dd6d 	.word	0x0800dd6d
 800dce8:	0800dd6d 	.word	0x0800dd6d
 800dcec:	0800dd6d 	.word	0x0800dd6d
 800dcf0:	0800dd6d 	.word	0x0800dd6d
 800dcf4:	0800dd6d 	.word	0x0800dd6d
 800dcf8:	0800dd6d 	.word	0x0800dd6d
 800dcfc:	0800dd6d 	.word	0x0800dd6d
 800dd00:	0800dd6d 	.word	0x0800dd6d
 800dd04:	0800dd6d 	.word	0x0800dd6d
 800dd08:	0800dd6d 	.word	0x0800dd6d
 800dd0c:	0800dd6d 	.word	0x0800dd6d
 800dd10:	0800dd6d 	.word	0x0800dd6d
 800dd14:	0800dd6d 	.word	0x0800dd6d
 800dd18:	0800dd6d 	.word	0x0800dd6d
 800dd1c:	0800dd6d 	.word	0x0800dd6d
 800dd20:	0800dd6d 	.word	0x0800dd6d
 800dd24:	0800dd6d 	.word	0x0800dd6d
 800dd28:	0800dd6d 	.word	0x0800dd6d
 800dd2c:	0800dd6d 	.word	0x0800dd6d
 800dd30:	0800dd6d 	.word	0x0800dd6d
 800dd34:	0800dd6d 	.word	0x0800dd6d
 800dd38:	0800dd6d 	.word	0x0800dd6d
 800dd3c:	0800dd6d 	.word	0x0800dd6d
 800dd40:	0800dd6d 	.word	0x0800dd6d
 800dd44:	0800dd6d 	.word	0x0800dd6d
 800dd48:	0800dd6d 	.word	0x0800dd6d
 800dd4c:	0800dd6d 	.word	0x0800dd6d
 800dd50:	0800dd6d 	.word	0x0800dd6d
 800dd54:	0800dd6d 	.word	0x0800dd6d
 800dd58:	0800dd6d 	.word	0x0800dd6d
 800dd5c:	0800dd6d 	.word	0x0800dd6d
 800dd60:	0800dd6d 	.word	0x0800dd6d
 800dd64:	0800dd6d 	.word	0x0800dd6d
 800dd68:	0800dd6d 	.word	0x0800dd6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dd6c:	bf00      	nop
  }

  return (USBD_OK);
 800dd6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	370c      	adds	r7, #12
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr

0800dd7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
 800dd84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
 CDC_Receive_FS_App(Buf, Len); // <----  ADD THIS LINE HERE!  Call your callback function
 800dd86:	6839      	ldr	r1, [r7, #0]
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7f5 fe85 	bl	8003a98 <CDC_Receive_FS_App>
 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dd8e:	6879      	ldr	r1, [r7, #4]
 800dd90:	4805      	ldr	r0, [pc, #20]	@ (800dda8 <CDC_Receive_FS+0x2c>)
 800dd92:	f7fe fb89 	bl	800c4a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dd96:	4804      	ldr	r0, [pc, #16]	@ (800dda8 <CDC_Receive_FS+0x2c>)
 800dd98:	f7fe fbe4 	bl	800c564 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dd9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	2006eaa8 	.word	0x2006eaa8

0800ddac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ddbc:	4b0d      	ldr	r3, [pc, #52]	@ (800ddf4 <CDC_Transmit_FS+0x48>)
 800ddbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ddc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d001      	beq.n	800ddd2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e00b      	b.n	800ddea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ddd2:	887b      	ldrh	r3, [r7, #2]
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	6879      	ldr	r1, [r7, #4]
 800ddd8:	4806      	ldr	r0, [pc, #24]	@ (800ddf4 <CDC_Transmit_FS+0x48>)
 800ddda:	f7fe fb43 	bl	800c464 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ddde:	4805      	ldr	r0, [pc, #20]	@ (800ddf4 <CDC_Transmit_FS+0x48>)
 800dde0:	f7fe fb80 	bl	800c4e4 <USBD_CDC_TransmitPacket>
 800dde4:	4603      	mov	r3, r0
 800dde6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dde8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3710      	adds	r7, #16
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	2006eaa8 	.word	0x2006eaa8

0800ddf8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b087      	sub	sp, #28
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	4613      	mov	r3, r2
 800de04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800de06:	2300      	movs	r3, #0
 800de08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800de0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	371c      	adds	r7, #28
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr
	...

0800de1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	6039      	str	r1, [r7, #0]
 800de26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	2212      	movs	r2, #18
 800de2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800de2e:	4b03      	ldr	r3, [pc, #12]	@ (800de3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800de30:	4618      	mov	r0, r3
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr
 800de3c:	200000d8 	.word	0x200000d8

0800de40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	4603      	mov	r3, r0
 800de48:	6039      	str	r1, [r7, #0]
 800de4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	2204      	movs	r2, #4
 800de50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800de52:	4b03      	ldr	r3, [pc, #12]	@ (800de60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800de54:	4618      	mov	r0, r3
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr
 800de60:	200000f8 	.word	0x200000f8

0800de64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	4603      	mov	r3, r0
 800de6c:	6039      	str	r1, [r7, #0]
 800de6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de70:	79fb      	ldrb	r3, [r7, #7]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d105      	bne.n	800de82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de76:	683a      	ldr	r2, [r7, #0]
 800de78:	4907      	ldr	r1, [pc, #28]	@ (800de98 <USBD_FS_ProductStrDescriptor+0x34>)
 800de7a:	4808      	ldr	r0, [pc, #32]	@ (800de9c <USBD_FS_ProductStrDescriptor+0x38>)
 800de7c:	f7ff fde8 	bl	800da50 <USBD_GetString>
 800de80:	e004      	b.n	800de8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	4904      	ldr	r1, [pc, #16]	@ (800de98 <USBD_FS_ProductStrDescriptor+0x34>)
 800de86:	4805      	ldr	r0, [pc, #20]	@ (800de9c <USBD_FS_ProductStrDescriptor+0x38>)
 800de88:	f7ff fde2 	bl	800da50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de8c:	4b02      	ldr	r3, [pc, #8]	@ (800de98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3708      	adds	r7, #8
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	2006fd84 	.word	0x2006fd84
 800de9c:	0800ed18 	.word	0x0800ed18

0800dea0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	4603      	mov	r3, r0
 800dea8:	6039      	str	r1, [r7, #0]
 800deaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800deac:	683a      	ldr	r2, [r7, #0]
 800deae:	4904      	ldr	r1, [pc, #16]	@ (800dec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800deb0:	4804      	ldr	r0, [pc, #16]	@ (800dec4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800deb2:	f7ff fdcd 	bl	800da50 <USBD_GetString>
  return USBD_StrDesc;
 800deb6:	4b02      	ldr	r3, [pc, #8]	@ (800dec0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	2006fd84 	.word	0x2006fd84
 800dec4:	0800ed30 	.word	0x0800ed30

0800dec8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	4603      	mov	r3, r0
 800ded0:	6039      	str	r1, [r7, #0]
 800ded2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	221a      	movs	r2, #26
 800ded8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800deda:	f000 f855 	bl	800df88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dede:	4b02      	ldr	r3, [pc, #8]	@ (800dee8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	200000fc 	.word	0x200000fc

0800deec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	4603      	mov	r3, r0
 800def4:	6039      	str	r1, [r7, #0]
 800def6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800def8:	79fb      	ldrb	r3, [r7, #7]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d105      	bne.n	800df0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800defe:	683a      	ldr	r2, [r7, #0]
 800df00:	4907      	ldr	r1, [pc, #28]	@ (800df20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800df02:	4808      	ldr	r0, [pc, #32]	@ (800df24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800df04:	f7ff fda4 	bl	800da50 <USBD_GetString>
 800df08:	e004      	b.n	800df14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800df0a:	683a      	ldr	r2, [r7, #0]
 800df0c:	4904      	ldr	r1, [pc, #16]	@ (800df20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800df0e:	4805      	ldr	r0, [pc, #20]	@ (800df24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800df10:	f7ff fd9e 	bl	800da50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800df14:	4b02      	ldr	r3, [pc, #8]	@ (800df20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800df16:	4618      	mov	r0, r3
 800df18:	3708      	adds	r7, #8
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	2006fd84 	.word	0x2006fd84
 800df24:	0800ed44 	.word	0x0800ed44

0800df28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	4603      	mov	r3, r0
 800df30:	6039      	str	r1, [r7, #0]
 800df32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df34:	79fb      	ldrb	r3, [r7, #7]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d105      	bne.n	800df46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	4907      	ldr	r1, [pc, #28]	@ (800df5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800df3e:	4808      	ldr	r0, [pc, #32]	@ (800df60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800df40:	f7ff fd86 	bl	800da50 <USBD_GetString>
 800df44:	e004      	b.n	800df50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	4904      	ldr	r1, [pc, #16]	@ (800df5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800df4a:	4805      	ldr	r0, [pc, #20]	@ (800df60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800df4c:	f7ff fd80 	bl	800da50 <USBD_GetString>
  }
  return USBD_StrDesc;
 800df50:	4b02      	ldr	r3, [pc, #8]	@ (800df5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800df52:	4618      	mov	r0, r3
 800df54:	3708      	adds	r7, #8
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	2006fd84 	.word	0x2006fd84
 800df60:	0800ed50 	.word	0x0800ed50

0800df64 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	4603      	mov	r3, r0
 800df6c:	6039      	str	r1, [r7, #0]
 800df6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	220c      	movs	r2, #12
 800df74:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800df76:	4b03      	ldr	r3, [pc, #12]	@ (800df84 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800df78:	4618      	mov	r0, r3
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr
 800df84:	200000ec 	.word	0x200000ec

0800df88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800df8e:	4b0f      	ldr	r3, [pc, #60]	@ (800dfcc <Get_SerialNum+0x44>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800df94:	4b0e      	ldr	r3, [pc, #56]	@ (800dfd0 <Get_SerialNum+0x48>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800df9a:	4b0e      	ldr	r3, [pc, #56]	@ (800dfd4 <Get_SerialNum+0x4c>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d009      	beq.n	800dfc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dfae:	2208      	movs	r2, #8
 800dfb0:	4909      	ldr	r1, [pc, #36]	@ (800dfd8 <Get_SerialNum+0x50>)
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f000 f814 	bl	800dfe0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dfb8:	2204      	movs	r2, #4
 800dfba:	4908      	ldr	r1, [pc, #32]	@ (800dfdc <Get_SerialNum+0x54>)
 800dfbc:	68b8      	ldr	r0, [r7, #8]
 800dfbe:	f000 f80f 	bl	800dfe0 <IntToUnicode>
  }
}
 800dfc2:	bf00      	nop
 800dfc4:	3710      	adds	r7, #16
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	1ff0f420 	.word	0x1ff0f420
 800dfd0:	1ff0f424 	.word	0x1ff0f424
 800dfd4:	1ff0f428 	.word	0x1ff0f428
 800dfd8:	200000fe 	.word	0x200000fe
 800dfdc:	2000010e 	.word	0x2000010e

0800dfe0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b087      	sub	sp, #28
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	4613      	mov	r3, r2
 800dfec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dfee:	2300      	movs	r3, #0
 800dff0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dff2:	2300      	movs	r3, #0
 800dff4:	75fb      	strb	r3, [r7, #23]
 800dff6:	e027      	b.n	800e048 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	0f1b      	lsrs	r3, r3, #28
 800dffc:	2b09      	cmp	r3, #9
 800dffe:	d80b      	bhi.n	800e018 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	0f1b      	lsrs	r3, r3, #28
 800e004:	b2da      	uxtb	r2, r3
 800e006:	7dfb      	ldrb	r3, [r7, #23]
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	4619      	mov	r1, r3
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	440b      	add	r3, r1
 800e010:	3230      	adds	r2, #48	@ 0x30
 800e012:	b2d2      	uxtb	r2, r2
 800e014:	701a      	strb	r2, [r3, #0]
 800e016:	e00a      	b.n	800e02e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	0f1b      	lsrs	r3, r3, #28
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	7dfb      	ldrb	r3, [r7, #23]
 800e020:	005b      	lsls	r3, r3, #1
 800e022:	4619      	mov	r1, r3
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	440b      	add	r3, r1
 800e028:	3237      	adds	r2, #55	@ 0x37
 800e02a:	b2d2      	uxtb	r2, r2
 800e02c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	011b      	lsls	r3, r3, #4
 800e032:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e034:	7dfb      	ldrb	r3, [r7, #23]
 800e036:	005b      	lsls	r3, r3, #1
 800e038:	3301      	adds	r3, #1
 800e03a:	68ba      	ldr	r2, [r7, #8]
 800e03c:	4413      	add	r3, r2
 800e03e:	2200      	movs	r2, #0
 800e040:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e042:	7dfb      	ldrb	r3, [r7, #23]
 800e044:	3301      	adds	r3, #1
 800e046:	75fb      	strb	r3, [r7, #23]
 800e048:	7dfa      	ldrb	r2, [r7, #23]
 800e04a:	79fb      	ldrb	r3, [r7, #7]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d3d3      	bcc.n	800dff8 <IntToUnicode+0x18>
  }
}
 800e050:	bf00      	nop
 800e052:	bf00      	nop
 800e054:	371c      	adds	r7, #28
 800e056:	46bd      	mov	sp, r7
 800e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05c:	4770      	bx	lr
	...

0800e060 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b0ae      	sub	sp, #184	@ 0xb8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e068:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800e06c:	2200      	movs	r2, #0
 800e06e:	601a      	str	r2, [r3, #0]
 800e070:	605a      	str	r2, [r3, #4]
 800e072:	609a      	str	r2, [r3, #8]
 800e074:	60da      	str	r2, [r3, #12]
 800e076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e078:	f107 0314 	add.w	r3, r7, #20
 800e07c:	2290      	movs	r2, #144	@ 0x90
 800e07e:	2100      	movs	r1, #0
 800e080:	4618      	mov	r0, r3
 800e082:	f000 fc29 	bl	800e8d8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e08e:	d161      	bne.n	800e154 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800e090:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e094:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800e096:	2300      	movs	r3, #0
 800e098:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e09c:	f107 0314 	add.w	r3, r7, #20
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7f9 fc3b 	bl	800791c <HAL_RCCEx_PeriphCLKConfig>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d001      	beq.n	800e0b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800e0ac:	f7f4 fe82 	bl	8002db4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e0b0:	4b2a      	ldr	r3, [pc, #168]	@ (800e15c <HAL_PCD_MspInit+0xfc>)
 800e0b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0b4:	4a29      	ldr	r2, [pc, #164]	@ (800e15c <HAL_PCD_MspInit+0xfc>)
 800e0b6:	f043 0301 	orr.w	r3, r3, #1
 800e0ba:	6313      	str	r3, [r2, #48]	@ 0x30
 800e0bc:	4b27      	ldr	r3, [pc, #156]	@ (800e15c <HAL_PCD_MspInit+0xfc>)
 800e0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0c0:	f003 0301 	and.w	r3, r3, #1
 800e0c4:	613b      	str	r3, [r7, #16]
 800e0c6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800e0c8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800e0cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0d0:	2302      	movs	r3, #2
 800e0d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e0e2:	230a      	movs	r3, #10
 800e0e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e0e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	481c      	ldr	r0, [pc, #112]	@ (800e160 <HAL_PCD_MspInit+0x100>)
 800e0f0:	f7f7 fa92 	bl	8005618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800e0f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e0f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e102:	2300      	movs	r3, #0
 800e104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800e108:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800e10c:	4619      	mov	r1, r3
 800e10e:	4814      	ldr	r0, [pc, #80]	@ (800e160 <HAL_PCD_MspInit+0x100>)
 800e110:	f7f7 fa82 	bl	8005618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e114:	4b11      	ldr	r3, [pc, #68]	@ (800e15c <HAL_PCD_MspInit+0xfc>)
 800e116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e118:	4a10      	ldr	r2, [pc, #64]	@ (800e15c <HAL_PCD_MspInit+0xfc>)
 800e11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e11e:	6353      	str	r3, [r2, #52]	@ 0x34
 800e120:	4b0e      	ldr	r3, [pc, #56]	@ (800e15c <HAL_PCD_MspInit+0xfc>)
 800e122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e128:	60fb      	str	r3, [r7, #12]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	4b0b      	ldr	r3, [pc, #44]	@ (800e15c <HAL_PCD_MspInit+0xfc>)
 800e12e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e130:	4a0a      	ldr	r2, [pc, #40]	@ (800e15c <HAL_PCD_MspInit+0xfc>)
 800e132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e136:	6453      	str	r3, [r2, #68]	@ 0x44
 800e138:	4b08      	ldr	r3, [pc, #32]	@ (800e15c <HAL_PCD_MspInit+0xfc>)
 800e13a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e13c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e140:	60bb      	str	r3, [r7, #8]
 800e142:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e144:	2200      	movs	r2, #0
 800e146:	2100      	movs	r1, #0
 800e148:	2043      	movs	r0, #67	@ 0x43
 800e14a:	f7f6 fad6 	bl	80046fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e14e:	2043      	movs	r0, #67	@ 0x43
 800e150:	f7f6 faef 	bl	8004732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e154:	bf00      	nop
 800e156:	37b8      	adds	r7, #184	@ 0xb8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	40023800 	.word	0x40023800
 800e160:	40020000 	.word	0x40020000

0800e164 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e178:	4619      	mov	r1, r3
 800e17a:	4610      	mov	r0, r2
 800e17c:	f7fe fadb 	bl	800c736 <USBD_LL_SetupStage>
}
 800e180:	bf00      	nop
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	460b      	mov	r3, r1
 800e192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800e19a:	78fa      	ldrb	r2, [r7, #3]
 800e19c:	6879      	ldr	r1, [r7, #4]
 800e19e:	4613      	mov	r3, r2
 800e1a0:	00db      	lsls	r3, r3, #3
 800e1a2:	4413      	add	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	440b      	add	r3, r1
 800e1a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e1ac:	681a      	ldr	r2, [r3, #0]
 800e1ae:	78fb      	ldrb	r3, [r7, #3]
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	f7fe fb15 	bl	800c7e0 <USBD_LL_DataOutStage>
}
 800e1b6:	bf00      	nop
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b082      	sub	sp, #8
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800e1d0:	78fa      	ldrb	r2, [r7, #3]
 800e1d2:	6879      	ldr	r1, [r7, #4]
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	00db      	lsls	r3, r3, #3
 800e1d8:	4413      	add	r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	440b      	add	r3, r1
 800e1de:	3320      	adds	r3, #32
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	78fb      	ldrb	r3, [r7, #3]
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	f7fe fbae 	bl	800c946 <USBD_LL_DataInStage>
}
 800e1ea:	bf00      	nop
 800e1ec:	3708      	adds	r7, #8
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}

0800e1f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1f2:	b580      	push	{r7, lr}
 800e1f4:	b082      	sub	sp, #8
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e200:	4618      	mov	r0, r3
 800e202:	f7fe fce8 	bl	800cbd6 <USBD_LL_SOF>
}
 800e206:	bf00      	nop
 800e208:	3708      	adds	r7, #8
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e20e:	b580      	push	{r7, lr}
 800e210:	b084      	sub	sp, #16
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e216:	2301      	movs	r3, #1
 800e218:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	79db      	ldrb	r3, [r3, #7]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d102      	bne.n	800e228 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e222:	2300      	movs	r3, #0
 800e224:	73fb      	strb	r3, [r7, #15]
 800e226:	e008      	b.n	800e23a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	79db      	ldrb	r3, [r3, #7]
 800e22c:	2b02      	cmp	r3, #2
 800e22e:	d102      	bne.n	800e236 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e230:	2301      	movs	r3, #1
 800e232:	73fb      	strb	r3, [r7, #15]
 800e234:	e001      	b.n	800e23a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e236:	f7f4 fdbd 	bl	8002db4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e240:	7bfa      	ldrb	r2, [r7, #15]
 800e242:	4611      	mov	r1, r2
 800e244:	4618      	mov	r0, r3
 800e246:	f7fe fc82 	bl	800cb4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e250:	4618      	mov	r0, r3
 800e252:	f7fe fc2a 	bl	800caaa <USBD_LL_Reset>
}
 800e256:	bf00      	nop
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
	...

0800e260 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fe fc7d 	bl	800cb6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	6812      	ldr	r2, [r2, #0]
 800e282:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e286:	f043 0301 	orr.w	r3, r3, #1
 800e28a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	7adb      	ldrb	r3, [r3, #11]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d005      	beq.n	800e2a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e294:	4b04      	ldr	r3, [pc, #16]	@ (800e2a8 <HAL_PCD_SuspendCallback+0x48>)
 800e296:	691b      	ldr	r3, [r3, #16]
 800e298:	4a03      	ldr	r2, [pc, #12]	@ (800e2a8 <HAL_PCD_SuspendCallback+0x48>)
 800e29a:	f043 0306 	orr.w	r3, r3, #6
 800e29e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e2a0:	bf00      	nop
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}
 800e2a8:	e000ed00 	.word	0xe000ed00

0800e2ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7fe fc73 	bl	800cba6 <USBD_LL_Resume>
}
 800e2c0:	bf00      	nop
 800e2c2:	3708      	adds	r7, #8
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e2da:	78fa      	ldrb	r2, [r7, #3]
 800e2dc:	4611      	mov	r1, r2
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7fe fccb 	bl	800cc7a <USBD_LL_IsoOUTIncomplete>
}
 800e2e4:	bf00      	nop
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e2fe:	78fa      	ldrb	r2, [r7, #3]
 800e300:	4611      	mov	r1, r2
 800e302:	4618      	mov	r0, r3
 800e304:	f7fe fc87 	bl	800cc16 <USBD_LL_IsoINIncomplete>
}
 800e308:	bf00      	nop
 800e30a:	3708      	adds	r7, #8
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fe fcdd 	bl	800ccde <USBD_LL_DevConnected>
}
 800e324:	bf00      	nop
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7fe fcda 	bl	800ccf4 <USBD_LL_DevDisconnected>
}
 800e340:	bf00      	nop
 800e342:	3708      	adds	r7, #8
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d13c      	bne.n	800e3d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e358:	4a20      	ldr	r2, [pc, #128]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a1e      	ldr	r2, [pc, #120]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e364:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e368:	4b1c      	ldr	r3, [pc, #112]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e36a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e36e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e370:	4b1a      	ldr	r3, [pc, #104]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e372:	2206      	movs	r2, #6
 800e374:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e376:	4b19      	ldr	r3, [pc, #100]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e378:	2202      	movs	r2, #2
 800e37a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e37c:	4b17      	ldr	r3, [pc, #92]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e37e:	2200      	movs	r2, #0
 800e380:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e382:	4b16      	ldr	r3, [pc, #88]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e384:	2202      	movs	r2, #2
 800e386:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e388:	4b14      	ldr	r3, [pc, #80]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e38a:	2201      	movs	r2, #1
 800e38c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e38e:	4b13      	ldr	r3, [pc, #76]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e390:	2200      	movs	r2, #0
 800e392:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e394:	4b11      	ldr	r3, [pc, #68]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e396:	2200      	movs	r2, #0
 800e398:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e39a:	4b10      	ldr	r3, [pc, #64]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e39c:	2201      	movs	r2, #1
 800e39e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e3a0:	4b0e      	ldr	r3, [pc, #56]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e3a6:	480d      	ldr	r0, [pc, #52]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e3a8:	f7f7 fafb 	bl	80059a2 <HAL_PCD_Init>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e3b2:	f7f4 fcff 	bl	8002db4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e3b6:	2180      	movs	r1, #128	@ 0x80
 800e3b8:	4808      	ldr	r0, [pc, #32]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e3ba:	f7f8 fd46 	bl	8006e4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e3be:	2240      	movs	r2, #64	@ 0x40
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	4806      	ldr	r0, [pc, #24]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e3c4:	f7f8 fcfa 	bl	8006dbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e3c8:	2280      	movs	r2, #128	@ 0x80
 800e3ca:	2101      	movs	r1, #1
 800e3cc:	4803      	ldr	r0, [pc, #12]	@ (800e3dc <USBD_LL_Init+0x94>)
 800e3ce:	f7f8 fcf5 	bl	8006dbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	2006ff84 	.word	0x2006ff84

0800e3e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7f7 fbe9 	bl	8005bce <HAL_PCD_Start>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	4618      	mov	r0, r3
 800e404:	f000 f97e 	bl	800e704 <USBD_Get_USB_Status>
 800e408:	4603      	mov	r3, r0
 800e40a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e40c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b084      	sub	sp, #16
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
 800e41e:	4608      	mov	r0, r1
 800e420:	4611      	mov	r1, r2
 800e422:	461a      	mov	r2, r3
 800e424:	4603      	mov	r3, r0
 800e426:	70fb      	strb	r3, [r7, #3]
 800e428:	460b      	mov	r3, r1
 800e42a:	70bb      	strb	r3, [r7, #2]
 800e42c:	4613      	mov	r3, r2
 800e42e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e430:	2300      	movs	r3, #0
 800e432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e434:	2300      	movs	r3, #0
 800e436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e43e:	78bb      	ldrb	r3, [r7, #2]
 800e440:	883a      	ldrh	r2, [r7, #0]
 800e442:	78f9      	ldrb	r1, [r7, #3]
 800e444:	f7f8 f8d7 	bl	80065f6 <HAL_PCD_EP_Open>
 800e448:	4603      	mov	r3, r0
 800e44a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e44c:	7bfb      	ldrb	r3, [r7, #15]
 800e44e:	4618      	mov	r0, r3
 800e450:	f000 f958 	bl	800e704 <USBD_Get_USB_Status>
 800e454:	4603      	mov	r3, r0
 800e456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e458:	7bbb      	ldrb	r3, [r7, #14]
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3710      	adds	r7, #16
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}

0800e462 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e462:	b580      	push	{r7, lr}
 800e464:	b084      	sub	sp, #16
 800e466:	af00      	add	r7, sp, #0
 800e468:	6078      	str	r0, [r7, #4]
 800e46a:	460b      	mov	r3, r1
 800e46c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e46e:	2300      	movs	r3, #0
 800e470:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e472:	2300      	movs	r3, #0
 800e474:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e47c:	78fa      	ldrb	r2, [r7, #3]
 800e47e:	4611      	mov	r1, r2
 800e480:	4618      	mov	r0, r3
 800e482:	f7f8 f920 	bl	80066c6 <HAL_PCD_EP_Close>
 800e486:	4603      	mov	r3, r0
 800e488:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e48a:	7bfb      	ldrb	r3, [r7, #15]
 800e48c:	4618      	mov	r0, r3
 800e48e:	f000 f939 	bl	800e704 <USBD_Get_USB_Status>
 800e492:	4603      	mov	r3, r0
 800e494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e496:	7bbb      	ldrb	r3, [r7, #14]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4ba:	78fa      	ldrb	r2, [r7, #3]
 800e4bc:	4611      	mov	r1, r2
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7f8 f9d8 	bl	8006874 <HAL_PCD_EP_SetStall>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4c8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f000 f91a 	bl	800e704 <USBD_Get_USB_Status>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}

0800e4de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4de:	b580      	push	{r7, lr}
 800e4e0:	b084      	sub	sp, #16
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4f8:	78fa      	ldrb	r2, [r7, #3]
 800e4fa:	4611      	mov	r1, r2
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7f8 fa1c 	bl	800693a <HAL_PCD_EP_ClrStall>
 800e502:	4603      	mov	r3, r0
 800e504:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e506:	7bfb      	ldrb	r3, [r7, #15]
 800e508:	4618      	mov	r0, r3
 800e50a:	f000 f8fb 	bl	800e704 <USBD_Get_USB_Status>
 800e50e:	4603      	mov	r3, r0
 800e510:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e512:	7bbb      	ldrb	r3, [r7, #14]
}
 800e514:	4618      	mov	r0, r3
 800e516:	3710      	adds	r7, #16
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	460b      	mov	r3, r1
 800e526:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e52e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e534:	2b00      	cmp	r3, #0
 800e536:	da0b      	bge.n	800e550 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e538:	78fb      	ldrb	r3, [r7, #3]
 800e53a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e53e:	68f9      	ldr	r1, [r7, #12]
 800e540:	4613      	mov	r3, r2
 800e542:	00db      	lsls	r3, r3, #3
 800e544:	4413      	add	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	440b      	add	r3, r1
 800e54a:	3316      	adds	r3, #22
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	e00b      	b.n	800e568 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e550:	78fb      	ldrb	r3, [r7, #3]
 800e552:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e556:	68f9      	ldr	r1, [r7, #12]
 800e558:	4613      	mov	r3, r2
 800e55a:	00db      	lsls	r3, r3, #3
 800e55c:	4413      	add	r3, r2
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	440b      	add	r3, r1
 800e562:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e566:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3714      	adds	r7, #20
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr

0800e574 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	460b      	mov	r3, r1
 800e57e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e580:	2300      	movs	r3, #0
 800e582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e584:	2300      	movs	r3, #0
 800e586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e58e:	78fa      	ldrb	r2, [r7, #3]
 800e590:	4611      	mov	r1, r2
 800e592:	4618      	mov	r0, r3
 800e594:	f7f8 f80b 	bl	80065ae <HAL_PCD_SetAddress>
 800e598:	4603      	mov	r3, r0
 800e59a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e59c:	7bfb      	ldrb	r3, [r7, #15]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f000 f8b0 	bl	800e704 <USBD_Get_USB_Status>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3710      	adds	r7, #16
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b086      	sub	sp, #24
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	60f8      	str	r0, [r7, #12]
 800e5ba:	607a      	str	r2, [r7, #4]
 800e5bc:	603b      	str	r3, [r7, #0]
 800e5be:	460b      	mov	r3, r1
 800e5c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e5d0:	7af9      	ldrb	r1, [r7, #11]
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	f7f8 f913 	bl	8006800 <HAL_PCD_EP_Transmit>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5de:	7dfb      	ldrb	r3, [r7, #23]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f000 f88f 	bl	800e704 <USBD_Get_USB_Status>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e5ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3718      	adds	r7, #24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	607a      	str	r2, [r7, #4]
 800e5fe:	603b      	str	r3, [r7, #0]
 800e600:	460b      	mov	r3, r1
 800e602:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e604:	2300      	movs	r3, #0
 800e606:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e608:	2300      	movs	r3, #0
 800e60a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e612:	7af9      	ldrb	r1, [r7, #11]
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	f7f8 f89f 	bl	800675a <HAL_PCD_EP_Receive>
 800e61c:	4603      	mov	r3, r0
 800e61e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e620:	7dfb      	ldrb	r3, [r7, #23]
 800e622:	4618      	mov	r0, r3
 800e624:	f000 f86e 	bl	800e704 <USBD_Get_USB_Status>
 800e628:	4603      	mov	r3, r0
 800e62a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e62c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3718      	adds	r7, #24
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}

0800e636 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b082      	sub	sp, #8
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	460b      	mov	r3, r1
 800e640:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e648:	78fa      	ldrb	r2, [r7, #3]
 800e64a:	4611      	mov	r1, r2
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7f8 f8bf 	bl	80067d0 <HAL_PCD_EP_GetRxCount>
 800e652:	4603      	mov	r3, r0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	460b      	mov	r3, r1
 800e666:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e668:	78fb      	ldrb	r3, [r7, #3]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d002      	beq.n	800e674 <HAL_PCDEx_LPM_Callback+0x18>
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d01f      	beq.n	800e6b2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e672:	e03b      	b.n	800e6ec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	7adb      	ldrb	r3, [r3, #11]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d007      	beq.n	800e68c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e67c:	f000 f83c 	bl	800e6f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e680:	4b1c      	ldr	r3, [pc, #112]	@ (800e6f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e682:	691b      	ldr	r3, [r3, #16]
 800e684:	4a1b      	ldr	r2, [pc, #108]	@ (800e6f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e686:	f023 0306 	bic.w	r3, r3, #6
 800e68a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	6812      	ldr	r2, [r2, #0]
 800e69a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e69e:	f023 0301 	bic.w	r3, r3, #1
 800e6a2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fe fa7b 	bl	800cba6 <USBD_LL_Resume>
    break;
 800e6b0:	e01c      	b.n	800e6ec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	6812      	ldr	r2, [r2, #0]
 800e6c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e6c4:	f043 0301 	orr.w	r3, r3, #1
 800e6c8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7fe fa4c 	bl	800cb6e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	7adb      	ldrb	r3, [r3, #11]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d005      	beq.n	800e6ea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6de:	4b05      	ldr	r3, [pc, #20]	@ (800e6f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e6e0:	691b      	ldr	r3, [r3, #16]
 800e6e2:	4a04      	ldr	r2, [pc, #16]	@ (800e6f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e6e4:	f043 0306 	orr.w	r3, r3, #6
 800e6e8:	6113      	str	r3, [r2, #16]
    break;
 800e6ea:	bf00      	nop
}
 800e6ec:	bf00      	nop
 800e6ee:	3708      	adds	r7, #8
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	e000ed00 	.word	0xe000ed00

0800e6f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e6fc:	f7f3 ff68 	bl	80025d0 <SystemClock_Config>
}
 800e700:	bf00      	nop
 800e702:	bd80      	pop	{r7, pc}

0800e704 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
 800e70a:	4603      	mov	r3, r0
 800e70c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e70e:	2300      	movs	r3, #0
 800e710:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e712:	79fb      	ldrb	r3, [r7, #7]
 800e714:	2b03      	cmp	r3, #3
 800e716:	d817      	bhi.n	800e748 <USBD_Get_USB_Status+0x44>
 800e718:	a201      	add	r2, pc, #4	@ (adr r2, 800e720 <USBD_Get_USB_Status+0x1c>)
 800e71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e71e:	bf00      	nop
 800e720:	0800e731 	.word	0x0800e731
 800e724:	0800e737 	.word	0x0800e737
 800e728:	0800e73d 	.word	0x0800e73d
 800e72c:	0800e743 	.word	0x0800e743
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e730:	2300      	movs	r3, #0
 800e732:	73fb      	strb	r3, [r7, #15]
    break;
 800e734:	e00b      	b.n	800e74e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e736:	2303      	movs	r3, #3
 800e738:	73fb      	strb	r3, [r7, #15]
    break;
 800e73a:	e008      	b.n	800e74e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e73c:	2301      	movs	r3, #1
 800e73e:	73fb      	strb	r3, [r7, #15]
    break;
 800e740:	e005      	b.n	800e74e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e742:	2303      	movs	r3, #3
 800e744:	73fb      	strb	r3, [r7, #15]
    break;
 800e746:	e002      	b.n	800e74e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e748:	2303      	movs	r3, #3
 800e74a:	73fb      	strb	r3, [r7, #15]
    break;
 800e74c:	bf00      	nop
  }
  return usb_status;
 800e74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e750:	4618      	mov	r0, r3
 800e752:	3714      	adds	r7, #20
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <malloc>:
 800e75c:	4b02      	ldr	r3, [pc, #8]	@ (800e768 <malloc+0xc>)
 800e75e:	4601      	mov	r1, r0
 800e760:	6818      	ldr	r0, [r3, #0]
 800e762:	f000 b82d 	b.w	800e7c0 <_malloc_r>
 800e766:	bf00      	nop
 800e768:	20000118 	.word	0x20000118

0800e76c <free>:
 800e76c:	4b02      	ldr	r3, [pc, #8]	@ (800e778 <free+0xc>)
 800e76e:	4601      	mov	r1, r0
 800e770:	6818      	ldr	r0, [r3, #0]
 800e772:	f000 b997 	b.w	800eaa4 <_free_r>
 800e776:	bf00      	nop
 800e778:	20000118 	.word	0x20000118

0800e77c <sbrk_aligned>:
 800e77c:	b570      	push	{r4, r5, r6, lr}
 800e77e:	4e0f      	ldr	r6, [pc, #60]	@ (800e7bc <sbrk_aligned+0x40>)
 800e780:	460c      	mov	r4, r1
 800e782:	6831      	ldr	r1, [r6, #0]
 800e784:	4605      	mov	r5, r0
 800e786:	b911      	cbnz	r1, 800e78e <sbrk_aligned+0x12>
 800e788:	f000 f8ae 	bl	800e8e8 <_sbrk_r>
 800e78c:	6030      	str	r0, [r6, #0]
 800e78e:	4621      	mov	r1, r4
 800e790:	4628      	mov	r0, r5
 800e792:	f000 f8a9 	bl	800e8e8 <_sbrk_r>
 800e796:	1c43      	adds	r3, r0, #1
 800e798:	d103      	bne.n	800e7a2 <sbrk_aligned+0x26>
 800e79a:	f04f 34ff 	mov.w	r4, #4294967295
 800e79e:	4620      	mov	r0, r4
 800e7a0:	bd70      	pop	{r4, r5, r6, pc}
 800e7a2:	1cc4      	adds	r4, r0, #3
 800e7a4:	f024 0403 	bic.w	r4, r4, #3
 800e7a8:	42a0      	cmp	r0, r4
 800e7aa:	d0f8      	beq.n	800e79e <sbrk_aligned+0x22>
 800e7ac:	1a21      	subs	r1, r4, r0
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	f000 f89a 	bl	800e8e8 <_sbrk_r>
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	d1f2      	bne.n	800e79e <sbrk_aligned+0x22>
 800e7b8:	e7ef      	b.n	800e79a <sbrk_aligned+0x1e>
 800e7ba:	bf00      	nop
 800e7bc:	20070464 	.word	0x20070464

0800e7c0 <_malloc_r>:
 800e7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7c4:	1ccd      	adds	r5, r1, #3
 800e7c6:	f025 0503 	bic.w	r5, r5, #3
 800e7ca:	3508      	adds	r5, #8
 800e7cc:	2d0c      	cmp	r5, #12
 800e7ce:	bf38      	it	cc
 800e7d0:	250c      	movcc	r5, #12
 800e7d2:	2d00      	cmp	r5, #0
 800e7d4:	4606      	mov	r6, r0
 800e7d6:	db01      	blt.n	800e7dc <_malloc_r+0x1c>
 800e7d8:	42a9      	cmp	r1, r5
 800e7da:	d904      	bls.n	800e7e6 <_malloc_r+0x26>
 800e7dc:	230c      	movs	r3, #12
 800e7de:	6033      	str	r3, [r6, #0]
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e8bc <_malloc_r+0xfc>
 800e7ea:	f000 f869 	bl	800e8c0 <__malloc_lock>
 800e7ee:	f8d8 3000 	ldr.w	r3, [r8]
 800e7f2:	461c      	mov	r4, r3
 800e7f4:	bb44      	cbnz	r4, 800e848 <_malloc_r+0x88>
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	f7ff ffbf 	bl	800e77c <sbrk_aligned>
 800e7fe:	1c43      	adds	r3, r0, #1
 800e800:	4604      	mov	r4, r0
 800e802:	d158      	bne.n	800e8b6 <_malloc_r+0xf6>
 800e804:	f8d8 4000 	ldr.w	r4, [r8]
 800e808:	4627      	mov	r7, r4
 800e80a:	2f00      	cmp	r7, #0
 800e80c:	d143      	bne.n	800e896 <_malloc_r+0xd6>
 800e80e:	2c00      	cmp	r4, #0
 800e810:	d04b      	beq.n	800e8aa <_malloc_r+0xea>
 800e812:	6823      	ldr	r3, [r4, #0]
 800e814:	4639      	mov	r1, r7
 800e816:	4630      	mov	r0, r6
 800e818:	eb04 0903 	add.w	r9, r4, r3
 800e81c:	f000 f864 	bl	800e8e8 <_sbrk_r>
 800e820:	4581      	cmp	r9, r0
 800e822:	d142      	bne.n	800e8aa <_malloc_r+0xea>
 800e824:	6821      	ldr	r1, [r4, #0]
 800e826:	1a6d      	subs	r5, r5, r1
 800e828:	4629      	mov	r1, r5
 800e82a:	4630      	mov	r0, r6
 800e82c:	f7ff ffa6 	bl	800e77c <sbrk_aligned>
 800e830:	3001      	adds	r0, #1
 800e832:	d03a      	beq.n	800e8aa <_malloc_r+0xea>
 800e834:	6823      	ldr	r3, [r4, #0]
 800e836:	442b      	add	r3, r5
 800e838:	6023      	str	r3, [r4, #0]
 800e83a:	f8d8 3000 	ldr.w	r3, [r8]
 800e83e:	685a      	ldr	r2, [r3, #4]
 800e840:	bb62      	cbnz	r2, 800e89c <_malloc_r+0xdc>
 800e842:	f8c8 7000 	str.w	r7, [r8]
 800e846:	e00f      	b.n	800e868 <_malloc_r+0xa8>
 800e848:	6822      	ldr	r2, [r4, #0]
 800e84a:	1b52      	subs	r2, r2, r5
 800e84c:	d420      	bmi.n	800e890 <_malloc_r+0xd0>
 800e84e:	2a0b      	cmp	r2, #11
 800e850:	d917      	bls.n	800e882 <_malloc_r+0xc2>
 800e852:	1961      	adds	r1, r4, r5
 800e854:	42a3      	cmp	r3, r4
 800e856:	6025      	str	r5, [r4, #0]
 800e858:	bf18      	it	ne
 800e85a:	6059      	strne	r1, [r3, #4]
 800e85c:	6863      	ldr	r3, [r4, #4]
 800e85e:	bf08      	it	eq
 800e860:	f8c8 1000 	streq.w	r1, [r8]
 800e864:	5162      	str	r2, [r4, r5]
 800e866:	604b      	str	r3, [r1, #4]
 800e868:	4630      	mov	r0, r6
 800e86a:	f000 f82f 	bl	800e8cc <__malloc_unlock>
 800e86e:	f104 000b 	add.w	r0, r4, #11
 800e872:	1d23      	adds	r3, r4, #4
 800e874:	f020 0007 	bic.w	r0, r0, #7
 800e878:	1ac2      	subs	r2, r0, r3
 800e87a:	bf1c      	itt	ne
 800e87c:	1a1b      	subne	r3, r3, r0
 800e87e:	50a3      	strne	r3, [r4, r2]
 800e880:	e7af      	b.n	800e7e2 <_malloc_r+0x22>
 800e882:	6862      	ldr	r2, [r4, #4]
 800e884:	42a3      	cmp	r3, r4
 800e886:	bf0c      	ite	eq
 800e888:	f8c8 2000 	streq.w	r2, [r8]
 800e88c:	605a      	strne	r2, [r3, #4]
 800e88e:	e7eb      	b.n	800e868 <_malloc_r+0xa8>
 800e890:	4623      	mov	r3, r4
 800e892:	6864      	ldr	r4, [r4, #4]
 800e894:	e7ae      	b.n	800e7f4 <_malloc_r+0x34>
 800e896:	463c      	mov	r4, r7
 800e898:	687f      	ldr	r7, [r7, #4]
 800e89a:	e7b6      	b.n	800e80a <_malloc_r+0x4a>
 800e89c:	461a      	mov	r2, r3
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	42a3      	cmp	r3, r4
 800e8a2:	d1fb      	bne.n	800e89c <_malloc_r+0xdc>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	6053      	str	r3, [r2, #4]
 800e8a8:	e7de      	b.n	800e868 <_malloc_r+0xa8>
 800e8aa:	230c      	movs	r3, #12
 800e8ac:	6033      	str	r3, [r6, #0]
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	f000 f80c 	bl	800e8cc <__malloc_unlock>
 800e8b4:	e794      	b.n	800e7e0 <_malloc_r+0x20>
 800e8b6:	6005      	str	r5, [r0, #0]
 800e8b8:	e7d6      	b.n	800e868 <_malloc_r+0xa8>
 800e8ba:	bf00      	nop
 800e8bc:	20070468 	.word	0x20070468

0800e8c0 <__malloc_lock>:
 800e8c0:	4801      	ldr	r0, [pc, #4]	@ (800e8c8 <__malloc_lock+0x8>)
 800e8c2:	f000 b84b 	b.w	800e95c <__retarget_lock_acquire_recursive>
 800e8c6:	bf00      	nop
 800e8c8:	200705a8 	.word	0x200705a8

0800e8cc <__malloc_unlock>:
 800e8cc:	4801      	ldr	r0, [pc, #4]	@ (800e8d4 <__malloc_unlock+0x8>)
 800e8ce:	f000 b846 	b.w	800e95e <__retarget_lock_release_recursive>
 800e8d2:	bf00      	nop
 800e8d4:	200705a8 	.word	0x200705a8

0800e8d8 <memset>:
 800e8d8:	4402      	add	r2, r0
 800e8da:	4603      	mov	r3, r0
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d100      	bne.n	800e8e2 <memset+0xa>
 800e8e0:	4770      	bx	lr
 800e8e2:	f803 1b01 	strb.w	r1, [r3], #1
 800e8e6:	e7f9      	b.n	800e8dc <memset+0x4>

0800e8e8 <_sbrk_r>:
 800e8e8:	b538      	push	{r3, r4, r5, lr}
 800e8ea:	4d06      	ldr	r5, [pc, #24]	@ (800e904 <_sbrk_r+0x1c>)
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	4608      	mov	r0, r1
 800e8f2:	602b      	str	r3, [r5, #0]
 800e8f4:	f7f4 ffa2 	bl	800383c <_sbrk>
 800e8f8:	1c43      	adds	r3, r0, #1
 800e8fa:	d102      	bne.n	800e902 <_sbrk_r+0x1a>
 800e8fc:	682b      	ldr	r3, [r5, #0]
 800e8fe:	b103      	cbz	r3, 800e902 <_sbrk_r+0x1a>
 800e900:	6023      	str	r3, [r4, #0]
 800e902:	bd38      	pop	{r3, r4, r5, pc}
 800e904:	200705a4 	.word	0x200705a4

0800e908 <__errno>:
 800e908:	4b01      	ldr	r3, [pc, #4]	@ (800e910 <__errno+0x8>)
 800e90a:	6818      	ldr	r0, [r3, #0]
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop
 800e910:	20000118 	.word	0x20000118

0800e914 <__libc_init_array>:
 800e914:	b570      	push	{r4, r5, r6, lr}
 800e916:	4d0d      	ldr	r5, [pc, #52]	@ (800e94c <__libc_init_array+0x38>)
 800e918:	4c0d      	ldr	r4, [pc, #52]	@ (800e950 <__libc_init_array+0x3c>)
 800e91a:	1b64      	subs	r4, r4, r5
 800e91c:	10a4      	asrs	r4, r4, #2
 800e91e:	2600      	movs	r6, #0
 800e920:	42a6      	cmp	r6, r4
 800e922:	d109      	bne.n	800e938 <__libc_init_array+0x24>
 800e924:	4d0b      	ldr	r5, [pc, #44]	@ (800e954 <__libc_init_array+0x40>)
 800e926:	4c0c      	ldr	r4, [pc, #48]	@ (800e958 <__libc_init_array+0x44>)
 800e928:	f000 f9e8 	bl	800ecfc <_init>
 800e92c:	1b64      	subs	r4, r4, r5
 800e92e:	10a4      	asrs	r4, r4, #2
 800e930:	2600      	movs	r6, #0
 800e932:	42a6      	cmp	r6, r4
 800e934:	d105      	bne.n	800e942 <__libc_init_array+0x2e>
 800e936:	bd70      	pop	{r4, r5, r6, pc}
 800e938:	f855 3b04 	ldr.w	r3, [r5], #4
 800e93c:	4798      	blx	r3
 800e93e:	3601      	adds	r6, #1
 800e940:	e7ee      	b.n	800e920 <__libc_init_array+0xc>
 800e942:	f855 3b04 	ldr.w	r3, [r5], #4
 800e946:	4798      	blx	r3
 800e948:	3601      	adds	r6, #1
 800e94a:	e7f2      	b.n	800e932 <__libc_init_array+0x1e>
 800e94c:	0800f0c8 	.word	0x0800f0c8
 800e950:	0800f0c8 	.word	0x0800f0c8
 800e954:	0800f0c8 	.word	0x0800f0c8
 800e958:	0800f0cc 	.word	0x0800f0cc

0800e95c <__retarget_lock_acquire_recursive>:
 800e95c:	4770      	bx	lr

0800e95e <__retarget_lock_release_recursive>:
 800e95e:	4770      	bx	lr

0800e960 <memcpy>:
 800e960:	440a      	add	r2, r1
 800e962:	4291      	cmp	r1, r2
 800e964:	f100 33ff 	add.w	r3, r0, #4294967295
 800e968:	d100      	bne.n	800e96c <memcpy+0xc>
 800e96a:	4770      	bx	lr
 800e96c:	b510      	push	{r4, lr}
 800e96e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e972:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e976:	4291      	cmp	r1, r2
 800e978:	d1f9      	bne.n	800e96e <memcpy+0xe>
 800e97a:	bd10      	pop	{r4, pc}

0800e97c <ldexpf>:
 800e97c:	b510      	push	{r4, lr}
 800e97e:	ed2d 8b02 	vpush	{d8}
 800e982:	4604      	mov	r4, r0
 800e984:	eeb0 8a40 	vmov.f32	s16, s0
 800e988:	f000 f882 	bl	800ea90 <finitef>
 800e98c:	b1b8      	cbz	r0, 800e9be <ldexpf+0x42>
 800e98e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e996:	d012      	beq.n	800e9be <ldexpf+0x42>
 800e998:	eeb0 0a48 	vmov.f32	s0, s16
 800e99c:	4620      	mov	r0, r4
 800e99e:	f000 f813 	bl	800e9c8 <scalbnf>
 800e9a2:	eeb0 8a40 	vmov.f32	s16, s0
 800e9a6:	f000 f873 	bl	800ea90 <finitef>
 800e9aa:	b120      	cbz	r0, 800e9b6 <ldexpf+0x3a>
 800e9ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b4:	d103      	bne.n	800e9be <ldexpf+0x42>
 800e9b6:	f7ff ffa7 	bl	800e908 <__errno>
 800e9ba:	2322      	movs	r3, #34	@ 0x22
 800e9bc:	6003      	str	r3, [r0, #0]
 800e9be:	eeb0 0a48 	vmov.f32	s0, s16
 800e9c2:	ecbd 8b02 	vpop	{d8}
 800e9c6:	bd10      	pop	{r4, pc}

0800e9c8 <scalbnf>:
 800e9c8:	ee10 3a10 	vmov	r3, s0
 800e9cc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e9d0:	d02a      	beq.n	800ea28 <scalbnf+0x60>
 800e9d2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e9d6:	d302      	bcc.n	800e9de <scalbnf+0x16>
 800e9d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e9dc:	4770      	bx	lr
 800e9de:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e9e2:	d122      	bne.n	800ea2a <scalbnf+0x62>
 800e9e4:	4b23      	ldr	r3, [pc, #140]	@ (800ea74 <scalbnf+0xac>)
 800e9e6:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800ea78 <scalbnf+0xb0>
 800e9ea:	4298      	cmp	r0, r3
 800e9ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e9f0:	db16      	blt.n	800ea20 <scalbnf+0x58>
 800e9f2:	ee10 3a10 	vmov	r3, s0
 800e9f6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e9fa:	3a19      	subs	r2, #25
 800e9fc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ea00:	4288      	cmp	r0, r1
 800ea02:	dd14      	ble.n	800ea2e <scalbnf+0x66>
 800ea04:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 800ea7c <scalbnf+0xb4>
 800ea08:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800ea80 <scalbnf+0xb8>
 800ea0c:	ee10 3a10 	vmov	r3, s0
 800ea10:	eeb0 7a67 	vmov.f32	s14, s15
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800ea1a:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ea1e:	4770      	bx	lr
 800ea20:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800ea84 <scalbnf+0xbc>
 800ea24:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ea28:	4770      	bx	lr
 800ea2a:	0dd2      	lsrs	r2, r2, #23
 800ea2c:	e7e6      	b.n	800e9fc <scalbnf+0x34>
 800ea2e:	4410      	add	r0, r2
 800ea30:	28fe      	cmp	r0, #254	@ 0xfe
 800ea32:	dce7      	bgt.n	800ea04 <scalbnf+0x3c>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	dd06      	ble.n	800ea46 <scalbnf+0x7e>
 800ea38:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ea3c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ea40:	ee00 3a10 	vmov	s0, r3
 800ea44:	4770      	bx	lr
 800ea46:	f110 0f16 	cmn.w	r0, #22
 800ea4a:	da09      	bge.n	800ea60 <scalbnf+0x98>
 800ea4c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800ea84 <scalbnf+0xbc>
 800ea50:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800ea88 <scalbnf+0xc0>
 800ea54:	ee10 3a10 	vmov	r3, s0
 800ea58:	eeb0 7a67 	vmov.f32	s14, s15
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	e7da      	b.n	800ea16 <scalbnf+0x4e>
 800ea60:	3019      	adds	r0, #25
 800ea62:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ea66:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ea6a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ea8c <scalbnf+0xc4>
 800ea6e:	ee07 3a90 	vmov	s15, r3
 800ea72:	e7d7      	b.n	800ea24 <scalbnf+0x5c>
 800ea74:	ffff3cb0 	.word	0xffff3cb0
 800ea78:	4c000000 	.word	0x4c000000
 800ea7c:	7149f2ca 	.word	0x7149f2ca
 800ea80:	f149f2ca 	.word	0xf149f2ca
 800ea84:	0da24260 	.word	0x0da24260
 800ea88:	8da24260 	.word	0x8da24260
 800ea8c:	33000000 	.word	0x33000000

0800ea90 <finitef>:
 800ea90:	ee10 3a10 	vmov	r3, s0
 800ea94:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ea98:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ea9c:	bfac      	ite	ge
 800ea9e:	2000      	movge	r0, #0
 800eaa0:	2001      	movlt	r0, #1
 800eaa2:	4770      	bx	lr

0800eaa4 <_free_r>:
 800eaa4:	b538      	push	{r3, r4, r5, lr}
 800eaa6:	4605      	mov	r5, r0
 800eaa8:	2900      	cmp	r1, #0
 800eaaa:	d041      	beq.n	800eb30 <_free_r+0x8c>
 800eaac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eab0:	1f0c      	subs	r4, r1, #4
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	bfb8      	it	lt
 800eab6:	18e4      	addlt	r4, r4, r3
 800eab8:	f7ff ff02 	bl	800e8c0 <__malloc_lock>
 800eabc:	4a1d      	ldr	r2, [pc, #116]	@ (800eb34 <_free_r+0x90>)
 800eabe:	6813      	ldr	r3, [r2, #0]
 800eac0:	b933      	cbnz	r3, 800ead0 <_free_r+0x2c>
 800eac2:	6063      	str	r3, [r4, #4]
 800eac4:	6014      	str	r4, [r2, #0]
 800eac6:	4628      	mov	r0, r5
 800eac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eacc:	f7ff befe 	b.w	800e8cc <__malloc_unlock>
 800ead0:	42a3      	cmp	r3, r4
 800ead2:	d908      	bls.n	800eae6 <_free_r+0x42>
 800ead4:	6820      	ldr	r0, [r4, #0]
 800ead6:	1821      	adds	r1, r4, r0
 800ead8:	428b      	cmp	r3, r1
 800eada:	bf01      	itttt	eq
 800eadc:	6819      	ldreq	r1, [r3, #0]
 800eade:	685b      	ldreq	r3, [r3, #4]
 800eae0:	1809      	addeq	r1, r1, r0
 800eae2:	6021      	streq	r1, [r4, #0]
 800eae4:	e7ed      	b.n	800eac2 <_free_r+0x1e>
 800eae6:	461a      	mov	r2, r3
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	b10b      	cbz	r3, 800eaf0 <_free_r+0x4c>
 800eaec:	42a3      	cmp	r3, r4
 800eaee:	d9fa      	bls.n	800eae6 <_free_r+0x42>
 800eaf0:	6811      	ldr	r1, [r2, #0]
 800eaf2:	1850      	adds	r0, r2, r1
 800eaf4:	42a0      	cmp	r0, r4
 800eaf6:	d10b      	bne.n	800eb10 <_free_r+0x6c>
 800eaf8:	6820      	ldr	r0, [r4, #0]
 800eafa:	4401      	add	r1, r0
 800eafc:	1850      	adds	r0, r2, r1
 800eafe:	4283      	cmp	r3, r0
 800eb00:	6011      	str	r1, [r2, #0]
 800eb02:	d1e0      	bne.n	800eac6 <_free_r+0x22>
 800eb04:	6818      	ldr	r0, [r3, #0]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	6053      	str	r3, [r2, #4]
 800eb0a:	4408      	add	r0, r1
 800eb0c:	6010      	str	r0, [r2, #0]
 800eb0e:	e7da      	b.n	800eac6 <_free_r+0x22>
 800eb10:	d902      	bls.n	800eb18 <_free_r+0x74>
 800eb12:	230c      	movs	r3, #12
 800eb14:	602b      	str	r3, [r5, #0]
 800eb16:	e7d6      	b.n	800eac6 <_free_r+0x22>
 800eb18:	6820      	ldr	r0, [r4, #0]
 800eb1a:	1821      	adds	r1, r4, r0
 800eb1c:	428b      	cmp	r3, r1
 800eb1e:	bf04      	itt	eq
 800eb20:	6819      	ldreq	r1, [r3, #0]
 800eb22:	685b      	ldreq	r3, [r3, #4]
 800eb24:	6063      	str	r3, [r4, #4]
 800eb26:	bf04      	itt	eq
 800eb28:	1809      	addeq	r1, r1, r0
 800eb2a:	6021      	streq	r1, [r4, #0]
 800eb2c:	6054      	str	r4, [r2, #4]
 800eb2e:	e7ca      	b.n	800eac6 <_free_r+0x22>
 800eb30:	bd38      	pop	{r3, r4, r5, pc}
 800eb32:	bf00      	nop
 800eb34:	20070468 	.word	0x20070468

0800eb38 <sinf_poly>:
 800eb38:	07cb      	lsls	r3, r1, #31
 800eb3a:	d412      	bmi.n	800eb62 <sinf_poly+0x2a>
 800eb3c:	ee21 5b00 	vmul.f64	d5, d1, d0
 800eb40:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800eb44:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800eb48:	eea6 7b01 	vfma.f64	d7, d6, d1
 800eb4c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800eb50:	ee21 1b05 	vmul.f64	d1, d1, d5
 800eb54:	eea6 0b05 	vfma.f64	d0, d6, d5
 800eb58:	eea7 0b01 	vfma.f64	d0, d7, d1
 800eb5c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800eb60:	4770      	bx	lr
 800eb62:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800eb66:	ee21 5b01 	vmul.f64	d5, d1, d1
 800eb6a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800eb6e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800eb72:	eea1 7b06 	vfma.f64	d7, d1, d6
 800eb76:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800eb7a:	eea1 0b06 	vfma.f64	d0, d1, d6
 800eb7e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800eb82:	ee21 1b05 	vmul.f64	d1, d1, d5
 800eb86:	eea5 0b06 	vfma.f64	d0, d5, d6
 800eb8a:	e7e5      	b.n	800eb58 <sinf_poly+0x20>
 800eb8c:	0000      	movs	r0, r0
	...

0800eb90 <sinf>:
 800eb90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb92:	ee10 4a10 	vmov	r4, s0
 800eb96:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800eb9a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800eb9e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800eba2:	eef0 7a40 	vmov.f32	s15, s0
 800eba6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800ebaa:	d218      	bcs.n	800ebde <sinf+0x4e>
 800ebac:	ee26 1b06 	vmul.f64	d1, d6, d6
 800ebb0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800ebb4:	d20a      	bcs.n	800ebcc <sinf+0x3c>
 800ebb6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 800ebba:	d103      	bne.n	800ebc4 <sinf+0x34>
 800ebbc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800ebc0:	ed8d 1a01 	vstr	s2, [sp, #4]
 800ebc4:	eeb0 0a67 	vmov.f32	s0, s15
 800ebc8:	b003      	add	sp, #12
 800ebca:	bd30      	pop	{r4, r5, pc}
 800ebcc:	483a      	ldr	r0, [pc, #232]	@ (800ecb8 <sinf+0x128>)
 800ebce:	eeb0 0b46 	vmov.f64	d0, d6
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	b003      	add	sp, #12
 800ebd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebda:	f7ff bfad 	b.w	800eb38 <sinf_poly>
 800ebde:	f240 422e 	movw	r2, #1070	@ 0x42e
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d824      	bhi.n	800ec30 <sinf+0xa0>
 800ebe6:	4b34      	ldr	r3, [pc, #208]	@ (800ecb8 <sinf+0x128>)
 800ebe8:	ed93 7b08 	vldr	d7, [r3, #32]
 800ebec:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ebf0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ebf4:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800ebf8:	ee17 1a90 	vmov	r1, s15
 800ebfc:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800ec00:	1609      	asrs	r1, r1, #24
 800ec02:	ee07 1a90 	vmov	s15, r1
 800ec06:	f001 0203 	and.w	r2, r1, #3
 800ec0a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ec0e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ec12:	ed92 0b00 	vldr	d0, [r2]
 800ec16:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800ec1a:	f011 0f02 	tst.w	r1, #2
 800ec1e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800ec22:	bf08      	it	eq
 800ec24:	4618      	moveq	r0, r3
 800ec26:	ee26 1b06 	vmul.f64	d1, d6, d6
 800ec2a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ec2e:	e7d1      	b.n	800ebd4 <sinf+0x44>
 800ec30:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800ec34:	d237      	bcs.n	800eca6 <sinf+0x116>
 800ec36:	4921      	ldr	r1, [pc, #132]	@ (800ecbc <sinf+0x12c>)
 800ec38:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800ec3c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800ec40:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800ec44:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800ec48:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ec4c:	6a10      	ldr	r0, [r2, #32]
 800ec4e:	6912      	ldr	r2, [r2, #16]
 800ec50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ec54:	40ab      	lsls	r3, r5
 800ec56:	fba0 5003 	umull	r5, r0, r0, r3
 800ec5a:	4359      	muls	r1, r3
 800ec5c:	fbe3 0102 	umlal	r0, r1, r3, r2
 800ec60:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800ec64:	0f9d      	lsrs	r5, r3, #30
 800ec66:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ec6a:	1ac9      	subs	r1, r1, r3
 800ec6c:	f7f1 fc72 	bl	8000554 <__aeabi_l2d>
 800ec70:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800ec74:	4b10      	ldr	r3, [pc, #64]	@ (800ecb8 <sinf+0x128>)
 800ec76:	f004 0203 	and.w	r2, r4, #3
 800ec7a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ec7e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 800ecb0 <sinf+0x120>
 800ec82:	ed92 0b00 	vldr	d0, [r2]
 800ec86:	ec41 0b17 	vmov	d7, r0, r1
 800ec8a:	f014 0f02 	tst.w	r4, #2
 800ec8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ec92:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800ec96:	4629      	mov	r1, r5
 800ec98:	bf08      	it	eq
 800ec9a:	4618      	moveq	r0, r3
 800ec9c:	ee27 1b07 	vmul.f64	d1, d7, d7
 800eca0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eca4:	e796      	b.n	800ebd4 <sinf+0x44>
 800eca6:	b003      	add	sp, #12
 800eca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecac:	f000 b816 	b.w	800ecdc <__math_invalidf>
 800ecb0:	54442d18 	.word	0x54442d18
 800ecb4:	3c1921fb 	.word	0x3c1921fb
 800ecb8:	0800efe0 	.word	0x0800efe0
 800ecbc:	0800ef80 	.word	0x0800ef80

0800ecc0 <with_errnof>:
 800ecc0:	b510      	push	{r4, lr}
 800ecc2:	ed2d 8b02 	vpush	{d8}
 800ecc6:	eeb0 8a40 	vmov.f32	s16, s0
 800ecca:	4604      	mov	r4, r0
 800eccc:	f7ff fe1c 	bl	800e908 <__errno>
 800ecd0:	eeb0 0a48 	vmov.f32	s0, s16
 800ecd4:	ecbd 8b02 	vpop	{d8}
 800ecd8:	6004      	str	r4, [r0, #0]
 800ecda:	bd10      	pop	{r4, pc}

0800ecdc <__math_invalidf>:
 800ecdc:	eef0 7a40 	vmov.f32	s15, s0
 800ece0:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ece4:	eef4 7a67 	vcmp.f32	s15, s15
 800ece8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecec:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ecf0:	d602      	bvs.n	800ecf8 <__math_invalidf+0x1c>
 800ecf2:	2021      	movs	r0, #33	@ 0x21
 800ecf4:	f7ff bfe4 	b.w	800ecc0 <with_errnof>
 800ecf8:	4770      	bx	lr
	...

0800ecfc <_init>:
 800ecfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecfe:	bf00      	nop
 800ed00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed02:	bc08      	pop	{r3}
 800ed04:	469e      	mov	lr, r3
 800ed06:	4770      	bx	lr

0800ed08 <_fini>:
 800ed08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed0a:	bf00      	nop
 800ed0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed0e:	bc08      	pop	{r3}
 800ed10:	469e      	mov	lr, r3
 800ed12:	4770      	bx	lr
