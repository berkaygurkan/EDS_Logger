
EDS_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aacc  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800acc4  0800acc4  0000bcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad2c  0800ad2c  0000c2a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad2c  0800ad2c  0000bd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad34  0800ad34  0000c2a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad34  0800ad34  0000bd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad38  0800ad38  0000bd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800ad3c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000160  0800ae9c  0000c160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000200  0800af3c  0000c200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0006f41c  200002a0  0800afdc  0000c2a0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2006f6bc  0800afdc  0000c6bc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000c2a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fc7a  00000000  00000000  0000c2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000439e  00000000  00000000  0002bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018a0  00000000  00000000  000302e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001307  00000000  00000000  00031b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cf39  00000000  00000000  00032e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000207a0  00000000  00000000  0005fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010b4d9  00000000  00000000  00080568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0018ba41  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006b00  00000000  00000000  0018ba84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004b  00000000  00000000  00192584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200002a0 	.word	0x200002a0
 8000214:	00000000 	.word	0x00000000
 8000218:	0800acac 	.word	0x0800acac

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200002a4 	.word	0x200002a4
 8000234:	0800acac 	.word	0x0800acac

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <CDC_Receive_FS_App>:
	CDC_Transmit_FS((uint8_t*)data, len);
}

// CDC Receive Callback function (must match declaration in usbd_cdc_if.c)
uint8_t CDC_Receive_FS_App(uint8_t *Buf, uint32_t *Len)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]

  HAL_GPIO_TogglePin(GPIOB, LD2_Pin); // Example: Toggle an LED
 8000532:	2180      	movs	r1, #128	@ 0x80
 8000534:	4822      	ldr	r0, [pc, #136]	@ (80005c0 <CDC_Receive_FS_App+0x98>)
 8000536:	f002 fbe4 	bl	8002d02 <HAL_GPIO_TogglePin>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf); // Re-arm the receive buffer
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	4821      	ldr	r0, [pc, #132]	@ (80005c4 <CDC_Receive_FS_App+0x9c>)
 800053e:	f008 f90f 	bl	8008760 <USBD_CDC_SetRxBuffer>
  // Process received command
  if (*Len > 0) {
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d034      	beq.n	80005b4 <CDC_Receive_FS_App+0x8c>
    if (Buf[0] == 'S') { // Start command
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b53      	cmp	r3, #83	@ 0x53
 8000550:	d11c      	bne.n	800058c <CDC_Receive_FS_App+0x64>
      if (!data_acquisition_running) {
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <CDC_Receive_FS_App+0xa0>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d12c      	bne.n	80005b4 <CDC_Receive_FS_App+0x8c>
        HAL_TIM_Base_Start_IT(&htim3); // Start TIM3 and interrupts
 800055a:	481c      	ldr	r0, [pc, #112]	@ (80005cc <CDC_Receive_FS_App+0xa4>)
 800055c:	f005 f828 	bl	80055b0 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim2); // Start TIM2 and interrupts (if needed for toggling)
 8000560:	481b      	ldr	r0, [pc, #108]	@ (80005d0 <CDC_Receive_FS_App+0xa8>)
 8000562:	f005 f825 	bl	80055b0 <HAL_TIM_Base_Start_IT>
        data_acquisition_running = 1;
 8000566:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <CDC_Receive_FS_App+0xa0>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
        buffer_ready_flag = 3; // Set to initial not ready value.
 800056c:	4b19      	ldr	r3, [pc, #100]	@ (80005d4 <CDC_Receive_FS_App+0xac>)
 800056e:	2203      	movs	r2, #3
 8000570:	701a      	strb	r2, [r3, #0]
        packet_counter = 0; // Reset packet counter
 8000572:	4b19      	ldr	r3, [pc, #100]	@ (80005d8 <CDC_Receive_FS_App+0xb0>)
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
        time_ms = 0;      // Reset time counter
 8000578:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <CDC_Receive_FS_App+0xb4>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
        usb_buffer_cnt = 0;
 800057e:	4b18      	ldr	r3, [pc, #96]	@ (80005e0 <CDC_Receive_FS_App+0xb8>)
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
        active_buffer = 0;
 8000584:	4b17      	ldr	r3, [pc, #92]	@ (80005e4 <CDC_Receive_FS_App+0xbc>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	e013      	b.n	80005b4 <CDC_Receive_FS_App+0x8c>
      } else {
      }
    } else if (Buf[0] == 'T') { // Stop command
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b54      	cmp	r3, #84	@ 0x54
 8000592:	d10f      	bne.n	80005b4 <CDC_Receive_FS_App+0x8c>
      if (data_acquisition_running) {
 8000594:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <CDC_Receive_FS_App+0xa0>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <CDC_Receive_FS_App+0x8c>
        HAL_TIM_Base_Stop_IT(&htim3); // Stop TIM3 and interrupts
 800059c:	480b      	ldr	r0, [pc, #44]	@ (80005cc <CDC_Receive_FS_App+0xa4>)
 800059e:	f005 f87f 	bl	80056a0 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Stop_IT(&htim2); // Stop TIM2 and interrupts
 80005a2:	480b      	ldr	r0, [pc, #44]	@ (80005d0 <CDC_Receive_FS_App+0xa8>)
 80005a4:	f005 f87c 	bl	80056a0 <HAL_TIM_Base_Stop_IT>
        data_acquisition_running = 0;
 80005a8:	4b07      	ldr	r3, [pc, #28]	@ (80005c8 <CDC_Receive_FS_App+0xa0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
        buffer_ready_flag = 3; // Ensure sending loop stops gracefully
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <CDC_Receive_FS_App+0xac>)
 80005b0:	2203      	movs	r2, #3
 80005b2:	701a      	strb	r2, [r3, #0]
      } else {
      }
    } else {
    }
  }
  return USBD_OK;
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020400 	.word	0x40020400
 80005c4:	2006dbb8 	.word	0x2006dbb8
 80005c8:	2006db98 	.word	0x2006db98
 80005cc:	20000498 	.word	0x20000498
 80005d0:	2000044c 	.word	0x2000044c
 80005d4:	20000000 	.word	0x20000000
 80005d8:	2006db94 	.word	0x2006db94
 80005dc:	2006dba4 	.word	0x2006dba4
 80005e0:	2006dba8 	.word	0x2006dba8
 80005e4:	20000590 	.word	0x20000590

080005e8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b098      	sub	sp, #96	@ 0x60
 80005ec:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ee:	f000 ff64 	bl	80014ba <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005f2:	f000 f8fb 	bl	80007ec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005f6:	f000 fb2b 	bl	8000c50 <MX_GPIO_Init>
	MX_DMA_Init();
 80005fa:	f000 fb0b 	bl	8000c14 <MX_DMA_Init>
	MX_ETH_Init();
 80005fe:	f000 f9ef 	bl	80009e0 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000602:	f000 fad7 	bl	8000bb4 <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8000606:	f000 f961 	bl	80008cc <MX_ADC1_Init>
	MX_TIM2_Init();
 800060a:	f000 fa37 	bl	8000a7c <MX_TIM2_Init>
	MX_TIM3_Init();
 800060e:	f000 fa83 	bl	8000b18 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 8000612:	f009 fc65 	bl	8009ee0 <MX_USB_DEVICE_Init>
	//HAL_TIM_Base_Start_IT(&htim3);
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
	//HAL_TIM_Base_Start_IT(&htim2);
	//Test Purposes Only

	time_start_ms = time_ms;
 8000616:	4b69      	ldr	r3, [pc, #420]	@ (80007bc <main+0x1d4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a69      	ldr	r2, [pc, #420]	@ (80007c0 <main+0x1d8>)
 800061c:	6013      	str	r3, [r2, #0]
	HAL_Delay(1000);
 800061e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000622:	f000 ffa7 	bl	8001574 <HAL_Delay>
	time_end_ms = time_ms;
 8000626:	4b65      	ldr	r3, [pc, #404]	@ (80007bc <main+0x1d4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a66      	ldr	r2, [pc, #408]	@ (80007c4 <main+0x1dc>)
 800062c:	6013      	str	r3, [r2, #0]
	time_elapsed_ms = time_end_ms-time_start_ms;
 800062e:	4b65      	ldr	r3, [pc, #404]	@ (80007c4 <main+0x1dc>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b63      	ldr	r3, [pc, #396]	@ (80007c0 <main+0x1d8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	1ad3      	subs	r3, r2, r3
 8000638:	4a63      	ldr	r2, [pc, #396]	@ (80007c8 <main+0x1e0>)
 800063a:	6013      	str	r3, [r2, #0]
	motor_pulse = 1000;
 800063c:	4b63      	ldr	r3, [pc, #396]	@ (80007cc <main+0x1e4>)
 800063e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000642:	601a      	str	r2, [r3, #0]
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */



		    if (buffer_ready_flag == 0)
 8000644:	4b62      	ldr	r3, [pc, #392]	@ (80007d0 <main+0x1e8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d158      	bne.n	80006fe <main+0x116>
		    {
		        for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++)
 800064c:	2300      	movs	r3, #0
 800064e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8000652:	e04b      	b.n	80006ec <main+0x104>
		        {
		            uint32_t header = 0xddccbbaa;
 8000654:	4b5f      	ldr	r3, [pc, #380]	@ (80007d4 <main+0x1ec>)
 8000656:	64bb      	str	r3, [r7, #72]	@ 0x48
		            uint32_t values[7] = {header, packet_counter++, usb_buffer[0][0][i], usb_buffer[0][1][i], usb_buffer[0][2][i], usb_buffer[0][3][i], usb_buffer[0][4][i]}; // Include packet counter
 8000658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800065a:	623b      	str	r3, [r7, #32]
 800065c:	4b5e      	ldr	r3, [pc, #376]	@ (80007d8 <main+0x1f0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1c5a      	adds	r2, r3, #1
 8000662:	495d      	ldr	r1, [pc, #372]	@ (80007d8 <main+0x1f0>)
 8000664:	600a      	str	r2, [r1, #0]
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24
 8000668:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800066c:	4a5b      	ldr	r2, [pc, #364]	@ (80007dc <main+0x1f4>)
 800066e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000674:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8000678:	4a58      	ldr	r2, [pc, #352]	@ (80007dc <main+0x1f4>)
 800067a:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 800067e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000684:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8000688:	4a54      	ldr	r2, [pc, #336]	@ (80007dc <main+0x1f4>)
 800068a:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 800068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000692:	633b      	str	r3, [r7, #48]	@ 0x30
 8000694:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8000698:	4950      	ldr	r1, [pc, #320]	@ (80007dc <main+0x1f4>)
 800069a:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 800069e:	4413      	add	r3, r2
 80006a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80006a6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80006aa:	4a4c      	ldr	r2, [pc, #304]	@ (80007dc <main+0x1f4>)
 80006ac:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 80006b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b4:	63bb      	str	r3, [r7, #56]	@ 0x38

		            uint8_t status;
		            uint32_t start_time = HAL_GetTick(); // Start time measurement
 80006b6:	f000 ff51 	bl	800155c <HAL_GetTick>
 80006ba:	6478      	str	r0, [r7, #68]	@ 0x44
		            do {
		                status = CDC_Transmit_FS((uint8_t*)values, sizeof(values));
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	211c      	movs	r1, #28
 80006c2:	4618      	mov	r0, r3
 80006c4:	f009 fcce 	bl	800a064 <CDC_Transmit_FS>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		            } while (status != USBD_OK);
 80006ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1f2      	bne.n	80006bc <main+0xd4>
		            uint32_t transmit_time = HAL_GetTick() - start_time; // End time measurement
 80006d6:	f000 ff41 	bl	800155c <HAL_GetTick>
 80006da:	4602      	mov	r2, r0
 80006dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		        for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++)
 80006e2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80006e6:	3301      	adds	r3, #1
 80006e8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80006ec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80006f0:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80006f4:	d3ae      	bcc.n	8000654 <main+0x6c>
		                // If transmit time is unexpectedly long, you might want to log/debug
		                // For now, let's just monitor in debugger if needed.
		                // printf("Transmit time exceeded threshold: %lu ms\r\n", transmit_time); // If you have UART debug
		            }
		        }
		        buffer_ready_flag = 3;
 80006f6:	4b36      	ldr	r3, [pc, #216]	@ (80007d0 <main+0x1e8>)
 80006f8:	2203      	movs	r2, #3
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	e7a2      	b.n	8000644 <main+0x5c>
		    }
		    else if (buffer_ready_flag == 1)
 80006fe:	4b34      	ldr	r3, [pc, #208]	@ (80007d0 <main+0x1e8>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d19e      	bne.n	8000644 <main+0x5c>
		    {
		        for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++)
 8000706:	2300      	movs	r3, #0
 8000708:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800070c:	e04c      	b.n	80007a8 <main+0x1c0>
		        {
		            uint32_t header = 0xddccbbaa;
 800070e:	4b31      	ldr	r3, [pc, #196]	@ (80007d4 <main+0x1ec>)
 8000710:	65bb      	str	r3, [r7, #88]	@ 0x58
		            uint32_t values[7] = {header, packet_counter++, usb_buffer[1][0][i], usb_buffer[1][1][i], usb_buffer[1][2][i], usb_buffer[1][3][i], usb_buffer[1][4][i]}; // Include packet counter
 8000712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b30      	ldr	r3, [pc, #192]	@ (80007d8 <main+0x1f0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	1c5a      	adds	r2, r3, #1
 800071c:	492e      	ldr	r1, [pc, #184]	@ (80007d8 <main+0x1f0>)
 800071e:	600a      	str	r2, [r1, #0]
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8000726:	492d      	ldr	r1, [pc, #180]	@ (80007dc <main+0x1f4>)
 8000728:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 800072c:	4413      	add	r3, r2
 800072e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8000738:	4a28      	ldr	r2, [pc, #160]	@ (80007dc <main+0x1f4>)
 800073a:	f503 437a 	add.w	r3, r3, #64000	@ 0xfa00
 800073e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8000748:	4924      	ldr	r1, [pc, #144]	@ (80007dc <main+0x1f4>)
 800074a:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <main+0x1f8>)
 800074c:	4413      	add	r3, r2
 800074e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8000758:	4920      	ldr	r1, [pc, #128]	@ (80007dc <main+0x1f4>)
 800075a:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <main+0x1fc>)
 800075c:	4413      	add	r3, r2
 800075e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8000768:	491c      	ldr	r1, [pc, #112]	@ (80007dc <main+0x1f4>)
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <main+0x200>)
 800076c:	4413      	add	r3, r2
 800076e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000772:	61fb      	str	r3, [r7, #28]

		            uint8_t status;
		            uint32_t start_time = HAL_GetTick(); // Start time measurement
 8000774:	f000 fef2 	bl	800155c <HAL_GetTick>
 8000778:	6578      	str	r0, [r7, #84]	@ 0x54
		            do {
		                status = CDC_Transmit_FS((uint8_t*)values, sizeof(values));
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	211c      	movs	r1, #28
 800077e:	4618      	mov	r0, r3
 8000780:	f009 fc70 	bl	800a064 <CDC_Transmit_FS>
 8000784:	4603      	mov	r3, r0
 8000786:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		            } while (status != USBD_OK);
 800078a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f3      	bne.n	800077a <main+0x192>
		            uint32_t transmit_time = HAL_GetTick() - start_time; // End time measurement
 8000792:	f000 fee3 	bl	800155c <HAL_GetTick>
 8000796:	4602      	mov	r2, r0
 8000798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		        for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++)
 800079e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80007a2:	3301      	adds	r3, #1
 80007a4:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80007a8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80007ac:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80007b0:	d3ad      	bcc.n	800070e <main+0x126>

		            if (transmit_time > 10) { // Example threshold - adjust as needed
		                // printf("Transmit time exceeded threshold: %lu ms\r\n", transmit_time); // If you have UART debug
		            }
		        }
		        buffer_ready_flag = 3;
 80007b2:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <main+0x1e8>)
 80007b4:	2203      	movs	r2, #3
 80007b6:	701a      	strb	r2, [r3, #0]
		    if (buffer_ready_flag == 0)
 80007b8:	e744      	b.n	8000644 <main+0x5c>
 80007ba:	bf00      	nop
 80007bc:	2006dba4 	.word	0x2006dba4
 80007c0:	2000056c 	.word	0x2000056c
 80007c4:	20000570 	.word	0x20000570
 80007c8:	20000574 	.word	0x20000574
 80007cc:	20000578 	.word	0x20000578
 80007d0:	20000000 	.word	0x20000000
 80007d4:	ddccbbaa 	.word	0xddccbbaa
 80007d8:	2006db94 	.word	0x2006db94
 80007dc:	20000594 	.word	0x20000594
 80007e0:	00011940 	.word	0x00011940
 80007e4:	00013880 	.word	0x00013880
 80007e8:	000157c0 	.word	0x000157c0

080007ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	@ 0x50
 80007f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2234      	movs	r2, #52	@ 0x34
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f00a f9c8 	bl	800ab90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000810:	f003 fd1a 	bl	8004248 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000814:	4b2b      	ldr	r3, [pc, #172]	@ (80008c4 <SystemClock_Config+0xd8>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000818:	4a2a      	ldr	r2, [pc, #168]	@ (80008c4 <SystemClock_Config+0xd8>)
 800081a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000820:	4b28      	ldr	r3, [pc, #160]	@ (80008c4 <SystemClock_Config+0xd8>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082c:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <SystemClock_Config+0xdc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a25      	ldr	r2, [pc, #148]	@ (80008c8 <SystemClock_Config+0xdc>)
 8000832:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <SystemClock_Config+0xdc>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000844:	2301      	movs	r3, #1
 8000846:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000848:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800084c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084e:	2302      	movs	r3, #2
 8000850:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000852:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000856:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000858:	2304      	movs	r3, #4
 800085a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 800085c:	23d8      	movs	r3, #216	@ 0xd8
 800085e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000860:	2302      	movs	r3, #2
 8000862:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000864:	2309      	movs	r3, #9
 8000866:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4618      	mov	r0, r3
 8000872:	f003 fd49 	bl	8004308 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800087c:	f000 fa8a 	bl	8000d94 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000880:	f003 fcf2 	bl	8004268 <HAL_PWREx_EnableOverDrive>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xa2>
	{
		Error_Handler();
 800088a:	f000 fa83 	bl	8000d94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088e:	230f      	movs	r3, #15
 8000890:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000892:	2302      	movs	r3, #2
 8000894:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800089e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a4:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	2107      	movs	r1, #7
 80008ac:	4618      	mov	r0, r3
 80008ae:	f003 ffd9 	bl	8004864 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xd0>
	{
		Error_Handler();
 80008b8:	f000 fa6c 	bl	8000d94 <Error_Handler>
	}
}
 80008bc:	bf00      	nop
 80008be:	3750      	adds	r7, #80	@ 0x50
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80008de:	4b3e      	ldr	r3, [pc, #248]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 80008e0:	4a3e      	ldr	r2, [pc, #248]	@ (80009dc <MX_ADC1_Init+0x110>)
 80008e2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80008e4:	4b3c      	ldr	r3, [pc, #240]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 80008e6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008ea:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ec:	4b3a      	ldr	r3, [pc, #232]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008f2:	4b39      	ldr	r3, [pc, #228]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80008f8:	4b37      	ldr	r3, [pc, #220]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008fe:	4b36      	ldr	r3, [pc, #216]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 8000900:	2200      	movs	r2, #0
 8000902:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000906:	4b34      	ldr	r3, [pc, #208]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 8000908:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800090c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800090e:	4b32      	ldr	r3, [pc, #200]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 8000910:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000916:	4b30      	ldr	r3, [pc, #192]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 5;
 800091c:	4b2e      	ldr	r3, [pc, #184]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 800091e:	2205      	movs	r2, #5
 8000920:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000922:	4b2d      	ldr	r3, [pc, #180]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 8000924:	2201      	movs	r2, #1
 8000926:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800092a:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000930:	4829      	ldr	r0, [pc, #164]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 8000932:	f000 fe43 	bl	80015bc <HAL_ADC_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC1_Init+0x74>
	{
		Error_Handler();
 800093c:	f000 fa2a 	bl	8000d94 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000940:	2300      	movs	r3, #0
 8000942:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000944:	2301      	movs	r3, #1
 8000946:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000948:	2304      	movs	r3, #4
 800094a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	4821      	ldr	r0, [pc, #132]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 8000952:	f000 fe77 	bl	8001644 <HAL_ADC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x94>
	{
		Error_Handler();
 800095c:	f000 fa1a 	bl	8000d94 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8000960:	2303      	movs	r3, #3
 8000962:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000964:	2302      	movs	r3, #2
 8000966:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	4619      	mov	r1, r3
 800096c:	481a      	ldr	r0, [pc, #104]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 800096e:	f000 fe69 	bl	8001644 <HAL_ADC_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0xb0>
	{
		Error_Handler();
 8000978:	f000 fa0c 	bl	8000d94 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800097c:	2304      	movs	r3, #4
 800097e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8000980:	2303      	movs	r3, #3
 8000982:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000984:	463b      	mov	r3, r7
 8000986:	4619      	mov	r1, r3
 8000988:	4813      	ldr	r0, [pc, #76]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 800098a:	f000 fe5b 	bl	8001644 <HAL_ADC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC1_Init+0xcc>
	{
		Error_Handler();
 8000994:	f000 f9fe 	bl	8000d94 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000998:	2305      	movs	r3, #5
 800099a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 800099c:	2304      	movs	r3, #4
 800099e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4619      	mov	r1, r3
 80009a4:	480c      	ldr	r0, [pc, #48]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 80009a6:	f000 fe4d 	bl	8001644 <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0xe8>
	{
		Error_Handler();
 80009b0:	f000 f9f0 	bl	8000d94 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 80009b4:	2306      	movs	r3, #6
 80009b6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 80009b8:	2305      	movs	r3, #5
 80009ba:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_ADC1_Init+0x10c>)
 80009c2:	f000 fe3f 	bl	8001644 <HAL_ADC_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0x104>
	{
		Error_Handler();
 80009cc:	f000 f9e2 	bl	8000d94 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200002f4 	.word	0x200002f4
 80009dc:	40012000 	.word	0x40012000

080009e0 <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a64 <MX_ETH_Init+0x84>)
 80009e6:	4a20      	ldr	r2, [pc, #128]	@ (8000a68 <MX_ETH_Init+0x88>)
 80009e8:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 80009ea:	4b20      	ldr	r3, [pc, #128]	@ (8000a6c <MX_ETH_Init+0x8c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <MX_ETH_Init+0x8c>)
 80009f2:	2280      	movs	r2, #128	@ 0x80
 80009f4:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_ETH_Init+0x8c>)
 80009f8:	22e1      	movs	r2, #225	@ 0xe1
 80009fa:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <MX_ETH_Init+0x8c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_ETH_Init+0x8c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000a08:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <MX_ETH_Init+0x8c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <MX_ETH_Init+0x84>)
 8000a10:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <MX_ETH_Init+0x8c>)
 8000a12:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_ETH_Init+0x84>)
 8000a16:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a1a:	609a      	str	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_ETH_Init+0x84>)
 8000a1e:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <MX_ETH_Init+0x90>)
 8000a20:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <MX_ETH_Init+0x84>)
 8000a24:	4a13      	ldr	r2, [pc, #76]	@ (8000a74 <MX_ETH_Init+0x94>)
 8000a26:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_ETH_Init+0x84>)
 8000a2a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a2e:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a30:	480c      	ldr	r0, [pc, #48]	@ (8000a64 <MX_ETH_Init+0x84>)
 8000a32:	f001 fc53 	bl	80022dc <HAL_ETH_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ETH_Init+0x60>
	{
		Error_Handler();
 8000a3c:	f000 f9aa 	bl	8000d94 <Error_Handler>
	}

	memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a40:	2238      	movs	r2, #56	@ 0x38
 8000a42:	2100      	movs	r1, #0
 8000a44:	480c      	ldr	r0, [pc, #48]	@ (8000a78 <MX_ETH_Init+0x98>)
 8000a46:	f00a f8a3 	bl	800ab90 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_ETH_Init+0x98>)
 8000a4c:	2221      	movs	r2, #33	@ 0x21
 8000a4e:	601a      	str	r2, [r3, #0]
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_ETH_Init+0x98>)
 8000a52:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000a56:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <MX_ETH_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000039c 	.word	0x2000039c
 8000a68:	40028000 	.word	0x40028000
 8000a6c:	2006db9c 	.word	0x2006db9c
 8000a70:	20000200 	.word	0x20000200
 8000a74:	20000160 	.word	0x20000160
 8000a78:	200002bc 	.word	0x200002bc

08000a7c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <MX_TIM2_Init+0x98>)
 8000a9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aa0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 71;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <MX_TIM2_Init+0x98>)
 8000aa4:	2247      	movs	r2, #71	@ 0x47
 8000aa6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <MX_TIM2_Init+0x98>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1499;
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <MX_TIM2_Init+0x98>)
 8000ab0:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000ab4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <MX_TIM2_Init+0x98>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <MX_TIM2_Init+0x98>)
 8000abe:	2280      	movs	r2, #128	@ 0x80
 8000ac0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ac2:	4814      	ldr	r0, [pc, #80]	@ (8000b14 <MX_TIM2_Init+0x98>)
 8000ac4:	f004 fd1c 	bl	8005500 <HAL_TIM_Base_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8000ace:	f000 f961 	bl	8000d94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4619      	mov	r1, r3
 8000ade:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <MX_TIM2_Init+0x98>)
 8000ae0:	f004 ff14 	bl	800590c <HAL_TIM_ConfigClockSource>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8000aea:	f000 f953 	bl	8000d94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000aee:	2320      	movs	r3, #32
 8000af0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	@ (8000b14 <MX_TIM2_Init+0x98>)
 8000afc:	f005 f93e 	bl	8005d7c <HAL_TIMEx_MasterConfigSynchronization>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8000b06:	f000 f945 	bl	8000d94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000044c 	.word	0x2000044c

08000b18 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <MX_TIM3_Init+0x94>)
 8000b38:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb0 <MX_TIM3_Init+0x98>)
 8000b3a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 10799;
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <MX_TIM3_Init+0x94>)
 8000b3e:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8000b42:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <MX_TIM3_Init+0x94>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 9;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <MX_TIM3_Init+0x94>)
 8000b4c:	2209      	movs	r2, #9
 8000b4e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_TIM3_Init+0x94>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_TIM3_Init+0x94>)
 8000b58:	2280      	movs	r2, #128	@ 0x80
 8000b5a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b5c:	4813      	ldr	r0, [pc, #76]	@ (8000bac <MX_TIM3_Init+0x94>)
 8000b5e:	f004 fccf 	bl	8005500 <HAL_TIM_Base_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8000b68:	f000 f914 	bl	8000d94 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b70:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4619      	mov	r1, r3
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <MX_TIM3_Init+0x94>)
 8000b7a:	f004 fec7 	bl	800590c <HAL_TIM_ConfigClockSource>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8000b84:	f000 f906 	bl	8000d94 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_TIM3_Init+0x94>)
 8000b96:	f005 f8f1 	bl	8005d7c <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8000ba0:	f000 f8f8 	bl	8000d94 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3720      	adds	r7, #32
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000498 	.word	0x20000498
 8000bb0:	40000400 	.word	0x40000400

08000bb4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bba:	4a15      	ldr	r2, [pc, #84]	@ (8000c10 <MX_USART3_UART_Init+0x5c>)
 8000bbc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <MX_USART3_UART_Init+0x58>)
 8000bf8:	f005 f96c 	bl	8005ed4 <HAL_UART_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8000c02:	f000 f8c7 	bl	8000d94 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200004e4 	.word	0x200004e4
 8000c10:	40004800 	.word	0x40004800

08000c14 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_DMA_Init+0x38>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <MX_DMA_Init+0x38>)
 8000c20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_DMA_Init+0x38>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2038      	movs	r0, #56	@ 0x38
 8000c38:	f001 f82f 	bl	8001c9a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c3c:	2038      	movs	r0, #56	@ 0x38
 8000c3e:	f001 f848 	bl	8001cd2 <HAL_NVIC_EnableIRQ>

}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	@ 0x30
 8000c54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	4b47      	ldr	r3, [pc, #284]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a46      	ldr	r2, [pc, #280]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b44      	ldr	r3, [pc, #272]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7e:	4b41      	ldr	r3, [pc, #260]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a40      	ldr	r2, [pc, #256]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b3b      	ldr	r3, [pc, #236]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a3a      	ldr	r2, [pc, #232]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b38      	ldr	r3, [pc, #224]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b35      	ldr	r3, [pc, #212]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a34      	ldr	r2, [pc, #208]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b32      	ldr	r3, [pc, #200]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a2e      	ldr	r2, [pc, #184]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000cde:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a28      	ldr	r2, [pc, #160]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <MX_GPIO_Init+0x134>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000cfc:	4822      	ldr	r0, [pc, #136]	@ (8000d88 <MX_GPIO_Init+0x138>)
 8000cfe:	f001 ffe7 	bl	8002cd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	@ 0x40
 8000d06:	4821      	ldr	r0, [pc, #132]	@ (8000d8c <MX_GPIO_Init+0x13c>)
 8000d08:	f001 ffe2 	bl	8002cd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d16:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	4619      	mov	r1, r3
 8000d22:	481b      	ldr	r0, [pc, #108]	@ (8000d90 <MX_GPIO_Init+0x140>)
 8000d24:	f001 fe28 	bl	8002978 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000d28:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000d2c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4811      	ldr	r0, [pc, #68]	@ (8000d88 <MX_GPIO_Init+0x138>)
 8000d42:	f001 fe19 	bl	8002978 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d46:	2340      	movs	r3, #64	@ 0x40
 8000d48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480b      	ldr	r0, [pc, #44]	@ (8000d8c <MX_GPIO_Init+0x13c>)
 8000d5e:	f001 fe0b 	bl	8002978 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d62:	2380      	movs	r3, #128	@ 0x80
 8000d64:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	@ (8000d8c <MX_GPIO_Init+0x13c>)
 8000d76:	f001 fdff 	bl	8002978 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3730      	adds	r7, #48	@ 0x30
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40021800 	.word	0x40021800
 8000d90:	40020800 	.word	0x40020800

08000d94 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <Error_Handler+0x8>

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <HAL_MspInit+0x44>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_MspInit+0x44>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	@ 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a2d      	ldr	r2, [pc, #180]	@ (8000ebc <HAL_ADC_MspInit+0xd4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d154      	bne.n	8000eb4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <HAL_ADC_MspInit+0xd8>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8000ec0 <HAL_ADC_MspInit+0xd8>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e16:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec0 <HAL_ADC_MspInit+0xd8>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b27      	ldr	r3, [pc, #156]	@ (8000ec0 <HAL_ADC_MspInit+0xd8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a26      	ldr	r2, [pc, #152]	@ (8000ec0 <HAL_ADC_MspInit+0xd8>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b24      	ldr	r3, [pc, #144]	@ (8000ec0 <HAL_ADC_MspInit+0xd8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000e3a:	2379      	movs	r3, #121	@ 0x79
 8000e3c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481d      	ldr	r0, [pc, #116]	@ (8000ec4 <HAL_ADC_MspInit+0xdc>)
 8000e4e:	f001 fd93 	bl	8002978 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000e54:	4a1d      	ldr	r2, [pc, #116]	@ (8000ecc <HAL_ADC_MspInit+0xe4>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000e6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e72:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000e74:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000e7c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e88:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000e8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e90:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e98:	480b      	ldr	r0, [pc, #44]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000e9a:	f000 ff35 	bl	8001d08 <HAL_DMA_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000ea4:	f7ff ff76 	bl	8000d94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000eac:	639a      	str	r2, [r3, #56]	@ 0x38
 8000eae:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <HAL_ADC_MspInit+0xe0>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	@ 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40012000 	.word	0x40012000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	2000033c 	.word	0x2000033c
 8000ecc:	40026410 	.word	0x40026410

08000ed0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08e      	sub	sp, #56	@ 0x38
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a4e      	ldr	r2, [pc, #312]	@ (8001028 <HAL_ETH_MspInit+0x158>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	f040 8096 	bne.w	8001020 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000efa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000efe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f00:	4b4a      	ldr	r3, [pc, #296]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f08:	623b      	str	r3, [r7, #32]
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	4b47      	ldr	r3, [pc, #284]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f10:	4a46      	ldr	r2, [pc, #280]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f18:	4b44      	ldr	r3, [pc, #272]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	4b41      	ldr	r3, [pc, #260]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f28:	4a40      	ldr	r2, [pc, #256]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f2a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f30:	4b3e      	ldr	r3, [pc, #248]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f40:	4a3a      	ldr	r2, [pc, #232]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f48:	4b38      	ldr	r3, [pc, #224]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b35      	ldr	r3, [pc, #212]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f58:	4a34      	ldr	r2, [pc, #208]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f60:	4b32      	ldr	r3, [pc, #200]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f70:	4a2e      	ldr	r2, [pc, #184]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f78:	4b2c      	ldr	r3, [pc, #176]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f84:	4b29      	ldr	r3, [pc, #164]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f88:	4a28      	ldr	r2, [pc, #160]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f90:	4b26      	ldr	r3, [pc, #152]	@ (800102c <HAL_ETH_MspInit+0x15c>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f9c:	2332      	movs	r3, #50	@ 0x32
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fac:	230b      	movs	r3, #11
 8000fae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481e      	ldr	r0, [pc, #120]	@ (8001030 <HAL_ETH_MspInit+0x160>)
 8000fb8:	f001 fcde 	bl	8002978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fbc:	2386      	movs	r3, #134	@ 0x86
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fcc:	230b      	movs	r3, #11
 8000fce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4817      	ldr	r0, [pc, #92]	@ (8001034 <HAL_ETH_MspInit+0x164>)
 8000fd8:	f001 fcce 	bl	8002978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fee:	230b      	movs	r3, #11
 8000ff0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480f      	ldr	r0, [pc, #60]	@ (8001038 <HAL_ETH_MspInit+0x168>)
 8000ffa:	f001 fcbd 	bl	8002978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ffe:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001010:	230b      	movs	r3, #11
 8001012:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4808      	ldr	r0, [pc, #32]	@ (800103c <HAL_ETH_MspInit+0x16c>)
 800101c:	f001 fcac 	bl	8002978 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001020:	bf00      	nop
 8001022:	3738      	adds	r7, #56	@ 0x38
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40028000 	.word	0x40028000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020800 	.word	0x40020800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40021800 	.word	0x40021800

08001040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001050:	d114      	bne.n	800107c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001052:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_TIM_Base_MspInit+0x78>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	4a18      	ldr	r2, [pc, #96]	@ (80010b8 <HAL_TIM_Base_MspInit+0x78>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6413      	str	r3, [r2, #64]	@ 0x40
 800105e:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <HAL_TIM_Base_MspInit+0x78>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	201c      	movs	r0, #28
 8001070:	f000 fe13 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001074:	201c      	movs	r0, #28
 8001076:	f000 fe2c 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800107a:	e018      	b.n	80010ae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <HAL_TIM_Base_MspInit+0x7c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d113      	bne.n	80010ae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_TIM_Base_MspInit+0x78>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	4a0b      	ldr	r2, [pc, #44]	@ (80010b8 <HAL_TIM_Base_MspInit+0x78>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6413      	str	r3, [r2, #64]	@ 0x40
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_TIM_Base_MspInit+0x78>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	201d      	movs	r0, #29
 80010a4:	f000 fdf9 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010a8:	201d      	movs	r0, #29
 80010aa:	f000 fe12 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40000400 	.word	0x40000400

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b0ae      	sub	sp, #184	@ 0xb8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2290      	movs	r2, #144	@ 0x90
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f009 fd55 	bl	800ab90 <memset>
  if(huart->Instance==USART3)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a22      	ldr	r2, [pc, #136]	@ (8001174 <HAL_UART_MspInit+0xb4>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d13c      	bne.n	800116a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fdd6 	bl	8004cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800110a:	f7ff fe43 	bl	8000d94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800110e:	4b1a      	ldr	r3, [pc, #104]	@ (8001178 <HAL_UART_MspInit+0xb8>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	4a19      	ldr	r2, [pc, #100]	@ (8001178 <HAL_UART_MspInit+0xb8>)
 8001114:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001118:	6413      	str	r3, [r2, #64]	@ 0x40
 800111a:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <HAL_UART_MspInit+0xb8>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <HAL_UART_MspInit+0xb8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a13      	ldr	r2, [pc, #76]	@ (8001178 <HAL_UART_MspInit+0xb8>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <HAL_UART_MspInit+0xb8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800113e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001142:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001158:	2307      	movs	r3, #7
 800115a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001162:	4619      	mov	r1, r3
 8001164:	4805      	ldr	r0, [pc, #20]	@ (800117c <HAL_UART_MspInit+0xbc>)
 8001166:	f001 fc07 	bl	8002978 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800116a:	bf00      	nop
 800116c:	37b8      	adds	r7, #184	@ 0xb8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40004800 	.word	0x40004800
 8001178:	40023800 	.word	0x40023800
 800117c:	40020c00 	.word	0x40020c00

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <NMI_Handler+0x4>

08001188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <MemManage_Handler+0x4>

08001198 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d6:	f000 f9ad 	bl	8001534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011e4:	4802      	ldr	r0, [pc, #8]	@ (80011f0 <TIM2_IRQHandler+0x10>)
 80011e6:	f004 fa8a 	bl	80056fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000044c 	.word	0x2000044c

080011f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <TIM3_IRQHandler+0x10>)
 80011fa:	f004 fa80 	bl	80056fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000498 	.word	0x20000498

08001208 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <DMA2_Stream0_IRQHandler+0x10>)
 800120e:	f000 fe29 	bl	8001e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000033c 	.word	0x2000033c

0800121c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <OTG_FS_IRQHandler+0x10>)
 8001222:	f001 fec0 	bl	8002fa6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2006f094 	.word	0x2006f094

08001230 <HAL_TIM_PeriodElapsedCallback>:
uint16_t usb_buffer_cnt = 0;
extern uint8_t buffer_ready_flag;
extern uint32_t motor_pulse;
uint32_t overflow_count = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a5e      	ldr	r2, [pc, #376]	@ (80013b8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800123e:	4293      	cmp	r3, r2
 8001240:	f040 80b5 	bne.w	80013ae <HAL_TIM_PeriodElapsedCallback+0x17e>
  {

	     time_ms++;
 8001244:	4b5d      	ldr	r3, [pc, #372]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	4a5c      	ldr	r2, [pc, #368]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800124c:	6013      	str	r3, [r2, #0]
	     usb_buffer[active_buffer][0][usb_buffer_cnt] = time_ms;
 800124e:	4b5c      	ldr	r3, [pc, #368]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461c      	mov	r4, r3
 8001256:	4b5b      	ldr	r3, [pc, #364]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	4b57      	ldr	r3, [pc, #348]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4959      	ldr	r1, [pc, #356]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001262:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 8001266:	fb04 f303 	mul.w	r3, r4, r3
 800126a:	4403      	add	r3, r0
 800126c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 	 usb_buffer[active_buffer][1][usb_buffer_cnt] = adc_buffer[0]; // Panasonic
 8001270:	4b53      	ldr	r3, [pc, #332]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	461c      	mov	r4, r3
 8001278:	4b52      	ldr	r3, [pc, #328]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	4b53      	ldr	r3, [pc, #332]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4951      	ldr	r1, [pc, #324]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001284:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 8001288:	fb04 f303 	mul.w	r3, r4, r3
 800128c:	4403      	add	r3, r0
 800128e:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 	 usb_buffer[active_buffer][2][usb_buffer_cnt] = adc_buffer[1]; // Load Cell 1
 8001296:	4b4a      	ldr	r3, [pc, #296]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	461c      	mov	r4, r3
 800129e:	4b49      	ldr	r3, [pc, #292]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	4b49      	ldr	r3, [pc, #292]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4947      	ldr	r1, [pc, #284]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80012aa:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 80012ae:	fb04 f303 	mul.w	r3, r4, r3
 80012b2:	4403      	add	r3, r0
 80012b4:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 80012b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 	 usb_buffer[active_buffer][3][usb_buffer_cnt] = adc_buffer[2]; // Load Cell 2
 80012bc:	4b40      	ldr	r3, [pc, #256]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	461c      	mov	r4, r3
 80012c4:	4b3f      	ldr	r3, [pc, #252]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4b40      	ldr	r3, [pc, #256]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	483e      	ldr	r0, [pc, #248]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80012d0:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 80012d4:	fb04 f303 	mul.w	r3, r4, r3
 80012d8:	4419      	add	r1, r3
 80012da:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 80012de:	440b      	add	r3, r1
 80012e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	 	 usb_buffer[active_buffer][4][usb_buffer_cnt] = adc_buffer[3]; // Load Cell 3
 80012e4:	4b36      	ldr	r3, [pc, #216]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461c      	mov	r4, r3
 80012ec:	4b35      	ldr	r3, [pc, #212]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	4b36      	ldr	r3, [pc, #216]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	4934      	ldr	r1, [pc, #208]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80012f8:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 80012fc:	fb04 f303 	mul.w	r3, r4, r3
 8001300:	4403      	add	r3, r0
 8001302:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 	 usb_buffer[active_buffer][5][usb_buffer_cnt] = adc_buffer[4]; // Load Cell 4
 800130a:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	461c      	mov	r4, r3
 8001312:	4b2c      	ldr	r3, [pc, #176]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	4b2c      	ldr	r3, [pc, #176]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	482a      	ldr	r0, [pc, #168]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800131e:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 8001322:	fb04 f303 	mul.w	r3, r4, r3
 8001326:	4419      	add	r1, r3
 8001328:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800132c:	440b      	add	r3, r1
 800132e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	 	 usb_buffer[active_buffer][6][usb_buffer_cnt] = motor_pulse; // PWM Signal
 8001332:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b2db      	uxtb	r3, r3
 8001338:	461c      	mov	r4, r3
 800133a:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4820      	ldr	r0, [pc, #128]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001346:	f64d 23c0 	movw	r3, #56000	@ 0xdac0
 800134a:	fb04 f303 	mul.w	r3, r4, r3
 800134e:	4419      	add	r1, r3
 8001350:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8001354:	440b      	add	r3, r1
 8001356:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	 	 usb_buffer_cnt++;
 800135a:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001364:	801a      	strh	r2, [r3, #0]

	  if (usb_buffer_cnt>=USB_BUFFER_SIZE)
 8001366:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800136e:	d31e      	bcc.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x17e>
	  {

	 	   active_buffer = 1-active_buffer;
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f1c3 0301 	rsb	r3, r3, #1
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800137e:	701a      	strb	r2, [r3, #0]
	 	   usb_buffer_cnt = 0;
 8001380:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001382:	2200      	movs	r2, #0
 8001384:	801a      	strh	r2, [r3, #0]
	 	   if (active_buffer == 1)
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b01      	cmp	r3, #1
 800138e:	d103      	bne.n	8001398 <HAL_TIM_PeriodElapsedCallback+0x168>
	 		   buffer_ready_flag = 0;
 8001390:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	e00a      	b.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x17e>
	 	   else if (active_buffer == 0)
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d103      	bne.n	80013aa <HAL_TIM_PeriodElapsedCallback+0x17a>
	 		   buffer_ready_flag=1;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	e001      	b.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x17e>
	 	   else
	 		   Error_Handler();
 80013aa:	f7ff fcf3 	bl	8000d94 <Error_Handler>
  }
  if (htim->Instance == TIM2)
  {
	  //HAL_GPIO_TogglePin(GPIOB,LD1_Pin);
  }
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40000400 	.word	0x40000400
 80013bc:	2006dba4 	.word	0x2006dba4
 80013c0:	20000590 	.word	0x20000590
 80013c4:	2006dba8 	.word	0x2006dba8
 80013c8:	20000594 	.word	0x20000594
 80013cc:	2000057c 	.word	0x2000057c
 80013d0:	20000578 	.word	0x20000578
 80013d4:	20000000 	.word	0x20000000

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	@ (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	@ (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f009 fbda 	bl	800abc0 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	@ (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	@ (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20080000 	.word	0x20080000
 8001438:	00000400 	.word	0x00000400
 800143c:	2006dbac 	.word	0x2006dbac
 8001440:	2006f6c0 	.word	0x2006f6c0

08001444 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	@ (80014b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	@ (80014b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001496:	f009 fb99 	bl	800abcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149a:	f7ff f8a5 	bl	80005e8 <main>
  bx  lr    
 800149e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80014ac:	0800ad3c 	.word	0x0800ad3c
  ldr r2, =_sbss
 80014b0:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 80014b4:	2006f6bc 	.word	0x2006f6bc

080014b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC_IRQHandler>

080014ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014be:	2003      	movs	r0, #3
 80014c0:	f000 fbe0 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f000 f805 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ca:	f7ff fc69 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <HAL_InitTick+0x54>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <HAL_InitTick+0x58>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 fbfb 	bl	8001cee <HAL_SYSTICK_Config>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00e      	b.n	8001520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b0f      	cmp	r3, #15
 8001506:	d80a      	bhi.n	800151e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001508:	2200      	movs	r2, #0
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f000 fbc3 	bl	8001c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001514:	4a06      	ldr	r2, [pc, #24]	@ (8001530 <HAL_InitTick+0x5c>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	e000      	b.n	8001520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000004 	.word	0x20000004
 800152c:	2000000c 	.word	0x2000000c
 8001530:	20000008 	.word	0x20000008

08001534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_IncTick+0x20>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <HAL_IncTick+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a04      	ldr	r2, [pc, #16]	@ (8001558 <HAL_IncTick+0x24>)
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	2000000c 	.word	0x2000000c
 8001558:	2006dbb0 	.word	0x2006dbb0

0800155c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return uwTick;
 8001560:	4b03      	ldr	r3, [pc, #12]	@ (8001570 <HAL_GetTick+0x14>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	2006dbb0 	.word	0x2006dbb0

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff ffee 	bl	800155c <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffde 	bl	800155c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000000c 	.word	0x2000000c

080015bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e031      	b.n	8001636 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fc04 	bl	8000de8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d116      	bne.n	8001628 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <HAL_ADC_Init+0x84>)
 8001600:	4013      	ands	r3, r2
 8001602:	f043 0202 	orr.w	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f970 	bl	80018f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f023 0303 	bic.w	r3, r3, #3
 800161e:	f043 0201 	orr.w	r2, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	641a      	str	r2, [r3, #64]	@ 0x40
 8001626:	e001      	b.n	800162c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	ffffeefd 	.word	0xffffeefd

08001644 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1c>
 800165c:	2302      	movs	r3, #2
 800165e:	e136      	b.n	80018ce <HAL_ADC_ConfigChannel+0x28a>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b09      	cmp	r3, #9
 800166e:	d93a      	bls.n	80016e6 <HAL_ADC_ConfigChannel+0xa2>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001678:	d035      	beq.n	80016e6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68d9      	ldr	r1, [r3, #12]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	3b1e      	subs	r3, #30
 8001690:	2207      	movs	r2, #7
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	400a      	ands	r2, r1
 800169e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a8d      	ldr	r2, [pc, #564]	@ (80018dc <HAL_ADC_ConfigChannel+0x298>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10a      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68d9      	ldr	r1, [r3, #12]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	061a      	lsls	r2, r3, #24
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016be:	e035      	b.n	800172c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68d9      	ldr	r1, [r3, #12]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	4618      	mov	r0, r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4403      	add	r3, r0
 80016d8:	3b1e      	subs	r3, #30
 80016da:	409a      	lsls	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016e4:	e022      	b.n	800172c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6919      	ldr	r1, [r3, #16]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	2207      	movs	r2, #7
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43da      	mvns	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	400a      	ands	r2, r1
 8001708:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6919      	ldr	r1, [r3, #16]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	b29b      	uxth	r3, r3
 800171a:	4618      	mov	r0, r3
 800171c:	4603      	mov	r3, r0
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4403      	add	r3, r0
 8001722:	409a      	lsls	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b06      	cmp	r3, #6
 8001732:	d824      	bhi.n	800177e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3b05      	subs	r3, #5
 8001746:	221f      	movs	r2, #31
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43da      	mvns	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	400a      	ands	r2, r1
 8001754:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	4618      	mov	r0, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	3b05      	subs	r3, #5
 8001770:	fa00 f203 	lsl.w	r2, r0, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	635a      	str	r2, [r3, #52]	@ 0x34
 800177c:	e04c      	b.n	8001818 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b0c      	cmp	r3, #12
 8001784:	d824      	bhi.n	80017d0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	3b23      	subs	r3, #35	@ 0x23
 8001798:	221f      	movs	r2, #31
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	400a      	ands	r2, r1
 80017a6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	3b23      	subs	r3, #35	@ 0x23
 80017c2:	fa00 f203 	lsl.w	r2, r0, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80017ce:	e023      	b.n	8001818 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	3b41      	subs	r3, #65	@ 0x41
 80017e2:	221f      	movs	r2, #31
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43da      	mvns	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	400a      	ands	r2, r1
 80017f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	3b41      	subs	r3, #65	@ 0x41
 800180c:	fa00 f203 	lsl.w	r2, r0, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a30      	ldr	r2, [pc, #192]	@ (80018e0 <HAL_ADC_ConfigChannel+0x29c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d10a      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x1f4>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800182a:	d105      	bne.n	8001838 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800182c:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a2c      	ldr	r2, [pc, #176]	@ (80018e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001832:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001836:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a28      	ldr	r2, [pc, #160]	@ (80018e0 <HAL_ADC_ConfigChannel+0x29c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10f      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x21e>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b12      	cmp	r3, #18
 8001848:	d10b      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800184a:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4a25      	ldr	r2, [pc, #148]	@ (80018e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001850:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001854:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001856:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	4a22      	ldr	r2, [pc, #136]	@ (80018e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800185c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001860:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1e      	ldr	r2, [pc, #120]	@ (80018e0 <HAL_ADC_ConfigChannel+0x29c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d12b      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x280>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a1a      	ldr	r2, [pc, #104]	@ (80018dc <HAL_ADC_ConfigChannel+0x298>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d003      	beq.n	800187e <HAL_ADC_ConfigChannel+0x23a>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b11      	cmp	r3, #17
 800187c:	d122      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a18      	ldr	r2, [pc, #96]	@ (80018e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001884:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001888:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4a15      	ldr	r2, [pc, #84]	@ (80018e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001890:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001894:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a10      	ldr	r2, [pc, #64]	@ (80018dc <HAL_ADC_ConfigChannel+0x298>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d111      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018a0:	4b11      	ldr	r3, [pc, #68]	@ (80018e8 <HAL_ADC_ConfigChannel+0x2a4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a11      	ldr	r2, [pc, #68]	@ (80018ec <HAL_ADC_ConfigChannel+0x2a8>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	0c9a      	lsrs	r2, r3, #18
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018b6:	e002      	b.n	80018be <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f9      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	10000012 	.word	0x10000012
 80018e0:	40012000 	.word	0x40012000
 80018e4:	40012300 	.word	0x40012300
 80018e8:	20000004 	.word	0x20000004
 80018ec:	431bde83 	.word	0x431bde83

080018f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80018f8:	4b78      	ldr	r3, [pc, #480]	@ (8001adc <ADC_Init+0x1ec>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4a77      	ldr	r2, [pc, #476]	@ (8001adc <ADC_Init+0x1ec>)
 80018fe:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001902:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001904:	4b75      	ldr	r3, [pc, #468]	@ (8001adc <ADC_Init+0x1ec>)
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4973      	ldr	r1, [pc, #460]	@ (8001adc <ADC_Init+0x1ec>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001920:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6859      	ldr	r1, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	021a      	lsls	r2, r3, #8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6899      	ldr	r1, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197e:	4a58      	ldr	r2, [pc, #352]	@ (8001ae0 <ADC_Init+0x1f0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d022      	beq.n	80019ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001992:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6899      	ldr	r1, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6899      	ldr	r1, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	e00f      	b.n	80019ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0202 	bic.w	r2, r2, #2
 80019f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6899      	ldr	r1, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	005a      	lsls	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d01b      	beq.n	8001a50 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	3b01      	subs	r3, #1
 8001a44:	035a      	lsls	r2, r3, #13
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	e007      	b.n	8001a60 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	051a      	lsls	r2, r3, #20
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6899      	ldr	r1, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001aa2:	025a      	lsls	r2, r3, #9
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6899      	ldr	r1, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	029a      	lsls	r2, r3, #10
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40012300 	.word	0x40012300
 8001ae0:	0f000001 	.word	0x0f000001

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <__NVIC_SetPriorityGrouping+0x40>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b12:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <__NVIC_SetPriorityGrouping+0x40>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00
 8001b28:	05fa0000 	.word	0x05fa0000

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4907      	ldr	r1, [pc, #28]	@ (8001b80 <__NVIC_EnableIRQ+0x38>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	@ (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	@ (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	@ 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	@ 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff8e 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff29 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff3e 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff8e 	bl	8001bd8 <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5d 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff31 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff fc22 	bl	800155c <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e099      	b.n	8001e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d44:	e00f      	b.n	8001d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d46:	f7ff fc09 	bl	800155c <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b05      	cmp	r3, #5
 8001d52:	d908      	bls.n	8001d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2220      	movs	r2, #32
 8001d58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e078      	b.n	8001e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1e8      	bne.n	8001d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	4b38      	ldr	r3, [pc, #224]	@ (8001e60 <HAL_DMA_Init+0x158>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d107      	bne.n	8001dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f023 0307 	bic.w	r3, r3, #7
 8001de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d117      	bne.n	8001e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00e      	beq.n	8001e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f9e9 	bl	80021e4 <DMA_CheckFifoParam>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2240      	movs	r2, #64	@ 0x40
 8001e1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e26:	2301      	movs	r3, #1
 8001e28:	e016      	b.n	8001e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f9a0 	bl	8002178 <DMA_CalcBaseAndBitshift>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e40:	223f      	movs	r2, #63	@ 0x3f
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	e010803f 	.word	0xe010803f

08001e64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001e70:	4b8e      	ldr	r3, [pc, #568]	@ (80020ac <HAL_DMA_IRQHandler+0x248>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a8e      	ldr	r2, [pc, #568]	@ (80020b0 <HAL_DMA_IRQHandler+0x24c>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0a9b      	lsrs	r3, r3, #10
 8001e7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8e:	2208      	movs	r2, #8
 8001e90:	409a      	lsls	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01a      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0204 	bic.w	r2, r2, #4
 8001eb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d012      	beq.n	8001f06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efe:	f043 0202 	orr.w	r2, r3, #2
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d012      	beq.n	8001f3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f28:	2204      	movs	r2, #4
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f34:	f043 0204 	orr.w	r2, r3, #4
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f40:	2210      	movs	r2, #16
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d043      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d03c      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5e:	2210      	movs	r2, #16
 8001f60:	409a      	lsls	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d018      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d024      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
 8001f92:	e01f      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01b      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	4798      	blx	r3
 8001fa4:	e016      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0208 	bic.w	r2, r2, #8
 8001fc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd8:	2220      	movs	r2, #32
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 808f 	beq.w	8002104 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8087 	beq.w	8002104 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b05      	cmp	r3, #5
 800200c:	d136      	bne.n	800207c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0216 	bic.w	r2, r2, #22
 800201c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800202c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <HAL_DMA_IRQHandler+0x1da>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0208 	bic.w	r2, r2, #8
 800204c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002052:	223f      	movs	r2, #63	@ 0x3f
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800206e:	2b00      	cmp	r3, #0
 8002070:	d07e      	beq.n	8002170 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	4798      	blx	r3
        }
        return;
 800207a:	e079      	b.n	8002170 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d01d      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10d      	bne.n	80020b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209c:	2b00      	cmp	r3, #0
 800209e:	d031      	beq.n	8002104 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4798      	blx	r3
 80020a8:	e02c      	b.n	8002104 <HAL_DMA_IRQHandler+0x2a0>
 80020aa:	bf00      	nop
 80020ac:	20000004 	.word	0x20000004
 80020b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d023      	beq.n	8002104 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
 80020c4:	e01e      	b.n	8002104 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10f      	bne.n	80020f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0210 	bic.w	r2, r2, #16
 80020e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	2b00      	cmp	r3, #0
 800210a:	d032      	beq.n	8002172 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d022      	beq.n	800215e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2205      	movs	r2, #5
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3301      	adds	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	429a      	cmp	r2, r3
 800213a:	d307      	bcc.n	800214c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f2      	bne.n	8002130 <HAL_DMA_IRQHandler+0x2cc>
 800214a:	e000      	b.n	800214e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800214c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
 800216e:	e000      	b.n	8002172 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002170:	bf00      	nop
    }
  }
}
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	3b10      	subs	r3, #16
 8002188:	4a13      	ldr	r2, [pc, #76]	@ (80021d8 <DMA_CalcBaseAndBitshift+0x60>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002192:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <DMA_CalcBaseAndBitshift+0x64>)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d908      	bls.n	80021b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <DMA_CalcBaseAndBitshift+0x68>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	1d1a      	adds	r2, r3, #4
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80021b6:	e006      	b.n	80021c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <DMA_CalcBaseAndBitshift+0x68>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	aaaaaaab 	.word	0xaaaaaaab
 80021dc:	0800ad24 	.word	0x0800ad24
 80021e0:	fffffc00 	.word	0xfffffc00

080021e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11f      	bne.n	800223e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d856      	bhi.n	80022b2 <DMA_CheckFifoParam+0xce>
 8002204:	a201      	add	r2, pc, #4	@ (adr r2, 800220c <DMA_CheckFifoParam+0x28>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	0800221d 	.word	0x0800221d
 8002210:	0800222f 	.word	0x0800222f
 8002214:	0800221d 	.word	0x0800221d
 8002218:	080022b3 	.word	0x080022b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002220:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d046      	beq.n	80022b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800222c:	e043      	b.n	80022b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002232:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002236:	d140      	bne.n	80022ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223c:	e03d      	b.n	80022ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002246:	d121      	bne.n	800228c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d837      	bhi.n	80022be <DMA_CheckFifoParam+0xda>
 800224e:	a201      	add	r2, pc, #4	@ (adr r2, 8002254 <DMA_CheckFifoParam+0x70>)
 8002250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002254:	08002265 	.word	0x08002265
 8002258:	0800226b 	.word	0x0800226b
 800225c:	08002265 	.word	0x08002265
 8002260:	0800227d 	.word	0x0800227d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
      break;
 8002268:	e030      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d025      	beq.n	80022c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800227a:	e022      	b.n	80022c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002280:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002284:	d11f      	bne.n	80022c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800228a:	e01c      	b.n	80022c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d903      	bls.n	800229a <DMA_CheckFifoParam+0xb6>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d003      	beq.n	80022a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002298:	e018      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
      break;
 800229e:	e015      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00e      	beq.n	80022ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
      break;
 80022b0:	e00b      	b.n	80022ca <DMA_CheckFifoParam+0xe6>
      break;
 80022b2:	bf00      	nop
 80022b4:	e00a      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
 80022b8:	e008      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      break;
 80022ba:	bf00      	nop
 80022bc:	e006      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      break;
 80022be:	bf00      	nop
 80022c0:	e004      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
 80022c4:	e002      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      break;   
 80022c6:	bf00      	nop
 80022c8:	e000      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      break;
 80022ca:	bf00      	nop
    }
  } 
  
  return status; 
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop

080022dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e086      	b.n	80023fc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2223      	movs	r2, #35	@ 0x23
 80022fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7fe fde5 	bl	8000ed0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	4b3f      	ldr	r3, [pc, #252]	@ (8002404 <HAL_ETH_Init+0x128>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	4a3e      	ldr	r2, [pc, #248]	@ (8002404 <HAL_ETH_Init+0x128>)
 800230c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002310:	6453      	str	r3, [r2, #68]	@ 0x44
 8002312:	4b3c      	ldr	r3, [pc, #240]	@ (8002404 <HAL_ETH_Init+0x128>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800231e:	4b3a      	ldr	r3, [pc, #232]	@ (8002408 <HAL_ETH_Init+0x12c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4a39      	ldr	r2, [pc, #228]	@ (8002408 <HAL_ETH_Init+0x12c>)
 8002324:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002328:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800232a:	4b37      	ldr	r3, [pc, #220]	@ (8002408 <HAL_ETH_Init+0x12c>)
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4935      	ldr	r1, [pc, #212]	@ (8002408 <HAL_ETH_Init+0x12c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002338:	4b33      	ldr	r3, [pc, #204]	@ (8002408 <HAL_ETH_Init+0x12c>)
 800233a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002352:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002354:	f7ff f902 	bl	800155c <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800235a:	e011      	b.n	8002380 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800235c:	f7ff f8fe 	bl	800155c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800236a:	d909      	bls.n	8002380 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2204      	movs	r2, #4
 8002370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	22e0      	movs	r2, #224	@ 0xe0
 8002378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e03d      	b.n	80023fc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1e4      	bne.n	800235c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f97a 	bl	800268c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fa25 	bl	80027e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa7b 	bl	800289a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	461a      	mov	r2, r3
 80023aa:	2100      	movs	r1, #0
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f9e3 	bl	8002778 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80023c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b0f      	ldr	r3, [pc, #60]	@ (800240c <HAL_ETH_Init+0x130>)
 80023d0:	430b      	orrs	r3, r1
 80023d2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80023e6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2210      	movs	r2, #16
 80023f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40023800 	.word	0x40023800
 8002408:	40013800 	.word	0x40013800
 800240c:	00020060 	.word	0x00020060

08002410 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4b53      	ldr	r3, [pc, #332]	@ (8002574 <ETH_SetMACConfig+0x164>)
 8002426:	4013      	ands	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	7b9b      	ldrb	r3, [r3, #14]
 800242e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	7c12      	ldrb	r2, [r2, #16]
 8002434:	2a00      	cmp	r2, #0
 8002436:	d102      	bne.n	800243e <ETH_SetMACConfig+0x2e>
 8002438:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800243c:	e000      	b.n	8002440 <ETH_SetMACConfig+0x30>
 800243e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002440:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	7c52      	ldrb	r2, [r2, #17]
 8002446:	2a00      	cmp	r2, #0
 8002448:	d102      	bne.n	8002450 <ETH_SetMACConfig+0x40>
 800244a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800244e:	e000      	b.n	8002452 <ETH_SetMACConfig+0x42>
 8002450:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002452:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002458:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	7fdb      	ldrb	r3, [r3, #31]
 800245e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002460:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002466:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	7f92      	ldrb	r2, [r2, #30]
 800246c:	2a00      	cmp	r2, #0
 800246e:	d102      	bne.n	8002476 <ETH_SetMACConfig+0x66>
 8002470:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002474:	e000      	b.n	8002478 <ETH_SetMACConfig+0x68>
 8002476:	2200      	movs	r2, #0
                        macconf->Speed |
 8002478:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	7f1b      	ldrb	r3, [r3, #28]
 800247e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002480:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002486:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	791b      	ldrb	r3, [r3, #4]
 800248c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800248e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002496:	2a00      	cmp	r2, #0
 8002498:	d102      	bne.n	80024a0 <ETH_SetMACConfig+0x90>
 800249a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800249e:	e000      	b.n	80024a2 <ETH_SetMACConfig+0x92>
 80024a0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	7bdb      	ldrb	r3, [r3, #15]
 80024a8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024aa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024b8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80024ba:	4313      	orrs	r3, r2
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7ff f84e 	bl	8001574 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80024ee:	4013      	ands	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80024fe:	2a00      	cmp	r2, #0
 8002500:	d101      	bne.n	8002506 <ETH_SetMACConfig+0xf6>
 8002502:	2280      	movs	r2, #128	@ 0x80
 8002504:	e000      	b.n	8002508 <ETH_SetMACConfig+0xf8>
 8002506:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002508:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800250e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002516:	2a01      	cmp	r2, #1
 8002518:	d101      	bne.n	800251e <ETH_SetMACConfig+0x10e>
 800251a:	2208      	movs	r2, #8
 800251c:	e000      	b.n	8002520 <ETH_SetMACConfig+0x110>
 800251e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002520:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002528:	2a01      	cmp	r2, #1
 800252a:	d101      	bne.n	8002530 <ETH_SetMACConfig+0x120>
 800252c:	2204      	movs	r2, #4
 800252e:	e000      	b.n	8002532 <ETH_SetMACConfig+0x122>
 8002530:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002532:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800253a:	2a01      	cmp	r2, #1
 800253c:	d101      	bne.n	8002542 <ETH_SetMACConfig+0x132>
 800253e:	2202      	movs	r2, #2
 8002540:	e000      	b.n	8002544 <ETH_SetMACConfig+0x134>
 8002542:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002544:	4313      	orrs	r3, r2
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800255c:	2001      	movs	r0, #1
 800255e:	f7ff f809 	bl	8001574 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	619a      	str	r2, [r3, #24]
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	fd20810f 	.word	0xfd20810f

08002578 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4b3d      	ldr	r3, [pc, #244]	@ (8002688 <ETH_SetDMAConfig+0x110>)
 8002592:	4013      	ands	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	7b1b      	ldrb	r3, [r3, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d102      	bne.n	80025a4 <ETH_SetDMAConfig+0x2c>
 800259e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025a2:	e000      	b.n	80025a6 <ETH_SetDMAConfig+0x2e>
 80025a4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	7b5b      	ldrb	r3, [r3, #13]
 80025aa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025ac:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	7f52      	ldrb	r2, [r2, #29]
 80025b2:	2a00      	cmp	r2, #0
 80025b4:	d102      	bne.n	80025bc <ETH_SetDMAConfig+0x44>
 80025b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80025ba:	e000      	b.n	80025be <ETH_SetDMAConfig+0x46>
 80025bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	7b9b      	ldrb	r3, [r3, #14]
 80025c4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025c6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80025cc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	7f1b      	ldrb	r3, [r3, #28]
 80025d2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80025d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	7f9b      	ldrb	r3, [r3, #30]
 80025da:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025dc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025ea:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025ec:	4313      	orrs	r3, r2
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025fc:	461a      	mov	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800260e:	2001      	movs	r0, #1
 8002610:	f7fe ffb0 	bl	8001574 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800261c:	461a      	mov	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	791b      	ldrb	r3, [r3, #4]
 8002626:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800262c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002632:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002638:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002640:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002642:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002648:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800264a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002650:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800265a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800265e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800266c:	2001      	movs	r0, #1
 800266e:	f7fe ff81 	bl	8001574 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	f8de3f23 	.word	0xf8de3f23

0800268c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b0a6      	sub	sp, #152	@ 0x98
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002694:	2301      	movs	r3, #1
 8002696:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800269a:	2301      	movs	r3, #1
 800269c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80026a0:	2300      	movs	r3, #0
 80026a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80026bc:	2301      	movs	r3, #1
 80026be:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026ce:	2300      	movs	r3, #0
 80026d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002706:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fe7f 	bl	8002410 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002712:	2301      	movs	r3, #1
 8002714:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002716:	2301      	movs	r3, #1
 8002718:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002720:	2301      	movs	r3, #1
 8002722:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002734:	2300      	movs	r3, #0
 8002736:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800273e:	2301      	movs	r3, #1
 8002740:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002742:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002746:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002748:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800274c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800274e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002752:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800275a:	2300      	movs	r3, #0
 800275c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	4619      	mov	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff ff05 	bl	8002578 <ETH_SetDMAConfig>
}
 800276e:	bf00      	nop
 8002770:	3798      	adds	r7, #152	@ 0x98
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3305      	adds	r3, #5
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	3204      	adds	r2, #4
 8002790:	7812      	ldrb	r2, [r2, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <ETH_MACAddressConfig+0x68>)
 800279a:	4413      	add	r3, r2
 800279c:	461a      	mov	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3303      	adds	r3, #3
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	061a      	lsls	r2, r3, #24
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3302      	adds	r3, #2
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3301      	adds	r3, #1
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	4313      	orrs	r3, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	7812      	ldrb	r2, [r2, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <ETH_MACAddressConfig+0x6c>)
 80027ca:	4413      	add	r3, r2
 80027cc:	461a      	mov	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	6013      	str	r3, [r2, #0]
}
 80027d2:	bf00      	nop
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40028040 	.word	0x40028040
 80027e4:	40028044 	.word	0x40028044

080027e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	e03e      	b.n	8002874 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68d9      	ldr	r1, [r3, #12]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2200      	movs	r2, #0
 8002812:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	3206      	adds	r2, #6
 8002828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d80c      	bhi.n	8002858 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68d9      	ldr	r1, [r3, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	461a      	mov	r2, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	e004      	b.n	8002862 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	461a      	mov	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	3301      	adds	r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d9bd      	bls.n	80027f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800288c:	611a      	str	r2, [r3, #16]
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800289a:	b480      	push	{r7}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e048      	b.n	800293a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6919      	ldr	r1, [r3, #16]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	440b      	add	r3, r1
 80028b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2200      	movs	r2, #0
 80028c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2200      	movs	r2, #0
 80028d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2200      	movs	r2, #0
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80028e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	3212      	adds	r2, #18
 8002906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d80c      	bhi.n	800292a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6919      	ldr	r1, [r3, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	461a      	mov	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	60da      	str	r2, [r3, #12]
 8002928:	e004      	b.n	8002934 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3301      	adds	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d9b3      	bls.n	80028a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800296a:	60da      	str	r2, [r3, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002978:	b480      	push	{r7}
 800297a:	b089      	sub	sp, #36	@ 0x24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	e175      	b.n	8002c84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002998:	2201      	movs	r2, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	f040 8164 	bne.w	8002c7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d005      	beq.n	80029ce <HAL_GPIO_Init+0x56>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d130      	bne.n	8002a30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	2203      	movs	r2, #3
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	091b      	lsrs	r3, r3, #4
 8002a1a:	f003 0201 	and.w	r2, r3, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d017      	beq.n	8002a6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d123      	bne.n	8002ac0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	08da      	lsrs	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3208      	adds	r2, #8
 8002a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	220f      	movs	r2, #15
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	08da      	lsrs	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3208      	adds	r2, #8
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0203 	and.w	r2, r3, #3
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80be 	beq.w	8002c7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	4b66      	ldr	r3, [pc, #408]	@ (8002c9c <HAL_GPIO_Init+0x324>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	4a65      	ldr	r2, [pc, #404]	@ (8002c9c <HAL_GPIO_Init+0x324>)
 8002b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b0e:	4b63      	ldr	r3, [pc, #396]	@ (8002c9c <HAL_GPIO_Init+0x324>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b1a:	4a61      	ldr	r2, [pc, #388]	@ (8002ca0 <HAL_GPIO_Init+0x328>)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	3302      	adds	r3, #2
 8002b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	220f      	movs	r2, #15
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a58      	ldr	r2, [pc, #352]	@ (8002ca4 <HAL_GPIO_Init+0x32c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d037      	beq.n	8002bb6 <HAL_GPIO_Init+0x23e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a57      	ldr	r2, [pc, #348]	@ (8002ca8 <HAL_GPIO_Init+0x330>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d031      	beq.n	8002bb2 <HAL_GPIO_Init+0x23a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a56      	ldr	r2, [pc, #344]	@ (8002cac <HAL_GPIO_Init+0x334>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02b      	beq.n	8002bae <HAL_GPIO_Init+0x236>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a55      	ldr	r2, [pc, #340]	@ (8002cb0 <HAL_GPIO_Init+0x338>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d025      	beq.n	8002baa <HAL_GPIO_Init+0x232>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a54      	ldr	r2, [pc, #336]	@ (8002cb4 <HAL_GPIO_Init+0x33c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d01f      	beq.n	8002ba6 <HAL_GPIO_Init+0x22e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a53      	ldr	r2, [pc, #332]	@ (8002cb8 <HAL_GPIO_Init+0x340>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d019      	beq.n	8002ba2 <HAL_GPIO_Init+0x22a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a52      	ldr	r2, [pc, #328]	@ (8002cbc <HAL_GPIO_Init+0x344>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_GPIO_Init+0x226>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a51      	ldr	r2, [pc, #324]	@ (8002cc0 <HAL_GPIO_Init+0x348>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00d      	beq.n	8002b9a <HAL_GPIO_Init+0x222>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a50      	ldr	r2, [pc, #320]	@ (8002cc4 <HAL_GPIO_Init+0x34c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <HAL_GPIO_Init+0x21e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4f      	ldr	r2, [pc, #316]	@ (8002cc8 <HAL_GPIO_Init+0x350>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_GPIO_Init+0x21a>
 8002b8e:	2309      	movs	r3, #9
 8002b90:	e012      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002b92:	230a      	movs	r3, #10
 8002b94:	e010      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002b96:	2308      	movs	r3, #8
 8002b98:	e00e      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	e00c      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002b9e:	2306      	movs	r3, #6
 8002ba0:	e00a      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x240>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bc8:	4935      	ldr	r1, [pc, #212]	@ (8002ca0 <HAL_GPIO_Init+0x328>)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8002ccc <HAL_GPIO_Init+0x354>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfa:	4a34      	ldr	r2, [pc, #208]	@ (8002ccc <HAL_GPIO_Init+0x354>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c00:	4b32      	ldr	r3, [pc, #200]	@ (8002ccc <HAL_GPIO_Init+0x354>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c24:	4a29      	ldr	r2, [pc, #164]	@ (8002ccc <HAL_GPIO_Init+0x354>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c2a:	4b28      	ldr	r3, [pc, #160]	@ (8002ccc <HAL_GPIO_Init+0x354>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ccc <HAL_GPIO_Init+0x354>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <HAL_GPIO_Init+0x354>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c78:	4a14      	ldr	r2, [pc, #80]	@ (8002ccc <HAL_GPIO_Init+0x354>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	f67f ae86 	bls.w	8002998 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3724      	adds	r7, #36	@ 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40021400 	.word	0x40021400
 8002cbc:	40021800 	.word	0x40021800
 8002cc0:	40021c00 	.word	0x40021c00
 8002cc4:	40022000 	.word	0x40022000
 8002cc8:	40022400 	.word	0x40022400
 8002ccc:	40013c00 	.word	0x40013c00

08002cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ce0:	787b      	ldrb	r3, [r7, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002cec:	e003      	b.n	8002cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002cee:	887b      	ldrh	r3, [r7, #2]
 8002cf0:	041a      	lsls	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	619a      	str	r2, [r3, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d14:	887a      	ldrh	r2, [r7, #2]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	041a      	lsls	r2, r3, #16
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	43d9      	mvns	r1, r3
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	400b      	ands	r3, r1
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	619a      	str	r2, [r3, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af02      	add	r7, sp, #8
 8002d3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e108      	b.n	8002f5a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f007 fad8 	bl	800a318 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d76:	d102      	bne.n	8002d7e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 fe81 	bl	8006a8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	7c1a      	ldrb	r2, [r3, #16]
 8002d90:	f88d 2000 	strb.w	r2, [sp]
 8002d94:	3304      	adds	r3, #4
 8002d96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d98:	f003 fd6a 	bl	8006870 <USB_CoreInit>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e0d5      	b.n	8002f5a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 fe79 	bl	8006aac <USB_SetCurrentMode>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0c6      	b.n	8002f5a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
 8002dd0:	e04a      	b.n	8002e68 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3315      	adds	r3, #21
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	3314      	adds	r3, #20
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dfa:	7bfa      	ldrb	r2, [r7, #15]
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	b298      	uxth	r0, r3
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	332e      	adds	r3, #46	@ 0x2e
 8002e0e:	4602      	mov	r2, r0
 8002e10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e12:	7bfa      	ldrb	r2, [r7, #15]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	3318      	adds	r3, #24
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e26:	7bfa      	ldrb	r2, [r7, #15]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	331c      	adds	r3, #28
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	3320      	adds	r3, #32
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e4e:	7bfa      	ldrb	r2, [r7, #15]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	3324      	adds	r3, #36	@ 0x24
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	3301      	adds	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	791b      	ldrb	r3, [r3, #4]
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d3af      	bcc.n	8002dd2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	e044      	b.n	8002f02 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	3301      	adds	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	791b      	ldrb	r3, [r3, #4]
 8002f06:	7bfa      	ldrb	r2, [r7, #15]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d3b5      	bcc.n	8002e78 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7c1a      	ldrb	r2, [r3, #16]
 8002f14:	f88d 2000 	strb.w	r2, [sp]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f1c:	f003 fe12 	bl	8006b44 <USB_DevInit>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2202      	movs	r2, #2
 8002f2a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e013      	b.n	8002f5a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7b1b      	ldrb	r3, [r3, #12]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d102      	bne.n	8002f4e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f001 f959 	bl	8004200 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 fe51 	bl	8007bfa <USB_DevDisconnect>

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_PCD_Start+0x16>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e012      	b.n	8002f9e <HAL_PCD_Start+0x3c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 fd6f 	bl	8006a68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 fe12 	bl	8007bb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fa6:	b590      	push	{r4, r7, lr}
 8002fa8:	b08d      	sub	sp, #52	@ 0x34
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f004 fed0 	bl	8007d62 <USB_GetMode>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f040 84b9 	bne.w	800393c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f004 fe34 	bl	8007c3c <USB_ReadInterrupts>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 84af 	beq.w	800393a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f004 fe21 	bl	8007c3c <USB_ReadInterrupts>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d107      	bne.n	8003014 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f002 0202 	and.w	r2, r2, #2
 8003012:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f004 fe0f 	bl	8007c3c <USB_ReadInterrupts>
 800301e:	4603      	mov	r3, r0
 8003020:	f003 0310 	and.w	r3, r3, #16
 8003024:	2b10      	cmp	r3, #16
 8003026:	d161      	bne.n	80030ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0210 	bic.w	r2, r2, #16
 8003036:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f003 020f 	and.w	r2, r3, #15
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	3304      	adds	r3, #4
 8003056:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	0c5b      	lsrs	r3, r3, #17
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	2b02      	cmp	r3, #2
 8003062:	d124      	bne.n	80030ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d035      	beq.n	80030dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800307a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	6a38      	ldr	r0, [r7, #32]
 8003084:	f004 fc46 	bl	8007914 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003094:	441a      	add	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030a6:	441a      	add	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	615a      	str	r2, [r3, #20]
 80030ac:	e016      	b.n	80030dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	0c5b      	lsrs	r3, r3, #17
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d110      	bne.n	80030dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030c0:	2208      	movs	r2, #8
 80030c2:	4619      	mov	r1, r3
 80030c4:	6a38      	ldr	r0, [r7, #32]
 80030c6:	f004 fc25 	bl	8007914 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030d6:	441a      	add	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0210 	orr.w	r2, r2, #16
 80030ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f004 fda3 	bl	8007c3c <USB_ReadInterrupts>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003100:	f040 80a7 	bne.w	8003252 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f004 fda8 	bl	8007c62 <USB_ReadDevAllOutEpInterrupt>
 8003112:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003114:	e099      	b.n	800324a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 808e 	beq.w	800323e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f004 fdcc 	bl	8007cca <USB_ReadDevOutEPInterrupt>
 8003132:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00c      	beq.n	8003158 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800314a:	461a      	mov	r2, r3
 800314c:	2301      	movs	r3, #1
 800314e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003150:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fece 	bl	8003ef4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00c      	beq.n	800317c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800316e:	461a      	mov	r2, r3
 8003170:	2308      	movs	r3, #8
 8003172:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003174:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 ffa4 	bl	80040c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003192:	461a      	mov	r2, r3
 8003194:	2310      	movs	r3, #16
 8003196:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d030      	beq.n	8003204 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031aa:	2b80      	cmp	r3, #128	@ 0x80
 80031ac:	d109      	bne.n	80031c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80031c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	4413      	add	r3, r2
 80031d4:	3304      	adds	r3, #4
 80031d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	78db      	ldrb	r3, [r3, #3]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d108      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2200      	movs	r2, #0
 80031e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	4619      	mov	r1, r3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f007 f9c7 	bl	800a580 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031fe:	461a      	mov	r2, r3
 8003200:	2302      	movs	r3, #2
 8003202:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800321a:	461a      	mov	r2, r3
 800321c:	2320      	movs	r3, #32
 800321e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003236:	461a      	mov	r2, r3
 8003238:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800323c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	3301      	adds	r3, #1
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800324a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	f47f af62 	bne.w	8003116 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f004 fcf0 	bl	8007c3c <USB_ReadInterrupts>
 800325c:	4603      	mov	r3, r0
 800325e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003262:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003266:	f040 80db 	bne.w	8003420 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f004 fd11 	bl	8007c96 <USB_ReadDevAllInEpInterrupt>
 8003274:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800327a:	e0cd      	b.n	8003418 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800327c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80c2 	beq.w	800340c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f004 fd37 	bl	8007d06 <USB_ReadDevInEPInterrupt>
 8003298:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d057      	beq.n	8003354 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	2201      	movs	r2, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43db      	mvns	r3, r3
 80032be:	69f9      	ldr	r1, [r7, #28]
 80032c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032c4:	4013      	ands	r3, r2
 80032c6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032d4:	461a      	mov	r2, r3
 80032d6:	2301      	movs	r3, #1
 80032d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	799b      	ldrb	r3, [r3, #6]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d132      	bne.n	8003348 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e6:	4613      	mov	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	3320      	adds	r3, #32
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4403      	add	r3, r0
 8003302:	331c      	adds	r3, #28
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4419      	add	r1, r3
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4403      	add	r3, r0
 8003316:	3320      	adds	r3, #32
 8003318:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	2b00      	cmp	r3, #0
 800331e:	d113      	bne.n	8003348 <HAL_PCD_IRQHandler+0x3a2>
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3324      	adds	r3, #36	@ 0x24
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d108      	bne.n	8003348 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003340:	461a      	mov	r2, r3
 8003342:	2101      	movs	r1, #1
 8003344:	f004 fd40 	bl	8007dc8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	b2db      	uxtb	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f007 f891 	bl	800a476 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800336a:	461a      	mov	r2, r3
 800336c:	2308      	movs	r3, #8
 800336e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	4413      	add	r3, r2
 8003382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003386:	461a      	mov	r2, r3
 8003388:	2310      	movs	r3, #16
 800338a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033a2:	461a      	mov	r2, r3
 80033a4:	2340      	movs	r3, #64	@ 0x40
 80033a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d023      	beq.n	80033fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033b4:	6a38      	ldr	r0, [r7, #32]
 80033b6:	f003 fd23 	bl	8006e00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80033ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	3310      	adds	r3, #16
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	3304      	adds	r3, #4
 80033cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	78db      	ldrb	r3, [r3, #3]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d108      	bne.n	80033e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2200      	movs	r2, #0
 80033da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	4619      	mov	r1, r3
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f007 f8de 	bl	800a5a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033f4:	461a      	mov	r2, r3
 80033f6:	2302      	movs	r3, #2
 80033f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003404:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fce8 	bl	8003ddc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340e:	3301      	adds	r3, #1
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	f47f af2e 	bne.w	800327c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f004 fc09 	bl	8007c3c <USB_ReadInterrupts>
 800342a:	4603      	mov	r3, r0
 800342c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003430:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003434:	d122      	bne.n	800347c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003444:	f023 0301 	bic.w	r3, r3, #1
 8003448:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003450:	2b01      	cmp	r3, #1
 8003452:	d108      	bne.n	8003466 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800345c:	2100      	movs	r1, #0
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f007 fa58 	bl	800a914 <HAL_PCDEx_LPM_Callback>
 8003464:	e002      	b.n	800346c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f007 f87c 	bl	800a564 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800347a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f004 fbdb 	bl	8007c3c <USB_ReadInterrupts>
 8003486:	4603      	mov	r3, r0
 8003488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800348c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003490:	d112      	bne.n	80034b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d102      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f007 f838 	bl	800a518 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80034b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f004 fbbd 	bl	8007c3c <USB_ReadInterrupts>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034cc:	d121      	bne.n	8003512 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80034dc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d111      	bne.n	800350c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	f003 020f 	and.w	r2, r3, #15
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003502:	2101      	movs	r1, #1
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f007 fa05 	bl	800a914 <HAL_PCDEx_LPM_Callback>
 800350a:	e002      	b.n	8003512 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f007 f803 	bl	800a518 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f004 fb90 	bl	8007c3c <USB_ReadInterrupts>
 800351c:	4603      	mov	r3, r0
 800351e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003526:	f040 80b7 	bne.w	8003698 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2110      	movs	r1, #16
 8003544:	4618      	mov	r0, r3
 8003546:	f003 fc5b 	bl	8006e00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800354a:	2300      	movs	r3, #0
 800354c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800354e:	e046      	b.n	80035de <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800355c:	461a      	mov	r2, r3
 800355e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003562:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003574:	0151      	lsls	r1, r2, #5
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	440a      	add	r2, r1
 800357a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800357e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003582:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003590:	461a      	mov	r2, r3
 8003592:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003596:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035c8:	0151      	lsls	r1, r2, #5
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	440a      	add	r2, r1
 80035ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80035d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035da:	3301      	adds	r3, #1
 80035dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	791b      	ldrb	r3, [r3, #4]
 80035e2:	461a      	mov	r2, r3
 80035e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d3b2      	bcc.n	8003550 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035f8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80035fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	7bdb      	ldrb	r3, [r3, #15]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d016      	beq.n	8003634 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800360c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003616:	f043 030b 	orr.w	r3, r3, #11
 800361a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800362c:	f043 030b 	orr.w	r3, r3, #11
 8003630:	6453      	str	r3, [r2, #68]	@ 0x44
 8003632:	e015      	b.n	8003660 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003642:	4619      	mov	r1, r3
 8003644:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003648:	4313      	orrs	r3, r2
 800364a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800365a:	f043 030b 	orr.w	r3, r3, #11
 800365e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800366e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003672:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003682:	461a      	mov	r2, r3
 8003684:	f004 fba0 	bl	8007dc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003696:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f004 facd 	bl	8007c3c <USB_ReadInterrupts>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ac:	d123      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f004 fb64 	bl	8007d80 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 fc18 	bl	8006ef2 <USB_GetDevSpeed>
 80036c2:	4603      	mov	r3, r0
 80036c4:	461a      	mov	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681c      	ldr	r4, [r3, #0]
 80036ce:	f001 fabb 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 80036d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036d8:	461a      	mov	r2, r3
 80036da:	4620      	mov	r0, r4
 80036dc:	f003 f922 	bl	8006924 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f006 fef0 	bl	800a4c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80036f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 fa9e 	bl	8007c3c <USB_ReadInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b08      	cmp	r3, #8
 8003708:	d10a      	bne.n	8003720 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f006 fecd 	bl	800a4aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f002 0208 	and.w	r2, r2, #8
 800371e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f004 fa89 	bl	8007c3c <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003730:	2b80      	cmp	r3, #128	@ 0x80
 8003732:	d123      	bne.n	800377c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003740:	2301      	movs	r3, #1
 8003742:	627b      	str	r3, [r7, #36]	@ 0x24
 8003744:	e014      	b.n	8003770 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d105      	bne.n	800376a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	b2db      	uxtb	r3, r3
 8003762:	4619      	mov	r1, r3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 fb08 	bl	8003d7a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	3301      	adds	r3, #1
 800376e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	791b      	ldrb	r3, [r3, #4]
 8003774:	461a      	mov	r2, r3
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	4293      	cmp	r3, r2
 800377a:	d3e4      	bcc.n	8003746 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f004 fa5b 	bl	8007c3c <USB_ReadInterrupts>
 8003786:	4603      	mov	r3, r0
 8003788:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800378c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003790:	d13c      	bne.n	800380c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003792:	2301      	movs	r3, #1
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
 8003796:	e02b      	b.n	80037f0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ac:	4613      	mov	r3, r2
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	3318      	adds	r3, #24
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d115      	bne.n	80037ea <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80037be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	da12      	bge.n	80037ea <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	3317      	adds	r3, #23
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fac8 	bl	8003d7a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	3301      	adds	r3, #1
 80037ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	791b      	ldrb	r3, [r3, #4]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d3cd      	bcc.n	8003798 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695a      	ldr	r2, [r3, #20]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800380a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f004 fa13 	bl	8007c3c <USB_ReadInterrupts>
 8003816:	4603      	mov	r3, r0
 8003818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800381c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003820:	d156      	bne.n	80038d0 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003822:	2301      	movs	r3, #1
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
 8003826:	e045      	b.n	80038b4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800383c:	4613      	mov	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d12e      	bne.n	80038ae <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003850:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003852:	2b00      	cmp	r3, #0
 8003854:	da2b      	bge.n	80038ae <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003862:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003866:	429a      	cmp	r2, r3
 8003868:	d121      	bne.n	80038ae <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800386e:	4613      	mov	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800387c:	2201      	movs	r2, #1
 800387e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038aa:	6053      	str	r3, [r2, #4]
            break;
 80038ac:	e008      	b.n	80038c0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b0:	3301      	adds	r3, #1
 80038b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	791b      	ldrb	r3, [r3, #4]
 80038b8:	461a      	mov	r2, r3
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	4293      	cmp	r3, r2
 80038be:	d3b3      	bcc.n	8003828 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80038ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f004 f9b1 	bl	8007c3c <USB_ReadInterrupts>
 80038da:	4603      	mov	r3, r0
 80038dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e4:	d10a      	bne.n	80038fc <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f006 fe6e 	bl	800a5c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80038fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f004 f99b 	bl	8007c3c <USB_ReadInterrupts>
 8003906:	4603      	mov	r3, r0
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b04      	cmp	r3, #4
 800390e:	d115      	bne.n	800393c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f006 fe5e 	bl	800a5e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6859      	ldr	r1, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	e000      	b.n	800393c <HAL_PCD_IRQHandler+0x996>
      return;
 800393a:	bf00      	nop
    }
  }
}
 800393c:	3734      	adds	r7, #52	@ 0x34
 800393e:	46bd      	mov	sp, r7
 8003940:	bd90      	pop	{r4, r7, pc}

08003942 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_PCD_SetAddress+0x1a>
 8003958:	2302      	movs	r3, #2
 800395a:	e012      	b.n	8003982 <HAL_PCD_SetAddress+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f004 f8fa 	bl	8007b6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	4608      	mov	r0, r1
 8003994:	4611      	mov	r1, r2
 8003996:	461a      	mov	r2, r3
 8003998:	4603      	mov	r3, r0
 800399a:	70fb      	strb	r3, [r7, #3]
 800399c:	460b      	mov	r3, r1
 800399e:	803b      	strh	r3, [r7, #0]
 80039a0:	4613      	mov	r3, r2
 80039a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	da0f      	bge.n	80039d0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	f003 020f 	and.w	r2, r3, #15
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	3310      	adds	r3, #16
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	3304      	adds	r3, #4
 80039c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	705a      	strb	r2, [r3, #1]
 80039ce:	e00f      	b.n	80039f0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	f003 020f 	and.w	r2, r3, #15
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	4413      	add	r3, r2
 80039e6:	3304      	adds	r3, #4
 80039e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039fc:	883a      	ldrh	r2, [r7, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	78ba      	ldrb	r2, [r7, #2]
 8003a06:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	785b      	ldrb	r3, [r3, #1]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a1a:	78bb      	ldrb	r3, [r7, #2]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d102      	bne.n	8003a26 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_PCD_EP_Open+0xaa>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e00e      	b.n	8003a52 <HAL_PCD_EP_Open+0xc8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68f9      	ldr	r1, [r7, #12]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 fa7a 	bl	8006f3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003a50:	7afb      	ldrb	r3, [r7, #11]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da0f      	bge.n	8003a8e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 020f 	and.w	r2, r3, #15
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	3310      	adds	r3, #16
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	3304      	adds	r3, #4
 8003a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	705a      	strb	r2, [r3, #1]
 8003a8c:	e00f      	b.n	8003aae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	f003 020f 	and.w	r2, r3, #15
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_PCD_EP_Close+0x6e>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e00e      	b.n	8003ae6 <HAL_PCD_EP_Close+0x8c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68f9      	ldr	r1, [r7, #12]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f003 fab8 	bl	800704c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	460b      	mov	r3, r1
 8003afc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003afe:	7afb      	ldrb	r3, [r7, #11]
 8003b00:	f003 020f 	and.w	r2, r3, #15
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	3304      	adds	r3, #4
 8003b16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2200      	movs	r2, #0
 8003b28:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b30:	7afb      	ldrb	r3, [r7, #11]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	799b      	ldrb	r3, [r3, #6]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d102      	bne.n	8003b4a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	799b      	ldrb	r3, [r3, #6]
 8003b52:	461a      	mov	r2, r3
 8003b54:	6979      	ldr	r1, [r7, #20]
 8003b56:	f003 fb55 	bl	8007204 <USB_EPStartXfer>

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 020f 	and.w	r2, r3, #15
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003b86:	681b      	ldr	r3, [r3, #0]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ba4:	7afb      	ldrb	r3, [r7, #11]
 8003ba6:	f003 020f 	and.w	r2, r3, #15
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	3310      	adds	r3, #16
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3304      	adds	r3, #4
 8003bba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd4:	7afb      	ldrb	r3, [r7, #11]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	799b      	ldrb	r3, [r3, #6]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d102      	bne.n	8003bee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	799b      	ldrb	r3, [r3, #6]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	6979      	ldr	r1, [r7, #20]
 8003bfa:	f003 fb03 	bl	8007204 <USB_EPStartXfer>

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	7912      	ldrb	r2, [r2, #4]
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e04f      	b.n	8003cc6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	da0f      	bge.n	8003c4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	f003 020f 	and.w	r2, r3, #15
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	3310      	adds	r3, #16
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	3304      	adds	r3, #4
 8003c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	705a      	strb	r2, [r3, #1]
 8003c4c:	e00d      	b.n	8003c6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4413      	add	r3, r2
 8003c60:	3304      	adds	r3, #4
 8003c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_PCD_EP_SetStall+0x82>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e01d      	b.n	8003cc6 <HAL_PCD_EP_SetStall+0xbe>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68f9      	ldr	r1, [r7, #12]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f003 fe93 	bl	80079c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d109      	bne.n	8003cbc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7999      	ldrb	r1, [r3, #6]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f004 f886 	bl	8007dc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	7912      	ldrb	r2, [r2, #4]
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e042      	b.n	8003d72 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	da0f      	bge.n	8003d14 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	f003 020f 	and.w	r2, r3, #15
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	3310      	adds	r3, #16
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4413      	add	r3, r2
 8003d08:	3304      	adds	r3, #4
 8003d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	705a      	strb	r2, [r3, #1]
 8003d12:	e00f      	b.n	8003d34 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	f003 020f 	and.w	r2, r3, #15
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_PCD_EP_ClrStall+0x86>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e00e      	b.n	8003d72 <HAL_PCD_EP_ClrStall+0xa4>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68f9      	ldr	r1, [r7, #12]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f003 fe9c 	bl	8007aa0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	460b      	mov	r3, r1
 8003d84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	da0c      	bge.n	8003da8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	f003 020f 	and.w	r2, r3, #15
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	3310      	adds	r3, #16
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	4413      	add	r3, r2
 8003da2:	3304      	adds	r3, #4
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	e00c      	b.n	8003dc2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	f003 020f 	and.w	r2, r3, #15
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68f9      	ldr	r1, [r7, #12]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f003 fcbb 	bl	8007744 <USB_EPStopXfer>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003dd2:	7afb      	ldrb	r3, [r7, #11]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	@ 0x28
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	3310      	adds	r3, #16
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4413      	add	r3, r2
 8003e00:	3304      	adds	r3, #4
 8003e02:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	695a      	ldr	r2, [r3, #20]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d901      	bls.n	8003e14 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e06b      	b.n	8003eec <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d902      	bls.n	8003e30 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	3303      	adds	r3, #3
 8003e34:	089b      	lsrs	r3, r3, #2
 8003e36:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e38:	e02a      	b.n	8003e90 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d902      	bls.n	8003e56 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3303      	adds	r3, #3
 8003e5a:	089b      	lsrs	r3, r3, #2
 8003e5c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	68d9      	ldr	r1, [r3, #12]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	4603      	mov	r3, r0
 8003e72:	6978      	ldr	r0, [r7, #20]
 8003e74:	f003 fd10 	bl	8007898 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	441a      	add	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	441a      	add	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d809      	bhi.n	8003eba <PCD_WriteEmptyTxFifo+0xde>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d203      	bcs.n	8003eba <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1bf      	bne.n	8003e3a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d811      	bhi.n	8003eea <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	2201      	movs	r2, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	6939      	ldr	r1, [r7, #16]
 8003ee2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3720      	adds	r7, #32
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	333c      	adds	r3, #60	@ 0x3c
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	799b      	ldrb	r3, [r3, #6]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d17b      	bne.n	8004022 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d015      	beq.n	8003f60 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	4a61      	ldr	r2, [pc, #388]	@ (80040bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	f240 80b9 	bls.w	80040b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80b3 	beq.w	80040b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f56:	461a      	mov	r2, r3
 8003f58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f5c:	6093      	str	r3, [r2, #8]
 8003f5e:	e0a7      	b.n	80040b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f76:	461a      	mov	r2, r3
 8003f78:	2320      	movs	r3, #32
 8003f7a:	6093      	str	r3, [r2, #8]
 8003f7c:	e098      	b.n	80040b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f040 8093 	bne.w	80040b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	4a4b      	ldr	r2, [pc, #300]	@ (80040bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d90f      	bls.n	8003fb2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fae:	6093      	str	r3, [r2, #8]
 8003fb0:	e07e      	b.n	80040b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	0159      	lsls	r1, r3, #5
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	440b      	add	r3, r1
 8003fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fde:	1ad2      	subs	r2, r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d114      	bne.n	8004014 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2101      	movs	r1, #1
 8004000:	f003 fee2 	bl	8007dc8 <USB_EP0_OutStart>
 8004004:	e006      	b.n	8004014 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	441a      	add	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f006 fa10 	bl	800a440 <HAL_PCD_DataOutStageCallback>
 8004020:	e046      	b.n	80040b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	4a26      	ldr	r2, [pc, #152]	@ (80040c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d124      	bne.n	8004074 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004040:	461a      	mov	r2, r3
 8004042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004046:	6093      	str	r3, [r2, #8]
 8004048:	e032      	b.n	80040b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004060:	461a      	mov	r2, r3
 8004062:	2320      	movs	r3, #32
 8004064:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	4619      	mov	r1, r3
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f006 f9e7 	bl	800a440 <HAL_PCD_DataOutStageCallback>
 8004072:	e01d      	b.n	80040b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d114      	bne.n	80040a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d108      	bne.n	80040a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800409c:	461a      	mov	r2, r3
 800409e:	2100      	movs	r1, #0
 80040a0:	f003 fe92 	bl	8007dc8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f006 f9c8 	bl	800a440 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	4f54300a 	.word	0x4f54300a
 80040c0:	4f54310a 	.word	0x4f54310a

080040c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	333c      	adds	r3, #60	@ 0x3c
 80040dc:	3304      	adds	r3, #4
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4a15      	ldr	r2, [pc, #84]	@ (800414c <PCD_EP_OutSetupPacket_int+0x88>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d90e      	bls.n	8004118 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004100:	2b00      	cmp	r3, #0
 8004102:	d009      	beq.n	8004118 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004110:	461a      	mov	r2, r3
 8004112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004116:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f006 f97f 	bl	800a41c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4a0a      	ldr	r2, [pc, #40]	@ (800414c <PCD_EP_OutSetupPacket_int+0x88>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d90c      	bls.n	8004140 <PCD_EP_OutSetupPacket_int+0x7c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	799b      	ldrb	r3, [r3, #6]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d108      	bne.n	8004140 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004138:	461a      	mov	r2, r3
 800413a:	2101      	movs	r1, #1
 800413c:	f003 fe44 	bl	8007dc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	4f54300a 	.word	0x4f54300a

08004150 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
 800415c:	4613      	mov	r3, r2
 800415e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d107      	bne.n	800417e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800416e:	883b      	ldrh	r3, [r7, #0]
 8004170:	0419      	lsls	r1, r3, #16
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	430a      	orrs	r2, r1
 800417a:	629a      	str	r2, [r3, #40]	@ 0x28
 800417c:	e028      	b.n	80041d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	4413      	add	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e00d      	b.n	80041ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	7bfb      	ldrb	r3, [r7, #15]
 8004198:	3340      	adds	r3, #64	@ 0x40
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	4413      	add	r3, r2
 80041a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	3301      	adds	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
 80041ae:	7bfa      	ldrb	r2, [r7, #15]
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d3ec      	bcc.n	8004192 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041b8:	883b      	ldrh	r3, [r7, #0]
 80041ba:	0418      	lsls	r0, r3, #16
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6819      	ldr	r1, [r3, #0]
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	4302      	orrs	r2, r0
 80041c8:	3340      	adds	r3, #64	@ 0x40
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	460b      	mov	r3, r1
 80041e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	887a      	ldrh	r2, [r7, #2]
 80041f0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800422e:	4b05      	ldr	r3, [pc, #20]	@ (8004244 <HAL_PCDEx_ActivateLPM+0x44>)
 8004230:	4313      	orrs	r3, r2
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	10000003 	.word	0x10000003

08004248 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800424c:	4b05      	ldr	r3, [pc, #20]	@ (8004264 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a04      	ldr	r2, [pc, #16]	@ (8004264 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004256:	6013      	str	r3, [r2, #0]
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40007000 	.word	0x40007000

08004268 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	4b23      	ldr	r3, [pc, #140]	@ (8004300 <HAL_PWREx_EnableOverDrive+0x98>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	4a22      	ldr	r2, [pc, #136]	@ (8004300 <HAL_PWREx_EnableOverDrive+0x98>)
 8004278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800427c:	6413      	str	r3, [r2, #64]	@ 0x40
 800427e:	4b20      	ldr	r3, [pc, #128]	@ (8004300 <HAL_PWREx_EnableOverDrive+0x98>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800428a:	4b1e      	ldr	r3, [pc, #120]	@ (8004304 <HAL_PWREx_EnableOverDrive+0x9c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1d      	ldr	r2, [pc, #116]	@ (8004304 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004294:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004296:	f7fd f961 	bl	800155c <HAL_GetTick>
 800429a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800429c:	e009      	b.n	80042b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800429e:	f7fd f95d 	bl	800155c <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042ac:	d901      	bls.n	80042b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e022      	b.n	80042f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042b2:	4b14      	ldr	r3, [pc, #80]	@ (8004304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042be:	d1ee      	bne.n	800429e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042c0:	4b10      	ldr	r3, [pc, #64]	@ (8004304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0f      	ldr	r2, [pc, #60]	@ (8004304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042cc:	f7fd f946 	bl	800155c <HAL_GetTick>
 80042d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042d2:	e009      	b.n	80042e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042d4:	f7fd f942 	bl	800155c <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042e2:	d901      	bls.n	80042e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e007      	b.n	80042f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042e8:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042f4:	d1ee      	bne.n	80042d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	40007000 	.word	0x40007000

08004308 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004310:	2300      	movs	r3, #0
 8004312:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e29b      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8087 	beq.w	800443a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800432c:	4b96      	ldr	r3, [pc, #600]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 030c 	and.w	r3, r3, #12
 8004334:	2b04      	cmp	r3, #4
 8004336:	d00c      	beq.n	8004352 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004338:	4b93      	ldr	r3, [pc, #588]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b08      	cmp	r3, #8
 8004342:	d112      	bne.n	800436a <HAL_RCC_OscConfig+0x62>
 8004344:	4b90      	ldr	r3, [pc, #576]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800434c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004350:	d10b      	bne.n	800436a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004352:	4b8d      	ldr	r3, [pc, #564]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d06c      	beq.n	8004438 <HAL_RCC_OscConfig+0x130>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d168      	bne.n	8004438 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e275      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004372:	d106      	bne.n	8004382 <HAL_RCC_OscConfig+0x7a>
 8004374:	4b84      	ldr	r3, [pc, #528]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a83      	ldr	r2, [pc, #524]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 800437a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	e02e      	b.n	80043e0 <HAL_RCC_OscConfig+0xd8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x9c>
 800438a:	4b7f      	ldr	r3, [pc, #508]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a7e      	ldr	r2, [pc, #504]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004390:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	4b7c      	ldr	r3, [pc, #496]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7b      	ldr	r2, [pc, #492]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 800439c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e01d      	b.n	80043e0 <HAL_RCC_OscConfig+0xd8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0xc0>
 80043ae:	4b76      	ldr	r3, [pc, #472]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a75      	ldr	r2, [pc, #468]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80043b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	4b73      	ldr	r3, [pc, #460]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a72      	ldr	r2, [pc, #456]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e00b      	b.n	80043e0 <HAL_RCC_OscConfig+0xd8>
 80043c8:	4b6f      	ldr	r3, [pc, #444]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6e      	ldr	r2, [pc, #440]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b6c      	ldr	r3, [pc, #432]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a6b      	ldr	r2, [pc, #428]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80043da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d013      	beq.n	8004410 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd f8b8 	bl	800155c <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fd f8b4 	bl	800155c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	@ 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e229      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	4b61      	ldr	r3, [pc, #388]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0xe8>
 800440e:	e014      	b.n	800443a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fd f8a4 	bl	800155c <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004418:	f7fd f8a0 	bl	800155c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	@ 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e215      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442a:	4b57      	ldr	r3, [pc, #348]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x110>
 8004436:	e000      	b.n	800443a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d069      	beq.n	800451a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004446:	4b50      	ldr	r3, [pc, #320]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004452:	4b4d      	ldr	r3, [pc, #308]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b08      	cmp	r3, #8
 800445c:	d11c      	bne.n	8004498 <HAL_RCC_OscConfig+0x190>
 800445e:	4b4a      	ldr	r3, [pc, #296]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d116      	bne.n	8004498 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446a:	4b47      	ldr	r3, [pc, #284]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <HAL_RCC_OscConfig+0x17a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d001      	beq.n	8004482 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e1e9      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004482:	4b41      	ldr	r3, [pc, #260]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	493d      	ldr	r1, [pc, #244]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004496:	e040      	b.n	800451a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d023      	beq.n	80044e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a0:	4b39      	ldr	r3, [pc, #228]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a38      	ldr	r2, [pc, #224]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ac:	f7fd f856 	bl	800155c <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044b4:	f7fd f852 	bl	800155c <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e1c7      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c6:	4b30      	ldr	r3, [pc, #192]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4929      	ldr	r1, [pc, #164]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]
 80044e6:	e018      	b.n	800451a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e8:	4b27      	ldr	r3, [pc, #156]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a26      	ldr	r2, [pc, #152]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fd f832 	bl	800155c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044fc:	f7fd f82e 	bl	800155c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e1a3      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450e:	4b1e      	ldr	r3, [pc, #120]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d038      	beq.n	8004598 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d019      	beq.n	8004562 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800452e:	4b16      	ldr	r3, [pc, #88]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004532:	4a15      	ldr	r2, [pc, #84]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453a:	f7fd f80f 	bl	800155c <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004542:	f7fd f80b 	bl	800155c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e180      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004554:	4b0c      	ldr	r3, [pc, #48]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x23a>
 8004560:	e01a      	b.n	8004598 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004562:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004566:	4a08      	ldr	r2, [pc, #32]	@ (8004588 <HAL_RCC_OscConfig+0x280>)
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7fc fff5 	bl	800155c <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	e00a      	b.n	800458c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004576:	f7fc fff1 	bl	800155c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d903      	bls.n	800458c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e166      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
 8004588:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800458c:	4b92      	ldr	r3, [pc, #584]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 800458e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ee      	bne.n	8004576 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80a4 	beq.w	80046ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a6:	4b8c      	ldr	r3, [pc, #560]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10d      	bne.n	80045ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b2:	4b89      	ldr	r3, [pc, #548]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	4a88      	ldr	r2, [pc, #544]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80045b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80045be:	4b86      	ldr	r3, [pc, #536]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	60bb      	str	r3, [r7, #8]
 80045c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ca:	2301      	movs	r3, #1
 80045cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ce:	4b83      	ldr	r3, [pc, #524]	@ (80047dc <HAL_RCC_OscConfig+0x4d4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d118      	bne.n	800460c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045da:	4b80      	ldr	r3, [pc, #512]	@ (80047dc <HAL_RCC_OscConfig+0x4d4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a7f      	ldr	r2, [pc, #508]	@ (80047dc <HAL_RCC_OscConfig+0x4d4>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e6:	f7fc ffb9 	bl	800155c <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ee:	f7fc ffb5 	bl	800155c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b64      	cmp	r3, #100	@ 0x64
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e12a      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004600:	4b76      	ldr	r3, [pc, #472]	@ (80047dc <HAL_RCC_OscConfig+0x4d4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x31a>
 8004614:	4b70      	ldr	r3, [pc, #448]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004618:	4a6f      	ldr	r2, [pc, #444]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004620:	e02d      	b.n	800467e <HAL_RCC_OscConfig+0x376>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x33c>
 800462a:	4b6b      	ldr	r3, [pc, #428]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	4a6a      	ldr	r2, [pc, #424]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004630:	f023 0301 	bic.w	r3, r3, #1
 8004634:	6713      	str	r3, [r2, #112]	@ 0x70
 8004636:	4b68      	ldr	r3, [pc, #416]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463a:	4a67      	ldr	r2, [pc, #412]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 800463c:	f023 0304 	bic.w	r3, r3, #4
 8004640:	6713      	str	r3, [r2, #112]	@ 0x70
 8004642:	e01c      	b.n	800467e <HAL_RCC_OscConfig+0x376>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b05      	cmp	r3, #5
 800464a:	d10c      	bne.n	8004666 <HAL_RCC_OscConfig+0x35e>
 800464c:	4b62      	ldr	r3, [pc, #392]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004650:	4a61      	ldr	r2, [pc, #388]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004652:	f043 0304 	orr.w	r3, r3, #4
 8004656:	6713      	str	r3, [r2, #112]	@ 0x70
 8004658:	4b5f      	ldr	r3, [pc, #380]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465c:	4a5e      	ldr	r2, [pc, #376]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	6713      	str	r3, [r2, #112]	@ 0x70
 8004664:	e00b      	b.n	800467e <HAL_RCC_OscConfig+0x376>
 8004666:	4b5c      	ldr	r3, [pc, #368]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	4a5b      	ldr	r2, [pc, #364]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	6713      	str	r3, [r2, #112]	@ 0x70
 8004672:	4b59      	ldr	r3, [pc, #356]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004676:	4a58      	ldr	r2, [pc, #352]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004678:	f023 0304 	bic.w	r3, r3, #4
 800467c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d015      	beq.n	80046b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fc ff69 	bl	800155c <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fc ff65 	bl	800155c <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e0d8      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a4:	4b4c      	ldr	r3, [pc, #304]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0ee      	beq.n	800468e <HAL_RCC_OscConfig+0x386>
 80046b0:	e014      	b.n	80046dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b2:	f7fc ff53 	bl	800155c <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b8:	e00a      	b.n	80046d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ba:	f7fc ff4f 	bl	800155c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e0c2      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d0:	4b41      	ldr	r3, [pc, #260]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1ee      	bne.n	80046ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d105      	bne.n	80046ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e2:	4b3d      	ldr	r3, [pc, #244]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e6:	4a3c      	ldr	r2, [pc, #240]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80046e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 80ae 	beq.w	8004854 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f8:	4b37      	ldr	r3, [pc, #220]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f003 030c 	and.w	r3, r3, #12
 8004700:	2b08      	cmp	r3, #8
 8004702:	d06d      	beq.n	80047e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d14b      	bne.n	80047a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470c:	4b32      	ldr	r3, [pc, #200]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a31      	ldr	r2, [pc, #196]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004712:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fc ff20 	bl	800155c <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004720:	f7fc ff1c 	bl	800155c <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e091      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004732:	4b29      	ldr	r3, [pc, #164]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	019b      	lsls	r3, r3, #6
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	3b01      	subs	r3, #1
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	061b      	lsls	r3, r3, #24
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004768:	071b      	lsls	r3, r3, #28
 800476a:	491b      	ldr	r1, [pc, #108]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 800476c:	4313      	orrs	r3, r2
 800476e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004770:	4b19      	ldr	r3, [pc, #100]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a18      	ldr	r2, [pc, #96]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800477a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7fc feee 	bl	800155c <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004784:	f7fc feea 	bl	800155c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e05f      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004796:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0x47c>
 80047a2:	e057      	b.n	8004854 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a4:	4b0c      	ldr	r3, [pc, #48]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a0b      	ldr	r2, [pc, #44]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80047aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fc fed4 	bl	800155c <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fc fed0 	bl	800155c <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e045      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ca:	4b03      	ldr	r3, [pc, #12]	@ (80047d8 <HAL_RCC_OscConfig+0x4d0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x4b0>
 80047d6:	e03d      	b.n	8004854 <HAL_RCC_OscConfig+0x54c>
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004860 <HAL_RCC_OscConfig+0x558>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d030      	beq.n	8004850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d129      	bne.n	8004850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d122      	bne.n	8004850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004816:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004818:	4293      	cmp	r3, r2
 800481a:	d119      	bne.n	8004850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	3b01      	subs	r3, #1
 800482a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d10f      	bne.n	8004850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d107      	bne.n	8004850 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40023800 	.word	0x40023800

08004864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e0d0      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800487c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d910      	bls.n	80048ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800488a:	4b67      	ldr	r3, [pc, #412]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 020f 	bic.w	r2, r3, #15
 8004892:	4965      	ldr	r1, [pc, #404]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b63      	ldr	r3, [pc, #396]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0b8      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d020      	beq.n	80048fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c4:	4b59      	ldr	r3, [pc, #356]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a58      	ldr	r2, [pc, #352]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 80048ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048dc:	4b53      	ldr	r3, [pc, #332]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	4a52      	ldr	r2, [pc, #328]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 80048e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e8:	4b50      	ldr	r3, [pc, #320]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	494d      	ldr	r1, [pc, #308]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d040      	beq.n	8004988 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	4b47      	ldr	r3, [pc, #284]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d115      	bne.n	8004946 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e07f      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004926:	4b41      	ldr	r3, [pc, #260]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e073      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004936:	4b3d      	ldr	r3, [pc, #244]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e06b      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004946:	4b39      	ldr	r3, [pc, #228]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f023 0203 	bic.w	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	4936      	ldr	r1, [pc, #216]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 8004954:	4313      	orrs	r3, r2
 8004956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004958:	f7fc fe00 	bl	800155c <HAL_GetTick>
 800495c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	e00a      	b.n	8004976 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004960:	f7fc fdfc 	bl	800155c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e053      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004976:	4b2d      	ldr	r3, [pc, #180]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 020c 	and.w	r2, r3, #12
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	429a      	cmp	r2, r3
 8004986:	d1eb      	bne.n	8004960 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004988:	4b27      	ldr	r3, [pc, #156]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 030f 	and.w	r3, r3, #15
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d210      	bcs.n	80049b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004996:	4b24      	ldr	r3, [pc, #144]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 020f 	bic.w	r2, r3, #15
 800499e:	4922      	ldr	r1, [pc, #136]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a6:	4b20      	ldr	r3, [pc, #128]	@ (8004a28 <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e032      	b.n	8004a1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d008      	beq.n	80049d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c4:	4b19      	ldr	r3, [pc, #100]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4916      	ldr	r1, [pc, #88]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d009      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049e2:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	490e      	ldr	r1, [pc, #56]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049f6:	f000 f821 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80049fa:	4602      	mov	r2, r0
 80049fc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <HAL_RCC_ClockConfig+0x1c8>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	091b      	lsrs	r3, r3, #4
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	490a      	ldr	r1, [pc, #40]	@ (8004a30 <HAL_RCC_ClockConfig+0x1cc>)
 8004a08:	5ccb      	ldrb	r3, [r1, r3]
 8004a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a0e:	4a09      	ldr	r2, [pc, #36]	@ (8004a34 <HAL_RCC_ClockConfig+0x1d0>)
 8004a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a12:	4b09      	ldr	r3, [pc, #36]	@ (8004a38 <HAL_RCC_ClockConfig+0x1d4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fc fd5c 	bl	80014d4 <HAL_InitTick>

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40023c00 	.word	0x40023c00
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	0800ad0c 	.word	0x0800ad0c
 8004a34:	20000004 	.word	0x20000004
 8004a38:	20000008 	.word	0x20000008

08004a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a40:	b094      	sub	sp, #80	@ 0x50
 8004a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a48:	2300      	movs	r3, #0
 8004a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a54:	4b79      	ldr	r3, [pc, #484]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 030c 	and.w	r3, r3, #12
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d00d      	beq.n	8004a7c <HAL_RCC_GetSysClockFreq+0x40>
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	f200 80e1 	bhi.w	8004c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_RCC_GetSysClockFreq+0x34>
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	d003      	beq.n	8004a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a6e:	e0db      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a70:	4b73      	ldr	r3, [pc, #460]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a74:	e0db      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a76:	4b73      	ldr	r3, [pc, #460]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a7a:	e0d8      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a86:	4b6d      	ldr	r3, [pc, #436]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d063      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a92:	4b6a      	ldr	r3, [pc, #424]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	2200      	movs	r2, #0
 8004a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004aae:	4622      	mov	r2, r4
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	0159      	lsls	r1, r3, #5
 8004abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac0:	0150      	lsls	r0, r2, #5
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	1a51      	subs	r1, r2, r1
 8004aca:	6139      	str	r1, [r7, #16]
 8004acc:	4629      	mov	r1, r5
 8004ace:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	018b      	lsls	r3, r1, #6
 8004ae4:	4651      	mov	r1, sl
 8004ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aea:	4651      	mov	r1, sl
 8004aec:	018a      	lsls	r2, r1, #6
 8004aee:	4651      	mov	r1, sl
 8004af0:	ebb2 0801 	subs.w	r8, r2, r1
 8004af4:	4659      	mov	r1, fp
 8004af6:	eb63 0901 	sbc.w	r9, r3, r1
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b0e:	4690      	mov	r8, r2
 8004b10:	4699      	mov	r9, r3
 8004b12:	4623      	mov	r3, r4
 8004b14:	eb18 0303 	adds.w	r3, r8, r3
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	eb49 0303 	adc.w	r3, r9, r3
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b2e:	4629      	mov	r1, r5
 8004b30:	024b      	lsls	r3, r1, #9
 8004b32:	4621      	mov	r1, r4
 8004b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b38:	4621      	mov	r1, r4
 8004b3a:	024a      	lsls	r2, r1, #9
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b42:	2200      	movs	r2, #0
 8004b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b4c:	f7fb fb74 	bl	8000238 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4613      	mov	r3, r2
 8004b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b58:	e058      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b5a:	4b38      	ldr	r3, [pc, #224]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	099b      	lsrs	r3, r3, #6
 8004b60:	2200      	movs	r2, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	4611      	mov	r1, r2
 8004b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b6a:	623b      	str	r3, [r7, #32]
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b74:	4642      	mov	r2, r8
 8004b76:	464b      	mov	r3, r9
 8004b78:	f04f 0000 	mov.w	r0, #0
 8004b7c:	f04f 0100 	mov.w	r1, #0
 8004b80:	0159      	lsls	r1, r3, #5
 8004b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b86:	0150      	lsls	r0, r2, #5
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4641      	mov	r1, r8
 8004b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b92:	4649      	mov	r1, r9
 8004b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bac:	ebb2 040a 	subs.w	r4, r2, sl
 8004bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	00eb      	lsls	r3, r5, #3
 8004bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bc2:	00e2      	lsls	r2, r4, #3
 8004bc4:	4614      	mov	r4, r2
 8004bc6:	461d      	mov	r5, r3
 8004bc8:	4643      	mov	r3, r8
 8004bca:	18e3      	adds	r3, r4, r3
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	464b      	mov	r3, r9
 8004bd0:	eb45 0303 	adc.w	r3, r5, r3
 8004bd4:	607b      	str	r3, [r7, #4]
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004be2:	4629      	mov	r1, r5
 8004be4:	028b      	lsls	r3, r1, #10
 8004be6:	4621      	mov	r1, r4
 8004be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bec:	4621      	mov	r1, r4
 8004bee:	028a      	lsls	r2, r1, #10
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	61fa      	str	r2, [r7, #28]
 8004bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c00:	f7fb fb1a 	bl	8000238 <__aeabi_uldivmod>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4613      	mov	r3, r2
 8004c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	3301      	adds	r3, #1
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c26:	e002      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c28:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3750      	adds	r7, #80	@ 0x50
 8004c34:	46bd      	mov	sp, r7
 8004c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	007a1200 	.word	0x007a1200

08004c48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	@ (8004c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000004 	.word	0x20000004

08004c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c64:	f7ff fff0 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4b05      	ldr	r3, [pc, #20]	@ (8004c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	0a9b      	lsrs	r3, r3, #10
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	4903      	ldr	r1, [pc, #12]	@ (8004c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c76:	5ccb      	ldrb	r3, [r1, r3]
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40023800 	.word	0x40023800
 8004c84:	0800ad1c 	.word	0x0800ad1c

08004c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c8c:	f7ff ffdc 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b05      	ldr	r3, [pc, #20]	@ (8004ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	0b5b      	lsrs	r3, r3, #13
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	4903      	ldr	r1, [pc, #12]	@ (8004cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	0800ad1c 	.word	0x0800ad1c

08004cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d012      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cd8:	4b69      	ldr	r3, [pc, #420]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	4a68      	ldr	r2, [pc, #416]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cde:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004ce2:	6093      	str	r3, [r2, #8]
 8004ce4:	4b66      	ldr	r3, [pc, #408]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cec:	4964      	ldr	r1, [pc, #400]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d017      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d0a:	4b5d      	ldr	r3, [pc, #372]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d10:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d18:	4959      	ldr	r1, [pc, #356]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d28:	d101      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d36:	2301      	movs	r3, #1
 8004d38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d017      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d46:	4b4e      	ldr	r3, [pc, #312]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d4c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	494a      	ldr	r1, [pc, #296]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d64:	d101      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d66:	2301      	movs	r3, #1
 8004d68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d72:	2301      	movs	r3, #1
 8004d74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d82:	2301      	movs	r3, #1
 8004d84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f000 808b 	beq.w	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d94:	4b3a      	ldr	r3, [pc, #232]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d98:	4a39      	ldr	r2, [pc, #228]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004da0:	4b37      	ldr	r3, [pc, #220]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004dac:	4b35      	ldr	r3, [pc, #212]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a34      	ldr	r2, [pc, #208]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db8:	f7fc fbd0 	bl	800155c <HAL_GetTick>
 8004dbc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dc0:	f7fc fbcc 	bl	800155c <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b64      	cmp	r3, #100	@ 0x64
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e38f      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dde:	4b28      	ldr	r3, [pc, #160]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d035      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d02e      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dfc:	4b20      	ldr	r3, [pc, #128]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e06:	4b1e      	ldr	r3, [pc, #120]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e10:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e12:	4b1b      	ldr	r3, [pc, #108]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e16:	4a1a      	ldr	r2, [pc, #104]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e1c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e1e:	4a18      	ldr	r2, [pc, #96]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e24:	4b16      	ldr	r3, [pc, #88]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d114      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fc fb94 	bl	800155c <HAL_GetTick>
 8004e34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e36:	e00a      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e38:	f7fc fb90 	bl	800155c <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e351      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0ee      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e66:	d111      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e68:	4b05      	ldr	r3, [pc, #20]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e74:	4b04      	ldr	r3, [pc, #16]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e76:	400b      	ands	r3, r1
 8004e78:	4901      	ldr	r1, [pc, #4]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	608b      	str	r3, [r1, #8]
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e80:	40023800 	.word	0x40023800
 8004e84:	40007000 	.word	0x40007000
 8004e88:	0ffffcff 	.word	0x0ffffcff
 8004e8c:	4bac      	ldr	r3, [pc, #688]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	4aab      	ldr	r2, [pc, #684]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e92:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e96:	6093      	str	r3, [r2, #8]
 8004e98:	4ba9      	ldr	r3, [pc, #676]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea4:	49a6      	ldr	r1, [pc, #664]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0310 	and.w	r3, r3, #16
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d010      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004eb6:	4ba2      	ldr	r3, [pc, #648]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ebc:	4aa0      	ldr	r2, [pc, #640]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ebe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ec2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004ec6:	4b9e      	ldr	r3, [pc, #632]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed0:	499b      	ldr	r1, [pc, #620]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ee4:	4b96      	ldr	r3, [pc, #600]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ef2:	4993      	ldr	r1, [pc, #588]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f06:	4b8e      	ldr	r3, [pc, #568]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f14:	498a      	ldr	r1, [pc, #552]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f28:	4b85      	ldr	r3, [pc, #532]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f36:	4982      	ldr	r1, [pc, #520]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f4a:	4b7d      	ldr	r3, [pc, #500]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f58:	4979      	ldr	r1, [pc, #484]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00a      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f6c:	4b74      	ldr	r3, [pc, #464]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f72:	f023 0203 	bic.w	r2, r3, #3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7a:	4971      	ldr	r1, [pc, #452]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f8e:	4b6c      	ldr	r3, [pc, #432]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f94:	f023 020c 	bic.w	r2, r3, #12
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f9c:	4968      	ldr	r1, [pc, #416]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fb0:	4b63      	ldr	r3, [pc, #396]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fbe:	4960      	ldr	r1, [pc, #384]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe0:	4957      	ldr	r1, [pc, #348]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ff4:	4b52      	ldr	r3, [pc, #328]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005002:	494f      	ldr	r1, [pc, #316]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005016:	4b4a      	ldr	r3, [pc, #296]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005024:	4946      	ldr	r1, [pc, #280]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005038:	4b41      	ldr	r3, [pc, #260]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005046:	493e      	ldr	r1, [pc, #248]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800505a:	4b39      	ldr	r3, [pc, #228]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005060:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005068:	4935      	ldr	r1, [pc, #212]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800507c:	4b30      	ldr	r3, [pc, #192]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005082:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800508a:	492d      	ldr	r1, [pc, #180]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d011      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800509e:	4b28      	ldr	r3, [pc, #160]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050ac:	4924      	ldr	r1, [pc, #144]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050bc:	d101      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80050be:	2301      	movs	r3, #1
 80050c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80050ce:	2301      	movs	r3, #1
 80050d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050de:	4b18      	ldr	r3, [pc, #96]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ec:	4914      	ldr	r1, [pc, #80]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00b      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005100:	4b0f      	ldr	r3, [pc, #60]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005106:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005110:	490b      	ldr	r1, [pc, #44]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00f      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005124:	4b06      	ldr	r3, [pc, #24]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005134:	4902      	ldr	r1, [pc, #8]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800513c:	e002      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800513e:	bf00      	nop
 8005140:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00b      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005150:	4b8a      	ldr	r3, [pc, #552]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005156:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005160:	4986      	ldr	r1, [pc, #536]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00b      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005174:	4b81      	ldr	r3, [pc, #516]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005176:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800517a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005184:	497d      	ldr	r1, [pc, #500]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d006      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 80d6 	beq.w	800534c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051a0:	4b76      	ldr	r3, [pc, #472]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a75      	ldr	r2, [pc, #468]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ac:	f7fc f9d6 	bl	800155c <HAL_GetTick>
 80051b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051b4:	f7fc f9d2 	bl	800155c <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b64      	cmp	r3, #100	@ 0x64
 80051c0:	d901      	bls.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e195      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051c6:	4b6d      	ldr	r3, [pc, #436]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d021      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d11d      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051e6:	4b65      	ldr	r3, [pc, #404]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051f4:	4b61      	ldr	r3, [pc, #388]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051fa:	0e1b      	lsrs	r3, r3, #24
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	019a      	lsls	r2, r3, #6
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	431a      	orrs	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	061b      	lsls	r3, r3, #24
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	071b      	lsls	r3, r3, #28
 800521a:	4958      	ldr	r1, [pc, #352]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d004      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005232:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005236:	d00a      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005240:	2b00      	cmp	r3, #0
 8005242:	d02e      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005248:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800524c:	d129      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800524e:	4b4b      	ldr	r3, [pc, #300]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005254:	0c1b      	lsrs	r3, r3, #16
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800525c:	4b47      	ldr	r3, [pc, #284]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800525e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005262:	0f1b      	lsrs	r3, r3, #28
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	019a      	lsls	r2, r3, #6
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	431a      	orrs	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	061b      	lsls	r3, r3, #24
 800527c:	431a      	orrs	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	071b      	lsls	r3, r3, #28
 8005282:	493e      	ldr	r1, [pc, #248]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800528a:	4b3c      	ldr	r3, [pc, #240]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800528c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005290:	f023 021f 	bic.w	r2, r3, #31
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	3b01      	subs	r3, #1
 800529a:	4938      	ldr	r1, [pc, #224]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01d      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052ae:	4b33      	ldr	r3, [pc, #204]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052b4:	0e1b      	lsrs	r3, r3, #24
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052bc:	4b2f      	ldr	r3, [pc, #188]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052c2:	0f1b      	lsrs	r3, r3, #28
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	019a      	lsls	r2, r3, #6
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	431a      	orrs	r2, r3
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	061b      	lsls	r3, r3, #24
 80052dc:	431a      	orrs	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	071b      	lsls	r3, r3, #28
 80052e2:	4926      	ldr	r1, [pc, #152]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d011      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	019a      	lsls	r2, r3, #6
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	071b      	lsls	r3, r3, #28
 8005312:	491a      	ldr	r1, [pc, #104]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800531a:	4b18      	ldr	r3, [pc, #96]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a17      	ldr	r2, [pc, #92]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005320:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005326:	f7fc f919 	bl	800155c <HAL_GetTick>
 800532a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800532c:	e008      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800532e:	f7fc f915 	bl	800155c <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b64      	cmp	r3, #100	@ 0x64
 800533a:	d901      	bls.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e0d8      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005340:	4b0e      	ldr	r3, [pc, #56]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b01      	cmp	r3, #1
 8005350:	f040 80ce 	bne.w	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005354:	4b09      	ldr	r3, [pc, #36]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a08      	ldr	r2, [pc, #32]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800535a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800535e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005360:	f7fc f8fc 	bl	800155c <HAL_GetTick>
 8005364:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005366:	e00b      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005368:	f7fc f8f8 	bl	800155c <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b64      	cmp	r3, #100	@ 0x64
 8005374:	d904      	bls.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e0bb      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005380:	4b5e      	ldr	r3, [pc, #376]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005388:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800538c:	d0ec      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d009      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d02e      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d12a      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053b6:	4b51      	ldr	r3, [pc, #324]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053bc:	0c1b      	lsrs	r3, r3, #16
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053c4:	4b4d      	ldr	r3, [pc, #308]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ca:	0f1b      	lsrs	r3, r3, #28
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	019a      	lsls	r2, r3, #6
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	041b      	lsls	r3, r3, #16
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	061b      	lsls	r3, r3, #24
 80053e4:	431a      	orrs	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	071b      	lsls	r3, r3, #28
 80053ea:	4944      	ldr	r1, [pc, #272]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053f2:	4b42      	ldr	r3, [pc, #264]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053f8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005400:	3b01      	subs	r3, #1
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	493d      	ldr	r1, [pc, #244]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d022      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800541c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005420:	d11d      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005422:	4b36      	ldr	r3, [pc, #216]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005428:	0e1b      	lsrs	r3, r3, #24
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005430:	4b32      	ldr	r3, [pc, #200]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005436:	0f1b      	lsrs	r3, r3, #28
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	019a      	lsls	r2, r3, #6
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	041b      	lsls	r3, r3, #16
 800544a:	431a      	orrs	r2, r3
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	061b      	lsls	r3, r3, #24
 8005450:	431a      	orrs	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	071b      	lsls	r3, r3, #28
 8005456:	4929      	ldr	r1, [pc, #164]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d028      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800546a:	4b24      	ldr	r3, [pc, #144]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005470:	0e1b      	lsrs	r3, r3, #24
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005478:	4b20      	ldr	r3, [pc, #128]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547e:	0c1b      	lsrs	r3, r3, #16
 8005480:	f003 0303 	and.w	r3, r3, #3
 8005484:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	019a      	lsls	r2, r3, #6
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	431a      	orrs	r2, r3
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	061b      	lsls	r3, r3, #24
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	071b      	lsls	r3, r3, #28
 800549e:	4917      	ldr	r1, [pc, #92]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80054a6:	4b15      	ldr	r3, [pc, #84]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b4:	4911      	ldr	r1, [pc, #68]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054bc:	4b0f      	ldr	r3, [pc, #60]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a0e      	ldr	r2, [pc, #56]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c8:	f7fc f848 	bl	800155c <HAL_GetTick>
 80054cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054d0:	f7fc f844 	bl	800155c <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b64      	cmp	r3, #100	@ 0x64
 80054dc:	d901      	bls.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e007      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054e2:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054ee:	d1ef      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3720      	adds	r7, #32
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40023800 	.word	0x40023800

08005500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e049      	b.n	80055a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fb fd8a 	bl	8001040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3304      	adds	r3, #4
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f000 fad6 	bl	8005af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d001      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e054      	b.n	8005672 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a26      	ldr	r2, [pc, #152]	@ (8005680 <HAL_TIM_Base_Start_IT+0xd0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d022      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f2:	d01d      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a22      	ldr	r2, [pc, #136]	@ (8005684 <HAL_TIM_Base_Start_IT+0xd4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d018      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a21      	ldr	r2, [pc, #132]	@ (8005688 <HAL_TIM_Base_Start_IT+0xd8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1f      	ldr	r2, [pc, #124]	@ (800568c <HAL_TIM_Base_Start_IT+0xdc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1e      	ldr	r2, [pc, #120]	@ (8005690 <HAL_TIM_Base_Start_IT+0xe0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a1c      	ldr	r2, [pc, #112]	@ (8005694 <HAL_TIM_Base_Start_IT+0xe4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1b      	ldr	r2, [pc, #108]	@ (8005698 <HAL_TIM_Base_Start_IT+0xe8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d115      	bne.n	800565c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	4b19      	ldr	r3, [pc, #100]	@ (800569c <HAL_TIM_Base_Start_IT+0xec>)
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b06      	cmp	r3, #6
 8005640:	d015      	beq.n	800566e <HAL_TIM_Base_Start_IT+0xbe>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005648:	d011      	beq.n	800566e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0201 	orr.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565a:	e008      	b.n	800566e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e000      	b.n	8005670 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40010000 	.word	0x40010000
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40000c00 	.word	0x40000c00
 8005690:	40010400 	.word	0x40010400
 8005694:	40014000 	.word	0x40014000
 8005698:	40001800 	.word	0x40001800
 800569c:	00010007 	.word	0x00010007

080056a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0201 	bic.w	r2, r2, #1
 80056b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10f      	bne.n	80056e8 <HAL_TIM_Base_Stop_IT+0x48>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6a1a      	ldr	r2, [r3, #32]
 80056ce:	f240 4344 	movw	r3, #1092	@ 0x444
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d107      	bne.n	80056e8 <HAL_TIM_Base_Stop_IT+0x48>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0201 	bic.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d020      	beq.n	8005762 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01b      	beq.n	8005762 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f06f 0202 	mvn.w	r2, #2
 8005732:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f9b3 	bl	8005ab4 <HAL_TIM_IC_CaptureCallback>
 800574e:	e005      	b.n	800575c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f9a5 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f9b6 	bl	8005ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d020      	beq.n	80057ae <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01b      	beq.n	80057ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f06f 0204 	mvn.w	r2, #4
 800577e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f98d 	bl	8005ab4 <HAL_TIM_IC_CaptureCallback>
 800579a:	e005      	b.n	80057a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f97f 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f990 	bl	8005ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d020      	beq.n	80057fa <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01b      	beq.n	80057fa <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0208 	mvn.w	r2, #8
 80057ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2204      	movs	r2, #4
 80057d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	f003 0303 	and.w	r3, r3, #3
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f967 	bl	8005ab4 <HAL_TIM_IC_CaptureCallback>
 80057e6:	e005      	b.n	80057f4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f959 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f96a 	bl	8005ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b00      	cmp	r3, #0
 8005802:	d020      	beq.n	8005846 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01b      	beq.n	8005846 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f06f 0210 	mvn.w	r2, #16
 8005816:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2208      	movs	r2, #8
 800581c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f941 	bl	8005ab4 <HAL_TIM_IC_CaptureCallback>
 8005832:	e005      	b.n	8005840 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f933 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f944 	bl	8005ac8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00c      	beq.n	800586a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f06f 0201 	mvn.w	r2, #1
 8005862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7fb fce3 	bl	8001230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00c      	beq.n	8005898 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005884:	2b00      	cmp	r3, #0
 8005886:	d007      	beq.n	8005898 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fb0a 	bl	8005eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00c      	beq.n	80058bc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80058b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fb02 	bl	8005ec0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00c      	beq.n	80058e0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d007      	beq.n	80058e0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f8fe 	bl	8005adc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00c      	beq.n	8005904 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d007      	beq.n	8005904 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f06f 0220 	mvn.w	r2, #32
 80058fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 faca 	bl	8005e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_TIM_ConfigClockSource+0x1c>
 8005924:	2302      	movs	r3, #2
 8005926:	e0b4      	b.n	8005a92 <HAL_TIM_ConfigClockSource+0x186>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	4b56      	ldr	r3, [pc, #344]	@ (8005a9c <HAL_TIM_ConfigClockSource+0x190>)
 8005944:	4013      	ands	r3, r2
 8005946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800594e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005960:	d03e      	beq.n	80059e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005966:	f200 8087 	bhi.w	8005a78 <HAL_TIM_ConfigClockSource+0x16c>
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800596e:	f000 8086 	beq.w	8005a7e <HAL_TIM_ConfigClockSource+0x172>
 8005972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005976:	d87f      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x16c>
 8005978:	2b70      	cmp	r3, #112	@ 0x70
 800597a:	d01a      	beq.n	80059b2 <HAL_TIM_ConfigClockSource+0xa6>
 800597c:	2b70      	cmp	r3, #112	@ 0x70
 800597e:	d87b      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x16c>
 8005980:	2b60      	cmp	r3, #96	@ 0x60
 8005982:	d050      	beq.n	8005a26 <HAL_TIM_ConfigClockSource+0x11a>
 8005984:	2b60      	cmp	r3, #96	@ 0x60
 8005986:	d877      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x16c>
 8005988:	2b50      	cmp	r3, #80	@ 0x50
 800598a:	d03c      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0xfa>
 800598c:	2b50      	cmp	r3, #80	@ 0x50
 800598e:	d873      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x16c>
 8005990:	2b40      	cmp	r3, #64	@ 0x40
 8005992:	d058      	beq.n	8005a46 <HAL_TIM_ConfigClockSource+0x13a>
 8005994:	2b40      	cmp	r3, #64	@ 0x40
 8005996:	d86f      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x16c>
 8005998:	2b30      	cmp	r3, #48	@ 0x30
 800599a:	d064      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0x15a>
 800599c:	2b30      	cmp	r3, #48	@ 0x30
 800599e:	d86b      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x16c>
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d060      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0x15a>
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d867      	bhi.n	8005a78 <HAL_TIM_ConfigClockSource+0x16c>
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d05c      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0x15a>
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d05a      	beq.n	8005a66 <HAL_TIM_ConfigClockSource+0x15a>
 80059b0:	e062      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059c2:	f000 f9bb 	bl	8005d3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	609a      	str	r2, [r3, #8]
      break;
 80059de:	e04f      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059f0:	f000 f9a4 	bl	8005d3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a02:	609a      	str	r2, [r3, #8]
      break;
 8005a04:	e03c      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a12:	461a      	mov	r2, r3
 8005a14:	f000 f918 	bl	8005c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2150      	movs	r1, #80	@ 0x50
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f971 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005a24:	e02c      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a32:	461a      	mov	r2, r3
 8005a34:	f000 f937 	bl	8005ca6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2160      	movs	r1, #96	@ 0x60
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 f961 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005a44:	e01c      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a52:	461a      	mov	r2, r3
 8005a54:	f000 f8f8 	bl	8005c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2140      	movs	r1, #64	@ 0x40
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 f951 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005a64:	e00c      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f000 f948 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005a76:	e003      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a7c:	e000      	b.n	8005a80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	fffeff88 	.word	0xfffeff88

08005aa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a46      	ldr	r2, [pc, #280]	@ (8005c1c <TIM_Base_SetConfig+0x12c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d013      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b0e:	d00f      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a43      	ldr	r2, [pc, #268]	@ (8005c20 <TIM_Base_SetConfig+0x130>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00b      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a42      	ldr	r2, [pc, #264]	@ (8005c24 <TIM_Base_SetConfig+0x134>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d007      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a41      	ldr	r2, [pc, #260]	@ (8005c28 <TIM_Base_SetConfig+0x138>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a40      	ldr	r2, [pc, #256]	@ (8005c2c <TIM_Base_SetConfig+0x13c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d108      	bne.n	8005b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a35      	ldr	r2, [pc, #212]	@ (8005c1c <TIM_Base_SetConfig+0x12c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d02b      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b50:	d027      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a32      	ldr	r2, [pc, #200]	@ (8005c20 <TIM_Base_SetConfig+0x130>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d023      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a31      	ldr	r2, [pc, #196]	@ (8005c24 <TIM_Base_SetConfig+0x134>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01f      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a30      	ldr	r2, [pc, #192]	@ (8005c28 <TIM_Base_SetConfig+0x138>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01b      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2f      	ldr	r2, [pc, #188]	@ (8005c2c <TIM_Base_SetConfig+0x13c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d017      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2e      	ldr	r2, [pc, #184]	@ (8005c30 <TIM_Base_SetConfig+0x140>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c34 <TIM_Base_SetConfig+0x144>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d00f      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a2c      	ldr	r2, [pc, #176]	@ (8005c38 <TIM_Base_SetConfig+0x148>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00b      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005c3c <TIM_Base_SetConfig+0x14c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d007      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2a      	ldr	r2, [pc, #168]	@ (8005c40 <TIM_Base_SetConfig+0x150>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a29      	ldr	r2, [pc, #164]	@ (8005c44 <TIM_Base_SetConfig+0x154>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d108      	bne.n	8005bb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a10      	ldr	r2, [pc, #64]	@ (8005c1c <TIM_Base_SetConfig+0x12c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_Base_SetConfig+0xf8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a12      	ldr	r2, [pc, #72]	@ (8005c2c <TIM_Base_SetConfig+0x13c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d103      	bne.n	8005bf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d105      	bne.n	8005c0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f023 0201 	bic.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	611a      	str	r2, [r3, #16]
  }
}
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40010000 	.word	0x40010000
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40000c00 	.word	0x40000c00
 8005c2c:	40010400 	.word	0x40010400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40014400 	.word	0x40014400
 8005c38:	40014800 	.word	0x40014800
 8005c3c:	40001800 	.word	0x40001800
 8005c40:	40001c00 	.word	0x40001c00
 8005c44:	40002000 	.word	0x40002000

08005c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0201 	bic.w	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f023 030a 	bic.w	r3, r3, #10
 8005c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b087      	sub	sp, #28
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f023 0210 	bic.w	r2, r3, #16
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ce2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f043 0307 	orr.w	r3, r3, #7
 8005d28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	609a      	str	r2, [r3, #8]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	021a      	lsls	r2, r3, #8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e06d      	b.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a30      	ldr	r2, [pc, #192]	@ (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d108      	bne.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005dce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a20      	ldr	r2, [pc, #128]	@ (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d022      	beq.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e06:	d01d      	beq.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d018      	beq.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1c      	ldr	r2, [pc, #112]	@ (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d013      	beq.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a1a      	ldr	r2, [pc, #104]	@ (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00e      	beq.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a15      	ldr	r2, [pc, #84]	@ (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d009      	beq.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a16      	ldr	r2, [pc, #88]	@ (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a15      	ldr	r2, [pc, #84]	@ (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d10c      	bne.n	8005e5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40010400 	.word	0x40010400
 8005e84:	40000400 	.word	0x40000400
 8005e88:	40000800 	.word	0x40000800
 8005e8c:	40000c00 	.word	0x40000c00
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40001800 	.word	0x40001800

08005e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e040      	b.n	8005f68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fb f8e2 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2224      	movs	r2, #36	@ 0x24
 8005f00:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0201 	bic.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fa8c 	bl	8006438 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f825 	bl	8005f70 <UART_SetConfig>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e01b      	b.n	8005f68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fb0b 	bl	800657c <UART_CheckIdleState>
 8005f66:	4603      	mov	r3, r0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	431a      	orrs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4ba6      	ldr	r3, [pc, #664]	@ (8006234 <UART_SetConfig+0x2c4>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	6979      	ldr	r1, [r7, #20]
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a94      	ldr	r2, [pc, #592]	@ (8006238 <UART_SetConfig+0x2c8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d120      	bne.n	800602e <UART_SetConfig+0xbe>
 8005fec:	4b93      	ldr	r3, [pc, #588]	@ (800623c <UART_SetConfig+0x2cc>)
 8005fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d816      	bhi.n	8006028 <UART_SetConfig+0xb8>
 8005ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8006000 <UART_SetConfig+0x90>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006011 	.word	0x08006011
 8006004:	0800601d 	.word	0x0800601d
 8006008:	08006017 	.word	0x08006017
 800600c:	08006023 	.word	0x08006023
 8006010:	2301      	movs	r3, #1
 8006012:	77fb      	strb	r3, [r7, #31]
 8006014:	e150      	b.n	80062b8 <UART_SetConfig+0x348>
 8006016:	2302      	movs	r3, #2
 8006018:	77fb      	strb	r3, [r7, #31]
 800601a:	e14d      	b.n	80062b8 <UART_SetConfig+0x348>
 800601c:	2304      	movs	r3, #4
 800601e:	77fb      	strb	r3, [r7, #31]
 8006020:	e14a      	b.n	80062b8 <UART_SetConfig+0x348>
 8006022:	2308      	movs	r3, #8
 8006024:	77fb      	strb	r3, [r7, #31]
 8006026:	e147      	b.n	80062b8 <UART_SetConfig+0x348>
 8006028:	2310      	movs	r3, #16
 800602a:	77fb      	strb	r3, [r7, #31]
 800602c:	e144      	b.n	80062b8 <UART_SetConfig+0x348>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a83      	ldr	r2, [pc, #524]	@ (8006240 <UART_SetConfig+0x2d0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d132      	bne.n	800609e <UART_SetConfig+0x12e>
 8006038:	4b80      	ldr	r3, [pc, #512]	@ (800623c <UART_SetConfig+0x2cc>)
 800603a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603e:	f003 030c 	and.w	r3, r3, #12
 8006042:	2b0c      	cmp	r3, #12
 8006044:	d828      	bhi.n	8006098 <UART_SetConfig+0x128>
 8006046:	a201      	add	r2, pc, #4	@ (adr r2, 800604c <UART_SetConfig+0xdc>)
 8006048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604c:	08006081 	.word	0x08006081
 8006050:	08006099 	.word	0x08006099
 8006054:	08006099 	.word	0x08006099
 8006058:	08006099 	.word	0x08006099
 800605c:	0800608d 	.word	0x0800608d
 8006060:	08006099 	.word	0x08006099
 8006064:	08006099 	.word	0x08006099
 8006068:	08006099 	.word	0x08006099
 800606c:	08006087 	.word	0x08006087
 8006070:	08006099 	.word	0x08006099
 8006074:	08006099 	.word	0x08006099
 8006078:	08006099 	.word	0x08006099
 800607c:	08006093 	.word	0x08006093
 8006080:	2300      	movs	r3, #0
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e118      	b.n	80062b8 <UART_SetConfig+0x348>
 8006086:	2302      	movs	r3, #2
 8006088:	77fb      	strb	r3, [r7, #31]
 800608a:	e115      	b.n	80062b8 <UART_SetConfig+0x348>
 800608c:	2304      	movs	r3, #4
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e112      	b.n	80062b8 <UART_SetConfig+0x348>
 8006092:	2308      	movs	r3, #8
 8006094:	77fb      	strb	r3, [r7, #31]
 8006096:	e10f      	b.n	80062b8 <UART_SetConfig+0x348>
 8006098:	2310      	movs	r3, #16
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e10c      	b.n	80062b8 <UART_SetConfig+0x348>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a68      	ldr	r2, [pc, #416]	@ (8006244 <UART_SetConfig+0x2d4>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d120      	bne.n	80060ea <UART_SetConfig+0x17a>
 80060a8:	4b64      	ldr	r3, [pc, #400]	@ (800623c <UART_SetConfig+0x2cc>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060b2:	2b30      	cmp	r3, #48	@ 0x30
 80060b4:	d013      	beq.n	80060de <UART_SetConfig+0x16e>
 80060b6:	2b30      	cmp	r3, #48	@ 0x30
 80060b8:	d814      	bhi.n	80060e4 <UART_SetConfig+0x174>
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	d009      	beq.n	80060d2 <UART_SetConfig+0x162>
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d810      	bhi.n	80060e4 <UART_SetConfig+0x174>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <UART_SetConfig+0x15c>
 80060c6:	2b10      	cmp	r3, #16
 80060c8:	d006      	beq.n	80060d8 <UART_SetConfig+0x168>
 80060ca:	e00b      	b.n	80060e4 <UART_SetConfig+0x174>
 80060cc:	2300      	movs	r3, #0
 80060ce:	77fb      	strb	r3, [r7, #31]
 80060d0:	e0f2      	b.n	80062b8 <UART_SetConfig+0x348>
 80060d2:	2302      	movs	r3, #2
 80060d4:	77fb      	strb	r3, [r7, #31]
 80060d6:	e0ef      	b.n	80062b8 <UART_SetConfig+0x348>
 80060d8:	2304      	movs	r3, #4
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	e0ec      	b.n	80062b8 <UART_SetConfig+0x348>
 80060de:	2308      	movs	r3, #8
 80060e0:	77fb      	strb	r3, [r7, #31]
 80060e2:	e0e9      	b.n	80062b8 <UART_SetConfig+0x348>
 80060e4:	2310      	movs	r3, #16
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e0e6      	b.n	80062b8 <UART_SetConfig+0x348>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a56      	ldr	r2, [pc, #344]	@ (8006248 <UART_SetConfig+0x2d8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d120      	bne.n	8006136 <UART_SetConfig+0x1c6>
 80060f4:	4b51      	ldr	r3, [pc, #324]	@ (800623c <UART_SetConfig+0x2cc>)
 80060f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80060fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006100:	d013      	beq.n	800612a <UART_SetConfig+0x1ba>
 8006102:	2bc0      	cmp	r3, #192	@ 0xc0
 8006104:	d814      	bhi.n	8006130 <UART_SetConfig+0x1c0>
 8006106:	2b80      	cmp	r3, #128	@ 0x80
 8006108:	d009      	beq.n	800611e <UART_SetConfig+0x1ae>
 800610a:	2b80      	cmp	r3, #128	@ 0x80
 800610c:	d810      	bhi.n	8006130 <UART_SetConfig+0x1c0>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <UART_SetConfig+0x1a8>
 8006112:	2b40      	cmp	r3, #64	@ 0x40
 8006114:	d006      	beq.n	8006124 <UART_SetConfig+0x1b4>
 8006116:	e00b      	b.n	8006130 <UART_SetConfig+0x1c0>
 8006118:	2300      	movs	r3, #0
 800611a:	77fb      	strb	r3, [r7, #31]
 800611c:	e0cc      	b.n	80062b8 <UART_SetConfig+0x348>
 800611e:	2302      	movs	r3, #2
 8006120:	77fb      	strb	r3, [r7, #31]
 8006122:	e0c9      	b.n	80062b8 <UART_SetConfig+0x348>
 8006124:	2304      	movs	r3, #4
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e0c6      	b.n	80062b8 <UART_SetConfig+0x348>
 800612a:	2308      	movs	r3, #8
 800612c:	77fb      	strb	r3, [r7, #31]
 800612e:	e0c3      	b.n	80062b8 <UART_SetConfig+0x348>
 8006130:	2310      	movs	r3, #16
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e0c0      	b.n	80062b8 <UART_SetConfig+0x348>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a44      	ldr	r2, [pc, #272]	@ (800624c <UART_SetConfig+0x2dc>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d125      	bne.n	800618c <UART_SetConfig+0x21c>
 8006140:	4b3e      	ldr	r3, [pc, #248]	@ (800623c <UART_SetConfig+0x2cc>)
 8006142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800614a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800614e:	d017      	beq.n	8006180 <UART_SetConfig+0x210>
 8006150:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006154:	d817      	bhi.n	8006186 <UART_SetConfig+0x216>
 8006156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800615a:	d00b      	beq.n	8006174 <UART_SetConfig+0x204>
 800615c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006160:	d811      	bhi.n	8006186 <UART_SetConfig+0x216>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <UART_SetConfig+0x1fe>
 8006166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800616a:	d006      	beq.n	800617a <UART_SetConfig+0x20a>
 800616c:	e00b      	b.n	8006186 <UART_SetConfig+0x216>
 800616e:	2300      	movs	r3, #0
 8006170:	77fb      	strb	r3, [r7, #31]
 8006172:	e0a1      	b.n	80062b8 <UART_SetConfig+0x348>
 8006174:	2302      	movs	r3, #2
 8006176:	77fb      	strb	r3, [r7, #31]
 8006178:	e09e      	b.n	80062b8 <UART_SetConfig+0x348>
 800617a:	2304      	movs	r3, #4
 800617c:	77fb      	strb	r3, [r7, #31]
 800617e:	e09b      	b.n	80062b8 <UART_SetConfig+0x348>
 8006180:	2308      	movs	r3, #8
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e098      	b.n	80062b8 <UART_SetConfig+0x348>
 8006186:	2310      	movs	r3, #16
 8006188:	77fb      	strb	r3, [r7, #31]
 800618a:	e095      	b.n	80062b8 <UART_SetConfig+0x348>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a2f      	ldr	r2, [pc, #188]	@ (8006250 <UART_SetConfig+0x2e0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d125      	bne.n	80061e2 <UART_SetConfig+0x272>
 8006196:	4b29      	ldr	r3, [pc, #164]	@ (800623c <UART_SetConfig+0x2cc>)
 8006198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800619c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061a4:	d017      	beq.n	80061d6 <UART_SetConfig+0x266>
 80061a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061aa:	d817      	bhi.n	80061dc <UART_SetConfig+0x26c>
 80061ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061b0:	d00b      	beq.n	80061ca <UART_SetConfig+0x25a>
 80061b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061b6:	d811      	bhi.n	80061dc <UART_SetConfig+0x26c>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <UART_SetConfig+0x254>
 80061bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c0:	d006      	beq.n	80061d0 <UART_SetConfig+0x260>
 80061c2:	e00b      	b.n	80061dc <UART_SetConfig+0x26c>
 80061c4:	2301      	movs	r3, #1
 80061c6:	77fb      	strb	r3, [r7, #31]
 80061c8:	e076      	b.n	80062b8 <UART_SetConfig+0x348>
 80061ca:	2302      	movs	r3, #2
 80061cc:	77fb      	strb	r3, [r7, #31]
 80061ce:	e073      	b.n	80062b8 <UART_SetConfig+0x348>
 80061d0:	2304      	movs	r3, #4
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e070      	b.n	80062b8 <UART_SetConfig+0x348>
 80061d6:	2308      	movs	r3, #8
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e06d      	b.n	80062b8 <UART_SetConfig+0x348>
 80061dc:	2310      	movs	r3, #16
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e06a      	b.n	80062b8 <UART_SetConfig+0x348>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006254 <UART_SetConfig+0x2e4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d138      	bne.n	800625e <UART_SetConfig+0x2ee>
 80061ec:	4b13      	ldr	r3, [pc, #76]	@ (800623c <UART_SetConfig+0x2cc>)
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80061f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061fa:	d017      	beq.n	800622c <UART_SetConfig+0x2bc>
 80061fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006200:	d82a      	bhi.n	8006258 <UART_SetConfig+0x2e8>
 8006202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006206:	d00b      	beq.n	8006220 <UART_SetConfig+0x2b0>
 8006208:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800620c:	d824      	bhi.n	8006258 <UART_SetConfig+0x2e8>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <UART_SetConfig+0x2aa>
 8006212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006216:	d006      	beq.n	8006226 <UART_SetConfig+0x2b6>
 8006218:	e01e      	b.n	8006258 <UART_SetConfig+0x2e8>
 800621a:	2300      	movs	r3, #0
 800621c:	77fb      	strb	r3, [r7, #31]
 800621e:	e04b      	b.n	80062b8 <UART_SetConfig+0x348>
 8006220:	2302      	movs	r3, #2
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e048      	b.n	80062b8 <UART_SetConfig+0x348>
 8006226:	2304      	movs	r3, #4
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e045      	b.n	80062b8 <UART_SetConfig+0x348>
 800622c:	2308      	movs	r3, #8
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e042      	b.n	80062b8 <UART_SetConfig+0x348>
 8006232:	bf00      	nop
 8006234:	efff69f3 	.word	0xefff69f3
 8006238:	40011000 	.word	0x40011000
 800623c:	40023800 	.word	0x40023800
 8006240:	40004400 	.word	0x40004400
 8006244:	40004800 	.word	0x40004800
 8006248:	40004c00 	.word	0x40004c00
 800624c:	40005000 	.word	0x40005000
 8006250:	40011400 	.word	0x40011400
 8006254:	40007800 	.word	0x40007800
 8006258:	2310      	movs	r3, #16
 800625a:	77fb      	strb	r3, [r7, #31]
 800625c:	e02c      	b.n	80062b8 <UART_SetConfig+0x348>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a72      	ldr	r2, [pc, #456]	@ (800642c <UART_SetConfig+0x4bc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d125      	bne.n	80062b4 <UART_SetConfig+0x344>
 8006268:	4b71      	ldr	r3, [pc, #452]	@ (8006430 <UART_SetConfig+0x4c0>)
 800626a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800626e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006272:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006276:	d017      	beq.n	80062a8 <UART_SetConfig+0x338>
 8006278:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800627c:	d817      	bhi.n	80062ae <UART_SetConfig+0x33e>
 800627e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006282:	d00b      	beq.n	800629c <UART_SetConfig+0x32c>
 8006284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006288:	d811      	bhi.n	80062ae <UART_SetConfig+0x33e>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <UART_SetConfig+0x326>
 800628e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006292:	d006      	beq.n	80062a2 <UART_SetConfig+0x332>
 8006294:	e00b      	b.n	80062ae <UART_SetConfig+0x33e>
 8006296:	2300      	movs	r3, #0
 8006298:	77fb      	strb	r3, [r7, #31]
 800629a:	e00d      	b.n	80062b8 <UART_SetConfig+0x348>
 800629c:	2302      	movs	r3, #2
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e00a      	b.n	80062b8 <UART_SetConfig+0x348>
 80062a2:	2304      	movs	r3, #4
 80062a4:	77fb      	strb	r3, [r7, #31]
 80062a6:	e007      	b.n	80062b8 <UART_SetConfig+0x348>
 80062a8:	2308      	movs	r3, #8
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e004      	b.n	80062b8 <UART_SetConfig+0x348>
 80062ae:	2310      	movs	r3, #16
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e001      	b.n	80062b8 <UART_SetConfig+0x348>
 80062b4:	2310      	movs	r3, #16
 80062b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c0:	d15b      	bne.n	800637a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80062c2:	7ffb      	ldrb	r3, [r7, #31]
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d828      	bhi.n	800631a <UART_SetConfig+0x3aa>
 80062c8:	a201      	add	r2, pc, #4	@ (adr r2, 80062d0 <UART_SetConfig+0x360>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	080062f5 	.word	0x080062f5
 80062d4:	080062fd 	.word	0x080062fd
 80062d8:	08006305 	.word	0x08006305
 80062dc:	0800631b 	.word	0x0800631b
 80062e0:	0800630b 	.word	0x0800630b
 80062e4:	0800631b 	.word	0x0800631b
 80062e8:	0800631b 	.word	0x0800631b
 80062ec:	0800631b 	.word	0x0800631b
 80062f0:	08006313 	.word	0x08006313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f4:	f7fe fcb4 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 80062f8:	61b8      	str	r0, [r7, #24]
        break;
 80062fa:	e013      	b.n	8006324 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062fc:	f7fe fcc4 	bl	8004c88 <HAL_RCC_GetPCLK2Freq>
 8006300:	61b8      	str	r0, [r7, #24]
        break;
 8006302:	e00f      	b.n	8006324 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006304:	4b4b      	ldr	r3, [pc, #300]	@ (8006434 <UART_SetConfig+0x4c4>)
 8006306:	61bb      	str	r3, [r7, #24]
        break;
 8006308:	e00c      	b.n	8006324 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800630a:	f7fe fb97 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 800630e:	61b8      	str	r0, [r7, #24]
        break;
 8006310:	e008      	b.n	8006324 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006316:	61bb      	str	r3, [r7, #24]
        break;
 8006318:	e004      	b.n	8006324 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	77bb      	strb	r3, [r7, #30]
        break;
 8006322:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d074      	beq.n	8006414 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	005a      	lsls	r2, r3, #1
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	085b      	lsrs	r3, r3, #1
 8006334:	441a      	add	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	fbb2 f3f3 	udiv	r3, r2, r3
 800633e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b0f      	cmp	r3, #15
 8006344:	d916      	bls.n	8006374 <UART_SetConfig+0x404>
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800634c:	d212      	bcs.n	8006374 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	b29b      	uxth	r3, r3
 8006352:	f023 030f 	bic.w	r3, r3, #15
 8006356:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	085b      	lsrs	r3, r3, #1
 800635c:	b29b      	uxth	r3, r3
 800635e:	f003 0307 	and.w	r3, r3, #7
 8006362:	b29a      	uxth	r2, r3
 8006364:	89fb      	ldrh	r3, [r7, #14]
 8006366:	4313      	orrs	r3, r2
 8006368:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	89fa      	ldrh	r2, [r7, #14]
 8006370:	60da      	str	r2, [r3, #12]
 8006372:	e04f      	b.n	8006414 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	77bb      	strb	r3, [r7, #30]
 8006378:	e04c      	b.n	8006414 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800637a:	7ffb      	ldrb	r3, [r7, #31]
 800637c:	2b08      	cmp	r3, #8
 800637e:	d828      	bhi.n	80063d2 <UART_SetConfig+0x462>
 8006380:	a201      	add	r2, pc, #4	@ (adr r2, 8006388 <UART_SetConfig+0x418>)
 8006382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006386:	bf00      	nop
 8006388:	080063ad 	.word	0x080063ad
 800638c:	080063b5 	.word	0x080063b5
 8006390:	080063bd 	.word	0x080063bd
 8006394:	080063d3 	.word	0x080063d3
 8006398:	080063c3 	.word	0x080063c3
 800639c:	080063d3 	.word	0x080063d3
 80063a0:	080063d3 	.word	0x080063d3
 80063a4:	080063d3 	.word	0x080063d3
 80063a8:	080063cb 	.word	0x080063cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ac:	f7fe fc58 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 80063b0:	61b8      	str	r0, [r7, #24]
        break;
 80063b2:	e013      	b.n	80063dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063b4:	f7fe fc68 	bl	8004c88 <HAL_RCC_GetPCLK2Freq>
 80063b8:	61b8      	str	r0, [r7, #24]
        break;
 80063ba:	e00f      	b.n	80063dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006434 <UART_SetConfig+0x4c4>)
 80063be:	61bb      	str	r3, [r7, #24]
        break;
 80063c0:	e00c      	b.n	80063dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063c2:	f7fe fb3b 	bl	8004a3c <HAL_RCC_GetSysClockFreq>
 80063c6:	61b8      	str	r0, [r7, #24]
        break;
 80063c8:	e008      	b.n	80063dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ce:	61bb      	str	r3, [r7, #24]
        break;
 80063d0:	e004      	b.n	80063dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	77bb      	strb	r3, [r7, #30]
        break;
 80063da:	bf00      	nop
    }

    if (pclk != 0U)
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d018      	beq.n	8006414 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	085a      	lsrs	r2, r3, #1
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	441a      	add	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b0f      	cmp	r3, #15
 80063fa:	d909      	bls.n	8006410 <UART_SetConfig+0x4a0>
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006402:	d205      	bcs.n	8006410 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	b29a      	uxth	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	60da      	str	r2, [r3, #12]
 800640e:	e001      	b.n	8006414 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006420:	7fbb      	ldrb	r3, [r7, #30]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3720      	adds	r7, #32
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40007c00 	.word	0x40007c00
 8006430:	40023800 	.word	0x40023800
 8006434:	00f42400 	.word	0x00f42400

08006438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064aa:	f003 0304 	and.w	r3, r3, #4
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01a      	beq.n	800654e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006536:	d10a      	bne.n	800654e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	605a      	str	r2, [r3, #4]
  }
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b098      	sub	sp, #96	@ 0x60
 8006580:	af02      	add	r7, sp, #8
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800658c:	f7fa ffe6 	bl	800155c <HAL_GetTick>
 8006590:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b08      	cmp	r3, #8
 800659e:	d12e      	bne.n	80065fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065a8:	2200      	movs	r2, #0
 80065aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f88c 	bl	80066cc <UART_WaitOnFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d021      	beq.n	80065fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c2:	e853 3f00 	ldrex	r3, [r3]
 80065c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80065da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065e0:	e841 2300 	strex	r3, r2, [r1]
 80065e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1e6      	bne.n	80065ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2220      	movs	r2, #32
 80065f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e062      	b.n	80066c4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b04      	cmp	r3, #4
 800660a:	d149      	bne.n	80066a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800660c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006614:	2200      	movs	r2, #0
 8006616:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f856 	bl	80066cc <UART_WaitOnFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d03c      	beq.n	80066a0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	623b      	str	r3, [r7, #32]
   return(result);
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800663a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006644:	633b      	str	r3, [r7, #48]	@ 0x30
 8006646:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800664a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e6      	bne.n	8006626 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3308      	adds	r3, #8
 800665e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	60fb      	str	r3, [r7, #12]
   return(result);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0301 	bic.w	r3, r3, #1
 800666e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3308      	adds	r3, #8
 8006676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006678:	61fa      	str	r2, [r7, #28]
 800667a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	69b9      	ldr	r1, [r7, #24]
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	617b      	str	r3, [r7, #20]
   return(result);
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e5      	bne.n	8006658 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e011      	b.n	80066c4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2220      	movs	r2, #32
 80066aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3758      	adds	r7, #88	@ 0x58
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	603b      	str	r3, [r7, #0]
 80066d8:	4613      	mov	r3, r2
 80066da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066dc:	e04f      	b.n	800677e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e4:	d04b      	beq.n	800677e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066e6:	f7fa ff39 	bl	800155c <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d302      	bcc.n	80066fc <UART_WaitOnFlagUntilTimeout+0x30>
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e04e      	b.n	800679e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b00      	cmp	r3, #0
 800670c:	d037      	beq.n	800677e <UART_WaitOnFlagUntilTimeout+0xb2>
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2b80      	cmp	r3, #128	@ 0x80
 8006712:	d034      	beq.n	800677e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b40      	cmp	r3, #64	@ 0x40
 8006718:	d031      	beq.n	800677e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b08      	cmp	r3, #8
 8006726:	d110      	bne.n	800674a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2208      	movs	r2, #8
 800672e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f838 	bl	80067a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2208      	movs	r2, #8
 800673a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e029      	b.n	800679e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006758:	d111      	bne.n	800677e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006762:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f81e 	bl	80067a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2220      	movs	r2, #32
 800676e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e00f      	b.n	800679e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4013      	ands	r3, r2
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	429a      	cmp	r2, r3
 800678c:	bf0c      	ite	eq
 800678e:	2301      	moveq	r3, #1
 8006790:	2300      	movne	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	429a      	cmp	r2, r3
 800679a:	d0a0      	beq.n	80066de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b095      	sub	sp, #84	@ 0x54
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	461a      	mov	r2, r3
 80067ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80067ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e6      	bne.n	80067ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3308      	adds	r3, #8
 80067e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	f023 0301 	bic.w	r3, r3, #1
 80067f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3308      	adds	r3, #8
 80067fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800680e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e5      	bne.n	80067e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006818:	2b01      	cmp	r3, #1
 800681a:	d118      	bne.n	800684e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	60bb      	str	r3, [r7, #8]
   return(result);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f023 0310 	bic.w	r3, r3, #16
 8006830:	647b      	str	r3, [r7, #68]	@ 0x44
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800683a:	61bb      	str	r3, [r7, #24]
 800683c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6979      	ldr	r1, [r7, #20]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	613b      	str	r3, [r7, #16]
   return(result);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e6      	bne.n	800681c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006862:	bf00      	nop
 8006864:	3754      	adds	r7, #84	@ 0x54
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006870:	b084      	sub	sp, #16
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	f107 001c 	add.w	r0, r7, #28
 800687e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006882:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006886:	2b01      	cmp	r3, #1
 8006888:	d121      	bne.n	80068ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	4b21      	ldr	r3, [pc, #132]	@ (8006920 <USB_CoreInit+0xb0>)
 800689c:	4013      	ands	r3, r2
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d105      	bne.n	80068c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 fade 	bl	8007e84 <USB_CoreReset>
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
 80068cc:	e010      	b.n	80068f0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 fad2 	bl	8007e84 <USB_CoreReset>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80068f0:	7fbb      	ldrb	r3, [r7, #30]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d10b      	bne.n	800690e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f043 0206 	orr.w	r2, r3, #6
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f043 0220 	orr.w	r2, r3, #32
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800690e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800691a:	b004      	add	sp, #16
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	ffbdffbf 	.word	0xffbdffbf

08006924 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	2b02      	cmp	r3, #2
 8006936:	d165      	bne.n	8006a04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	4a41      	ldr	r2, [pc, #260]	@ (8006a40 <USB_SetTurnaroundTime+0x11c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d906      	bls.n	800694e <USB_SetTurnaroundTime+0x2a>
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4a40      	ldr	r2, [pc, #256]	@ (8006a44 <USB_SetTurnaroundTime+0x120>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d202      	bcs.n	800694e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006948:	230f      	movs	r3, #15
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	e062      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4a3c      	ldr	r2, [pc, #240]	@ (8006a44 <USB_SetTurnaroundTime+0x120>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d306      	bcc.n	8006964 <USB_SetTurnaroundTime+0x40>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	4a3b      	ldr	r2, [pc, #236]	@ (8006a48 <USB_SetTurnaroundTime+0x124>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d202      	bcs.n	8006964 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800695e:	230e      	movs	r3, #14
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	e057      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4a38      	ldr	r2, [pc, #224]	@ (8006a48 <USB_SetTurnaroundTime+0x124>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d306      	bcc.n	800697a <USB_SetTurnaroundTime+0x56>
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4a37      	ldr	r2, [pc, #220]	@ (8006a4c <USB_SetTurnaroundTime+0x128>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d202      	bcs.n	800697a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006974:	230d      	movs	r3, #13
 8006976:	617b      	str	r3, [r7, #20]
 8006978:	e04c      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	4a33      	ldr	r2, [pc, #204]	@ (8006a4c <USB_SetTurnaroundTime+0x128>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d306      	bcc.n	8006990 <USB_SetTurnaroundTime+0x6c>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	4a32      	ldr	r2, [pc, #200]	@ (8006a50 <USB_SetTurnaroundTime+0x12c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d802      	bhi.n	8006990 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800698a:	230c      	movs	r3, #12
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	e041      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	4a2f      	ldr	r2, [pc, #188]	@ (8006a50 <USB_SetTurnaroundTime+0x12c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d906      	bls.n	80069a6 <USB_SetTurnaroundTime+0x82>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4a2e      	ldr	r2, [pc, #184]	@ (8006a54 <USB_SetTurnaroundTime+0x130>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d802      	bhi.n	80069a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80069a0:	230b      	movs	r3, #11
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e036      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006a54 <USB_SetTurnaroundTime+0x130>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d906      	bls.n	80069bc <USB_SetTurnaroundTime+0x98>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4a29      	ldr	r2, [pc, #164]	@ (8006a58 <USB_SetTurnaroundTime+0x134>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d802      	bhi.n	80069bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80069b6:	230a      	movs	r3, #10
 80069b8:	617b      	str	r3, [r7, #20]
 80069ba:	e02b      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4a26      	ldr	r2, [pc, #152]	@ (8006a58 <USB_SetTurnaroundTime+0x134>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d906      	bls.n	80069d2 <USB_SetTurnaroundTime+0xae>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4a25      	ldr	r2, [pc, #148]	@ (8006a5c <USB_SetTurnaroundTime+0x138>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d202      	bcs.n	80069d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80069cc:	2309      	movs	r3, #9
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	e020      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	4a21      	ldr	r2, [pc, #132]	@ (8006a5c <USB_SetTurnaroundTime+0x138>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d306      	bcc.n	80069e8 <USB_SetTurnaroundTime+0xc4>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4a20      	ldr	r2, [pc, #128]	@ (8006a60 <USB_SetTurnaroundTime+0x13c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d802      	bhi.n	80069e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80069e2:	2308      	movs	r3, #8
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	e015      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006a60 <USB_SetTurnaroundTime+0x13c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d906      	bls.n	80069fe <USB_SetTurnaroundTime+0xda>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006a64 <USB_SetTurnaroundTime+0x140>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d202      	bcs.n	80069fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80069f8:	2307      	movs	r3, #7
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	e00a      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80069fe:	2306      	movs	r3, #6
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	e007      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d102      	bne.n	8006a10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a0a:	2309      	movs	r3, #9
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	e001      	b.n	8006a14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a10:	2309      	movs	r3, #9
 8006a12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	029b      	lsls	r3, r3, #10
 8006a28:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	00d8acbf 	.word	0x00d8acbf
 8006a44:	00e4e1c0 	.word	0x00e4e1c0
 8006a48:	00f42400 	.word	0x00f42400
 8006a4c:	01067380 	.word	0x01067380
 8006a50:	011a499f 	.word	0x011a499f
 8006a54:	01312cff 	.word	0x01312cff
 8006a58:	014ca43f 	.word	0x014ca43f
 8006a5c:	016e3600 	.word	0x016e3600
 8006a60:	01a6ab1f 	.word	0x01a6ab1f
 8006a64:	01e84800 	.word	0x01e84800

08006a68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f043 0201 	orr.w	r2, r3, #1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f023 0201 	bic.w	r2, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d115      	bne.n	8006afa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ada:	200a      	movs	r0, #10
 8006adc:	f7fa fd4a 	bl	8001574 <HAL_Delay>
      ms += 10U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	330a      	adds	r3, #10
 8006ae4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 f93b 	bl	8007d62 <USB_GetMode>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d01e      	beq.n	8006b30 <USB_SetCurrentMode+0x84>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006af6:	d9f0      	bls.n	8006ada <USB_SetCurrentMode+0x2e>
 8006af8:	e01a      	b.n	8006b30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006afa:	78fb      	ldrb	r3, [r7, #3]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d115      	bne.n	8006b2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b0c:	200a      	movs	r0, #10
 8006b0e:	f7fa fd31 	bl	8001574 <HAL_Delay>
      ms += 10U;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	330a      	adds	r3, #10
 8006b16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 f922 	bl	8007d62 <USB_GetMode>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d005      	beq.n	8006b30 <USB_SetCurrentMode+0x84>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2bc7      	cmp	r3, #199	@ 0xc7
 8006b28:	d9f0      	bls.n	8006b0c <USB_SetCurrentMode+0x60>
 8006b2a:	e001      	b.n	8006b30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e005      	b.n	8006b3c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2bc8      	cmp	r3, #200	@ 0xc8
 8006b34:	d101      	bne.n	8006b3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b44:	b084      	sub	sp, #16
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b086      	sub	sp, #24
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b5e:	2300      	movs	r3, #0
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	e009      	b.n	8006b78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	3340      	adds	r3, #64	@ 0x40
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	2200      	movs	r2, #0
 8006b70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	3301      	adds	r3, #1
 8006b76:	613b      	str	r3, [r7, #16]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2b0e      	cmp	r3, #14
 8006b7c:	d9f2      	bls.n	8006b64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b7e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d11c      	bne.n	8006bc0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b94:	f043 0302 	orr.w	r3, r3, #2
 8006b98:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e005      	b.n	8006bcc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bd8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d10d      	bne.n	8006bfc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006be0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d104      	bne.n	8006bf2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006be8:	2100      	movs	r1, #0
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f968 	bl	8006ec0 <USB_SetDevSpeed>
 8006bf0:	e008      	b.n	8006c04 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f963 	bl	8006ec0 <USB_SetDevSpeed>
 8006bfa:	e003      	b.n	8006c04 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bfc:	2103      	movs	r1, #3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f95e 	bl	8006ec0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c04:	2110      	movs	r1, #16
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f8fa 	bl	8006e00 <USB_FlushTxFifo>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f924 	bl	8006e64 <USB_FlushRxFifo>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c44:	461a      	mov	r2, r3
 8006c46:	2300      	movs	r3, #0
 8006c48:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	e043      	b.n	8006cd8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c66:	d118      	bne.n	8006c9a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c80:	6013      	str	r3, [r2, #0]
 8006c82:	e013      	b.n	8006cac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c90:	461a      	mov	r2, r3
 8006c92:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	e008      	b.n	8006cac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	2300      	movs	r3, #0
 8006caa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cb8:	461a      	mov	r2, r3
 8006cba:	2300      	movs	r3, #0
 8006cbc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006cd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006cdc:	461a      	mov	r2, r3
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d3b5      	bcc.n	8006c50 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	613b      	str	r3, [r7, #16]
 8006ce8:	e043      	b.n	8006d72 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d00:	d118      	bne.n	8006d34 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10a      	bne.n	8006d1e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d14:	461a      	mov	r2, r3
 8006d16:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	e013      	b.n	8006d46 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e008      	b.n	8006d46 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d40:	461a      	mov	r2, r3
 8006d42:	2300      	movs	r3, #0
 8006d44:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d52:	461a      	mov	r2, r3
 8006d54:	2300      	movs	r3, #0
 8006d56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d64:	461a      	mov	r2, r3
 8006d66:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	613b      	str	r3, [r7, #16]
 8006d72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006d76:	461a      	mov	r2, r3
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d3b5      	bcc.n	8006cea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d90:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006d9e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006da0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d105      	bne.n	8006db4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	f043 0210 	orr.w	r2, r3, #16
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	699a      	ldr	r2, [r3, #24]
 8006db8:	4b0f      	ldr	r3, [pc, #60]	@ (8006df8 <USB_DevInit+0x2b4>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006dc0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	f043 0208 	orr.w	r2, r3, #8
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006dd4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d105      	bne.n	8006de8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699a      	ldr	r2, [r3, #24]
 8006de0:	4b06      	ldr	r3, [pc, #24]	@ (8006dfc <USB_DevInit+0x2b8>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3718      	adds	r7, #24
 8006dee:	46bd      	mov	sp, r7
 8006df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006df4:	b004      	add	sp, #16
 8006df6:	4770      	bx	lr
 8006df8:	803c3800 	.word	0x803c3800
 8006dfc:	40000004 	.word	0x40000004

08006e00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3301      	adds	r3, #1
 8006e12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e1a:	d901      	bls.n	8006e20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e01b      	b.n	8006e58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	daf2      	bge.n	8006e0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	019b      	lsls	r3, r3, #6
 8006e30:	f043 0220 	orr.w	r2, r3, #32
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e44:	d901      	bls.n	8006e4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e006      	b.n	8006e58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0320 	and.w	r3, r3, #32
 8006e52:	2b20      	cmp	r3, #32
 8006e54:	d0f0      	beq.n	8006e38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3301      	adds	r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e7c:	d901      	bls.n	8006e82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e018      	b.n	8006eb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	daf2      	bge.n	8006e70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2210      	movs	r2, #16
 8006e92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3301      	adds	r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ea0:	d901      	bls.n	8006ea6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e006      	b.n	8006eb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f003 0310 	and.w	r3, r3, #16
 8006eae:	2b10      	cmp	r3, #16
 8006eb0:	d0f0      	beq.n	8006e94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	78fb      	ldrb	r3, [r7, #3]
 8006eda:	68f9      	ldr	r1, [r7, #12]
 8006edc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b087      	sub	sp, #28
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0306 	and.w	r3, r3, #6
 8006f0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d102      	bne.n	8006f18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75fb      	strb	r3, [r7, #23]
 8006f16:	e00a      	b.n	8006f2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d002      	beq.n	8006f24 <USB_GetDevSpeed+0x32>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b06      	cmp	r3, #6
 8006f22:	d102      	bne.n	8006f2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f24:	2302      	movs	r3, #2
 8006f26:	75fb      	strb	r3, [r7, #23]
 8006f28:	e001      	b.n	8006f2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f2a:	230f      	movs	r3, #15
 8006f2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d139      	bne.n	8006fcc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	f003 030f 	and.w	r3, r3, #15
 8006f68:	2101      	movs	r1, #1
 8006f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	68f9      	ldr	r1, [r7, #12]
 8006f72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f76:	4313      	orrs	r3, r2
 8006f78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d153      	bne.n	8007038 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	791b      	ldrb	r3, [r3, #4]
 8006faa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	059b      	lsls	r3, r3, #22
 8006fb2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	0159      	lsls	r1, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	440b      	add	r3, r1
 8006fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4b20      	ldr	r3, [pc, #128]	@ (8007048 <USB_ActivateEndpoint+0x10c>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	600b      	str	r3, [r1, #0]
 8006fca:	e035      	b.n	8007038 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fd2:	69da      	ldr	r2, [r3, #28]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	2101      	movs	r1, #1
 8006fde:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe2:	041b      	lsls	r3, r3, #16
 8006fe4:	68f9      	ldr	r1, [r7, #12]
 8006fe6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fea:	4313      	orrs	r3, r2
 8006fec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d119      	bne.n	8007038 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	791b      	ldrb	r3, [r3, #4]
 800701e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007020:	430b      	orrs	r3, r1
 8007022:	431a      	orrs	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	0159      	lsls	r1, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	440b      	add	r3, r1
 800702c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007030:	4619      	mov	r1, r3
 8007032:	4b05      	ldr	r3, [pc, #20]	@ (8007048 <USB_ActivateEndpoint+0x10c>)
 8007034:	4313      	orrs	r3, r2
 8007036:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	10008000 	.word	0x10008000

0800704c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d161      	bne.n	800712c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800707a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800707e:	d11f      	bne.n	80070c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800709a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800709e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	0151      	lsls	r1, r2, #5
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	440a      	add	r2, r1
 80070b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	2101      	movs	r1, #1
 80070d2:	fa01 f303 	lsl.w	r3, r1, r3
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	43db      	mvns	r3, r3
 80070da:	68f9      	ldr	r1, [r7, #12]
 80070dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070e0:	4013      	ands	r3, r2
 80070e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	2101      	movs	r1, #1
 80070f6:	fa01 f303 	lsl.w	r3, r1, r3
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	43db      	mvns	r3, r3
 80070fe:	68f9      	ldr	r1, [r7, #12]
 8007100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007104:	4013      	ands	r3, r2
 8007106:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	0159      	lsls	r1, r3, #5
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	440b      	add	r3, r1
 800711e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007122:	4619      	mov	r1, r3
 8007124:	4b35      	ldr	r3, [pc, #212]	@ (80071fc <USB_DeactivateEndpoint+0x1b0>)
 8007126:	4013      	ands	r3, r2
 8007128:	600b      	str	r3, [r1, #0]
 800712a:	e060      	b.n	80071ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800713e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007142:	d11f      	bne.n	8007184 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800715e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007162:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800717e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007182:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800718a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	2101      	movs	r1, #1
 8007196:	fa01 f303 	lsl.w	r3, r1, r3
 800719a:	041b      	lsls	r3, r3, #16
 800719c:	43db      	mvns	r3, r3
 800719e:	68f9      	ldr	r1, [r7, #12]
 80071a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071a4:	4013      	ands	r3, r2
 80071a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ae:	69da      	ldr	r2, [r3, #28]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	2101      	movs	r1, #1
 80071ba:	fa01 f303 	lsl.w	r3, r1, r3
 80071be:	041b      	lsls	r3, r3, #16
 80071c0:	43db      	mvns	r3, r3
 80071c2:	68f9      	ldr	r1, [r7, #12]
 80071c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071c8:	4013      	ands	r3, r2
 80071ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	0159      	lsls	r1, r3, #5
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	440b      	add	r3, r1
 80071e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e6:	4619      	mov	r1, r3
 80071e8:	4b05      	ldr	r3, [pc, #20]	@ (8007200 <USB_DeactivateEndpoint+0x1b4>)
 80071ea:	4013      	ands	r3, r2
 80071ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	ec337800 	.word	0xec337800
 8007200:	eff37800 	.word	0xeff37800

08007204 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08a      	sub	sp, #40	@ 0x28
 8007208:	af02      	add	r7, sp, #8
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b01      	cmp	r3, #1
 8007222:	f040 8181 	bne.w	8007528 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d132      	bne.n	8007294 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	0159      	lsls	r1, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	440b      	add	r3, r1
 8007244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007248:	4619      	mov	r1, r3
 800724a:	4ba5      	ldr	r3, [pc, #660]	@ (80074e0 <USB_EPStartXfer+0x2dc>)
 800724c:	4013      	ands	r3, r2
 800724e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	0151      	lsls	r1, r2, #5
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	440a      	add	r2, r1
 8007266:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800726a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800726e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	0159      	lsls	r1, r3, #5
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	440b      	add	r3, r1
 8007286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800728a:	4619      	mov	r1, r3
 800728c:	4b95      	ldr	r3, [pc, #596]	@ (80074e4 <USB_EPStartXfer+0x2e0>)
 800728e:	4013      	ands	r3, r2
 8007290:	610b      	str	r3, [r1, #16]
 8007292:	e092      	b.n	80073ba <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	0159      	lsls	r1, r3, #5
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	440b      	add	r3, r1
 80072aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ae:	4619      	mov	r1, r3
 80072b0:	4b8c      	ldr	r3, [pc, #560]	@ (80074e4 <USB_EPStartXfer+0x2e0>)
 80072b2:	4013      	ands	r3, r2
 80072b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	0159      	lsls	r1, r3, #5
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	440b      	add	r3, r1
 80072cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072d0:	4619      	mov	r1, r3
 80072d2:	4b83      	ldr	r3, [pc, #524]	@ (80074e0 <USB_EPStartXfer+0x2dc>)
 80072d4:	4013      	ands	r3, r2
 80072d6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d11a      	bne.n	8007314 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	691a      	ldr	r2, [r3, #16]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d903      	bls.n	80072f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	69fa      	ldr	r2, [r7, #28]
 8007306:	440a      	add	r2, r1
 8007308:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800730c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007310:	6113      	str	r3, [r2, #16]
 8007312:	e01b      	b.n	800734c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007320:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6919      	ldr	r1, [r3, #16]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	440b      	add	r3, r1
 800732c:	1e59      	subs	r1, r3, #1
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	fbb1 f3f3 	udiv	r3, r1, r3
 8007336:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007338:	4b6b      	ldr	r3, [pc, #428]	@ (80074e8 <USB_EPStartXfer+0x2e4>)
 800733a:	400b      	ands	r3, r1
 800733c:	69b9      	ldr	r1, [r7, #24]
 800733e:	0148      	lsls	r0, r1, #5
 8007340:	69f9      	ldr	r1, [r7, #28]
 8007342:	4401      	add	r1, r0
 8007344:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007348:	4313      	orrs	r3, r2
 800734a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007362:	69b9      	ldr	r1, [r7, #24]
 8007364:	0148      	lsls	r0, r1, #5
 8007366:	69f9      	ldr	r1, [r7, #28]
 8007368:	4401      	add	r1, r0
 800736a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800736e:	4313      	orrs	r3, r2
 8007370:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	791b      	ldrb	r3, [r3, #4]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d11f      	bne.n	80073ba <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	0151      	lsls	r1, r2, #5
 800738c:	69fa      	ldr	r2, [r7, #28]
 800738e:	440a      	add	r2, r1
 8007390:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007394:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007398:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	0151      	lsls	r1, r2, #5
 80073ac:	69fa      	ldr	r2, [r7, #28]
 80073ae:	440a      	add	r2, r1
 80073b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80073ba:	79fb      	ldrb	r3, [r7, #7]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d14b      	bne.n	8007458 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d4:	461a      	mov	r2, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	791b      	ldrb	r3, [r3, #4]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d128      	bne.n	8007436 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d110      	bne.n	8007416 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	69ba      	ldr	r2, [r7, #24]
 8007404:	0151      	lsls	r1, r2, #5
 8007406:	69fa      	ldr	r2, [r7, #28]
 8007408:	440a      	add	r2, r1
 800740a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800740e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007412:	6013      	str	r3, [r2, #0]
 8007414:	e00f      	b.n	8007436 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	4413      	add	r3, r2
 800741e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	0151      	lsls	r1, r2, #5
 8007428:	69fa      	ldr	r2, [r7, #28]
 800742a:	440a      	add	r2, r1
 800742c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007434:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	0151      	lsls	r1, r2, #5
 8007448:	69fa      	ldr	r2, [r7, #28]
 800744a:	440a      	add	r2, r1
 800744c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007450:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	e16a      	b.n	800772e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	0151      	lsls	r1, r2, #5
 800746a:	69fa      	ldr	r2, [r7, #28]
 800746c:	440a      	add	r2, r1
 800746e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007472:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007476:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	791b      	ldrb	r3, [r3, #4]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d015      	beq.n	80074ac <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 8152 	beq.w	800772e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	2101      	movs	r1, #1
 800749c:	fa01 f303 	lsl.w	r3, r1, r3
 80074a0:	69f9      	ldr	r1, [r7, #28]
 80074a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074a6:	4313      	orrs	r3, r2
 80074a8:	634b      	str	r3, [r1, #52]	@ 0x34
 80074aa:	e140      	b.n	800772e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d117      	bne.n	80074ec <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	0151      	lsls	r1, r2, #5
 80074ce:	69fa      	ldr	r2, [r7, #28]
 80074d0:	440a      	add	r2, r1
 80074d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	e016      	b.n	800750c <USB_EPStartXfer+0x308>
 80074de:	bf00      	nop
 80074e0:	e007ffff 	.word	0xe007ffff
 80074e4:	fff80000 	.word	0xfff80000
 80074e8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69ba      	ldr	r2, [r7, #24]
 80074fc:	0151      	lsls	r1, r2, #5
 80074fe:	69fa      	ldr	r2, [r7, #28]
 8007500:	440a      	add	r2, r1
 8007502:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800750a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	68d9      	ldr	r1, [r3, #12]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	b298      	uxth	r0, r3
 800751a:	79fb      	ldrb	r3, [r7, #7]
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	4603      	mov	r3, r0
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 f9b9 	bl	8007898 <USB_WritePacket>
 8007526:	e102      	b.n	800772e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	0159      	lsls	r1, r3, #5
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	440b      	add	r3, r1
 800753e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007542:	4619      	mov	r1, r3
 8007544:	4b7c      	ldr	r3, [pc, #496]	@ (8007738 <USB_EPStartXfer+0x534>)
 8007546:	4013      	ands	r3, r2
 8007548:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	4413      	add	r3, r2
 8007552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	0159      	lsls	r1, r3, #5
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	440b      	add	r3, r1
 8007560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007564:	4619      	mov	r1, r3
 8007566:	4b75      	ldr	r3, [pc, #468]	@ (800773c <USB_EPStartXfer+0x538>)
 8007568:	4013      	ands	r3, r2
 800756a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d12f      	bne.n	80075d2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	689a      	ldr	r2, [r3, #8]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007596:	691a      	ldr	r2, [r3, #16]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075a0:	69b9      	ldr	r1, [r7, #24]
 80075a2:	0148      	lsls	r0, r1, #5
 80075a4:	69f9      	ldr	r1, [r7, #28]
 80075a6:	4401      	add	r1, r0
 80075a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80075ac:	4313      	orrs	r3, r2
 80075ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	0151      	lsls	r1, r2, #5
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	440a      	add	r2, r1
 80075c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80075ce:	6113      	str	r3, [r2, #16]
 80075d0:	e05f      	b.n	8007692 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d123      	bne.n	8007622 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075e6:	691a      	ldr	r2, [r3, #16]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075f0:	69b9      	ldr	r1, [r7, #24]
 80075f2:	0148      	lsls	r0, r1, #5
 80075f4:	69f9      	ldr	r1, [r7, #28]
 80075f6:	4401      	add	r1, r0
 80075f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80075fc:	4313      	orrs	r3, r2
 80075fe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	0151      	lsls	r1, r2, #5
 8007612:	69fa      	ldr	r2, [r7, #28]
 8007614:	440a      	add	r2, r1
 8007616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800761a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800761e:	6113      	str	r3, [r2, #16]
 8007620:	e037      	b.n	8007692 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	691a      	ldr	r2, [r3, #16]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	4413      	add	r3, r2
 800762c:	1e5a      	subs	r2, r3, #1
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	fbb2 f3f3 	udiv	r3, r2, r3
 8007636:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	8afa      	ldrh	r2, [r7, #22]
 800763e:	fb03 f202 	mul.w	r2, r3, r2
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	015a      	lsls	r2, r3, #5
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	4413      	add	r3, r2
 800764e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007652:	691a      	ldr	r2, [r3, #16]
 8007654:	8afb      	ldrh	r3, [r7, #22]
 8007656:	04d9      	lsls	r1, r3, #19
 8007658:	4b39      	ldr	r3, [pc, #228]	@ (8007740 <USB_EPStartXfer+0x53c>)
 800765a:	400b      	ands	r3, r1
 800765c:	69b9      	ldr	r1, [r7, #24]
 800765e:	0148      	lsls	r0, r1, #5
 8007660:	69f9      	ldr	r1, [r7, #28]
 8007662:	4401      	add	r1, r0
 8007664:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007668:	4313      	orrs	r3, r2
 800766a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007678:	691a      	ldr	r2, [r3, #16]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007682:	69b9      	ldr	r1, [r7, #24]
 8007684:	0148      	lsls	r0, r1, #5
 8007686:	69f9      	ldr	r1, [r7, #28]
 8007688:	4401      	add	r1, r0
 800768a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800768e:	4313      	orrs	r3, r2
 8007690:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007692:	79fb      	ldrb	r3, [r7, #7]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d10d      	bne.n	80076b4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d009      	beq.n	80076b4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	68d9      	ldr	r1, [r3, #12]
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b0:	460a      	mov	r2, r1
 80076b2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	791b      	ldrb	r3, [r3, #4]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d128      	bne.n	800770e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d110      	bne.n	80076ee <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	e00f      	b.n	800770e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800770c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	0151      	lsls	r1, r2, #5
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	440a      	add	r2, r1
 8007724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007728:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800772c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3720      	adds	r7, #32
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	fff80000 	.word	0xfff80000
 800773c:	e007ffff 	.word	0xe007ffff
 8007740:	1ff80000 	.word	0x1ff80000

08007744 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d14a      	bne.n	80077f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007776:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800777a:	f040 8086 	bne.w	800788a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	4413      	add	r3, r2
 8007788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	7812      	ldrb	r2, [r2, #0]
 8007792:	0151      	lsls	r1, r2, #5
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	440a      	add	r2, r1
 8007798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800779c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80077a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	015a      	lsls	r2, r3, #5
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	4413      	add	r3, r2
 80077ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	7812      	ldrb	r2, [r2, #0]
 80077b6:	0151      	lsls	r1, r2, #5
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	440a      	add	r2, r1
 80077bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3301      	adds	r3, #1
 80077ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d902      	bls.n	80077dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	75fb      	strb	r3, [r7, #23]
          break;
 80077da:	e056      	b.n	800788a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077f4:	d0e7      	beq.n	80077c6 <USB_EPStopXfer+0x82>
 80077f6:	e048      	b.n	800788a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800780c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007810:	d13b      	bne.n	800788a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	7812      	ldrb	r2, [r2, #0]
 8007826:	0151      	lsls	r1, r2, #5
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	440a      	add	r2, r1
 800782c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007830:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007834:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	7812      	ldrb	r2, [r2, #0]
 800784a:	0151      	lsls	r1, r2, #5
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	440a      	add	r2, r1
 8007850:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007854:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007858:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3301      	adds	r3, #1
 800785e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007866:	4293      	cmp	r3, r2
 8007868:	d902      	bls.n	8007870 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	75fb      	strb	r3, [r7, #23]
          break;
 800786e:	e00c      	b.n	800788a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007888:	d0e7      	beq.n	800785a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800788a:	7dfb      	ldrb	r3, [r7, #23]
}
 800788c:	4618      	mov	r0, r3
 800788e:	371c      	adds	r7, #28
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007898:	b480      	push	{r7}
 800789a:	b089      	sub	sp, #36	@ 0x24
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	4611      	mov	r1, r2
 80078a4:	461a      	mov	r2, r3
 80078a6:	460b      	mov	r3, r1
 80078a8:	71fb      	strb	r3, [r7, #7]
 80078aa:	4613      	mov	r3, r2
 80078ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80078b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d123      	bne.n	8007906 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80078be:	88bb      	ldrh	r3, [r7, #4]
 80078c0:	3303      	adds	r3, #3
 80078c2:	089b      	lsrs	r3, r3, #2
 80078c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078c6:	2300      	movs	r3, #0
 80078c8:	61bb      	str	r3, [r7, #24]
 80078ca:	e018      	b.n	80078fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	031a      	lsls	r2, r3, #12
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078d8:	461a      	mov	r2, r3
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	3301      	adds	r3, #1
 80078e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	3301      	adds	r3, #1
 80078ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	3301      	adds	r3, #1
 80078f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	3301      	adds	r3, #1
 80078f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	3301      	adds	r3, #1
 80078fc:	61bb      	str	r3, [r7, #24]
 80078fe:	69ba      	ldr	r2, [r7, #24]
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	429a      	cmp	r2, r3
 8007904:	d3e2      	bcc.n	80078cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3724      	adds	r7, #36	@ 0x24
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007914:	b480      	push	{r7}
 8007916:	b08b      	sub	sp, #44	@ 0x2c
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800792a:	88fb      	ldrh	r3, [r7, #6]
 800792c:	089b      	lsrs	r3, r3, #2
 800792e:	b29b      	uxth	r3, r3
 8007930:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007932:	88fb      	ldrh	r3, [r7, #6]
 8007934:	f003 0303 	and.w	r3, r3, #3
 8007938:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800793a:	2300      	movs	r3, #0
 800793c:	623b      	str	r3, [r7, #32]
 800793e:	e014      	b.n	800796a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	601a      	str	r2, [r3, #0]
    pDest++;
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	3301      	adds	r3, #1
 8007950:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	3301      	adds	r3, #1
 8007956:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	3301      	adds	r3, #1
 800795c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	3301      	adds	r3, #1
 8007962:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	3301      	adds	r3, #1
 8007968:	623b      	str	r3, [r7, #32]
 800796a:	6a3a      	ldr	r2, [r7, #32]
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	429a      	cmp	r2, r3
 8007970:	d3e6      	bcc.n	8007940 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007972:	8bfb      	ldrh	r3, [r7, #30]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01e      	beq.n	80079b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007982:	461a      	mov	r2, r3
 8007984:	f107 0310 	add.w	r3, r7, #16
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800798c:	693a      	ldr	r2, [r7, #16]
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	b2db      	uxtb	r3, r3
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	fa22 f303 	lsr.w	r3, r2, r3
 8007998:	b2da      	uxtb	r2, r3
 800799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799c:	701a      	strb	r2, [r3, #0]
      i++;
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	3301      	adds	r3, #1
 80079a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80079a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a6:	3301      	adds	r3, #1
 80079a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80079aa:	8bfb      	ldrh	r3, [r7, #30]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80079b0:	8bfb      	ldrh	r3, [r7, #30]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1ea      	bne.n	800798c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80079b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	372c      	adds	r7, #44	@ 0x2c
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d12c      	bne.n	8007a3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	015a      	lsls	r2, r3, #5
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4413      	add	r3, r2
 80079e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	db12      	blt.n	8007a18 <USB_EPSetStall+0x54>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00f      	beq.n	8007a18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	0151      	lsls	r1, r2, #5
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	440a      	add	r2, r1
 8007a2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	e02b      	b.n	8007a92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	db12      	blt.n	8007a72 <USB_EPSetStall+0xae>
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00f      	beq.n	8007a72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	0151      	lsls	r1, r2, #5
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	440a      	add	r2, r1
 8007a68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	0151      	lsls	r1, r2, #5
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	440a      	add	r2, r1
 8007a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	785b      	ldrb	r3, [r3, #1]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d128      	bne.n	8007b0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	0151      	lsls	r1, r2, #5
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	440a      	add	r2, r1
 8007ad2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ad6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ada:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	791b      	ldrb	r3, [r3, #4]
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d003      	beq.n	8007aec <USB_EPClearStall+0x4c>
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	791b      	ldrb	r3, [r3, #4]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d138      	bne.n	8007b5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	0151      	lsls	r1, r2, #5
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	440a      	add	r2, r1
 8007b02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	e027      	b.n	8007b5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	791b      	ldrb	r3, [r3, #4]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d003      	beq.n	8007b3e <USB_EPClearStall+0x9e>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	791b      	ldrb	r3, [r3, #4]
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d10f      	bne.n	8007b5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	015a      	lsls	r2, r3, #5
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	4413      	add	r3, r2
 8007b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	0151      	lsls	r1, r2, #5
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	440a      	add	r2, r1
 8007b54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007b8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	78fb      	ldrb	r3, [r7, #3]
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007ba0:	68f9      	ldr	r1, [r7, #12]
 8007ba2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007be6:	f023 0302 	bic.w	r3, r3, #2
 8007bea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c14:	f023 0303 	bic.w	r3, r3, #3
 8007c18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c28:	f043 0302 	orr.w	r3, r3, #2
 8007c2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	4013      	ands	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c54:	68fb      	ldr	r3, [r7, #12]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	4013      	ands	r3, r2
 8007c84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	0c1b      	lsrs	r3, r3, #16
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b085      	sub	sp, #20
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	b29b      	uxth	r3, r3
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b087      	sub	sp, #28
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	f003 030f 	and.w	r3, r3, #15
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	fa22 f303 	lsr.w	r3, r2, r3
 8007d36:	01db      	lsls	r3, r3, #7
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	4013      	ands	r3, r2
 8007d52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d54:	68bb      	ldr	r3, [r7, #8]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
	...

08007d80 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4b09      	ldr	r3, [pc, #36]	@ (8007dc4 <USB_ActivateSetup+0x44>)
 8007d9e:	4013      	ands	r3, r2
 8007da0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007db4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	fffff800 	.word	0xfffff800

08007dc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	333c      	adds	r3, #60	@ 0x3c
 8007dde:	3304      	adds	r3, #4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	4a26      	ldr	r2, [pc, #152]	@ (8007e80 <USB_EP0_OutStart+0xb8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d90a      	bls.n	8007e02 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007df8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dfc:	d101      	bne.n	8007e02 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e037      	b.n	8007e72 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e08:	461a      	mov	r2, r3
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e30:	f043 0318 	orr.w	r3, r3, #24
 8007e34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e44:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007e48:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e4a:	7afb      	ldrb	r3, [r7, #11]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d10f      	bne.n	8007e70 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e56:	461a      	mov	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e6a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007e6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	4f54300a 	.word	0x4f54300a

08007e84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3301      	adds	r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e9c:	d901      	bls.n	8007ea2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e01b      	b.n	8007eda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	daf2      	bge.n	8007e90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	f043 0201 	orr.w	r2, r3, #1
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ec6:	d901      	bls.n	8007ecc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e006      	b.n	8007eda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	f003 0301 	and.w	r3, r3, #1
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d0f0      	beq.n	8007eba <USB_CoreReset+0x36>

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
	...

08007ee8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ef4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007ef8:	f002 fd8c 	bl	800aa14 <malloc>
 8007efc:	4603      	mov	r3, r0
 8007efe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	32b0      	adds	r2, #176	@ 0xb0
 8007f10:	2100      	movs	r1, #0
 8007f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007f16:	2302      	movs	r3, #2
 8007f18:	e0d4      	b.n	80080c4 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007f1a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007f1e:	2100      	movs	r1, #0
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f002 fe35 	bl	800ab90 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	32b0      	adds	r2, #176	@ 0xb0
 8007f30:	68f9      	ldr	r1, [r7, #12]
 8007f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	32b0      	adds	r2, #176	@ 0xb0
 8007f40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	7c1b      	ldrb	r3, [r3, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d138      	bne.n	8007fc4 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f52:	4b5e      	ldr	r3, [pc, #376]	@ (80080cc <USBD_CDC_Init+0x1e4>)
 8007f54:	7819      	ldrb	r1, [r3, #0]
 8007f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f002 fbb6 	bl	800a6ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f62:	4b5a      	ldr	r3, [pc, #360]	@ (80080cc <USBD_CDC_Init+0x1e4>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	f003 020f 	and.w	r2, r3, #15
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	3324      	adds	r3, #36	@ 0x24
 8007f78:	2201      	movs	r2, #1
 8007f7a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f7c:	4b54      	ldr	r3, [pc, #336]	@ (80080d0 <USBD_CDC_Init+0x1e8>)
 8007f7e:	7819      	ldrb	r1, [r3, #0]
 8007f80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f84:	2202      	movs	r2, #2
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f002 fba1 	bl	800a6ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f8c:	4b50      	ldr	r3, [pc, #320]	@ (80080d0 <USBD_CDC_Init+0x1e8>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	f003 020f 	and.w	r2, r3, #15
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	4613      	mov	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	440b      	add	r3, r1
 8007fa0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007fa8:	4b4a      	ldr	r3, [pc, #296]	@ (80080d4 <USBD_CDC_Init+0x1ec>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	f003 020f 	and.w	r2, r3, #15
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	3326      	adds	r3, #38	@ 0x26
 8007fbe:	2210      	movs	r2, #16
 8007fc0:	801a      	strh	r2, [r3, #0]
 8007fc2:	e035      	b.n	8008030 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007fc4:	4b41      	ldr	r3, [pc, #260]	@ (80080cc <USBD_CDC_Init+0x1e4>)
 8007fc6:	7819      	ldrb	r1, [r3, #0]
 8007fc8:	2340      	movs	r3, #64	@ 0x40
 8007fca:	2202      	movs	r2, #2
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f002 fb7e 	bl	800a6ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80080cc <USBD_CDC_Init+0x1e4>)
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	f003 020f 	and.w	r2, r3, #15
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	3324      	adds	r3, #36	@ 0x24
 8007fe8:	2201      	movs	r2, #1
 8007fea:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007fec:	4b38      	ldr	r3, [pc, #224]	@ (80080d0 <USBD_CDC_Init+0x1e8>)
 8007fee:	7819      	ldrb	r1, [r3, #0]
 8007ff0:	2340      	movs	r3, #64	@ 0x40
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f002 fb6a 	bl	800a6ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ffa:	4b35      	ldr	r3, [pc, #212]	@ (80080d0 <USBD_CDC_Init+0x1e8>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f003 020f 	and.w	r2, r3, #15
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	440b      	add	r3, r1
 800800e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008012:	2201      	movs	r2, #1
 8008014:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008016:	4b2f      	ldr	r3, [pc, #188]	@ (80080d4 <USBD_CDC_Init+0x1ec>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	f003 020f 	and.w	r2, r3, #15
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	440b      	add	r3, r1
 800802a:	3326      	adds	r3, #38	@ 0x26
 800802c:	2210      	movs	r2, #16
 800802e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008030:	4b28      	ldr	r3, [pc, #160]	@ (80080d4 <USBD_CDC_Init+0x1ec>)
 8008032:	7819      	ldrb	r1, [r3, #0]
 8008034:	2308      	movs	r3, #8
 8008036:	2203      	movs	r2, #3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f002 fb48 	bl	800a6ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800803e:	4b25      	ldr	r3, [pc, #148]	@ (80080d4 <USBD_CDC_Init+0x1ec>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	f003 020f 	and.w	r2, r3, #15
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	4613      	mov	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	440b      	add	r3, r1
 8008052:	3324      	adds	r3, #36	@ 0x24
 8008054:	2201      	movs	r2, #1
 8008056:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	33b0      	adds	r3, #176	@ 0xb0
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800808e:	2302      	movs	r3, #2
 8008090:	e018      	b.n	80080c4 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	7c1b      	ldrb	r3, [r3, #16]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10a      	bne.n	80080b0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800809a:	4b0d      	ldr	r3, [pc, #52]	@ (80080d0 <USBD_CDC_Init+0x1e8>)
 800809c:	7819      	ldrb	r1, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f002 fbff 	bl	800a8ac <USBD_LL_PrepareReceive>
 80080ae:	e008      	b.n	80080c2 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080b0:	4b07      	ldr	r3, [pc, #28]	@ (80080d0 <USBD_CDC_Init+0x1e8>)
 80080b2:	7819      	ldrb	r1, [r3, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080ba:	2340      	movs	r3, #64	@ 0x40
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f002 fbf5 	bl	800a8ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	20000097 	.word	0x20000097
 80080d0:	20000098 	.word	0x20000098
 80080d4:	20000099 	.word	0x20000099

080080d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80080e4:	4b3a      	ldr	r3, [pc, #232]	@ (80081d0 <USBD_CDC_DeInit+0xf8>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f002 fb15 	bl	800a71a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80080f0:	4b37      	ldr	r3, [pc, #220]	@ (80081d0 <USBD_CDC_DeInit+0xf8>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	f003 020f 	and.w	r2, r3, #15
 80080f8:	6879      	ldr	r1, [r7, #4]
 80080fa:	4613      	mov	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4413      	add	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	440b      	add	r3, r1
 8008104:	3324      	adds	r3, #36	@ 0x24
 8008106:	2200      	movs	r2, #0
 8008108:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800810a:	4b32      	ldr	r3, [pc, #200]	@ (80081d4 <USBD_CDC_DeInit+0xfc>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f002 fb02 	bl	800a71a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008116:	4b2f      	ldr	r3, [pc, #188]	@ (80081d4 <USBD_CDC_DeInit+0xfc>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	f003 020f 	and.w	r2, r3, #15
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	440b      	add	r3, r1
 800812a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800812e:	2200      	movs	r2, #0
 8008130:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008132:	4b29      	ldr	r3, [pc, #164]	@ (80081d8 <USBD_CDC_DeInit+0x100>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f002 faee 	bl	800a71a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800813e:	4b26      	ldr	r3, [pc, #152]	@ (80081d8 <USBD_CDC_DeInit+0x100>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	f003 020f 	and.w	r2, r3, #15
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	3324      	adds	r3, #36	@ 0x24
 8008154:	2200      	movs	r2, #0
 8008156:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008158:	4b1f      	ldr	r3, [pc, #124]	@ (80081d8 <USBD_CDC_DeInit+0x100>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	f003 020f 	and.w	r2, r3, #15
 8008160:	6879      	ldr	r1, [r7, #4]
 8008162:	4613      	mov	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	3326      	adds	r3, #38	@ 0x26
 800816e:	2200      	movs	r2, #0
 8008170:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	32b0      	adds	r2, #176	@ 0xb0
 800817c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d01f      	beq.n	80081c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	33b0      	adds	r3, #176	@ 0xb0
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	32b0      	adds	r2, #176	@ 0xb0
 80081a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f002 fc3c 	bl	800aa24 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	32b0      	adds	r2, #176	@ 0xb0
 80081b6:	2100      	movs	r1, #0
 80081b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000097 	.word	0x20000097
 80081d4:	20000098 	.word	0x20000098
 80081d8:	20000099 	.word	0x20000099

080081dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	32b0      	adds	r2, #176	@ 0xb0
 80081f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008208:	2303      	movs	r3, #3
 800820a:	e0bf      	b.n	800838c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008214:	2b00      	cmp	r3, #0
 8008216:	d050      	beq.n	80082ba <USBD_CDC_Setup+0xde>
 8008218:	2b20      	cmp	r3, #32
 800821a:	f040 80af 	bne.w	800837c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	88db      	ldrh	r3, [r3, #6]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d03a      	beq.n	800829c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	b25b      	sxtb	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	da1b      	bge.n	8008268 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	33b0      	adds	r3, #176	@ 0xb0
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008246:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	88d2      	ldrh	r2, [r2, #6]
 800824c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	88db      	ldrh	r3, [r3, #6]
 8008252:	2b07      	cmp	r3, #7
 8008254:	bf28      	it	cs
 8008256:	2307      	movcs	r3, #7
 8008258:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	89fa      	ldrh	r2, [r7, #14]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 fdbd 	bl	8009de0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008266:	e090      	b.n	800838a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	785a      	ldrb	r2, [r3, #1]
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	88db      	ldrh	r3, [r3, #6]
 8008276:	2b3f      	cmp	r3, #63	@ 0x3f
 8008278:	d803      	bhi.n	8008282 <USBD_CDC_Setup+0xa6>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	88db      	ldrh	r3, [r3, #6]
 800827e:	b2da      	uxtb	r2, r3
 8008280:	e000      	b.n	8008284 <USBD_CDC_Setup+0xa8>
 8008282:	2240      	movs	r2, #64	@ 0x40
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800828a:	6939      	ldr	r1, [r7, #16]
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008292:	461a      	mov	r2, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 fdcf 	bl	8009e38 <USBD_CtlPrepareRx>
      break;
 800829a:	e076      	b.n	800838a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	33b0      	adds	r3, #176	@ 0xb0
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	7850      	ldrb	r0, [r2, #1]
 80082b2:	2200      	movs	r2, #0
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	4798      	blx	r3
      break;
 80082b8:	e067      	b.n	800838a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b0b      	cmp	r3, #11
 80082c0:	d851      	bhi.n	8008366 <USBD_CDC_Setup+0x18a>
 80082c2:	a201      	add	r2, pc, #4	@ (adr r2, 80082c8 <USBD_CDC_Setup+0xec>)
 80082c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c8:	080082f9 	.word	0x080082f9
 80082cc:	08008375 	.word	0x08008375
 80082d0:	08008367 	.word	0x08008367
 80082d4:	08008367 	.word	0x08008367
 80082d8:	08008367 	.word	0x08008367
 80082dc:	08008367 	.word	0x08008367
 80082e0:	08008367 	.word	0x08008367
 80082e4:	08008367 	.word	0x08008367
 80082e8:	08008367 	.word	0x08008367
 80082ec:	08008367 	.word	0x08008367
 80082f0:	08008323 	.word	0x08008323
 80082f4:	0800834d 	.word	0x0800834d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b03      	cmp	r3, #3
 8008302:	d107      	bne.n	8008314 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008304:	f107 030a 	add.w	r3, r7, #10
 8008308:	2202      	movs	r2, #2
 800830a:	4619      	mov	r1, r3
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f001 fd67 	bl	8009de0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008312:	e032      	b.n	800837a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 fce5 	bl	8009ce6 <USBD_CtlError>
            ret = USBD_FAIL;
 800831c:	2303      	movs	r3, #3
 800831e:	75fb      	strb	r3, [r7, #23]
          break;
 8008320:	e02b      	b.n	800837a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b03      	cmp	r3, #3
 800832c:	d107      	bne.n	800833e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800832e:	f107 030d 	add.w	r3, r7, #13
 8008332:	2201      	movs	r2, #1
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 fd52 	bl	8009de0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800833c:	e01d      	b.n	800837a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f001 fcd0 	bl	8009ce6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008346:	2303      	movs	r3, #3
 8008348:	75fb      	strb	r3, [r7, #23]
          break;
 800834a:	e016      	b.n	800837a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b03      	cmp	r3, #3
 8008356:	d00f      	beq.n	8008378 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 fcc3 	bl	8009ce6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008360:	2303      	movs	r3, #3
 8008362:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008364:	e008      	b.n	8008378 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008366:	6839      	ldr	r1, [r7, #0]
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 fcbc 	bl	8009ce6 <USBD_CtlError>
          ret = USBD_FAIL;
 800836e:	2303      	movs	r3, #3
 8008370:	75fb      	strb	r3, [r7, #23]
          break;
 8008372:	e002      	b.n	800837a <USBD_CDC_Setup+0x19e>
          break;
 8008374:	bf00      	nop
 8008376:	e008      	b.n	800838a <USBD_CDC_Setup+0x1ae>
          break;
 8008378:	bf00      	nop
      }
      break;
 800837a:	e006      	b.n	800838a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 fcb1 	bl	8009ce6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008384:	2303      	movs	r3, #3
 8008386:	75fb      	strb	r3, [r7, #23]
      break;
 8008388:	bf00      	nop
  }

  return (uint8_t)ret;
 800838a:	7dfb      	ldrb	r3, [r7, #23]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80083a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	32b0      	adds	r2, #176	@ 0xb0
 80083b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e065      	b.n	800848a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	32b0      	adds	r2, #176	@ 0xb0
 80083c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	f003 020f 	and.w	r2, r3, #15
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	4613      	mov	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4413      	add	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	440b      	add	r3, r1
 80083e0:	3318      	adds	r3, #24
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d02f      	beq.n	8008448 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80083e8:	78fb      	ldrb	r3, [r7, #3]
 80083ea:	f003 020f 	and.w	r2, r3, #15
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4613      	mov	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	3318      	adds	r3, #24
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	78fb      	ldrb	r3, [r7, #3]
 8008400:	f003 010f 	and.w	r1, r3, #15
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	460b      	mov	r3, r1
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	440b      	add	r3, r1
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4403      	add	r3, r0
 8008410:	331c      	adds	r3, #28
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	fbb2 f1f3 	udiv	r1, r2, r3
 8008418:	fb01 f303 	mul.w	r3, r1, r3
 800841c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800841e:	2b00      	cmp	r3, #0
 8008420:	d112      	bne.n	8008448 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	f003 020f 	and.w	r2, r3, #15
 8008428:	6879      	ldr	r1, [r7, #4]
 800842a:	4613      	mov	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	440b      	add	r3, r1
 8008434:	3318      	adds	r3, #24
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800843a:	78f9      	ldrb	r1, [r7, #3]
 800843c:	2300      	movs	r3, #0
 800843e:	2200      	movs	r2, #0
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f002 fa12 	bl	800a86a <USBD_LL_Transmit>
 8008446:	e01f      	b.n	8008488 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2200      	movs	r2, #0
 800844c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	33b0      	adds	r3, #176	@ 0xb0
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d010      	beq.n	8008488 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	33b0      	adds	r3, #176	@ 0xb0
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4413      	add	r3, r2
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008484:	78fa      	ldrb	r2, [r7, #3]
 8008486:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	460b      	mov	r3, r1
 800849c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	32b0      	adds	r2, #176	@ 0xb0
 80084a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	32b0      	adds	r2, #176	@ 0xb0
 80084b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d101      	bne.n	80084c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e01a      	b.n	80084fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f002 fa10 	bl	800a8ee <USBD_LL_GetRxDataSize>
 80084ce:	4602      	mov	r2, r0
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	33b0      	adds	r3, #176	@ 0xb0
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	4413      	add	r3, r2
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80084f4:	4611      	mov	r1, r2
 80084f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	32b0      	adds	r2, #176	@ 0xb0
 8008514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008518:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d101      	bne.n	8008524 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008520:	2303      	movs	r3, #3
 8008522:	e024      	b.n	800856e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	33b0      	adds	r3, #176	@ 0xb0
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d019      	beq.n	800856c <USBD_CDC_EP0_RxReady+0x6a>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800853e:	2bff      	cmp	r3, #255	@ 0xff
 8008540:	d014      	beq.n	800856c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	33b0      	adds	r3, #176	@ 0xb0
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4413      	add	r3, r2
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800855a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008562:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	22ff      	movs	r2, #255	@ 0xff
 8008568:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008580:	2182      	movs	r1, #130	@ 0x82
 8008582:	4818      	ldr	r0, [pc, #96]	@ (80085e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008584:	f000 fd4f 	bl	8009026 <USBD_GetEpDesc>
 8008588:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800858a:	2101      	movs	r1, #1
 800858c:	4815      	ldr	r0, [pc, #84]	@ (80085e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800858e:	f000 fd4a 	bl	8009026 <USBD_GetEpDesc>
 8008592:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008594:	2181      	movs	r1, #129	@ 0x81
 8008596:	4813      	ldr	r0, [pc, #76]	@ (80085e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008598:	f000 fd45 	bl	8009026 <USBD_GetEpDesc>
 800859c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2210      	movs	r2, #16
 80085a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d006      	beq.n	80085be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085b8:	711a      	strb	r2, [r3, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d006      	beq.n	80085d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085cc:	711a      	strb	r2, [r3, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2243      	movs	r2, #67	@ 0x43
 80085d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80085d8:	4b02      	ldr	r3, [pc, #8]	@ (80085e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000054 	.word	0x20000054

080085e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085f0:	2182      	movs	r1, #130	@ 0x82
 80085f2:	4818      	ldr	r0, [pc, #96]	@ (8008654 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085f4:	f000 fd17 	bl	8009026 <USBD_GetEpDesc>
 80085f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085fa:	2101      	movs	r1, #1
 80085fc:	4815      	ldr	r0, [pc, #84]	@ (8008654 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085fe:	f000 fd12 	bl	8009026 <USBD_GetEpDesc>
 8008602:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008604:	2181      	movs	r1, #129	@ 0x81
 8008606:	4813      	ldr	r0, [pc, #76]	@ (8008654 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008608:	f000 fd0d 	bl	8009026 <USBD_GetEpDesc>
 800860c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2210      	movs	r2, #16
 8008618:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d006      	beq.n	800862e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	2200      	movs	r2, #0
 8008624:	711a      	strb	r2, [r3, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f042 0202 	orr.w	r2, r2, #2
 800862c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d006      	beq.n	8008642 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	711a      	strb	r2, [r3, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	f042 0202 	orr.w	r2, r2, #2
 8008640:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2243      	movs	r2, #67	@ 0x43
 8008646:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008648:	4b02      	ldr	r3, [pc, #8]	@ (8008654 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800864a:	4618      	mov	r0, r3
 800864c:	3718      	adds	r7, #24
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20000054 	.word	0x20000054

08008658 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008660:	2182      	movs	r1, #130	@ 0x82
 8008662:	4818      	ldr	r0, [pc, #96]	@ (80086c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008664:	f000 fcdf 	bl	8009026 <USBD_GetEpDesc>
 8008668:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800866a:	2101      	movs	r1, #1
 800866c:	4815      	ldr	r0, [pc, #84]	@ (80086c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800866e:	f000 fcda 	bl	8009026 <USBD_GetEpDesc>
 8008672:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008674:	2181      	movs	r1, #129	@ 0x81
 8008676:	4813      	ldr	r0, [pc, #76]	@ (80086c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008678:	f000 fcd5 	bl	8009026 <USBD_GetEpDesc>
 800867c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	2210      	movs	r2, #16
 8008688:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d006      	beq.n	800869e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2200      	movs	r2, #0
 8008694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008698:	711a      	strb	r2, [r3, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d006      	beq.n	80086b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086ac:	711a      	strb	r2, [r3, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2243      	movs	r2, #67	@ 0x43
 80086b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80086b8:	4b02      	ldr	r3, [pc, #8]	@ (80086c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	20000054 	.word	0x20000054

080086c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	220a      	movs	r2, #10
 80086d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80086d6:	4b03      	ldr	r3, [pc, #12]	@ (80086e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086d8:	4618      	mov	r0, r3
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	20000010 	.word	0x20000010

080086e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e009      	b.n	8008710 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	33b0      	adds	r3, #176	@ 0xb0
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	32b0      	adds	r2, #176	@ 0xb0
 8008732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008736:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	e008      	b.n	8008754 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	687a      	ldr	r2, [r7, #4]
 800874e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	371c      	adds	r7, #28
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	32b0      	adds	r2, #176	@ 0xb0
 8008774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008778:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008780:	2303      	movs	r3, #3
 8008782:	e004      	b.n	800878e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
	...

0800879c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	32b0      	adds	r2, #176	@ 0xb0
 80087ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80087b4:	2301      	movs	r3, #1
 80087b6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80087be:	2303      	movs	r3, #3
 80087c0:	e025      	b.n	800880e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d11f      	bne.n	800880c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80087d4:	4b10      	ldr	r3, [pc, #64]	@ (8008818 <USBD_CDC_TransmitPacket+0x7c>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	f003 020f 	and.w	r2, r3, #15
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4613      	mov	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4403      	add	r3, r0
 80087ee:	3318      	adds	r3, #24
 80087f0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80087f2:	4b09      	ldr	r3, [pc, #36]	@ (8008818 <USBD_CDC_TransmitPacket+0x7c>)
 80087f4:	7819      	ldrb	r1, [r3, #0]
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f002 f831 	bl	800a86a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800880c:	7bfb      	ldrb	r3, [r7, #15]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	20000097 	.word	0x20000097

0800881c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	32b0      	adds	r2, #176	@ 0xb0
 800882e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008832:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	32b0      	adds	r2, #176	@ 0xb0
 800883e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008846:	2303      	movs	r3, #3
 8008848:	e018      	b.n	800887c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	7c1b      	ldrb	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10a      	bne.n	8008868 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008852:	4b0c      	ldr	r3, [pc, #48]	@ (8008884 <USBD_CDC_ReceivePacket+0x68>)
 8008854:	7819      	ldrb	r1, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800885c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f002 f823 	bl	800a8ac <USBD_LL_PrepareReceive>
 8008866:	e008      	b.n	800887a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008868:	4b06      	ldr	r3, [pc, #24]	@ (8008884 <USBD_CDC_ReceivePacket+0x68>)
 800886a:	7819      	ldrb	r1, [r3, #0]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008872:	2340      	movs	r3, #64	@ 0x40
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f002 f819 	bl	800a8ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20000098 	.word	0x20000098

08008888 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	4613      	mov	r3, r2
 8008894:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800889c:	2303      	movs	r3, #3
 800889e:	e01f      	b.n	80088e0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	79fa      	ldrb	r2, [r7, #7]
 80088d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f001 fe93 	bl	800a600 <USBD_LL_Init>
 80088da:	4603      	mov	r3, r0
 80088dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088f2:	2300      	movs	r3, #0
 80088f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e025      	b.n	800894c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	32ae      	adds	r2, #174	@ 0xae
 8008912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00f      	beq.n	800893c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	32ae      	adds	r2, #174	@ 0xae
 8008926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892c:	f107 020e 	add.w	r2, r7, #14
 8008930:	4610      	mov	r0, r2
 8008932:	4798      	blx	r3
 8008934:	4602      	mov	r2, r0
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 fe9b 	bl	800a698 <USBD_LL_Start>
 8008962:	4603      	mov	r3, r0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008974:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008976:	4618      	mov	r0, r3
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr

08008982 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008998:	2b00      	cmp	r3, #0
 800899a:	d009      	beq.n	80089b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	78fa      	ldrb	r2, [r7, #3]
 80089a6:	4611      	mov	r1, r2
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	4798      	blx	r3
 80089ac:	4603      	mov	r3, r0
 80089ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	460b      	mov	r3, r1
 80089c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	78fa      	ldrb	r2, [r7, #3]
 80089d4:	4611      	mov	r1, r2
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80089e0:	2303      	movs	r3, #3
 80089e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f001 f936 	bl	8009c72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008a14:	461a      	mov	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a22:	f003 031f 	and.w	r3, r3, #31
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d01a      	beq.n	8008a60 <USBD_LL_SetupStage+0x72>
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d822      	bhi.n	8008a74 <USBD_LL_SetupStage+0x86>
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d002      	beq.n	8008a38 <USBD_LL_SetupStage+0x4a>
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d00a      	beq.n	8008a4c <USBD_LL_SetupStage+0x5e>
 8008a36:	e01d      	b.n	8008a74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fb63 	bl	800910c <USBD_StdDevReq>
 8008a46:	4603      	mov	r3, r0
 8008a48:	73fb      	strb	r3, [r7, #15]
      break;
 8008a4a:	e020      	b.n	8008a8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fbcb 	bl	80091f0 <USBD_StdItfReq>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a5e:	e016      	b.n	8008a8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fc2d 	bl	80092c8 <USBD_StdEPReq>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]
      break;
 8008a72:	e00c      	b.n	8008a8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008a7a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 fe68 	bl	800a758 <USBD_LL_StallEP>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8c:	bf00      	nop
  }

  return ret;
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008aaa:	7afb      	ldrb	r3, [r7, #11]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d16e      	bne.n	8008b8e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008ab6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	f040 8098 	bne.w	8008bf4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d913      	bls.n	8008af8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	1ad2      	subs	r2, r2, r3
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	bf28      	it	cs
 8008aea:	4613      	movcs	r3, r2
 8008aec:	461a      	mov	r2, r3
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f001 f9be 	bl	8009e72 <USBD_CtlContinueRx>
 8008af6:	e07d      	b.n	8008bf4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008afe:	f003 031f 	and.w	r3, r3, #31
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d014      	beq.n	8008b30 <USBD_LL_DataOutStage+0x98>
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d81d      	bhi.n	8008b46 <USBD_LL_DataOutStage+0xae>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <USBD_LL_DataOutStage+0x7c>
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d003      	beq.n	8008b1a <USBD_LL_DataOutStage+0x82>
 8008b12:	e018      	b.n	8008b46 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	75bb      	strb	r3, [r7, #22]
            break;
 8008b18:	e018      	b.n	8008b4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	4619      	mov	r1, r3
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 fa64 	bl	8008ff2 <USBD_CoreFindIF>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	75bb      	strb	r3, [r7, #22]
            break;
 8008b2e:	e00d      	b.n	8008b4c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	4619      	mov	r1, r3
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 fa66 	bl	800900c <USBD_CoreFindEP>
 8008b40:	4603      	mov	r3, r0
 8008b42:	75bb      	strb	r3, [r7, #22]
            break;
 8008b44:	e002      	b.n	8008b4c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	75bb      	strb	r3, [r7, #22]
            break;
 8008b4a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b4c:	7dbb      	ldrb	r3, [r7, #22]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d119      	bne.n	8008b86 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d113      	bne.n	8008b86 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b5e:	7dba      	ldrb	r2, [r7, #22]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	32ae      	adds	r2, #174	@ 0xae
 8008b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00b      	beq.n	8008b86 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008b6e:	7dba      	ldrb	r2, [r7, #22]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b76:	7dba      	ldrb	r2, [r7, #22]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	32ae      	adds	r2, #174	@ 0xae
 8008b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f001 f984 	bl	8009e94 <USBD_CtlSendStatus>
 8008b8c:	e032      	b.n	8008bf4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008b8e:	7afb      	ldrb	r3, [r7, #11]
 8008b90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	4619      	mov	r1, r3
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fa37 	bl	800900c <USBD_CoreFindEP>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ba2:	7dbb      	ldrb	r3, [r7, #22]
 8008ba4:	2bff      	cmp	r3, #255	@ 0xff
 8008ba6:	d025      	beq.n	8008bf4 <USBD_LL_DataOutStage+0x15c>
 8008ba8:	7dbb      	ldrb	r3, [r7, #22]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d122      	bne.n	8008bf4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bb4:	b2db      	uxtb	r3, r3
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d117      	bne.n	8008bea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008bba:	7dba      	ldrb	r2, [r7, #22]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	32ae      	adds	r2, #174	@ 0xae
 8008bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00f      	beq.n	8008bea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008bca:	7dba      	ldrb	r2, [r7, #22]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008bd2:	7dba      	ldrb	r2, [r7, #22]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	32ae      	adds	r2, #174	@ 0xae
 8008bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	7afa      	ldrb	r2, [r7, #11]
 8008be0:	4611      	mov	r1, r2
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	4798      	blx	r3
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
 8008bf2:	e000      	b.n	8008bf6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b086      	sub	sp, #24
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	460b      	mov	r3, r1
 8008c08:	607a      	str	r2, [r7, #4]
 8008c0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c0c:	7afb      	ldrb	r3, [r7, #11]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d16f      	bne.n	8008cf2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	3314      	adds	r3, #20
 8008c16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d15a      	bne.n	8008cd8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	689a      	ldr	r2, [r3, #8]
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d914      	bls.n	8008c58 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	1ad2      	subs	r2, r2, r3
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	461a      	mov	r2, r3
 8008c42:	6879      	ldr	r1, [r7, #4]
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f001 f8e6 	bl	8009e16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	2100      	movs	r1, #0
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f001 fe2b 	bl	800a8ac <USBD_LL_PrepareReceive>
 8008c56:	e03f      	b.n	8008cd8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d11c      	bne.n	8008c9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d316      	bcc.n	8008c9e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d20f      	bcs.n	8008c9e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2100      	movs	r1, #0
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f001 f8c7 	bl	8009e16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c90:	2300      	movs	r3, #0
 8008c92:	2200      	movs	r2, #0
 8008c94:	2100      	movs	r1, #0
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f001 fe08 	bl	800a8ac <USBD_LL_PrepareReceive>
 8008c9c:	e01c      	b.n	8008cd8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d10f      	bne.n	8008cca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cca:	2180      	movs	r1, #128	@ 0x80
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f001 fd43 	bl	800a758 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f001 f8f1 	bl	8009eba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d03a      	beq.n	8008d58 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f7ff fe42 	bl	800896c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008cf0:	e032      	b.n	8008d58 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008cf2:	7afb      	ldrb	r3, [r7, #11]
 8008cf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 f985 	bl	800900c <USBD_CoreFindEP>
 8008d02:	4603      	mov	r3, r0
 8008d04:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
 8008d08:	2bff      	cmp	r3, #255	@ 0xff
 8008d0a:	d025      	beq.n	8008d58 <USBD_LL_DataInStage+0x15a>
 8008d0c:	7dfb      	ldrb	r3, [r7, #23]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d122      	bne.n	8008d58 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b03      	cmp	r3, #3
 8008d1c:	d11c      	bne.n	8008d58 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d1e:	7dfa      	ldrb	r2, [r7, #23]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	32ae      	adds	r2, #174	@ 0xae
 8008d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d014      	beq.n	8008d58 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d2e:	7dfa      	ldrb	r2, [r7, #23]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d36:	7dfa      	ldrb	r2, [r7, #23]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	32ae      	adds	r2, #174	@ 0xae
 8008d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	7afa      	ldrb	r2, [r7, #11]
 8008d44:	4611      	mov	r1, r2
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	4798      	blx	r3
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d4e:	7dbb      	ldrb	r3, [r7, #22]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d54:	7dbb      	ldrb	r3, [r7, #22]
 8008d56:	e000      	b.n	8008d5a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d014      	beq.n	8008dc8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00e      	beq.n	8008dc8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	6852      	ldr	r2, [r2, #4]
 8008db6:	b2d2      	uxtb	r2, r2
 8008db8:	4611      	mov	r1, r2
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	4798      	blx	r3
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dc8:	2340      	movs	r3, #64	@ 0x40
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2100      	movs	r1, #0
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f001 fc7d 	bl	800a6ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2240      	movs	r2, #64	@ 0x40
 8008de0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008de4:	2340      	movs	r3, #64	@ 0x40
 8008de6:	2200      	movs	r2, #0
 8008de8:	2180      	movs	r1, #128	@ 0x80
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f001 fc6f 	bl	800a6ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2240      	movs	r2, #64	@ 0x40
 8008dfa:	621a      	str	r2, [r3, #32]

  return ret;
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b083      	sub	sp, #12
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	78fa      	ldrb	r2, [r7, #3]
 8008e16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d006      	beq.n	8008e48 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e40:	b2da      	uxtb	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2204      	movs	r2, #4
 8008e4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr

08008e5e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b083      	sub	sp, #12
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d106      	bne.n	8008e80 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d110      	bne.n	8008ec4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00b      	beq.n	8008ec4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eb2:	69db      	ldr	r3, [r3, #28]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b082      	sub	sp, #8
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	32ae      	adds	r2, #174	@ 0xae
 8008ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d101      	bne.n	8008ef0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e01c      	b.n	8008f2a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d115      	bne.n	8008f28 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	32ae      	adds	r2, #174	@ 0xae
 8008f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00b      	beq.n	8008f28 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	32ae      	adds	r2, #174	@ 0xae
 8008f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	78fa      	ldrb	r2, [r7, #3]
 8008f22:	4611      	mov	r1, r2
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b082      	sub	sp, #8
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	32ae      	adds	r2, #174	@ 0xae
 8008f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e01c      	b.n	8008f8e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d115      	bne.n	8008f8c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	32ae      	adds	r2, #174	@ 0xae
 8008f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	32ae      	adds	r2, #174	@ 0xae
 8008f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f84:	78fa      	ldrb	r2, [r7, #3]
 8008f86:	4611      	mov	r1, r2
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00e      	beq.n	8008fe8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	6852      	ldr	r2, [r2, #4]
 8008fd6:	b2d2      	uxtb	r2, r2
 8008fd8:	4611      	mov	r1, r2
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	4798      	blx	r3
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ffe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009018:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800901a:	4618      	mov	r0, r3
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b086      	sub	sp, #24
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	460b      	mov	r3, r1
 8009030:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	885b      	ldrh	r3, [r3, #2]
 8009042:	b29b      	uxth	r3, r3
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	7812      	ldrb	r2, [r2, #0]
 8009048:	4293      	cmp	r3, r2
 800904a:	d91f      	bls.n	800908c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009052:	e013      	b.n	800907c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009054:	f107 030a 	add.w	r3, r7, #10
 8009058:	4619      	mov	r1, r3
 800905a:	6978      	ldr	r0, [r7, #20]
 800905c:	f000 f81b 	bl	8009096 <USBD_GetNextDesc>
 8009060:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	785b      	ldrb	r3, [r3, #1]
 8009066:	2b05      	cmp	r3, #5
 8009068:	d108      	bne.n	800907c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	789b      	ldrb	r3, [r3, #2]
 8009072:	78fa      	ldrb	r2, [r7, #3]
 8009074:	429a      	cmp	r2, r3
 8009076:	d008      	beq.n	800908a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009078:	2300      	movs	r3, #0
 800907a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	885b      	ldrh	r3, [r3, #2]
 8009080:	b29a      	uxth	r2, r3
 8009082:	897b      	ldrh	r3, [r7, #10]
 8009084:	429a      	cmp	r2, r3
 8009086:	d8e5      	bhi.n	8009054 <USBD_GetEpDesc+0x2e>
 8009088:	e000      	b.n	800908c <USBD_GetEpDesc+0x66>
          break;
 800908a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800908c:	693b      	ldr	r3, [r7, #16]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009096:	b480      	push	{r7}
 8009098:	b085      	sub	sp, #20
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	68fa      	ldr	r2, [r7, #12]
 80090aa:	7812      	ldrb	r2, [r2, #0]
 80090ac:	4413      	add	r3, r2
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4413      	add	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090c0:	68fb      	ldr	r3, [r7, #12]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3714      	adds	r7, #20
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b087      	sub	sp, #28
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	3301      	adds	r3, #1
 80090e4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090ec:	8a3b      	ldrh	r3, [r7, #16]
 80090ee:	021b      	lsls	r3, r3, #8
 80090f0:	b21a      	sxth	r2, r3
 80090f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	b21b      	sxth	r3, r3
 80090fa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090fc:	89fb      	ldrh	r3, [r7, #14]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
	...

0800910c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009122:	2b40      	cmp	r3, #64	@ 0x40
 8009124:	d005      	beq.n	8009132 <USBD_StdDevReq+0x26>
 8009126:	2b40      	cmp	r3, #64	@ 0x40
 8009128:	d857      	bhi.n	80091da <USBD_StdDevReq+0xce>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00f      	beq.n	800914e <USBD_StdDevReq+0x42>
 800912e:	2b20      	cmp	r3, #32
 8009130:	d153      	bne.n	80091da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	32ae      	adds	r2, #174	@ 0xae
 800913c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	4798      	blx	r3
 8009148:	4603      	mov	r3, r0
 800914a:	73fb      	strb	r3, [r7, #15]
      break;
 800914c:	e04a      	b.n	80091e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	785b      	ldrb	r3, [r3, #1]
 8009152:	2b09      	cmp	r3, #9
 8009154:	d83b      	bhi.n	80091ce <USBD_StdDevReq+0xc2>
 8009156:	a201      	add	r2, pc, #4	@ (adr r2, 800915c <USBD_StdDevReq+0x50>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	080091b1 	.word	0x080091b1
 8009160:	080091c5 	.word	0x080091c5
 8009164:	080091cf 	.word	0x080091cf
 8009168:	080091bb 	.word	0x080091bb
 800916c:	080091cf 	.word	0x080091cf
 8009170:	0800918f 	.word	0x0800918f
 8009174:	08009185 	.word	0x08009185
 8009178:	080091cf 	.word	0x080091cf
 800917c:	080091a7 	.word	0x080091a7
 8009180:	08009199 	.word	0x08009199
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fa3c 	bl	8009604 <USBD_GetDescriptor>
          break;
 800918c:	e024      	b.n	80091d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fbcb 	bl	800992c <USBD_SetAddress>
          break;
 8009196:	e01f      	b.n	80091d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009198:	6839      	ldr	r1, [r7, #0]
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fc0a 	bl	80099b4 <USBD_SetConfig>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]
          break;
 80091a4:	e018      	b.n	80091d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fcad 	bl	8009b08 <USBD_GetConfig>
          break;
 80091ae:	e013      	b.n	80091d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fcde 	bl	8009b74 <USBD_GetStatus>
          break;
 80091b8:	e00e      	b.n	80091d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fd0d 	bl	8009bdc <USBD_SetFeature>
          break;
 80091c2:	e009      	b.n	80091d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091c4:	6839      	ldr	r1, [r7, #0]
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fd31 	bl	8009c2e <USBD_ClrFeature>
          break;
 80091cc:	e004      	b.n	80091d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fd88 	bl	8009ce6 <USBD_CtlError>
          break;
 80091d6:	bf00      	nop
      }
      break;
 80091d8:	e004      	b.n	80091e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fd82 	bl	8009ce6 <USBD_CtlError>
      break;
 80091e2:	bf00      	nop
  }

  return ret;
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop

080091f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009206:	2b40      	cmp	r3, #64	@ 0x40
 8009208:	d005      	beq.n	8009216 <USBD_StdItfReq+0x26>
 800920a:	2b40      	cmp	r3, #64	@ 0x40
 800920c:	d852      	bhi.n	80092b4 <USBD_StdItfReq+0xc4>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <USBD_StdItfReq+0x26>
 8009212:	2b20      	cmp	r3, #32
 8009214:	d14e      	bne.n	80092b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800921c:	b2db      	uxtb	r3, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	2b02      	cmp	r3, #2
 8009222:	d840      	bhi.n	80092a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	889b      	ldrh	r3, [r3, #4]
 8009228:	b2db      	uxtb	r3, r3
 800922a:	2b01      	cmp	r3, #1
 800922c:	d836      	bhi.n	800929c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	889b      	ldrh	r3, [r3, #4]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f7ff fedb 	bl	8008ff2 <USBD_CoreFindIF>
 800923c:	4603      	mov	r3, r0
 800923e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009240:	7bbb      	ldrb	r3, [r7, #14]
 8009242:	2bff      	cmp	r3, #255	@ 0xff
 8009244:	d01d      	beq.n	8009282 <USBD_StdItfReq+0x92>
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d11a      	bne.n	8009282 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800924c:	7bba      	ldrb	r2, [r7, #14]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	32ae      	adds	r2, #174	@ 0xae
 8009252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00f      	beq.n	800927c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800925c:	7bba      	ldrb	r2, [r7, #14]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009264:	7bba      	ldrb	r2, [r7, #14]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	32ae      	adds	r2, #174	@ 0xae
 800926a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	4798      	blx	r3
 8009276:	4603      	mov	r3, r0
 8009278:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800927a:	e004      	b.n	8009286 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009280:	e001      	b.n	8009286 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009282:	2303      	movs	r3, #3
 8009284:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	88db      	ldrh	r3, [r3, #6]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d110      	bne.n	80092b0 <USBD_StdItfReq+0xc0>
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10d      	bne.n	80092b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fdfd 	bl	8009e94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800929a:	e009      	b.n	80092b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fd21 	bl	8009ce6 <USBD_CtlError>
          break;
 80092a4:	e004      	b.n	80092b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80092a6:	6839      	ldr	r1, [r7, #0]
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fd1c 	bl	8009ce6 <USBD_CtlError>
          break;
 80092ae:	e000      	b.n	80092b2 <USBD_StdItfReq+0xc2>
          break;
 80092b0:	bf00      	nop
      }
      break;
 80092b2:	e004      	b.n	80092be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fd15 	bl	8009ce6 <USBD_CtlError>
      break;
 80092bc:	bf00      	nop
  }

  return ret;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	889b      	ldrh	r3, [r3, #4]
 80092da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092e4:	2b40      	cmp	r3, #64	@ 0x40
 80092e6:	d007      	beq.n	80092f8 <USBD_StdEPReq+0x30>
 80092e8:	2b40      	cmp	r3, #64	@ 0x40
 80092ea:	f200 817f 	bhi.w	80095ec <USBD_StdEPReq+0x324>
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d02a      	beq.n	8009348 <USBD_StdEPReq+0x80>
 80092f2:	2b20      	cmp	r3, #32
 80092f4:	f040 817a 	bne.w	80095ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80092f8:	7bbb      	ldrb	r3, [r7, #14]
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff fe85 	bl	800900c <USBD_CoreFindEP>
 8009302:	4603      	mov	r3, r0
 8009304:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009306:	7b7b      	ldrb	r3, [r7, #13]
 8009308:	2bff      	cmp	r3, #255	@ 0xff
 800930a:	f000 8174 	beq.w	80095f6 <USBD_StdEPReq+0x32e>
 800930e:	7b7b      	ldrb	r3, [r7, #13]
 8009310:	2b00      	cmp	r3, #0
 8009312:	f040 8170 	bne.w	80095f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009316:	7b7a      	ldrb	r2, [r7, #13]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800931e:	7b7a      	ldrb	r2, [r7, #13]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	32ae      	adds	r2, #174	@ 0xae
 8009324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 8163 	beq.w	80095f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009330:	7b7a      	ldrb	r2, [r7, #13]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	32ae      	adds	r2, #174	@ 0xae
 8009336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	4798      	blx	r3
 8009342:	4603      	mov	r3, r0
 8009344:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009346:	e156      	b.n	80095f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	785b      	ldrb	r3, [r3, #1]
 800934c:	2b03      	cmp	r3, #3
 800934e:	d008      	beq.n	8009362 <USBD_StdEPReq+0x9a>
 8009350:	2b03      	cmp	r3, #3
 8009352:	f300 8145 	bgt.w	80095e0 <USBD_StdEPReq+0x318>
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 809b 	beq.w	8009492 <USBD_StdEPReq+0x1ca>
 800935c:	2b01      	cmp	r3, #1
 800935e:	d03c      	beq.n	80093da <USBD_StdEPReq+0x112>
 8009360:	e13e      	b.n	80095e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b02      	cmp	r3, #2
 800936c:	d002      	beq.n	8009374 <USBD_StdEPReq+0xac>
 800936e:	2b03      	cmp	r3, #3
 8009370:	d016      	beq.n	80093a0 <USBD_StdEPReq+0xd8>
 8009372:	e02c      	b.n	80093ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009374:	7bbb      	ldrb	r3, [r7, #14]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00d      	beq.n	8009396 <USBD_StdEPReq+0xce>
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	2b80      	cmp	r3, #128	@ 0x80
 800937e:	d00a      	beq.n	8009396 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009380:	7bbb      	ldrb	r3, [r7, #14]
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 f9e7 	bl	800a758 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800938a:	2180      	movs	r1, #128	@ 0x80
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f001 f9e3 	bl	800a758 <USBD_LL_StallEP>
 8009392:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009394:	e020      	b.n	80093d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fca4 	bl	8009ce6 <USBD_CtlError>
              break;
 800939e:	e01b      	b.n	80093d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	885b      	ldrh	r3, [r3, #2]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10e      	bne.n	80093c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00b      	beq.n	80093c6 <USBD_StdEPReq+0xfe>
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	2b80      	cmp	r3, #128	@ 0x80
 80093b2:	d008      	beq.n	80093c6 <USBD_StdEPReq+0xfe>
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	88db      	ldrh	r3, [r3, #6]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d104      	bne.n	80093c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 f9c9 	bl	800a758 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fd64 	bl	8009e94 <USBD_CtlSendStatus>

              break;
 80093cc:	e004      	b.n	80093d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fc88 	bl	8009ce6 <USBD_CtlError>
              break;
 80093d6:	bf00      	nop
          }
          break;
 80093d8:	e107      	b.n	80095ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d002      	beq.n	80093ec <USBD_StdEPReq+0x124>
 80093e6:	2b03      	cmp	r3, #3
 80093e8:	d016      	beq.n	8009418 <USBD_StdEPReq+0x150>
 80093ea:	e04b      	b.n	8009484 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00d      	beq.n	800940e <USBD_StdEPReq+0x146>
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	2b80      	cmp	r3, #128	@ 0x80
 80093f6:	d00a      	beq.n	800940e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093f8:	7bbb      	ldrb	r3, [r7, #14]
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 f9ab 	bl	800a758 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009402:	2180      	movs	r1, #128	@ 0x80
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 f9a7 	bl	800a758 <USBD_LL_StallEP>
 800940a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800940c:	e040      	b.n	8009490 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800940e:	6839      	ldr	r1, [r7, #0]
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fc68 	bl	8009ce6 <USBD_CtlError>
              break;
 8009416:	e03b      	b.n	8009490 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	885b      	ldrh	r3, [r3, #2]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d136      	bne.n	800948e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009420:	7bbb      	ldrb	r3, [r7, #14]
 8009422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009426:	2b00      	cmp	r3, #0
 8009428:	d004      	beq.n	8009434 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800942a:	7bbb      	ldrb	r3, [r7, #14]
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f001 f9b1 	bl	800a796 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fd2d 	bl	8009e94 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800943a:	7bbb      	ldrb	r3, [r7, #14]
 800943c:	4619      	mov	r1, r3
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff fde4 	bl	800900c <USBD_CoreFindEP>
 8009444:	4603      	mov	r3, r0
 8009446:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009448:	7b7b      	ldrb	r3, [r7, #13]
 800944a:	2bff      	cmp	r3, #255	@ 0xff
 800944c:	d01f      	beq.n	800948e <USBD_StdEPReq+0x1c6>
 800944e:	7b7b      	ldrb	r3, [r7, #13]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d11c      	bne.n	800948e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009454:	7b7a      	ldrb	r2, [r7, #13]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800945c:	7b7a      	ldrb	r2, [r7, #13]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	32ae      	adds	r2, #174	@ 0xae
 8009462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d010      	beq.n	800948e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800946c:	7b7a      	ldrb	r2, [r7, #13]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	32ae      	adds	r2, #174	@ 0xae
 8009472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	4798      	blx	r3
 800947e:	4603      	mov	r3, r0
 8009480:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009482:	e004      	b.n	800948e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 fc2d 	bl	8009ce6 <USBD_CtlError>
              break;
 800948c:	e000      	b.n	8009490 <USBD_StdEPReq+0x1c8>
              break;
 800948e:	bf00      	nop
          }
          break;
 8009490:	e0ab      	b.n	80095ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b02      	cmp	r3, #2
 800949c:	d002      	beq.n	80094a4 <USBD_StdEPReq+0x1dc>
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d032      	beq.n	8009508 <USBD_StdEPReq+0x240>
 80094a2:	e097      	b.n	80095d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094a4:	7bbb      	ldrb	r3, [r7, #14]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <USBD_StdEPReq+0x1f2>
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	2b80      	cmp	r3, #128	@ 0x80
 80094ae:	d004      	beq.n	80094ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fc17 	bl	8009ce6 <USBD_CtlError>
                break;
 80094b8:	e091      	b.n	80095de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	da0b      	bge.n	80094da <USBD_StdEPReq+0x212>
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
 80094c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	3310      	adds	r3, #16
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	4413      	add	r3, r2
 80094d6:	3304      	adds	r3, #4
 80094d8:	e00b      	b.n	80094f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094da:	7bbb      	ldrb	r3, [r7, #14]
 80094dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094e0:	4613      	mov	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4413      	add	r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	4413      	add	r3, r2
 80094f0:	3304      	adds	r3, #4
 80094f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2202      	movs	r2, #2
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 fc6d 	bl	8009de0 <USBD_CtlSendData>
              break;
 8009506:	e06a      	b.n	80095de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800950c:	2b00      	cmp	r3, #0
 800950e:	da11      	bge.n	8009534 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009510:	7bbb      	ldrb	r3, [r7, #14]
 8009512:	f003 020f 	and.w	r2, r3, #15
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	4613      	mov	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	440b      	add	r3, r1
 8009522:	3324      	adds	r3, #36	@ 0x24
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d117      	bne.n	800955a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fbda 	bl	8009ce6 <USBD_CtlError>
                  break;
 8009532:	e054      	b.n	80095de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009534:	7bbb      	ldrb	r3, [r7, #14]
 8009536:	f003 020f 	and.w	r2, r3, #15
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	4613      	mov	r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	440b      	add	r3, r1
 8009546:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800954a:	881b      	ldrh	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d104      	bne.n	800955a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fbc7 	bl	8009ce6 <USBD_CtlError>
                  break;
 8009558:	e041      	b.n	80095de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800955a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800955e:	2b00      	cmp	r3, #0
 8009560:	da0b      	bge.n	800957a <USBD_StdEPReq+0x2b2>
 8009562:	7bbb      	ldrb	r3, [r7, #14]
 8009564:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	3310      	adds	r3, #16
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	4413      	add	r3, r2
 8009576:	3304      	adds	r3, #4
 8009578:	e00b      	b.n	8009592 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009580:	4613      	mov	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	4413      	add	r3, r2
 8009590:	3304      	adds	r3, #4
 8009592:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009594:	7bbb      	ldrb	r3, [r7, #14]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <USBD_StdEPReq+0x2d8>
 800959a:	7bbb      	ldrb	r3, [r7, #14]
 800959c:	2b80      	cmp	r3, #128	@ 0x80
 800959e:	d103      	bne.n	80095a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]
 80095a6:	e00e      	b.n	80095c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f001 f911 	bl	800a7d4 <USBD_LL_IsStallEP>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d003      	beq.n	80095c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2201      	movs	r2, #1
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	e002      	b.n	80095c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2200      	movs	r2, #0
 80095c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2202      	movs	r2, #2
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fc07 	bl	8009de0 <USBD_CtlSendData>
              break;
 80095d2:	e004      	b.n	80095de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fb85 	bl	8009ce6 <USBD_CtlError>
              break;
 80095dc:	bf00      	nop
          }
          break;
 80095de:	e004      	b.n	80095ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fb7f 	bl	8009ce6 <USBD_CtlError>
          break;
 80095e8:	bf00      	nop
      }
      break;
 80095ea:	e005      	b.n	80095f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80095ec:	6839      	ldr	r1, [r7, #0]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fb79 	bl	8009ce6 <USBD_CtlError>
      break;
 80095f4:	e000      	b.n	80095f8 <USBD_StdEPReq+0x330>
      break;
 80095f6:	bf00      	nop
  }

  return ret;
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009612:	2300      	movs	r3, #0
 8009614:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	885b      	ldrh	r3, [r3, #2]
 800961e:	0a1b      	lsrs	r3, r3, #8
 8009620:	b29b      	uxth	r3, r3
 8009622:	3b01      	subs	r3, #1
 8009624:	2b0e      	cmp	r3, #14
 8009626:	f200 8152 	bhi.w	80098ce <USBD_GetDescriptor+0x2ca>
 800962a:	a201      	add	r2, pc, #4	@ (adr r2, 8009630 <USBD_GetDescriptor+0x2c>)
 800962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009630:	080096a1 	.word	0x080096a1
 8009634:	080096b9 	.word	0x080096b9
 8009638:	080096f9 	.word	0x080096f9
 800963c:	080098cf 	.word	0x080098cf
 8009640:	080098cf 	.word	0x080098cf
 8009644:	0800986f 	.word	0x0800986f
 8009648:	0800989b 	.word	0x0800989b
 800964c:	080098cf 	.word	0x080098cf
 8009650:	080098cf 	.word	0x080098cf
 8009654:	080098cf 	.word	0x080098cf
 8009658:	080098cf 	.word	0x080098cf
 800965c:	080098cf 	.word	0x080098cf
 8009660:	080098cf 	.word	0x080098cf
 8009664:	080098cf 	.word	0x080098cf
 8009668:	0800966d 	.word	0x0800966d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00b      	beq.n	8009690 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800967e:	69db      	ldr	r3, [r3, #28]
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	7c12      	ldrb	r2, [r2, #16]
 8009684:	f107 0108 	add.w	r1, r7, #8
 8009688:	4610      	mov	r0, r2
 800968a:	4798      	blx	r3
 800968c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800968e:	e126      	b.n	80098de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 fb27 	bl	8009ce6 <USBD_CtlError>
        err++;
 8009698:	7afb      	ldrb	r3, [r7, #11]
 800969a:	3301      	adds	r3, #1
 800969c:	72fb      	strb	r3, [r7, #11]
      break;
 800969e:	e11e      	b.n	80098de <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	7c12      	ldrb	r2, [r2, #16]
 80096ac:	f107 0108 	add.w	r1, r7, #8
 80096b0:	4610      	mov	r0, r2
 80096b2:	4798      	blx	r3
 80096b4:	60f8      	str	r0, [r7, #12]
      break;
 80096b6:	e112      	b.n	80098de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	7c1b      	ldrb	r3, [r3, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10d      	bne.n	80096dc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c8:	f107 0208 	add.w	r2, r7, #8
 80096cc:	4610      	mov	r0, r2
 80096ce:	4798      	blx	r3
 80096d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3301      	adds	r3, #1
 80096d6:	2202      	movs	r2, #2
 80096d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80096da:	e100      	b.n	80098de <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e4:	f107 0208 	add.w	r2, r7, #8
 80096e8:	4610      	mov	r0, r2
 80096ea:	4798      	blx	r3
 80096ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	3301      	adds	r3, #1
 80096f2:	2202      	movs	r2, #2
 80096f4:	701a      	strb	r2, [r3, #0]
      break;
 80096f6:	e0f2      	b.n	80098de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	885b      	ldrh	r3, [r3, #2]
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	2b05      	cmp	r3, #5
 8009700:	f200 80ac 	bhi.w	800985c <USBD_GetDescriptor+0x258>
 8009704:	a201      	add	r2, pc, #4	@ (adr r2, 800970c <USBD_GetDescriptor+0x108>)
 8009706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970a:	bf00      	nop
 800970c:	08009725 	.word	0x08009725
 8009710:	08009759 	.word	0x08009759
 8009714:	0800978d 	.word	0x0800978d
 8009718:	080097c1 	.word	0x080097c1
 800971c:	080097f5 	.word	0x080097f5
 8009720:	08009829 	.word	0x08009829
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	7c12      	ldrb	r2, [r2, #16]
 800973c:	f107 0108 	add.w	r1, r7, #8
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3
 8009744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009746:	e091      	b.n	800986c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 facb 	bl	8009ce6 <USBD_CtlError>
            err++;
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	3301      	adds	r3, #1
 8009754:	72fb      	strb	r3, [r7, #11]
          break;
 8009756:	e089      	b.n	800986c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	7c12      	ldrb	r2, [r2, #16]
 8009770:	f107 0108 	add.w	r1, r7, #8
 8009774:	4610      	mov	r0, r2
 8009776:	4798      	blx	r3
 8009778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800977a:	e077      	b.n	800986c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fab1 	bl	8009ce6 <USBD_CtlError>
            err++;
 8009784:	7afb      	ldrb	r3, [r7, #11]
 8009786:	3301      	adds	r3, #1
 8009788:	72fb      	strb	r3, [r7, #11]
          break;
 800978a:	e06f      	b.n	800986c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7c12      	ldrb	r2, [r2, #16]
 80097a4:	f107 0108 	add.w	r1, r7, #8
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
 80097ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ae:	e05d      	b.n	800986c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa97 	bl	8009ce6 <USBD_CtlError>
            err++;
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	3301      	adds	r3, #1
 80097bc:	72fb      	strb	r3, [r7, #11]
          break;
 80097be:	e055      	b.n	800986c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00b      	beq.n	80097e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	7c12      	ldrb	r2, [r2, #16]
 80097d8:	f107 0108 	add.w	r1, r7, #8
 80097dc:	4610      	mov	r0, r2
 80097de:	4798      	blx	r3
 80097e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097e2:	e043      	b.n	800986c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa7d 	bl	8009ce6 <USBD_CtlError>
            err++;
 80097ec:	7afb      	ldrb	r3, [r7, #11]
 80097ee:	3301      	adds	r3, #1
 80097f0:	72fb      	strb	r3, [r7, #11]
          break;
 80097f2:	e03b      	b.n	800986c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00b      	beq.n	8009818 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	7c12      	ldrb	r2, [r2, #16]
 800980c:	f107 0108 	add.w	r1, r7, #8
 8009810:	4610      	mov	r0, r2
 8009812:	4798      	blx	r3
 8009814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009816:	e029      	b.n	800986c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009818:	6839      	ldr	r1, [r7, #0]
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fa63 	bl	8009ce6 <USBD_CtlError>
            err++;
 8009820:	7afb      	ldrb	r3, [r7, #11]
 8009822:	3301      	adds	r3, #1
 8009824:	72fb      	strb	r3, [r7, #11]
          break;
 8009826:	e021      	b.n	800986c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00b      	beq.n	800984c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	7c12      	ldrb	r2, [r2, #16]
 8009840:	f107 0108 	add.w	r1, r7, #8
 8009844:	4610      	mov	r0, r2
 8009846:	4798      	blx	r3
 8009848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800984a:	e00f      	b.n	800986c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fa49 	bl	8009ce6 <USBD_CtlError>
            err++;
 8009854:	7afb      	ldrb	r3, [r7, #11]
 8009856:	3301      	adds	r3, #1
 8009858:	72fb      	strb	r3, [r7, #11]
          break;
 800985a:	e007      	b.n	800986c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fa41 	bl	8009ce6 <USBD_CtlError>
          err++;
 8009864:	7afb      	ldrb	r3, [r7, #11]
 8009866:	3301      	adds	r3, #1
 8009868:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800986a:	bf00      	nop
      }
      break;
 800986c:	e037      	b.n	80098de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	7c1b      	ldrb	r3, [r3, #16]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d109      	bne.n	800988a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800987c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800987e:	f107 0208 	add.w	r2, r7, #8
 8009882:	4610      	mov	r0, r2
 8009884:	4798      	blx	r3
 8009886:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009888:	e029      	b.n	80098de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fa2a 	bl	8009ce6 <USBD_CtlError>
        err++;
 8009892:	7afb      	ldrb	r3, [r7, #11]
 8009894:	3301      	adds	r3, #1
 8009896:	72fb      	strb	r3, [r7, #11]
      break;
 8009898:	e021      	b.n	80098de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	7c1b      	ldrb	r3, [r3, #16]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10d      	bne.n	80098be <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098aa:	f107 0208 	add.w	r2, r7, #8
 80098ae:	4610      	mov	r0, r2
 80098b0:	4798      	blx	r3
 80098b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	3301      	adds	r3, #1
 80098b8:	2207      	movs	r2, #7
 80098ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098bc:	e00f      	b.n	80098de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 fa10 	bl	8009ce6 <USBD_CtlError>
        err++;
 80098c6:	7afb      	ldrb	r3, [r7, #11]
 80098c8:	3301      	adds	r3, #1
 80098ca:	72fb      	strb	r3, [r7, #11]
      break;
 80098cc:	e007      	b.n	80098de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fa08 	bl	8009ce6 <USBD_CtlError>
      err++;
 80098d6:	7afb      	ldrb	r3, [r7, #11]
 80098d8:	3301      	adds	r3, #1
 80098da:	72fb      	strb	r3, [r7, #11]
      break;
 80098dc:	bf00      	nop
  }

  if (err != 0U)
 80098de:	7afb      	ldrb	r3, [r7, #11]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d11e      	bne.n	8009922 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	88db      	ldrh	r3, [r3, #6]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d016      	beq.n	800991a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80098ec:	893b      	ldrh	r3, [r7, #8]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00e      	beq.n	8009910 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	88da      	ldrh	r2, [r3, #6]
 80098f6:	893b      	ldrh	r3, [r7, #8]
 80098f8:	4293      	cmp	r3, r2
 80098fa:	bf28      	it	cs
 80098fc:	4613      	movcs	r3, r2
 80098fe:	b29b      	uxth	r3, r3
 8009900:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009902:	893b      	ldrh	r3, [r7, #8]
 8009904:	461a      	mov	r2, r3
 8009906:	68f9      	ldr	r1, [r7, #12]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fa69 	bl	8009de0 <USBD_CtlSendData>
 800990e:	e009      	b.n	8009924 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f9e7 	bl	8009ce6 <USBD_CtlError>
 8009918:	e004      	b.n	8009924 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 faba 	bl	8009e94 <USBD_CtlSendStatus>
 8009920:	e000      	b.n	8009924 <USBD_GetDescriptor+0x320>
    return;
 8009922:	bf00      	nop
  }
}
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop

0800992c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	889b      	ldrh	r3, [r3, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d131      	bne.n	80099a2 <USBD_SetAddress+0x76>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	88db      	ldrh	r3, [r3, #6]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d12d      	bne.n	80099a2 <USBD_SetAddress+0x76>
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	885b      	ldrh	r3, [r3, #2]
 800994a:	2b7f      	cmp	r3, #127	@ 0x7f
 800994c:	d829      	bhi.n	80099a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	885b      	ldrh	r3, [r3, #2]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009958:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009960:	b2db      	uxtb	r3, r3
 8009962:	2b03      	cmp	r3, #3
 8009964:	d104      	bne.n	8009970 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f9bc 	bl	8009ce6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800996e:	e01d      	b.n	80099ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	7bfa      	ldrb	r2, [r7, #15]
 8009974:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 ff55 	bl	800a82c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 fa86 	bl	8009e94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d004      	beq.n	8009998 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2202      	movs	r2, #2
 8009992:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009996:	e009      	b.n	80099ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099a0:	e004      	b.n	80099ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f99e 	bl	8009ce6 <USBD_CtlError>
  }
}
 80099aa:	bf00      	nop
 80099ac:	bf00      	nop
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	885b      	ldrh	r3, [r3, #2]
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	4b4e      	ldr	r3, [pc, #312]	@ (8009b04 <USBD_SetConfig+0x150>)
 80099ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80099cc:	4b4d      	ldr	r3, [pc, #308]	@ (8009b04 <USBD_SetConfig+0x150>)
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d905      	bls.n	80099e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f985 	bl	8009ce6 <USBD_CtlError>
    return USBD_FAIL;
 80099dc:	2303      	movs	r3, #3
 80099de:	e08c      	b.n	8009afa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d002      	beq.n	80099f2 <USBD_SetConfig+0x3e>
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d029      	beq.n	8009a44 <USBD_SetConfig+0x90>
 80099f0:	e075      	b.n	8009ade <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80099f2:	4b44      	ldr	r3, [pc, #272]	@ (8009b04 <USBD_SetConfig+0x150>)
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d020      	beq.n	8009a3c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80099fa:	4b42      	ldr	r3, [pc, #264]	@ (8009b04 <USBD_SetConfig+0x150>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a04:	4b3f      	ldr	r3, [pc, #252]	@ (8009b04 <USBD_SetConfig+0x150>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7fe ffb9 	bl	8008982 <USBD_SetClassConfig>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d008      	beq.n	8009a2c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f962 	bl	8009ce6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2202      	movs	r2, #2
 8009a26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a2a:	e065      	b.n	8009af8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fa31 	bl	8009e94 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2203      	movs	r2, #3
 8009a36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009a3a:	e05d      	b.n	8009af8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fa29 	bl	8009e94 <USBD_CtlSendStatus>
      break;
 8009a42:	e059      	b.n	8009af8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009a44:	4b2f      	ldr	r3, [pc, #188]	@ (8009b04 <USBD_SetConfig+0x150>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d112      	bne.n	8009a72 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2202      	movs	r2, #2
 8009a50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009a54:	4b2b      	ldr	r3, [pc, #172]	@ (8009b04 <USBD_SetConfig+0x150>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	461a      	mov	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a5e:	4b29      	ldr	r3, [pc, #164]	@ (8009b04 <USBD_SetConfig+0x150>)
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7fe ffa8 	bl	80089ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fa12 	bl	8009e94 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a70:	e042      	b.n	8009af8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a72:	4b24      	ldr	r3, [pc, #144]	@ (8009b04 <USBD_SetConfig+0x150>)
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d02a      	beq.n	8009ad6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	4619      	mov	r1, r3
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7fe ff96 	bl	80089ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8009b04 <USBD_SetConfig+0x150>)
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	461a      	mov	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a98:	4b1a      	ldr	r3, [pc, #104]	@ (8009b04 <USBD_SetConfig+0x150>)
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7fe ff6f 	bl	8008982 <USBD_SetClassConfig>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00f      	beq.n	8009ace <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f918 	bl	8009ce6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7fe ff7b 	bl	80089ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009acc:	e014      	b.n	8009af8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f9e0 	bl	8009e94 <USBD_CtlSendStatus>
      break;
 8009ad4:	e010      	b.n	8009af8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f9dc 	bl	8009e94 <USBD_CtlSendStatus>
      break;
 8009adc:	e00c      	b.n	8009af8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f900 	bl	8009ce6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ae6:	4b07      	ldr	r3, [pc, #28]	@ (8009b04 <USBD_SetConfig+0x150>)
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7fe ff64 	bl	80089ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009af2:	2303      	movs	r3, #3
 8009af4:	73fb      	strb	r3, [r7, #15]
      break;
 8009af6:	bf00      	nop
  }

  return ret;
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	2006dbb4 	.word	0x2006dbb4

08009b08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	88db      	ldrh	r3, [r3, #6]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d004      	beq.n	8009b24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f8e2 	bl	8009ce6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b22:	e023      	b.n	8009b6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	dc02      	bgt.n	8009b36 <USBD_GetConfig+0x2e>
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	dc03      	bgt.n	8009b3c <USBD_GetConfig+0x34>
 8009b34:	e015      	b.n	8009b62 <USBD_GetConfig+0x5a>
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d00b      	beq.n	8009b52 <USBD_GetConfig+0x4a>
 8009b3a:	e012      	b.n	8009b62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	3308      	adds	r3, #8
 8009b46:	2201      	movs	r2, #1
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f948 	bl	8009de0 <USBD_CtlSendData>
        break;
 8009b50:	e00c      	b.n	8009b6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3304      	adds	r3, #4
 8009b56:	2201      	movs	r2, #1
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f940 	bl	8009de0 <USBD_CtlSendData>
        break;
 8009b60:	e004      	b.n	8009b6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f8be 	bl	8009ce6 <USBD_CtlError>
        break;
 8009b6a:	bf00      	nop
}
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	3b01      	subs	r3, #1
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d81e      	bhi.n	8009bca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	88db      	ldrh	r3, [r3, #6]
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d004      	beq.n	8009b9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 f8a5 	bl	8009ce6 <USBD_CtlError>
        break;
 8009b9c:	e01a      	b.n	8009bd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d005      	beq.n	8009bba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	f043 0202 	orr.w	r2, r3, #2
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	330c      	adds	r3, #12
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f90c 	bl	8009de0 <USBD_CtlSendData>
      break;
 8009bc8:	e004      	b.n	8009bd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f88a 	bl	8009ce6 <USBD_CtlError>
      break;
 8009bd2:	bf00      	nop
  }
}
 8009bd4:	bf00      	nop
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	885b      	ldrh	r3, [r3, #2]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d107      	bne.n	8009bfe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f94c 	bl	8009e94 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009bfc:	e013      	b.n	8009c26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	885b      	ldrh	r3, [r3, #2]
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d10b      	bne.n	8009c1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	889b      	ldrh	r3, [r3, #4]
 8009c0a:	0a1b      	lsrs	r3, r3, #8
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f93c 	bl	8009e94 <USBD_CtlSendStatus>
}
 8009c1c:	e003      	b.n	8009c26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c1e:	6839      	ldr	r1, [r7, #0]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f860 	bl	8009ce6 <USBD_CtlError>
}
 8009c26:	bf00      	nop
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b082      	sub	sp, #8
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	3b01      	subs	r3, #1
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d80b      	bhi.n	8009c5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	885b      	ldrh	r3, [r3, #2]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d10c      	bne.n	8009c68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f91c 	bl	8009e94 <USBD_CtlSendStatus>
      }
      break;
 8009c5c:	e004      	b.n	8009c68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f840 	bl	8009ce6 <USBD_CtlError>
      break;
 8009c66:	e000      	b.n	8009c6a <USBD_ClrFeature+0x3c>
      break;
 8009c68:	bf00      	nop
  }
}
 8009c6a:	bf00      	nop
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	781a      	ldrb	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	781a      	ldrb	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f7ff fa16 	bl	80090ce <SWAPBYTE>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3301      	adds	r3, #1
 8009cae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009cb6:	68f8      	ldr	r0, [r7, #12]
 8009cb8:	f7ff fa09 	bl	80090ce <SWAPBYTE>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f7ff f9fc 	bl	80090ce <SWAPBYTE>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	461a      	mov	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	80da      	strh	r2, [r3, #6]
}
 8009cde:	bf00      	nop
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b082      	sub	sp, #8
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cf0:	2180      	movs	r1, #128	@ 0x80
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fd30 	bl	800a758 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fd2c 	bl	800a758 <USBD_LL_StallEP>
}
 8009d00:	bf00      	nop
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d14:	2300      	movs	r3, #0
 8009d16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d042      	beq.n	8009da4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009d22:	6938      	ldr	r0, [r7, #16]
 8009d24:	f000 f842 	bl	8009dac <USBD_GetLen>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d32:	d808      	bhi.n	8009d46 <USBD_GetString+0x3e>
 8009d34:	6938      	ldr	r0, [r7, #16]
 8009d36:	f000 f839 	bl	8009dac <USBD_GetLen>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	005b      	lsls	r3, r3, #1
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	e001      	b.n	8009d4a <USBD_GetString+0x42>
 8009d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009d4e:	7dfb      	ldrb	r3, [r7, #23]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	4413      	add	r3, r2
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	7812      	ldrb	r2, [r2, #0]
 8009d58:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009d60:	7dfb      	ldrb	r3, [r7, #23]
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	4413      	add	r3, r2
 8009d66:	2203      	movs	r2, #3
 8009d68:	701a      	strb	r2, [r3, #0]
  idx++;
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009d70:	e013      	b.n	8009d9a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	4413      	add	r3, r2
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	7812      	ldrb	r2, [r2, #0]
 8009d7c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	3301      	adds	r3, #1
 8009d82:	613b      	str	r3, [r7, #16]
    idx++;
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	3301      	adds	r3, #1
 8009d88:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	4413      	add	r3, r2
 8009d90:	2200      	movs	r2, #0
 8009d92:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
 8009d96:	3301      	adds	r3, #1
 8009d98:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e7      	bne.n	8009d72 <USBD_GetString+0x6a>
 8009da2:	e000      	b.n	8009da6 <USBD_GetString+0x9e>
    return;
 8009da4:	bf00      	nop
  }
}
 8009da6:	3718      	adds	r7, #24
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009dbc:	e005      	b.n	8009dca <USBD_GetLen+0x1e>
  {
    len++;
 8009dbe:	7bfb      	ldrb	r3, [r7, #15]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1f5      	bne.n	8009dbe <USBD_GetLen+0x12>
  }

  return len;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2202      	movs	r2, #2
 8009df0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	2100      	movs	r1, #0
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f000 fd2f 	bl	800a86a <USBD_LL_Transmit>

  return USBD_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b084      	sub	sp, #16
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	60f8      	str	r0, [r7, #12]
 8009e1e:	60b9      	str	r1, [r7, #8]
 8009e20:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	2100      	movs	r1, #0
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 fd1e 	bl	800a86a <USBD_LL_Transmit>

  return USBD_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2203      	movs	r2, #3
 8009e48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	2100      	movs	r1, #0
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 fd22 	bl	800a8ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	60b9      	str	r1, [r7, #8]
 8009e7c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	2100      	movs	r1, #0
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f000 fd11 	bl	800a8ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2204      	movs	r2, #4
 8009ea0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fcdd 	bl	800a86a <USBD_LL_Transmit>

  return USBD_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2205      	movs	r2, #5
 8009ec6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009eca:	2300      	movs	r3, #0
 8009ecc:	2200      	movs	r2, #0
 8009ece:	2100      	movs	r1, #0
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fceb 	bl	800a8ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	4912      	ldr	r1, [pc, #72]	@ (8009f30 <MX_USB_DEVICE_Init+0x50>)
 8009ee8:	4812      	ldr	r0, [pc, #72]	@ (8009f34 <MX_USB_DEVICE_Init+0x54>)
 8009eea:	f7fe fccd 	bl	8008888 <USBD_Init>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009ef4:	f7f6 ff4e 	bl	8000d94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009ef8:	490f      	ldr	r1, [pc, #60]	@ (8009f38 <MX_USB_DEVICE_Init+0x58>)
 8009efa:	480e      	ldr	r0, [pc, #56]	@ (8009f34 <MX_USB_DEVICE_Init+0x54>)
 8009efc:	f7fe fcf4 	bl	80088e8 <USBD_RegisterClass>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d001      	beq.n	8009f0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f06:	f7f6 ff45 	bl	8000d94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f0a:	490c      	ldr	r1, [pc, #48]	@ (8009f3c <MX_USB_DEVICE_Init+0x5c>)
 8009f0c:	4809      	ldr	r0, [pc, #36]	@ (8009f34 <MX_USB_DEVICE_Init+0x54>)
 8009f0e:	f7fe fbeb 	bl	80086e8 <USBD_CDC_RegisterInterface>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f18:	f7f6 ff3c 	bl	8000d94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f1c:	4805      	ldr	r0, [pc, #20]	@ (8009f34 <MX_USB_DEVICE_Init+0x54>)
 8009f1e:	f7fe fd19 	bl	8008954 <USBD_Start>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f28:	f7f6 ff34 	bl	8000d94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f2c:	bf00      	nop
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	200000b0 	.word	0x200000b0
 8009f34:	2006dbb8 	.word	0x2006dbb8
 8009f38:	2000001c 	.word	0x2000001c
 8009f3c:	2000009c 	.word	0x2000009c

08009f40 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009f44:	2200      	movs	r2, #0
 8009f46:	4905      	ldr	r1, [pc, #20]	@ (8009f5c <CDC_Init_FS+0x1c>)
 8009f48:	4805      	ldr	r0, [pc, #20]	@ (8009f60 <CDC_Init_FS+0x20>)
 8009f4a:	f7fe fbe7 	bl	800871c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009f4e:	4905      	ldr	r1, [pc, #20]	@ (8009f64 <CDC_Init_FS+0x24>)
 8009f50:	4803      	ldr	r0, [pc, #12]	@ (8009f60 <CDC_Init_FS+0x20>)
 8009f52:	f7fe fc05 	bl	8008760 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009f56:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	2006e694 	.word	0x2006e694
 8009f60:	2006dbb8 	.word	0x2006dbb8
 8009f64:	2006de94 	.word	0x2006de94

08009f68 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009f6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	4603      	mov	r3, r0
 8009f80:	6039      	str	r1, [r7, #0]
 8009f82:	71fb      	strb	r3, [r7, #7]
 8009f84:	4613      	mov	r3, r2
 8009f86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009f88:	79fb      	ldrb	r3, [r7, #7]
 8009f8a:	2b23      	cmp	r3, #35	@ 0x23
 8009f8c:	d84a      	bhi.n	800a024 <CDC_Control_FS+0xac>
 8009f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f94 <CDC_Control_FS+0x1c>)
 8009f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f94:	0800a025 	.word	0x0800a025
 8009f98:	0800a025 	.word	0x0800a025
 8009f9c:	0800a025 	.word	0x0800a025
 8009fa0:	0800a025 	.word	0x0800a025
 8009fa4:	0800a025 	.word	0x0800a025
 8009fa8:	0800a025 	.word	0x0800a025
 8009fac:	0800a025 	.word	0x0800a025
 8009fb0:	0800a025 	.word	0x0800a025
 8009fb4:	0800a025 	.word	0x0800a025
 8009fb8:	0800a025 	.word	0x0800a025
 8009fbc:	0800a025 	.word	0x0800a025
 8009fc0:	0800a025 	.word	0x0800a025
 8009fc4:	0800a025 	.word	0x0800a025
 8009fc8:	0800a025 	.word	0x0800a025
 8009fcc:	0800a025 	.word	0x0800a025
 8009fd0:	0800a025 	.word	0x0800a025
 8009fd4:	0800a025 	.word	0x0800a025
 8009fd8:	0800a025 	.word	0x0800a025
 8009fdc:	0800a025 	.word	0x0800a025
 8009fe0:	0800a025 	.word	0x0800a025
 8009fe4:	0800a025 	.word	0x0800a025
 8009fe8:	0800a025 	.word	0x0800a025
 8009fec:	0800a025 	.word	0x0800a025
 8009ff0:	0800a025 	.word	0x0800a025
 8009ff4:	0800a025 	.word	0x0800a025
 8009ff8:	0800a025 	.word	0x0800a025
 8009ffc:	0800a025 	.word	0x0800a025
 800a000:	0800a025 	.word	0x0800a025
 800a004:	0800a025 	.word	0x0800a025
 800a008:	0800a025 	.word	0x0800a025
 800a00c:	0800a025 	.word	0x0800a025
 800a010:	0800a025 	.word	0x0800a025
 800a014:	0800a025 	.word	0x0800a025
 800a018:	0800a025 	.word	0x0800a025
 800a01c:	0800a025 	.word	0x0800a025
 800a020:	0800a025 	.word	0x0800a025
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a024:	bf00      	nop
  }

  return (USBD_OK);
 800a026:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a028:	4618      	mov	r0, r3
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
 CDC_Receive_FS_App(Buf, Len); // <----  ADD THIS LINE HERE!  Call your callback function
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7f6 fa71 	bl	8000528 <CDC_Receive_FS_App>
 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	4805      	ldr	r0, [pc, #20]	@ (800a060 <CDC_Receive_FS+0x2c>)
 800a04a:	f7fe fb89 	bl	8008760 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a04e:	4804      	ldr	r0, [pc, #16]	@ (800a060 <CDC_Receive_FS+0x2c>)
 800a050:	f7fe fbe4 	bl	800881c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a054:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	2006dbb8 	.word	0x2006dbb8

0800a064 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a074:	4b0d      	ldr	r3, [pc, #52]	@ (800a0ac <CDC_Transmit_FS+0x48>)
 800a076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a07a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a086:	2301      	movs	r3, #1
 800a088:	e00b      	b.n	800a0a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a08a:	887b      	ldrh	r3, [r7, #2]
 800a08c:	461a      	mov	r2, r3
 800a08e:	6879      	ldr	r1, [r7, #4]
 800a090:	4806      	ldr	r0, [pc, #24]	@ (800a0ac <CDC_Transmit_FS+0x48>)
 800a092:	f7fe fb43 	bl	800871c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a096:	4805      	ldr	r0, [pc, #20]	@ (800a0ac <CDC_Transmit_FS+0x48>)
 800a098:	f7fe fb80 	bl	800879c <USBD_CDC_TransmitPacket>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	2006dbb8 	.word	0x2006dbb8

0800a0b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a0c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	371c      	adds	r7, #28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
	...

0800a0d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	4603      	mov	r3, r0
 800a0dc:	6039      	str	r1, [r7, #0]
 800a0de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	2212      	movs	r2, #18
 800a0e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0e6:	4b03      	ldr	r3, [pc, #12]	@ (800a0f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	200000d0 	.word	0x200000d0

0800a0f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	6039      	str	r1, [r7, #0]
 800a102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2204      	movs	r2, #4
 800a108:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a10a:	4b03      	ldr	r3, [pc, #12]	@ (800a118 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	200000f0 	.word	0x200000f0

0800a11c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	4603      	mov	r3, r0
 800a124:	6039      	str	r1, [r7, #0]
 800a126:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a128:	79fb      	ldrb	r3, [r7, #7]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d105      	bne.n	800a13a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	4907      	ldr	r1, [pc, #28]	@ (800a150 <USBD_FS_ProductStrDescriptor+0x34>)
 800a132:	4808      	ldr	r0, [pc, #32]	@ (800a154 <USBD_FS_ProductStrDescriptor+0x38>)
 800a134:	f7ff fde8 	bl	8009d08 <USBD_GetString>
 800a138:	e004      	b.n	800a144 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	4904      	ldr	r1, [pc, #16]	@ (800a150 <USBD_FS_ProductStrDescriptor+0x34>)
 800a13e:	4805      	ldr	r0, [pc, #20]	@ (800a154 <USBD_FS_ProductStrDescriptor+0x38>)
 800a140:	f7ff fde2 	bl	8009d08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a144:	4b02      	ldr	r3, [pc, #8]	@ (800a150 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a146:	4618      	mov	r0, r3
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	2006ee94 	.word	0x2006ee94
 800a154:	0800acc4 	.word	0x0800acc4

0800a158 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	6039      	str	r1, [r7, #0]
 800a162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	4904      	ldr	r1, [pc, #16]	@ (800a178 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a168:	4804      	ldr	r0, [pc, #16]	@ (800a17c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a16a:	f7ff fdcd 	bl	8009d08 <USBD_GetString>
  return USBD_StrDesc;
 800a16e:	4b02      	ldr	r3, [pc, #8]	@ (800a178 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	2006ee94 	.word	0x2006ee94
 800a17c:	0800acdc 	.word	0x0800acdc

0800a180 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	4603      	mov	r3, r0
 800a188:	6039      	str	r1, [r7, #0]
 800a18a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	221a      	movs	r2, #26
 800a190:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a192:	f000 f855 	bl	800a240 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a196:	4b02      	ldr	r3, [pc, #8]	@ (800a1a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	200000f4 	.word	0x200000f4

0800a1a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	6039      	str	r1, [r7, #0]
 800a1ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1b0:	79fb      	ldrb	r3, [r7, #7]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d105      	bne.n	800a1c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	4907      	ldr	r1, [pc, #28]	@ (800a1d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1ba:	4808      	ldr	r0, [pc, #32]	@ (800a1dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1bc:	f7ff fda4 	bl	8009d08 <USBD_GetString>
 800a1c0:	e004      	b.n	800a1cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	4904      	ldr	r1, [pc, #16]	@ (800a1d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1c6:	4805      	ldr	r0, [pc, #20]	@ (800a1dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1c8:	f7ff fd9e 	bl	8009d08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1cc:	4b02      	ldr	r3, [pc, #8]	@ (800a1d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	2006ee94 	.word	0x2006ee94
 800a1dc:	0800acf0 	.word	0x0800acf0

0800a1e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	6039      	str	r1, [r7, #0]
 800a1ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1ec:	79fb      	ldrb	r3, [r7, #7]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d105      	bne.n	800a1fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	4907      	ldr	r1, [pc, #28]	@ (800a214 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1f6:	4808      	ldr	r0, [pc, #32]	@ (800a218 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1f8:	f7ff fd86 	bl	8009d08 <USBD_GetString>
 800a1fc:	e004      	b.n	800a208 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1fe:	683a      	ldr	r2, [r7, #0]
 800a200:	4904      	ldr	r1, [pc, #16]	@ (800a214 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a202:	4805      	ldr	r0, [pc, #20]	@ (800a218 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a204:	f7ff fd80 	bl	8009d08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a208:	4b02      	ldr	r3, [pc, #8]	@ (800a214 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	2006ee94 	.word	0x2006ee94
 800a218:	0800acfc 	.word	0x0800acfc

0800a21c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	6039      	str	r1, [r7, #0]
 800a226:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	220c      	movs	r2, #12
 800a22c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a22e:	4b03      	ldr	r3, [pc, #12]	@ (800a23c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a230:	4618      	mov	r0, r3
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	200000e4 	.word	0x200000e4

0800a240 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a246:	4b0f      	ldr	r3, [pc, #60]	@ (800a284 <Get_SerialNum+0x44>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a24c:	4b0e      	ldr	r3, [pc, #56]	@ (800a288 <Get_SerialNum+0x48>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a252:	4b0e      	ldr	r3, [pc, #56]	@ (800a28c <Get_SerialNum+0x4c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4413      	add	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d009      	beq.n	800a27a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a266:	2208      	movs	r2, #8
 800a268:	4909      	ldr	r1, [pc, #36]	@ (800a290 <Get_SerialNum+0x50>)
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f000 f814 	bl	800a298 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a270:	2204      	movs	r2, #4
 800a272:	4908      	ldr	r1, [pc, #32]	@ (800a294 <Get_SerialNum+0x54>)
 800a274:	68b8      	ldr	r0, [r7, #8]
 800a276:	f000 f80f 	bl	800a298 <IntToUnicode>
  }
}
 800a27a:	bf00      	nop
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	1ff0f420 	.word	0x1ff0f420
 800a288:	1ff0f424 	.word	0x1ff0f424
 800a28c:	1ff0f428 	.word	0x1ff0f428
 800a290:	200000f6 	.word	0x200000f6
 800a294:	20000106 	.word	0x20000106

0800a298 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a298:	b480      	push	{r7}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	75fb      	strb	r3, [r7, #23]
 800a2ae:	e027      	b.n	800a300 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	0f1b      	lsrs	r3, r3, #28
 800a2b4:	2b09      	cmp	r3, #9
 800a2b6:	d80b      	bhi.n	800a2d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	0f1b      	lsrs	r3, r3, #28
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	440b      	add	r3, r1
 800a2c8:	3230      	adds	r2, #48	@ 0x30
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	701a      	strb	r2, [r3, #0]
 800a2ce:	e00a      	b.n	800a2e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	0f1b      	lsrs	r3, r3, #28
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	7dfb      	ldrb	r3, [r7, #23]
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	4619      	mov	r1, r3
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	440b      	add	r3, r1
 800a2e0:	3237      	adds	r2, #55	@ 0x37
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	011b      	lsls	r3, r3, #4
 800a2ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a2ec:	7dfb      	ldrb	r3, [r7, #23]
 800a2ee:	005b      	lsls	r3, r3, #1
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a2fa:	7dfb      	ldrb	r3, [r7, #23]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	75fb      	strb	r3, [r7, #23]
 800a300:	7dfa      	ldrb	r2, [r7, #23]
 800a302:	79fb      	ldrb	r3, [r7, #7]
 800a304:	429a      	cmp	r2, r3
 800a306:	d3d3      	bcc.n	800a2b0 <IntToUnicode+0x18>
  }
}
 800a308:	bf00      	nop
 800a30a:	bf00      	nop
 800a30c:	371c      	adds	r7, #28
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
	...

0800a318 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b0ae      	sub	sp, #184	@ 0xb8
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a320:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a324:	2200      	movs	r2, #0
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	605a      	str	r2, [r3, #4]
 800a32a:	609a      	str	r2, [r3, #8]
 800a32c:	60da      	str	r2, [r3, #12]
 800a32e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a330:	f107 0314 	add.w	r3, r7, #20
 800a334:	2290      	movs	r2, #144	@ 0x90
 800a336:	2100      	movs	r1, #0
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 fc29 	bl	800ab90 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a346:	d161      	bne.n	800a40c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a348:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a34c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a34e:	2300      	movs	r3, #0
 800a350:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a354:	f107 0314 	add.w	r3, r7, #20
 800a358:	4618      	mov	r0, r3
 800a35a:	f7fa fca9 	bl	8004cb0 <HAL_RCCEx_PeriphCLKConfig>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a364:	f7f6 fd16 	bl	8000d94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a368:	4b2a      	ldr	r3, [pc, #168]	@ (800a414 <HAL_PCD_MspInit+0xfc>)
 800a36a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a36c:	4a29      	ldr	r2, [pc, #164]	@ (800a414 <HAL_PCD_MspInit+0xfc>)
 800a36e:	f043 0301 	orr.w	r3, r3, #1
 800a372:	6313      	str	r3, [r2, #48]	@ 0x30
 800a374:	4b27      	ldr	r3, [pc, #156]	@ (800a414 <HAL_PCD_MspInit+0xfc>)
 800a376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a378:	f003 0301 	and.w	r3, r3, #1
 800a37c:	613b      	str	r3, [r7, #16]
 800a37e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a380:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800a384:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a388:	2302      	movs	r3, #2
 800a38a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a38e:	2300      	movs	r3, #0
 800a390:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a394:	2303      	movs	r3, #3
 800a396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a39a:	230a      	movs	r3, #10
 800a39c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3a0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	481c      	ldr	r0, [pc, #112]	@ (800a418 <HAL_PCD_MspInit+0x100>)
 800a3a8:	f7f8 fae6 	bl	8002978 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a3ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a3c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	4814      	ldr	r0, [pc, #80]	@ (800a418 <HAL_PCD_MspInit+0x100>)
 800a3c8:	f7f8 fad6 	bl	8002978 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a3cc:	4b11      	ldr	r3, [pc, #68]	@ (800a414 <HAL_PCD_MspInit+0xfc>)
 800a3ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3d0:	4a10      	ldr	r2, [pc, #64]	@ (800a414 <HAL_PCD_MspInit+0xfc>)
 800a3d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3d6:	6353      	str	r3, [r2, #52]	@ 0x34
 800a3d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a414 <HAL_PCD_MspInit+0xfc>)
 800a3da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3e0:	60fb      	str	r3, [r7, #12]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a414 <HAL_PCD_MspInit+0xfc>)
 800a3e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3e8:	4a0a      	ldr	r2, [pc, #40]	@ (800a414 <HAL_PCD_MspInit+0xfc>)
 800a3ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a3ee:	6453      	str	r3, [r2, #68]	@ 0x44
 800a3f0:	4b08      	ldr	r3, [pc, #32]	@ (800a414 <HAL_PCD_MspInit+0xfc>)
 800a3f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3f8:	60bb      	str	r3, [r7, #8]
 800a3fa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	2100      	movs	r1, #0
 800a400:	2043      	movs	r0, #67	@ 0x43
 800a402:	f7f7 fc4a 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a406:	2043      	movs	r0, #67	@ 0x43
 800a408:	f7f7 fc63 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a40c:	bf00      	nop
 800a40e:	37b8      	adds	r7, #184	@ 0xb8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	40023800 	.word	0x40023800
 800a418:	40020000 	.word	0x40020000

0800a41c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a430:	4619      	mov	r1, r3
 800a432:	4610      	mov	r0, r2
 800a434:	f7fe fadb 	bl	80089ee <USBD_LL_SetupStage>
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800a452:	78fa      	ldrb	r2, [r7, #3]
 800a454:	6879      	ldr	r1, [r7, #4]
 800a456:	4613      	mov	r3, r2
 800a458:	00db      	lsls	r3, r3, #3
 800a45a:	4413      	add	r3, r2
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	440b      	add	r3, r1
 800a460:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	78fb      	ldrb	r3, [r7, #3]
 800a468:	4619      	mov	r1, r3
 800a46a:	f7fe fb15 	bl	8008a98 <USBD_LL_DataOutStage>
}
 800a46e:	bf00      	nop
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b082      	sub	sp, #8
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
 800a47e:	460b      	mov	r3, r1
 800a480:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800a488:	78fa      	ldrb	r2, [r7, #3]
 800a48a:	6879      	ldr	r1, [r7, #4]
 800a48c:	4613      	mov	r3, r2
 800a48e:	00db      	lsls	r3, r3, #3
 800a490:	4413      	add	r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	440b      	add	r3, r1
 800a496:	3320      	adds	r3, #32
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	78fb      	ldrb	r3, [r7, #3]
 800a49c:	4619      	mov	r1, r3
 800a49e:	f7fe fbae 	bl	8008bfe <USBD_LL_DataInStage>
}
 800a4a2:	bf00      	nop
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b082      	sub	sp, #8
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fe fce8 	bl	8008e8e <USBD_LL_SOF>
}
 800a4be:	bf00      	nop
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	79db      	ldrb	r3, [r3, #7]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d102      	bne.n	800a4e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	73fb      	strb	r3, [r7, #15]
 800a4de:	e008      	b.n	800a4f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	79db      	ldrb	r3, [r3, #7]
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d102      	bne.n	800a4ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	73fb      	strb	r3, [r7, #15]
 800a4ec:	e001      	b.n	800a4f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a4ee:	f7f6 fc51 	bl	8000d94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a4f8:	7bfa      	ldrb	r2, [r7, #15]
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fe fc82 	bl	8008e06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fe fc2a 	bl	8008d62 <USBD_LL_Reset>
}
 800a50e:	bf00      	nop
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe fc7d 	bl	8008e26 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	6812      	ldr	r2, [r2, #0]
 800a53a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a53e:	f043 0301 	orr.w	r3, r3, #1
 800a542:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	7adb      	ldrb	r3, [r3, #11]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d005      	beq.n	800a558 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a54c:	4b04      	ldr	r3, [pc, #16]	@ (800a560 <HAL_PCD_SuspendCallback+0x48>)
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	4a03      	ldr	r2, [pc, #12]	@ (800a560 <HAL_PCD_SuspendCallback+0x48>)
 800a552:	f043 0306 	orr.w	r3, r3, #6
 800a556:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a558:	bf00      	nop
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	e000ed00 	.word	0xe000ed00

0800a564 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fc73 	bl	8008e5e <USBD_LL_Resume>
}
 800a578:	bf00      	nop
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	460b      	mov	r3, r1
 800a58a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a592:	78fa      	ldrb	r2, [r7, #3]
 800a594:	4611      	mov	r1, r2
 800a596:	4618      	mov	r0, r3
 800a598:	f7fe fccb 	bl	8008f32 <USBD_LL_IsoOUTIncomplete>
}
 800a59c:	bf00      	nop
 800a59e:	3708      	adds	r7, #8
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a5b6:	78fa      	ldrb	r2, [r7, #3]
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fc87 	bl	8008ece <USBD_LL_IsoINIncomplete>
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe fcdd 	bl	8008f96 <USBD_LL_DevConnected>
}
 800a5dc:	bf00      	nop
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fe fcda 	bl	8008fac <USBD_LL_DevDisconnected>
}
 800a5f8:	bf00      	nop
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d13c      	bne.n	800a68a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a610:	4a20      	ldr	r2, [pc, #128]	@ (800a694 <USBD_LL_Init+0x94>)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a1e      	ldr	r2, [pc, #120]	@ (800a694 <USBD_LL_Init+0x94>)
 800a61c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a620:	4b1c      	ldr	r3, [pc, #112]	@ (800a694 <USBD_LL_Init+0x94>)
 800a622:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a626:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a628:	4b1a      	ldr	r3, [pc, #104]	@ (800a694 <USBD_LL_Init+0x94>)
 800a62a:	2206      	movs	r2, #6
 800a62c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a62e:	4b19      	ldr	r3, [pc, #100]	@ (800a694 <USBD_LL_Init+0x94>)
 800a630:	2202      	movs	r2, #2
 800a632:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a634:	4b17      	ldr	r3, [pc, #92]	@ (800a694 <USBD_LL_Init+0x94>)
 800a636:	2200      	movs	r2, #0
 800a638:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a63a:	4b16      	ldr	r3, [pc, #88]	@ (800a694 <USBD_LL_Init+0x94>)
 800a63c:	2202      	movs	r2, #2
 800a63e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a640:	4b14      	ldr	r3, [pc, #80]	@ (800a694 <USBD_LL_Init+0x94>)
 800a642:	2201      	movs	r2, #1
 800a644:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a646:	4b13      	ldr	r3, [pc, #76]	@ (800a694 <USBD_LL_Init+0x94>)
 800a648:	2200      	movs	r2, #0
 800a64a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a64c:	4b11      	ldr	r3, [pc, #68]	@ (800a694 <USBD_LL_Init+0x94>)
 800a64e:	2200      	movs	r2, #0
 800a650:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a652:	4b10      	ldr	r3, [pc, #64]	@ (800a694 <USBD_LL_Init+0x94>)
 800a654:	2201      	movs	r2, #1
 800a656:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a658:	4b0e      	ldr	r3, [pc, #56]	@ (800a694 <USBD_LL_Init+0x94>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a65e:	480d      	ldr	r0, [pc, #52]	@ (800a694 <USBD_LL_Init+0x94>)
 800a660:	f7f8 fb69 	bl	8002d36 <HAL_PCD_Init>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a66a:	f7f6 fb93 	bl	8000d94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a66e:	2180      	movs	r1, #128	@ 0x80
 800a670:	4808      	ldr	r0, [pc, #32]	@ (800a694 <USBD_LL_Init+0x94>)
 800a672:	f7f9 fdb4 	bl	80041de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a676:	2240      	movs	r2, #64	@ 0x40
 800a678:	2100      	movs	r1, #0
 800a67a:	4806      	ldr	r0, [pc, #24]	@ (800a694 <USBD_LL_Init+0x94>)
 800a67c:	f7f9 fd68 	bl	8004150 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a680:	2280      	movs	r2, #128	@ 0x80
 800a682:	2101      	movs	r1, #1
 800a684:	4803      	ldr	r0, [pc, #12]	@ (800a694 <USBD_LL_Init+0x94>)
 800a686:	f7f9 fd63 	bl	8004150 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	2006f094 	.word	0x2006f094

0800a698 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7f8 fc57 	bl	8002f62 <HAL_PCD_Start>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f000 f97e 	bl	800a9bc <USBD_Get_USB_Status>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
 800a6d6:	4608      	mov	r0, r1
 800a6d8:	4611      	mov	r1, r2
 800a6da:	461a      	mov	r2, r3
 800a6dc:	4603      	mov	r3, r0
 800a6de:	70fb      	strb	r3, [r7, #3]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	70bb      	strb	r3, [r7, #2]
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a6f6:	78bb      	ldrb	r3, [r7, #2]
 800a6f8:	883a      	ldrh	r2, [r7, #0]
 800a6fa:	78f9      	ldrb	r1, [r7, #3]
 800a6fc:	f7f9 f945 	bl	800398a <HAL_PCD_EP_Open>
 800a700:	4603      	mov	r3, r0
 800a702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a704:	7bfb      	ldrb	r3, [r7, #15]
 800a706:	4618      	mov	r0, r3
 800a708:	f000 f958 	bl	800a9bc <USBD_Get_USB_Status>
 800a70c:	4603      	mov	r3, r0
 800a70e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a710:	7bbb      	ldrb	r3, [r7, #14]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
 800a722:	460b      	mov	r3, r1
 800a724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a726:	2300      	movs	r3, #0
 800a728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a734:	78fa      	ldrb	r2, [r7, #3]
 800a736:	4611      	mov	r1, r2
 800a738:	4618      	mov	r0, r3
 800a73a:	f7f9 f98e 	bl	8003a5a <HAL_PCD_EP_Close>
 800a73e:	4603      	mov	r3, r0
 800a740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a742:	7bfb      	ldrb	r3, [r7, #15]
 800a744:	4618      	mov	r0, r3
 800a746:	f000 f939 	bl	800a9bc <USBD_Get_USB_Status>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a74e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a764:	2300      	movs	r3, #0
 800a766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a768:	2300      	movs	r3, #0
 800a76a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a772:	78fa      	ldrb	r2, [r7, #3]
 800a774:	4611      	mov	r1, r2
 800a776:	4618      	mov	r0, r3
 800a778:	f7f9 fa46 	bl	8003c08 <HAL_PCD_EP_SetStall>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	4618      	mov	r0, r3
 800a784:	f000 f91a 	bl	800a9bc <USBD_Get_USB_Status>
 800a788:	4603      	mov	r3, r0
 800a78a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a78c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b084      	sub	sp, #16
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
 800a79e:	460b      	mov	r3, r1
 800a7a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7b0:	78fa      	ldrb	r2, [r7, #3]
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7f9 fa8a 	bl	8003cce <HAL_PCD_EP_ClrStall>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7be:	7bfb      	ldrb	r3, [r7, #15]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 f8fb 	bl	800a9bc <USBD_Get_USB_Status>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a7e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a7e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	da0b      	bge.n	800a808 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a7f0:	78fb      	ldrb	r3, [r7, #3]
 800a7f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7f6:	68f9      	ldr	r1, [r7, #12]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	00db      	lsls	r3, r3, #3
 800a7fc:	4413      	add	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	440b      	add	r3, r1
 800a802:	3316      	adds	r3, #22
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	e00b      	b.n	800a820 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a808:	78fb      	ldrb	r3, [r7, #3]
 800a80a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a80e:	68f9      	ldr	r1, [r7, #12]
 800a810:	4613      	mov	r3, r2
 800a812:	00db      	lsls	r3, r3, #3
 800a814:	4413      	add	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	440b      	add	r3, r1
 800a81a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a81e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a846:	78fa      	ldrb	r2, [r7, #3]
 800a848:	4611      	mov	r1, r2
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7f9 f879 	bl	8003942 <HAL_PCD_SetAddress>
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a854:	7bfb      	ldrb	r3, [r7, #15]
 800a856:	4618      	mov	r0, r3
 800a858:	f000 f8b0 	bl	800a9bc <USBD_Get_USB_Status>
 800a85c:	4603      	mov	r3, r0
 800a85e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a860:	7bbb      	ldrb	r3, [r7, #14]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b086      	sub	sp, #24
 800a86e:	af00      	add	r7, sp, #0
 800a870:	60f8      	str	r0, [r7, #12]
 800a872:	607a      	str	r2, [r7, #4]
 800a874:	603b      	str	r3, [r7, #0]
 800a876:	460b      	mov	r3, r1
 800a878:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a87a:	2300      	movs	r3, #0
 800a87c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a888:	7af9      	ldrb	r1, [r7, #11]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	f7f9 f981 	bl	8003b94 <HAL_PCD_EP_Transmit>
 800a892:	4603      	mov	r3, r0
 800a894:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a896:	7dfb      	ldrb	r3, [r7, #23]
 800a898:	4618      	mov	r0, r3
 800a89a:	f000 f88f 	bl	800a9bc <USBD_Get_USB_Status>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	607a      	str	r2, [r7, #4]
 800a8b6:	603b      	str	r3, [r7, #0]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a8ca:	7af9      	ldrb	r1, [r7, #11]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	f7f9 f90d 	bl	8003aee <HAL_PCD_EP_Receive>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8d8:	7dfb      	ldrb	r3, [r7, #23]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 f86e 	bl	800a9bc <USBD_Get_USB_Status>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a8e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}

0800a8ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8ee:	b580      	push	{r7, lr}
 800a8f0:	b082      	sub	sp, #8
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	6078      	str	r0, [r7, #4]
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a900:	78fa      	ldrb	r2, [r7, #3]
 800a902:	4611      	mov	r1, r2
 800a904:	4618      	mov	r0, r3
 800a906:	f7f9 f92d 	bl	8003b64 <HAL_PCD_EP_GetRxCount>
 800a90a:	4603      	mov	r3, r0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	460b      	mov	r3, r1
 800a91e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a920:	78fb      	ldrb	r3, [r7, #3]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d002      	beq.n	800a92c <HAL_PCDEx_LPM_Callback+0x18>
 800a926:	2b01      	cmp	r3, #1
 800a928:	d01f      	beq.n	800a96a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a92a:	e03b      	b.n	800a9a4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	7adb      	ldrb	r3, [r3, #11]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d007      	beq.n	800a944 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a934:	f000 f83c 	bl	800a9b0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a938:	4b1c      	ldr	r3, [pc, #112]	@ (800a9ac <HAL_PCDEx_LPM_Callback+0x98>)
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	4a1b      	ldr	r2, [pc, #108]	@ (800a9ac <HAL_PCDEx_LPM_Callback+0x98>)
 800a93e:	f023 0306 	bic.w	r3, r3, #6
 800a942:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	6812      	ldr	r2, [r2, #0]
 800a952:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a956:	f023 0301 	bic.w	r3, r3, #1
 800a95a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe fa7b 	bl	8008e5e <USBD_LL_Resume>
    break;
 800a968:	e01c      	b.n	800a9a4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	6812      	ldr	r2, [r2, #0]
 800a978:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a97c:	f043 0301 	orr.w	r3, r3, #1
 800a980:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fe fa4c 	bl	8008e26 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	7adb      	ldrb	r3, [r3, #11]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d005      	beq.n	800a9a2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a996:	4b05      	ldr	r3, [pc, #20]	@ (800a9ac <HAL_PCDEx_LPM_Callback+0x98>)
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	4a04      	ldr	r2, [pc, #16]	@ (800a9ac <HAL_PCDEx_LPM_Callback+0x98>)
 800a99c:	f043 0306 	orr.w	r3, r3, #6
 800a9a0:	6113      	str	r3, [r2, #16]
    break;
 800a9a2:	bf00      	nop
}
 800a9a4:	bf00      	nop
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	e000ed00 	.word	0xe000ed00

0800a9b0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a9b4:	f7f5 ff1a 	bl	80007ec <SystemClock_Config>
}
 800a9b8:	bf00      	nop
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9ca:	79fb      	ldrb	r3, [r7, #7]
 800a9cc:	2b03      	cmp	r3, #3
 800a9ce:	d817      	bhi.n	800aa00 <USBD_Get_USB_Status+0x44>
 800a9d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d8 <USBD_Get_USB_Status+0x1c>)
 800a9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d6:	bf00      	nop
 800a9d8:	0800a9e9 	.word	0x0800a9e9
 800a9dc:	0800a9ef 	.word	0x0800a9ef
 800a9e0:	0800a9f5 	.word	0x0800a9f5
 800a9e4:	0800a9fb 	.word	0x0800a9fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ec:	e00b      	b.n	800aa06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9f2:	e008      	b.n	800aa06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9f8:	e005      	b.n	800aa06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9fe:	e002      	b.n	800aa06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa00:	2303      	movs	r3, #3
 800aa02:	73fb      	strb	r3, [r7, #15]
    break;
 800aa04:	bf00      	nop
  }
  return usb_status;
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <malloc>:
 800aa14:	4b02      	ldr	r3, [pc, #8]	@ (800aa20 <malloc+0xc>)
 800aa16:	4601      	mov	r1, r0
 800aa18:	6818      	ldr	r0, [r3, #0]
 800aa1a:	f000 b82d 	b.w	800aa78 <_malloc_r>
 800aa1e:	bf00      	nop
 800aa20:	20000110 	.word	0x20000110

0800aa24 <free>:
 800aa24:	4b02      	ldr	r3, [pc, #8]	@ (800aa30 <free+0xc>)
 800aa26:	4601      	mov	r1, r0
 800aa28:	6818      	ldr	r0, [r3, #0]
 800aa2a:	f000 b8f5 	b.w	800ac18 <_free_r>
 800aa2e:	bf00      	nop
 800aa30:	20000110 	.word	0x20000110

0800aa34 <sbrk_aligned>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	4e0f      	ldr	r6, [pc, #60]	@ (800aa74 <sbrk_aligned+0x40>)
 800aa38:	460c      	mov	r4, r1
 800aa3a:	6831      	ldr	r1, [r6, #0]
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	b911      	cbnz	r1, 800aa46 <sbrk_aligned+0x12>
 800aa40:	f000 f8ae 	bl	800aba0 <_sbrk_r>
 800aa44:	6030      	str	r0, [r6, #0]
 800aa46:	4621      	mov	r1, r4
 800aa48:	4628      	mov	r0, r5
 800aa4a:	f000 f8a9 	bl	800aba0 <_sbrk_r>
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	d103      	bne.n	800aa5a <sbrk_aligned+0x26>
 800aa52:	f04f 34ff 	mov.w	r4, #4294967295
 800aa56:	4620      	mov	r0, r4
 800aa58:	bd70      	pop	{r4, r5, r6, pc}
 800aa5a:	1cc4      	adds	r4, r0, #3
 800aa5c:	f024 0403 	bic.w	r4, r4, #3
 800aa60:	42a0      	cmp	r0, r4
 800aa62:	d0f8      	beq.n	800aa56 <sbrk_aligned+0x22>
 800aa64:	1a21      	subs	r1, r4, r0
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 f89a 	bl	800aba0 <_sbrk_r>
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d1f2      	bne.n	800aa56 <sbrk_aligned+0x22>
 800aa70:	e7ef      	b.n	800aa52 <sbrk_aligned+0x1e>
 800aa72:	bf00      	nop
 800aa74:	2006f574 	.word	0x2006f574

0800aa78 <_malloc_r>:
 800aa78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa7c:	1ccd      	adds	r5, r1, #3
 800aa7e:	f025 0503 	bic.w	r5, r5, #3
 800aa82:	3508      	adds	r5, #8
 800aa84:	2d0c      	cmp	r5, #12
 800aa86:	bf38      	it	cc
 800aa88:	250c      	movcc	r5, #12
 800aa8a:	2d00      	cmp	r5, #0
 800aa8c:	4606      	mov	r6, r0
 800aa8e:	db01      	blt.n	800aa94 <_malloc_r+0x1c>
 800aa90:	42a9      	cmp	r1, r5
 800aa92:	d904      	bls.n	800aa9e <_malloc_r+0x26>
 800aa94:	230c      	movs	r3, #12
 800aa96:	6033      	str	r3, [r6, #0]
 800aa98:	2000      	movs	r0, #0
 800aa9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab74 <_malloc_r+0xfc>
 800aaa2:	f000 f869 	bl	800ab78 <__malloc_lock>
 800aaa6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaaa:	461c      	mov	r4, r3
 800aaac:	bb44      	cbnz	r4, 800ab00 <_malloc_r+0x88>
 800aaae:	4629      	mov	r1, r5
 800aab0:	4630      	mov	r0, r6
 800aab2:	f7ff ffbf 	bl	800aa34 <sbrk_aligned>
 800aab6:	1c43      	adds	r3, r0, #1
 800aab8:	4604      	mov	r4, r0
 800aaba:	d158      	bne.n	800ab6e <_malloc_r+0xf6>
 800aabc:	f8d8 4000 	ldr.w	r4, [r8]
 800aac0:	4627      	mov	r7, r4
 800aac2:	2f00      	cmp	r7, #0
 800aac4:	d143      	bne.n	800ab4e <_malloc_r+0xd6>
 800aac6:	2c00      	cmp	r4, #0
 800aac8:	d04b      	beq.n	800ab62 <_malloc_r+0xea>
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	4639      	mov	r1, r7
 800aace:	4630      	mov	r0, r6
 800aad0:	eb04 0903 	add.w	r9, r4, r3
 800aad4:	f000 f864 	bl	800aba0 <_sbrk_r>
 800aad8:	4581      	cmp	r9, r0
 800aada:	d142      	bne.n	800ab62 <_malloc_r+0xea>
 800aadc:	6821      	ldr	r1, [r4, #0]
 800aade:	1a6d      	subs	r5, r5, r1
 800aae0:	4629      	mov	r1, r5
 800aae2:	4630      	mov	r0, r6
 800aae4:	f7ff ffa6 	bl	800aa34 <sbrk_aligned>
 800aae8:	3001      	adds	r0, #1
 800aaea:	d03a      	beq.n	800ab62 <_malloc_r+0xea>
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	442b      	add	r3, r5
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	f8d8 3000 	ldr.w	r3, [r8]
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	bb62      	cbnz	r2, 800ab54 <_malloc_r+0xdc>
 800aafa:	f8c8 7000 	str.w	r7, [r8]
 800aafe:	e00f      	b.n	800ab20 <_malloc_r+0xa8>
 800ab00:	6822      	ldr	r2, [r4, #0]
 800ab02:	1b52      	subs	r2, r2, r5
 800ab04:	d420      	bmi.n	800ab48 <_malloc_r+0xd0>
 800ab06:	2a0b      	cmp	r2, #11
 800ab08:	d917      	bls.n	800ab3a <_malloc_r+0xc2>
 800ab0a:	1961      	adds	r1, r4, r5
 800ab0c:	42a3      	cmp	r3, r4
 800ab0e:	6025      	str	r5, [r4, #0]
 800ab10:	bf18      	it	ne
 800ab12:	6059      	strne	r1, [r3, #4]
 800ab14:	6863      	ldr	r3, [r4, #4]
 800ab16:	bf08      	it	eq
 800ab18:	f8c8 1000 	streq.w	r1, [r8]
 800ab1c:	5162      	str	r2, [r4, r5]
 800ab1e:	604b      	str	r3, [r1, #4]
 800ab20:	4630      	mov	r0, r6
 800ab22:	f000 f82f 	bl	800ab84 <__malloc_unlock>
 800ab26:	f104 000b 	add.w	r0, r4, #11
 800ab2a:	1d23      	adds	r3, r4, #4
 800ab2c:	f020 0007 	bic.w	r0, r0, #7
 800ab30:	1ac2      	subs	r2, r0, r3
 800ab32:	bf1c      	itt	ne
 800ab34:	1a1b      	subne	r3, r3, r0
 800ab36:	50a3      	strne	r3, [r4, r2]
 800ab38:	e7af      	b.n	800aa9a <_malloc_r+0x22>
 800ab3a:	6862      	ldr	r2, [r4, #4]
 800ab3c:	42a3      	cmp	r3, r4
 800ab3e:	bf0c      	ite	eq
 800ab40:	f8c8 2000 	streq.w	r2, [r8]
 800ab44:	605a      	strne	r2, [r3, #4]
 800ab46:	e7eb      	b.n	800ab20 <_malloc_r+0xa8>
 800ab48:	4623      	mov	r3, r4
 800ab4a:	6864      	ldr	r4, [r4, #4]
 800ab4c:	e7ae      	b.n	800aaac <_malloc_r+0x34>
 800ab4e:	463c      	mov	r4, r7
 800ab50:	687f      	ldr	r7, [r7, #4]
 800ab52:	e7b6      	b.n	800aac2 <_malloc_r+0x4a>
 800ab54:	461a      	mov	r2, r3
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	d1fb      	bne.n	800ab54 <_malloc_r+0xdc>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	6053      	str	r3, [r2, #4]
 800ab60:	e7de      	b.n	800ab20 <_malloc_r+0xa8>
 800ab62:	230c      	movs	r3, #12
 800ab64:	6033      	str	r3, [r6, #0]
 800ab66:	4630      	mov	r0, r6
 800ab68:	f000 f80c 	bl	800ab84 <__malloc_unlock>
 800ab6c:	e794      	b.n	800aa98 <_malloc_r+0x20>
 800ab6e:	6005      	str	r5, [r0, #0]
 800ab70:	e7d6      	b.n	800ab20 <_malloc_r+0xa8>
 800ab72:	bf00      	nop
 800ab74:	2006f578 	.word	0x2006f578

0800ab78 <__malloc_lock>:
 800ab78:	4801      	ldr	r0, [pc, #4]	@ (800ab80 <__malloc_lock+0x8>)
 800ab7a:	f000 b84b 	b.w	800ac14 <__retarget_lock_acquire_recursive>
 800ab7e:	bf00      	nop
 800ab80:	2006f6b8 	.word	0x2006f6b8

0800ab84 <__malloc_unlock>:
 800ab84:	4801      	ldr	r0, [pc, #4]	@ (800ab8c <__malloc_unlock+0x8>)
 800ab86:	f000 b846 	b.w	800ac16 <__retarget_lock_release_recursive>
 800ab8a:	bf00      	nop
 800ab8c:	2006f6b8 	.word	0x2006f6b8

0800ab90 <memset>:
 800ab90:	4402      	add	r2, r0
 800ab92:	4603      	mov	r3, r0
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d100      	bne.n	800ab9a <memset+0xa>
 800ab98:	4770      	bx	lr
 800ab9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab9e:	e7f9      	b.n	800ab94 <memset+0x4>

0800aba0 <_sbrk_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	4d06      	ldr	r5, [pc, #24]	@ (800abbc <_sbrk_r+0x1c>)
 800aba4:	2300      	movs	r3, #0
 800aba6:	4604      	mov	r4, r0
 800aba8:	4608      	mov	r0, r1
 800abaa:	602b      	str	r3, [r5, #0]
 800abac:	f7f6 fc14 	bl	80013d8 <_sbrk>
 800abb0:	1c43      	adds	r3, r0, #1
 800abb2:	d102      	bne.n	800abba <_sbrk_r+0x1a>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	b103      	cbz	r3, 800abba <_sbrk_r+0x1a>
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	2006f6b4 	.word	0x2006f6b4

0800abc0 <__errno>:
 800abc0:	4b01      	ldr	r3, [pc, #4]	@ (800abc8 <__errno+0x8>)
 800abc2:	6818      	ldr	r0, [r3, #0]
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	20000110 	.word	0x20000110

0800abcc <__libc_init_array>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	4d0d      	ldr	r5, [pc, #52]	@ (800ac04 <__libc_init_array+0x38>)
 800abd0:	4c0d      	ldr	r4, [pc, #52]	@ (800ac08 <__libc_init_array+0x3c>)
 800abd2:	1b64      	subs	r4, r4, r5
 800abd4:	10a4      	asrs	r4, r4, #2
 800abd6:	2600      	movs	r6, #0
 800abd8:	42a6      	cmp	r6, r4
 800abda:	d109      	bne.n	800abf0 <__libc_init_array+0x24>
 800abdc:	4d0b      	ldr	r5, [pc, #44]	@ (800ac0c <__libc_init_array+0x40>)
 800abde:	4c0c      	ldr	r4, [pc, #48]	@ (800ac10 <__libc_init_array+0x44>)
 800abe0:	f000 f864 	bl	800acac <_init>
 800abe4:	1b64      	subs	r4, r4, r5
 800abe6:	10a4      	asrs	r4, r4, #2
 800abe8:	2600      	movs	r6, #0
 800abea:	42a6      	cmp	r6, r4
 800abec:	d105      	bne.n	800abfa <__libc_init_array+0x2e>
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf4:	4798      	blx	r3
 800abf6:	3601      	adds	r6, #1
 800abf8:	e7ee      	b.n	800abd8 <__libc_init_array+0xc>
 800abfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfe:	4798      	blx	r3
 800ac00:	3601      	adds	r6, #1
 800ac02:	e7f2      	b.n	800abea <__libc_init_array+0x1e>
 800ac04:	0800ad34 	.word	0x0800ad34
 800ac08:	0800ad34 	.word	0x0800ad34
 800ac0c:	0800ad34 	.word	0x0800ad34
 800ac10:	0800ad38 	.word	0x0800ad38

0800ac14 <__retarget_lock_acquire_recursive>:
 800ac14:	4770      	bx	lr

0800ac16 <__retarget_lock_release_recursive>:
 800ac16:	4770      	bx	lr

0800ac18 <_free_r>:
 800ac18:	b538      	push	{r3, r4, r5, lr}
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	2900      	cmp	r1, #0
 800ac1e:	d041      	beq.n	800aca4 <_free_r+0x8c>
 800ac20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac24:	1f0c      	subs	r4, r1, #4
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	bfb8      	it	lt
 800ac2a:	18e4      	addlt	r4, r4, r3
 800ac2c:	f7ff ffa4 	bl	800ab78 <__malloc_lock>
 800ac30:	4a1d      	ldr	r2, [pc, #116]	@ (800aca8 <_free_r+0x90>)
 800ac32:	6813      	ldr	r3, [r2, #0]
 800ac34:	b933      	cbnz	r3, 800ac44 <_free_r+0x2c>
 800ac36:	6063      	str	r3, [r4, #4]
 800ac38:	6014      	str	r4, [r2, #0]
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac40:	f7ff bfa0 	b.w	800ab84 <__malloc_unlock>
 800ac44:	42a3      	cmp	r3, r4
 800ac46:	d908      	bls.n	800ac5a <_free_r+0x42>
 800ac48:	6820      	ldr	r0, [r4, #0]
 800ac4a:	1821      	adds	r1, r4, r0
 800ac4c:	428b      	cmp	r3, r1
 800ac4e:	bf01      	itttt	eq
 800ac50:	6819      	ldreq	r1, [r3, #0]
 800ac52:	685b      	ldreq	r3, [r3, #4]
 800ac54:	1809      	addeq	r1, r1, r0
 800ac56:	6021      	streq	r1, [r4, #0]
 800ac58:	e7ed      	b.n	800ac36 <_free_r+0x1e>
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	b10b      	cbz	r3, 800ac64 <_free_r+0x4c>
 800ac60:	42a3      	cmp	r3, r4
 800ac62:	d9fa      	bls.n	800ac5a <_free_r+0x42>
 800ac64:	6811      	ldr	r1, [r2, #0]
 800ac66:	1850      	adds	r0, r2, r1
 800ac68:	42a0      	cmp	r0, r4
 800ac6a:	d10b      	bne.n	800ac84 <_free_r+0x6c>
 800ac6c:	6820      	ldr	r0, [r4, #0]
 800ac6e:	4401      	add	r1, r0
 800ac70:	1850      	adds	r0, r2, r1
 800ac72:	4283      	cmp	r3, r0
 800ac74:	6011      	str	r1, [r2, #0]
 800ac76:	d1e0      	bne.n	800ac3a <_free_r+0x22>
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	6053      	str	r3, [r2, #4]
 800ac7e:	4408      	add	r0, r1
 800ac80:	6010      	str	r0, [r2, #0]
 800ac82:	e7da      	b.n	800ac3a <_free_r+0x22>
 800ac84:	d902      	bls.n	800ac8c <_free_r+0x74>
 800ac86:	230c      	movs	r3, #12
 800ac88:	602b      	str	r3, [r5, #0]
 800ac8a:	e7d6      	b.n	800ac3a <_free_r+0x22>
 800ac8c:	6820      	ldr	r0, [r4, #0]
 800ac8e:	1821      	adds	r1, r4, r0
 800ac90:	428b      	cmp	r3, r1
 800ac92:	bf04      	itt	eq
 800ac94:	6819      	ldreq	r1, [r3, #0]
 800ac96:	685b      	ldreq	r3, [r3, #4]
 800ac98:	6063      	str	r3, [r4, #4]
 800ac9a:	bf04      	itt	eq
 800ac9c:	1809      	addeq	r1, r1, r0
 800ac9e:	6021      	streq	r1, [r4, #0]
 800aca0:	6054      	str	r4, [r2, #4]
 800aca2:	e7ca      	b.n	800ac3a <_free_r+0x22>
 800aca4:	bd38      	pop	{r3, r4, r5, pc}
 800aca6:	bf00      	nop
 800aca8:	2006f578 	.word	0x2006f578

0800acac <_init>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	bf00      	nop
 800acb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acb2:	bc08      	pop	{r3}
 800acb4:	469e      	mov	lr, r3
 800acb6:	4770      	bx	lr

0800acb8 <_fini>:
 800acb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acba:	bf00      	nop
 800acbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acbe:	bc08      	pop	{r3}
 800acc0:	469e      	mov	lr, r3
 800acc2:	4770      	bx	lr
