
EDS_Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea1c  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800ec18  0800ec18  0000fc18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efc0  0800efc0  000102a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800efc0  0800efc0  0000ffc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800efc8  0800efc8  000102a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efc8  0800efc8  0000ffc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800efcc  0800efcc  0000ffcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800efd0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000168  0800f138  00010168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000208  0800f1d8  00010208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000702e8  200002a8  0800f278  000102a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20070590  0800f278  00010590  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000102a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024cbf  00000000  00000000  000102d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000534b  00000000  00000000  00034f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c80  00000000  00000000  0003a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015d6  00000000  00000000  0003bf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e71a  00000000  00000000  0003d536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026d3c  00000000  00000000  0006bc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010e144  00000000  00000000  0009298c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a0ad0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007be8  00000000  00000000  001a0b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004b  00000000  00000000  001a86fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200002a8 	.word	0x200002a8
 8000214:	00000000 	.word	0x00000000
 8000218:	0800ebfc 	.word	0x0800ebfc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200002ac 	.word	0x200002ac
 8000234:	0800ebfc 	.word	0x0800ebfc

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_uldivmod>:
 80005b0:	b953      	cbnz	r3, 80005c8 <__aeabi_uldivmod+0x18>
 80005b2:	b94a      	cbnz	r2, 80005c8 <__aeabi_uldivmod+0x18>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	bf08      	it	eq
 80005b8:	2800      	cmpeq	r0, #0
 80005ba:	bf1c      	itt	ne
 80005bc:	f04f 31ff 	movne.w	r1, #4294967295
 80005c0:	f04f 30ff 	movne.w	r0, #4294967295
 80005c4:	f000 b96a 	b.w	800089c <__aeabi_idiv0>
 80005c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005d0:	f000 f806 	bl	80005e0 <__udivmoddi4>
 80005d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005dc:	b004      	add	sp, #16
 80005de:	4770      	bx	lr

080005e0 <__udivmoddi4>:
 80005e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e4:	9d08      	ldr	r5, [sp, #32]
 80005e6:	460c      	mov	r4, r1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d14e      	bne.n	800068a <__udivmoddi4+0xaa>
 80005ec:	4694      	mov	ip, r2
 80005ee:	458c      	cmp	ip, r1
 80005f0:	4686      	mov	lr, r0
 80005f2:	fab2 f282 	clz	r2, r2
 80005f6:	d962      	bls.n	80006be <__udivmoddi4+0xde>
 80005f8:	b14a      	cbz	r2, 800060e <__udivmoddi4+0x2e>
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	4091      	lsls	r1, r2
 8000600:	fa20 f303 	lsr.w	r3, r0, r3
 8000604:	fa0c fc02 	lsl.w	ip, ip, r2
 8000608:	4319      	orrs	r1, r3
 800060a:	fa00 fe02 	lsl.w	lr, r0, r2
 800060e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000612:	fa1f f68c 	uxth.w	r6, ip
 8000616:	fbb1 f4f7 	udiv	r4, r1, r7
 800061a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800061e:	fb07 1114 	mls	r1, r7, r4, r1
 8000622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000626:	fb04 f106 	mul.w	r1, r4, r6
 800062a:	4299      	cmp	r1, r3
 800062c:	d90a      	bls.n	8000644 <__udivmoddi4+0x64>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f104 30ff 	add.w	r0, r4, #4294967295
 8000636:	f080 8112 	bcs.w	800085e <__udivmoddi4+0x27e>
 800063a:	4299      	cmp	r1, r3
 800063c:	f240 810f 	bls.w	800085e <__udivmoddi4+0x27e>
 8000640:	3c02      	subs	r4, #2
 8000642:	4463      	add	r3, ip
 8000644:	1a59      	subs	r1, r3, r1
 8000646:	fa1f f38e 	uxth.w	r3, lr
 800064a:	fbb1 f0f7 	udiv	r0, r1, r7
 800064e:	fb07 1110 	mls	r1, r7, r0, r1
 8000652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000656:	fb00 f606 	mul.w	r6, r0, r6
 800065a:	429e      	cmp	r6, r3
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x94>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 31ff 	add.w	r1, r0, #4294967295
 8000666:	f080 80fc 	bcs.w	8000862 <__udivmoddi4+0x282>
 800066a:	429e      	cmp	r6, r3
 800066c:	f240 80f9 	bls.w	8000862 <__udivmoddi4+0x282>
 8000670:	4463      	add	r3, ip
 8000672:	3802      	subs	r0, #2
 8000674:	1b9b      	subs	r3, r3, r6
 8000676:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800067a:	2100      	movs	r1, #0
 800067c:	b11d      	cbz	r5, 8000686 <__udivmoddi4+0xa6>
 800067e:	40d3      	lsrs	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	e9c5 3200 	strd	r3, r2, [r5]
 8000686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800068a:	428b      	cmp	r3, r1
 800068c:	d905      	bls.n	800069a <__udivmoddi4+0xba>
 800068e:	b10d      	cbz	r5, 8000694 <__udivmoddi4+0xb4>
 8000690:	e9c5 0100 	strd	r0, r1, [r5]
 8000694:	2100      	movs	r1, #0
 8000696:	4608      	mov	r0, r1
 8000698:	e7f5      	b.n	8000686 <__udivmoddi4+0xa6>
 800069a:	fab3 f183 	clz	r1, r3
 800069e:	2900      	cmp	r1, #0
 80006a0:	d146      	bne.n	8000730 <__udivmoddi4+0x150>
 80006a2:	42a3      	cmp	r3, r4
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xcc>
 80006a6:	4290      	cmp	r0, r2
 80006a8:	f0c0 80f0 	bcc.w	800088c <__udivmoddi4+0x2ac>
 80006ac:	1a86      	subs	r6, r0, r2
 80006ae:	eb64 0303 	sbc.w	r3, r4, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	2d00      	cmp	r5, #0
 80006b6:	d0e6      	beq.n	8000686 <__udivmoddi4+0xa6>
 80006b8:	e9c5 6300 	strd	r6, r3, [r5]
 80006bc:	e7e3      	b.n	8000686 <__udivmoddi4+0xa6>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f040 8090 	bne.w	80007e4 <__udivmoddi4+0x204>
 80006c4:	eba1 040c 	sub.w	r4, r1, ip
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	fa1f f78c 	uxth.w	r7, ip
 80006d0:	2101      	movs	r1, #1
 80006d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006da:	fb08 4416 	mls	r4, r8, r6, r4
 80006de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006e2:	fb07 f006 	mul.w	r0, r7, r6
 80006e6:	4298      	cmp	r0, r3
 80006e8:	d908      	bls.n	80006fc <__udivmoddi4+0x11c>
 80006ea:	eb1c 0303 	adds.w	r3, ip, r3
 80006ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80006f2:	d202      	bcs.n	80006fa <__udivmoddi4+0x11a>
 80006f4:	4298      	cmp	r0, r3
 80006f6:	f200 80cd 	bhi.w	8000894 <__udivmoddi4+0x2b4>
 80006fa:	4626      	mov	r6, r4
 80006fc:	1a1c      	subs	r4, r3, r0
 80006fe:	fa1f f38e 	uxth.w	r3, lr
 8000702:	fbb4 f0f8 	udiv	r0, r4, r8
 8000706:	fb08 4410 	mls	r4, r8, r0, r4
 800070a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800070e:	fb00 f707 	mul.w	r7, r0, r7
 8000712:	429f      	cmp	r7, r3
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x148>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 34ff 	add.w	r4, r0, #4294967295
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x146>
 8000720:	429f      	cmp	r7, r3
 8000722:	f200 80b0 	bhi.w	8000886 <__udivmoddi4+0x2a6>
 8000726:	4620      	mov	r0, r4
 8000728:	1bdb      	subs	r3, r3, r7
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	e7a5      	b.n	800067c <__udivmoddi4+0x9c>
 8000730:	f1c1 0620 	rsb	r6, r1, #32
 8000734:	408b      	lsls	r3, r1
 8000736:	fa22 f706 	lsr.w	r7, r2, r6
 800073a:	431f      	orrs	r7, r3
 800073c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000740:	fa04 f301 	lsl.w	r3, r4, r1
 8000744:	ea43 030c 	orr.w	r3, r3, ip
 8000748:	40f4      	lsrs	r4, r6
 800074a:	fa00 f801 	lsl.w	r8, r0, r1
 800074e:	0c38      	lsrs	r0, r7, #16
 8000750:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000754:	fbb4 fef0 	udiv	lr, r4, r0
 8000758:	fa1f fc87 	uxth.w	ip, r7
 800075c:	fb00 441e 	mls	r4, r0, lr, r4
 8000760:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000764:	fb0e f90c 	mul.w	r9, lr, ip
 8000768:	45a1      	cmp	r9, r4
 800076a:	fa02 f201 	lsl.w	r2, r2, r1
 800076e:	d90a      	bls.n	8000786 <__udivmoddi4+0x1a6>
 8000770:	193c      	adds	r4, r7, r4
 8000772:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000776:	f080 8084 	bcs.w	8000882 <__udivmoddi4+0x2a2>
 800077a:	45a1      	cmp	r9, r4
 800077c:	f240 8081 	bls.w	8000882 <__udivmoddi4+0x2a2>
 8000780:	f1ae 0e02 	sub.w	lr, lr, #2
 8000784:	443c      	add	r4, r7
 8000786:	eba4 0409 	sub.w	r4, r4, r9
 800078a:	fa1f f983 	uxth.w	r9, r3
 800078e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000792:	fb00 4413 	mls	r4, r0, r3, r4
 8000796:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079a:	fb03 fc0c 	mul.w	ip, r3, ip
 800079e:	45a4      	cmp	ip, r4
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x1d2>
 80007a2:	193c      	adds	r4, r7, r4
 80007a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80007a8:	d267      	bcs.n	800087a <__udivmoddi4+0x29a>
 80007aa:	45a4      	cmp	ip, r4
 80007ac:	d965      	bls.n	800087a <__udivmoddi4+0x29a>
 80007ae:	3b02      	subs	r3, #2
 80007b0:	443c      	add	r4, r7
 80007b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007b6:	fba0 9302 	umull	r9, r3, r0, r2
 80007ba:	eba4 040c 	sub.w	r4, r4, ip
 80007be:	429c      	cmp	r4, r3
 80007c0:	46ce      	mov	lr, r9
 80007c2:	469c      	mov	ip, r3
 80007c4:	d351      	bcc.n	800086a <__udivmoddi4+0x28a>
 80007c6:	d04e      	beq.n	8000866 <__udivmoddi4+0x286>
 80007c8:	b155      	cbz	r5, 80007e0 <__udivmoddi4+0x200>
 80007ca:	ebb8 030e 	subs.w	r3, r8, lr
 80007ce:	eb64 040c 	sbc.w	r4, r4, ip
 80007d2:	fa04 f606 	lsl.w	r6, r4, r6
 80007d6:	40cb      	lsrs	r3, r1
 80007d8:	431e      	orrs	r6, r3
 80007da:	40cc      	lsrs	r4, r1
 80007dc:	e9c5 6400 	strd	r6, r4, [r5]
 80007e0:	2100      	movs	r1, #0
 80007e2:	e750      	b.n	8000686 <__udivmoddi4+0xa6>
 80007e4:	f1c2 0320 	rsb	r3, r2, #32
 80007e8:	fa20 f103 	lsr.w	r1, r0, r3
 80007ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80007f0:	fa24 f303 	lsr.w	r3, r4, r3
 80007f4:	4094      	lsls	r4, r2
 80007f6:	430c      	orrs	r4, r1
 80007f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000800:	fa1f f78c 	uxth.w	r7, ip
 8000804:	fbb3 f0f8 	udiv	r0, r3, r8
 8000808:	fb08 3110 	mls	r1, r8, r0, r3
 800080c:	0c23      	lsrs	r3, r4, #16
 800080e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000812:	fb00 f107 	mul.w	r1, r0, r7
 8000816:	4299      	cmp	r1, r3
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x24c>
 800081a:	eb1c 0303 	adds.w	r3, ip, r3
 800081e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000822:	d22c      	bcs.n	800087e <__udivmoddi4+0x29e>
 8000824:	4299      	cmp	r1, r3
 8000826:	d92a      	bls.n	800087e <__udivmoddi4+0x29e>
 8000828:	3802      	subs	r0, #2
 800082a:	4463      	add	r3, ip
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb3 f1f8 	udiv	r1, r3, r8
 8000834:	fb08 3311 	mls	r3, r8, r1, r3
 8000838:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800083c:	fb01 f307 	mul.w	r3, r1, r7
 8000840:	42a3      	cmp	r3, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x276>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f101 36ff 	add.w	r6, r1, #4294967295
 800084c:	d213      	bcs.n	8000876 <__udivmoddi4+0x296>
 800084e:	42a3      	cmp	r3, r4
 8000850:	d911      	bls.n	8000876 <__udivmoddi4+0x296>
 8000852:	3902      	subs	r1, #2
 8000854:	4464      	add	r4, ip
 8000856:	1ae4      	subs	r4, r4, r3
 8000858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800085c:	e739      	b.n	80006d2 <__udivmoddi4+0xf2>
 800085e:	4604      	mov	r4, r0
 8000860:	e6f0      	b.n	8000644 <__udivmoddi4+0x64>
 8000862:	4608      	mov	r0, r1
 8000864:	e706      	b.n	8000674 <__udivmoddi4+0x94>
 8000866:	45c8      	cmp	r8, r9
 8000868:	d2ae      	bcs.n	80007c8 <__udivmoddi4+0x1e8>
 800086a:	ebb9 0e02 	subs.w	lr, r9, r2
 800086e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000872:	3801      	subs	r0, #1
 8000874:	e7a8      	b.n	80007c8 <__udivmoddi4+0x1e8>
 8000876:	4631      	mov	r1, r6
 8000878:	e7ed      	b.n	8000856 <__udivmoddi4+0x276>
 800087a:	4603      	mov	r3, r0
 800087c:	e799      	b.n	80007b2 <__udivmoddi4+0x1d2>
 800087e:	4630      	mov	r0, r6
 8000880:	e7d4      	b.n	800082c <__udivmoddi4+0x24c>
 8000882:	46d6      	mov	lr, sl
 8000884:	e77f      	b.n	8000786 <__udivmoddi4+0x1a6>
 8000886:	4463      	add	r3, ip
 8000888:	3802      	subs	r0, #2
 800088a:	e74d      	b.n	8000728 <__udivmoddi4+0x148>
 800088c:	4606      	mov	r6, r0
 800088e:	4623      	mov	r3, r4
 8000890:	4608      	mov	r0, r1
 8000892:	e70f      	b.n	80006b4 <__udivmoddi4+0xd4>
 8000894:	3e02      	subs	r6, #2
 8000896:	4463      	add	r3, ip
 8000898:	e730      	b.n	80006fc <__udivmoddi4+0x11c>
 800089a:	bf00      	nop

0800089c <__aeabi_idiv0>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <bldc_interface_init>:
static void(*rx_mcconf_received_func)(void) = 0;
static void(*rx_appconf_received_func)(void) = 0;
static void(*motor_control_set_func)(motor_control_mode mode, float value) = 0;
static void(*values_requested_func)(void) = 0;

void bldc_interface_init(void(*func)(unsigned char *data, unsigned int len)) {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	send_func = func;
 80008a8:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <bldc_interface_init+0x1c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	2000098c 	.word	0x2000098c

080008c0 <bldc_interface_send_packet>:
 * The packet data.
 *
 * @param len
 * The data length.
 */
void bldc_interface_send_packet(unsigned char *data, unsigned int len) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	if (send_func) {
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <bldc_interface_send_packet+0x24>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d004      	beq.n	80008dc <bldc_interface_send_packet+0x1c>
		send_func(data, len);
 80008d2:	4b04      	ldr	r3, [pc, #16]	@ (80008e4 <bldc_interface_send_packet+0x24>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6839      	ldr	r1, [r7, #0]
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	4798      	blx	r3
	}
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	2000098c 	.word	0x2000098c

080008e8 <bldc_interface_process_packet>:
 * The buffer to process.
 *
 * @param len
 * The length of the buffer.
 */
void bldc_interface_process_packet(unsigned char *data, unsigned int len) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	if (!len) {
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f001 8205 	beq.w	8001d04 <bldc_interface_process_packet+0x141c>
		return;
	}

	if (forward_func) {
 80008fa:	4bc1      	ldr	r3, [pc, #772]	@ (8000c00 <bldc_interface_process_packet+0x318>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d006      	beq.n	8000910 <bldc_interface_process_packet+0x28>
		forward_func(data, len);
 8000902:	4bbf      	ldr	r3, [pc, #764]	@ (8000c00 <bldc_interface_process_packet+0x318>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	6839      	ldr	r1, [r7, #0]
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	4798      	blx	r3
		return;
 800090c:	f001 ba13 	b.w	8001d36 <bldc_interface_process_packet+0x144e>
	}

	int32_t ind = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	int i = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
	unsigned char id = data[0];
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	74fb      	strb	r3, [r7, #19]
	data++;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3301      	adds	r3, #1
 8000922:	607b      	str	r3, [r7, #4]
	len--;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	3b01      	subs	r3, #1
 8000928:	603b      	str	r3, [r7, #0]

	switch (id) {
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	2b21      	cmp	r3, #33	@ 0x21
 800092e:	f201 81eb 	bhi.w	8001d08 <bldc_interface_process_packet+0x1420>
 8000932:	a201      	add	r2, pc, #4	@ (adr r2, 8000938 <bldc_interface_process_packet+0x50>)
 8000934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000938:	080009c1 	.word	0x080009c1
 800093c:	08001d09 	.word	0x08001d09
 8000940:	08001d09 	.word	0x08001d09
 8000944:	08001d09 	.word	0x08001d09
 8000948:	08000a0b 	.word	0x08000a0b
 800094c:	08001d09 	.word	0x08001d09
 8000950:	08001d09 	.word	0x08001d09
 8000954:	08001d09 	.word	0x08001d09
 8000958:	08001d09 	.word	0x08001d09
 800095c:	08001d09 	.word	0x08001d09
 8000960:	08001d09 	.word	0x08001d09
 8000964:	08001d09 	.word	0x08001d09
 8000968:	08001d09 	.word	0x08001d09
 800096c:	08001ce5 	.word	0x08001ce5
 8000970:	08000c91 	.word	0x08000c91
 8000974:	08000c91 	.word	0x08000c91
 8000978:	08001cf5 	.word	0x08001cf5
 800097c:	0800153d 	.word	0x0800153d
 8000980:	0800153d 	.word	0x0800153d
 8000984:	08001d09 	.word	0x08001d09
 8000988:	08001d09 	.word	0x08001d09
 800098c:	08000c25 	.word	0x08000c25
 8000990:	08000c45 	.word	0x08000c45
 8000994:	08001d09 	.word	0x08001d09
 8000998:	08001b4d 	.word	0x08001b4d
 800099c:	08001d09 	.word	0x08001d09
 80009a0:	08001d09 	.word	0x08001d09
 80009a4:	08001d09 	.word	0x08001d09
 80009a8:	08001d09 	.word	0x08001d09
 80009ac:	08001d09 	.word	0x08001d09
 80009b0:	08001d09 	.word	0x08001d09
 80009b4:	08001bf5 	.word	0x08001bf5
 80009b8:	08001c51 	.word	0x08001c51
 80009bc:	08001cad 	.word	0x08001cad
	case COMM_FW_VERSION:
		if (len == 2) {
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d117      	bne.n	80009f6 <bldc_interface_process_packet+0x10e>
			ind = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
			fw_major = data[ind++];
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	60fa      	str	r2, [r7, #12]
 80009d0:	461a      	mov	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b8a      	ldr	r3, [pc, #552]	@ (8000c04 <bldc_interface_process_packet+0x31c>)
 80009dc:	601a      	str	r2, [r3, #0]
			fw_minor = data[ind++];
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	60fa      	str	r2, [r7, #12]
 80009e4:	461a      	mov	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b86      	ldr	r3, [pc, #536]	@ (8000c08 <bldc_interface_process_packet+0x320>)
 80009f0:	601a      	str	r2, [r3, #0]
		} else {
			fw_major = -1;
			fw_minor = -1;
		}
		break;
 80009f2:	f001 b9a0 	b.w	8001d36 <bldc_interface_process_packet+0x144e>
			fw_major = -1;
 80009f6:	4b83      	ldr	r3, [pc, #524]	@ (8000c04 <bldc_interface_process_packet+0x31c>)
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	601a      	str	r2, [r3, #0]
			fw_minor = -1;
 80009fe:	4b82      	ldr	r3, [pc, #520]	@ (8000c08 <bldc_interface_process_packet+0x320>)
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	601a      	str	r2, [r3, #0]
		break;
 8000a06:	f001 b996 	b.w	8001d36 <bldc_interface_process_packet+0x144e>
	case COMM_WRITE_NEW_APP_DATA:
		// TODO
		break;

	case COMM_GET_VALUES:
		ind = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
		values.temp_mos = buffer_get_float16(data, 1e1, &ind);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f001 fb32 	bl	8002082 <buffer_get_float16>
 8000a1e:	eef0 7a40 	vmov.f32	s15, s0
 8000a22:	4b7a      	ldr	r3, [pc, #488]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a24:	edc3 7a01 	vstr	s15, [r3, #4]
		values.temp_motor = buffer_get_float16(data, 1e1, &ind);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f001 fb25 	bl	8002082 <buffer_get_float16>
 8000a38:	eef0 7a40 	vmov.f32	s15, s0
 8000a3c:	4b73      	ldr	r3, [pc, #460]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a3e:	edc3 7a02 	vstr	s15, [r3, #8]
		values.current_motor = buffer_get_float32(data, 1e2, &ind);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4619      	mov	r1, r3
 8000a48:	ed9f 0a71 	vldr	s0, [pc, #452]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f001 fb33 	bl	80020b8 <buffer_get_float32>
 8000a52:	eef0 7a40 	vmov.f32	s15, s0
 8000a56:	4b6d      	ldr	r3, [pc, #436]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a58:	edc3 7a03 	vstr	s15, [r3, #12]
		values.current_in = buffer_get_float32(data, 1e2, &ind);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	4619      	mov	r1, r3
 8000a62:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f001 fb26 	bl	80020b8 <buffer_get_float32>
 8000a6c:	eef0 7a40 	vmov.f32	s15, s0
 8000a70:	4b66      	ldr	r3, [pc, #408]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a72:	edc3 7a04 	vstr	s15, [r3, #16]
		values.id = buffer_get_float32(data, 1e2, &ind);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f001 fb19 	bl	80020b8 <buffer_get_float32>
 8000a86:	eef0 7a40 	vmov.f32	s15, s0
 8000a8a:	4b60      	ldr	r3, [pc, #384]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000a8c:	edc3 7a05 	vstr	s15, [r3, #20]
		values.iq = buffer_get_float32(data, 1e2, &ind);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8000c10 <bldc_interface_process_packet+0x328>
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f001 fb0c 	bl	80020b8 <buffer_get_float32>
 8000aa0:	eef0 7a40 	vmov.f32	s15, s0
 8000aa4:	4b59      	ldr	r3, [pc, #356]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000aa6:	edc3 7a06 	vstr	s15, [r3, #24]
		values.duty_now = buffer_get_float16(data, 1e3, &ind);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8000c14 <bldc_interface_process_packet+0x32c>
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f001 fae4 	bl	8002082 <buffer_get_float16>
 8000aba:	eef0 7a40 	vmov.f32	s15, s0
 8000abe:	4b53      	ldr	r3, [pc, #332]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000ac0:	edc3 7a08 	vstr	s15, [r3, #32]
		values.rpm = buffer_get_float32(data, 1e0, &ind);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4619      	mov	r1, r3
 8000aca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f001 faf2 	bl	80020b8 <buffer_get_float32>
 8000ad4:	eef0 7a40 	vmov.f32	s15, s0
 8000ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000ada:	edc3 7a07 	vstr	s15, [r3, #28]
		values.v_in = buffer_get_float16(data, 1e1, &ind);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f001 faca 	bl	8002082 <buffer_get_float16>
 8000aee:	eef0 7a40 	vmov.f32	s15, s0
 8000af2:	4b46      	ldr	r3, [pc, #280]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000af4:	edc3 7a00 	vstr	s15, [r3]
		values.amp_hours = buffer_get_float32(data, 1e4, &ind);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f001 fad8 	bl	80020b8 <buffer_get_float32>
 8000b08:	eef0 7a40 	vmov.f32	s15, s0
 8000b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b0e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		values.amp_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4619      	mov	r1, r3
 8000b18:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f001 facb 	bl	80020b8 <buffer_get_float32>
 8000b22:	eef0 7a40 	vmov.f32	s15, s0
 8000b26:	4b39      	ldr	r3, [pc, #228]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b28:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		values.watt_hours = buffer_get_float32(data, 1e4, &ind);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f001 fabe 	bl	80020b8 <buffer_get_float32>
 8000b3c:	eef0 7a40 	vmov.f32	s15, s0
 8000b40:	4b32      	ldr	r3, [pc, #200]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b42:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		values.watt_hours_charged = buffer_get_float32(data, 1e4, &ind);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8000c18 <bldc_interface_process_packet+0x330>
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f001 fab1 	bl	80020b8 <buffer_get_float32>
 8000b56:	eef0 7a40 	vmov.f32	s15, s0
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b5c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		values.tachometer = buffer_get_int32(data, &ind);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f001 fa2b 	bl	8001fc2 <buffer_get_int32>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	4a27      	ldr	r2, [pc, #156]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b70:	6353      	str	r3, [r2, #52]	@ 0x34
		values.tachometer_abs = buffer_get_int32(data, &ind);
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4619      	mov	r1, r3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f001 fa22 	bl	8001fc2 <buffer_get_int32>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a22      	ldr	r2, [pc, #136]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b82:	6393      	str	r3, [r2, #56]	@ 0x38
		values.fault_code = (mc_fault_code)data[ind++];
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60fa      	str	r2, [r7, #12]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

		if (ind < (int)len) {
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	da0d      	bge.n	8000bbc <bldc_interface_process_packet+0x2d4>
			values.pid_pos = buffer_get_float32(data, 1e6, &ind);
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8000c1c <bldc_interface_process_packet+0x334>
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f001 fa84 	bl	80020b8 <buffer_get_float32>
 8000bb0:	eef0 7a40 	vmov.f32	s15, s0
 8000bb4:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bb6:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
 8000bba:	e003      	b.n	8000bc4 <bldc_interface_process_packet+0x2dc>
		} else {
			values.pid_pos = 0.0;
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		if (ind < (int)len) {
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	da0a      	bge.n	8000be2 <bldc_interface_process_packet+0x2fa>
			values.vesc_id = data[ind++];
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	60fa      	str	r2, [r7, #12]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	4b0c      	ldr	r3, [pc, #48]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000be0:	e003      	b.n	8000bea <bldc_interface_process_packet+0x302>
		} else {
			values.vesc_id = 255;
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000be4:	22ff      	movs	r2, #255	@ 0xff
 8000be6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		}

		if (rx_value_func) {
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <bldc_interface_process_packet+0x338>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f001 808c 	beq.w	8001d0c <bldc_interface_process_packet+0x1424>
			rx_value_func(&values);
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <bldc_interface_process_packet+0x338>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <bldc_interface_process_packet+0x324>)
 8000bfa:	4798      	blx	r3
		}
		break;
 8000bfc:	f001 b886 	b.w	8001d0c <bldc_interface_process_packet+0x1424>
 8000c00:	20000990 	.word	0x20000990
 8000c04:	2000070c 	.word	0x2000070c
 8000c08:	20000710 	.word	0x20000710
 8000c0c:	200006c4 	.word	0x200006c4
 8000c10:	42c80000 	.word	0x42c80000
 8000c14:	447a0000 	.word	0x447a0000
 8000c18:	461c4000 	.word	0x461c4000
 8000c1c:	49742400 	.word	0x49742400
 8000c20:	20000994 	.word	0x20000994

	case COMM_PRINT:
		if (rx_printf_func) {
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <bldc_interface_process_packet+0x398>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f001 8071 	beq.w	8001d10 <bldc_interface_process_packet+0x1428>
			data[len] = '\0';
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
			rx_printf_func((char*)data);
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <bldc_interface_process_packet+0x398>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	4798      	blx	r3
		}
		break;
 8000c40:	f001 b866 	b.w	8001d10 <bldc_interface_process_packet+0x1428>
	case COMM_SAMPLE_PRINT:
		// TODO
		break;

	case COMM_ROTOR_POSITION:
		ind = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
		rotor_pos = buffer_get_float32(data, 100000.0, &ind);
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000c84 <bldc_interface_process_packet+0x39c>
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f001 fa30 	bl	80020b8 <buffer_get_float32>
 8000c58:	eef0 7a40 	vmov.f32	s15, s0
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <bldc_interface_process_packet+0x3a0>)
 8000c5e:	edc3 7a00 	vstr	s15, [r3]

		if (rx_rotor_pos_func) {
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <bldc_interface_process_packet+0x3a4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f001 8054 	beq.w	8001d14 <bldc_interface_process_packet+0x142c>
			rx_rotor_pos_func(rotor_pos);
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <bldc_interface_process_packet+0x3a4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <bldc_interface_process_packet+0x3a0>)
 8000c72:	edd2 7a00 	vldr	s15, [r2]
 8000c76:	eeb0 0a67 	vmov.f32	s0, s15
 8000c7a:	4798      	blx	r3
		}
		break;
 8000c7c:	f001 b84a 	b.w	8001d14 <bldc_interface_process_packet+0x142c>
 8000c80:	20000998 	.word	0x20000998
 8000c84:	47c35000 	.word	0x47c35000
 8000c88:	20000714 	.word	0x20000714
 8000c8c:	2000099c 	.word	0x2000099c
		// TODO
		break;

	case COMM_GET_MCCONF:
	case COMM_GET_MCCONF_DEFAULT:
		ind = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
		mcconf.pwm_mode = data[ind++];
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60fa      	str	r2, [r7, #12]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	781a      	ldrb	r2, [r3, #0]
 8000ca2:	4bc7      	ldr	r3, [pc, #796]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ca4:	701a      	strb	r2, [r3, #0]
		mcconf.comm_mode = data[ind++];
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	60fa      	str	r2, [r7, #12]
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	4bc2      	ldr	r3, [pc, #776]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cb6:	705a      	strb	r2, [r3, #1]
		mcconf.motor_type = data[ind++];
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60fa      	str	r2, [r7, #12]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	4bbe      	ldr	r3, [pc, #760]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cc8:	709a      	strb	r2, [r3, #2]
		mcconf.sensor_mode = data[ind++];
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	1c5a      	adds	r2, r3, #1
 8000cce:	60fa      	str	r2, [r7, #12]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781a      	ldrb	r2, [r3, #0]
 8000cd8:	4bb9      	ldr	r3, [pc, #740]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cda:	70da      	strb	r2, [r3, #3]

		mcconf.l_current_max = buffer_get_float32_auto(data, &ind);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f001 fa04 	bl	80020f0 <buffer_get_float32_auto>
 8000ce8:	eef0 7a40 	vmov.f32	s15, s0
 8000cec:	4bb4      	ldr	r3, [pc, #720]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000cee:	edc3 7a01 	vstr	s15, [r3, #4]
		mcconf.l_current_min = buffer_get_float32_auto(data, &ind);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f001 f9f9 	bl	80020f0 <buffer_get_float32_auto>
 8000cfe:	eef0 7a40 	vmov.f32	s15, s0
 8000d02:	4baf      	ldr	r3, [pc, #700]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d04:	edc3 7a02 	vstr	s15, [r3, #8]
		mcconf.l_in_current_max = buffer_get_float32_auto(data, &ind);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f001 f9ee 	bl	80020f0 <buffer_get_float32_auto>
 8000d14:	eef0 7a40 	vmov.f32	s15, s0
 8000d18:	4ba9      	ldr	r3, [pc, #676]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d1a:	edc3 7a03 	vstr	s15, [r3, #12]
		mcconf.l_in_current_min = buffer_get_float32_auto(data, &ind);
 8000d1e:	f107 030c 	add.w	r3, r7, #12
 8000d22:	4619      	mov	r1, r3
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f001 f9e3 	bl	80020f0 <buffer_get_float32_auto>
 8000d2a:	eef0 7a40 	vmov.f32	s15, s0
 8000d2e:	4ba4      	ldr	r3, [pc, #656]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d30:	edc3 7a04 	vstr	s15, [r3, #16]
		mcconf.l_abs_current_max = buffer_get_float32_auto(data, &ind);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4619      	mov	r1, r3
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f001 f9d8 	bl	80020f0 <buffer_get_float32_auto>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
 8000d44:	4b9e      	ldr	r3, [pc, #632]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d46:	edc3 7a05 	vstr	s15, [r3, #20]
		mcconf.l_min_erpm = buffer_get_float32_auto(data, &ind);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f001 f9cd 	bl	80020f0 <buffer_get_float32_auto>
 8000d56:	eef0 7a40 	vmov.f32	s15, s0
 8000d5a:	4b99      	ldr	r3, [pc, #612]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d5c:	edc3 7a06 	vstr	s15, [r3, #24]
		mcconf.l_max_erpm = buffer_get_float32_auto(data, &ind);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f001 f9c2 	bl	80020f0 <buffer_get_float32_auto>
 8000d6c:	eef0 7a40 	vmov.f32	s15, s0
 8000d70:	4b93      	ldr	r3, [pc, #588]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d72:	edc3 7a07 	vstr	s15, [r3, #28]
		mcconf.l_erpm_start = buffer_get_float32_auto(data, &ind);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f001 f9b7 	bl	80020f0 <buffer_get_float32_auto>
 8000d82:	eef0 7a40 	vmov.f32	s15, s0
 8000d86:	4b8e      	ldr	r3, [pc, #568]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d88:	edc3 7a08 	vstr	s15, [r3, #32]
		mcconf.l_max_erpm_fbrake = buffer_get_float32_auto(data, &ind);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f001 f9ac 	bl	80020f0 <buffer_get_float32_auto>
 8000d98:	eef0 7a40 	vmov.f32	s15, s0
 8000d9c:	4b88      	ldr	r3, [pc, #544]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000d9e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		mcconf.l_max_erpm_fbrake_cc = buffer_get_float32_auto(data, &ind);
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f001 f9a1 	bl	80020f0 <buffer_get_float32_auto>
 8000dae:	eef0 7a40 	vmov.f32	s15, s0
 8000db2:	4b83      	ldr	r3, [pc, #524]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000db4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		mcconf.l_min_vin = buffer_get_float32_auto(data, &ind);
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f001 f996 	bl	80020f0 <buffer_get_float32_auto>
 8000dc4:	eef0 7a40 	vmov.f32	s15, s0
 8000dc8:	4b7d      	ldr	r3, [pc, #500]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000dca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		mcconf.l_max_vin = buffer_get_float32_auto(data, &ind);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f001 f98b 	bl	80020f0 <buffer_get_float32_auto>
 8000dda:	eef0 7a40 	vmov.f32	s15, s0
 8000dde:	4b78      	ldr	r3, [pc, #480]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000de0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		mcconf.l_battery_cut_start = buffer_get_float32_auto(data, &ind);
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	4619      	mov	r1, r3
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f001 f980 	bl	80020f0 <buffer_get_float32_auto>
 8000df0:	eef0 7a40 	vmov.f32	s15, s0
 8000df4:	4b72      	ldr	r3, [pc, #456]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000df6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		mcconf.l_battery_cut_end = buffer_get_float32_auto(data, &ind);
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f001 f975 	bl	80020f0 <buffer_get_float32_auto>
 8000e06:	eef0 7a40 	vmov.f32	s15, s0
 8000e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e0c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		mcconf.l_slow_abs_current = data[ind++];
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	60fa      	str	r2, [r7, #12]
 8000e16:	461a      	mov	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	bf14      	ite	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	2300      	moveq	r3, #0
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b65      	ldr	r3, [pc, #404]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		mcconf.l_temp_fet_start = buffer_get_float32_auto(data, &ind);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f001 f95b 	bl	80020f0 <buffer_get_float32_auto>
 8000e3a:	eef0 7a40 	vmov.f32	s15, s0
 8000e3e:	4b60      	ldr	r3, [pc, #384]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e40:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		mcconf.l_temp_fet_end = buffer_get_float32_auto(data, &ind);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4619      	mov	r1, r3
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f001 f950 	bl	80020f0 <buffer_get_float32_auto>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
 8000e54:	4b5a      	ldr	r3, [pc, #360]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e56:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		mcconf.l_temp_motor_start = buffer_get_float32_auto(data, &ind);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f001 f945 	bl	80020f0 <buffer_get_float32_auto>
 8000e66:	eef0 7a40 	vmov.f32	s15, s0
 8000e6a:	4b55      	ldr	r3, [pc, #340]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e6c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		mcconf.l_temp_motor_end = buffer_get_float32_auto(data, &ind);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f001 f93a 	bl	80020f0 <buffer_get_float32_auto>
 8000e7c:	eef0 7a40 	vmov.f32	s15, s0
 8000e80:	4b4f      	ldr	r3, [pc, #316]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e82:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		mcconf.l_temp_accel_dec = buffer_get_float32_auto(data, &ind);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f001 f92f 	bl	80020f0 <buffer_get_float32_auto>
 8000e92:	eef0 7a40 	vmov.f32	s15, s0
 8000e96:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000e98:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
		mcconf.l_min_duty = buffer_get_float32_auto(data, &ind);
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f001 f924 	bl	80020f0 <buffer_get_float32_auto>
 8000ea8:	eef0 7a40 	vmov.f32	s15, s0
 8000eac:	4b44      	ldr	r3, [pc, #272]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000eae:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		mcconf.l_max_duty = buffer_get_float32_auto(data, &ind);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f001 f919 	bl	80020f0 <buffer_get_float32_auto>
 8000ebe:	eef0 7a40 	vmov.f32	s15, s0
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ec4:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		mcconf.l_watt_max = buffer_get_float32_auto(data, &ind);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f001 f90e 	bl	80020f0 <buffer_get_float32_auto>
 8000ed4:	eef0 7a40 	vmov.f32	s15, s0
 8000ed8:	4b39      	ldr	r3, [pc, #228]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000eda:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		mcconf.l_watt_min = buffer_get_float32_auto(data, &ind);
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f001 f903 	bl	80020f0 <buffer_get_float32_auto>
 8000eea:	eef0 7a40 	vmov.f32	s15, s0
 8000eee:	4b34      	ldr	r3, [pc, #208]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ef0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

		mcconf.lo_current_max = mcconf.l_current_max;
 8000ef4:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4a31      	ldr	r2, [pc, #196]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000efa:	6653      	str	r3, [r2, #100]	@ 0x64
		mcconf.lo_current_min = mcconf.l_current_min;
 8000efc:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f02:	6693      	str	r3, [r2, #104]	@ 0x68
		mcconf.lo_in_current_max = mcconf.l_in_current_max;
 8000f04:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f0a:	66d3      	str	r3, [r2, #108]	@ 0x6c
		mcconf.lo_in_current_min = mcconf.l_in_current_min;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f12:	6713      	str	r3, [r2, #112]	@ 0x70
		mcconf.lo_current_motor_max_now = mcconf.l_current_max;
 8000f14:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	4a29      	ldr	r2, [pc, #164]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f1a:	6753      	str	r3, [r2, #116]	@ 0x74
		mcconf.lo_current_motor_min_now = mcconf.l_current_min;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4a27      	ldr	r2, [pc, #156]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f22:	6793      	str	r3, [r2, #120]	@ 0x78

		mcconf.sl_min_erpm = buffer_get_float32_auto(data, &ind);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 f8e0 	bl	80020f0 <buffer_get_float32_auto>
 8000f30:	eef0 7a40 	vmov.f32	s15, s0
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f36:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
		mcconf.sl_min_erpm_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f001 f8d5 	bl	80020f0 <buffer_get_float32_auto>
 8000f46:	eef0 7a40 	vmov.f32	s15, s0
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f4c:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
		mcconf.sl_max_fullbreak_current_dir_change = buffer_get_float32_auto(data, &ind);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f001 f8ca 	bl	80020f0 <buffer_get_float32_auto>
 8000f5c:	eef0 7a40 	vmov.f32	s15, s0
 8000f60:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f62:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
		mcconf.sl_cycle_int_limit = buffer_get_float32_auto(data, &ind);
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f001 f8bf 	bl	80020f0 <buffer_get_float32_auto>
 8000f72:	eef0 7a40 	vmov.f32	s15, s0
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f78:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
		mcconf.sl_phase_advance_at_br = buffer_get_float32_auto(data, &ind);
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	4619      	mov	r1, r3
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f001 f8b4 	bl	80020f0 <buffer_get_float32_auto>
 8000f88:	eef0 7a40 	vmov.f32	s15, s0
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000f8e:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		mcconf.sl_cycle_int_rpm_br = buffer_get_float32_auto(data, &ind);
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f001 f8a9 	bl	80020f0 <buffer_get_float32_auto>
 8000f9e:	eef0 7a40 	vmov.f32	s15, s0
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000fa4:	edc3 7a24 	vstr	s15, [r3, #144]	@ 0x90
		mcconf.sl_bemf_coupling_k = buffer_get_float32_auto(data, &ind);
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	4619      	mov	r1, r3
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f001 f89e 	bl	80020f0 <buffer_get_float32_auto>
 8000fb4:	eef0 7a40 	vmov.f32	s15, s0
 8000fb8:	4b01      	ldr	r3, [pc, #4]	@ (8000fc0 <bldc_interface_process_packet+0x6d8>)
 8000fba:	edc3 7a25 	vstr	s15, [r3, #148]	@ 0x94
 8000fbe:	e001      	b.n	8000fc4 <bldc_interface_process_packet+0x6dc>
 8000fc0:	20000718 	.word	0x20000718

		memcpy(mcconf.hall_table, data + ind, 8);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	441a      	add	r2, r3
 8000fcc:	4bc9      	ldr	r3, [pc, #804]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8000fce:	3398      	adds	r3, #152	@ 0x98
 8000fd0:	6810      	ldr	r0, [r2, #0]
 8000fd2:	6851      	ldr	r1, [r2, #4]
 8000fd4:	c303      	stmia	r3!, {r0, r1}
		ind += 8;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3308      	adds	r3, #8
 8000fda:	60fb      	str	r3, [r7, #12]
		mcconf.hall_sl_erpm = buffer_get_float32_auto(data, &ind);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f001 f884 	bl	80020f0 <buffer_get_float32_auto>
 8000fe8:	eef0 7a40 	vmov.f32	s15, s0
 8000fec:	4bc1      	ldr	r3, [pc, #772]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8000fee:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0

		mcconf.foc_current_kp = buffer_get_float32_auto(data, &ind);
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f001 f879 	bl	80020f0 <buffer_get_float32_auto>
 8000ffe:	eef0 7a40 	vmov.f32	s15, s0
 8001002:	4bbc      	ldr	r3, [pc, #752]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001004:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
		mcconf.foc_current_ki = buffer_get_float32_auto(data, &ind);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f001 f86e 	bl	80020f0 <buffer_get_float32_auto>
 8001014:	eef0 7a40 	vmov.f32	s15, s0
 8001018:	4bb6      	ldr	r3, [pc, #728]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800101a:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
		mcconf.foc_f_sw = buffer_get_float32_auto(data, &ind);
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	4619      	mov	r1, r3
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f001 f863 	bl	80020f0 <buffer_get_float32_auto>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	4bb1      	ldr	r3, [pc, #708]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001030:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
		mcconf.foc_dt_us = buffer_get_float32_auto(data, &ind);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	4619      	mov	r1, r3
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f001 f858 	bl	80020f0 <buffer_get_float32_auto>
 8001040:	eef0 7a40 	vmov.f32	s15, s0
 8001044:	4bab      	ldr	r3, [pc, #684]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001046:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
		mcconf.foc_encoder_inverted = data[ind++];
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	60fa      	str	r2, [r7, #12]
 8001050:	461a      	mov	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf14      	ite	ne
 800105c:	2301      	movne	r3, #1
 800105e:	2300      	moveq	r3, #0
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4ba4      	ldr	r3, [pc, #656]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001064:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		mcconf.foc_encoder_offset = buffer_get_float32_auto(data, &ind);
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	4619      	mov	r1, r3
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f001 f83e 	bl	80020f0 <buffer_get_float32_auto>
 8001074:	eef0 7a40 	vmov.f32	s15, s0
 8001078:	4b9e      	ldr	r3, [pc, #632]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800107a:	edc3 7a2d 	vstr	s15, [r3, #180]	@ 0xb4
		mcconf.foc_encoder_ratio = buffer_get_float32_auto(data, &ind);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4619      	mov	r1, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f001 f833 	bl	80020f0 <buffer_get_float32_auto>
 800108a:	eef0 7a40 	vmov.f32	s15, s0
 800108e:	4b99      	ldr	r3, [pc, #612]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001090:	edc3 7a2f 	vstr	s15, [r3, #188]	@ 0xbc
		mcconf.foc_sensor_mode = data[ind++];
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	60fa      	str	r2, [r7, #12]
 800109a:	461a      	mov	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	4b94      	ldr	r3, [pc, #592]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010a4:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
		mcconf.foc_pll_kp = buffer_get_float32_auto(data, &ind);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f001 f81e 	bl	80020f0 <buffer_get_float32_auto>
 80010b4:	eef0 7a40 	vmov.f32	s15, s0
 80010b8:	4b8e      	ldr	r3, [pc, #568]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010ba:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4
		mcconf.foc_pll_ki = buffer_get_float32_auto(data, &ind);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f001 f813 	bl	80020f0 <buffer_get_float32_auto>
 80010ca:	eef0 7a40 	vmov.f32	s15, s0
 80010ce:	4b89      	ldr	r3, [pc, #548]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010d0:	edc3 7a36 	vstr	s15, [r3, #216]	@ 0xd8
		mcconf.foc_motor_l = buffer_get_float32_auto(data, &ind);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f001 f808 	bl	80020f0 <buffer_get_float32_auto>
 80010e0:	eef0 7a40 	vmov.f32	s15, s0
 80010e4:	4b83      	ldr	r3, [pc, #524]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010e6:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0
		mcconf.foc_motor_r = buffer_get_float32_auto(data, &ind);
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	4619      	mov	r1, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fffd 	bl	80020f0 <buffer_get_float32_auto>
 80010f6:	eef0 7a40 	vmov.f32	s15, s0
 80010fa:	4b7e      	ldr	r3, [pc, #504]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80010fc:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4
		mcconf.foc_motor_flux_linkage = buffer_get_float32_auto(data, &ind);
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fff2 	bl	80020f0 <buffer_get_float32_auto>
 800110c:	eef0 7a40 	vmov.f32	s15, s0
 8001110:	4b78      	ldr	r3, [pc, #480]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001112:	edc3 7a32 	vstr	s15, [r3, #200]	@ 0xc8
		mcconf.foc_observer_gain = buffer_get_float32_auto(data, &ind);
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f000 ffe7 	bl	80020f0 <buffer_get_float32_auto>
 8001122:	eef0 7a40 	vmov.f32	s15, s0
 8001126:	4b73      	ldr	r3, [pc, #460]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001128:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc
		mcconf.foc_observer_gain_slow = buffer_get_float32_auto(data, &ind);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4619      	mov	r1, r3
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 ffdc 	bl	80020f0 <buffer_get_float32_auto>
 8001138:	eef0 7a40 	vmov.f32	s15, s0
 800113c:	4b6d      	ldr	r3, [pc, #436]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800113e:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
		mcconf.foc_duty_dowmramp_kp = buffer_get_float32_auto(data, &ind);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	4619      	mov	r1, r3
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 ffd1 	bl	80020f0 <buffer_get_float32_auto>
 800114e:	eef0 7a40 	vmov.f32	s15, s0
 8001152:	4b68      	ldr	r3, [pc, #416]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001154:	edc3 7a37 	vstr	s15, [r3, #220]	@ 0xdc
		mcconf.foc_duty_dowmramp_ki = buffer_get_float32_auto(data, &ind);
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	4619      	mov	r1, r3
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 ffc6 	bl	80020f0 <buffer_get_float32_auto>
 8001164:	eef0 7a40 	vmov.f32	s15, s0
 8001168:	4b62      	ldr	r3, [pc, #392]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800116a:	edc3 7a38 	vstr	s15, [r3, #224]	@ 0xe0
		mcconf.foc_openloop_rpm = buffer_get_float32_auto(data, &ind);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4619      	mov	r1, r3
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 ffbb 	bl	80020f0 <buffer_get_float32_auto>
 800117a:	eef0 7a40 	vmov.f32	s15, s0
 800117e:	4b5d      	ldr	r3, [pc, #372]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001180:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
		mcconf.foc_sl_openloop_hyst = buffer_get_float32_auto(data, &ind);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 ffb0 	bl	80020f0 <buffer_get_float32_auto>
 8001190:	eef0 7a40 	vmov.f32	s15, s0
 8001194:	4b57      	ldr	r3, [pc, #348]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001196:	edc3 7a3a 	vstr	s15, [r3, #232]	@ 0xe8
		mcconf.foc_sl_openloop_time = buffer_get_float32_auto(data, &ind);
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	4619      	mov	r1, r3
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 ffa5 	bl	80020f0 <buffer_get_float32_auto>
 80011a6:	eef0 7a40 	vmov.f32	s15, s0
 80011aa:	4b52      	ldr	r3, [pc, #328]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011ac:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
		mcconf.foc_sl_d_current_duty = buffer_get_float32_auto(data, &ind);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 ff9a 	bl	80020f0 <buffer_get_float32_auto>
 80011bc:	eef0 7a40 	vmov.f32	s15, s0
 80011c0:	4b4c      	ldr	r3, [pc, #304]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011c2:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
		mcconf.foc_sl_d_current_factor = buffer_get_float32_auto(data, &ind);
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 ff8f 	bl	80020f0 <buffer_get_float32_auto>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
 80011d6:	4b47      	ldr	r3, [pc, #284]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011d8:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
		memcpy(mcconf.foc_hall_table, data + ind, 8);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	441a      	add	r2, r3
 80011e4:	4b43      	ldr	r3, [pc, #268]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80011e6:	33f9      	adds	r3, #249	@ 0xf9
 80011e8:	6811      	ldr	r1, [r2, #0]
 80011ea:	6852      	ldr	r2, [r2, #4]
 80011ec:	6019      	str	r1, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
		ind += 8;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3308      	adds	r3, #8
 80011f4:	60fb      	str	r3, [r7, #12]
		mcconf.foc_sl_erpm = buffer_get_float32_auto(data, &ind);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	4619      	mov	r1, r3
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 ff77 	bl	80020f0 <buffer_get_float32_auto>
 8001202:	eef0 7a40 	vmov.f32	s15, s0
 8001206:	4b3b      	ldr	r3, [pc, #236]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001208:	edc3 7a41 	vstr	s15, [r3, #260]	@ 0x104
		mcconf.foc_sample_v0_v7 = data[ind++];
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	60fa      	str	r2, [r7, #12]
 8001212:	461a      	mov	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf14      	ite	ne
 800121e:	2301      	movne	r3, #1
 8001220:	2300      	moveq	r3, #0
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b33      	ldr	r3, [pc, #204]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001226:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
		mcconf.foc_sample_high_current = data[ind++];
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	60fa      	str	r2, [r7, #12]
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	bf14      	ite	ne
 800123c:	2301      	movne	r3, #1
 800123e:	2300      	moveq	r3, #0
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001244:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
		mcconf.foc_sat_comp = buffer_get_float32_auto(data, &ind);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 ff4e 	bl	80020f0 <buffer_get_float32_auto>
 8001254:	eef0 7a40 	vmov.f32	s15, s0
 8001258:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800125a:	edc3 7a43 	vstr	s15, [r3, #268]	@ 0x10c
		mcconf.foc_temp_comp = data[ind++];
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	60fa      	str	r2, [r7, #12]
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf14      	ite	ne
 8001270:	2301      	movne	r3, #1
 8001272:	2300      	moveq	r3, #0
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 8001278:	f883 2110 	strb.w	r2, [r3, #272]	@ 0x110
		mcconf.foc_temp_comp_base_temp = buffer_get_float32_auto(data, &ind);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4619      	mov	r1, r3
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 ff34 	bl	80020f0 <buffer_get_float32_auto>
 8001288:	eef0 7a40 	vmov.f32	s15, s0
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 800128e:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
		mcconf.foc_current_filter_const = buffer_get_float32_auto(data, &ind);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 ff29 	bl	80020f0 <buffer_get_float32_auto>
 800129e:	eef0 7a40 	vmov.f32	s15, s0
 80012a2:	4b14      	ldr	r3, [pc, #80]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012a4:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118

		mcconf.s_pid_kp = buffer_get_float32_auto(data, &ind);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 ff1e 	bl	80020f0 <buffer_get_float32_auto>
 80012b4:	eef0 7a40 	vmov.f32	s15, s0
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012ba:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c
		mcconf.s_pid_ki = buffer_get_float32_auto(data, &ind);
 80012be:	f107 030c 	add.w	r3, r7, #12
 80012c2:	4619      	mov	r1, r3
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 ff13 	bl	80020f0 <buffer_get_float32_auto>
 80012ca:	eef0 7a40 	vmov.f32	s15, s0
 80012ce:	4b09      	ldr	r3, [pc, #36]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012d0:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120
		mcconf.s_pid_kd = buffer_get_float32_auto(data, &ind);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 ff08 	bl	80020f0 <buffer_get_float32_auto>
 80012e0:	eef0 7a40 	vmov.f32	s15, s0
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <bldc_interface_process_packet+0xa0c>)
 80012e6:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
		mcconf.s_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	4619      	mov	r1, r3
 80012f0:	e002      	b.n	80012f8 <bldc_interface_process_packet+0xa10>
 80012f2:	bf00      	nop
 80012f4:	20000718 	.word	0x20000718
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 fef9 	bl	80020f0 <buffer_get_float32_auto>
 80012fe:	eef0 7a40 	vmov.f32	s15, s0
 8001302:	4b8c      	ldr	r3, [pc, #560]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001304:	edc3 7a4a 	vstr	s15, [r3, #296]	@ 0x128
		mcconf.s_pid_min_erpm = buffer_get_float32_auto(data, &ind);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 feee 	bl	80020f0 <buffer_get_float32_auto>
 8001314:	eef0 7a40 	vmov.f32	s15, s0
 8001318:	4b86      	ldr	r3, [pc, #536]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800131a:	edc3 7a4b 	vstr	s15, [r3, #300]	@ 0x12c
		mcconf.s_pid_allow_braking = data[ind++];
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	60fa      	str	r2, [r7, #12]
 8001324:	461a      	mov	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b7f      	ldr	r3, [pc, #508]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001338:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

		mcconf.p_pid_kp = buffer_get_float32_auto(data, &ind);
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	4619      	mov	r1, r3
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fed4 	bl	80020f0 <buffer_get_float32_auto>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	4b79      	ldr	r3, [pc, #484]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800134e:	edc3 7a4d 	vstr	s15, [r3, #308]	@ 0x134
		mcconf.p_pid_ki = buffer_get_float32_auto(data, &ind);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 fec9 	bl	80020f0 <buffer_get_float32_auto>
 800135e:	eef0 7a40 	vmov.f32	s15, s0
 8001362:	4b74      	ldr	r3, [pc, #464]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001364:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
		mcconf.p_pid_kd = buffer_get_float32_auto(data, &ind);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 febe 	bl	80020f0 <buffer_get_float32_auto>
 8001374:	eef0 7a40 	vmov.f32	s15, s0
 8001378:	4b6e      	ldr	r3, [pc, #440]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800137a:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
		mcconf.p_pid_kd_filter = buffer_get_float32_auto(data, &ind);
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4619      	mov	r1, r3
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 feb3 	bl	80020f0 <buffer_get_float32_auto>
 800138a:	eef0 7a40 	vmov.f32	s15, s0
 800138e:	4b69      	ldr	r3, [pc, #420]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001390:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140
		mcconf.p_pid_ang_div = buffer_get_float32_auto(data, &ind);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	4619      	mov	r1, r3
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fea8 	bl	80020f0 <buffer_get_float32_auto>
 80013a0:	eef0 7a40 	vmov.f32	s15, s0
 80013a4:	4b63      	ldr	r3, [pc, #396]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013a6:	edc3 7a51 	vstr	s15, [r3, #324]	@ 0x144

		mcconf.cc_startup_boost_duty = buffer_get_float32_auto(data, &ind);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 fe9d 	bl	80020f0 <buffer_get_float32_auto>
 80013b6:	eef0 7a40 	vmov.f32	s15, s0
 80013ba:	4b5e      	ldr	r3, [pc, #376]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013bc:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
		mcconf.cc_min_current = buffer_get_float32_auto(data, &ind);
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 fe92 	bl	80020f0 <buffer_get_float32_auto>
 80013cc:	eef0 7a40 	vmov.f32	s15, s0
 80013d0:	4b58      	ldr	r3, [pc, #352]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013d2:	edc3 7a53 	vstr	s15, [r3, #332]	@ 0x14c
		mcconf.cc_gain = buffer_get_float32_auto(data, &ind);
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	4619      	mov	r1, r3
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fe87 	bl	80020f0 <buffer_get_float32_auto>
 80013e2:	eef0 7a40 	vmov.f32	s15, s0
 80013e6:	4b53      	ldr	r3, [pc, #332]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013e8:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
		mcconf.cc_ramp_step_max = buffer_get_float32_auto(data, &ind);
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fe7c 	bl	80020f0 <buffer_get_float32_auto>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80013fe:	edc3 7a55 	vstr	s15, [r3, #340]	@ 0x154

		mcconf.m_fault_stop_time_ms = buffer_get_int32(data, &ind);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 fdda 	bl	8001fc2 <buffer_get_int32>
 800140e:	4603      	mov	r3, r0
 8001410:	4a48      	ldr	r2, [pc, #288]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001412:	f8c2 3158 	str.w	r3, [r2, #344]	@ 0x158
		mcconf.m_duty_ramp_step = buffer_get_float32_auto(data, &ind);
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	4619      	mov	r1, r3
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fe67 	bl	80020f0 <buffer_get_float32_auto>
 8001422:	eef0 7a40 	vmov.f32	s15, s0
 8001426:	4b43      	ldr	r3, [pc, #268]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001428:	edc3 7a57 	vstr	s15, [r3, #348]	@ 0x15c
		mcconf.m_current_backoff_gain = buffer_get_float32_auto(data, &ind);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4619      	mov	r1, r3
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fe5c 	bl	80020f0 <buffer_get_float32_auto>
 8001438:	eef0 7a40 	vmov.f32	s15, s0
 800143c:	4b3d      	ldr	r3, [pc, #244]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800143e:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
		mcconf.m_encoder_counts = buffer_get_uint32(data, &ind);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	4619      	mov	r1, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fdea 	bl	8002022 <buffer_get_uint32>
 800144e:	4603      	mov	r3, r0
 8001450:	4a38      	ldr	r2, [pc, #224]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001452:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
		mcconf.m_sensor_port_mode = data[ind++];
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	60fa      	str	r2, [r7, #12]
 800145c:	461a      	mov	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	4b33      	ldr	r3, [pc, #204]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001466:	f883 2168 	strb.w	r2, [r3, #360]	@ 0x168
		mcconf.m_invert_direction = data[ind++];
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	60fa      	str	r2, [r7, #12]
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf14      	ite	ne
 800147c:	2301      	movne	r3, #1
 800147e:	2300      	moveq	r3, #0
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001484:	f883 2169 	strb.w	r2, [r3, #361]	@ 0x169
		mcconf.m_drv8301_oc_mode = data[ind++];
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60fa      	str	r2, [r7, #12]
 800148e:	461a      	mov	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001498:	f883 216a 	strb.w	r2, [r3, #362]	@ 0x16a
		mcconf.m_drv8301_oc_adj = data[ind++];
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	60fa      	str	r2, [r7, #12]
 80014a2:	461a      	mov	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b21      	ldr	r3, [pc, #132]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014ae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
		mcconf.m_bldc_f_sw_min = buffer_get_float32_auto(data, &ind);
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	4619      	mov	r1, r3
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fe19 	bl	80020f0 <buffer_get_float32_auto>
 80014be:	eef0 7a40 	vmov.f32	s15, s0
 80014c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014c4:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
		mcconf.m_bldc_f_sw_max = buffer_get_float32_auto(data, &ind);
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	4619      	mov	r1, r3
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fe0e 	bl	80020f0 <buffer_get_float32_auto>
 80014d4:	eef0 7a40 	vmov.f32	s15, s0
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014da:	edc3 7a5d 	vstr	s15, [r3, #372]	@ 0x174
		mcconf.m_dc_f_sw = buffer_get_float32_auto(data, &ind);
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fe03 	bl	80020f0 <buffer_get_float32_auto>
 80014ea:	eef0 7a40 	vmov.f32	s15, s0
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 80014f0:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
		mcconf.m_ntc_motor_beta = buffer_get_float32_auto(data, &ind);
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4619      	mov	r1, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fdf8 	bl	80020f0 <buffer_get_float32_auto>
 8001500:	eef0 7a40 	vmov.f32	s15, s0
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 8001506:	edc3 7a5f 	vstr	s15, [r3, #380]	@ 0x17c
		mcconf.m_out_aux_mode = data[ind++];
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	60fa      	str	r2, [r7, #12]
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	781a      	ldrb	r2, [r3, #0]
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800151a:	f883 2180 	strb.w	r2, [r3, #384]	@ 0x180

		if (rx_mcconf_func) {
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <bldc_interface_process_packet+0xc50>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 83f8 	beq.w	8001d18 <bldc_interface_process_packet+0x1430>
			rx_mcconf_func(&mcconf);
 8001528:	4b03      	ldr	r3, [pc, #12]	@ (8001538 <bldc_interface_process_packet+0xc50>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4801      	ldr	r0, [pc, #4]	@ (8001534 <bldc_interface_process_packet+0xc4c>)
 800152e:	4798      	blx	r3
		}
		break;
 8001530:	e3f2      	b.n	8001d18 <bldc_interface_process_packet+0x1430>
 8001532:	bf00      	nop
 8001534:	20000718 	.word	0x20000718
 8001538:	200009a0 	.word	0x200009a0

	case COMM_GET_APPCONF:
	case COMM_GET_APPCONF_DEFAULT:
		ind = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
		appconf.controller_id = data[ind++];
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60fa      	str	r2, [r7, #12]
 8001546:	461a      	mov	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	4bba      	ldr	r3, [pc, #744]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001550:	701a      	strb	r2, [r3, #0]
		appconf.timeout_msec = buffer_get_uint32(data, &ind);
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4619      	mov	r1, r3
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 fd62 	bl	8002022 <buffer_get_uint32>
 800155e:	4603      	mov	r3, r0
 8001560:	4ab5      	ldr	r2, [pc, #724]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001562:	6053      	str	r3, [r2, #4]
		appconf.timeout_brake_current = buffer_get_float32_auto(data, &ind);
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fdc0 	bl	80020f0 <buffer_get_float32_auto>
 8001570:	eef0 7a40 	vmov.f32	s15, s0
 8001574:	4bb0      	ldr	r3, [pc, #704]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001576:	edc3 7a02 	vstr	s15, [r3, #8]
		appconf.send_can_status = data[ind++];
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	60fa      	str	r2, [r7, #12]
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	bf14      	ite	ne
 800158c:	2301      	movne	r3, #1
 800158e:	2300      	moveq	r3, #0
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4ba9      	ldr	r3, [pc, #676]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001594:	731a      	strb	r2, [r3, #12]
		appconf.send_can_status_rate_hz = buffer_get_uint16(data, &ind);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4619      	mov	r1, r3
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 fced 	bl	8001f7c <buffer_get_uint16>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4ba4      	ldr	r3, [pc, #656]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015a8:	611a      	str	r2, [r3, #16]
		appconf.can_baud_rate = data[ind++];
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	60fa      	str	r2, [r7, #12]
 80015b0:	461a      	mov	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b9f      	ldr	r3, [pc, #636]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015ba:	751a      	strb	r2, [r3, #20]

		appconf.app_to_use = data[ind++];
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	60fa      	str	r2, [r7, #12]
 80015c2:	461a      	mov	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	4b9b      	ldr	r3, [pc, #620]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015cc:	755a      	strb	r2, [r3, #21]

		appconf.app_ppm_conf.ctrl_type = data[ind++];
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	60fa      	str	r2, [r7, #12]
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	4b96      	ldr	r3, [pc, #600]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015de:	761a      	strb	r2, [r3, #24]
		appconf.app_ppm_conf.pid_max_erpm = buffer_get_float32_auto(data, &ind);
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fd82 	bl	80020f0 <buffer_get_float32_auto>
 80015ec:	eef0 7a40 	vmov.f32	s15, s0
 80015f0:	4b91      	ldr	r3, [pc, #580]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80015f2:	edc3 7a07 	vstr	s15, [r3, #28]
		appconf.app_ppm_conf.hyst = buffer_get_float32_auto(data, &ind);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4619      	mov	r1, r3
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fd77 	bl	80020f0 <buffer_get_float32_auto>
 8001602:	eef0 7a40 	vmov.f32	s15, s0
 8001606:	4b8c      	ldr	r3, [pc, #560]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001608:	edc3 7a08 	vstr	s15, [r3, #32]
		appconf.app_ppm_conf.pulse_start = buffer_get_float32_auto(data, &ind);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 fd6c 	bl	80020f0 <buffer_get_float32_auto>
 8001618:	eef0 7a40 	vmov.f32	s15, s0
 800161c:	4b86      	ldr	r3, [pc, #536]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800161e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		appconf.app_ppm_conf.pulse_end = buffer_get_float32_auto(data, &ind);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fd61 	bl	80020f0 <buffer_get_float32_auto>
 800162e:	eef0 7a40 	vmov.f32	s15, s0
 8001632:	4b81      	ldr	r3, [pc, #516]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001634:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		appconf.app_ppm_conf.pulse_center = buffer_get_float32_auto(data, &ind);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fd56 	bl	80020f0 <buffer_get_float32_auto>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
 8001648:	4b7b      	ldr	r3, [pc, #492]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800164a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		appconf.app_ppm_conf.median_filter = data[ind++];
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	60fa      	str	r2, [r7, #12]
 8001654:	461a      	mov	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b74      	ldr	r3, [pc, #464]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		appconf.app_ppm_conf.safe_start = data[ind++];
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60fa      	str	r2, [r7, #12]
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4413      	add	r3, r2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf14      	ite	ne
 800167e:	2301      	movne	r3, #1
 8001680:	2300      	moveq	r3, #0
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b6c      	ldr	r3, [pc, #432]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001686:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		appconf.app_ppm_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4619      	mov	r1, r3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fd2d 	bl	80020f0 <buffer_get_float32_auto>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
 800169a:	4b67      	ldr	r3, [pc, #412]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800169c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		appconf.app_ppm_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	4619      	mov	r1, r3
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fd22 	bl	80020f0 <buffer_get_float32_auto>
 80016ac:	eef0 7a40 	vmov.f32	s15, s0
 80016b0:	4b61      	ldr	r3, [pc, #388]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016b2:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		appconf.app_ppm_conf.throttle_exp_mode = data[ind++];
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60fa      	str	r2, [r7, #12]
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		appconf.app_ppm_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fd0d 	bl	80020f0 <buffer_get_float32_auto>
 80016d6:	eef0 7a40 	vmov.f32	s15, s0
 80016da:	4b57      	ldr	r3, [pc, #348]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016dc:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		appconf.app_ppm_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fd02 	bl	80020f0 <buffer_get_float32_auto>
 80016ec:	eef0 7a40 	vmov.f32	s15, s0
 80016f0:	4b51      	ldr	r3, [pc, #324]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80016f2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		appconf.app_ppm_conf.multi_esc = data[ind++];
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	60fa      	str	r2, [r7, #12]
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b4a      	ldr	r3, [pc, #296]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001710:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		appconf.app_ppm_conf.tc = data[ind++];
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60fa      	str	r2, [r7, #12]
 800171a:	461a      	mov	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	bf14      	ite	ne
 8001726:	2301      	movne	r3, #1
 8001728:	2300      	moveq	r3, #0
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b42      	ldr	r3, [pc, #264]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800172e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		appconf.app_ppm_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fcd9 	bl	80020f0 <buffer_get_float32_auto>
 800173e:	eef0 7a40 	vmov.f32	s15, s0
 8001742:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001744:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

		appconf.app_adc_conf.ctrl_type = data[ind++];
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60fa      	str	r2, [r7, #12]
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		appconf.app_adc_conf.hyst = buffer_get_float32_auto(data, &ind);
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fcc4 	bl	80020f0 <buffer_get_float32_auto>
 8001768:	eef0 7a40 	vmov.f32	s15, s0
 800176c:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800176e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
		appconf.app_adc_conf.voltage_start = buffer_get_float32_auto(data, &ind);
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fcb9 	bl	80020f0 <buffer_get_float32_auto>
 800177e:	eef0 7a40 	vmov.f32	s15, s0
 8001782:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001784:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		appconf.app_adc_conf.voltage_end = buffer_get_float32_auto(data, &ind);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fcae 	bl	80020f0 <buffer_get_float32_auto>
 8001794:	eef0 7a40 	vmov.f32	s15, s0
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 800179a:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
		appconf.app_adc_conf.voltage_center = buffer_get_float32_auto(data, &ind);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fca3 	bl	80020f0 <buffer_get_float32_auto>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017b0:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
		appconf.app_adc_conf.voltage2_start = buffer_get_float32_auto(data, &ind);
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4619      	mov	r1, r3
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fc98 	bl	80020f0 <buffer_get_float32_auto>
 80017c0:	eef0 7a40 	vmov.f32	s15, s0
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017c6:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
		appconf.app_adc_conf.voltage2_end = buffer_get_float32_auto(data, &ind);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 fc8d 	bl	80020f0 <buffer_get_float32_auto>
 80017d6:	eef0 7a40 	vmov.f32	s15, s0
 80017da:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017dc:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
		appconf.app_adc_conf.use_filter = data[ind++];
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	60fa      	str	r2, [r7, #12]
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 80017fa:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
		appconf.app_adc_conf.safe_start = data[ind++];
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	60fa      	str	r2, [r7, #12]
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <bldc_interface_process_packet+0xf50>)
 8001818:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
		appconf.app_adc_conf.cc_button_inverted = data[ind++];
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60fa      	str	r2, [r7, #12]
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2da      	uxtb	r2, r3
 8001834:	e002      	b.n	800183c <bldc_interface_process_packet+0xf54>
 8001836:	bf00      	nop
 8001838:	2000089c 	.word	0x2000089c
 800183c:	4bb6      	ldr	r3, [pc, #728]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800183e:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
		appconf.app_adc_conf.rev_button_inverted = data[ind++];
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	60fa      	str	r2, [r7, #12]
 8001848:	461a      	mov	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4baf      	ldr	r3, [pc, #700]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800185c:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
		appconf.app_adc_conf.voltage_inverted = data[ind++];
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60fa      	str	r2, [r7, #12]
 8001866:	461a      	mov	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf14      	ite	ne
 8001872:	2301      	movne	r3, #1
 8001874:	2300      	moveq	r3, #0
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4ba7      	ldr	r3, [pc, #668]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800187a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
		appconf.app_adc_conf.voltage2_inverted = data[ind++];
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	60fa      	str	r2, [r7, #12]
 8001884:	461a      	mov	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4ba0      	ldr	r3, [pc, #640]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001898:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
		appconf.app_adc_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fc24 	bl	80020f0 <buffer_get_float32_auto>
 80018a8:	eef0 7a40 	vmov.f32	s15, s0
 80018ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018ae:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
		appconf.app_adc_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4619      	mov	r1, r3
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fc19 	bl	80020f0 <buffer_get_float32_auto>
 80018be:	eef0 7a40 	vmov.f32	s15, s0
 80018c2:	4b95      	ldr	r3, [pc, #596]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018c4:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
		appconf.app_adc_conf.throttle_exp_mode = data[ind++];
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	60fa      	str	r2, [r7, #12]
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4413      	add	r3, r2
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	4b90      	ldr	r3, [pc, #576]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018d8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
		appconf.app_adc_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	4619      	mov	r1, r3
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fc04 	bl	80020f0 <buffer_get_float32_auto>
 80018e8:	eef0 7a40 	vmov.f32	s15, s0
 80018ec:	4b8a      	ldr	r3, [pc, #552]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80018ee:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
		appconf.app_adc_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fbf9 	bl	80020f0 <buffer_get_float32_auto>
 80018fe:	eef0 7a40 	vmov.f32	s15, s0
 8001902:	4b85      	ldr	r3, [pc, #532]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001904:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
		appconf.app_adc_conf.multi_esc = data[ind++];
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	60fa      	str	r2, [r7, #12]
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b7d      	ldr	r3, [pc, #500]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001922:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
		appconf.app_adc_conf.tc = data[ind++];
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	60fa      	str	r2, [r7, #12]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b76      	ldr	r3, [pc, #472]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001940:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
		appconf.app_adc_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fbd0 	bl	80020f0 <buffer_get_float32_auto>
 8001950:	eef0 7a40 	vmov.f32	s15, s0
 8001954:	4b70      	ldr	r3, [pc, #448]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001956:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
		appconf.app_adc_conf.update_rate_hz = buffer_get_uint16(data, &ind);
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fb0b 	bl	8001f7c <buffer_get_uint16>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b6b      	ldr	r3, [pc, #428]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 800196c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

		appconf.app_uart_baudrate = buffer_get_uint32(data, &ind);
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4619      	mov	r1, r3
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fb53 	bl	8002022 <buffer_get_uint32>
 800197c:	4603      	mov	r3, r0
 800197e:	4a66      	ldr	r2, [pc, #408]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001980:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

		appconf.app_chuk_conf.ctrl_type = data[ind++];
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60fa      	str	r2, [r7, #12]
 800198a:	461a      	mov	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	4b61      	ldr	r3, [pc, #388]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001994:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
		appconf.app_chuk_conf.hyst = buffer_get_float32_auto(data, &ind);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fba6 	bl	80020f0 <buffer_get_float32_auto>
 80019a4:	eef0 7a40 	vmov.f32	s15, s0
 80019a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019aa:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
		appconf.app_chuk_conf.ramp_time_pos = buffer_get_float32_auto(data, &ind);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fb9b 	bl	80020f0 <buffer_get_float32_auto>
 80019ba:	eef0 7a40 	vmov.f32	s15, s0
 80019be:	4b56      	ldr	r3, [pc, #344]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019c0:	edc3 7a28 	vstr	s15, [r3, #160]	@ 0xa0
		appconf.app_chuk_conf.ramp_time_neg = buffer_get_float32_auto(data, &ind);
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	4619      	mov	r1, r3
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fb90 	bl	80020f0 <buffer_get_float32_auto>
 80019d0:	eef0 7a40 	vmov.f32	s15, s0
 80019d4:	4b50      	ldr	r3, [pc, #320]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019d6:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
		appconf.app_chuk_conf.stick_erpm_per_s_in_cc = buffer_get_float32_auto(data, &ind);
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4619      	mov	r1, r3
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 fb85 	bl	80020f0 <buffer_get_float32_auto>
 80019e6:	eef0 7a40 	vmov.f32	s15, s0
 80019ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 80019ec:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
		appconf.app_chuk_conf.throttle_exp = buffer_get_float32_auto(data, &ind);
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fb7a 	bl	80020f0 <buffer_get_float32_auto>
 80019fc:	eef0 7a40 	vmov.f32	s15, s0
 8001a00:	4b45      	ldr	r3, [pc, #276]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a02:	edc3 7a2b 	vstr	s15, [r3, #172]	@ 0xac
		appconf.app_chuk_conf.throttle_exp_brake = buffer_get_float32_auto(data, &ind);
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fb6f 	bl	80020f0 <buffer_get_float32_auto>
 8001a12:	eef0 7a40 	vmov.f32	s15, s0
 8001a16:	4b40      	ldr	r3, [pc, #256]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a18:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
		appconf.app_chuk_conf.throttle_exp_mode = data[ind++];
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60fa      	str	r2, [r7, #12]
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a2c:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
		appconf.app_chuk_conf.multi_esc = data[ind++];
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	60fa      	str	r2, [r7, #12]
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a4a:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
		appconf.app_chuk_conf.tc = data[ind++];
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	60fa      	str	r2, [r7, #12]
 8001a54:	461a      	mov	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf14      	ite	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	2300      	moveq	r3, #0
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b2c      	ldr	r3, [pc, #176]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a68:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
		appconf.app_chuk_conf.tc_max_diff = buffer_get_float32_auto(data, &ind);
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fb3c 	bl	80020f0 <buffer_get_float32_auto>
 8001a78:	eef0 7a40 	vmov.f32	s15, s0
 8001a7c:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a7e:	edc3 7a2e 	vstr	s15, [r3, #184]	@ 0xb8

		appconf.app_nrf_conf.speed = data[ind++];
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60fa      	str	r2, [r7, #12]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	4b21      	ldr	r3, [pc, #132]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001a92:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
		appconf.app_nrf_conf.power = data[ind++];
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	60fa      	str	r2, [r7, #12]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001aa6:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
		appconf.app_nrf_conf.crc_type = data[ind++];
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	60fa      	str	r2, [r7, #12]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001aba:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
		appconf.app_nrf_conf.retry_delay = data[ind++];
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	60fa      	str	r2, [r7, #12]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001ace:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
		appconf.app_nrf_conf.retries = data[ind++];
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	60fa      	str	r2, [r7, #12]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	781a      	ldrb	r2, [r3, #0]
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001ae2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
		appconf.app_nrf_conf.channel = data[ind++];
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	60fa      	str	r2, [r7, #12]
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001af6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
		memcpy(appconf.app_nrf_conf.address, data + ind, 3);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	461a      	mov	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	441a      	add	r2, r3
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <bldc_interface_process_packet+0x1230>)
 8001b04:	33c2      	adds	r3, #194	@ 0xc2
 8001b06:	8811      	ldrh	r1, [r2, #0]
 8001b08:	7892      	ldrb	r2, [r2, #2]
 8001b0a:	8019      	strh	r1, [r3, #0]
 8001b0c:	709a      	strb	r2, [r3, #2]
		ind += 3;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3303      	adds	r3, #3
 8001b12:	60fb      	str	r3, [r7, #12]
		appconf.app_nrf_conf.send_crc_ack = data[ind++];
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	e001      	b.n	8001b1c <bldc_interface_process_packet+0x1234>
 8001b18:	2000089c 	.word	0x2000089c
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	60fa      	str	r2, [r7, #12]
 8001b20:	461a      	mov	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf14      	ite	ne
 8001b2c:	2301      	movne	r3, #1
 8001b2e:	2300      	moveq	r3, #0
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b82      	ldr	r3, [pc, #520]	@ (8001d3c <bldc_interface_process_packet+0x1454>)
 8001b34:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

		if (rx_appconf_func) {
 8001b38:	4b81      	ldr	r3, [pc, #516]	@ (8001d40 <bldc_interface_process_packet+0x1458>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80ed 	beq.w	8001d1c <bldc_interface_process_packet+0x1434>
			rx_appconf_func(&appconf);
 8001b42:	4b7f      	ldr	r3, [pc, #508]	@ (8001d40 <bldc_interface_process_packet+0x1458>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	487d      	ldr	r0, [pc, #500]	@ (8001d3c <bldc_interface_process_packet+0x1454>)
 8001b48:	4798      	blx	r3
		}
		break;
 8001b4a:	e0e7      	b.n	8001d1c <bldc_interface_process_packet+0x1434>

	case COMM_DETECT_MOTOR_PARAM:
		ind = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
		detect_cycle_int_limit = buffer_get_float32(data, 1000.0, &ind);
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	4619      	mov	r1, r3
 8001b56:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 8001d44 <bldc_interface_process_packet+0x145c>
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 faac 	bl	80020b8 <buffer_get_float32>
 8001b60:	eef0 7a40 	vmov.f32	s15, s0
 8001b64:	4b78      	ldr	r3, [pc, #480]	@ (8001d48 <bldc_interface_process_packet+0x1460>)
 8001b66:	edc3 7a00 	vstr	s15, [r3]
		detect_coupling_k = buffer_get_float32(data, 1000.0, &ind);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8001d44 <bldc_interface_process_packet+0x145c>
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fa9f 	bl	80020b8 <buffer_get_float32>
 8001b7a:	eef0 7a40 	vmov.f32	s15, s0
 8001b7e:	4b73      	ldr	r3, [pc, #460]	@ (8001d4c <bldc_interface_process_packet+0x1464>)
 8001b80:	edc3 7a00 	vstr	s15, [r3]
		for (i = 0;i < 8;i++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e00f      	b.n	8001baa <bldc_interface_process_packet+0x12c2>
			detect_hall_table[i] = (const signed char)(data[ind++]);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	60fa      	str	r2, [r7, #12]
 8001b90:	461a      	mov	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b259      	sxtb	r1, r3
 8001b9a:	4a6d      	ldr	r2, [pc, #436]	@ (8001d50 <bldc_interface_process_packet+0x1468>)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	460a      	mov	r2, r1
 8001ba2:	701a      	strb	r2, [r3, #0]
		for (i = 0;i < 8;i++) {
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b07      	cmp	r3, #7
 8001bae:	ddec      	ble.n	8001b8a <bldc_interface_process_packet+0x12a2>
		}
		detect_hall_res = (const signed char)(data[ind++]);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60fa      	str	r2, [r7, #12]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b25a      	sxtb	r2, r3
 8001bc0:	4b64      	ldr	r3, [pc, #400]	@ (8001d54 <bldc_interface_process_packet+0x146c>)
 8001bc2:	701a      	strb	r2, [r3, #0]

		if (rx_detect_func) {
 8001bc4:	4b64      	ldr	r3, [pc, #400]	@ (8001d58 <bldc_interface_process_packet+0x1470>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 80a9 	beq.w	8001d20 <bldc_interface_process_packet+0x1438>
			rx_detect_func(detect_cycle_int_limit, detect_coupling_k,
 8001bce:	4b62      	ldr	r3, [pc, #392]	@ (8001d58 <bldc_interface_process_packet+0x1470>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a5d      	ldr	r2, [pc, #372]	@ (8001d48 <bldc_interface_process_packet+0x1460>)
 8001bd4:	edd2 7a00 	vldr	s15, [r2]
 8001bd8:	4a5c      	ldr	r2, [pc, #368]	@ (8001d4c <bldc_interface_process_packet+0x1464>)
 8001bda:	ed92 7a00 	vldr	s14, [r2]
 8001bde:	4a5d      	ldr	r2, [pc, #372]	@ (8001d54 <bldc_interface_process_packet+0x146c>)
 8001be0:	f992 2000 	ldrsb.w	r2, [r2]
 8001be4:	4611      	mov	r1, r2
 8001be6:	485a      	ldr	r0, [pc, #360]	@ (8001d50 <bldc_interface_process_packet+0x1468>)
 8001be8:	eef0 0a47 	vmov.f32	s1, s14
 8001bec:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf0:	4798      	blx	r3
					detect_hall_table, detect_hall_res);
		}
		break;
 8001bf2:	e095      	b.n	8001d20 <bldc_interface_process_packet+0x1438>
	case COMM_DETECT_HALL_FOC: {
		// TODO!
	} break;

	case COMM_GET_DECODED_PPM:
		ind = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
		dec_ppm = buffer_get_float32(data, 1000000.0, &ind);
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fa58 	bl	80020b8 <buffer_get_float32>
 8001c08:	eef0 7a40 	vmov.f32	s15, s0
 8001c0c:	4b54      	ldr	r3, [pc, #336]	@ (8001d60 <bldc_interface_process_packet+0x1478>)
 8001c0e:	edc3 7a00 	vstr	s15, [r3]
		dec_ppm_len = buffer_get_float32(data, 1000000.0, &ind);
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	4619      	mov	r1, r3
 8001c18:	ed9f 0a50 	vldr	s0, [pc, #320]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fa4b 	bl	80020b8 <buffer_get_float32>
 8001c22:	eef0 7a40 	vmov.f32	s15, s0
 8001c26:	4b4f      	ldr	r3, [pc, #316]	@ (8001d64 <bldc_interface_process_packet+0x147c>)
 8001c28:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_ppm_func) {
 8001c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001d68 <bldc_interface_process_packet+0x1480>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d077      	beq.n	8001d24 <bldc_interface_process_packet+0x143c>
			rx_dec_ppm_func(dec_ppm, dec_ppm_len);
 8001c34:	4b4c      	ldr	r3, [pc, #304]	@ (8001d68 <bldc_interface_process_packet+0x1480>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a49      	ldr	r2, [pc, #292]	@ (8001d60 <bldc_interface_process_packet+0x1478>)
 8001c3a:	edd2 7a00 	vldr	s15, [r2]
 8001c3e:	4a49      	ldr	r2, [pc, #292]	@ (8001d64 <bldc_interface_process_packet+0x147c>)
 8001c40:	ed92 7a00 	vldr	s14, [r2]
 8001c44:	eef0 0a47 	vmov.f32	s1, s14
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	4798      	blx	r3
		}
		break;
 8001c4e:	e069      	b.n	8001d24 <bldc_interface_process_packet+0x143c>

	case COMM_GET_DECODED_ADC:
		ind = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
		dec_adc = buffer_get_float32(data, 1000000.0, &ind);
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fa2a 	bl	80020b8 <buffer_get_float32>
 8001c64:	eef0 7a40 	vmov.f32	s15, s0
 8001c68:	4b40      	ldr	r3, [pc, #256]	@ (8001d6c <bldc_interface_process_packet+0x1484>)
 8001c6a:	edc3 7a00 	vstr	s15, [r3]
		dec_adc_voltage = buffer_get_float32(data, 1000000.0, &ind);
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4619      	mov	r1, r3
 8001c74:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fa1d 	bl	80020b8 <buffer_get_float32>
 8001c7e:	eef0 7a40 	vmov.f32	s15, s0
 8001c82:	4b3b      	ldr	r3, [pc, #236]	@ (8001d70 <bldc_interface_process_packet+0x1488>)
 8001c84:	edc3 7a00 	vstr	s15, [r3]
		// TODO for adc2

		if (rx_dec_adc_func) {
 8001c88:	4b3a      	ldr	r3, [pc, #232]	@ (8001d74 <bldc_interface_process_packet+0x148c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d04b      	beq.n	8001d28 <bldc_interface_process_packet+0x1440>
			rx_dec_adc_func(dec_adc, dec_adc_voltage);
 8001c90:	4b38      	ldr	r3, [pc, #224]	@ (8001d74 <bldc_interface_process_packet+0x148c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a35      	ldr	r2, [pc, #212]	@ (8001d6c <bldc_interface_process_packet+0x1484>)
 8001c96:	edd2 7a00 	vldr	s15, [r2]
 8001c9a:	4a35      	ldr	r2, [pc, #212]	@ (8001d70 <bldc_interface_process_packet+0x1488>)
 8001c9c:	ed92 7a00 	vldr	s14, [r2]
 8001ca0:	eef0 0a47 	vmov.f32	s1, s14
 8001ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca8:	4798      	blx	r3
		}
		break;
 8001caa:	e03d      	b.n	8001d28 <bldc_interface_process_packet+0x1440>

	case COMM_GET_DECODED_CHUK:
		ind = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
		dec_chuk = buffer_get_float32(data, 1000000.0, &ind);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8001d5c <bldc_interface_process_packet+0x1474>
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f9fc 	bl	80020b8 <buffer_get_float32>
 8001cc0:	eef0 7a40 	vmov.f32	s15, s0
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d78 <bldc_interface_process_packet+0x1490>)
 8001cc6:	edc3 7a00 	vstr	s15, [r3]

		if (rx_dec_chuk_func) {
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <bldc_interface_process_packet+0x1494>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d02c      	beq.n	8001d2c <bldc_interface_process_packet+0x1444>
			rx_dec_chuk_func(dec_chuk);
 8001cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d7c <bldc_interface_process_packet+0x1494>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a28      	ldr	r2, [pc, #160]	@ (8001d78 <bldc_interface_process_packet+0x1490>)
 8001cd8:	edd2 7a00 	vldr	s15, [r2]
 8001cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce0:	4798      	blx	r3
		}
		break;
 8001ce2:	e023      	b.n	8001d2c <bldc_interface_process_packet+0x1444>

	case COMM_SET_MCCONF:
		// This is a confirmation that the new mcconf is received.
		if (rx_mcconf_received_func) {
 8001ce4:	4b26      	ldr	r3, [pc, #152]	@ (8001d80 <bldc_interface_process_packet+0x1498>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d021      	beq.n	8001d30 <bldc_interface_process_packet+0x1448>
			rx_mcconf_received_func();
 8001cec:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <bldc_interface_process_packet+0x1498>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4798      	blx	r3
		}
		break;
 8001cf2:	e01d      	b.n	8001d30 <bldc_interface_process_packet+0x1448>

	case COMM_SET_APPCONF:
		// This is a confirmation that the new appconf is received.
		if (rx_appconf_received_func) {
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <bldc_interface_process_packet+0x149c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01b      	beq.n	8001d34 <bldc_interface_process_packet+0x144c>
			rx_appconf_received_func();
 8001cfc:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <bldc_interface_process_packet+0x149c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4798      	blx	r3
		}
		break;
 8001d02:	e017      	b.n	8001d34 <bldc_interface_process_packet+0x144c>
		return;
 8001d04:	bf00      	nop
 8001d06:	e016      	b.n	8001d36 <bldc_interface_process_packet+0x144e>

	default:
		break;
 8001d08:	bf00      	nop
 8001d0a:	e014      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d0c:	bf00      	nop
 8001d0e:	e012      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d10:	bf00      	nop
 8001d12:	e010      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d14:	bf00      	nop
 8001d16:	e00e      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d18:	bf00      	nop
 8001d1a:	e00c      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d1c:	bf00      	nop
 8001d1e:	e00a      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d20:	bf00      	nop
 8001d22:	e008      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d24:	bf00      	nop
 8001d26:	e006      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d28:	bf00      	nop
 8001d2a:	e004      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d2c:	bf00      	nop
 8001d2e:	e002      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d30:	bf00      	nop
 8001d32:	e000      	b.n	8001d36 <bldc_interface_process_packet+0x144e>
		break;
 8001d34:	bf00      	nop
	}
}
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	2000089c 	.word	0x2000089c
 8001d40:	200009a4 	.word	0x200009a4
 8001d44:	447a0000 	.word	0x447a0000
 8001d48:	20000964 	.word	0x20000964
 8001d4c:	20000968 	.word	0x20000968
 8001d50:	2000096c 	.word	0x2000096c
 8001d54:	20000974 	.word	0x20000974
 8001d58:	200009a8 	.word	0x200009a8
 8001d5c:	49742400 	.word	0x49742400
 8001d60:	20000978 	.word	0x20000978
 8001d64:	2000097c 	.word	0x2000097c
 8001d68:	200009ac 	.word	0x200009ac
 8001d6c:	20000980 	.word	0x20000980
 8001d70:	20000984 	.word	0x20000984
 8001d74:	200009b0 	.word	0x200009b0
 8001d78:	20000988 	.word	0x20000988
 8001d7c:	200009b4 	.word	0x200009b4
 8001d80:	200009b8 	.word	0x200009b8
 8001d84:	200009bc 	.word	0x200009bc

08001d88 <bldc_interface_set_rpm>:
	send_buffer[send_index++] = COMM_SET_CURRENT_BRAKE;
	buffer_append_float32(send_buffer, current, 1000.0, &send_index);
	send_packet_no_fwd(send_buffer, send_index);
}

void bldc_interface_set_rpm(int rpm) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	if (motor_control_set_func) {
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <bldc_interface_set_rpm+0x58>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <bldc_interface_set_rpm+0x28>
		motor_control_set_func(MOTOR_CONTROL_RPM, rpm);
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <bldc_interface_set_rpm+0x58>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	ee07 2a90 	vmov	s15, r2
 8001da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da6:	eeb0 0a67 	vmov.f32	s0, s15
 8001daa:	2003      	movs	r0, #3
 8001dac:	4798      	blx	r3
 8001dae:	e013      	b.n	8001dd8 <bldc_interface_set_rpm+0x50>
		return;
	}
	int32_t send_index = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]
	send_buffer[send_index++] = COMM_SET_RPM;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	60fa      	str	r2, [r7, #12]
 8001dba:	4a0a      	ldr	r2, [pc, #40]	@ (8001de4 <bldc_interface_set_rpm+0x5c>)
 8001dbc:	2108      	movs	r1, #8
 8001dbe:	54d1      	strb	r1, [r2, r3]
	buffer_append_int32(send_buffer, rpm, &send_index);
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4806      	ldr	r0, [pc, #24]	@ (8001de4 <bldc_interface_set_rpm+0x5c>)
 8001dca:	f000 f879 	bl	8001ec0 <buffer_append_int32>
	send_packet_no_fwd(send_buffer, send_index);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4804      	ldr	r0, [pc, #16]	@ (8001de4 <bldc_interface_set_rpm+0x5c>)
 8001dd4:	f000 f808 	bl	8001de8 <send_packet_no_fwd>
}
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200009c0 	.word	0x200009c0
 8001de4:	200002c4 	.word	0x200002c4

08001de8 <send_packet_no_fwd>:
	default: return "Unknown fault";
	}
}

// Private functions
void send_packet_no_fwd(unsigned char *data, unsigned int len) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
	if (!forward_func) {
 8001df2:	4b06      	ldr	r3, [pc, #24]	@ (8001e0c <send_packet_no_fwd+0x24>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <send_packet_no_fwd+0x1a>
		bldc_interface_send_packet(data, len);
 8001dfa:	6839      	ldr	r1, [r7, #0]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7fe fd5f 	bl	80008c0 <bldc_interface_send_packet>
	}
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000990 	.word	0x20000990

08001e10 <bldc_interface_uart_init>:
 * sending packets.
 *
 * @param func
 * Function provided for sending packets.
 */
void bldc_interface_uart_init(void(*func)(unsigned char *data, unsigned int len)) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	// Initialize packet handler
	packet_init(func, process_packet, PACKET_HANDLER);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4905      	ldr	r1, [pc, #20]	@ (8001e30 <bldc_interface_uart_init+0x20>)
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f001 f843 	bl	8002ea8 <packet_init>

	// Initialize the bldc interface and provide a send function
	bldc_interface_init(send_packet_bldc_interface);
 8001e22:	4804      	ldr	r0, [pc, #16]	@ (8001e34 <bldc_interface_uart_init+0x24>)
 8001e24:	f7fe fd3c 	bl	80008a0 <bldc_interface_init>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	08001e39 	.word	0x08001e39
 8001e34:	08001e53 	.word	0x08001e53

08001e38 <process_packet>:
 * @param data
 * Data array pointer
 * @param len
 * Data array length
 */
static void process_packet(unsigned char *data, unsigned int len) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
	// Let bldc_interface process the packet.
	bldc_interface_process_packet(data, len);
 8001e42:	6839      	ldr	r1, [r7, #0]
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7fe fd4f 	bl	80008e8 <bldc_interface_process_packet>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <send_packet_bldc_interface>:
 * @param data
 * Data array pointer
 * @param len
 * Data array length
 */
static void send_packet_bldc_interface(unsigned char *data, unsigned int len) {
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
	// Pass the packet to the packet handler to add checksum, length, start and stop bytes.
	packet_send_packet(data, len, PACKET_HANDLER);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6839      	ldr	r1, [r7, #0]
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f001 f843 	bl	8002eec <packet_send_packet>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <send_packet>:


void send_packet(unsigned char *data, unsigned int len)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	if (len > (PACKET_MAX_PL_LEN + 5)) {
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f240 2205 	movw	r2, #517	@ 0x205
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d812      	bhi.n	8001eaa <send_packet+0x3a>
		return;
	}

	// Copy the data to a new buffer to ensure it's not overwritten
	static uint8_t buffer[PACKET_MAX_PL_LEN + 5];
	memcpy(buffer, data, len);
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	480a      	ldr	r0, [pc, #40]	@ (8001eb4 <send_packet+0x44>)
 8001e8a:	f00c fce9 	bl	800e860 <memcpy>

	HAL_GPIO_WritePin(GPIOB, LD3_Pin,GPIO_PIN_SET);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e94:	4808      	ldr	r0, [pc, #32]	@ (8001eb8 <send_packet+0x48>)
 8001e96:	f003 fcd1 	bl	800583c <HAL_GPIO_WritePin>
	// Send the data over UART
	HAL_UART_Transmit_DMA(&huart2, buffer, len);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4904      	ldr	r1, [pc, #16]	@ (8001eb4 <send_packet+0x44>)
 8001ea2:	4806      	ldr	r0, [pc, #24]	@ (8001ebc <send_packet+0x4c>)
 8001ea4:	f007 f9f2 	bl	800928c <HAL_UART_Transmit_DMA>
 8001ea8:	e000      	b.n	8001eac <send_packet+0x3c>
		return;
 8001eaa:	bf00      	nop

}
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200009c4 	.word	0x200009c4
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	20000e58 	.word	0x20000e58

08001ec0 <buffer_append_int32>:
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
	buffer[(*index)++] = number;
}

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
	buffer[(*index)++] = number >> 24;
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1618      	asrs	r0, r3, #24
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	1c59      	adds	r1, r3, #1
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6011      	str	r1, [r2, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2c2      	uxtb	r2, r0
 8001ee2:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 16;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1418      	asrs	r0, r3, #16
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1c59      	adds	r1, r3, #1
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6011      	str	r1, [r2, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2c2      	uxtb	r2, r0
 8001efa:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number >> 8;
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	1218      	asrs	r0, r3, #8
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	1c59      	adds	r1, r3, #1
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6011      	str	r1, [r2, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	b2c2      	uxtb	r2, r0
 8001f12:	701a      	strb	r2, [r3, #0]
	buffer[(*index)++] = number;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	1c59      	adds	r1, r3, #1
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6011      	str	r1, [r2, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <buffer_get_int16>:
	}

	buffer_append_uint32(buffer, res, index);
}

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
 8001f36:	b480      	push	{r7}
 8001f38:	b085      	sub	sp, #20
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	440b      	add	r3, r1
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	b21b      	sxth	r3, r3
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1c9a      	adds	r2, r3, #2
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	601a      	str	r2, [r3, #0]
	return res;
 8001f6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	b21a      	sxth	r2, r3
					((uint16_t) buffer[*index + 1]);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	440b      	add	r3, r1
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b21b      	sxth	r3, r3
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	81fb      	strh	r3, [r7, #14]
	*index += 2;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1c9a      	adds	r2, r3, #2
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	601a      	str	r2, [r3, #0]
	return res;
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	440b      	add	r3, r1
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	041b      	lsls	r3, r3, #16
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8001fe8:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3302      	adds	r3, #2
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	440b      	add	r3, r1
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8001ff8:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	3203      	adds	r2, #3
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	440a      	add	r2, r1
 8002004:	7812      	ldrb	r2, [r2, #0]
					((uint32_t) buffer[*index + 2]) << 8 |
 8002006:	4313      	orrs	r3, r2
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8002008:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	1d1a      	adds	r2, r3, #4
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	601a      	str	r2, [r3, #0]
	return res;
 8002014:	68fb      	ldr	r3, [r7, #12]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	061a      	lsls	r2, r3, #24
					((uint32_t) buffer[*index + 1]) << 16 |
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	440b      	add	r3, r1
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	041b      	lsls	r3, r3, #16
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8002048:	431a      	orrs	r2, r3
					((uint32_t) buffer[*index + 2]) << 8 |
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3302      	adds	r3, #2
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	440b      	add	r3, r1
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	021b      	lsls	r3, r3, #8
					((uint32_t) buffer[*index + 1]) << 16 |
 8002058:	4313      	orrs	r3, r2
					((uint32_t) buffer[*index + 3]);
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	3203      	adds	r2, #3
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	440a      	add	r2, r1
 8002064:	7812      	ldrb	r2, [r2, #0]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8002066:	4313      	orrs	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
	*index += 4;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1d1a      	adds	r2, r3, #4
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	601a      	str	r2, [r3, #0]
	return res;
 8002074:	68fb      	ldr	r3, [r7, #12]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <buffer_get_float16>:
					((uint64_t) buffer[*index + 7]);
	*index += 8;
	return res;
}

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	ed87 0a02 	vstr	s0, [r7, #8]
 800208e:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int16(buffer, index) / scale;
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f7ff ff4f 	bl	8001f36 <buffer_get_int16>
 8002098:	4603      	mov	r3, r0
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80020a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80020ae:	eeb0 0a67 	vmov.f32	s0, s15
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80020c4:	6079      	str	r1, [r7, #4]
    return (float)buffer_get_int32(buffer, index) / scale;
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff ff7a 	bl	8001fc2 <buffer_get_int32>
 80020ce:	ee07 0a90 	vmov	s15, r0
 80020d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80020da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020de:	eef0 7a66 	vmov.f32	s15, s13
}
 80020e2:	eeb0 0a67 	vmov.f32	s0, s15
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	0000      	movs	r0, r0
	...

080020f0 <buffer_get_float32_auto>:

double buffer_get_double64(const uint8_t *buffer, double scale, int32_t *index) {
    return (double)buffer_get_int64(buffer, index) / scale;
}

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
	uint32_t res = buffer_get_uint32(buffer, index);
 80020fa:	6839      	ldr	r1, [r7, #0]
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff90 	bl	8002022 <buffer_get_uint32>
 8002102:	6178      	str	r0, [r7, #20]

	int e = (res >> 23) & 0xFF;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	0ddb      	lsrs	r3, r3, #23
 8002108:	b2db      	uxtb	r3, r3
 800210a:	61fb      	str	r3, [r7, #28]
	uint32_t sig_i = res & 0x7FFFFF;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002112:	613b      	str	r3, [r7, #16]
	bool neg = res & (1 << 31);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	bf14      	ite	ne
 800211e:	2301      	movne	r3, #1
 8002120:	2300      	moveq	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]

	float sig = 0.0;
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
	if (e != 0 || sig_i != 0) {
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <buffer_get_float32_auto+0x46>
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d015      	beq.n	8002162 <buffer_get_float32_auto+0x72>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002140:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002144:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8002190 <buffer_get_float32_auto+0xa0>
 8002148:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800214c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8002150:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002154:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002158:	edc7 7a06 	vstr	s15, [r7, #24]
		e -= 126;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	3b7e      	subs	r3, #126	@ 0x7e
 8002160:	61fb      	str	r3, [r7, #28]
	}

	if (neg) {
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <buffer_get_float32_auto+0x84>
		sig = -sig;
 8002168:	edd7 7a06 	vldr	s15, [r7, #24]
 800216c:	eef1 7a67 	vneg.f32	s15, s15
 8002170:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	return ldexpf(sig, e);
 8002174:	69f8      	ldr	r0, [r7, #28]
 8002176:	ed97 0a06 	vldr	s0, [r7, #24]
 800217a:	f00c fb7f 	bl	800e87c <ldexpf>
 800217e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002182:	eeb0 0a67 	vmov.f32	s0, s15
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	f3af 8000 	nop.w
 8002190:	00000000 	.word	0x00000000
 8002194:	41700000 	.word	0x41700000

08002198 <Motor_Input>:
float sine_amplitude = 1000.0f;
float set_rpm;


float Motor_Input(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
	/*EXAMPLE Sine Wave */
	float time = Get_MilliSecond()/1000.0f; // Time in seconds
 800219e:	f000 f9a5 	bl	80024ec <Get_MilliSecond>
 80021a2:	ee07 0a90 	vmov	s15, r0
 80021a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021aa:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002280 <Motor_Input+0xe8>
 80021ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b2:	edc7 7a01 	vstr	s15, [r7, #4]
	sine1 = sinf(2*M_PI*f_sine*time);
 80021b6:	4b33      	ldr	r3, [pc, #204]	@ (8002284 <Motor_Input+0xec>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021c0:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8002278 <Motor_Input+0xe0>
 80021c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021d8:	eeb0 0a67 	vmov.f32	s0, s15
 80021dc:	f00c fc58 	bl	800ea90 <sinf>
 80021e0:	eef0 7a40 	vmov.f32	s15, s0
 80021e4:	4b28      	ldr	r3, [pc, #160]	@ (8002288 <Motor_Input+0xf0>)
 80021e6:	edc3 7a00 	vstr	s15, [r3]
	sine2 = sinf(2*M_PI*f_sine*time);
 80021ea:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <Motor_Input+0xec>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021f4:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8002278 <Motor_Input+0xe0>
 80021f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002200:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002204:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002208:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800220c:	eeb0 0a67 	vmov.f32	s0, s15
 8002210:	f00c fc3e 	bl	800ea90 <sinf>
 8002214:	eef0 7a40 	vmov.f32	s15, s0
 8002218:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <Motor_Input+0xf4>)
 800221a:	edc3 7a00 	vstr	s15, [r3]
	set_rpm = sine_bias+ sine_amplitude*sine1 + sine_amplitude/2*sine2;
 800221e:	4b1c      	ldr	r3, [pc, #112]	@ (8002290 <Motor_Input+0xf8>)
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <Motor_Input+0xf0>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222e:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <Motor_Input+0xfc>)
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <Motor_Input+0xf8>)
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8002242:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002246:	4b11      	ldr	r3, [pc, #68]	@ (800228c <Motor_Input+0xf4>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <Motor_Input+0x100>)
 8002256:	edc3 7a00 	vstr	s15, [r3]

	set_rpm = 1500.0f;
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <Motor_Input+0x100>)
 800225c:	4a0f      	ldr	r2, [pc, #60]	@ (800229c <Motor_Input+0x104>)
 800225e:	601a      	str	r2, [r3, #0]

	return set_rpm;
 8002260:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <Motor_Input+0x100>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	ee07 3a90 	vmov	s15, r3
}
 8002268:	eeb0 0a67 	vmov.f32	s0, s15
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	f3af 8000 	nop.w
 8002278:	54442d18 	.word	0x54442d18
 800227c:	401921fb 	.word	0x401921fb
 8002280:	447a0000 	.word	0x447a0000
 8002284:	20000000 	.word	0x20000000
 8002288:	20000bcc 	.word	0x20000bcc
 800228c:	20000bd0 	.word	0x20000bd0
 8002290:	20000008 	.word	0x20000008
 8002294:	20000004 	.word	0x20000004
 8002298:	20000bd4 	.word	0x20000bd4
 800229c:	44bb8000 	.word	0x44bb8000

080022a0 <crc16>:
		0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b,
		0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0,
		0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
	unsigned int i;
	unsigned short cksum = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e016      	b.n	80022e2 <crc16+0x42>
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 80022b4:	897b      	ldrh	r3, [r7, #10]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	404b      	eors	r3, r1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4a0b      	ldr	r2, [pc, #44]	@ (80022f8 <crc16+0x58>)
 80022ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022ce:	b21a      	sxth	r2, r3
 80022d0:	897b      	ldrh	r3, [r7, #10]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4053      	eors	r3, r2
 80022d8:	b21b      	sxth	r3, r3
 80022da:	817b      	strh	r3, [r7, #10]
	for (i = 0; i < len; i++) {
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3301      	adds	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3e4      	bcc.n	80022b4 <crc16+0x14>
	}
	return cksum;
 80022ea:	897b      	ldrh	r3, [r7, #10]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	0800ec60 	.word	0x0800ec60

080022fc <DataAcq_Init>:

/**
 * @brief Initialize the data acquisition module
 */
HAL_StatusTypeDef DataAcq_Init(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
    // Initialize counters and flags
    usb_buffer_cnt = 0;
 8002300:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <DataAcq_Init+0x28>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    active_buffer = 0;
 8002306:	4b08      	ldr	r3, [pc, #32]	@ (8002328 <DataAcq_Init+0x2c>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
    buffer_ready_flag = 3;
 800230c:	4b07      	ldr	r3, [pc, #28]	@ (800232c <DataAcq_Init+0x30>)
 800230e:	2203      	movs	r2, #3
 8002310:	701a      	strb	r2, [r3, #0]
    time_ms = 0;
 8002312:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <DataAcq_Init+0x34>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	20000bd8 	.word	0x20000bd8
 8002328:	20000bdc 	.word	0x20000bdc
 800232c:	20000bdd 	.word	0x20000bdd
 8002330:	20000be0 	.word	0x20000be0

08002334 <DataAcq_ScaleFloatValue>:

/**
 * @brief Scale float value to uint32_t with defined scaling factor
 */
static uint32_t DataAcq_ScaleFloatValue(float value)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	ed87 0a01 	vstr	s0, [r7, #4]
    return (uint32_t)(value * SCALING_FACTOR);
 800233e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002342:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002360 <DataAcq_ScaleFloatValue+0x2c>
 8002346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800234a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800234e:	ee17 3a90 	vmov	r3, s15
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	447a0000 	.word	0x447a0000

08002364 <DataAcq_SwitchBuffers>:

/**
 * @brief Switch between double buffers
 */
static void DataAcq_SwitchBuffers(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
    active_buffer = 1 - active_buffer;  // Toggle between 0 and 1
 8002368:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <DataAcq_SwitchBuffers+0x3c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f1c3 0301 	rsb	r3, r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <DataAcq_SwitchBuffers+0x3c>)
 8002376:	701a      	strb	r2, [r3, #0]
    usb_buffer_cnt = 0;
 8002378:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <DataAcq_SwitchBuffers+0x40>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]

    // Update buffer ready flag
    buffer_ready_flag = active_buffer ? BUFFER_STATE_READY_0 : BUFFER_STATE_READY_1;
 800237e:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <DataAcq_SwitchBuffers+0x3c>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <DataAcq_SwitchBuffers+0x44>)
 8002392:	701a      	strb	r2, [r3, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000bdc 	.word	0x20000bdc
 80023a4:	20000bd8 	.word	0x20000bd8
 80023a8:	20000bdd 	.word	0x20000bdd

080023ac <DataAcq_ProcessSamples>:

/**
 * @brief Process new data samples in timer interrupt
 */
void DataAcq_ProcessSamples(TIM_HandleTypeDef* htim)
{
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM3) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a46      	ldr	r2, [pc, #280]	@ (80024d4 <DataAcq_ProcessSamples+0x128>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	f040 8085 	bne.w	80024ca <DataAcq_ProcessSamples+0x11e>
    // Toggle LED to indicate sampling
    //HAL_GPIO_TogglePin(GPIOB, LD1_Pin);


    // Get motor data
    float set_rpm = Motor_Input();
 80023c0:	f7ff feea 	bl	8002198 <Motor_Input>
 80023c4:	ed87 0a05 	vstr	s0, [r7, #20]
    bldc_interface_set_rpm(Motor_Input());
 80023c8:	f7ff fee6 	bl	8002198 <Motor_Input>
 80023cc:	eef0 7a40 	vmov.f32	s15, s0
 80023d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d4:	ee17 0a90 	vmov	r0, s15
 80023d8:	f7ff fcd6 	bl	8001d88 <bldc_interface_set_rpm>
    float current_speed = MotorSpeed_GetRPM();
 80023dc:	f000 fcda 	bl	8002d94 <MotorSpeed_GetRPM>
 80023e0:	ed87 0a04 	vstr	s0, [r7, #16]

    // Scale float values to integers
    uint32_t scaled_set_rpm = DataAcq_ScaleFloatValue(set_rpm);
 80023e4:	ed97 0a05 	vldr	s0, [r7, #20]
 80023e8:	f7ff ffa4 	bl	8002334 <DataAcq_ScaleFloatValue>
 80023ec:	60f8      	str	r0, [r7, #12]
    uint32_t scaled_current_speed = DataAcq_ScaleFloatValue(current_speed);
 80023ee:	ed97 0a04 	vldr	s0, [r7, #16]
 80023f2:	f7ff ff9f 	bl	8002334 <DataAcq_ScaleFloatValue>
 80023f6:	60b8      	str	r0, [r7, #8]

    // Update time counter
    time_ms++;
 80023f8:	4b37      	ldr	r3, [pc, #220]	@ (80024d8 <DataAcq_ProcessSamples+0x12c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	4a36      	ldr	r2, [pc, #216]	@ (80024d8 <DataAcq_ProcessSamples+0x12c>)
 8002400:	6013      	str	r3, [r2, #0]

    // Store data in active buffer
    usb_buffer[active_buffer][0][usb_buffer_cnt] = time_ms;
 8002402:	4b36      	ldr	r3, [pc, #216]	@ (80024dc <DataAcq_ProcessSamples+0x130>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461c      	mov	r4, r3
 800240a:	4b35      	ldr	r3, [pc, #212]	@ (80024e0 <DataAcq_ProcessSamples+0x134>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a32      	ldr	r2, [pc, #200]	@ (80024d8 <DataAcq_ProcessSamples+0x12c>)
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	4834      	ldr	r0, [pc, #208]	@ (80024e4 <DataAcq_ProcessSamples+0x138>)
 8002414:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 8002418:	fb04 f101 	mul.w	r1, r4, r1
 800241c:	440b      	add	r3, r1
 800241e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    usb_buffer[active_buffer][1][usb_buffer_cnt] = adc_buffer[0];  // Panasonic
 8002422:	4b2e      	ldr	r3, [pc, #184]	@ (80024dc <DataAcq_ProcessSamples+0x130>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461c      	mov	r4, r3
 800242a:	4b2d      	ldr	r3, [pc, #180]	@ (80024e0 <DataAcq_ProcessSamples+0x134>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2e      	ldr	r2, [pc, #184]	@ (80024e8 <DataAcq_ProcessSamples+0x13c>)
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	482c      	ldr	r0, [pc, #176]	@ (80024e4 <DataAcq_ProcessSamples+0x138>)
 8002434:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 8002438:	fb04 f101 	mul.w	r1, r4, r1
 800243c:	440b      	add	r3, r1
 800243e:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 8002442:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    usb_buffer[active_buffer][2][usb_buffer_cnt] = adc_buffer[1];  // Load Cell 1
 8002446:	4b25      	ldr	r3, [pc, #148]	@ (80024dc <DataAcq_ProcessSamples+0x130>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	461c      	mov	r4, r3
 800244e:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <DataAcq_ProcessSamples+0x134>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a25      	ldr	r2, [pc, #148]	@ (80024e8 <DataAcq_ProcessSamples+0x13c>)
 8002454:	6852      	ldr	r2, [r2, #4]
 8002456:	4823      	ldr	r0, [pc, #140]	@ (80024e4 <DataAcq_ProcessSamples+0x138>)
 8002458:	f64d 21c0 	movw	r1, #56000	@ 0xdac0
 800245c:	fb04 f101 	mul.w	r1, r4, r1
 8002460:	440b      	add	r3, r1
 8002462:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 8002466:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    usb_buffer[active_buffer][3][usb_buffer_cnt] = scaled_set_rpm; // Motor setpoint
 800246a:	4b1c      	ldr	r3, [pc, #112]	@ (80024dc <DataAcq_ProcessSamples+0x130>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	4618      	mov	r0, r3
 8002472:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <DataAcq_ProcessSamples+0x134>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	491b      	ldr	r1, [pc, #108]	@ (80024e4 <DataAcq_ProcessSamples+0x138>)
 8002478:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 800247c:	fb00 f202 	mul.w	r2, r0, r2
 8002480:	441a      	add	r2, r3
 8002482:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8002486:	4413      	add	r3, r2
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    usb_buffer[active_buffer][4][usb_buffer_cnt] = scaled_current_speed; // Current speed
 800248e:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <DataAcq_ProcessSamples+0x130>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <DataAcq_ProcessSamples+0x134>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4912      	ldr	r1, [pc, #72]	@ (80024e4 <DataAcq_ProcessSamples+0x138>)
 800249c:	f64d 22c0 	movw	r2, #56000	@ 0xdac0
 80024a0:	fb00 f202 	mul.w	r2, r0, r2
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    // Increment buffer counter
    usb_buffer_cnt++;
 80024b0:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <DataAcq_ProcessSamples+0x134>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <DataAcq_ProcessSamples+0x134>)
 80024b8:	6013      	str	r3, [r2, #0]

    // Check if buffer is full
    if (usb_buffer_cnt >= USB_BUFFER_SIZE) {
 80024ba:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <DataAcq_ProcessSamples+0x134>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80024c2:	d303      	bcc.n	80024cc <DataAcq_ProcessSamples+0x120>
        DataAcq_SwitchBuffers();
 80024c4:	f7ff ff4e 	bl	8002364 <DataAcq_SwitchBuffers>
 80024c8:	e000      	b.n	80024cc <DataAcq_ProcessSamples+0x120>
        return;
 80024ca:	bf00      	nop
    }
}
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40000400 	.word	0x40000400
 80024d8:	20000be0 	.word	0x20000be0
 80024dc:	20000bdc 	.word	0x20000bdc
 80024e0:	20000bd8 	.word	0x20000bd8
 80024e4:	2000147c 	.word	0x2000147c
 80024e8:	20001028 	.word	0x20001028

080024ec <Get_MilliSecond>:
{
    return buffer_ready_flag;
}

uint32_t Get_MilliSecond(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
    return time_ms;
 80024f0:	4b03      	ldr	r3, [pc, #12]	@ (8002500 <Get_MilliSecond+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000be0 	.word	0x20000be0

08002504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002508:	f001 fadd 	bl	8003ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800250c:	f000 f81e 	bl	800254c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002510:	f000 fb22 	bl	8002b58 <MX_GPIO_Init>
  MX_DMA_Init();
 8002514:	f000 fae6 	bl	8002ae4 <MX_DMA_Init>
  MX_ETH_Init();
 8002518:	f000 f912 	bl	8002740 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800251c:	f000 fab2 	bl	8002a84 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002520:	f000 f884 	bl	800262c <MX_ADC1_Init>
  MX_TIM2_Init();
 8002524:	f000 f95a 	bl	80027dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002528:	f000 f9a6 	bl	8002878 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800252c:	f00b fafc 	bl	800db28 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8002530:	f000 f9f0 	bl	8002914 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002534:	f000 fa76 	bl	8002a24 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  /* Initialize Application Modules */
  if (ApplicationInit_Sequence() != HAL_OK) {
 8002538:	f000 fbb0 	bl	8002c9c <ApplicationInit_Sequence>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <main+0x42>
      Error_Handler();
 8002542:	f000 fbf5 	bl	8002d30 <Error_Handler>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	Application();
 8002546:	f000 fbed 	bl	8002d24 <Application>
 800254a:	e7fc      	b.n	8002546 <main+0x42>

0800254c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b094      	sub	sp, #80	@ 0x50
 8002550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002552:	f107 031c 	add.w	r3, r7, #28
 8002556:	2234      	movs	r2, #52	@ 0x34
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f00c f93c 	bl	800e7d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002560:	f107 0308 	add.w	r3, r7, #8
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002570:	f004 fc20 	bl	8006db4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002574:	4b2b      	ldr	r3, [pc, #172]	@ (8002624 <SystemClock_Config+0xd8>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002578:	4a2a      	ldr	r2, [pc, #168]	@ (8002624 <SystemClock_Config+0xd8>)
 800257a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800257e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002580:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <SystemClock_Config+0xd8>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800258c:	4b26      	ldr	r3, [pc, #152]	@ (8002628 <SystemClock_Config+0xdc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a25      	ldr	r2, [pc, #148]	@ (8002628 <SystemClock_Config+0xdc>)
 8002592:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b23      	ldr	r3, [pc, #140]	@ (8002628 <SystemClock_Config+0xdc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025a8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80025ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ae:	2302      	movs	r3, #2
 80025b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025b8:	2304      	movs	r3, #4
 80025ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80025bc:	23d8      	movs	r3, #216	@ 0xd8
 80025be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025c0:	2302      	movs	r3, #2
 80025c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80025c4:	2309      	movs	r3, #9
 80025c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025c8:	2302      	movs	r3, #2
 80025ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025cc:	f107 031c 	add.w	r3, r7, #28
 80025d0:	4618      	mov	r0, r3
 80025d2:	f004 fc4f 	bl	8006e74 <HAL_RCC_OscConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80025dc:	f000 fba8 	bl	8002d30 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80025e0:	f004 fbf8 	bl	8006dd4 <HAL_PWREx_EnableOverDrive>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80025ea:	f000 fba1 	bl	8002d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025ee:	230f      	movs	r3, #15
 80025f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025f2:	2302      	movs	r3, #2
 80025f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002604:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	2107      	movs	r1, #7
 800260c:	4618      	mov	r0, r3
 800260e:	f004 fedf 	bl	80073d0 <HAL_RCC_ClockConfig>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002618:	f000 fb8a 	bl	8002d30 <Error_Handler>
  }
}
 800261c:	bf00      	nop
 800261e:	3750      	adds	r7, #80	@ 0x50
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	40007000 	.word	0x40007000

0800262c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002632:	463b      	mov	r3, r7
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800263e:	4b3e      	ldr	r3, [pc, #248]	@ (8002738 <MX_ADC1_Init+0x10c>)
 8002640:	4a3e      	ldr	r2, [pc, #248]	@ (800273c <MX_ADC1_Init+0x110>)
 8002642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002644:	4b3c      	ldr	r3, [pc, #240]	@ (8002738 <MX_ADC1_Init+0x10c>)
 8002646:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800264a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800264c:	4b3a      	ldr	r3, [pc, #232]	@ (8002738 <MX_ADC1_Init+0x10c>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002652:	4b39      	ldr	r3, [pc, #228]	@ (8002738 <MX_ADC1_Init+0x10c>)
 8002654:	2201      	movs	r2, #1
 8002656:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002658:	4b37      	ldr	r3, [pc, #220]	@ (8002738 <MX_ADC1_Init+0x10c>)
 800265a:	2201      	movs	r2, #1
 800265c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800265e:	4b36      	ldr	r3, [pc, #216]	@ (8002738 <MX_ADC1_Init+0x10c>)
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002666:	4b34      	ldr	r3, [pc, #208]	@ (8002738 <MX_ADC1_Init+0x10c>)
 8002668:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800266c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800266e:	4b32      	ldr	r3, [pc, #200]	@ (8002738 <MX_ADC1_Init+0x10c>)
 8002670:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002676:	4b30      	ldr	r3, [pc, #192]	@ (8002738 <MX_ADC1_Init+0x10c>)
 8002678:	2200      	movs	r2, #0
 800267a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800267c:	4b2e      	ldr	r3, [pc, #184]	@ (8002738 <MX_ADC1_Init+0x10c>)
 800267e:	2205      	movs	r2, #5
 8002680:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002682:	4b2d      	ldr	r3, [pc, #180]	@ (8002738 <MX_ADC1_Init+0x10c>)
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800268a:	4b2b      	ldr	r3, [pc, #172]	@ (8002738 <MX_ADC1_Init+0x10c>)
 800268c:	2200      	movs	r2, #0
 800268e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002690:	4829      	ldr	r0, [pc, #164]	@ (8002738 <MX_ADC1_Init+0x10c>)
 8002692:	f001 fa99 	bl	8003bc8 <HAL_ADC_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800269c:	f000 fb48 	bl	8002d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026a4:	2301      	movs	r3, #1
 80026a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80026a8:	2304      	movs	r3, #4
 80026aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026ac:	463b      	mov	r3, r7
 80026ae:	4619      	mov	r1, r3
 80026b0:	4821      	ldr	r0, [pc, #132]	@ (8002738 <MX_ADC1_Init+0x10c>)
 80026b2:	f001 fbdb 	bl	8003e6c <HAL_ADC_ConfigChannel>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80026bc:	f000 fb38 	bl	8002d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026c0:	2303      	movs	r3, #3
 80026c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80026c4:	2302      	movs	r3, #2
 80026c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026c8:	463b      	mov	r3, r7
 80026ca:	4619      	mov	r1, r3
 80026cc:	481a      	ldr	r0, [pc, #104]	@ (8002738 <MX_ADC1_Init+0x10c>)
 80026ce:	f001 fbcd 	bl	8003e6c <HAL_ADC_ConfigChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80026d8:	f000 fb2a 	bl	8002d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80026dc:	2304      	movs	r3, #4
 80026de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80026e0:	2303      	movs	r3, #3
 80026e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e4:	463b      	mov	r3, r7
 80026e6:	4619      	mov	r1, r3
 80026e8:	4813      	ldr	r0, [pc, #76]	@ (8002738 <MX_ADC1_Init+0x10c>)
 80026ea:	f001 fbbf 	bl	8003e6c <HAL_ADC_ConfigChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80026f4:	f000 fb1c 	bl	8002d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80026f8:	2305      	movs	r3, #5
 80026fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80026fc:	2304      	movs	r3, #4
 80026fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002700:	463b      	mov	r3, r7
 8002702:	4619      	mov	r1, r3
 8002704:	480c      	ldr	r0, [pc, #48]	@ (8002738 <MX_ADC1_Init+0x10c>)
 8002706:	f001 fbb1 	bl	8003e6c <HAL_ADC_ConfigChannel>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002710:	f000 fb0e 	bl	8002d30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002714:	2306      	movs	r3, #6
 8002716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002718:	2305      	movs	r3, #5
 800271a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800271c:	463b      	mov	r3, r7
 800271e:	4619      	mov	r1, r3
 8002720:	4805      	ldr	r0, [pc, #20]	@ (8002738 <MX_ADC1_Init+0x10c>)
 8002722:	f001 fba3 	bl	8003e6c <HAL_ADC_ConfigChannel>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 800272c:	f000 fb00 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000c1c 	.word	0x20000c1c
 800273c:	40012000 	.word	0x40012000

08002740 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002744:	4b1f      	ldr	r3, [pc, #124]	@ (80027c4 <MX_ETH_Init+0x84>)
 8002746:	4a20      	ldr	r2, [pc, #128]	@ (80027c8 <MX_ETH_Init+0x88>)
 8002748:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800274a:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <MX_ETH_Init+0x8c>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002750:	4b1e      	ldr	r3, [pc, #120]	@ (80027cc <MX_ETH_Init+0x8c>)
 8002752:	2280      	movs	r2, #128	@ 0x80
 8002754:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002756:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <MX_ETH_Init+0x8c>)
 8002758:	22e1      	movs	r2, #225	@ 0xe1
 800275a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800275c:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <MX_ETH_Init+0x8c>)
 800275e:	2200      	movs	r2, #0
 8002760:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002762:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <MX_ETH_Init+0x8c>)
 8002764:	2200      	movs	r2, #0
 8002766:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002768:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <MX_ETH_Init+0x8c>)
 800276a:	2200      	movs	r2, #0
 800276c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <MX_ETH_Init+0x84>)
 8002770:	4a16      	ldr	r2, [pc, #88]	@ (80027cc <MX_ETH_Init+0x8c>)
 8002772:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002774:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <MX_ETH_Init+0x84>)
 8002776:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800277a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800277c:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <MX_ETH_Init+0x84>)
 800277e:	4a14      	ldr	r2, [pc, #80]	@ (80027d0 <MX_ETH_Init+0x90>)
 8002780:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002782:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <MX_ETH_Init+0x84>)
 8002784:	4a13      	ldr	r2, [pc, #76]	@ (80027d4 <MX_ETH_Init+0x94>)
 8002786:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002788:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <MX_ETH_Init+0x84>)
 800278a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800278e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002790:	480c      	ldr	r0, [pc, #48]	@ (80027c4 <MX_ETH_Init+0x84>)
 8002792:	f002 fb59 	bl	8004e48 <HAL_ETH_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800279c:	f000 fac8 	bl	8002d30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80027a0:	2238      	movs	r2, #56	@ 0x38
 80027a2:	2100      	movs	r1, #0
 80027a4:	480c      	ldr	r0, [pc, #48]	@ (80027d8 <MX_ETH_Init+0x98>)
 80027a6:	f00c f817 	bl	800e7d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <MX_ETH_Init+0x98>)
 80027ac:	2221      	movs	r2, #33	@ 0x21
 80027ae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80027b0:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <MX_ETH_Init+0x98>)
 80027b2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80027b6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80027b8:	4b07      	ldr	r3, [pc, #28]	@ (80027d8 <MX_ETH_Init+0x98>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000cc4 	.word	0x20000cc4
 80027c8:	40028000 	.word	0x40028000
 80027cc:	2000103c 	.word	0x2000103c
 80027d0:	20000208 	.word	0x20000208
 80027d4:	20000168 	.word	0x20000168
 80027d8:	20000be4 	.word	0x20000be4

080027dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027e2:	f107 0310 	add.w	r3, r7, #16
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <MX_TIM2_Init+0x98>)
 80027fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002800:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002802:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <MX_TIM2_Init+0x98>)
 8002804:	2247      	movs	r2, #71	@ 0x47
 8002806:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002808:	4b1a      	ldr	r3, [pc, #104]	@ (8002874 <MX_TIM2_Init+0x98>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1499;
 800280e:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <MX_TIM2_Init+0x98>)
 8002810:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002814:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002816:	4b17      	ldr	r3, [pc, #92]	@ (8002874 <MX_TIM2_Init+0x98>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800281c:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <MX_TIM2_Init+0x98>)
 800281e:	2280      	movs	r2, #128	@ 0x80
 8002820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002822:	4814      	ldr	r0, [pc, #80]	@ (8002874 <MX_TIM2_Init+0x98>)
 8002824:	f005 fc22 	bl	800806c <HAL_TIM_Base_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800282e:	f000 fa7f 	bl	8002d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002832:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002836:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002838:	f107 0310 	add.w	r3, r7, #16
 800283c:	4619      	mov	r1, r3
 800283e:	480d      	ldr	r0, [pc, #52]	@ (8002874 <MX_TIM2_Init+0x98>)
 8002840:	f006 f868 	bl	8008914 <HAL_TIM_ConfigClockSource>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800284a:	f000 fa71 	bl	8002d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800284e:	2320      	movs	r3, #32
 8002850:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4806      	ldr	r0, [pc, #24]	@ (8002874 <MX_TIM2_Init+0x98>)
 800285c:	f006 fc1c 	bl	8009098 <HAL_TIMEx_MasterConfigSynchronization>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002866:	f000 fa63 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800286a:	bf00      	nop
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000d74 	.word	0x20000d74

08002878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287e:	f107 0310 	add.w	r3, r7, #16
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
 800288a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002896:	4b1d      	ldr	r3, [pc, #116]	@ (800290c <MX_TIM3_Init+0x94>)
 8002898:	4a1d      	ldr	r2, [pc, #116]	@ (8002910 <MX_TIM3_Init+0x98>)
 800289a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10799;
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <MX_TIM3_Init+0x94>)
 800289e:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 80028a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a4:	4b19      	ldr	r3, [pc, #100]	@ (800290c <MX_TIM3_Init+0x94>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80028aa:	4b18      	ldr	r3, [pc, #96]	@ (800290c <MX_TIM3_Init+0x94>)
 80028ac:	2209      	movs	r2, #9
 80028ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b0:	4b16      	ldr	r3, [pc, #88]	@ (800290c <MX_TIM3_Init+0x94>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028b6:	4b15      	ldr	r3, [pc, #84]	@ (800290c <MX_TIM3_Init+0x94>)
 80028b8:	2280      	movs	r2, #128	@ 0x80
 80028ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028bc:	4813      	ldr	r0, [pc, #76]	@ (800290c <MX_TIM3_Init+0x94>)
 80028be:	f005 fbd5 	bl	800806c <HAL_TIM_Base_Init>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80028c8:	f000 fa32 	bl	8002d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028d2:	f107 0310 	add.w	r3, r7, #16
 80028d6:	4619      	mov	r1, r3
 80028d8:	480c      	ldr	r0, [pc, #48]	@ (800290c <MX_TIM3_Init+0x94>)
 80028da:	f006 f81b 	bl	8008914 <HAL_TIM_ConfigClockSource>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80028e4:	f000 fa24 	bl	8002d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e8:	2300      	movs	r3, #0
 80028ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	4619      	mov	r1, r3
 80028f4:	4805      	ldr	r0, [pc, #20]	@ (800290c <MX_TIM3_Init+0x94>)
 80028f6:	f006 fbcf 	bl	8009098 <HAL_TIMEx_MasterConfigSynchronization>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002900:	f000 fa16 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002904:	bf00      	nop
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20000dc0 	.word	0x20000dc0
 8002910:	40000400 	.word	0x40000400

08002914 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08c      	sub	sp, #48	@ 0x30
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800291a:	f107 0320 	add.w	r3, r7, #32
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002940:	4b36      	ldr	r3, [pc, #216]	@ (8002a1c <MX_TIM4_Init+0x108>)
 8002942:	4a37      	ldr	r2, [pc, #220]	@ (8002a20 <MX_TIM4_Init+0x10c>)
 8002944:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 107;
 8002946:	4b35      	ldr	r3, [pc, #212]	@ (8002a1c <MX_TIM4_Init+0x108>)
 8002948:	226b      	movs	r2, #107	@ 0x6b
 800294a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294c:	4b33      	ldr	r3, [pc, #204]	@ (8002a1c <MX_TIM4_Init+0x108>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002952:	4b32      	ldr	r3, [pc, #200]	@ (8002a1c <MX_TIM4_Init+0x108>)
 8002954:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002958:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295a:	4b30      	ldr	r3, [pc, #192]	@ (8002a1c <MX_TIM4_Init+0x108>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002960:	4b2e      	ldr	r3, [pc, #184]	@ (8002a1c <MX_TIM4_Init+0x108>)
 8002962:	2200      	movs	r2, #0
 8002964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002966:	482d      	ldr	r0, [pc, #180]	@ (8002a1c <MX_TIM4_Init+0x108>)
 8002968:	f005 fb80 	bl	800806c <HAL_TIM_Base_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002972:	f000 f9dd 	bl	8002d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800297a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800297c:	f107 0320 	add.w	r3, r7, #32
 8002980:	4619      	mov	r1, r3
 8002982:	4826      	ldr	r0, [pc, #152]	@ (8002a1c <MX_TIM4_Init+0x108>)
 8002984:	f005 ffc6 	bl	8008914 <HAL_TIM_ConfigClockSource>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800298e:	f000 f9cf 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002992:	4822      	ldr	r0, [pc, #136]	@ (8002a1c <MX_TIM4_Init+0x108>)
 8002994:	f005 fc69 	bl	800826a <HAL_TIM_IC_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800299e:	f000 f9c7 	bl	8002d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	481a      	ldr	r0, [pc, #104]	@ (8002a1c <MX_TIM4_Init+0x108>)
 80029b2:	f006 fb71 	bl	8009098 <HAL_TIMEx_MasterConfigSynchronization>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80029bc:	f000 f9b8 	bl	8002d30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80029c4:	2301      	movs	r3, #1
 80029c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 15;
 80029cc:	230f      	movs	r3, #15
 80029ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	2200      	movs	r2, #0
 80029d4:	4619      	mov	r1, r3
 80029d6:	4811      	ldr	r0, [pc, #68]	@ (8002a1c <MX_TIM4_Init+0x108>)
 80029d8:	f005 feff 	bl	80087da <HAL_TIM_IC_ConfigChannel>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80029e2:	f000 f9a5 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	2204      	movs	r2, #4
 80029ea:	4619      	mov	r1, r3
 80029ec:	480b      	ldr	r0, [pc, #44]	@ (8002a1c <MX_TIM4_Init+0x108>)
 80029ee:	f005 fef4 	bl	80087da <HAL_TIM_IC_ConfigChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 80029f8:	f000 f99a 	bl	8002d30 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	2208      	movs	r2, #8
 8002a00:	4619      	mov	r1, r3
 8002a02:	4806      	ldr	r0, [pc, #24]	@ (8002a1c <MX_TIM4_Init+0x108>)
 8002a04:	f005 fee9 	bl	80087da <HAL_TIM_IC_ConfigChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8002a0e:	f000 f98f 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a12:	bf00      	nop
 8002a14:	3730      	adds	r7, #48	@ 0x30
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000e0c 	.word	0x20000e0c
 8002a20:	40000800 	.word	0x40000800

08002a24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a28:	4b14      	ldr	r3, [pc, #80]	@ (8002a7c <MX_USART2_UART_Init+0x58>)
 8002a2a:	4a15      	ldr	r2, [pc, #84]	@ (8002a80 <MX_USART2_UART_Init+0x5c>)
 8002a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a2e:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <MX_USART2_UART_Init+0x58>)
 8002a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a36:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <MX_USART2_UART_Init+0x58>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <MX_USART2_UART_Init+0x58>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	@ (8002a7c <MX_USART2_UART_Init+0x58>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	@ (8002a7c <MX_USART2_UART_Init+0x58>)
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <MX_USART2_UART_Init+0x58>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <MX_USART2_UART_Init+0x58>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <MX_USART2_UART_Init+0x58>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <MX_USART2_UART_Init+0x58>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a66:	4805      	ldr	r0, [pc, #20]	@ (8002a7c <MX_USART2_UART_Init+0x58>)
 8002a68:	f006 fbc2 	bl	80091f0 <HAL_UART_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a72:	f000 f95d 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000e58 	.word	0x20000e58
 8002a80:	40004400 	.word	0x40004400

08002a84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a88:	4b14      	ldr	r3, [pc, #80]	@ (8002adc <MX_USART3_UART_Init+0x58>)
 8002a8a:	4a15      	ldr	r2, [pc, #84]	@ (8002ae0 <MX_USART3_UART_Init+0x5c>)
 8002a8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a8e:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <MX_USART3_UART_Init+0x58>)
 8002a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a96:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <MX_USART3_UART_Init+0x58>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002adc <MX_USART3_UART_Init+0x58>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <MX_USART3_UART_Init+0x58>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <MX_USART3_UART_Init+0x58>)
 8002aaa:	220c      	movs	r2, #12
 8002aac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aae:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <MX_USART3_UART_Init+0x58>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <MX_USART3_UART_Init+0x58>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aba:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <MX_USART3_UART_Init+0x58>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <MX_USART3_UART_Init+0x58>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ac6:	4805      	ldr	r0, [pc, #20]	@ (8002adc <MX_USART3_UART_Init+0x58>)
 8002ac8:	f006 fb92 	bl	80091f0 <HAL_UART_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ad2:	f000 f92d 	bl	8002d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000ee0 	.word	0x20000ee0
 8002ae0:	40004800 	.word	0x40004800

08002ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002aea:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <MX_DMA_Init+0x70>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	4a19      	ldr	r2, [pc, #100]	@ (8002b54 <MX_DMA_Init+0x70>)
 8002af0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af6:	4b17      	ldr	r3, [pc, #92]	@ (8002b54 <MX_DMA_Init+0x70>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b02:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <MX_DMA_Init+0x70>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	4a13      	ldr	r2, [pc, #76]	@ (8002b54 <MX_DMA_Init+0x70>)
 8002b08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0e:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <MX_DMA_Init+0x70>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	2010      	movs	r0, #16
 8002b20:	f001 fd51 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b24:	2010      	movs	r0, #16
 8002b26:	f001 fd6a 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2011      	movs	r0, #17
 8002b30:	f001 fd49 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002b34:	2011      	movs	r0, #17
 8002b36:	f001 fd62 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	2038      	movs	r0, #56	@ 0x38
 8002b40:	f001 fd41 	bl	80045c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b44:	2038      	movs	r0, #56	@ 0x38
 8002b46:	f001 fd5a 	bl	80045fe <HAL_NVIC_EnableIRQ>

}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800

08002b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08c      	sub	sp, #48	@ 0x30
 8002b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5e:	f107 031c 	add.w	r3, r7, #28
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
 8002b6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6e:	4b47      	ldr	r3, [pc, #284]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	4a46      	ldr	r2, [pc, #280]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7a:	4b44      	ldr	r3, [pc, #272]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	61bb      	str	r3, [r7, #24]
 8002b84:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b86:	4b41      	ldr	r3, [pc, #260]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	4a40      	ldr	r2, [pc, #256]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b92:	4b3e      	ldr	r3, [pc, #248]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	4a3a      	ldr	r2, [pc, #232]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002baa:	4b38      	ldr	r3, [pc, #224]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb6:	4b35      	ldr	r3, [pc, #212]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	4a34      	ldr	r2, [pc, #208]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc2:	4b32      	ldr	r3, [pc, #200]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bce:	4b2f      	ldr	r3, [pc, #188]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002bd4:	f043 0308 	orr.w	r3, r3, #8
 8002bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bda:	4b2c      	ldr	r3, [pc, #176]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	60bb      	str	r3, [r7, #8]
 8002be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002be6:	4b29      	ldr	r3, [pc, #164]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	4a28      	ldr	r2, [pc, #160]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf2:	4b26      	ldr	r3, [pc, #152]	@ (8002c8c <MX_GPIO_Init+0x134>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002c04:	4822      	ldr	r0, [pc, #136]	@ (8002c90 <MX_GPIO_Init+0x138>)
 8002c06:	f002 fe19 	bl	800583c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2140      	movs	r1, #64	@ 0x40
 8002c0e:	4821      	ldr	r0, [pc, #132]	@ (8002c94 <MX_GPIO_Init+0x13c>)
 8002c10:	f002 fe14 	bl	800583c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002c14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c24:	f107 031c 	add.w	r3, r7, #28
 8002c28:	4619      	mov	r1, r3
 8002c2a:	481b      	ldr	r0, [pc, #108]	@ (8002c98 <MX_GPIO_Init+0x140>)
 8002c2c:	f002 fc5a 	bl	80054e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002c30:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c36:	2301      	movs	r3, #1
 8002c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c42:	f107 031c 	add.w	r3, r7, #28
 8002c46:	4619      	mov	r1, r3
 8002c48:	4811      	ldr	r0, [pc, #68]	@ (8002c90 <MX_GPIO_Init+0x138>)
 8002c4a:	f002 fc4b 	bl	80054e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002c4e:	2340      	movs	r3, #64	@ 0x40
 8002c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c52:	2301      	movs	r3, #1
 8002c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002c5e:	f107 031c 	add.w	r3, r7, #28
 8002c62:	4619      	mov	r1, r3
 8002c64:	480b      	ldr	r0, [pc, #44]	@ (8002c94 <MX_GPIO_Init+0x13c>)
 8002c66:	f002 fc3d 	bl	80054e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002c6a:	2380      	movs	r3, #128	@ 0x80
 8002c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002c76:	f107 031c 	add.w	r3, r7, #28
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <MX_GPIO_Init+0x13c>)
 8002c7e:	f002 fc31 	bl	80054e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c82:	bf00      	nop
 8002c84:	3730      	adds	r7, #48	@ 0x30
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40021800 	.word	0x40021800
 8002c98:	40020800 	.word	0x40020800

08002c9c <ApplicationInit_Sequence>:

/* USER CODE BEGIN 4 */


static HAL_StatusTypeDef ApplicationInit_Sequence(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
    /* Start ADC with DMA */
    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE) != HAL_OK) {
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	491c      	ldr	r1, [pc, #112]	@ (8002d14 <ApplicationInit_Sequence+0x78>)
 8002ca4:	481c      	ldr	r0, [pc, #112]	@ (8002d18 <ApplicationInit_Sequence+0x7c>)
 8002ca6:	f000 ffd3 	bl	8003c50 <HAL_ADC_Start_DMA>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <ApplicationInit_Sequence+0x18>
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e02d      	b.n	8002d10 <ApplicationInit_Sequence+0x74>
       }

    /* Initialize motor speed monitoring */
    if (MotorSpeed_Init(&htim4) != HAL_OK) {
 8002cb4:	4819      	ldr	r0, [pc, #100]	@ (8002d1c <ApplicationInit_Sequence+0x80>)
 8002cb6:	f000 f841 	bl	8002d3c <MotorSpeed_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <ApplicationInit_Sequence+0x28>
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e025      	b.n	8002d10 <ApplicationInit_Sequence+0x74>
    }

    /* Start timer input capture for all channels */
    if (HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1) != HAL_OK) return HAL_ERROR;
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4815      	ldr	r0, [pc, #84]	@ (8002d1c <ApplicationInit_Sequence+0x80>)
 8002cc8:	f005 fb30 	bl	800832c <HAL_TIM_IC_Start_IT>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <ApplicationInit_Sequence+0x3a>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e01c      	b.n	8002d10 <ApplicationInit_Sequence+0x74>
    if (HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2) != HAL_OK) return HAL_ERROR;
 8002cd6:	2104      	movs	r1, #4
 8002cd8:	4810      	ldr	r0, [pc, #64]	@ (8002d1c <ApplicationInit_Sequence+0x80>)
 8002cda:	f005 fb27 	bl	800832c <HAL_TIM_IC_Start_IT>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <ApplicationInit_Sequence+0x4c>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e013      	b.n	8002d10 <ApplicationInit_Sequence+0x74>
    if (HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3) != HAL_OK) return HAL_ERROR;
 8002ce8:	2108      	movs	r1, #8
 8002cea:	480c      	ldr	r0, [pc, #48]	@ (8002d1c <ApplicationInit_Sequence+0x80>)
 8002cec:	f005 fb1e 	bl	800832c <HAL_TIM_IC_Start_IT>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <ApplicationInit_Sequence+0x5e>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00a      	b.n	8002d10 <ApplicationInit_Sequence+0x74>

    /* Initialize data acquisition system */
    if (DataAcq_Init() != HAL_OK) {
 8002cfa:	f7ff faff 	bl	80022fc <DataAcq_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <ApplicationInit_Sequence+0x6c>
    	return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e003      	b.n	8002d10 <ApplicationInit_Sequence+0x74>
    }

    /* Initialize BLDC interface */
    bldc_interface_uart_init(send_packet);
 8002d08:	4805      	ldr	r0, [pc, #20]	@ (8002d20 <ApplicationInit_Sequence+0x84>)
 8002d0a:	f7ff f881 	bl	8001e10 <bldc_interface_uart_init>

    return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20001028 	.word	0x20001028
 8002d18:	20000c1c 	.word	0x20000c1c
 8002d1c:	20000e0c 	.word	0x20000e0c
 8002d20:	08001e71 	.word	0x08001e71

08002d24 <Application>:


static void Application(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
	usb_transmit_task();
 8002d28:	f000 fe2c 	bl	8003984 <usb_transmit_task>

}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d34:	b672      	cpsid	i
}
 8002d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <Error_Handler+0x8>

08002d3c <MotorSpeed_Init>:

/**
 * @brief Initialize the motor speed monitoring module
 */
HAL_StatusTypeDef MotorSpeed_Init(TIM_HandleTypeDef* htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
    if (htim == NULL || htim->Instance != TIM4) {
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <MotorSpeed_Init+0x18>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d80 <MotorSpeed_Init+0x44>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d001      	beq.n	8002d58 <MotorSpeed_Init+0x1c>
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e00d      	b.n	8002d74 <MotorSpeed_Init+0x38>
    }

    motor_timer = htim;
 8002d58:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <MotorSpeed_Init+0x48>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6013      	str	r3, [r2, #0]
    last_capture = 0;
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <MotorSpeed_Init+0x4c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
    pulse_period = 0;
 8002d64:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <MotorSpeed_Init+0x50>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
    current_rpm = 0.0f;
 8002d6a:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <MotorSpeed_Init+0x54>)
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40000800 	.word	0x40000800
 8002d84:	20001044 	.word	0x20001044
 8002d88:	20001048 	.word	0x20001048
 8002d8c:	2000104c 	.word	0x2000104c
 8002d90:	20001050 	.word	0x20001050

08002d94 <MotorSpeed_GetRPM>:

/**
 * @brief Get the current motor speed in RPM
 */
float MotorSpeed_GetRPM(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
    return current_rpm;
 8002d98:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <MotorSpeed_GetRPM+0x18>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	ee07 3a90 	vmov	s15, r3
}
 8002da0:	eeb0 0a67 	vmov.f32	s0, s15
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	20001050 	.word	0x20001050

08002db0 <MotorSpeed_CalculatePeriod>:

/**
 * @brief Calculate time period between two captures, handling timer overflow
 */
static uint32_t MotorSpeed_CalculatePeriod(uint32_t current_capture)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    if (current_capture > last_capture) {
 8002db8:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <MotorSpeed_CalculatePeriod+0x38>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d904      	bls.n	8002dcc <MotorSpeed_CalculatePeriod+0x1c>
        return current_capture - last_capture;
 8002dc2:	4b09      	ldr	r3, [pc, #36]	@ (8002de8 <MotorSpeed_CalculatePeriod+0x38>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	e006      	b.n	8002dda <MotorSpeed_CalculatePeriod+0x2a>
    } else {
        // Handle timer overflow
        return (0xFFFF - last_capture) + current_capture;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <MotorSpeed_CalculatePeriod+0x38>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	1ad2      	subs	r2, r2, r3
 8002dd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002dd8:	4413      	add	r3, r2
    }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20001048 	.word	0x20001048

08002dec <MotorSpeed_TimerCallback>:

/**
 * @brief Timer input capture callback handler
 */
void MotorSpeed_TimerCallback(TIM_HandleTypeDef* htim)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
    if (htim->Instance != TIM4) {
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a26      	ldr	r2, [pc, #152]	@ (8002e94 <MotorSpeed_TimerCallback+0xa8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d143      	bne.n	8002e86 <MotorSpeed_TimerCallback+0x9a>
        return;
    }

    uint32_t current_capture = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]

    // Determine which channel triggered the interrupt
    switch (htim->Channel) {
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7f1b      	ldrb	r3, [r3, #28]
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d012      	beq.n	8002e30 <MotorSpeed_TimerCallback+0x44>
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	dc3d      	bgt.n	8002e8a <MotorSpeed_TimerCallback+0x9e>
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d002      	beq.n	8002e18 <MotorSpeed_TimerCallback+0x2c>
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d006      	beq.n	8002e24 <MotorSpeed_TimerCallback+0x38>
        case HAL_TIM_ACTIVE_CHANNEL_3:
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
            break;

        default:
            return;  // Invalid channel
 8002e16:	e038      	b.n	8002e8a <MotorSpeed_TimerCallback+0x9e>
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002e18:	2100      	movs	r1, #0
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f005 fe44 	bl	8008aa8 <HAL_TIM_ReadCapturedValue>
 8002e20:	60f8      	str	r0, [r7, #12]
            break;
 8002e22:	e00b      	b.n	8002e3c <MotorSpeed_TimerCallback+0x50>
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002e24:	2104      	movs	r1, #4
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f005 fe3e 	bl	8008aa8 <HAL_TIM_ReadCapturedValue>
 8002e2c:	60f8      	str	r0, [r7, #12]
            break;
 8002e2e:	e005      	b.n	8002e3c <MotorSpeed_TimerCallback+0x50>
            current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8002e30:	2108      	movs	r1, #8
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f005 fe38 	bl	8008aa8 <HAL_TIM_ReadCapturedValue>
 8002e38:	60f8      	str	r0, [r7, #12]
            break;
 8002e3a:	bf00      	nop
    }

    // Calculate period between pulses
    pulse_period = MotorSpeed_CalculatePeriod(current_capture);
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7ff ffb7 	bl	8002db0 <MotorSpeed_CalculatePeriod>
 8002e42:	4603      	mov	r3, r0
 8002e44:	4a14      	ldr	r2, [pc, #80]	@ (8002e98 <MotorSpeed_TimerCallback+0xac>)
 8002e46:	6013      	str	r3, [r2, #0]
    last_capture = current_capture;
 8002e48:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <MotorSpeed_TimerCallback+0xb0>)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6013      	str	r3, [r2, #0]

    // Calculate RPM
    if (pulse_period > 0) {
 8002e4e:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <MotorSpeed_TimerCallback+0xac>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d012      	beq.n	8002e7c <MotorSpeed_TimerCallback+0x90>
        // RPM = (60 * timer_clock) / (pulses_per_rev * pulse_period)
    	current_rpm = 60000000.0f / (MOTOR_SPEED_HALL_PULSES_PER_REV * pulse_period);
 8002e56:	4b10      	ldr	r3, [pc, #64]	@ (8002e98 <MotorSpeed_TimerCallback+0xac>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	00da      	lsls	r2, r3, #3
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e6c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002ea0 <MotorSpeed_TimerCallback+0xb4>
 8002e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <MotorSpeed_TimerCallback+0xb8>)
 8002e76:	edc3 7a00 	vstr	s15, [r3]
 8002e7a:	e007      	b.n	8002e8c <MotorSpeed_TimerCallback+0xa0>
    } else {
        current_rpm = 0.0f;  // Motor stopped
 8002e7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <MotorSpeed_TimerCallback+0xb8>)
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e002      	b.n	8002e8c <MotorSpeed_TimerCallback+0xa0>
        return;
 8002e86:	bf00      	nop
 8002e88:	e000      	b.n	8002e8c <MotorSpeed_TimerCallback+0xa0>
            return;  // Invalid channel
 8002e8a:	bf00      	nop
    }
}
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40000800 	.word	0x40000800
 8002e98:	2000104c 	.word	0x2000104c
 8002e9c:	20001048 	.word	0x20001048
 8002ea0:	4c64e1c0 	.word	0x4c64e1c0
 8002ea4:	20001050 	.word	0x20001050

08002ea8 <packet_init>:
} PACKET_STATE_t;

static PACKET_STATE_t handler_states[PACKET_HANDLERS];

void packet_init(void (*s_func)(unsigned char *data, unsigned int len),
		void (*p_func)(unsigned char *data, unsigned int len), int handler_num) {
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
	handler_states[handler_num].send_func = s_func;
 8002eb4:	490c      	ldr	r1, [pc, #48]	@ (8002ee8 <packet_init+0x40>)
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	015b      	lsls	r3, r3, #5
 8002ebc:	4413      	add	r3, r2
 8002ebe:	015b      	lsls	r3, r3, #5
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	601a      	str	r2, [r3, #0]
	handler_states[handler_num].process_func = p_func;
 8002ec8:	4907      	ldr	r1, [pc, #28]	@ (8002ee8 <packet_init+0x40>)
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	015b      	lsls	r3, r3, #5
 8002ed0:	4413      	add	r3, r2
 8002ed2:	015b      	lsls	r3, r3, #5
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	601a      	str	r2, [r3, #0]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	20001054 	.word	0x20001054

08002eec <packet_send_packet>:

void packet_send_packet(unsigned char *data, unsigned int len, int handler_num) {
 8002eec:	b590      	push	{r4, r7, lr}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
	if (len > PACKET_MAX_PL_LEN) {
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002efe:	f200 80c8 	bhi.w	8003092 <packet_send_packet+0x1a6>
		return;
	}

	int b_ind = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]

	if (len <= 256) {
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f0c:	d820      	bhi.n	8002f50 <packet_send_packet+0x64>
		handler_states[handler_num].tx_buffer[b_ind++] = 2;
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	1c53      	adds	r3, r2, #1
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	4861      	ldr	r0, [pc, #388]	@ (800309c <packet_send_packet+0x1b0>)
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	015b      	lsls	r3, r3, #5
 8002f1c:	440b      	add	r3, r1
 8002f1e:	015b      	lsls	r3, r3, #5
 8002f20:	4403      	add	r3, r0
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002f28:	2202      	movs	r2, #2
 8002f2a:	701a      	strb	r2, [r3, #0]
		handler_states[handler_num].tx_buffer[b_ind++] = len;
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	1c53      	adds	r3, r2, #1
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	b2dc      	uxtb	r4, r3
 8002f36:	4859      	ldr	r0, [pc, #356]	@ (800309c <packet_send_packet+0x1b0>)
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	015b      	lsls	r3, r3, #5
 8002f3e:	440b      	add	r3, r1
 8002f40:	015b      	lsls	r3, r3, #5
 8002f42:	4403      	add	r3, r0
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e031      	b.n	8002fb4 <packet_send_packet+0xc8>
	} else {
		handler_states[handler_num].tx_buffer[b_ind++] = 3;
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	1c53      	adds	r3, r2, #1
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	4851      	ldr	r0, [pc, #324]	@ (800309c <packet_send_packet+0x1b0>)
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	015b      	lsls	r3, r3, #5
 8002f5e:	440b      	add	r3, r1
 8002f60:	015b      	lsls	r3, r3, #5
 8002f62:	4403      	add	r3, r0
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	701a      	strb	r2, [r3, #0]
		handler_states[handler_num].tx_buffer[b_ind++] = len >> 8;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	0a19      	lsrs	r1, r3, #8
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	1c53      	adds	r3, r2, #1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	b2cc      	uxtb	r4, r1
 8002f7a:	4848      	ldr	r0, [pc, #288]	@ (800309c <packet_send_packet+0x1b0>)
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	015b      	lsls	r3, r3, #5
 8002f82:	440b      	add	r3, r1
 8002f84:	015b      	lsls	r3, r3, #5
 8002f86:	4403      	add	r3, r0
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002f8e:	4622      	mov	r2, r4
 8002f90:	701a      	strb	r2, [r3, #0]
		handler_states[handler_num].tx_buffer[b_ind++] = len & 0xFF;
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	1c53      	adds	r3, r2, #1
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	b2dc      	uxtb	r4, r3
 8002f9c:	483f      	ldr	r0, [pc, #252]	@ (800309c <packet_send_packet+0x1b0>)
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	015b      	lsls	r3, r3, #5
 8002fa4:	440b      	add	r3, r1
 8002fa6:	015b      	lsls	r3, r3, #5
 8002fa8:	4403      	add	r3, r0
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002fb0:	4622      	mov	r2, r4
 8002fb2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(handler_states[handler_num].tx_buffer + b_ind, data, len);
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	015b      	lsls	r3, r3, #5
 8002fba:	4413      	add	r3, r2
 8002fbc:	015b      	lsls	r3, r3, #5
 8002fbe:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8002fc2:	4a36      	ldr	r2, [pc, #216]	@ (800309c <packet_send_packet+0x1b0>)
 8002fc4:	441a      	add	r2, r3
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	4413      	add	r3, r2
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	68f9      	ldr	r1, [r7, #12]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f00b fc46 	bl	800e860 <memcpy>
	b_ind += len;
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4413      	add	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

	unsigned short crc = crc16(data, len);
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f7ff f95e 	bl	80022a0 <crc16>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	827b      	strh	r3, [r7, #18]
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 8002fe8:	8a7b      	ldrh	r3, [r7, #18]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	b299      	uxth	r1, r3
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	1c53      	adds	r3, r2, #1
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	b2cc      	uxtb	r4, r1
 8002ff6:	4829      	ldr	r0, [pc, #164]	@ (800309c <packet_send_packet+0x1b0>)
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	015b      	lsls	r3, r3, #5
 8002ffe:	440b      	add	r3, r1
 8003000:	015b      	lsls	r3, r3, #5
 8003002:	4403      	add	r3, r0
 8003004:	4413      	add	r3, r2
 8003006:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800300a:	4622      	mov	r2, r4
 800300c:	701a      	strb	r2, [r3, #0]
	handler_states[handler_num].tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	1c53      	adds	r3, r2, #1
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	8a7b      	ldrh	r3, [r7, #18]
 8003016:	b2dc      	uxtb	r4, r3
 8003018:	4820      	ldr	r0, [pc, #128]	@ (800309c <packet_send_packet+0x1b0>)
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	015b      	lsls	r3, r3, #5
 8003020:	440b      	add	r3, r1
 8003022:	015b      	lsls	r3, r3, #5
 8003024:	4403      	add	r3, r0
 8003026:	4413      	add	r3, r2
 8003028:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800302c:	4622      	mov	r2, r4
 800302e:	701a      	strb	r2, [r3, #0]
	handler_states[handler_num].tx_buffer[b_ind++] = 3;
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	1c53      	adds	r3, r2, #1
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	4819      	ldr	r0, [pc, #100]	@ (800309c <packet_send_packet+0x1b0>)
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	015b      	lsls	r3, r3, #5
 800303e:	440b      	add	r3, r1
 8003040:	015b      	lsls	r3, r3, #5
 8003042:	4403      	add	r3, r0
 8003044:	4413      	add	r3, r2
 8003046:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800304a:	2203      	movs	r2, #3
 800304c:	701a      	strb	r2, [r3, #0]

	if (handler_states[handler_num].send_func) {
 800304e:	4913      	ldr	r1, [pc, #76]	@ (800309c <packet_send_packet+0x1b0>)
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	015b      	lsls	r3, r3, #5
 8003056:	4413      	add	r3, r2
 8003058:	015b      	lsls	r3, r3, #5
 800305a:	440b      	add	r3, r1
 800305c:	3304      	adds	r3, #4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d017      	beq.n	8003094 <packet_send_packet+0x1a8>
		handler_states[handler_num].send_func(handler_states[handler_num].tx_buffer, b_ind);
 8003064:	490d      	ldr	r1, [pc, #52]	@ (800309c <packet_send_packet+0x1b0>)
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	015b      	lsls	r3, r3, #5
 800306c:	4413      	add	r3, r2
 800306e:	015b      	lsls	r3, r3, #5
 8003070:	440b      	add	r3, r1
 8003072:	3304      	adds	r3, #4
 8003074:	681c      	ldr	r4, [r3, #0]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	4413      	add	r3, r2
 800307e:	015b      	lsls	r3, r3, #5
 8003080:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003084:	4a05      	ldr	r2, [pc, #20]	@ (800309c <packet_send_packet+0x1b0>)
 8003086:	4413      	add	r3, r2
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	47a0      	blx	r4
 8003090:	e000      	b.n	8003094 <packet_send_packet+0x1a8>
		return;
 8003092:	bf00      	nop
	}
}
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	bd90      	pop	{r4, r7, pc}
 800309a:	bf00      	nop
 800309c:	20001054 	.word	0x20001054

080030a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	4b0f      	ldr	r3, [pc, #60]	@ (80030e4 <HAL_MspInit+0x44>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	4a0e      	ldr	r2, [pc, #56]	@ (80030e4 <HAL_MspInit+0x44>)
 80030ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b2:	4b0c      	ldr	r3, [pc, #48]	@ (80030e4 <HAL_MspInit+0x44>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030be:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <HAL_MspInit+0x44>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	4a08      	ldr	r2, [pc, #32]	@ (80030e4 <HAL_MspInit+0x44>)
 80030c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ca:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <HAL_MspInit+0x44>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800

080030e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	@ 0x28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2d      	ldr	r2, [pc, #180]	@ (80031bc <HAL_ADC_MspInit+0xd4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d154      	bne.n	80031b4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800310a:	4b2d      	ldr	r3, [pc, #180]	@ (80031c0 <HAL_ADC_MspInit+0xd8>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	4a2c      	ldr	r2, [pc, #176]	@ (80031c0 <HAL_ADC_MspInit+0xd8>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003114:	6453      	str	r3, [r2, #68]	@ 0x44
 8003116:	4b2a      	ldr	r3, [pc, #168]	@ (80031c0 <HAL_ADC_MspInit+0xd8>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003122:	4b27      	ldr	r3, [pc, #156]	@ (80031c0 <HAL_ADC_MspInit+0xd8>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	4a26      	ldr	r2, [pc, #152]	@ (80031c0 <HAL_ADC_MspInit+0xd8>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6313      	str	r3, [r2, #48]	@ 0x30
 800312e:	4b24      	ldr	r3, [pc, #144]	@ (80031c0 <HAL_ADC_MspInit+0xd8>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800313a:	2379      	movs	r3, #121	@ 0x79
 800313c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800313e:	2303      	movs	r3, #3
 8003140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003146:	f107 0314 	add.w	r3, r7, #20
 800314a:	4619      	mov	r1, r3
 800314c:	481d      	ldr	r0, [pc, #116]	@ (80031c4 <HAL_ADC_MspInit+0xdc>)
 800314e:	f002 f9c9 	bl	80054e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003152:	4b1d      	ldr	r3, [pc, #116]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 8003154:	4a1d      	ldr	r2, [pc, #116]	@ (80031cc <HAL_ADC_MspInit+0xe4>)
 8003156:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003158:	4b1b      	ldr	r3, [pc, #108]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 800315a:	2200      	movs	r2, #0
 800315c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800315e:	4b1a      	ldr	r3, [pc, #104]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003164:	4b18      	ldr	r3, [pc, #96]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 8003166:	2200      	movs	r2, #0
 8003168:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800316a:	4b17      	ldr	r3, [pc, #92]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 800316c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003170:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003172:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 8003174:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003178:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800317a:	4b13      	ldr	r3, [pc, #76]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 800317c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003180:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003182:	4b11      	ldr	r3, [pc, #68]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 8003184:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003188:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800318a:	4b0f      	ldr	r3, [pc, #60]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 800318c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003190:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003192:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 8003194:	2200      	movs	r2, #0
 8003196:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003198:	480b      	ldr	r0, [pc, #44]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 800319a:	f001 fa4b 	bl	8004634 <HAL_DMA_Init>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80031a4:	f7ff fdc4 	bl	8002d30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a07      	ldr	r2, [pc, #28]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 80031ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80031ae:	4a06      	ldr	r2, [pc, #24]	@ (80031c8 <HAL_ADC_MspInit+0xe0>)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80031b4:	bf00      	nop
 80031b6:	3728      	adds	r7, #40	@ 0x28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40012000 	.word	0x40012000
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40020000 	.word	0x40020000
 80031c8:	20000c64 	.word	0x20000c64
 80031cc:	40026410 	.word	0x40026410

080031d0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08e      	sub	sp, #56	@ 0x38
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a4e      	ldr	r2, [pc, #312]	@ (8003328 <HAL_ETH_MspInit+0x158>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	f040 8096 	bne.w	8003320 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80031f4:	4b4d      	ldr	r3, [pc, #308]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	4a4c      	ldr	r2, [pc, #304]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 80031fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003200:	4b4a      	ldr	r3, [pc, #296]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	4b47      	ldr	r3, [pc, #284]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003210:	4a46      	ldr	r2, [pc, #280]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 8003212:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003216:	6313      	str	r3, [r2, #48]	@ 0x30
 8003218:	4b44      	ldr	r3, [pc, #272]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4b41      	ldr	r3, [pc, #260]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003228:	4a40      	ldr	r2, [pc, #256]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 800322a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800322e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003230:	4b3e      	ldr	r3, [pc, #248]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800323c:	4b3b      	ldr	r3, [pc, #236]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003240:	4a3a      	ldr	r2, [pc, #232]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	6313      	str	r3, [r2, #48]	@ 0x30
 8003248:	4b38      	ldr	r3, [pc, #224]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 800324a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003254:	4b35      	ldr	r3, [pc, #212]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	4a34      	ldr	r2, [pc, #208]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003260:	4b32      	ldr	r3, [pc, #200]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800326c:	4b2f      	ldr	r3, [pc, #188]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	4a2e      	ldr	r2, [pc, #184]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 8003272:	f043 0302 	orr.w	r3, r3, #2
 8003276:	6313      	str	r3, [r2, #48]	@ 0x30
 8003278:	4b2c      	ldr	r3, [pc, #176]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003284:	4b29      	ldr	r3, [pc, #164]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003288:	4a28      	ldr	r2, [pc, #160]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 800328a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800328e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003290:	4b26      	ldr	r3, [pc, #152]	@ (800332c <HAL_ETH_MspInit+0x15c>)
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800329c:	2332      	movs	r3, #50	@ 0x32
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a0:	2302      	movs	r3, #2
 80032a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a8:	2303      	movs	r3, #3
 80032aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032ac:	230b      	movs	r3, #11
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032b4:	4619      	mov	r1, r3
 80032b6:	481e      	ldr	r0, [pc, #120]	@ (8003330 <HAL_ETH_MspInit+0x160>)
 80032b8:	f002 f914 	bl	80054e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80032bc:	2386      	movs	r3, #134	@ 0x86
 80032be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c0:	2302      	movs	r3, #2
 80032c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c8:	2303      	movs	r3, #3
 80032ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032cc:	230b      	movs	r3, #11
 80032ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032d4:	4619      	mov	r1, r3
 80032d6:	4817      	ldr	r0, [pc, #92]	@ (8003334 <HAL_ETH_MspInit+0x164>)
 80032d8:	f002 f904 	bl	80054e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80032dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	2302      	movs	r3, #2
 80032e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ea:	2303      	movs	r3, #3
 80032ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80032ee:	230b      	movs	r3, #11
 80032f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80032f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032f6:	4619      	mov	r1, r3
 80032f8:	480f      	ldr	r0, [pc, #60]	@ (8003338 <HAL_ETH_MspInit+0x168>)
 80032fa:	f002 f8f3 	bl	80054e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80032fe:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003304:	2302      	movs	r3, #2
 8003306:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800330c:	2303      	movs	r3, #3
 800330e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003310:	230b      	movs	r3, #11
 8003312:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003318:	4619      	mov	r1, r3
 800331a:	4808      	ldr	r0, [pc, #32]	@ (800333c <HAL_ETH_MspInit+0x16c>)
 800331c:	f002 f8e2 	bl	80054e4 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8003320:	bf00      	nop
 8003322:	3738      	adds	r7, #56	@ 0x38
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40028000 	.word	0x40028000
 800332c:	40023800 	.word	0x40023800
 8003330:	40020800 	.word	0x40020800
 8003334:	40020000 	.word	0x40020000
 8003338:	40020400 	.word	0x40020400
 800333c:	40021800 	.word	0x40021800

08003340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08c      	sub	sp, #48	@ 0x30
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 031c 	add.w	r3, r7, #28
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003360:	d114      	bne.n	800338c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003362:	4b34      	ldr	r3, [pc, #208]	@ (8003434 <HAL_TIM_Base_MspInit+0xf4>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	4a33      	ldr	r2, [pc, #204]	@ (8003434 <HAL_TIM_Base_MspInit+0xf4>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6413      	str	r3, [r2, #64]	@ 0x40
 800336e:	4b31      	ldr	r3, [pc, #196]	@ (8003434 <HAL_TIM_Base_MspInit+0xf4>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	2101      	movs	r1, #1
 800337e:	201c      	movs	r0, #28
 8003380:	f001 f921 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003384:	201c      	movs	r0, #28
 8003386:	f001 f93a 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800338a:	e04f      	b.n	800342c <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM3)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a29      	ldr	r2, [pc, #164]	@ (8003438 <HAL_TIM_Base_MspInit+0xf8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d114      	bne.n	80033c0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003396:	4b27      	ldr	r3, [pc, #156]	@ (8003434 <HAL_TIM_Base_MspInit+0xf4>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	4a26      	ldr	r2, [pc, #152]	@ (8003434 <HAL_TIM_Base_MspInit+0xf4>)
 800339c:	f043 0302 	orr.w	r3, r3, #2
 80033a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a2:	4b24      	ldr	r3, [pc, #144]	@ (8003434 <HAL_TIM_Base_MspInit+0xf4>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2101      	movs	r1, #1
 80033b2:	201d      	movs	r0, #29
 80033b4:	f001 f907 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033b8:	201d      	movs	r0, #29
 80033ba:	f001 f920 	bl	80045fe <HAL_NVIC_EnableIRQ>
}
 80033be:	e035      	b.n	800342c <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM4)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1d      	ldr	r2, [pc, #116]	@ (800343c <HAL_TIM_Base_MspInit+0xfc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d130      	bne.n	800342c <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003434 <HAL_TIM_Base_MspInit+0xf4>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	4a19      	ldr	r2, [pc, #100]	@ (8003434 <HAL_TIM_Base_MspInit+0xf4>)
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033d6:	4b17      	ldr	r3, [pc, #92]	@ (8003434 <HAL_TIM_Base_MspInit+0xf4>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033e2:	4b14      	ldr	r3, [pc, #80]	@ (8003434 <HAL_TIM_Base_MspInit+0xf4>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	4a13      	ldr	r2, [pc, #76]	@ (8003434 <HAL_TIM_Base_MspInit+0xf4>)
 80033e8:	f043 0308 	orr.w	r3, r3, #8
 80033ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ee:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <HAL_TIM_Base_MspInit+0xf4>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80033fa:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80033fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003404:	2300      	movs	r3, #0
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003408:	2300      	movs	r3, #0
 800340a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800340c:	2302      	movs	r3, #2
 800340e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	4619      	mov	r1, r3
 8003416:	480a      	ldr	r0, [pc, #40]	@ (8003440 <HAL_TIM_Base_MspInit+0x100>)
 8003418:	f002 f864 	bl	80054e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800341c:	2200      	movs	r2, #0
 800341e:	2100      	movs	r1, #0
 8003420:	201e      	movs	r0, #30
 8003422:	f001 f8d0 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003426:	201e      	movs	r0, #30
 8003428:	f001 f8e9 	bl	80045fe <HAL_NVIC_EnableIRQ>
}
 800342c:	bf00      	nop
 800342e:	3730      	adds	r7, #48	@ 0x30
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800
 8003440:	40020c00 	.word	0x40020c00

08003444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b0b0      	sub	sp, #192	@ 0xc0
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800345c:	f107 031c 	add.w	r3, r7, #28
 8003460:	2290      	movs	r2, #144	@ 0x90
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f00b f9b7 	bl	800e7d8 <memset>
  if(huart->Instance==USART2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a76      	ldr	r2, [pc, #472]	@ (8003648 <HAL_UART_MspInit+0x204>)
 8003470:	4293      	cmp	r3, r2
 8003472:	f040 80a2 	bne.w	80035ba <HAL_UART_MspInit+0x176>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003476:	2380      	movs	r3, #128	@ 0x80
 8003478:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800347a:	2300      	movs	r3, #0
 800347c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800347e:	f107 031c 	add.w	r3, r7, #28
 8003482:	4618      	mov	r0, r3
 8003484:	f004 f9ca 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800348e:	f7ff fc4f 	bl	8002d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003492:	4b6e      	ldr	r3, [pc, #440]	@ (800364c <HAL_UART_MspInit+0x208>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	4a6d      	ldr	r2, [pc, #436]	@ (800364c <HAL_UART_MspInit+0x208>)
 8003498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349c:	6413      	str	r3, [r2, #64]	@ 0x40
 800349e:	4b6b      	ldr	r3, [pc, #428]	@ (800364c <HAL_UART_MspInit+0x208>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a6:	61bb      	str	r3, [r7, #24]
 80034a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034aa:	4b68      	ldr	r3, [pc, #416]	@ (800364c <HAL_UART_MspInit+0x208>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ae:	4a67      	ldr	r2, [pc, #412]	@ (800364c <HAL_UART_MspInit+0x208>)
 80034b0:	f043 0308 	orr.w	r3, r3, #8
 80034b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b6:	4b65      	ldr	r3, [pc, #404]	@ (800364c <HAL_UART_MspInit+0x208>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80034c2:	2360      	movs	r3, #96	@ 0x60
 80034c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d4:	2303      	movs	r3, #3
 80034d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034da:	2307      	movs	r3, #7
 80034dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034e0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80034e4:	4619      	mov	r1, r3
 80034e6:	485a      	ldr	r0, [pc, #360]	@ (8003650 <HAL_UART_MspInit+0x20c>)
 80034e8:	f001 fffc 	bl	80054e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80034ec:	4b59      	ldr	r3, [pc, #356]	@ (8003654 <HAL_UART_MspInit+0x210>)
 80034ee:	4a5a      	ldr	r2, [pc, #360]	@ (8003658 <HAL_UART_MspInit+0x214>)
 80034f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80034f2:	4b58      	ldr	r3, [pc, #352]	@ (8003654 <HAL_UART_MspInit+0x210>)
 80034f4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80034f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034fa:	4b56      	ldr	r3, [pc, #344]	@ (8003654 <HAL_UART_MspInit+0x210>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003500:	4b54      	ldr	r3, [pc, #336]	@ (8003654 <HAL_UART_MspInit+0x210>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003506:	4b53      	ldr	r3, [pc, #332]	@ (8003654 <HAL_UART_MspInit+0x210>)
 8003508:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800350c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800350e:	4b51      	ldr	r3, [pc, #324]	@ (8003654 <HAL_UART_MspInit+0x210>)
 8003510:	2200      	movs	r2, #0
 8003512:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003514:	4b4f      	ldr	r3, [pc, #316]	@ (8003654 <HAL_UART_MspInit+0x210>)
 8003516:	2200      	movs	r2, #0
 8003518:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800351a:	4b4e      	ldr	r3, [pc, #312]	@ (8003654 <HAL_UART_MspInit+0x210>)
 800351c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003520:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003522:	4b4c      	ldr	r3, [pc, #304]	@ (8003654 <HAL_UART_MspInit+0x210>)
 8003524:	2200      	movs	r2, #0
 8003526:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003528:	4b4a      	ldr	r3, [pc, #296]	@ (8003654 <HAL_UART_MspInit+0x210>)
 800352a:	2200      	movs	r2, #0
 800352c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800352e:	4849      	ldr	r0, [pc, #292]	@ (8003654 <HAL_UART_MspInit+0x210>)
 8003530:	f001 f880 	bl	8004634 <HAL_DMA_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800353a:	f7ff fbf9 	bl	8002d30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a44      	ldr	r2, [pc, #272]	@ (8003654 <HAL_UART_MspInit+0x210>)
 8003542:	675a      	str	r2, [r3, #116]	@ 0x74
 8003544:	4a43      	ldr	r2, [pc, #268]	@ (8003654 <HAL_UART_MspInit+0x210>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800354a:	4b44      	ldr	r3, [pc, #272]	@ (800365c <HAL_UART_MspInit+0x218>)
 800354c:	4a44      	ldr	r2, [pc, #272]	@ (8003660 <HAL_UART_MspInit+0x21c>)
 800354e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003550:	4b42      	ldr	r3, [pc, #264]	@ (800365c <HAL_UART_MspInit+0x218>)
 8003552:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003556:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003558:	4b40      	ldr	r3, [pc, #256]	@ (800365c <HAL_UART_MspInit+0x218>)
 800355a:	2240      	movs	r2, #64	@ 0x40
 800355c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800355e:	4b3f      	ldr	r3, [pc, #252]	@ (800365c <HAL_UART_MspInit+0x218>)
 8003560:	2200      	movs	r2, #0
 8003562:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003564:	4b3d      	ldr	r3, [pc, #244]	@ (800365c <HAL_UART_MspInit+0x218>)
 8003566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800356a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800356c:	4b3b      	ldr	r3, [pc, #236]	@ (800365c <HAL_UART_MspInit+0x218>)
 800356e:	2200      	movs	r2, #0
 8003570:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003572:	4b3a      	ldr	r3, [pc, #232]	@ (800365c <HAL_UART_MspInit+0x218>)
 8003574:	2200      	movs	r2, #0
 8003576:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003578:	4b38      	ldr	r3, [pc, #224]	@ (800365c <HAL_UART_MspInit+0x218>)
 800357a:	2200      	movs	r2, #0
 800357c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800357e:	4b37      	ldr	r3, [pc, #220]	@ (800365c <HAL_UART_MspInit+0x218>)
 8003580:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003584:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003586:	4b35      	ldr	r3, [pc, #212]	@ (800365c <HAL_UART_MspInit+0x218>)
 8003588:	2200      	movs	r2, #0
 800358a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800358c:	4833      	ldr	r0, [pc, #204]	@ (800365c <HAL_UART_MspInit+0x218>)
 800358e:	f001 f851 	bl	8004634 <HAL_DMA_Init>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8003598:	f7ff fbca 	bl	8002d30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a2f      	ldr	r2, [pc, #188]	@ (800365c <HAL_UART_MspInit+0x218>)
 80035a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80035a2:	4a2e      	ldr	r2, [pc, #184]	@ (800365c <HAL_UART_MspInit+0x218>)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2101      	movs	r1, #1
 80035ac:	2026      	movs	r0, #38	@ 0x26
 80035ae:	f001 f80a 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035b2:	2026      	movs	r0, #38	@ 0x26
 80035b4:	f001 f823 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80035b8:	e041      	b.n	800363e <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a29      	ldr	r2, [pc, #164]	@ (8003664 <HAL_UART_MspInit+0x220>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d13c      	bne.n	800363e <HAL_UART_MspInit+0x1fa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80035c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035c8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80035ca:	2300      	movs	r3, #0
 80035cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ce:	f107 031c 	add.w	r3, r7, #28
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 f922 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 80035de:	f7ff fba7 	bl	8002d30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035e2:	4b1a      	ldr	r3, [pc, #104]	@ (800364c <HAL_UART_MspInit+0x208>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	4a19      	ldr	r2, [pc, #100]	@ (800364c <HAL_UART_MspInit+0x208>)
 80035e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ee:	4b17      	ldr	r3, [pc, #92]	@ (800364c <HAL_UART_MspInit+0x208>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035fa:	4b14      	ldr	r3, [pc, #80]	@ (800364c <HAL_UART_MspInit+0x208>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	4a13      	ldr	r2, [pc, #76]	@ (800364c <HAL_UART_MspInit+0x208>)
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	6313      	str	r3, [r2, #48]	@ 0x30
 8003606:	4b11      	ldr	r3, [pc, #68]	@ (800364c <HAL_UART_MspInit+0x208>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003612:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003616:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003626:	2303      	movs	r3, #3
 8003628:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800362c:	2307      	movs	r3, #7
 800362e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003632:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003636:	4619      	mov	r1, r3
 8003638:	4805      	ldr	r0, [pc, #20]	@ (8003650 <HAL_UART_MspInit+0x20c>)
 800363a:	f001 ff53 	bl	80054e4 <HAL_GPIO_Init>
}
 800363e:	bf00      	nop
 8003640:	37c0      	adds	r7, #192	@ 0xc0
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40004400 	.word	0x40004400
 800364c:	40023800 	.word	0x40023800
 8003650:	40020c00 	.word	0x40020c00
 8003654:	20000f68 	.word	0x20000f68
 8003658:	40026088 	.word	0x40026088
 800365c:	20000fc8 	.word	0x20000fc8
 8003660:	400260a0 	.word	0x400260a0
 8003664:	40004800 	.word	0x40004800

08003668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800366c:	bf00      	nop
 800366e:	e7fd      	b.n	800366c <NMI_Handler+0x4>

08003670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <HardFault_Handler+0x4>

08003678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <MemManage_Handler+0x4>

08003680 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <BusFault_Handler+0x4>

08003688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800368c:	bf00      	nop
 800368e:	e7fd      	b.n	800368c <UsageFault_Handler+0x4>

08003690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036be:	f000 fa3f 	bl	8003b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80036cc:	4802      	ldr	r0, [pc, #8]	@ (80036d8 <DMA1_Stream5_IRQHandler+0x10>)
 80036ce:	f001 f951 	bl	8004974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000f68 	.word	0x20000f68

080036dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80036e0:	4802      	ldr	r0, [pc, #8]	@ (80036ec <DMA1_Stream6_IRQHandler+0x10>)
 80036e2:	f001 f947 	bl	8004974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000fc8 	.word	0x20000fc8

080036f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036f4:	4802      	ldr	r0, [pc, #8]	@ (8003700 <TIM2_IRQHandler+0x10>)
 80036f6:	f004 ff69 	bl	80085cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000d74 	.word	0x20000d74

08003704 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003708:	4802      	ldr	r0, [pc, #8]	@ (8003714 <TIM3_IRQHandler+0x10>)
 800370a:	f004 ff5f 	bl	80085cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000dc0 	.word	0x20000dc0

08003718 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800371c:	4802      	ldr	r0, [pc, #8]	@ (8003728 <TIM4_IRQHandler+0x10>)
 800371e:	f004 ff55 	bl	80085cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000e0c 	.word	0x20000e0c

0800372c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003730:	4802      	ldr	r0, [pc, #8]	@ (800373c <USART2_IRQHandler+0x10>)
 8003732:	f005 fe27 	bl	8009384 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20000e58 	.word	0x20000e58

08003740 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003744:	4802      	ldr	r0, [pc, #8]	@ (8003750 <DMA2_Stream0_IRQHandler+0x10>)
 8003746:	f001 f915 	bl	8004974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000c64 	.word	0x20000c64

08003754 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003758:	4802      	ldr	r0, [pc, #8]	@ (8003764 <OTG_FS_IRQHandler+0x10>)
 800375a:	f002 f9da 	bl	8005b12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	2006ff68 	.word	0x2006ff68

08003768 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a0b      	ldr	r2, [pc, #44]	@ (80037a4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d102      	bne.n	8003780 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		//HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
		DataAcq_ProcessSamples(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fe fe16 	bl	80023ac <DataAcq_ProcessSamples>
		//HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
	}

	if (htim->Instance == TIM2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003788:	d107      	bne.n	800379a <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800378a:	2101      	movs	r1, #1
 800378c:	4806      	ldr	r0, [pc, #24]	@ (80037a8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800378e:	f002 f86e 	bl	800586e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8003792:	2180      	movs	r1, #128	@ 0x80
 8003794:	4804      	ldr	r0, [pc, #16]	@ (80037a8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003796:	f002 f86a 	bl	800586e <HAL_GPIO_TogglePin>
}


/*ADC Measurement*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
	// Called when DMA fills the ENTIRE buffer
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40020400 	.word	0x40020400

080037ac <HAL_ADC_ConvCpltCallback>:
	//HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
}

 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]



 80037b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037b8:	4803      	ldr	r0, [pc, #12]	@ (80037c8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80037ba:	f002 f858 	bl	800586e <HAL_GPIO_TogglePin>

 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40020400 	.word	0x40020400

080037cc <HAL_TIM_IC_CaptureCallback>:
{
	MotorSpeed_TimerCallback(htim);
}



 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff fb09 	bl	8002dec <MotorSpeed_TimerCallback>
/* USER CODE END 1 */
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037ec:	4a14      	ldr	r2, [pc, #80]	@ (8003840 <_sbrk+0x5c>)
 80037ee:	4b15      	ldr	r3, [pc, #84]	@ (8003844 <_sbrk+0x60>)
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037f8:	4b13      	ldr	r3, [pc, #76]	@ (8003848 <_sbrk+0x64>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003800:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <_sbrk+0x64>)
 8003802:	4a12      	ldr	r2, [pc, #72]	@ (800384c <_sbrk+0x68>)
 8003804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003806:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <_sbrk+0x64>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	429a      	cmp	r2, r3
 8003812:	d207      	bcs.n	8003824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003814:	f00a fff8 	bl	800e808 <__errno>
 8003818:	4603      	mov	r3, r0
 800381a:	220c      	movs	r2, #12
 800381c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
 8003822:	e009      	b.n	8003838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003824:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <_sbrk+0x64>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800382a:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <_sbrk+0x64>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	4a05      	ldr	r2, [pc, #20]	@ (8003848 <_sbrk+0x64>)
 8003834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20080000 	.word	0x20080000
 8003844:	00000400 	.word	0x00000400
 8003848:	20001474 	.word	0x20001474
 800384c:	20070590 	.word	0x20070590

08003850 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003854:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <SystemInit+0x20>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385a:	4a05      	ldr	r2, [pc, #20]	@ (8003870 <SystemInit+0x20>)
 800385c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000ed00 	.word	0xe000ed00

08003874 <transmit_usb_packet>:
extern uint32_t time_ms;

// Assuming usb_buffer is defined like this (adjust types if needed):
// uint32_t usb_buffer[2][5][USB_BUFFER_SIZE];
// Function to transmit a single USB packet
static uint8_t transmit_usb_packet(uint32_t* data, uint16_t data_len) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	807b      	strh	r3, [r7, #2]
    uint8_t status;
    uint32_t start_time = HAL_GetTick();
 8003880:	f000 f972 	bl	8003b68 <HAL_GetTick>
 8003884:	6178      	str	r0, [r7, #20]

    do {
        status = CDC_Transmit_FS((uint8_t*)data, data_len);
 8003886:	887b      	ldrh	r3, [r7, #2]
 8003888:	4619      	mov	r1, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f00a fa0e 	bl	800dcac <CDC_Transmit_FS>
 8003890:	4603      	mov	r3, r0
 8003892:	74fb      	strb	r3, [r7, #19]
    } while (status != USBD_OK);
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f5      	bne.n	8003886 <transmit_usb_packet+0x12>

    uint32_t transmit_time = HAL_GetTick() - start_time;
 800389a:	f000 f965 	bl	8003b68 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	60fb      	str	r3, [r7, #12]

    if (transmit_time > 10) {
        // Log or debug if transmit time exceeds threshold
    }
    return status; // Return the status of transmission.
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <process_and_transmit_buffer>:


// Function to process and transmit a buffer
static void process_and_transmit_buffer(uint8_t buffer_index, uint32_t* packet_counter) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08c      	sub	sp, #48	@ 0x30
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	6039      	str	r1, [r7, #0]
 80038ba:	71fb      	strb	r3, [r7, #7]
    for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++) {
 80038bc:	2300      	movs	r3, #0
 80038be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80038c0:	e052      	b.n	8003968 <process_and_transmit_buffer+0xb8>
        uint32_t header = 0xddccbbaa;
 80038c2:	4b2e      	ldr	r3, [pc, #184]	@ (800397c <process_and_transmit_buffer+0xcc>)
 80038c4:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint32_t values[7] = {
 80038c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c8:	60fb      	str	r3, [r7, #12]
            header,
            (*packet_counter)++, // Increment and use the packet counter. Important to dereference it.
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	1c59      	adds	r1, r3, #1
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	6011      	str	r1, [r2, #0]
        uint32_t values[7] = {
 80038d4:	613b      	str	r3, [r7, #16]
            usb_buffer[buffer_index][0][i],
 80038d6:	79fa      	ldrb	r2, [r7, #7]
 80038d8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80038da:	4929      	ldr	r1, [pc, #164]	@ (8003980 <process_and_transmit_buffer+0xd0>)
 80038dc:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 80038e0:	fb00 f202 	mul.w	r2, r0, r2
 80038e4:	4413      	add	r3, r2
 80038e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 80038ea:	617b      	str	r3, [r7, #20]
            usb_buffer[buffer_index][1][i],
 80038ec:	79fa      	ldrb	r2, [r7, #7]
 80038ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80038f0:	4923      	ldr	r1, [pc, #140]	@ (8003980 <process_and_transmit_buffer+0xd0>)
 80038f2:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 80038f6:	fb00 f202 	mul.w	r2, r0, r2
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 8003900:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 8003904:	61bb      	str	r3, [r7, #24]
            usb_buffer[buffer_index][2][i],
 8003906:	79fa      	ldrb	r2, [r7, #7]
 8003908:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800390a:	491d      	ldr	r1, [pc, #116]	@ (8003980 <process_and_transmit_buffer+0xd0>)
 800390c:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 8003910:	fb00 f202 	mul.w	r2, r0, r2
 8003914:	4413      	add	r3, r2
 8003916:	f503 537a 	add.w	r3, r3, #16000	@ 0x3e80
 800391a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 800391e:	61fb      	str	r3, [r7, #28]
            usb_buffer[buffer_index][3][i],
 8003920:	79fa      	ldrb	r2, [r7, #7]
 8003922:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003924:	4916      	ldr	r1, [pc, #88]	@ (8003980 <process_and_transmit_buffer+0xd0>)
 8003926:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 800392a:	fb00 f202 	mul.w	r2, r0, r2
 800392e:	441a      	add	r2, r3
 8003930:	f645 53c0 	movw	r3, #24000	@ 0x5dc0
 8003934:	4413      	add	r3, r2
 8003936:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 800393a:	623b      	str	r3, [r7, #32]
            usb_buffer[buffer_index][4][i]
 800393c:	79fa      	ldrb	r2, [r7, #7]
 800393e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003940:	490f      	ldr	r1, [pc, #60]	@ (8003980 <process_and_transmit_buffer+0xd0>)
 8003942:	f64d 20c0 	movw	r0, #56000	@ 0xdac0
 8003946:	fb00 f202 	mul.w	r2, r0, r2
 800394a:	4413      	add	r3, r2
 800394c:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8003950:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        uint32_t values[7] = {
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
        };

        transmit_usb_packet(values, sizeof(values));
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	211c      	movs	r1, #28
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff89 	bl	8003874 <transmit_usb_packet>
    for (uint16_t i = 0; i < USB_BUFFER_SIZE; i++) {
 8003962:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003964:	3301      	adds	r3, #1
 8003966:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003968:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800396a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800396e:	d3a8      	bcc.n	80038c2 <process_and_transmit_buffer+0x12>
    }
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	3730      	adds	r7, #48	@ 0x30
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	ddccbbaa 	.word	0xddccbbaa
 8003980:	2000147c 	.word	0x2000147c

08003984 <usb_transmit_task>:


void usb_transmit_task() {
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
    if (buffer_ready_flag == BUFFER_STATE_READY_0) {
 8003988:	4b0d      	ldr	r3, [pc, #52]	@ (80039c0 <usb_transmit_task+0x3c>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d107      	bne.n	80039a2 <usb_transmit_task+0x1e>
        process_and_transmit_buffer(0, &packet_counter);
 8003992:	490c      	ldr	r1, [pc, #48]	@ (80039c4 <usb_transmit_task+0x40>)
 8003994:	2000      	movs	r0, #0
 8003996:	f7ff ff8b 	bl	80038b0 <process_and_transmit_buffer>
        buffer_ready_flag = BUFFER_STATE_BUSY;
 800399a:	4b09      	ldr	r3, [pc, #36]	@ (80039c0 <usb_transmit_task+0x3c>)
 800399c:	2203      	movs	r2, #3
 800399e:	701a      	strb	r2, [r3, #0]
    } else if (buffer_ready_flag == BUFFER_STATE_READY_1) {
        process_and_transmit_buffer(1, &packet_counter);
        buffer_ready_flag = BUFFER_STATE_BUSY;
    }
}
 80039a0:	e00b      	b.n	80039ba <usb_transmit_task+0x36>
    } else if (buffer_ready_flag == BUFFER_STATE_READY_1) {
 80039a2:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <usb_transmit_task+0x3c>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d106      	bne.n	80039ba <usb_transmit_task+0x36>
        process_and_transmit_buffer(1, &packet_counter);
 80039ac:	4905      	ldr	r1, [pc, #20]	@ (80039c4 <usb_transmit_task+0x40>)
 80039ae:	2001      	movs	r0, #1
 80039b0:	f7ff ff7e 	bl	80038b0 <process_and_transmit_buffer>
        buffer_ready_flag = BUFFER_STATE_BUSY;
 80039b4:	4b02      	ldr	r3, [pc, #8]	@ (80039c0 <usb_transmit_task+0x3c>)
 80039b6:	2203      	movs	r2, #3
 80039b8:	701a      	strb	r2, [r3, #0]
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000bdd 	.word	0x20000bdd
 80039c4:	2006ea7c 	.word	0x2006ea7c

080039c8 <CDC_Receive_FS_App>:

uint8_t CDC_Receive_FS_App(uint8_t *Buf, uint32_t *Len)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]

  //HAL_GPIO_TogglePin(GPIOB, LD2_Pin); // Example: Toggle an LED
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf); // Re-arm the receive buffer
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	481f      	ldr	r0, [pc, #124]	@ (8003a54 <CDC_Receive_FS_App+0x8c>)
 80039d6:	f008 fce7 	bl	800c3a8 <USBD_CDC_SetRxBuffer>
  // Process received command
  if (*Len > 0) {
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d033      	beq.n	8003a4a <CDC_Receive_FS_App+0x82>
    if (Buf[0] == 'S') { // Start command
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b53      	cmp	r3, #83	@ 0x53
 80039e8:	d11b      	bne.n	8003a22 <CDC_Receive_FS_App+0x5a>
      if (!data_acquisition_running) {
 80039ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003a58 <CDC_Receive_FS_App+0x90>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d12b      	bne.n	8003a4a <CDC_Receive_FS_App+0x82>
        HAL_TIM_Base_Start_IT(&htim3); // Start TIM3 and interrupts
 80039f2:	481a      	ldr	r0, [pc, #104]	@ (8003a5c <CDC_Receive_FS_App+0x94>)
 80039f4:	f004 fb92 	bl	800811c <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim2); // Start TIM2 and interrupts (if needed for toggling)
 80039f8:	4819      	ldr	r0, [pc, #100]	@ (8003a60 <CDC_Receive_FS_App+0x98>)
 80039fa:	f004 fb8f 	bl	800811c <HAL_TIM_Base_Start_IT>
        data_acquisition_running = 1;
 80039fe:	4b16      	ldr	r3, [pc, #88]	@ (8003a58 <CDC_Receive_FS_App+0x90>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	701a      	strb	r2, [r3, #0]
        buffer_ready_flag = 3; // Set to initial not ready value.
 8003a04:	4b17      	ldr	r3, [pc, #92]	@ (8003a64 <CDC_Receive_FS_App+0x9c>)
 8003a06:	2203      	movs	r2, #3
 8003a08:	701a      	strb	r2, [r3, #0]
        packet_counter = 0; // Reset packet counter
 8003a0a:	4b17      	ldr	r3, [pc, #92]	@ (8003a68 <CDC_Receive_FS_App+0xa0>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
        DataAcq_Init();
 8003a10:	f7fe fc74 	bl	80022fc <DataAcq_Init>
        MotorSpeed_Init(&htim4);
 8003a14:	4815      	ldr	r0, [pc, #84]	@ (8003a6c <CDC_Receive_FS_App+0xa4>)
 8003a16:	f7ff f991 	bl	8002d3c <MotorSpeed_Init>
        active_buffer = 0;
 8003a1a:	4b15      	ldr	r3, [pc, #84]	@ (8003a70 <CDC_Receive_FS_App+0xa8>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
 8003a20:	e013      	b.n	8003a4a <CDC_Receive_FS_App+0x82>
      } else {
      }
    } else if (Buf[0] == 'T') { // Stop command
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b54      	cmp	r3, #84	@ 0x54
 8003a28:	d10f      	bne.n	8003a4a <CDC_Receive_FS_App+0x82>
      if (data_acquisition_running) {
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <CDC_Receive_FS_App+0x90>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <CDC_Receive_FS_App+0x82>
        HAL_TIM_Base_Stop_IT(&htim3); // Stop TIM3 and interrupts
 8003a32:	480a      	ldr	r0, [pc, #40]	@ (8003a5c <CDC_Receive_FS_App+0x94>)
 8003a34:	f004 fbea 	bl	800820c <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Stop_IT(&htim2); // Stop TIM2 and interrupts
 8003a38:	4809      	ldr	r0, [pc, #36]	@ (8003a60 <CDC_Receive_FS_App+0x98>)
 8003a3a:	f004 fbe7 	bl	800820c <HAL_TIM_Base_Stop_IT>
        data_acquisition_running = 0;
 8003a3e:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <CDC_Receive_FS_App+0x90>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
        buffer_ready_flag = 3; // Ensure sending loop stops gracefully
 8003a44:	4b07      	ldr	r3, [pc, #28]	@ (8003a64 <CDC_Receive_FS_App+0x9c>)
 8003a46:	2203      	movs	r2, #3
 8003a48:	701a      	strb	r2, [r3, #0]
      } else {
      }
    } else {
    }
  }
  return USBD_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	2006ea8c 	.word	0x2006ea8c
 8003a58:	2006ea80 	.word	0x2006ea80
 8003a5c:	20000dc0 	.word	0x20000dc0
 8003a60:	20000d74 	.word	0x20000d74
 8003a64:	20000bdd 	.word	0x20000bdd
 8003a68:	2006ea7c 	.word	0x2006ea7c
 8003a6c:	20000e0c 	.word	0x20000e0c
 8003a70:	20001478 	.word	0x20001478

08003a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003aac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a78:	f7ff feea 	bl	8003850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a7c:	480c      	ldr	r0, [pc, #48]	@ (8003ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a7e:	490d      	ldr	r1, [pc, #52]	@ (8003ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a80:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a84:	e002      	b.n	8003a8c <LoopCopyDataInit>

08003a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a8a:	3304      	adds	r3, #4

08003a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a90:	d3f9      	bcc.n	8003a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a92:	4a0a      	ldr	r2, [pc, #40]	@ (8003abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a94:	4c0a      	ldr	r4, [pc, #40]	@ (8003ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a98:	e001      	b.n	8003a9e <LoopFillZerobss>

08003a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a9c:	3204      	adds	r2, #4

08003a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa0:	d3fb      	bcc.n	8003a9a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003aa2:	f00a feb7 	bl	800e814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aa6:	f7fe fd2d 	bl	8002504 <main>
  bx  lr    
 8003aaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003aac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ab4:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8003ab8:	0800efd0 	.word	0x0800efd0
  ldr r2, =_sbss
 8003abc:	200002a8 	.word	0x200002a8
  ldr r4, =_ebss
 8003ac0:	20070590 	.word	0x20070590

08003ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ac4:	e7fe      	b.n	8003ac4 <ADC_IRQHandler>

08003ac6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aca:	2003      	movs	r0, #3
 8003acc:	f000 fd70 	bl	80045b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f000 f805 	bl	8003ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ad6:	f7ff fae3 	bl	80030a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ae8:	4b12      	ldr	r3, [pc, #72]	@ (8003b34 <HAL_InitTick+0x54>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b12      	ldr	r3, [pc, #72]	@ (8003b38 <HAL_InitTick+0x58>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4619      	mov	r1, r3
 8003af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fd8b 	bl	800461a <HAL_SYSTICK_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00e      	b.n	8003b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b0f      	cmp	r3, #15
 8003b12:	d80a      	bhi.n	8003b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b14:	2200      	movs	r2, #0
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	f000 fd53 	bl	80045c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b20:	4a06      	ldr	r2, [pc, #24]	@ (8003b3c <HAL_InitTick+0x5c>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	2000000c 	.word	0x2000000c
 8003b38:	20000014 	.word	0x20000014
 8003b3c:	20000010 	.word	0x20000010

08003b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b44:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <HAL_IncTick+0x20>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b06      	ldr	r3, [pc, #24]	@ (8003b64 <HAL_IncTick+0x24>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a04      	ldr	r2, [pc, #16]	@ (8003b64 <HAL_IncTick+0x24>)
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000014 	.word	0x20000014
 8003b64:	2006ea84 	.word	0x2006ea84

08003b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <HAL_GetTick+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	2006ea84 	.word	0x2006ea84

08003b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b88:	f7ff ffee 	bl	8003b68 <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d005      	beq.n	8003ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <HAL_Delay+0x44>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ba6:	bf00      	nop
 8003ba8:	f7ff ffde 	bl	8003b68 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d8f7      	bhi.n	8003ba8 <HAL_Delay+0x28>
  {
  }
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000014 	.word	0x20000014

08003bc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e031      	b.n	8003c42 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff fa7e 	bl	80030e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d116      	bne.n	8003c34 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c0a:	4b10      	ldr	r3, [pc, #64]	@ (8003c4c <HAL_ADC_Init+0x84>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	f043 0202 	orr.w	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa7e 	bl	8004118 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f023 0303 	bic.w	r3, r3, #3
 8003c2a:	f043 0201 	orr.w	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c32:	e001      	b.n	8003c38 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	ffffeefd 	.word	0xffffeefd

08003c50 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_ADC_Start_DMA+0x1e>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e0d4      	b.n	8003e18 <HAL_ADC_Start_DMA+0x1c8>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d018      	beq.n	8003cb6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003c94:	4b62      	ldr	r3, [pc, #392]	@ (8003e20 <HAL_ADC_Start_DMA+0x1d0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a62      	ldr	r2, [pc, #392]	@ (8003e24 <HAL_ADC_Start_DMA+0x1d4>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0c9a      	lsrs	r2, r3, #18
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	4413      	add	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003ca8:	e002      	b.n	8003cb0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f9      	bne.n	8003caa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f040 809c 	bne.w	8003dfe <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cca:	4b57      	ldr	r3, [pc, #348]	@ (8003e28 <HAL_ADC_Start_DMA+0x1d8>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003cec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d00:	d106      	bne.n	8003d10 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	f023 0206 	bic.w	r2, r3, #6
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d0e:	e002      	b.n	8003d16 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d22:	4a42      	ldr	r2, [pc, #264]	@ (8003e2c <HAL_ADC_Start_DMA+0x1dc>)
 8003d24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2a:	4a41      	ldr	r2, [pc, #260]	@ (8003e30 <HAL_ADC_Start_DMA+0x1e0>)
 8003d2c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d32:	4a40      	ldr	r2, [pc, #256]	@ (8003e34 <HAL_ADC_Start_DMA+0x1e4>)
 8003d34:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003d3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003d4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	334c      	adds	r3, #76	@ 0x4c
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f000 fd0e 	bl	8004790 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003d74:	4b30      	ldr	r3, [pc, #192]	@ (8003e38 <HAL_ADC_Start_DMA+0x1e8>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10f      	bne.n	8003da0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d143      	bne.n	8003e16 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d9c:	609a      	str	r2, [r3, #8]
 8003d9e:	e03a      	b.n	8003e16 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a25      	ldr	r2, [pc, #148]	@ (8003e3c <HAL_ADC_Start_DMA+0x1ec>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d10e      	bne.n	8003dc8 <HAL_ADC_Start_DMA+0x178>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d107      	bne.n	8003dc8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003dc6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e38 <HAL_ADC_Start_DMA+0x1e8>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d120      	bne.n	8003e16 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a19      	ldr	r2, [pc, #100]	@ (8003e40 <HAL_ADC_Start_DMA+0x1f0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d11b      	bne.n	8003e16 <HAL_ADC_Start_DMA+0x1c6>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d114      	bne.n	8003e16 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	e00b      	b.n	8003e16 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	f043 0210 	orr.w	r2, r3, #16
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	f043 0201 	orr.w	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	2000000c 	.word	0x2000000c
 8003e24:	431bde83 	.word	0x431bde83
 8003e28:	fffff8fe 	.word	0xfffff8fe
 8003e2c:	0800430d 	.word	0x0800430d
 8003e30:	080043c7 	.word	0x080043c7
 8003e34:	080043e3 	.word	0x080043e3
 8003e38:	40012300 	.word	0x40012300
 8003e3c:	40012000 	.word	0x40012000
 8003e40:	40012200 	.word	0x40012200

08003e44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x1c>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e136      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x28a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b09      	cmp	r3, #9
 8003e96:	d93a      	bls.n	8003f0e <HAL_ADC_ConfigChannel+0xa2>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ea0:	d035      	beq.n	8003f0e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68d9      	ldr	r1, [r3, #12]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3b1e      	subs	r3, #30
 8003eb8:	2207      	movs	r2, #7
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a8d      	ldr	r2, [pc, #564]	@ (8004104 <HAL_ADC_ConfigChannel+0x298>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68d9      	ldr	r1, [r3, #12]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	061a      	lsls	r2, r3, #24
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ee6:	e035      	b.n	8003f54 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68d9      	ldr	r1, [r3, #12]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	4618      	mov	r0, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	4403      	add	r3, r0
 8003f00:	3b1e      	subs	r3, #30
 8003f02:	409a      	lsls	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f0c:	e022      	b.n	8003f54 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6919      	ldr	r1, [r3, #16]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4413      	add	r3, r2
 8003f22:	2207      	movs	r2, #7
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43da      	mvns	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	400a      	ands	r2, r1
 8003f30:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6919      	ldr	r1, [r3, #16]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	4618      	mov	r0, r3
 8003f44:	4603      	mov	r3, r0
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4403      	add	r3, r0
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b06      	cmp	r3, #6
 8003f5a:	d824      	bhi.n	8003fa6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3b05      	subs	r3, #5
 8003f6e:	221f      	movs	r2, #31
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43da      	mvns	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	400a      	ands	r2, r1
 8003f7c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	3b05      	subs	r3, #5
 8003f98:	fa00 f203 	lsl.w	r2, r0, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fa4:	e04c      	b.n	8004040 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d824      	bhi.n	8003ff8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3b23      	subs	r3, #35	@ 0x23
 8003fc0:	221f      	movs	r2, #31
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43da      	mvns	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	400a      	ands	r2, r1
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	4618      	mov	r0, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3b23      	subs	r3, #35	@ 0x23
 8003fea:	fa00 f203 	lsl.w	r2, r0, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ff6:	e023      	b.n	8004040 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	3b41      	subs	r3, #65	@ 0x41
 800400a:	221f      	movs	r2, #31
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43da      	mvns	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	400a      	ands	r2, r1
 8004018:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	b29b      	uxth	r3, r3
 8004026:	4618      	mov	r0, r3
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	3b41      	subs	r3, #65	@ 0x41
 8004034:	fa00 f203 	lsl.w	r2, r0, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a30      	ldr	r2, [pc, #192]	@ (8004108 <HAL_ADC_ConfigChannel+0x29c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10a      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x1f4>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004052:	d105      	bne.n	8004060 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004054:	4b2d      	ldr	r3, [pc, #180]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a2c      	ldr	r2, [pc, #176]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 800405a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800405e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a28      	ldr	r2, [pc, #160]	@ (8004108 <HAL_ADC_ConfigChannel+0x29c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d10f      	bne.n	800408a <HAL_ADC_ConfigChannel+0x21e>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b12      	cmp	r3, #18
 8004070:	d10b      	bne.n	800408a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004072:	4b26      	ldr	r3, [pc, #152]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4a25      	ldr	r2, [pc, #148]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 8004078:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800407c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800407e:	4b23      	ldr	r3, [pc, #140]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4a22      	ldr	r2, [pc, #136]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 8004084:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004088:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1e      	ldr	r2, [pc, #120]	@ (8004108 <HAL_ADC_ConfigChannel+0x29c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d12b      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x280>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1a      	ldr	r2, [pc, #104]	@ (8004104 <HAL_ADC_ConfigChannel+0x298>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <HAL_ADC_ConfigChannel+0x23a>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b11      	cmp	r3, #17
 80040a4:	d122      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80040a6:	4b19      	ldr	r3, [pc, #100]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4a18      	ldr	r2, [pc, #96]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 80040ac:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80040b0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80040b2:	4b16      	ldr	r3, [pc, #88]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4a15      	ldr	r2, [pc, #84]	@ (800410c <HAL_ADC_ConfigChannel+0x2a0>)
 80040b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040bc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a10      	ldr	r2, [pc, #64]	@ (8004104 <HAL_ADC_ConfigChannel+0x298>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d111      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80040c8:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <HAL_ADC_ConfigChannel+0x2a4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a11      	ldr	r2, [pc, #68]	@ (8004114 <HAL_ADC_ConfigChannel+0x2a8>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	0c9a      	lsrs	r2, r3, #18
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80040de:	e002      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f9      	bne.n	80040e0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	10000012 	.word	0x10000012
 8004108:	40012000 	.word	0x40012000
 800410c:	40012300 	.word	0x40012300
 8004110:	2000000c 	.word	0x2000000c
 8004114:	431bde83 	.word	0x431bde83

08004118 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004120:	4b78      	ldr	r3, [pc, #480]	@ (8004304 <ADC_Init+0x1ec>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a77      	ldr	r2, [pc, #476]	@ (8004304 <ADC_Init+0x1ec>)
 8004126:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800412a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800412c:	4b75      	ldr	r3, [pc, #468]	@ (8004304 <ADC_Init+0x1ec>)
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4973      	ldr	r1, [pc, #460]	@ (8004304 <ADC_Init+0x1ec>)
 8004136:	4313      	orrs	r3, r2
 8004138:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	021a      	lsls	r2, r3, #8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800416c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800418e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6899      	ldr	r1, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a6:	4a58      	ldr	r2, [pc, #352]	@ (8004308 <ADC_Init+0x1f0>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6899      	ldr	r1, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80041dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6899      	ldr	r1, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	e00f      	b.n	8004212 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004200:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004210:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0202 	bic.w	r2, r2, #2
 8004220:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6899      	ldr	r1, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	005a      	lsls	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3020 	ldrb.w	r3, [r3, #32]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01b      	beq.n	8004278 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800424e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800425e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6859      	ldr	r1, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	3b01      	subs	r3, #1
 800426c:	035a      	lsls	r2, r3, #13
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
 8004276:	e007      	b.n	8004288 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004286:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004296:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	051a      	lsls	r2, r3, #20
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6899      	ldr	r1, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042ca:	025a      	lsls	r2, r3, #9
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6899      	ldr	r1, [r3, #8]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	029a      	lsls	r2, r3, #10
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40012300 	.word	0x40012300
 8004308:	0f000001 	.word	0x0f000001

0800430c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004318:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004322:	2b00      	cmp	r3, #0
 8004324:	d13c      	bne.n	80043a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d12b      	bne.n	8004398 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004344:	2b00      	cmp	r3, #0
 8004346:	d127      	bne.n	8004398 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004352:	2b00      	cmp	r3, #0
 8004354:	d006      	beq.n	8004364 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004360:	2b00      	cmp	r3, #0
 8004362:	d119      	bne.n	8004398 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0220 	bic.w	r2, r2, #32
 8004372:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004384:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d105      	bne.n	8004398 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004390:	f043 0201 	orr.w	r2, r3, #1
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7ff fa07 	bl	80037ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800439e:	e00e      	b.n	80043be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f7ff fd53 	bl	8003e58 <HAL_ADC_ErrorCallback>
}
 80043b2:	e004      	b.n	80043be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
}
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff fd35 	bl	8003e44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2240      	movs	r2, #64	@ 0x40
 80043f4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fa:	f043 0204 	orr.w	r2, r3, #4
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f7ff fd28 	bl	8003e58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004420:	4b0b      	ldr	r3, [pc, #44]	@ (8004450 <__NVIC_SetPriorityGrouping+0x40>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800442c:	4013      	ands	r3, r2
 800442e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004438:	4b06      	ldr	r3, [pc, #24]	@ (8004454 <__NVIC_SetPriorityGrouping+0x44>)
 800443a:	4313      	orrs	r3, r2
 800443c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800443e:	4a04      	ldr	r2, [pc, #16]	@ (8004450 <__NVIC_SetPriorityGrouping+0x40>)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	60d3      	str	r3, [r2, #12]
}
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	e000ed00 	.word	0xe000ed00
 8004454:	05fa0000 	.word	0x05fa0000

08004458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800445c:	4b04      	ldr	r3, [pc, #16]	@ (8004470 <__NVIC_GetPriorityGrouping+0x18>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	0a1b      	lsrs	r3, r3, #8
 8004462:	f003 0307 	and.w	r3, r3, #7
}
 8004466:	4618      	mov	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800447e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004482:	2b00      	cmp	r3, #0
 8004484:	db0b      	blt.n	800449e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	f003 021f 	and.w	r2, r3, #31
 800448c:	4907      	ldr	r1, [pc, #28]	@ (80044ac <__NVIC_EnableIRQ+0x38>)
 800448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	2001      	movs	r0, #1
 8004496:	fa00 f202 	lsl.w	r2, r0, r2
 800449a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	e000e100 	.word	0xe000e100

080044b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	6039      	str	r1, [r7, #0]
 80044ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	db0a      	blt.n	80044da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	490c      	ldr	r1, [pc, #48]	@ (80044fc <__NVIC_SetPriority+0x4c>)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	0112      	lsls	r2, r2, #4
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	440b      	add	r3, r1
 80044d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044d8:	e00a      	b.n	80044f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	4908      	ldr	r1, [pc, #32]	@ (8004500 <__NVIC_SetPriority+0x50>)
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	f003 030f 	and.w	r3, r3, #15
 80044e6:	3b04      	subs	r3, #4
 80044e8:	0112      	lsls	r2, r2, #4
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	440b      	add	r3, r1
 80044ee:	761a      	strb	r2, [r3, #24]
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	e000e100 	.word	0xe000e100
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004504:	b480      	push	{r7}
 8004506:	b089      	sub	sp, #36	@ 0x24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f1c3 0307 	rsb	r3, r3, #7
 800451e:	2b04      	cmp	r3, #4
 8004520:	bf28      	it	cs
 8004522:	2304      	movcs	r3, #4
 8004524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	3304      	adds	r3, #4
 800452a:	2b06      	cmp	r3, #6
 800452c:	d902      	bls.n	8004534 <NVIC_EncodePriority+0x30>
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3b03      	subs	r3, #3
 8004532:	e000      	b.n	8004536 <NVIC_EncodePriority+0x32>
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004538:	f04f 32ff 	mov.w	r2, #4294967295
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43da      	mvns	r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	401a      	ands	r2, r3
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800454c:	f04f 31ff 	mov.w	r1, #4294967295
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	43d9      	mvns	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800455c:	4313      	orrs	r3, r2
         );
}
 800455e:	4618      	mov	r0, r3
 8004560:	3724      	adds	r7, #36	@ 0x24
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3b01      	subs	r3, #1
 8004578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800457c:	d301      	bcc.n	8004582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800457e:	2301      	movs	r3, #1
 8004580:	e00f      	b.n	80045a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004582:	4a0a      	ldr	r2, [pc, #40]	@ (80045ac <SysTick_Config+0x40>)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3b01      	subs	r3, #1
 8004588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800458a:	210f      	movs	r1, #15
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	f7ff ff8e 	bl	80044b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004594:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <SysTick_Config+0x40>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800459a:	4b04      	ldr	r3, [pc, #16]	@ (80045ac <SysTick_Config+0x40>)
 800459c:	2207      	movs	r2, #7
 800459e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	e000e010 	.word	0xe000e010

080045b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ff29 	bl	8004410 <__NVIC_SetPriorityGrouping>
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b086      	sub	sp, #24
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	4603      	mov	r3, r0
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045d8:	f7ff ff3e 	bl	8004458 <__NVIC_GetPriorityGrouping>
 80045dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	f7ff ff8e 	bl	8004504 <NVIC_EncodePriority>
 80045e8:	4602      	mov	r2, r0
 80045ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff5d 	bl	80044b0 <__NVIC_SetPriority>
}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	4603      	mov	r3, r0
 8004606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff ff31 	bl	8004474 <__NVIC_EnableIRQ>
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ffa2 	bl	800456c <SysTick_Config>
 8004628:	4603      	mov	r3, r0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004640:	f7ff fa92 	bl	8003b68 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e099      	b.n	8004784 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004670:	e00f      	b.n	8004692 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004672:	f7ff fa79 	bl	8003b68 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b05      	cmp	r3, #5
 800467e:	d908      	bls.n	8004692 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2203      	movs	r2, #3
 800468a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e078      	b.n	8004784 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e8      	bne.n	8004672 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4b38      	ldr	r3, [pc, #224]	@ (800478c <HAL_DMA_Init+0x158>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d107      	bne.n	80046fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	4313      	orrs	r3, r2
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f023 0307 	bic.w	r3, r3, #7
 8004712:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	2b04      	cmp	r3, #4
 8004724:	d117      	bne.n	8004756 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fb09 	bl	8004d50 <DMA_CheckFifoParam>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2240      	movs	r2, #64	@ 0x40
 8004748:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004752:	2301      	movs	r3, #1
 8004754:	e016      	b.n	8004784 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 fac0 	bl	8004ce4 <DMA_CalcBaseAndBitshift>
 8004764:	4603      	mov	r3, r0
 8004766:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476c:	223f      	movs	r2, #63	@ 0x3f
 800476e:	409a      	lsls	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	e010803f 	.word	0xe010803f

08004790 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_DMA_Start_IT+0x26>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e048      	b.n	8004848 <HAL_DMA_Start_IT+0xb8>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d137      	bne.n	800483a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2202      	movs	r2, #2
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fa52 	bl	8004c88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e8:	223f      	movs	r2, #63	@ 0x3f
 80047ea:	409a      	lsls	r2, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0216 	orr.w	r2, r2, #22
 80047fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800480e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0208 	orr.w	r2, r2, #8
 8004826:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	e005      	b.n	8004846 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004842:	2302      	movs	r3, #2
 8004844:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004846:	7dfb      	ldrb	r3, [r7, #23]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800485e:	f7ff f983 	bl	8003b68 <HAL_GetTick>
 8004862:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d008      	beq.n	8004882 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2280      	movs	r2, #128	@ 0x80
 8004874:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e052      	b.n	8004928 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0216 	bic.w	r2, r2, #22
 8004890:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d103      	bne.n	80048b2 <HAL_DMA_Abort+0x62>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0208 	bic.w	r2, r2, #8
 80048c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048d2:	e013      	b.n	80048fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048d4:	f7ff f948 	bl	8003b68 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d90c      	bls.n	80048fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2203      	movs	r2, #3
 80048ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e015      	b.n	8004928 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e4      	bne.n	80048d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490e:	223f      	movs	r2, #63	@ 0x3f
 8004910:	409a      	lsls	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d004      	beq.n	800494e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2280      	movs	r2, #128	@ 0x80
 8004948:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e00c      	b.n	8004968 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2205      	movs	r2, #5
 8004952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004980:	4b8e      	ldr	r3, [pc, #568]	@ (8004bbc <HAL_DMA_IRQHandler+0x248>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a8e      	ldr	r2, [pc, #568]	@ (8004bc0 <HAL_DMA_IRQHandler+0x24c>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	0a9b      	lsrs	r3, r3, #10
 800498c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004992:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800499e:	2208      	movs	r2, #8
 80049a0:	409a      	lsls	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01a      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d013      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0204 	bic.w	r2, r2, #4
 80049c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049cc:	2208      	movs	r2, #8
 80049ce:	409a      	lsls	r2, r3
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d8:	f043 0201 	orr.w	r2, r3, #1
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e4:	2201      	movs	r2, #1
 80049e6:	409a      	lsls	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d012      	beq.n	8004a16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a02:	2201      	movs	r2, #1
 8004a04:	409a      	lsls	r2, r3
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0e:	f043 0202 	orr.w	r2, r3, #2
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d012      	beq.n	8004a4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00b      	beq.n	8004a4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a38:	2204      	movs	r2, #4
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a44:	f043 0204 	orr.w	r2, r3, #4
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a50:	2210      	movs	r2, #16
 8004a52:	409a      	lsls	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d043      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d03c      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6e:	2210      	movs	r2, #16
 8004a70:	409a      	lsls	r2, r3
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d018      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d108      	bne.n	8004aa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d024      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	4798      	blx	r3
 8004aa2:	e01f      	b.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01b      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
 8004ab4:	e016      	b.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d107      	bne.n	8004ad4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0208 	bic.w	r2, r2, #8
 8004ad2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae8:	2220      	movs	r2, #32
 8004aea:	409a      	lsls	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4013      	ands	r3, r2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 808f 	beq.w	8004c14 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 8087 	beq.w	8004c14 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	409a      	lsls	r2, r3
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b05      	cmp	r3, #5
 8004b1c:	d136      	bne.n	8004b8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0216 	bic.w	r2, r2, #22
 8004b2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695a      	ldr	r2, [r3, #20]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <HAL_DMA_IRQHandler+0x1da>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0208 	bic.w	r2, r2, #8
 8004b5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b62:	223f      	movs	r2, #63	@ 0x3f
 8004b64:	409a      	lsls	r2, r3
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d07e      	beq.n	8004c80 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	4798      	blx	r3
        }
        return;
 8004b8a:	e079      	b.n	8004c80 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d01d      	beq.n	8004bd6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10d      	bne.n	8004bc4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d031      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4798      	blx	r3
 8004bb8:	e02c      	b.n	8004c14 <HAL_DMA_IRQHandler+0x2a0>
 8004bba:	bf00      	nop
 8004bbc:	2000000c 	.word	0x2000000c
 8004bc0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d023      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	4798      	blx	r3
 8004bd4:	e01e      	b.n	8004c14 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10f      	bne.n	8004c04 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0210 	bic.w	r2, r2, #16
 8004bf2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d032      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d022      	beq.n	8004c6e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2205      	movs	r2, #5
 8004c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0201 	bic.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	3301      	adds	r3, #1
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d307      	bcc.n	8004c5c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f2      	bne.n	8004c40 <HAL_DMA_IRQHandler+0x2cc>
 8004c5a:	e000      	b.n	8004c5e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c5c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d005      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	4798      	blx	r3
 8004c7e:	e000      	b.n	8004c82 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c80:	bf00      	nop
    }
  }
}
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b40      	cmp	r3, #64	@ 0x40
 8004cb4:	d108      	bne.n	8004cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cc6:	e007      	b.n	8004cd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	60da      	str	r2, [r3, #12]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	3b10      	subs	r3, #16
 8004cf4:	4a13      	ldr	r2, [pc, #76]	@ (8004d44 <DMA_CalcBaseAndBitshift+0x60>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	091b      	lsrs	r3, r3, #4
 8004cfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cfe:	4a12      	ldr	r2, [pc, #72]	@ (8004d48 <DMA_CalcBaseAndBitshift+0x64>)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d908      	bls.n	8004d24 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	4b0c      	ldr	r3, [pc, #48]	@ (8004d4c <DMA_CalcBaseAndBitshift+0x68>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d22:	e006      	b.n	8004d32 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4b08      	ldr	r3, [pc, #32]	@ (8004d4c <DMA_CalcBaseAndBitshift+0x68>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	aaaaaaab 	.word	0xaaaaaaab
 8004d48:	0800ee78 	.word	0x0800ee78
 8004d4c:	fffffc00 	.word	0xfffffc00

08004d50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d11f      	bne.n	8004daa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d856      	bhi.n	8004e1e <DMA_CheckFifoParam+0xce>
 8004d70:	a201      	add	r2, pc, #4	@ (adr r2, 8004d78 <DMA_CheckFifoParam+0x28>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004d89 	.word	0x08004d89
 8004d7c:	08004d9b 	.word	0x08004d9b
 8004d80:	08004d89 	.word	0x08004d89
 8004d84:	08004e1f 	.word	0x08004e1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d046      	beq.n	8004e22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d98:	e043      	b.n	8004e22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004da2:	d140      	bne.n	8004e26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004da8:	e03d      	b.n	8004e26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db2:	d121      	bne.n	8004df8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d837      	bhi.n	8004e2a <DMA_CheckFifoParam+0xda>
 8004dba:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc0 <DMA_CheckFifoParam+0x70>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004dd1 	.word	0x08004dd1
 8004dc4:	08004dd7 	.word	0x08004dd7
 8004dc8:	08004dd1 	.word	0x08004dd1
 8004dcc:	08004de9 	.word	0x08004de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd4:	e030      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d025      	beq.n	8004e2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de6:	e022      	b.n	8004e2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004df0:	d11f      	bne.n	8004e32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004df6:	e01c      	b.n	8004e32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d903      	bls.n	8004e06 <DMA_CheckFifoParam+0xb6>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d003      	beq.n	8004e0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e04:	e018      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
      break;
 8004e0a:	e015      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00e      	beq.n	8004e36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1c:	e00b      	b.n	8004e36 <DMA_CheckFifoParam+0xe6>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e00a      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      break;
 8004e22:	bf00      	nop
 8004e24:	e008      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      break;
 8004e26:	bf00      	nop
 8004e28:	e006      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      break;
 8004e2a:	bf00      	nop
 8004e2c:	e004      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      break;
 8004e2e:	bf00      	nop
 8004e30:	e002      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e32:	bf00      	nop
 8004e34:	e000      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      break;
 8004e36:	bf00      	nop
    }
  } 
  
  return status; 
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop

08004e48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e086      	b.n	8004f68 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d106      	bne.n	8004e72 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2223      	movs	r2, #35	@ 0x23
 8004e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7fe f9af 	bl	80031d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e72:	4b3f      	ldr	r3, [pc, #252]	@ (8004f70 <HAL_ETH_Init+0x128>)
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e76:	4a3e      	ldr	r2, [pc, #248]	@ (8004f70 <HAL_ETH_Init+0x128>)
 8004e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8004f70 <HAL_ETH_Init+0x128>)
 8004e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8004f74 <HAL_ETH_Init+0x12c>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4a39      	ldr	r2, [pc, #228]	@ (8004f74 <HAL_ETH_Init+0x12c>)
 8004e90:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004e94:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004e96:	4b37      	ldr	r3, [pc, #220]	@ (8004f74 <HAL_ETH_Init+0x12c>)
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	4935      	ldr	r1, [pc, #212]	@ (8004f74 <HAL_ETH_Init+0x12c>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004ea4:	4b33      	ldr	r3, [pc, #204]	@ (8004f74 <HAL_ETH_Init+0x12c>)
 8004ea6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ebe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ec0:	f7fe fe52 	bl	8003b68 <HAL_GetTick>
 8004ec4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004ec6:	e011      	b.n	8004eec <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004ec8:	f7fe fe4e 	bl	8003b68 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004ed6:	d909      	bls.n	8004eec <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2204      	movs	r2, #4
 8004edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	22e0      	movs	r2, #224	@ 0xe0
 8004ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e03d      	b.n	8004f68 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e4      	bne.n	8004ec8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f97a 	bl	80051f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fa25 	bl	8005354 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa7b 	bl	8005406 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	461a      	mov	r2, r3
 8004f16:	2100      	movs	r1, #0
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f9e3 	bl	80052e4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004f2c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <HAL_ETH_Init+0x130>)
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004f52:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2210      	movs	r2, #16
 8004f62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40013800 	.word	0x40013800
 8004f78:	00020060 	.word	0x00020060

08004f7c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4b53      	ldr	r3, [pc, #332]	@ (80050e0 <ETH_SetMACConfig+0x164>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	7b9b      	ldrb	r3, [r3, #14]
 8004f9a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	7c12      	ldrb	r2, [r2, #16]
 8004fa0:	2a00      	cmp	r2, #0
 8004fa2:	d102      	bne.n	8004faa <ETH_SetMACConfig+0x2e>
 8004fa4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004fa8:	e000      	b.n	8004fac <ETH_SetMACConfig+0x30>
 8004faa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004fac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	7c52      	ldrb	r2, [r2, #17]
 8004fb2:	2a00      	cmp	r2, #0
 8004fb4:	d102      	bne.n	8004fbc <ETH_SetMACConfig+0x40>
 8004fb6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8004fba:	e000      	b.n	8004fbe <ETH_SetMACConfig+0x42>
 8004fbc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004fbe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004fc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	7fdb      	ldrb	r3, [r3, #31]
 8004fca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004fcc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004fd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	7f92      	ldrb	r2, [r2, #30]
 8004fd8:	2a00      	cmp	r2, #0
 8004fda:	d102      	bne.n	8004fe2 <ETH_SetMACConfig+0x66>
 8004fdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004fe0:	e000      	b.n	8004fe4 <ETH_SetMACConfig+0x68>
 8004fe2:	2200      	movs	r2, #0
                        macconf->Speed |
 8004fe4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	7f1b      	ldrb	r3, [r3, #28]
 8004fea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004fec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004ff2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	791b      	ldrb	r3, [r3, #4]
 8004ff8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004ffa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005002:	2a00      	cmp	r2, #0
 8005004:	d102      	bne.n	800500c <ETH_SetMACConfig+0x90>
 8005006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800500a:	e000      	b.n	800500e <ETH_SetMACConfig+0x92>
 800500c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800500e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	7bdb      	ldrb	r3, [r3, #15]
 8005014:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005016:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800501c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005024:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005026:	4313      	orrs	r3, r2
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800503e:	2001      	movs	r0, #1
 8005040:	f7fe fd9e 	bl	8003b80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800505a:	4013      	ands	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005062:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800506a:	2a00      	cmp	r2, #0
 800506c:	d101      	bne.n	8005072 <ETH_SetMACConfig+0xf6>
 800506e:	2280      	movs	r2, #128	@ 0x80
 8005070:	e000      	b.n	8005074 <ETH_SetMACConfig+0xf8>
 8005072:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005074:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800507a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005082:	2a01      	cmp	r2, #1
 8005084:	d101      	bne.n	800508a <ETH_SetMACConfig+0x10e>
 8005086:	2208      	movs	r2, #8
 8005088:	e000      	b.n	800508c <ETH_SetMACConfig+0x110>
 800508a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800508c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005094:	2a01      	cmp	r2, #1
 8005096:	d101      	bne.n	800509c <ETH_SetMACConfig+0x120>
 8005098:	2204      	movs	r2, #4
 800509a:	e000      	b.n	800509e <ETH_SetMACConfig+0x122>
 800509c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800509e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80050a6:	2a01      	cmp	r2, #1
 80050a8:	d101      	bne.n	80050ae <ETH_SetMACConfig+0x132>
 80050aa:	2202      	movs	r2, #2
 80050ac:	e000      	b.n	80050b0 <ETH_SetMACConfig+0x134>
 80050ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80050b0:	4313      	orrs	r3, r2
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050c8:	2001      	movs	r0, #1
 80050ca:	f7fe fd59 	bl	8003b80 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	619a      	str	r2, [r3, #24]
}
 80050d6:	bf00      	nop
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	fd20810f 	.word	0xfd20810f

080050e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	4b3d      	ldr	r3, [pc, #244]	@ (80051f4 <ETH_SetDMAConfig+0x110>)
 80050fe:	4013      	ands	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	7b1b      	ldrb	r3, [r3, #12]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d102      	bne.n	8005110 <ETH_SetDMAConfig+0x2c>
 800510a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800510e:	e000      	b.n	8005112 <ETH_SetDMAConfig+0x2e>
 8005110:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	7b5b      	ldrb	r3, [r3, #13]
 8005116:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005118:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	7f52      	ldrb	r2, [r2, #29]
 800511e:	2a00      	cmp	r2, #0
 8005120:	d102      	bne.n	8005128 <ETH_SetDMAConfig+0x44>
 8005122:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005126:	e000      	b.n	800512a <ETH_SetDMAConfig+0x46>
 8005128:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800512a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	7b9b      	ldrb	r3, [r3, #14]
 8005130:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005132:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005138:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	7f1b      	ldrb	r3, [r3, #28]
 800513e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005140:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	7f9b      	ldrb	r3, [r3, #30]
 8005146:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005148:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800514e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005156:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005158:	4313      	orrs	r3, r2
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4313      	orrs	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005168:	461a      	mov	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800517a:	2001      	movs	r0, #1
 800517c:	f7fe fd00 	bl	8003b80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005188:	461a      	mov	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	791b      	ldrb	r3, [r3, #4]
 8005192:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005198:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800519e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80051a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80051ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80051ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80051b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80051bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051d8:	2001      	movs	r0, #1
 80051da:	f7fe fcd1 	bl	8003b80 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051e6:	461a      	mov	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6013      	str	r3, [r2, #0]
}
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	f8de3f23 	.word	0xf8de3f23

080051f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b0a6      	sub	sp, #152	@ 0x98
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8005206:	2301      	movs	r3, #1
 8005208:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800520c:	2300      	movs	r3, #0
 800520e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005210:	2300      	movs	r3, #0
 8005212:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005216:	2301      	movs	r3, #1
 8005218:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800521c:	2300      	movs	r3, #0
 800521e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005228:	2301      	movs	r3, #1
 800522a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800522e:	2300      	movs	r3, #0
 8005230:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005234:	2300      	movs	r3, #0
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800523a:	2300      	movs	r3, #0
 800523c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800523e:	2300      	movs	r3, #0
 8005240:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005244:	2300      	movs	r3, #0
 8005246:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005248:	2300      	movs	r3, #0
 800524a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800524e:	2300      	movs	r3, #0
 8005250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005254:	2300      	movs	r3, #0
 8005256:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800525a:	2300      	movs	r3, #0
 800525c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005260:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005264:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005266:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800526a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800526c:	2300      	movs	r3, #0
 800526e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005272:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff fe7f 	bl	8004f7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800527e:	2301      	movs	r3, #1
 8005280:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005282:	2301      	movs	r3, #1
 8005284:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005286:	2301      	movs	r3, #1
 8005288:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800528c:	2301      	movs	r3, #1
 800528e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005294:	2300      	movs	r3, #0
 8005296:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80052a0:	2300      	movs	r3, #0
 80052a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80052aa:	2301      	movs	r3, #1
 80052ac:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80052ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80052b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80052b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80052b8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80052ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052be:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80052ce:	f107 0308 	add.w	r3, r7, #8
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff ff05 	bl	80050e4 <ETH_SetDMAConfig>
}
 80052da:	bf00      	nop
 80052dc:	3798      	adds	r7, #152	@ 0x98
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3305      	adds	r3, #5
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	021b      	lsls	r3, r3, #8
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	3204      	adds	r2, #4
 80052fc:	7812      	ldrb	r2, [r2, #0]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	4b11      	ldr	r3, [pc, #68]	@ (800534c <ETH_MACAddressConfig+0x68>)
 8005306:	4413      	add	r3, r2
 8005308:	461a      	mov	r2, r3
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3303      	adds	r3, #3
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	061a      	lsls	r2, r3, #24
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3302      	adds	r3, #2
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	041b      	lsls	r3, r3, #16
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3301      	adds	r3, #1
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	4313      	orrs	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	7812      	ldrb	r2, [r2, #0]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <ETH_MACAddressConfig+0x6c>)
 8005336:	4413      	add	r3, r2
 8005338:	461a      	mov	r2, r3
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	6013      	str	r3, [r2, #0]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40028040 	.word	0x40028040
 8005350:	40028044 	.word	0x40028044

08005354 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	e03e      	b.n	80053e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68d9      	ldr	r1, [r3, #12]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	440b      	add	r3, r1
 8005372:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	2200      	movs	r2, #0
 800537e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	3206      	adds	r2, #6
 8005394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d80c      	bhi.n	80053c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68d9      	ldr	r1, [r3, #12]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	440b      	add	r3, r1
 80053bc:	461a      	mov	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	60da      	str	r2, [r3, #12]
 80053c2:	e004      	b.n	80053ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	461a      	mov	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3301      	adds	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d9bd      	bls.n	8005362 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053f8:	611a      	str	r2, [r3, #16]
}
 80053fa:	bf00      	nop
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e048      	b.n	80054a6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6919      	ldr	r1, [r3, #16]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4613      	mov	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	440b      	add	r3, r1
 8005424:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2200      	movs	r2, #0
 8005430:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2200      	movs	r2, #0
 800543c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2200      	movs	r2, #0
 8005442:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2200      	movs	r2, #0
 8005448:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005450:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	3212      	adds	r2, #18
 8005472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d80c      	bhi.n	8005496 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6919      	ldr	r1, [r3, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	440b      	add	r3, r1
 800548e:	461a      	mov	r2, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	60da      	str	r2, [r3, #12]
 8005494:	e004      	b.n	80054a0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	461a      	mov	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d9b3      	bls.n	8005414 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054d6:	60da      	str	r2, [r3, #12]
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b089      	sub	sp, #36	@ 0x24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80054f6:	2300      	movs	r3, #0
 80054f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80054fe:	2300      	movs	r3, #0
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	e175      	b.n	80057f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005504:	2201      	movs	r2, #1
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4013      	ands	r3, r2
 8005516:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	429a      	cmp	r2, r3
 800551e:	f040 8164 	bne.w	80057ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b01      	cmp	r3, #1
 800552c:	d005      	beq.n	800553a <HAL_GPIO_Init+0x56>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f003 0303 	and.w	r3, r3, #3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d130      	bne.n	800559c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	2203      	movs	r2, #3
 8005546:	fa02 f303 	lsl.w	r3, r2, r3
 800554a:	43db      	mvns	r3, r3
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	4013      	ands	r3, r2
 8005550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	fa02 f303 	lsl.w	r3, r2, r3
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	4313      	orrs	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005570:	2201      	movs	r2, #1
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	f003 0201 	and.w	r2, r3, #1
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	d017      	beq.n	80055d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	2203      	movs	r2, #3
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	43db      	mvns	r3, r3
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	4013      	ands	r3, r2
 80055be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d123      	bne.n	800562c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	08da      	lsrs	r2, r3, #3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3208      	adds	r2, #8
 80055ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	220f      	movs	r2, #15
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	43db      	mvns	r3, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4013      	ands	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	4313      	orrs	r3, r2
 800561c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	08da      	lsrs	r2, r3, #3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3208      	adds	r2, #8
 8005626:	69b9      	ldr	r1, [r7, #24]
 8005628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	2203      	movs	r2, #3
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	43db      	mvns	r3, r3
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	4013      	ands	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f003 0203 	and.w	r2, r3, #3
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	4313      	orrs	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 80be 	beq.w	80057ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800566e:	4b66      	ldr	r3, [pc, #408]	@ (8005808 <HAL_GPIO_Init+0x324>)
 8005670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005672:	4a65      	ldr	r2, [pc, #404]	@ (8005808 <HAL_GPIO_Init+0x324>)
 8005674:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005678:	6453      	str	r3, [r2, #68]	@ 0x44
 800567a:	4b63      	ldr	r3, [pc, #396]	@ (8005808 <HAL_GPIO_Init+0x324>)
 800567c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005686:	4a61      	ldr	r2, [pc, #388]	@ (800580c <HAL_GPIO_Init+0x328>)
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	089b      	lsrs	r3, r3, #2
 800568c:	3302      	adds	r3, #2
 800568e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005692:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	220f      	movs	r2, #15
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43db      	mvns	r3, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4013      	ands	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a58      	ldr	r2, [pc, #352]	@ (8005810 <HAL_GPIO_Init+0x32c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d037      	beq.n	8005722 <HAL_GPIO_Init+0x23e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a57      	ldr	r2, [pc, #348]	@ (8005814 <HAL_GPIO_Init+0x330>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d031      	beq.n	800571e <HAL_GPIO_Init+0x23a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a56      	ldr	r2, [pc, #344]	@ (8005818 <HAL_GPIO_Init+0x334>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d02b      	beq.n	800571a <HAL_GPIO_Init+0x236>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a55      	ldr	r2, [pc, #340]	@ (800581c <HAL_GPIO_Init+0x338>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d025      	beq.n	8005716 <HAL_GPIO_Init+0x232>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a54      	ldr	r2, [pc, #336]	@ (8005820 <HAL_GPIO_Init+0x33c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d01f      	beq.n	8005712 <HAL_GPIO_Init+0x22e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a53      	ldr	r2, [pc, #332]	@ (8005824 <HAL_GPIO_Init+0x340>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d019      	beq.n	800570e <HAL_GPIO_Init+0x22a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a52      	ldr	r2, [pc, #328]	@ (8005828 <HAL_GPIO_Init+0x344>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d013      	beq.n	800570a <HAL_GPIO_Init+0x226>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a51      	ldr	r2, [pc, #324]	@ (800582c <HAL_GPIO_Init+0x348>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00d      	beq.n	8005706 <HAL_GPIO_Init+0x222>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a50      	ldr	r2, [pc, #320]	@ (8005830 <HAL_GPIO_Init+0x34c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d007      	beq.n	8005702 <HAL_GPIO_Init+0x21e>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a4f      	ldr	r2, [pc, #316]	@ (8005834 <HAL_GPIO_Init+0x350>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d101      	bne.n	80056fe <HAL_GPIO_Init+0x21a>
 80056fa:	2309      	movs	r3, #9
 80056fc:	e012      	b.n	8005724 <HAL_GPIO_Init+0x240>
 80056fe:	230a      	movs	r3, #10
 8005700:	e010      	b.n	8005724 <HAL_GPIO_Init+0x240>
 8005702:	2308      	movs	r3, #8
 8005704:	e00e      	b.n	8005724 <HAL_GPIO_Init+0x240>
 8005706:	2307      	movs	r3, #7
 8005708:	e00c      	b.n	8005724 <HAL_GPIO_Init+0x240>
 800570a:	2306      	movs	r3, #6
 800570c:	e00a      	b.n	8005724 <HAL_GPIO_Init+0x240>
 800570e:	2305      	movs	r3, #5
 8005710:	e008      	b.n	8005724 <HAL_GPIO_Init+0x240>
 8005712:	2304      	movs	r3, #4
 8005714:	e006      	b.n	8005724 <HAL_GPIO_Init+0x240>
 8005716:	2303      	movs	r3, #3
 8005718:	e004      	b.n	8005724 <HAL_GPIO_Init+0x240>
 800571a:	2302      	movs	r3, #2
 800571c:	e002      	b.n	8005724 <HAL_GPIO_Init+0x240>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <HAL_GPIO_Init+0x240>
 8005722:	2300      	movs	r3, #0
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	f002 0203 	and.w	r2, r2, #3
 800572a:	0092      	lsls	r2, r2, #2
 800572c:	4093      	lsls	r3, r2
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005734:	4935      	ldr	r1, [pc, #212]	@ (800580c <HAL_GPIO_Init+0x328>)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	089b      	lsrs	r3, r3, #2
 800573a:	3302      	adds	r3, #2
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005742:	4b3d      	ldr	r3, [pc, #244]	@ (8005838 <HAL_GPIO_Init+0x354>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	43db      	mvns	r3, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4013      	ands	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005766:	4a34      	ldr	r2, [pc, #208]	@ (8005838 <HAL_GPIO_Init+0x354>)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800576c:	4b32      	ldr	r3, [pc, #200]	@ (8005838 <HAL_GPIO_Init+0x354>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	43db      	mvns	r3, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4013      	ands	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005790:	4a29      	ldr	r2, [pc, #164]	@ (8005838 <HAL_GPIO_Init+0x354>)
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005796:	4b28      	ldr	r3, [pc, #160]	@ (8005838 <HAL_GPIO_Init+0x354>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	43db      	mvns	r3, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4013      	ands	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005838 <HAL_GPIO_Init+0x354>)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005838 <HAL_GPIO_Init+0x354>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	43db      	mvns	r3, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4013      	ands	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057e4:	4a14      	ldr	r2, [pc, #80]	@ (8005838 <HAL_GPIO_Init+0x354>)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	3301      	adds	r3, #1
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	2b0f      	cmp	r3, #15
 80057f4:	f67f ae86 	bls.w	8005504 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	3724      	adds	r7, #36	@ 0x24
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40023800 	.word	0x40023800
 800580c:	40013800 	.word	0x40013800
 8005810:	40020000 	.word	0x40020000
 8005814:	40020400 	.word	0x40020400
 8005818:	40020800 	.word	0x40020800
 800581c:	40020c00 	.word	0x40020c00
 8005820:	40021000 	.word	0x40021000
 8005824:	40021400 	.word	0x40021400
 8005828:	40021800 	.word	0x40021800
 800582c:	40021c00 	.word	0x40021c00
 8005830:	40022000 	.word	0x40022000
 8005834:	40022400 	.word	0x40022400
 8005838:	40013c00 	.word	0x40013c00

0800583c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	807b      	strh	r3, [r7, #2]
 8005848:	4613      	mov	r3, r2
 800584a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800584c:	787b      	ldrb	r3, [r7, #1]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005852:	887a      	ldrh	r2, [r7, #2]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005858:	e003      	b.n	8005862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800585a:	887b      	ldrh	r3, [r7, #2]
 800585c:	041a      	lsls	r2, r3, #16
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	619a      	str	r2, [r3, #24]
}
 8005862:	bf00      	nop
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	460b      	mov	r3, r1
 8005878:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005880:	887a      	ldrh	r2, [r7, #2]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4013      	ands	r3, r2
 8005886:	041a      	lsls	r2, r3, #16
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	43d9      	mvns	r1, r3
 800588c:	887b      	ldrh	r3, [r7, #2]
 800588e:	400b      	ands	r3, r1
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	619a      	str	r2, [r3, #24]
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b086      	sub	sp, #24
 80058a6:	af02      	add	r7, sp, #8
 80058a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e108      	b.n	8005ac6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f008 fb46 	bl	800df60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2203      	movs	r2, #3
 80058d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058e2:	d102      	bne.n	80058ea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f004 feef 	bl	800a6d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	7c1a      	ldrb	r2, [r3, #16]
 80058fc:	f88d 2000 	strb.w	r2, [sp]
 8005900:	3304      	adds	r3, #4
 8005902:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005904:	f004 fdd8 	bl	800a4b8 <USB_CoreInit>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2202      	movs	r2, #2
 8005912:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e0d5      	b.n	8005ac6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2100      	movs	r1, #0
 8005920:	4618      	mov	r0, r3
 8005922:	f004 fee7 	bl	800a6f4 <USB_SetCurrentMode>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e0c6      	b.n	8005ac6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005938:	2300      	movs	r3, #0
 800593a:	73fb      	strb	r3, [r7, #15]
 800593c:	e04a      	b.n	80059d4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800593e:	7bfa      	ldrb	r2, [r7, #15]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	3315      	adds	r3, #21
 800594e:	2201      	movs	r2, #1
 8005950:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005952:	7bfa      	ldrb	r2, [r7, #15]
 8005954:	6879      	ldr	r1, [r7, #4]
 8005956:	4613      	mov	r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	440b      	add	r3, r1
 8005960:	3314      	adds	r3, #20
 8005962:	7bfa      	ldrb	r2, [r7, #15]
 8005964:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005966:	7bfa      	ldrb	r2, [r7, #15]
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	b298      	uxth	r0, r3
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	440b      	add	r3, r1
 8005978:	332e      	adds	r3, #46	@ 0x2e
 800597a:	4602      	mov	r2, r0
 800597c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800597e:	7bfa      	ldrb	r2, [r7, #15]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	3318      	adds	r3, #24
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005992:	7bfa      	ldrb	r2, [r7, #15]
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	331c      	adds	r3, #28
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80059a6:	7bfa      	ldrb	r2, [r7, #15]
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	3320      	adds	r3, #32
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80059ba:	7bfa      	ldrb	r2, [r7, #15]
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	440b      	add	r3, r1
 80059c8:	3324      	adds	r3, #36	@ 0x24
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	3301      	adds	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	791b      	ldrb	r3, [r3, #4]
 80059d8:	7bfa      	ldrb	r2, [r7, #15]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d3af      	bcc.n	800593e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059de:	2300      	movs	r3, #0
 80059e0:	73fb      	strb	r3, [r7, #15]
 80059e2:	e044      	b.n	8005a6e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059e4:	7bfa      	ldrb	r2, [r7, #15]
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80059f6:	2200      	movs	r2, #0
 80059f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059fa:	7bfa      	ldrb	r2, [r7, #15]
 80059fc:	6879      	ldr	r1, [r7, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005a0c:	7bfa      	ldrb	r2, [r7, #15]
 8005a0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a10:	7bfa      	ldrb	r2, [r7, #15]
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a26:	7bfa      	ldrb	r2, [r7, #15]
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a3c:	7bfa      	ldrb	r2, [r7, #15]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a52:	7bfa      	ldrb	r2, [r7, #15]
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005a64:	2200      	movs	r2, #0
 8005a66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	73fb      	strb	r3, [r7, #15]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	791b      	ldrb	r3, [r3, #4]
 8005a72:	7bfa      	ldrb	r2, [r7, #15]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d3b5      	bcc.n	80059e4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	7c1a      	ldrb	r2, [r3, #16]
 8005a80:	f88d 2000 	strb.w	r2, [sp]
 8005a84:	3304      	adds	r3, #4
 8005a86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a88:	f004 fe80 	bl	800a78c <USB_DevInit>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2202      	movs	r2, #2
 8005a96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e013      	b.n	8005ac6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	7b1b      	ldrb	r3, [r3, #12]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d102      	bne.n	8005aba <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f001 f959 	bl	8006d6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f005 febf 	bl	800b842 <USB_DevDisconnect>

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_PCD_Start+0x16>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e012      	b.n	8005b0a <HAL_PCD_Start+0x3c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f004 fddd 	bl	800a6b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f005 fe80 	bl	800b800 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005b12:	b590      	push	{r4, r7, lr}
 8005b14:	b08d      	sub	sp, #52	@ 0x34
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f005 ff3e 	bl	800b9aa <USB_GetMode>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f040 84b9 	bne.w	80064a8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f005 fea2 	bl	800b884 <USB_ReadInterrupts>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 84af 	beq.w	80064a6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f005 fe8f 	bl	800b884 <USB_ReadInterrupts>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d107      	bne.n	8005b80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f002 0202 	and.w	r2, r2, #2
 8005b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f005 fe7d 	bl	800b884 <USB_ReadInterrupts>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d161      	bne.n	8005c58 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0210 	bic.w	r2, r2, #16
 8005ba2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	f003 020f 	and.w	r2, r3, #15
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	0c5b      	lsrs	r3, r3, #17
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d124      	bne.n	8005c1a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d035      	beq.n	8005c48 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	091b      	lsrs	r3, r3, #4
 8005be4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	6a38      	ldr	r0, [r7, #32]
 8005bf0:	f005 fcb4 	bl	800b55c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	091b      	lsrs	r3, r3, #4
 8005bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c00:	441a      	add	r2, r3
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	695a      	ldr	r2, [r3, #20]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	091b      	lsrs	r3, r3, #4
 8005c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c12:	441a      	add	r2, r3
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	615a      	str	r2, [r3, #20]
 8005c18:	e016      	b.n	8005c48 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	0c5b      	lsrs	r3, r3, #17
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	2b06      	cmp	r3, #6
 8005c24:	d110      	bne.n	8005c48 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6a38      	ldr	r0, [r7, #32]
 8005c32:	f005 fc93 	bl	800b55c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	695a      	ldr	r2, [r3, #20]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	091b      	lsrs	r3, r3, #4
 8005c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c42:	441a      	add	r2, r3
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0210 	orr.w	r2, r2, #16
 8005c56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f005 fe11 	bl	800b884 <USB_ReadInterrupts>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c6c:	f040 80a7 	bne.w	8005dbe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f005 fe16 	bl	800b8aa <USB_ReadDevAllOutEpInterrupt>
 8005c7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005c80:	e099      	b.n	8005db6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 808e 	beq.w	8005daa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	4611      	mov	r1, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f005 fe3a 	bl	800b912 <USB_ReadDevOutEPInterrupt>
 8005c9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00c      	beq.n	8005cc4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2301      	movs	r3, #1
 8005cba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005cbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fece 	bl	8006a60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00c      	beq.n	8005ce8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cda:	461a      	mov	r2, r3
 8005cdc:	2308      	movs	r3, #8
 8005cde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005ce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 ffa4 	bl	8006c30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d008      	beq.n	8005d04 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cfe:	461a      	mov	r2, r3
 8005d00:	2310      	movs	r3, #16
 8005d02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d030      	beq.n	8005d70 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d16:	2b80      	cmp	r3, #128	@ 0x80
 8005d18:	d109      	bne.n	8005d2e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d2c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d30:	4613      	mov	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	4413      	add	r3, r2
 8005d40:	3304      	adds	r3, #4
 8005d42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	78db      	ldrb	r3, [r3, #3]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d108      	bne.n	8005d5e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f008 fa35 	bl	800e1c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d86:	461a      	mov	r2, r3
 8005d88:	2320      	movs	r3, #32
 8005d8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d009      	beq.n	8005daa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da2:	461a      	mov	r2, r3
 8005da4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005da8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	3301      	adds	r3, #1
 8005dae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f47f af62 	bne.w	8005c82 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f005 fd5e 	bl	800b884 <USB_ReadInterrupts>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005dd2:	f040 80db 	bne.w	8005f8c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f005 fd7f 	bl	800b8de <USB_ReadDevAllInEpInterrupt>
 8005de0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005de6:	e0cd      	b.n	8005f84 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 80c2 	beq.w	8005f78 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f005 fda5 	bl	800b94e <USB_ReadDevInEPInterrupt>
 8005e04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d057      	beq.n	8005ec0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	2201      	movs	r2, #1
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	69f9      	ldr	r1, [r7, #28]
 8005e2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e30:	4013      	ands	r3, r2
 8005e32:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e40:	461a      	mov	r2, r3
 8005e42:	2301      	movs	r3, #1
 8005e44:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	799b      	ldrb	r3, [r3, #6]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d132      	bne.n	8005eb4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e52:	4613      	mov	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3320      	adds	r3, #32
 8005e5e:	6819      	ldr	r1, [r3, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e64:	4613      	mov	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4403      	add	r3, r0
 8005e6e:	331c      	adds	r3, #28
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4419      	add	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e78:	4613      	mov	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4403      	add	r3, r0
 8005e82:	3320      	adds	r3, #32
 8005e84:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d113      	bne.n	8005eb4 <HAL_PCD_IRQHandler+0x3a2>
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	3324      	adds	r3, #36	@ 0x24
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d108      	bne.n	8005eb4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005eac:	461a      	mov	r2, r3
 8005eae:	2101      	movs	r1, #1
 8005eb0:	f005 fdae 	bl	800ba10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f008 f8ff 	bl	800e0be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d008      	beq.n	8005edc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	2308      	movs	r3, #8
 8005eda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f003 0310 	and.w	r3, r3, #16
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d008      	beq.n	8005f14 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0e:	461a      	mov	r2, r3
 8005f10:	2340      	movs	r3, #64	@ 0x40
 8005f12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d023      	beq.n	8005f66 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005f1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f20:	6a38      	ldr	r0, [r7, #32]
 8005f22:	f004 fd91 	bl	800aa48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f28:	4613      	mov	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	3310      	adds	r3, #16
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	4413      	add	r3, r2
 8005f36:	3304      	adds	r3, #4
 8005f38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	78db      	ldrb	r3, [r3, #3]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d108      	bne.n	8005f54 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2200      	movs	r2, #0
 8005f46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f008 f94c 	bl	800e1ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f60:	461a      	mov	r2, r3
 8005f62:	2302      	movs	r3, #2
 8005f64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d003      	beq.n	8005f78 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005f70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fce8 	bl	8006948 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f47f af2e 	bne.w	8005de8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f005 fc77 	bl	800b884 <USB_ReadInterrupts>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fa0:	d122      	bne.n	8005fe8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d108      	bne.n	8005fd2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005fc8:	2100      	movs	r1, #0
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f008 fac6 	bl	800e55c <HAL_PCDEx_LPM_Callback>
 8005fd0:	e002      	b.n	8005fd8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f008 f8ea 	bl	800e1ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f005 fc49 	bl	800b884 <USB_ReadInterrupts>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ffc:	d112      	bne.n	8006024 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b01      	cmp	r3, #1
 800600c:	d102      	bne.n	8006014 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f008 f8a6 	bl	800e160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006022:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4618      	mov	r0, r3
 800602a:	f005 fc2b 	bl	800b884 <USB_ReadInterrupts>
 800602e:	4603      	mov	r3, r0
 8006030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006034:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006038:	d121      	bne.n	800607e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006048:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006050:	2b00      	cmp	r3, #0
 8006052:	d111      	bne.n	8006078 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006062:	089b      	lsrs	r3, r3, #2
 8006064:	f003 020f 	and.w	r2, r3, #15
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800606e:	2101      	movs	r1, #1
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f008 fa73 	bl	800e55c <HAL_PCDEx_LPM_Callback>
 8006076:	e002      	b.n	800607e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f008 f871 	bl	800e160 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f005 fbfe 	bl	800b884 <USB_ReadInterrupts>
 8006088:	4603      	mov	r3, r0
 800608a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800608e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006092:	f040 80b7 	bne.w	8006204 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060a4:	f023 0301 	bic.w	r3, r3, #1
 80060a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2110      	movs	r1, #16
 80060b0:	4618      	mov	r0, r3
 80060b2:	f004 fcc9 	bl	800aa48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060b6:	2300      	movs	r3, #0
 80060b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ba:	e046      	b.n	800614a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80060bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c8:	461a      	mov	r2, r3
 80060ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060e0:	0151      	lsls	r1, r2, #5
 80060e2:	69fa      	ldr	r2, [r7, #28]
 80060e4:	440a      	add	r2, r1
 80060e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80060f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fc:	461a      	mov	r2, r3
 80060fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006102:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800611e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006122:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800613e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006142:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006146:	3301      	adds	r3, #1
 8006148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	791b      	ldrb	r3, [r3, #4]
 800614e:	461a      	mov	r2, r3
 8006150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006152:	4293      	cmp	r3, r2
 8006154:	d3b2      	bcc.n	80060bc <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006164:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006168:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	7bdb      	ldrb	r3, [r3, #15]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d016      	beq.n	80061a0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006182:	f043 030b 	orr.w	r3, r3, #11
 8006186:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006198:	f043 030b 	orr.w	r3, r3, #11
 800619c:	6453      	str	r3, [r2, #68]	@ 0x44
 800619e:	e015      	b.n	80061cc <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061a6:	695a      	ldr	r2, [r3, #20]
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ae:	4619      	mov	r1, r3
 80061b0:	f242 032b 	movw	r3, #8235	@ 0x202b
 80061b4:	4313      	orrs	r3, r2
 80061b6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061c6:	f043 030b 	orr.w	r3, r3, #11
 80061ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80061de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6818      	ldr	r0, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80061ee:	461a      	mov	r2, r3
 80061f0:	f005 fc0e 	bl	800ba10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	695a      	ldr	r2, [r3, #20]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006202:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f005 fb3b 	bl	800b884 <USB_ReadInterrupts>
 800620e:	4603      	mov	r3, r0
 8006210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006218:	d123      	bne.n	8006262 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f005 fbd2 	bl	800b9c8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	f004 fc86 	bl	800ab3a <USB_GetDevSpeed>
 800622e:	4603      	mov	r3, r0
 8006230:	461a      	mov	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681c      	ldr	r4, [r3, #0]
 800623a:	f001 fabb 	bl	80077b4 <HAL_RCC_GetHCLKFreq>
 800623e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006244:	461a      	mov	r2, r3
 8006246:	4620      	mov	r0, r4
 8006248:	f004 f990 	bl	800a56c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f007 ff5e 	bl	800e10e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695a      	ldr	r2, [r3, #20]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006260:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4618      	mov	r0, r3
 8006268:	f005 fb0c 	bl	800b884 <USB_ReadInterrupts>
 800626c:	4603      	mov	r3, r0
 800626e:	f003 0308 	and.w	r3, r3, #8
 8006272:	2b08      	cmp	r3, #8
 8006274:	d10a      	bne.n	800628c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f007 ff3b 	bl	800e0f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f002 0208 	and.w	r2, r2, #8
 800628a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4618      	mov	r0, r3
 8006292:	f005 faf7 	bl	800b884 <USB_ReadInterrupts>
 8006296:	4603      	mov	r3, r0
 8006298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800629c:	2b80      	cmp	r3, #128	@ 0x80
 800629e:	d123      	bne.n	80062e8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062ac:	2301      	movs	r3, #1
 80062ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80062b0:	e014      	b.n	80062dc <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80062b2:	6879      	ldr	r1, [r7, #4]
 80062b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b6:	4613      	mov	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d105      	bne.n	80062d6 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fb08 	bl	80068e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	3301      	adds	r3, #1
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	791b      	ldrb	r3, [r3, #4]
 80062e0:	461a      	mov	r2, r3
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d3e4      	bcc.n	80062b2 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f005 fac9 	bl	800b884 <USB_ReadInterrupts>
 80062f2:	4603      	mov	r3, r0
 80062f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062fc:	d13c      	bne.n	8006378 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80062fe:	2301      	movs	r3, #1
 8006300:	627b      	str	r3, [r7, #36]	@ 0x24
 8006302:	e02b      	b.n	800635c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006318:	4613      	mov	r3, r2
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	4413      	add	r3, r2
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	440b      	add	r3, r1
 8006322:	3318      	adds	r3, #24
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d115      	bne.n	8006356 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800632a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800632c:	2b00      	cmp	r3, #0
 800632e:	da12      	bge.n	8006356 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006334:	4613      	mov	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	3317      	adds	r3, #23
 8006340:	2201      	movs	r2, #1
 8006342:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006346:	b2db      	uxtb	r3, r3
 8006348:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800634c:	b2db      	uxtb	r3, r3
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fac8 	bl	80068e6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	3301      	adds	r3, #1
 800635a:	627b      	str	r3, [r7, #36]	@ 0x24
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	791b      	ldrb	r3, [r3, #4]
 8006360:	461a      	mov	r2, r3
 8006362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006364:	4293      	cmp	r3, r2
 8006366:	d3cd      	bcc.n	8006304 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	695a      	ldr	r2, [r3, #20]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006376:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f005 fa81 	bl	800b884 <USB_ReadInterrupts>
 8006382:	4603      	mov	r3, r0
 8006384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006388:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800638c:	d156      	bne.n	800643c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800638e:	2301      	movs	r3, #1
 8006390:	627b      	str	r3, [r7, #36]	@ 0x24
 8006392:	e045      	b.n	8006420 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063a8:	4613      	mov	r3, r2
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d12e      	bne.n	800641a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80063bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80063be:	2b00      	cmp	r3, #0
 80063c0:	da2b      	bge.n	800641a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80063ce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d121      	bne.n	800641a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063da:	4613      	mov	r3, r2
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	440b      	add	r3, r1
 80063e4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80063e8:	2201      	movs	r2, #1
 80063ea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006412:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006416:	6053      	str	r3, [r2, #4]
            break;
 8006418:	e008      	b.n	800642c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	3301      	adds	r3, #1
 800641e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	791b      	ldrb	r3, [r3, #4]
 8006424:	461a      	mov	r2, r3
 8006426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006428:	4293      	cmp	r3, r2
 800642a:	d3b3      	bcc.n	8006394 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695a      	ldr	r2, [r3, #20]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800643a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4618      	mov	r0, r3
 8006442:	f005 fa1f 	bl	800b884 <USB_ReadInterrupts>
 8006446:	4603      	mov	r3, r0
 8006448:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006450:	d10a      	bne.n	8006468 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f007 fedc 	bl	800e210 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695a      	ldr	r2, [r3, #20]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006466:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4618      	mov	r0, r3
 800646e:	f005 fa09 	bl	800b884 <USB_ReadInterrupts>
 8006472:	4603      	mov	r3, r0
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b04      	cmp	r3, #4
 800647a:	d115      	bne.n	80064a8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f003 0304 	and.w	r3, r3, #4
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f007 fecc 	bl	800e22c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6859      	ldr	r1, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	605a      	str	r2, [r3, #4]
 80064a4:	e000      	b.n	80064a8 <HAL_PCD_IRQHandler+0x996>
      return;
 80064a6:	bf00      	nop
    }
  }
}
 80064a8:	3734      	adds	r7, #52	@ 0x34
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd90      	pop	{r4, r7, pc}

080064ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_PCD_SetAddress+0x1a>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e012      	b.n	80064ee <HAL_PCD_SetAddress+0x40>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	78fa      	ldrb	r2, [r7, #3]
 80064d4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	78fa      	ldrb	r2, [r7, #3]
 80064dc:	4611      	mov	r1, r2
 80064de:	4618      	mov	r0, r3
 80064e0:	f005 f968 	bl	800b7b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	4608      	mov	r0, r1
 8006500:	4611      	mov	r1, r2
 8006502:	461a      	mov	r2, r3
 8006504:	4603      	mov	r3, r0
 8006506:	70fb      	strb	r3, [r7, #3]
 8006508:	460b      	mov	r3, r1
 800650a:	803b      	strh	r3, [r7, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006518:	2b00      	cmp	r3, #0
 800651a:	da0f      	bge.n	800653c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	f003 020f 	and.w	r2, r3, #15
 8006522:	4613      	mov	r3, r2
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	3310      	adds	r3, #16
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	4413      	add	r3, r2
 8006530:	3304      	adds	r3, #4
 8006532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	705a      	strb	r2, [r3, #1]
 800653a:	e00f      	b.n	800655c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	f003 020f 	and.w	r2, r3, #15
 8006542:	4613      	mov	r3, r2
 8006544:	00db      	lsls	r3, r3, #3
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	4413      	add	r3, r2
 8006552:	3304      	adds	r3, #4
 8006554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	b2da      	uxtb	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006568:	883a      	ldrh	r2, [r7, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	78ba      	ldrb	r2, [r7, #2]
 8006572:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	785b      	ldrb	r3, [r3, #1]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d004      	beq.n	8006586 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	461a      	mov	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006586:	78bb      	ldrb	r3, [r7, #2]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d102      	bne.n	8006592 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_PCD_EP_Open+0xaa>
 800659c:	2302      	movs	r3, #2
 800659e:	e00e      	b.n	80065be <HAL_PCD_EP_Open+0xc8>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68f9      	ldr	r1, [r7, #12]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f004 fae8 	bl	800ab84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80065bc:	7afb      	ldrb	r3, [r7, #11]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	460b      	mov	r3, r1
 80065d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	da0f      	bge.n	80065fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	f003 020f 	and.w	r2, r3, #15
 80065e0:	4613      	mov	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	3310      	adds	r3, #16
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	4413      	add	r3, r2
 80065ee:	3304      	adds	r3, #4
 80065f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	705a      	strb	r2, [r3, #1]
 80065f8:	e00f      	b.n	800661a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	f003 020f 	and.w	r2, r3, #15
 8006600:	4613      	mov	r3, r2
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4413      	add	r3, r2
 8006610:	3304      	adds	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	f003 030f 	and.w	r3, r3, #15
 8006620:	b2da      	uxtb	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_PCD_EP_Close+0x6e>
 8006630:	2302      	movs	r3, #2
 8006632:	e00e      	b.n	8006652 <HAL_PCD_EP_Close+0x8c>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68f9      	ldr	r1, [r7, #12]
 8006642:	4618      	mov	r0, r3
 8006644:	f004 fb26 	bl	800ac94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b086      	sub	sp, #24
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
 8006666:	460b      	mov	r3, r1
 8006668:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800666a:	7afb      	ldrb	r3, [r7, #11]
 800666c:	f003 020f 	and.w	r2, r3, #15
 8006670:	4613      	mov	r3, r2
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	3304      	adds	r3, #4
 8006682:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2200      	movs	r2, #0
 8006694:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2200      	movs	r2, #0
 800669a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800669c:	7afb      	ldrb	r3, [r7, #11]
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	799b      	ldrb	r3, [r3, #6]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d102      	bne.n	80066b6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	799b      	ldrb	r3, [r3, #6]
 80066be:	461a      	mov	r2, r3
 80066c0:	6979      	ldr	r1, [r7, #20]
 80066c2:	f004 fbc3 	bl	800ae4c <USB_EPStartXfer>

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	f003 020f 	and.w	r2, r3, #15
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80066f2:	681b      	ldr	r3, [r3, #0]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	607a      	str	r2, [r7, #4]
 800670a:	603b      	str	r3, [r7, #0]
 800670c:	460b      	mov	r3, r1
 800670e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	f003 020f 	and.w	r2, r3, #15
 8006716:	4613      	mov	r3, r2
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	3310      	adds	r3, #16
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	3304      	adds	r3, #4
 8006726:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2200      	movs	r2, #0
 8006738:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2201      	movs	r2, #1
 800673e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006740:	7afb      	ldrb	r3, [r7, #11]
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	b2da      	uxtb	r2, r3
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	799b      	ldrb	r3, [r3, #6]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d102      	bne.n	800675a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	799b      	ldrb	r3, [r3, #6]
 8006762:	461a      	mov	r2, r3
 8006764:	6979      	ldr	r1, [r7, #20]
 8006766:	f004 fb71 	bl	800ae4c <USB_EPStartXfer>

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	460b      	mov	r3, r1
 800677e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006780:	78fb      	ldrb	r3, [r7, #3]
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	7912      	ldrb	r2, [r2, #4]
 800678a:	4293      	cmp	r3, r2
 800678c:	d901      	bls.n	8006792 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e04f      	b.n	8006832 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006796:	2b00      	cmp	r3, #0
 8006798:	da0f      	bge.n	80067ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	f003 020f 	and.w	r2, r3, #15
 80067a0:	4613      	mov	r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	3310      	adds	r3, #16
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	3304      	adds	r3, #4
 80067b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	705a      	strb	r2, [r3, #1]
 80067b8:	e00d      	b.n	80067d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80067ba:	78fa      	ldrb	r2, [r7, #3]
 80067bc:	4613      	mov	r3, r2
 80067be:	00db      	lsls	r3, r3, #3
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	4413      	add	r3, r2
 80067cc:	3304      	adds	r3, #4
 80067ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2201      	movs	r2, #1
 80067da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_PCD_EP_SetStall+0x82>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e01d      	b.n	8006832 <HAL_PCD_EP_SetStall+0xbe>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	4618      	mov	r0, r3
 8006806:	f004 ff01 	bl	800b60c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	2b00      	cmp	r3, #0
 8006812:	d109      	bne.n	8006828 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6818      	ldr	r0, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	7999      	ldrb	r1, [r3, #6]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006822:	461a      	mov	r2, r3
 8006824:	f005 f8f4 	bl	800ba10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	7912      	ldrb	r2, [r2, #4]
 8006850:	4293      	cmp	r3, r2
 8006852:	d901      	bls.n	8006858 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e042      	b.n	80068de <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800685c:	2b00      	cmp	r3, #0
 800685e:	da0f      	bge.n	8006880 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	f003 020f 	and.w	r2, r3, #15
 8006866:	4613      	mov	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	3310      	adds	r3, #16
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	4413      	add	r3, r2
 8006874:	3304      	adds	r3, #4
 8006876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2201      	movs	r2, #1
 800687c:	705a      	strb	r2, [r3, #1]
 800687e:	e00f      	b.n	80068a0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	f003 020f 	and.w	r2, r3, #15
 8006886:	4613      	mov	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	4413      	add	r3, r2
 8006896:	3304      	adds	r3, #4
 8006898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068a6:	78fb      	ldrb	r3, [r7, #3]
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_PCD_EP_ClrStall+0x86>
 80068bc:	2302      	movs	r3, #2
 80068be:	e00e      	b.n	80068de <HAL_PCD_EP_ClrStall+0xa4>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68f9      	ldr	r1, [r7, #12]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f004 ff0a 	bl	800b6e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	460b      	mov	r3, r1
 80068f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80068f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	da0c      	bge.n	8006914 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068fa:	78fb      	ldrb	r3, [r7, #3]
 80068fc:	f003 020f 	and.w	r2, r3, #15
 8006900:	4613      	mov	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	3310      	adds	r3, #16
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	3304      	adds	r3, #4
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e00c      	b.n	800692e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	f003 020f 	and.w	r2, r3, #15
 800691a:	4613      	mov	r3, r2
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	4413      	add	r3, r2
 800692a:	3304      	adds	r3, #4
 800692c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68f9      	ldr	r1, [r7, #12]
 8006934:	4618      	mov	r0, r3
 8006936:	f004 fd29 	bl	800b38c <USB_EPStopXfer>
 800693a:	4603      	mov	r3, r0
 800693c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800693e:	7afb      	ldrb	r3, [r7, #11]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08a      	sub	sp, #40	@ 0x28
 800694c:	af02      	add	r7, sp, #8
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800695c:	683a      	ldr	r2, [r7, #0]
 800695e:	4613      	mov	r3, r2
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	4413      	add	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	3310      	adds	r3, #16
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	4413      	add	r3, r2
 800696c:	3304      	adds	r3, #4
 800696e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	695a      	ldr	r2, [r3, #20]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	429a      	cmp	r2, r3
 800697a:	d901      	bls.n	8006980 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e06b      	b.n	8006a58 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	429a      	cmp	r2, r3
 8006994:	d902      	bls.n	800699c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	3303      	adds	r3, #3
 80069a0:	089b      	lsrs	r3, r3, #2
 80069a2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069a4:	e02a      	b.n	80069fc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	691a      	ldr	r2, [r3, #16]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d902      	bls.n	80069c2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	3303      	adds	r3, #3
 80069c6:	089b      	lsrs	r3, r3, #2
 80069c8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	68d9      	ldr	r1, [r3, #12]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	4603      	mov	r3, r0
 80069de:	6978      	ldr	r0, [r7, #20]
 80069e0:	f004 fd7e 	bl	800b4e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	441a      	add	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	695a      	ldr	r2, [r3, #20]
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	441a      	add	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d809      	bhi.n	8006a26 <PCD_WriteEmptyTxFifo+0xde>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	695a      	ldr	r2, [r3, #20]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d203      	bcs.n	8006a26 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1bf      	bne.n	80069a6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	691a      	ldr	r2, [r3, #16]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d811      	bhi.n	8006a56 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	2201      	movs	r2, #1
 8006a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	43db      	mvns	r3, r3
 8006a4c:	6939      	ldr	r1, [r7, #16]
 8006a4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a52:	4013      	ands	r3, r2
 8006a54:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	333c      	adds	r3, #60	@ 0x3c
 8006a78:	3304      	adds	r3, #4
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	799b      	ldrb	r3, [r3, #6]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d17b      	bne.n	8006b8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d015      	beq.n	8006acc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	4a61      	ldr	r2, [pc, #388]	@ (8006c28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	f240 80b9 	bls.w	8006c1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 80b3 	beq.w	8006c1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ac8:	6093      	str	r3, [r2, #8]
 8006aca:	e0a7      	b.n	8006c1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f003 0320 	and.w	r3, r3, #32
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d009      	beq.n	8006aea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	2320      	movs	r3, #32
 8006ae6:	6093      	str	r3, [r2, #8]
 8006ae8:	e098      	b.n	8006c1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f040 8093 	bne.w	8006c1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	4a4b      	ldr	r2, [pc, #300]	@ (8006c28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d90f      	bls.n	8006b1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b14:	461a      	mov	r2, r3
 8006b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b1a:	6093      	str	r3, [r2, #8]
 8006b1c:	e07e      	b.n	8006c1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	4613      	mov	r3, r2
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	4413      	add	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	4413      	add	r3, r2
 8006b30:	3304      	adds	r3, #4
 8006b32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a1a      	ldr	r2, [r3, #32]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	0159      	lsls	r1, r3, #5
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	440b      	add	r3, r1
 8006b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b4a:	1ad2      	subs	r2, r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d114      	bne.n	8006b80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d109      	bne.n	8006b72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006b68:	461a      	mov	r2, r3
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	f004 ff50 	bl	800ba10 <USB_EP0_OutStart>
 8006b70:	e006      	b.n	8006b80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	441a      	add	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f007 fa7e 	bl	800e088 <HAL_PCD_DataOutStageCallback>
 8006b8c:	e046      	b.n	8006c1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	4a26      	ldr	r2, [pc, #152]	@ (8006c2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d124      	bne.n	8006be0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00a      	beq.n	8006bb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bac:	461a      	mov	r2, r3
 8006bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bb2:	6093      	str	r3, [r2, #8]
 8006bb4:	e032      	b.n	8006c1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f003 0320 	and.w	r3, r3, #32
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d008      	beq.n	8006bd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bcc:	461a      	mov	r2, r3
 8006bce:	2320      	movs	r3, #32
 8006bd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f007 fa55 	bl	800e088 <HAL_PCD_DataOutStageCallback>
 8006bde:	e01d      	b.n	8006c1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d114      	bne.n	8006c10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	4613      	mov	r3, r2
 8006bec:	00db      	lsls	r3, r3, #3
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d108      	bne.n	8006c10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c08:	461a      	mov	r2, r3
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	f004 ff00 	bl	800ba10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	4619      	mov	r1, r3
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f007 fa36 	bl	800e088 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	4f54300a 	.word	0x4f54300a
 8006c2c:	4f54310a 	.word	0x4f54310a

08006c30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	333c      	adds	r3, #60	@ 0x3c
 8006c48:	3304      	adds	r3, #4
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4a15      	ldr	r2, [pc, #84]	@ (8006cb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d90e      	bls.n	8006c84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d009      	beq.n	8006c84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f007 f9ed 	bl	800e064 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8006cb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d90c      	bls.n	8006cac <PCD_EP_OutSetupPacket_int+0x7c>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	799b      	ldrb	r3, [r3, #6]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d108      	bne.n	8006cac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6818      	ldr	r0, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	f004 feb2 	bl	800ba10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	4f54300a 	.word	0x4f54300a

08006cbc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	70fb      	strb	r3, [r7, #3]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d107      	bne.n	8006cea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006cda:	883b      	ldrh	r3, [r7, #0]
 8006cdc:	0419      	lsls	r1, r3, #16
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ce8:	e028      	b.n	8006d3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf0:	0c1b      	lsrs	r3, r3, #16
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]
 8006cfc:	e00d      	b.n	8006d1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	3340      	adds	r3, #64	@ 0x40
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	0c1b      	lsrs	r3, r3, #16
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	4413      	add	r3, r2
 8006d12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	3301      	adds	r3, #1
 8006d18:	73fb      	strb	r3, [r7, #15]
 8006d1a:	7bfa      	ldrb	r2, [r7, #15]
 8006d1c:	78fb      	ldrb	r3, [r7, #3]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d3ec      	bcc.n	8006cfe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006d24:	883b      	ldrh	r3, [r7, #0]
 8006d26:	0418      	lsls	r0, r3, #16
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6819      	ldr	r1, [r3, #0]
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	4302      	orrs	r2, r0
 8006d34:	3340      	adds	r3, #64	@ 0x40
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	440b      	add	r3, r1
 8006d3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	887a      	ldrh	r2, [r7, #2]
 8006d5c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d9a:	4b05      	ldr	r3, [pc, #20]	@ (8006db0 <HAL_PCDEx_ActivateLPM+0x44>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	10000003 	.word	0x10000003

08006db4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006db8:	4b05      	ldr	r3, [pc, #20]	@ (8006dd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a04      	ldr	r2, [pc, #16]	@ (8006dd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dc2:	6013      	str	r3, [r2, #0]
}
 8006dc4:	bf00      	nop
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40007000 	.word	0x40007000

08006dd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006dde:	4b23      	ldr	r3, [pc, #140]	@ (8006e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de2:	4a22      	ldr	r2, [pc, #136]	@ (8006e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8006de4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dea:	4b20      	ldr	r3, [pc, #128]	@ (8006e6c <HAL_PWREx_EnableOverDrive+0x98>)
 8006dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006df6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8006e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e02:	f7fc feb1 	bl	8003b68 <HAL_GetTick>
 8006e06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e08:	e009      	b.n	8006e1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e0a:	f7fc fead 	bl	8003b68 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e18:	d901      	bls.n	8006e1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e022      	b.n	8006e64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e1e:	4b14      	ldr	r3, [pc, #80]	@ (8006e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e2a:	d1ee      	bne.n	8006e0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006e2c:	4b10      	ldr	r3, [pc, #64]	@ (8006e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a0f      	ldr	r2, [pc, #60]	@ (8006e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e38:	f7fc fe96 	bl	8003b68 <HAL_GetTick>
 8006e3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e3e:	e009      	b.n	8006e54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e40:	f7fc fe92 	bl	8003b68 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e4e:	d901      	bls.n	8006e54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e007      	b.n	8006e64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e54:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e60:	d1ee      	bne.n	8006e40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	40007000 	.word	0x40007000

08006e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e29b      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8087 	beq.w	8006fa6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e98:	4b96      	ldr	r3, [pc, #600]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 030c 	and.w	r3, r3, #12
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d00c      	beq.n	8006ebe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ea4:	4b93      	ldr	r3, [pc, #588]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 030c 	and.w	r3, r3, #12
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d112      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x62>
 8006eb0:	4b90      	ldr	r3, [pc, #576]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ebc:	d10b      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ebe:	4b8d      	ldr	r3, [pc, #564]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d06c      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x130>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d168      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e275      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ede:	d106      	bne.n	8006eee <HAL_RCC_OscConfig+0x7a>
 8006ee0:	4b84      	ldr	r3, [pc, #528]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a83      	ldr	r2, [pc, #524]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	e02e      	b.n	8006f4c <HAL_RCC_OscConfig+0xd8>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10c      	bne.n	8006f10 <HAL_RCC_OscConfig+0x9c>
 8006ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a7e      	ldr	r2, [pc, #504]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	4b7c      	ldr	r3, [pc, #496]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a7b      	ldr	r2, [pc, #492]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006f08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	e01d      	b.n	8006f4c <HAL_RCC_OscConfig+0xd8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f18:	d10c      	bne.n	8006f34 <HAL_RCC_OscConfig+0xc0>
 8006f1a:	4b76      	ldr	r3, [pc, #472]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a75      	ldr	r2, [pc, #468]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	4b73      	ldr	r3, [pc, #460]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a72      	ldr	r2, [pc, #456]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	e00b      	b.n	8006f4c <HAL_RCC_OscConfig+0xd8>
 8006f34:	4b6f      	ldr	r3, [pc, #444]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a6e      	ldr	r2, [pc, #440]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	4b6c      	ldr	r3, [pc, #432]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a6b      	ldr	r2, [pc, #428]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d013      	beq.n	8006f7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f54:	f7fc fe08 	bl	8003b68 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f5c:	f7fc fe04 	bl	8003b68 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b64      	cmp	r3, #100	@ 0x64
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e229      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f6e:	4b61      	ldr	r3, [pc, #388]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f0      	beq.n	8006f5c <HAL_RCC_OscConfig+0xe8>
 8006f7a:	e014      	b.n	8006fa6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7c:	f7fc fdf4 	bl	8003b68 <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f84:	f7fc fdf0 	bl	8003b68 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b64      	cmp	r3, #100	@ 0x64
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e215      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f96:	4b57      	ldr	r3, [pc, #348]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1f0      	bne.n	8006f84 <HAL_RCC_OscConfig+0x110>
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d069      	beq.n	8007086 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fb2:	4b50      	ldr	r3, [pc, #320]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 030c 	and.w	r3, r3, #12
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fbe:	4b4d      	ldr	r3, [pc, #308]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 030c 	and.w	r3, r3, #12
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d11c      	bne.n	8007004 <HAL_RCC_OscConfig+0x190>
 8006fca:	4b4a      	ldr	r3, [pc, #296]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d116      	bne.n	8007004 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fd6:	4b47      	ldr	r3, [pc, #284]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <HAL_RCC_OscConfig+0x17a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d001      	beq.n	8006fee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e1e9      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fee:	4b41      	ldr	r3, [pc, #260]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	493d      	ldr	r1, [pc, #244]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007002:	e040      	b.n	8007086 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d023      	beq.n	8007054 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800700c:	4b39      	ldr	r3, [pc, #228]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a38      	ldr	r2, [pc, #224]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8007012:	f043 0301 	orr.w	r3, r3, #1
 8007016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fc fda6 	bl	8003b68 <HAL_GetTick>
 800701c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007020:	f7fc fda2 	bl	8003b68 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e1c7      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007032:	4b30      	ldr	r3, [pc, #192]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d0f0      	beq.n	8007020 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800703e:	4b2d      	ldr	r3, [pc, #180]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4929      	ldr	r1, [pc, #164]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 800704e:	4313      	orrs	r3, r2
 8007050:	600b      	str	r3, [r1, #0]
 8007052:	e018      	b.n	8007086 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007054:	4b27      	ldr	r3, [pc, #156]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a26      	ldr	r2, [pc, #152]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 800705a:	f023 0301 	bic.w	r3, r3, #1
 800705e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007060:	f7fc fd82 	bl	8003b68 <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007066:	e008      	b.n	800707a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007068:	f7fc fd7e 	bl	8003b68 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b02      	cmp	r3, #2
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e1a3      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800707a:	4b1e      	ldr	r3, [pc, #120]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1f0      	bne.n	8007068 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d038      	beq.n	8007104 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d019      	beq.n	80070ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800709a:	4b16      	ldr	r3, [pc, #88]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 800709c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800709e:	4a15      	ldr	r2, [pc, #84]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 80070a0:	f043 0301 	orr.w	r3, r3, #1
 80070a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a6:	f7fc fd5f 	bl	8003b68 <HAL_GetTick>
 80070aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070ac:	e008      	b.n	80070c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ae:	f7fc fd5b 	bl	8003b68 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e180      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070c0:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 80070c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0f0      	beq.n	80070ae <HAL_RCC_OscConfig+0x23a>
 80070cc:	e01a      	b.n	8007104 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070ce:	4b09      	ldr	r3, [pc, #36]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 80070d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070d2:	4a08      	ldr	r2, [pc, #32]	@ (80070f4 <HAL_RCC_OscConfig+0x280>)
 80070d4:	f023 0301 	bic.w	r3, r3, #1
 80070d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070da:	f7fc fd45 	bl	8003b68 <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070e0:	e00a      	b.n	80070f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070e2:	f7fc fd41 	bl	8003b68 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d903      	bls.n	80070f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e166      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
 80070f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070f8:	4b92      	ldr	r3, [pc, #584]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80070fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1ee      	bne.n	80070e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 80a4 	beq.w	800725a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007112:	4b8c      	ldr	r3, [pc, #560]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10d      	bne.n	800713a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800711e:	4b89      	ldr	r3, [pc, #548]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007122:	4a88      	ldr	r2, [pc, #544]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007128:	6413      	str	r3, [r2, #64]	@ 0x40
 800712a:	4b86      	ldr	r3, [pc, #536]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 800712c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007132:	60bb      	str	r3, [r7, #8]
 8007134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007136:	2301      	movs	r3, #1
 8007138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800713a:	4b83      	ldr	r3, [pc, #524]	@ (8007348 <HAL_RCC_OscConfig+0x4d4>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007142:	2b00      	cmp	r3, #0
 8007144:	d118      	bne.n	8007178 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007146:	4b80      	ldr	r3, [pc, #512]	@ (8007348 <HAL_RCC_OscConfig+0x4d4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a7f      	ldr	r2, [pc, #508]	@ (8007348 <HAL_RCC_OscConfig+0x4d4>)
 800714c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007152:	f7fc fd09 	bl	8003b68 <HAL_GetTick>
 8007156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007158:	e008      	b.n	800716c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800715a:	f7fc fd05 	bl	8003b68 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b64      	cmp	r3, #100	@ 0x64
 8007166:	d901      	bls.n	800716c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e12a      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800716c:	4b76      	ldr	r3, [pc, #472]	@ (8007348 <HAL_RCC_OscConfig+0x4d4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0f0      	beq.n	800715a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d106      	bne.n	800718e <HAL_RCC_OscConfig+0x31a>
 8007180:	4b70      	ldr	r3, [pc, #448]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007184:	4a6f      	ldr	r2, [pc, #444]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007186:	f043 0301 	orr.w	r3, r3, #1
 800718a:	6713      	str	r3, [r2, #112]	@ 0x70
 800718c:	e02d      	b.n	80071ea <HAL_RCC_OscConfig+0x376>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10c      	bne.n	80071b0 <HAL_RCC_OscConfig+0x33c>
 8007196:	4b6b      	ldr	r3, [pc, #428]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800719a:	4a6a      	ldr	r2, [pc, #424]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80071a2:	4b68      	ldr	r3, [pc, #416]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80071a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071a6:	4a67      	ldr	r2, [pc, #412]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80071a8:	f023 0304 	bic.w	r3, r3, #4
 80071ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80071ae:	e01c      	b.n	80071ea <HAL_RCC_OscConfig+0x376>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2b05      	cmp	r3, #5
 80071b6:	d10c      	bne.n	80071d2 <HAL_RCC_OscConfig+0x35e>
 80071b8:	4b62      	ldr	r3, [pc, #392]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80071ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071bc:	4a61      	ldr	r2, [pc, #388]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80071be:	f043 0304 	orr.w	r3, r3, #4
 80071c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80071c4:	4b5f      	ldr	r3, [pc, #380]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80071c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c8:	4a5e      	ldr	r2, [pc, #376]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80071ca:	f043 0301 	orr.w	r3, r3, #1
 80071ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80071d0:	e00b      	b.n	80071ea <HAL_RCC_OscConfig+0x376>
 80071d2:	4b5c      	ldr	r3, [pc, #368]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80071d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d6:	4a5b      	ldr	r2, [pc, #364]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80071d8:	f023 0301 	bic.w	r3, r3, #1
 80071dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80071de:	4b59      	ldr	r3, [pc, #356]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80071e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071e2:	4a58      	ldr	r2, [pc, #352]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80071e4:	f023 0304 	bic.w	r3, r3, #4
 80071e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d015      	beq.n	800721e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f2:	f7fc fcb9 	bl	8003b68 <HAL_GetTick>
 80071f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071f8:	e00a      	b.n	8007210 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071fa:	f7fc fcb5 	bl	8003b68 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007208:	4293      	cmp	r3, r2
 800720a:	d901      	bls.n	8007210 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e0d8      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007210:	4b4c      	ldr	r3, [pc, #304]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0ee      	beq.n	80071fa <HAL_RCC_OscConfig+0x386>
 800721c:	e014      	b.n	8007248 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800721e:	f7fc fca3 	bl	8003b68 <HAL_GetTick>
 8007222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007224:	e00a      	b.n	800723c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007226:	f7fc fc9f 	bl	8003b68 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007234:	4293      	cmp	r3, r2
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e0c2      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800723c:	4b41      	ldr	r3, [pc, #260]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 800723e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1ee      	bne.n	8007226 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d105      	bne.n	800725a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800724e:	4b3d      	ldr	r3, [pc, #244]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	4a3c      	ldr	r2, [pc, #240]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007258:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 80ae 	beq.w	80073c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007264:	4b37      	ldr	r3, [pc, #220]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 030c 	and.w	r3, r3, #12
 800726c:	2b08      	cmp	r3, #8
 800726e:	d06d      	beq.n	800734c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	2b02      	cmp	r3, #2
 8007276:	d14b      	bne.n	8007310 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007278:	4b32      	ldr	r3, [pc, #200]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a31      	ldr	r2, [pc, #196]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 800727e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007284:	f7fc fc70 	bl	8003b68 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800728a:	e008      	b.n	800729e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800728c:	f7fc fc6c 	bl	8003b68 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d901      	bls.n	800729e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e091      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800729e:	4b29      	ldr	r3, [pc, #164]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f0      	bne.n	800728c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69da      	ldr	r2, [r3, #28]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b8:	019b      	lsls	r3, r3, #6
 80072ba:	431a      	orrs	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c0:	085b      	lsrs	r3, r3, #1
 80072c2:	3b01      	subs	r3, #1
 80072c4:	041b      	lsls	r3, r3, #16
 80072c6:	431a      	orrs	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	061b      	lsls	r3, r3, #24
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d4:	071b      	lsls	r3, r3, #28
 80072d6:	491b      	ldr	r1, [pc, #108]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072dc:	4b19      	ldr	r3, [pc, #100]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a18      	ldr	r2, [pc, #96]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 80072e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e8:	f7fc fc3e 	bl	8003b68 <HAL_GetTick>
 80072ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ee:	e008      	b.n	8007302 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072f0:	f7fc fc3a 	bl	8003b68 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e05f      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007302:	4b10      	ldr	r3, [pc, #64]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0f0      	beq.n	80072f0 <HAL_RCC_OscConfig+0x47c>
 800730e:	e057      	b.n	80073c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007310:	4b0c      	ldr	r3, [pc, #48]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a0b      	ldr	r2, [pc, #44]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007316:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800731a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731c:	f7fc fc24 	bl	8003b68 <HAL_GetTick>
 8007320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007322:	e008      	b.n	8007336 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007324:	f7fc fc20 	bl	8003b68 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e045      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007336:	4b03      	ldr	r3, [pc, #12]	@ (8007344 <HAL_RCC_OscConfig+0x4d0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1f0      	bne.n	8007324 <HAL_RCC_OscConfig+0x4b0>
 8007342:	e03d      	b.n	80073c0 <HAL_RCC_OscConfig+0x54c>
 8007344:	40023800 	.word	0x40023800
 8007348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800734c:	4b1f      	ldr	r3, [pc, #124]	@ (80073cc <HAL_RCC_OscConfig+0x558>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d030      	beq.n	80073bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007364:	429a      	cmp	r2, r3
 8007366:	d129      	bne.n	80073bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007372:	429a      	cmp	r2, r3
 8007374:	d122      	bne.n	80073bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800737c:	4013      	ands	r3, r2
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007382:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007384:	4293      	cmp	r3, r2
 8007386:	d119      	bne.n	80073bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007392:	085b      	lsrs	r3, r3, #1
 8007394:	3b01      	subs	r3, #1
 8007396:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007398:	429a      	cmp	r2, r3
 800739a:	d10f      	bne.n	80073bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d107      	bne.n	80073bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d001      	beq.n	80073c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e000      	b.n	80073c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	40023800 	.word	0x40023800

080073d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e0d0      	b.n	800758a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073e8:	4b6a      	ldr	r3, [pc, #424]	@ (8007594 <HAL_RCC_ClockConfig+0x1c4>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d910      	bls.n	8007418 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073f6:	4b67      	ldr	r3, [pc, #412]	@ (8007594 <HAL_RCC_ClockConfig+0x1c4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f023 020f 	bic.w	r2, r3, #15
 80073fe:	4965      	ldr	r1, [pc, #404]	@ (8007594 <HAL_RCC_ClockConfig+0x1c4>)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	4313      	orrs	r3, r2
 8007404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007406:	4b63      	ldr	r3, [pc, #396]	@ (8007594 <HAL_RCC_ClockConfig+0x1c4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d001      	beq.n	8007418 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e0b8      	b.n	800758a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d020      	beq.n	8007466 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d005      	beq.n	800743c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007430:	4b59      	ldr	r3, [pc, #356]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	4a58      	ldr	r2, [pc, #352]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 8007436:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800743a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0308 	and.w	r3, r3, #8
 8007444:	2b00      	cmp	r3, #0
 8007446:	d005      	beq.n	8007454 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007448:	4b53      	ldr	r3, [pc, #332]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	4a52      	ldr	r2, [pc, #328]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 800744e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007452:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007454:	4b50      	ldr	r3, [pc, #320]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	494d      	ldr	r1, [pc, #308]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 8007462:	4313      	orrs	r3, r2
 8007464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d040      	beq.n	80074f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d107      	bne.n	800748a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800747a:	4b47      	ldr	r3, [pc, #284]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d115      	bne.n	80074b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e07f      	b.n	800758a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2b02      	cmp	r3, #2
 8007490:	d107      	bne.n	80074a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007492:	4b41      	ldr	r3, [pc, #260]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d109      	bne.n	80074b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e073      	b.n	800758a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a2:	4b3d      	ldr	r3, [pc, #244]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e06b      	b.n	800758a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074b2:	4b39      	ldr	r3, [pc, #228]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f023 0203 	bic.w	r2, r3, #3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	4936      	ldr	r1, [pc, #216]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074c4:	f7fc fb50 	bl	8003b68 <HAL_GetTick>
 80074c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ca:	e00a      	b.n	80074e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074cc:	f7fc fb4c 	bl	8003b68 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074da:	4293      	cmp	r3, r2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e053      	b.n	800758a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074e2:	4b2d      	ldr	r3, [pc, #180]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 020c 	and.w	r2, r3, #12
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d1eb      	bne.n	80074cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074f4:	4b27      	ldr	r3, [pc, #156]	@ (8007594 <HAL_RCC_ClockConfig+0x1c4>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d210      	bcs.n	8007524 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007502:	4b24      	ldr	r3, [pc, #144]	@ (8007594 <HAL_RCC_ClockConfig+0x1c4>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f023 020f 	bic.w	r2, r3, #15
 800750a:	4922      	ldr	r1, [pc, #136]	@ (8007594 <HAL_RCC_ClockConfig+0x1c4>)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	4313      	orrs	r3, r2
 8007510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007512:	4b20      	ldr	r3, [pc, #128]	@ (8007594 <HAL_RCC_ClockConfig+0x1c4>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 030f 	and.w	r3, r3, #15
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	429a      	cmp	r2, r3
 800751e:	d001      	beq.n	8007524 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e032      	b.n	800758a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d008      	beq.n	8007542 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007530:	4b19      	ldr	r3, [pc, #100]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	4916      	ldr	r1, [pc, #88]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 800753e:	4313      	orrs	r3, r2
 8007540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0308 	and.w	r3, r3, #8
 800754a:	2b00      	cmp	r3, #0
 800754c:	d009      	beq.n	8007562 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800754e:	4b12      	ldr	r3, [pc, #72]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	490e      	ldr	r1, [pc, #56]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 800755e:	4313      	orrs	r3, r2
 8007560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007562:	f000 f821 	bl	80075a8 <HAL_RCC_GetSysClockFreq>
 8007566:	4602      	mov	r2, r0
 8007568:	4b0b      	ldr	r3, [pc, #44]	@ (8007598 <HAL_RCC_ClockConfig+0x1c8>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	091b      	lsrs	r3, r3, #4
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	490a      	ldr	r1, [pc, #40]	@ (800759c <HAL_RCC_ClockConfig+0x1cc>)
 8007574:	5ccb      	ldrb	r3, [r1, r3]
 8007576:	fa22 f303 	lsr.w	r3, r2, r3
 800757a:	4a09      	ldr	r2, [pc, #36]	@ (80075a0 <HAL_RCC_ClockConfig+0x1d0>)
 800757c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800757e:	4b09      	ldr	r3, [pc, #36]	@ (80075a4 <HAL_RCC_ClockConfig+0x1d4>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4618      	mov	r0, r3
 8007584:	f7fc faac 	bl	8003ae0 <HAL_InitTick>

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40023c00 	.word	0x40023c00
 8007598:	40023800 	.word	0x40023800
 800759c:	0800ee60 	.word	0x0800ee60
 80075a0:	2000000c 	.word	0x2000000c
 80075a4:	20000010 	.word	0x20000010

080075a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075ac:	b094      	sub	sp, #80	@ 0x50
 80075ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80075b4:	2300      	movs	r3, #0
 80075b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075b8:	2300      	movs	r3, #0
 80075ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80075bc:	2300      	movs	r3, #0
 80075be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075c0:	4b79      	ldr	r3, [pc, #484]	@ (80077a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f003 030c 	and.w	r3, r3, #12
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d00d      	beq.n	80075e8 <HAL_RCC_GetSysClockFreq+0x40>
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	f200 80e1 	bhi.w	8007794 <HAL_RCC_GetSysClockFreq+0x1ec>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <HAL_RCC_GetSysClockFreq+0x34>
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d003      	beq.n	80075e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80075da:	e0db      	b.n	8007794 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075dc:	4b73      	ldr	r3, [pc, #460]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x204>)
 80075de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80075e0:	e0db      	b.n	800779a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075e2:	4b73      	ldr	r3, [pc, #460]	@ (80077b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80075e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80075e6:	e0d8      	b.n	800779a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075e8:	4b6f      	ldr	r3, [pc, #444]	@ (80077a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80075f2:	4b6d      	ldr	r3, [pc, #436]	@ (80077a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d063      	beq.n	80076c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075fe:	4b6a      	ldr	r3, [pc, #424]	@ (80077a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	099b      	lsrs	r3, r3, #6
 8007604:	2200      	movs	r2, #0
 8007606:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007608:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800760a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007610:	633b      	str	r3, [r7, #48]	@ 0x30
 8007612:	2300      	movs	r3, #0
 8007614:	637b      	str	r3, [r7, #52]	@ 0x34
 8007616:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800761a:	4622      	mov	r2, r4
 800761c:	462b      	mov	r3, r5
 800761e:	f04f 0000 	mov.w	r0, #0
 8007622:	f04f 0100 	mov.w	r1, #0
 8007626:	0159      	lsls	r1, r3, #5
 8007628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800762c:	0150      	lsls	r0, r2, #5
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	4621      	mov	r1, r4
 8007634:	1a51      	subs	r1, r2, r1
 8007636:	6139      	str	r1, [r7, #16]
 8007638:	4629      	mov	r1, r5
 800763a:	eb63 0301 	sbc.w	r3, r3, r1
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	f04f 0200 	mov.w	r2, #0
 8007644:	f04f 0300 	mov.w	r3, #0
 8007648:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800764c:	4659      	mov	r1, fp
 800764e:	018b      	lsls	r3, r1, #6
 8007650:	4651      	mov	r1, sl
 8007652:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007656:	4651      	mov	r1, sl
 8007658:	018a      	lsls	r2, r1, #6
 800765a:	4651      	mov	r1, sl
 800765c:	ebb2 0801 	subs.w	r8, r2, r1
 8007660:	4659      	mov	r1, fp
 8007662:	eb63 0901 	sbc.w	r9, r3, r1
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	f04f 0300 	mov.w	r3, #0
 800766e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800767a:	4690      	mov	r8, r2
 800767c:	4699      	mov	r9, r3
 800767e:	4623      	mov	r3, r4
 8007680:	eb18 0303 	adds.w	r3, r8, r3
 8007684:	60bb      	str	r3, [r7, #8]
 8007686:	462b      	mov	r3, r5
 8007688:	eb49 0303 	adc.w	r3, r9, r3
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	f04f 0200 	mov.w	r2, #0
 8007692:	f04f 0300 	mov.w	r3, #0
 8007696:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800769a:	4629      	mov	r1, r5
 800769c:	024b      	lsls	r3, r1, #9
 800769e:	4621      	mov	r1, r4
 80076a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80076a4:	4621      	mov	r1, r4
 80076a6:	024a      	lsls	r2, r1, #9
 80076a8:	4610      	mov	r0, r2
 80076aa:	4619      	mov	r1, r3
 80076ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ae:	2200      	movs	r2, #0
 80076b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80076b8:	f7f8 ff7a 	bl	80005b0 <__aeabi_uldivmod>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4613      	mov	r3, r2
 80076c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076c4:	e058      	b.n	8007778 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076c6:	4b38      	ldr	r3, [pc, #224]	@ (80077a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	099b      	lsrs	r3, r3, #6
 80076cc:	2200      	movs	r2, #0
 80076ce:	4618      	mov	r0, r3
 80076d0:	4611      	mov	r1, r2
 80076d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80076d6:	623b      	str	r3, [r7, #32]
 80076d8:	2300      	movs	r3, #0
 80076da:	627b      	str	r3, [r7, #36]	@ 0x24
 80076dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80076e0:	4642      	mov	r2, r8
 80076e2:	464b      	mov	r3, r9
 80076e4:	f04f 0000 	mov.w	r0, #0
 80076e8:	f04f 0100 	mov.w	r1, #0
 80076ec:	0159      	lsls	r1, r3, #5
 80076ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076f2:	0150      	lsls	r0, r2, #5
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4641      	mov	r1, r8
 80076fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80076fe:	4649      	mov	r1, r9
 8007700:	eb63 0b01 	sbc.w	fp, r3, r1
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007710:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007714:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007718:	ebb2 040a 	subs.w	r4, r2, sl
 800771c:	eb63 050b 	sbc.w	r5, r3, fp
 8007720:	f04f 0200 	mov.w	r2, #0
 8007724:	f04f 0300 	mov.w	r3, #0
 8007728:	00eb      	lsls	r3, r5, #3
 800772a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800772e:	00e2      	lsls	r2, r4, #3
 8007730:	4614      	mov	r4, r2
 8007732:	461d      	mov	r5, r3
 8007734:	4643      	mov	r3, r8
 8007736:	18e3      	adds	r3, r4, r3
 8007738:	603b      	str	r3, [r7, #0]
 800773a:	464b      	mov	r3, r9
 800773c:	eb45 0303 	adc.w	r3, r5, r3
 8007740:	607b      	str	r3, [r7, #4]
 8007742:	f04f 0200 	mov.w	r2, #0
 8007746:	f04f 0300 	mov.w	r3, #0
 800774a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800774e:	4629      	mov	r1, r5
 8007750:	028b      	lsls	r3, r1, #10
 8007752:	4621      	mov	r1, r4
 8007754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007758:	4621      	mov	r1, r4
 800775a:	028a      	lsls	r2, r1, #10
 800775c:	4610      	mov	r0, r2
 800775e:	4619      	mov	r1, r3
 8007760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007762:	2200      	movs	r2, #0
 8007764:	61bb      	str	r3, [r7, #24]
 8007766:	61fa      	str	r2, [r7, #28]
 8007768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800776c:	f7f8 ff20 	bl	80005b0 <__aeabi_uldivmod>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4613      	mov	r3, r2
 8007776:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007778:	4b0b      	ldr	r3, [pc, #44]	@ (80077a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	0c1b      	lsrs	r3, r3, #16
 800777e:	f003 0303 	and.w	r3, r3, #3
 8007782:	3301      	adds	r3, #1
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007788:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800778a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800778c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007790:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007792:	e002      	b.n	800779a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007794:	4b05      	ldr	r3, [pc, #20]	@ (80077ac <HAL_RCC_GetSysClockFreq+0x204>)
 8007796:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800779a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800779c:	4618      	mov	r0, r3
 800779e:	3750      	adds	r7, #80	@ 0x50
 80077a0:	46bd      	mov	sp, r7
 80077a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077a6:	bf00      	nop
 80077a8:	40023800 	.word	0x40023800
 80077ac:	00f42400 	.word	0x00f42400
 80077b0:	007a1200 	.word	0x007a1200

080077b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077b4:	b480      	push	{r7}
 80077b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077b8:	4b03      	ldr	r3, [pc, #12]	@ (80077c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80077ba:	681b      	ldr	r3, [r3, #0]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	2000000c 	.word	0x2000000c

080077cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077d0:	f7ff fff0 	bl	80077b4 <HAL_RCC_GetHCLKFreq>
 80077d4:	4602      	mov	r2, r0
 80077d6:	4b05      	ldr	r3, [pc, #20]	@ (80077ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	0a9b      	lsrs	r3, r3, #10
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	4903      	ldr	r1, [pc, #12]	@ (80077f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077e2:	5ccb      	ldrb	r3, [r1, r3]
 80077e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	40023800 	.word	0x40023800
 80077f0:	0800ee70 	.word	0x0800ee70

080077f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077f8:	f7ff ffdc 	bl	80077b4 <HAL_RCC_GetHCLKFreq>
 80077fc:	4602      	mov	r2, r0
 80077fe:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	0b5b      	lsrs	r3, r3, #13
 8007804:	f003 0307 	and.w	r3, r3, #7
 8007808:	4903      	ldr	r1, [pc, #12]	@ (8007818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800780a:	5ccb      	ldrb	r3, [r1, r3]
 800780c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007810:	4618      	mov	r0, r3
 8007812:	bd80      	pop	{r7, pc}
 8007814:	40023800 	.word	0x40023800
 8007818:	0800ee70 	.word	0x0800ee70

0800781c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d012      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007844:	4b69      	ldr	r3, [pc, #420]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	4a68      	ldr	r2, [pc, #416]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800784a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800784e:	6093      	str	r3, [r2, #8]
 8007850:	4b66      	ldr	r3, [pc, #408]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007858:	4964      	ldr	r1, [pc, #400]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800785a:	4313      	orrs	r3, r2
 800785c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007866:	2301      	movs	r3, #1
 8007868:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d017      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007876:	4b5d      	ldr	r3, [pc, #372]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800787c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007884:	4959      	ldr	r1, [pc, #356]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007886:	4313      	orrs	r3, r2
 8007888:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007890:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007894:	d101      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007896:	2301      	movs	r3, #1
 8007898:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80078a2:	2301      	movs	r3, #1
 80078a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d017      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80078b2:	4b4e      	ldr	r3, [pc, #312]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c0:	494a      	ldr	r1, [pc, #296]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078d0:	d101      	bne.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80078d2:	2301      	movs	r3, #1
 80078d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80078de:	2301      	movs	r3, #1
 80078e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80078ee:	2301      	movs	r3, #1
 80078f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 808b 	beq.w	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007900:	4b3a      	ldr	r3, [pc, #232]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007904:	4a39      	ldr	r2, [pc, #228]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007906:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800790a:	6413      	str	r3, [r2, #64]	@ 0x40
 800790c:	4b37      	ldr	r3, [pc, #220]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800790e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007914:	60bb      	str	r3, [r7, #8]
 8007916:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007918:	4b35      	ldr	r3, [pc, #212]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a34      	ldr	r2, [pc, #208]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800791e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007924:	f7fc f920 	bl	8003b68 <HAL_GetTick>
 8007928:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800792a:	e008      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800792c:	f7fc f91c 	bl	8003b68 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	2b64      	cmp	r3, #100	@ 0x64
 8007938:	d901      	bls.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800793a:	2303      	movs	r3, #3
 800793c:	e38f      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800793e:	4b2c      	ldr	r3, [pc, #176]	@ (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f0      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800794a:	4b28      	ldr	r3, [pc, #160]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800794c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800794e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007952:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d035      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	429a      	cmp	r2, r3
 8007966:	d02e      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007968:	4b20      	ldr	r3, [pc, #128]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800796a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007970:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007972:	4b1e      	ldr	r3, [pc, #120]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007976:	4a1d      	ldr	r2, [pc, #116]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800797c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800797e:	4b1b      	ldr	r3, [pc, #108]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007982:	4a1a      	ldr	r2, [pc, #104]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007988:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800798a:	4a18      	ldr	r2, [pc, #96]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007990:	4b16      	ldr	r3, [pc, #88]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b01      	cmp	r3, #1
 800799a:	d114      	bne.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799c:	f7fc f8e4 	bl	8003b68 <HAL_GetTick>
 80079a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a2:	e00a      	b.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079a4:	f7fc f8e0 	bl	8003b68 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d901      	bls.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e351      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ba:	4b0c      	ldr	r3, [pc, #48]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0ee      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079d2:	d111      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80079d4:	4b05      	ldr	r3, [pc, #20]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80079e0:	4b04      	ldr	r3, [pc, #16]	@ (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079e2:	400b      	ands	r3, r1
 80079e4:	4901      	ldr	r1, [pc, #4]	@ (80079ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	608b      	str	r3, [r1, #8]
 80079ea:	e00b      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80079ec:	40023800 	.word	0x40023800
 80079f0:	40007000 	.word	0x40007000
 80079f4:	0ffffcff 	.word	0x0ffffcff
 80079f8:	4bac      	ldr	r3, [pc, #688]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	4aab      	ldr	r2, [pc, #684]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80079fe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007a02:	6093      	str	r3, [r2, #8]
 8007a04:	4ba9      	ldr	r3, [pc, #676]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a10:	49a6      	ldr	r1, [pc, #664]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0310 	and.w	r3, r3, #16
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d010      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a22:	4ba2      	ldr	r3, [pc, #648]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a28:	4aa0      	ldr	r2, [pc, #640]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007a32:	4b9e      	ldr	r3, [pc, #632]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a34:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3c:	499b      	ldr	r1, [pc, #620]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a50:	4b96      	ldr	r3, [pc, #600]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a56:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a5e:	4993      	ldr	r1, [pc, #588]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a72:	4b8e      	ldr	r3, [pc, #568]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a80:	498a      	ldr	r1, [pc, #552]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00a      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a94:	4b85      	ldr	r3, [pc, #532]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007aa2:	4982      	ldr	r1, [pc, #520]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00a      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ab6:	4b7d      	ldr	r3, [pc, #500]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007abc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac4:	4979      	ldr	r1, [pc, #484]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ad8:	4b74      	ldr	r3, [pc, #464]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ade:	f023 0203 	bic.w	r2, r3, #3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae6:	4971      	ldr	r1, [pc, #452]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007afa:	4b6c      	ldr	r3, [pc, #432]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b00:	f023 020c 	bic.w	r2, r3, #12
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b08:	4968      	ldr	r1, [pc, #416]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007b1c:	4b63      	ldr	r3, [pc, #396]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b22:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b2a:	4960      	ldr	r1, [pc, #384]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b44:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b4c:	4957      	ldr	r1, [pc, #348]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007b60:	4b52      	ldr	r3, [pc, #328]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b6e:	494f      	ldr	r1, [pc, #316]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007b82:	4b4a      	ldr	r3, [pc, #296]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b88:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b90:	4946      	ldr	r1, [pc, #280]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007ba4:	4b41      	ldr	r3, [pc, #260]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007baa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bb2:	493e      	ldr	r1, [pc, #248]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007bc6:	4b39      	ldr	r3, [pc, #228]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bcc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bd4:	4935      	ldr	r1, [pc, #212]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00a      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007be8:	4b30      	ldr	r3, [pc, #192]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bf6:	492d      	ldr	r1, [pc, #180]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d011      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c0a:	4b28      	ldr	r3, [pc, #160]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c10:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c18:	4924      	ldr	r1, [pc, #144]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c28:	d101      	bne.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0308 	and.w	r3, r3, #8
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c4a:	4b18      	ldr	r3, [pc, #96]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c50:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c58:	4914      	ldr	r1, [pc, #80]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00b      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c72:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c7c:	490b      	ldr	r1, [pc, #44]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00f      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007c90:	4b06      	ldr	r3, [pc, #24]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c96:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ca0:	4902      	ldr	r1, [pc, #8]	@ (8007cac <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007ca8:	e002      	b.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007caa:	bf00      	nop
 8007cac:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00b      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cbc:	4b8a      	ldr	r3, [pc, #552]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ccc:	4986      	ldr	r1, [pc, #536]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00b      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007ce0:	4b81      	ldr	r3, [pc, #516]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ce6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cf0:	497d      	ldr	r1, [pc, #500]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d006      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f000 80d6 	beq.w	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d0c:	4b76      	ldr	r3, [pc, #472]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a75      	ldr	r2, [pc, #468]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d18:	f7fb ff26 	bl	8003b68 <HAL_GetTick>
 8007d1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d1e:	e008      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d20:	f7fb ff22 	bl	8003b68 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b64      	cmp	r3, #100	@ 0x64
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e195      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d32:	4b6d      	ldr	r3, [pc, #436]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1f0      	bne.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d021      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d11d      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d52:	4b65      	ldr	r3, [pc, #404]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d58:	0c1b      	lsrs	r3, r3, #16
 8007d5a:	f003 0303 	and.w	r3, r3, #3
 8007d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d60:	4b61      	ldr	r3, [pc, #388]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d66:	0e1b      	lsrs	r3, r3, #24
 8007d68:	f003 030f 	and.w	r3, r3, #15
 8007d6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	019a      	lsls	r2, r3, #6
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	041b      	lsls	r3, r3, #16
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	061b      	lsls	r3, r3, #24
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	071b      	lsls	r3, r3, #28
 8007d86:	4958      	ldr	r1, [pc, #352]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d004      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007da2:	d00a      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d02e      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007db8:	d129      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007dba:	4b4b      	ldr	r3, [pc, #300]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dc0:	0c1b      	lsrs	r3, r3, #16
 8007dc2:	f003 0303 	and.w	r3, r3, #3
 8007dc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007dc8:	4b47      	ldr	r3, [pc, #284]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dce:	0f1b      	lsrs	r3, r3, #28
 8007dd0:	f003 0307 	and.w	r3, r3, #7
 8007dd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	019a      	lsls	r2, r3, #6
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	041b      	lsls	r3, r3, #16
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	061b      	lsls	r3, r3, #24
 8007de8:	431a      	orrs	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	071b      	lsls	r3, r3, #28
 8007dee:	493e      	ldr	r1, [pc, #248]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007df6:	4b3c      	ldr	r3, [pc, #240]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dfc:	f023 021f 	bic.w	r2, r3, #31
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e04:	3b01      	subs	r3, #1
 8007e06:	4938      	ldr	r1, [pc, #224]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d01d      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e1a:	4b33      	ldr	r3, [pc, #204]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e20:	0e1b      	lsrs	r3, r3, #24
 8007e22:	f003 030f 	and.w	r3, r3, #15
 8007e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e28:	4b2f      	ldr	r3, [pc, #188]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e2e:	0f1b      	lsrs	r3, r3, #28
 8007e30:	f003 0307 	and.w	r3, r3, #7
 8007e34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	019a      	lsls	r2, r3, #6
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	431a      	orrs	r2, r3
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	061b      	lsls	r3, r3, #24
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	071b      	lsls	r3, r3, #28
 8007e4e:	4926      	ldr	r1, [pc, #152]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d011      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	019a      	lsls	r2, r3, #6
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	041b      	lsls	r3, r3, #16
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	061b      	lsls	r3, r3, #24
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	071b      	lsls	r3, r3, #28
 8007e7e:	491a      	ldr	r1, [pc, #104]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007e86:	4b18      	ldr	r3, [pc, #96]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a17      	ldr	r2, [pc, #92]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e92:	f7fb fe69 	bl	8003b68 <HAL_GetTick>
 8007e96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007e98:	e008      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e9a:	f7fb fe65 	bl	8003b68 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b64      	cmp	r3, #100	@ 0x64
 8007ea6:	d901      	bls.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e0d8      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007eac:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f0      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	f040 80ce 	bne.w	800805c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ec0:	4b09      	ldr	r3, [pc, #36]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a08      	ldr	r2, [pc, #32]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ecc:	f7fb fe4c 	bl	8003b68 <HAL_GetTick>
 8007ed0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ed2:	e00b      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ed4:	f7fb fe48 	bl	8003b68 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b64      	cmp	r3, #100	@ 0x64
 8007ee0:	d904      	bls.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e0bb      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007ee6:	bf00      	nop
 8007ee8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007eec:	4b5e      	ldr	r3, [pc, #376]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ef8:	d0ec      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d02e      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d12a      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f22:	4b51      	ldr	r3, [pc, #324]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f28:	0c1b      	lsrs	r3, r3, #16
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f30:	4b4d      	ldr	r3, [pc, #308]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f36:	0f1b      	lsrs	r3, r3, #28
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	019a      	lsls	r2, r3, #6
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	041b      	lsls	r3, r3, #16
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	061b      	lsls	r3, r3, #24
 8007f50:	431a      	orrs	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	071b      	lsls	r3, r3, #28
 8007f56:	4944      	ldr	r1, [pc, #272]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f5e:	4b42      	ldr	r3, [pc, #264]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f64:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	021b      	lsls	r3, r3, #8
 8007f70:	493d      	ldr	r1, [pc, #244]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d022      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007f88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f8c:	d11d      	bne.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007f8e:	4b36      	ldr	r3, [pc, #216]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f94:	0e1b      	lsrs	r3, r3, #24
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f9c:	4b32      	ldr	r3, [pc, #200]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fa2:	0f1b      	lsrs	r3, r3, #28
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	019a      	lsls	r2, r3, #6
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1b      	ldr	r3, [r3, #32]
 8007fb4:	041b      	lsls	r3, r3, #16
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	061b      	lsls	r3, r3, #24
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	071b      	lsls	r3, r3, #28
 8007fc2:	4929      	ldr	r1, [pc, #164]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d028      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fd6:	4b24      	ldr	r3, [pc, #144]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fdc:	0e1b      	lsrs	r3, r3, #24
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007fe4:	4b20      	ldr	r3, [pc, #128]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fea:	0c1b      	lsrs	r3, r3, #16
 8007fec:	f003 0303 	and.w	r3, r3, #3
 8007ff0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	019a      	lsls	r2, r3, #6
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	041b      	lsls	r3, r3, #16
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	061b      	lsls	r3, r3, #24
 8008002:	431a      	orrs	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	071b      	lsls	r3, r3, #28
 800800a:	4917      	ldr	r1, [pc, #92]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800800c:	4313      	orrs	r3, r2
 800800e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008012:	4b15      	ldr	r3, [pc, #84]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008018:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008020:	4911      	ldr	r1, [pc, #68]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008022:	4313      	orrs	r3, r2
 8008024:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008028:	4b0f      	ldr	r3, [pc, #60]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a0e      	ldr	r2, [pc, #56]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800802e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008034:	f7fb fd98 	bl	8003b68 <HAL_GetTick>
 8008038:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800803a:	e008      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800803c:	f7fb fd94 	bl	8003b68 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b64      	cmp	r3, #100	@ 0x64
 8008048:	d901      	bls.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e007      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800804e:	4b06      	ldr	r3, [pc, #24]	@ (8008068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800805a:	d1ef      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3720      	adds	r7, #32
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	40023800 	.word	0x40023800

0800806c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e049      	b.n	8008112 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d106      	bne.n	8008098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7fb f954 	bl	8003340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4619      	mov	r1, r3
 80080aa:	4610      	mov	r0, r2
 80080ac:	f000 fd5e 	bl	8008b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b01      	cmp	r3, #1
 800812e:	d001      	beq.n	8008134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e054      	b.n	80081de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2202      	movs	r2, #2
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f042 0201 	orr.w	r2, r2, #1
 800814a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a26      	ldr	r2, [pc, #152]	@ (80081ec <HAL_TIM_Base_Start_IT+0xd0>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d022      	beq.n	800819c <HAL_TIM_Base_Start_IT+0x80>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800815e:	d01d      	beq.n	800819c <HAL_TIM_Base_Start_IT+0x80>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a22      	ldr	r2, [pc, #136]	@ (80081f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d018      	beq.n	800819c <HAL_TIM_Base_Start_IT+0x80>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a21      	ldr	r2, [pc, #132]	@ (80081f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d013      	beq.n	800819c <HAL_TIM_Base_Start_IT+0x80>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a1f      	ldr	r2, [pc, #124]	@ (80081f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d00e      	beq.n	800819c <HAL_TIM_Base_Start_IT+0x80>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a1e      	ldr	r2, [pc, #120]	@ (80081fc <HAL_TIM_Base_Start_IT+0xe0>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d009      	beq.n	800819c <HAL_TIM_Base_Start_IT+0x80>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a1c      	ldr	r2, [pc, #112]	@ (8008200 <HAL_TIM_Base_Start_IT+0xe4>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d004      	beq.n	800819c <HAL_TIM_Base_Start_IT+0x80>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a1b      	ldr	r2, [pc, #108]	@ (8008204 <HAL_TIM_Base_Start_IT+0xe8>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d115      	bne.n	80081c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689a      	ldr	r2, [r3, #8]
 80081a2:	4b19      	ldr	r3, [pc, #100]	@ (8008208 <HAL_TIM_Base_Start_IT+0xec>)
 80081a4:	4013      	ands	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b06      	cmp	r3, #6
 80081ac:	d015      	beq.n	80081da <HAL_TIM_Base_Start_IT+0xbe>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081b4:	d011      	beq.n	80081da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f042 0201 	orr.w	r2, r2, #1
 80081c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c6:	e008      	b.n	80081da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0201 	orr.w	r2, r2, #1
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	e000      	b.n	80081dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	40010000 	.word	0x40010000
 80081f0:	40000400 	.word	0x40000400
 80081f4:	40000800 	.word	0x40000800
 80081f8:	40000c00 	.word	0x40000c00
 80081fc:	40010400 	.word	0x40010400
 8008200:	40014000 	.word	0x40014000
 8008204:	40001800 	.word	0x40001800
 8008208:	00010007 	.word	0x00010007

0800820c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0201 	bic.w	r2, r2, #1
 8008222:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6a1a      	ldr	r2, [r3, #32]
 800822a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800822e:	4013      	ands	r3, r2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10f      	bne.n	8008254 <HAL_TIM_Base_Stop_IT+0x48>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6a1a      	ldr	r2, [r3, #32]
 800823a:	f240 4344 	movw	r3, #1092	@ 0x444
 800823e:	4013      	ands	r3, r2
 8008240:	2b00      	cmp	r3, #0
 8008242:	d107      	bne.n	8008254 <HAL_TIM_Base_Stop_IT+0x48>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 0201 	bic.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e049      	b.n	8008310 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	d106      	bne.n	8008296 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f841 	bl	8008318 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2202      	movs	r2, #2
 800829a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3304      	adds	r3, #4
 80082a6:	4619      	mov	r1, r3
 80082a8:	4610      	mov	r0, r2
 80082aa:	f000 fc5f 	bl	8008b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d104      	bne.n	800834a <HAL_TIM_IC_Start_IT+0x1e>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008346:	b2db      	uxtb	r3, r3
 8008348:	e023      	b.n	8008392 <HAL_TIM_IC_Start_IT+0x66>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b04      	cmp	r3, #4
 800834e:	d104      	bne.n	800835a <HAL_TIM_IC_Start_IT+0x2e>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008356:	b2db      	uxtb	r3, r3
 8008358:	e01b      	b.n	8008392 <HAL_TIM_IC_Start_IT+0x66>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b08      	cmp	r3, #8
 800835e:	d104      	bne.n	800836a <HAL_TIM_IC_Start_IT+0x3e>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008366:	b2db      	uxtb	r3, r3
 8008368:	e013      	b.n	8008392 <HAL_TIM_IC_Start_IT+0x66>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b0c      	cmp	r3, #12
 800836e:	d104      	bne.n	800837a <HAL_TIM_IC_Start_IT+0x4e>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008376:	b2db      	uxtb	r3, r3
 8008378:	e00b      	b.n	8008392 <HAL_TIM_IC_Start_IT+0x66>
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b10      	cmp	r3, #16
 800837e:	d104      	bne.n	800838a <HAL_TIM_IC_Start_IT+0x5e>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008386:	b2db      	uxtb	r3, r3
 8008388:	e003      	b.n	8008392 <HAL_TIM_IC_Start_IT+0x66>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008390:	b2db      	uxtb	r3, r3
 8008392:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d104      	bne.n	80083a4 <HAL_TIM_IC_Start_IT+0x78>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	e013      	b.n	80083cc <HAL_TIM_IC_Start_IT+0xa0>
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d104      	bne.n	80083b4 <HAL_TIM_IC_Start_IT+0x88>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	e00b      	b.n	80083cc <HAL_TIM_IC_Start_IT+0xa0>
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b08      	cmp	r3, #8
 80083b8:	d104      	bne.n	80083c4 <HAL_TIM_IC_Start_IT+0x98>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	e003      	b.n	80083cc <HAL_TIM_IC_Start_IT+0xa0>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d102      	bne.n	80083da <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80083d4:	7b7b      	ldrb	r3, [r7, #13]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d001      	beq.n	80083de <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e0e2      	b.n	80085a4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d104      	bne.n	80083ee <HAL_TIM_IC_Start_IT+0xc2>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083ec:	e023      	b.n	8008436 <HAL_TIM_IC_Start_IT+0x10a>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d104      	bne.n	80083fe <HAL_TIM_IC_Start_IT+0xd2>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083fc:	e01b      	b.n	8008436 <HAL_TIM_IC_Start_IT+0x10a>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b08      	cmp	r3, #8
 8008402:	d104      	bne.n	800840e <HAL_TIM_IC_Start_IT+0xe2>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800840c:	e013      	b.n	8008436 <HAL_TIM_IC_Start_IT+0x10a>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b0c      	cmp	r3, #12
 8008412:	d104      	bne.n	800841e <HAL_TIM_IC_Start_IT+0xf2>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800841c:	e00b      	b.n	8008436 <HAL_TIM_IC_Start_IT+0x10a>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b10      	cmp	r3, #16
 8008422:	d104      	bne.n	800842e <HAL_TIM_IC_Start_IT+0x102>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800842c:	e003      	b.n	8008436 <HAL_TIM_IC_Start_IT+0x10a>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2202      	movs	r2, #2
 8008432:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d104      	bne.n	8008446 <HAL_TIM_IC_Start_IT+0x11a>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008444:	e013      	b.n	800846e <HAL_TIM_IC_Start_IT+0x142>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b04      	cmp	r3, #4
 800844a:	d104      	bne.n	8008456 <HAL_TIM_IC_Start_IT+0x12a>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008454:	e00b      	b.n	800846e <HAL_TIM_IC_Start_IT+0x142>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b08      	cmp	r3, #8
 800845a:	d104      	bne.n	8008466 <HAL_TIM_IC_Start_IT+0x13a>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008464:	e003      	b.n	800846e <HAL_TIM_IC_Start_IT+0x142>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2202      	movs	r2, #2
 800846a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b0c      	cmp	r3, #12
 8008472:	d841      	bhi.n	80084f8 <HAL_TIM_IC_Start_IT+0x1cc>
 8008474:	a201      	add	r2, pc, #4	@ (adr r2, 800847c <HAL_TIM_IC_Start_IT+0x150>)
 8008476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847a:	bf00      	nop
 800847c:	080084b1 	.word	0x080084b1
 8008480:	080084f9 	.word	0x080084f9
 8008484:	080084f9 	.word	0x080084f9
 8008488:	080084f9 	.word	0x080084f9
 800848c:	080084c3 	.word	0x080084c3
 8008490:	080084f9 	.word	0x080084f9
 8008494:	080084f9 	.word	0x080084f9
 8008498:	080084f9 	.word	0x080084f9
 800849c:	080084d5 	.word	0x080084d5
 80084a0:	080084f9 	.word	0x080084f9
 80084a4:	080084f9 	.word	0x080084f9
 80084a8:	080084f9 	.word	0x080084f9
 80084ac:	080084e7 	.word	0x080084e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0202 	orr.w	r2, r2, #2
 80084be:	60da      	str	r2, [r3, #12]
      break;
 80084c0:	e01d      	b.n	80084fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68da      	ldr	r2, [r3, #12]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 0204 	orr.w	r2, r2, #4
 80084d0:	60da      	str	r2, [r3, #12]
      break;
 80084d2:	e014      	b.n	80084fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68da      	ldr	r2, [r3, #12]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f042 0208 	orr.w	r2, r2, #8
 80084e2:	60da      	str	r2, [r3, #12]
      break;
 80084e4:	e00b      	b.n	80084fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f042 0210 	orr.w	r2, r2, #16
 80084f4:	60da      	str	r2, [r3, #12]
      break;
 80084f6:	e002      	b.n	80084fe <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	73fb      	strb	r3, [r7, #15]
      break;
 80084fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d14e      	bne.n	80085a2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2201      	movs	r2, #1
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fd9d 	bl	800904c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a25      	ldr	r2, [pc, #148]	@ (80085ac <HAL_TIM_IC_Start_IT+0x280>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d022      	beq.n	8008562 <HAL_TIM_IC_Start_IT+0x236>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008524:	d01d      	beq.n	8008562 <HAL_TIM_IC_Start_IT+0x236>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a21      	ldr	r2, [pc, #132]	@ (80085b0 <HAL_TIM_IC_Start_IT+0x284>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d018      	beq.n	8008562 <HAL_TIM_IC_Start_IT+0x236>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a1f      	ldr	r2, [pc, #124]	@ (80085b4 <HAL_TIM_IC_Start_IT+0x288>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d013      	beq.n	8008562 <HAL_TIM_IC_Start_IT+0x236>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a1e      	ldr	r2, [pc, #120]	@ (80085b8 <HAL_TIM_IC_Start_IT+0x28c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d00e      	beq.n	8008562 <HAL_TIM_IC_Start_IT+0x236>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a1c      	ldr	r2, [pc, #112]	@ (80085bc <HAL_TIM_IC_Start_IT+0x290>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d009      	beq.n	8008562 <HAL_TIM_IC_Start_IT+0x236>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a1b      	ldr	r2, [pc, #108]	@ (80085c0 <HAL_TIM_IC_Start_IT+0x294>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d004      	beq.n	8008562 <HAL_TIM_IC_Start_IT+0x236>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a19      	ldr	r2, [pc, #100]	@ (80085c4 <HAL_TIM_IC_Start_IT+0x298>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d115      	bne.n	800858e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	4b17      	ldr	r3, [pc, #92]	@ (80085c8 <HAL_TIM_IC_Start_IT+0x29c>)
 800856a:	4013      	ands	r3, r2
 800856c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2b06      	cmp	r3, #6
 8008572:	d015      	beq.n	80085a0 <HAL_TIM_IC_Start_IT+0x274>
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800857a:	d011      	beq.n	80085a0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 0201 	orr.w	r2, r2, #1
 800858a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800858c:	e008      	b.n	80085a0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f042 0201 	orr.w	r2, r2, #1
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	e000      	b.n	80085a2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	40010000 	.word	0x40010000
 80085b0:	40000400 	.word	0x40000400
 80085b4:	40000800 	.word	0x40000800
 80085b8:	40000c00 	.word	0x40000c00
 80085bc:	40010400 	.word	0x40010400
 80085c0:	40014000 	.word	0x40014000
 80085c4:	40001800 	.word	0x40001800
 80085c8:	00010007 	.word	0x00010007

080085cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d020      	beq.n	8008630 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d01b      	beq.n	8008630 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f06f 0202 	mvn.w	r2, #2
 8008600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	f003 0303 	and.w	r3, r3, #3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7fb f8d8 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 800861c:	e005      	b.n	800862a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fa86 	bl	8008b30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fa8d 	bl	8008b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f003 0304 	and.w	r3, r3, #4
 8008636:	2b00      	cmp	r3, #0
 8008638:	d020      	beq.n	800867c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d01b      	beq.n	800867c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f06f 0204 	mvn.w	r2, #4
 800864c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2202      	movs	r2, #2
 8008652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7fb f8b2 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 8008668:	e005      	b.n	8008676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fa60 	bl	8008b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fa67 	bl	8008b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f003 0308 	and.w	r3, r3, #8
 8008682:	2b00      	cmp	r3, #0
 8008684:	d020      	beq.n	80086c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f003 0308 	and.w	r3, r3, #8
 800868c:	2b00      	cmp	r3, #0
 800868e:	d01b      	beq.n	80086c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f06f 0208 	mvn.w	r2, #8
 8008698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2204      	movs	r2, #4
 800869e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	69db      	ldr	r3, [r3, #28]
 80086a6:	f003 0303 	and.w	r3, r3, #3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7fb f88c 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 80086b4:	e005      	b.n	80086c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fa3a 	bl	8008b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fa41 	bl	8008b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f003 0310 	and.w	r3, r3, #16
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d020      	beq.n	8008714 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f003 0310 	and.w	r3, r3, #16
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d01b      	beq.n	8008714 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f06f 0210 	mvn.w	r2, #16
 80086e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2208      	movs	r2, #8
 80086ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7fb f866 	bl	80037cc <HAL_TIM_IC_CaptureCallback>
 8008700:	e005      	b.n	800870e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fa14 	bl	8008b30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fa1b 	bl	8008b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00c      	beq.n	8008738 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	d007      	beq.n	8008738 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f06f 0201 	mvn.w	r2, #1
 8008730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7fb f818 	bl	8003768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800873e:	2b00      	cmp	r3, #0
 8008740:	d104      	bne.n	800874c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00c      	beq.n	8008766 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800875e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fd31 	bl	80091c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00c      	beq.n	800878a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008776:	2b00      	cmp	r3, #0
 8008778:	d007      	beq.n	800878a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fd29 	bl	80091dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00c      	beq.n	80087ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	d007      	beq.n	80087ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80087a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f9d5 	bl	8008b58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f003 0320 	and.w	r3, r3, #32
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00c      	beq.n	80087d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f003 0320 	and.w	r3, r3, #32
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d007      	beq.n	80087d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f06f 0220 	mvn.w	r2, #32
 80087ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fcf1 	bl	80091b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e088      	b.n	800890a <HAL_TIM_IC_ConfigChannel+0x130>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d11b      	bne.n	800883e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008816:	f000 fa55 	bl	8008cc4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	699a      	ldr	r2, [r3, #24]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 020c 	bic.w	r2, r2, #12
 8008828:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6999      	ldr	r1, [r3, #24]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	430a      	orrs	r2, r1
 800883a:	619a      	str	r2, [r3, #24]
 800883c:	e060      	b.n	8008900 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b04      	cmp	r3, #4
 8008842:	d11c      	bne.n	800887e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008854:	f000 fad9 	bl	8008e0a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	699a      	ldr	r2, [r3, #24]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008866:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6999      	ldr	r1, [r3, #24]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	021a      	lsls	r2, r3, #8
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	619a      	str	r2, [r3, #24]
 800887c:	e040      	b.n	8008900 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b08      	cmp	r3, #8
 8008882:	d11b      	bne.n	80088bc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008894:	f000 fb26 	bl	8008ee4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	69da      	ldr	r2, [r3, #28]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 020c 	bic.w	r2, r2, #12
 80088a6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	69d9      	ldr	r1, [r3, #28]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	689a      	ldr	r2, [r3, #8]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	61da      	str	r2, [r3, #28]
 80088ba:	e021      	b.n	8008900 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b0c      	cmp	r3, #12
 80088c0:	d11c      	bne.n	80088fc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80088d2:	f000 fb43 	bl	8008f5c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69da      	ldr	r2, [r3, #28]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80088e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69d9      	ldr	r1, [r3, #28]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	021a      	lsls	r2, r3, #8
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	61da      	str	r2, [r3, #28]
 80088fa:	e001      	b.n	8008900 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008908:	7dfb      	ldrb	r3, [r7, #23]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800891e:	2300      	movs	r3, #0
 8008920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008928:	2b01      	cmp	r3, #1
 800892a:	d101      	bne.n	8008930 <HAL_TIM_ConfigClockSource+0x1c>
 800892c:	2302      	movs	r3, #2
 800892e:	e0b4      	b.n	8008a9a <HAL_TIM_ConfigClockSource+0x186>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	4b56      	ldr	r3, [pc, #344]	@ (8008aa4 <HAL_TIM_ConfigClockSource+0x190>)
 800894c:	4013      	ands	r3, r2
 800894e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008968:	d03e      	beq.n	80089e8 <HAL_TIM_ConfigClockSource+0xd4>
 800896a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800896e:	f200 8087 	bhi.w	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008976:	f000 8086 	beq.w	8008a86 <HAL_TIM_ConfigClockSource+0x172>
 800897a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800897e:	d87f      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008980:	2b70      	cmp	r3, #112	@ 0x70
 8008982:	d01a      	beq.n	80089ba <HAL_TIM_ConfigClockSource+0xa6>
 8008984:	2b70      	cmp	r3, #112	@ 0x70
 8008986:	d87b      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008988:	2b60      	cmp	r3, #96	@ 0x60
 800898a:	d050      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0x11a>
 800898c:	2b60      	cmp	r3, #96	@ 0x60
 800898e:	d877      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008990:	2b50      	cmp	r3, #80	@ 0x50
 8008992:	d03c      	beq.n	8008a0e <HAL_TIM_ConfigClockSource+0xfa>
 8008994:	2b50      	cmp	r3, #80	@ 0x50
 8008996:	d873      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 8008998:	2b40      	cmp	r3, #64	@ 0x40
 800899a:	d058      	beq.n	8008a4e <HAL_TIM_ConfigClockSource+0x13a>
 800899c:	2b40      	cmp	r3, #64	@ 0x40
 800899e:	d86f      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 80089a0:	2b30      	cmp	r3, #48	@ 0x30
 80089a2:	d064      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x15a>
 80089a4:	2b30      	cmp	r3, #48	@ 0x30
 80089a6:	d86b      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d060      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x15a>
 80089ac:	2b20      	cmp	r3, #32
 80089ae:	d867      	bhi.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d05c      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x15a>
 80089b4:	2b10      	cmp	r3, #16
 80089b6:	d05a      	beq.n	8008a6e <HAL_TIM_ConfigClockSource+0x15a>
 80089b8:	e062      	b.n	8008a80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089ca:	f000 fb1f 	bl	800900c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80089dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	609a      	str	r2, [r3, #8]
      break;
 80089e6:	e04f      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089f8:	f000 fb08 	bl	800900c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689a      	ldr	r2, [r3, #8]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a0a:	609a      	str	r2, [r3, #8]
      break;
 8008a0c:	e03c      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f000 f9c6 	bl	8008dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2150      	movs	r1, #80	@ 0x50
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 fad5 	bl	8008fd6 <TIM_ITRx_SetConfig>
      break;
 8008a2c:	e02c      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f000 fa22 	bl	8008e84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2160      	movs	r1, #96	@ 0x60
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 fac5 	bl	8008fd6 <TIM_ITRx_SetConfig>
      break;
 8008a4c:	e01c      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f000 f9a6 	bl	8008dac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2140      	movs	r1, #64	@ 0x40
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fab5 	bl	8008fd6 <TIM_ITRx_SetConfig>
      break;
 8008a6c:	e00c      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4619      	mov	r1, r3
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f000 faac 	bl	8008fd6 <TIM_ITRx_SetConfig>
      break;
 8008a7e:	e003      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	73fb      	strb	r3, [r7, #15]
      break;
 8008a84:	e000      	b.n	8008a88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	fffeff88 	.word	0xfffeff88

08008aa8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b0c      	cmp	r3, #12
 8008aba:	d831      	bhi.n	8008b20 <HAL_TIM_ReadCapturedValue+0x78>
 8008abc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ac4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008af9 	.word	0x08008af9
 8008ac8:	08008b21 	.word	0x08008b21
 8008acc:	08008b21 	.word	0x08008b21
 8008ad0:	08008b21 	.word	0x08008b21
 8008ad4:	08008b03 	.word	0x08008b03
 8008ad8:	08008b21 	.word	0x08008b21
 8008adc:	08008b21 	.word	0x08008b21
 8008ae0:	08008b21 	.word	0x08008b21
 8008ae4:	08008b0d 	.word	0x08008b0d
 8008ae8:	08008b21 	.word	0x08008b21
 8008aec:	08008b21 	.word	0x08008b21
 8008af0:	08008b21 	.word	0x08008b21
 8008af4:	08008b17 	.word	0x08008b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008afe:	60fb      	str	r3, [r7, #12]

      break;
 8008b00:	e00f      	b.n	8008b22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b08:	60fb      	str	r3, [r7, #12]

      break;
 8008b0a:	e00a      	b.n	8008b22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b12:	60fb      	str	r3, [r7, #12]

      break;
 8008b14:	e005      	b.n	8008b22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b1c:	60fb      	str	r3, [r7, #12]

      break;
 8008b1e:	e000      	b.n	8008b22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008b20:	bf00      	nop
  }

  return tmpreg;
 8008b22:	68fb      	ldr	r3, [r7, #12]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a46      	ldr	r2, [pc, #280]	@ (8008c98 <TIM_Base_SetConfig+0x12c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d013      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b8a:	d00f      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a43      	ldr	r2, [pc, #268]	@ (8008c9c <TIM_Base_SetConfig+0x130>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d00b      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a42      	ldr	r2, [pc, #264]	@ (8008ca0 <TIM_Base_SetConfig+0x134>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d007      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a41      	ldr	r2, [pc, #260]	@ (8008ca4 <TIM_Base_SetConfig+0x138>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d003      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a40      	ldr	r2, [pc, #256]	@ (8008ca8 <TIM_Base_SetConfig+0x13c>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d108      	bne.n	8008bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a35      	ldr	r2, [pc, #212]	@ (8008c98 <TIM_Base_SetConfig+0x12c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d02b      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bcc:	d027      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a32      	ldr	r2, [pc, #200]	@ (8008c9c <TIM_Base_SetConfig+0x130>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d023      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a31      	ldr	r2, [pc, #196]	@ (8008ca0 <TIM_Base_SetConfig+0x134>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d01f      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a30      	ldr	r2, [pc, #192]	@ (8008ca4 <TIM_Base_SetConfig+0x138>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d01b      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a2f      	ldr	r2, [pc, #188]	@ (8008ca8 <TIM_Base_SetConfig+0x13c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d017      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8008cac <TIM_Base_SetConfig+0x140>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d013      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8008cb0 <TIM_Base_SetConfig+0x144>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d00f      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a2c      	ldr	r2, [pc, #176]	@ (8008cb4 <TIM_Base_SetConfig+0x148>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d00b      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a2b      	ldr	r2, [pc, #172]	@ (8008cb8 <TIM_Base_SetConfig+0x14c>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d007      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a2a      	ldr	r2, [pc, #168]	@ (8008cbc <TIM_Base_SetConfig+0x150>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d003      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a29      	ldr	r2, [pc, #164]	@ (8008cc0 <TIM_Base_SetConfig+0x154>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d108      	bne.n	8008c30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a10      	ldr	r2, [pc, #64]	@ (8008c98 <TIM_Base_SetConfig+0x12c>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d003      	beq.n	8008c64 <TIM_Base_SetConfig+0xf8>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a12      	ldr	r2, [pc, #72]	@ (8008ca8 <TIM_Base_SetConfig+0x13c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d103      	bne.n	8008c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	691a      	ldr	r2, [r3, #16]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d105      	bne.n	8008c8a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f023 0201 	bic.w	r2, r3, #1
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	611a      	str	r2, [r3, #16]
  }
}
 8008c8a:	bf00      	nop
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	40010000 	.word	0x40010000
 8008c9c:	40000400 	.word	0x40000400
 8008ca0:	40000800 	.word	0x40000800
 8008ca4:	40000c00 	.word	0x40000c00
 8008ca8:	40010400 	.word	0x40010400
 8008cac:	40014000 	.word	0x40014000
 8008cb0:	40014400 	.word	0x40014400
 8008cb4:	40014800 	.word	0x40014800
 8008cb8:	40001800 	.word	0x40001800
 8008cbc:	40001c00 	.word	0x40001c00
 8008cc0:	40002000 	.word	0x40002000

08008cc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
 8008cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	f023 0201 	bic.w	r2, r3, #1
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4a28      	ldr	r2, [pc, #160]	@ (8008d90 <TIM_TI1_SetConfig+0xcc>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d01b      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cf8:	d017      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	4a25      	ldr	r2, [pc, #148]	@ (8008d94 <TIM_TI1_SetConfig+0xd0>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d013      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4a24      	ldr	r2, [pc, #144]	@ (8008d98 <TIM_TI1_SetConfig+0xd4>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00f      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4a23      	ldr	r2, [pc, #140]	@ (8008d9c <TIM_TI1_SetConfig+0xd8>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00b      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4a22      	ldr	r2, [pc, #136]	@ (8008da0 <TIM_TI1_SetConfig+0xdc>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d007      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	4a21      	ldr	r2, [pc, #132]	@ (8008da4 <TIM_TI1_SetConfig+0xe0>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d003      	beq.n	8008d2a <TIM_TI1_SetConfig+0x66>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	4a20      	ldr	r2, [pc, #128]	@ (8008da8 <TIM_TI1_SetConfig+0xe4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d101      	bne.n	8008d2e <TIM_TI1_SetConfig+0x6a>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e000      	b.n	8008d30 <TIM_TI1_SetConfig+0x6c>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d008      	beq.n	8008d46 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f023 0303 	bic.w	r3, r3, #3
 8008d3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d3c:	697a      	ldr	r2, [r7, #20]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]
 8008d44:	e003      	b.n	8008d4e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f043 0301 	orr.w	r3, r3, #1
 8008d4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	011b      	lsls	r3, r3, #4
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f023 030a 	bic.w	r3, r3, #10
 8008d68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	f003 030a 	and.w	r3, r3, #10
 8008d70:	693a      	ldr	r2, [r7, #16]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	621a      	str	r2, [r3, #32]
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40010000 	.word	0x40010000
 8008d94:	40000400 	.word	0x40000400
 8008d98:	40000800 	.word	0x40000800
 8008d9c:	40000c00 	.word	0x40000c00
 8008da0:	40010400 	.word	0x40010400
 8008da4:	40014000 	.word	0x40014000
 8008da8:	40001800 	.word	0x40001800

08008dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	f023 0201 	bic.w	r2, r3, #1
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	011b      	lsls	r3, r3, #4
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f023 030a 	bic.w	r3, r3, #10
 8008de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	621a      	str	r2, [r3, #32]
}
 8008dfe:	bf00      	nop
 8008e00:	371c      	adds	r7, #28
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e0a:	b480      	push	{r7}
 8008e0c:	b087      	sub	sp, #28
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	60f8      	str	r0, [r7, #12]
 8008e12:	60b9      	str	r1, [r7, #8]
 8008e14:	607a      	str	r2, [r7, #4]
 8008e16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	f023 0210 	bic.w	r2, r3, #16
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	021b      	lsls	r3, r3, #8
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	031b      	lsls	r3, r3, #12
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	693a      	ldr	r2, [r7, #16]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	011b      	lsls	r3, r3, #4
 8008e62:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	621a      	str	r2, [r3, #32]
}
 8008e78:	bf00      	nop
 8008e7a:	371c      	adds	r7, #28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	f023 0210 	bic.w	r2, r3, #16
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	031b      	lsls	r3, r3, #12
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	011b      	lsls	r3, r3, #4
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	621a      	str	r2, [r3, #32]
}
 8008ed8:	bf00      	nop
 8008eda:	371c      	adds	r7, #28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	f023 0303 	bic.w	r3, r3, #3
 8008f10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	011b      	lsls	r3, r3, #4
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008f34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	021b      	lsls	r3, r3, #8
 8008f3a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	697a      	ldr	r2, [r7, #20]
 8008f4e:	621a      	str	r2, [r3, #32]
}
 8008f50:	bf00      	nop
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b087      	sub	sp, #28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
 8008f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6a1b      	ldr	r3, [r3, #32]
 8008f74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f88:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	021b      	lsls	r3, r3, #8
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f9a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	031b      	lsls	r3, r3, #12
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008fae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	031b      	lsls	r3, r3, #12
 8008fb4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	697a      	ldr	r2, [r7, #20]
 8008fc8:	621a      	str	r2, [r3, #32]
}
 8008fca:	bf00      	nop
 8008fcc:	371c      	adds	r7, #28
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b085      	sub	sp, #20
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	f043 0307 	orr.w	r3, r3, #7
 8008ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	609a      	str	r2, [r3, #8]
}
 8009000:	bf00      	nop
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	021a      	lsls	r2, r3, #8
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	431a      	orrs	r2, r3
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	4313      	orrs	r3, r2
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	4313      	orrs	r3, r2
 8009038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	609a      	str	r2, [r3, #8]
}
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	f003 031f 	and.w	r3, r3, #31
 800905e:	2201      	movs	r2, #1
 8009060:	fa02 f303 	lsl.w	r3, r2, r3
 8009064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a1a      	ldr	r2, [r3, #32]
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	43db      	mvns	r3, r3
 800906e:	401a      	ands	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a1a      	ldr	r2, [r3, #32]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f003 031f 	and.w	r3, r3, #31
 800907e:	6879      	ldr	r1, [r7, #4]
 8009080:	fa01 f303 	lsl.w	r3, r1, r3
 8009084:	431a      	orrs	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	621a      	str	r2, [r3, #32]
}
 800908a:	bf00      	nop
 800908c:	371c      	adds	r7, #28
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
	...

08009098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d101      	bne.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090ac:	2302      	movs	r3, #2
 80090ae:	e06d      	b.n	800918c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a30      	ldr	r2, [pc, #192]	@ (8009198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d004      	beq.n	80090e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a2f      	ldr	r2, [pc, #188]	@ (800919c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d108      	bne.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80090ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	4313      	orrs	r3, r2
 8009106:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a20      	ldr	r2, [pc, #128]	@ (8009198 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d022      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009122:	d01d      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a1d      	ldr	r2, [pc, #116]	@ (80091a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d018      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a1c      	ldr	r2, [pc, #112]	@ (80091a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d013      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a1a      	ldr	r2, [pc, #104]	@ (80091a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d00e      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a15      	ldr	r2, [pc, #84]	@ (800919c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d009      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a16      	ldr	r2, [pc, #88]	@ (80091ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d004      	beq.n	8009160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a15      	ldr	r2, [pc, #84]	@ (80091b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d10c      	bne.n	800917a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009166:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	4313      	orrs	r3, r2
 8009170:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	40010000 	.word	0x40010000
 800919c:	40010400 	.word	0x40010400
 80091a0:	40000400 	.word	0x40000400
 80091a4:	40000800 	.word	0x40000800
 80091a8:	40000c00 	.word	0x40000c00
 80091ac:	40014000 	.word	0x40014000
 80091b0:	40001800 	.word	0x40001800

080091b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d101      	bne.n	8009202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e040      	b.n	8009284 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d106      	bne.n	8009218 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7fa f916 	bl	8003444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2224      	movs	r2, #36	@ 0x24
 800921c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f022 0201 	bic.w	r2, r2, #1
 800922c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009232:	2b00      	cmp	r3, #0
 8009234:	d002      	beq.n	800923c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fe24 	bl	8009e84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fbbd 	bl	80099bc <UART_SetConfig>
 8009242:	4603      	mov	r3, r0
 8009244:	2b01      	cmp	r3, #1
 8009246:	d101      	bne.n	800924c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e01b      	b.n	8009284 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800925a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800926a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fea3 	bl	8009fc8 <UART_CheckIdleState>
 8009282:	4603      	mov	r3, r0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	@ 0x28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	4613      	mov	r3, r2
 8009298:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800929e:	2b20      	cmp	r3, #32
 80092a0:	d165      	bne.n	800936e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d002      	beq.n	80092ae <HAL_UART_Transmit_DMA+0x22>
 80092a8:	88fb      	ldrh	r3, [r7, #6]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e05e      	b.n	8009370 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	88fa      	ldrh	r2, [r7, #6]
 80092bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	88fa      	ldrh	r2, [r7, #6]
 80092c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2221      	movs	r2, #33	@ 0x21
 80092d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d027      	beq.n	800932e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092e2:	4a25      	ldr	r2, [pc, #148]	@ (8009378 <HAL_UART_Transmit_DMA+0xec>)
 80092e4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ea:	4a24      	ldr	r2, [pc, #144]	@ (800937c <HAL_UART_Transmit_DMA+0xf0>)
 80092ec:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092f2:	4a23      	ldr	r2, [pc, #140]	@ (8009380 <HAL_UART_Transmit_DMA+0xf4>)
 80092f4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092fa:	2200      	movs	r2, #0
 80092fc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009306:	4619      	mov	r1, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3328      	adds	r3, #40	@ 0x28
 800930e:	461a      	mov	r2, r3
 8009310:	88fb      	ldrh	r3, [r7, #6]
 8009312:	f7fb fa3d 	bl	8004790 <HAL_DMA_Start_IT>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d008      	beq.n	800932e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2210      	movs	r2, #16
 8009320:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2220      	movs	r2, #32
 8009328:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	e020      	b.n	8009370 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2240      	movs	r2, #64	@ 0x40
 8009334:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	3308      	adds	r3, #8
 800933c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	e853 3f00 	ldrex	r3, [r3]
 8009344:	613b      	str	r3, [r7, #16]
   return(result);
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800934c:	627b      	str	r3, [r7, #36]	@ 0x24
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3308      	adds	r3, #8
 8009354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009356:	623a      	str	r2, [r7, #32]
 8009358:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935a:	69f9      	ldr	r1, [r7, #28]
 800935c:	6a3a      	ldr	r2, [r7, #32]
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	61bb      	str	r3, [r7, #24]
   return(result);
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e5      	bne.n	8009336 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	e000      	b.n	8009370 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800936e:	2302      	movs	r3, #2
  }
}
 8009370:	4618      	mov	r0, r3
 8009372:	3728      	adds	r7, #40	@ 0x28
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	0800a307 	.word	0x0800a307
 800937c:	0800a39d 	.word	0x0800a39d
 8009380:	0800a3b9 	.word	0x0800a3b9

08009384 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b0ba      	sub	sp, #232	@ 0xe8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80093ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80093b2:	4013      	ands	r3, r2
 80093b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80093b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d115      	bne.n	80093ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80093c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c4:	f003 0320 	and.w	r3, r3, #32
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00f      	beq.n	80093ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093d0:	f003 0320 	and.w	r3, r3, #32
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d009      	beq.n	80093ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 82ac 	beq.w	800993a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	4798      	blx	r3
      }
      return;
 80093ea:	e2a6      	b.n	800993a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f000 8117 	beq.w	8009624 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80093f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d106      	bne.n	8009410 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009402:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009406:	4b85      	ldr	r3, [pc, #532]	@ (800961c <HAL_UART_IRQHandler+0x298>)
 8009408:	4013      	ands	r3, r2
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 810a 	beq.w	8009624 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009414:	f003 0301 	and.w	r3, r3, #1
 8009418:	2b00      	cmp	r3, #0
 800941a:	d011      	beq.n	8009440 <HAL_UART_IRQHandler+0xbc>
 800941c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2201      	movs	r2, #1
 800942e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009436:	f043 0201 	orr.w	r2, r3, #1
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009444:	f003 0302 	and.w	r3, r3, #2
 8009448:	2b00      	cmp	r3, #0
 800944a:	d011      	beq.n	8009470 <HAL_UART_IRQHandler+0xec>
 800944c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00b      	beq.n	8009470 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2202      	movs	r2, #2
 800945e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009466:	f043 0204 	orr.w	r2, r3, #4
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009474:	f003 0304 	and.w	r3, r3, #4
 8009478:	2b00      	cmp	r3, #0
 800947a:	d011      	beq.n	80094a0 <HAL_UART_IRQHandler+0x11c>
 800947c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00b      	beq.n	80094a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2204      	movs	r2, #4
 800948e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009496:	f043 0202 	orr.w	r2, r3, #2
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094a4:	f003 0308 	and.w	r3, r3, #8
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d017      	beq.n	80094dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80094ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094b0:	f003 0320 	and.w	r3, r3, #32
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d105      	bne.n	80094c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80094b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00b      	beq.n	80094dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2208      	movs	r2, #8
 80094ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094d2:	f043 0208 	orr.w	r2, r3, #8
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d012      	beq.n	800950e <HAL_UART_IRQHandler+0x18a>
 80094e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00c      	beq.n	800950e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009504:	f043 0220 	orr.w	r2, r3, #32
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 8212 	beq.w	800993e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800951a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00d      	beq.n	8009542 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800952a:	f003 0320 	and.w	r3, r3, #32
 800952e:	2b00      	cmp	r3, #0
 8009530:	d007      	beq.n	8009542 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009548:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009556:	2b40      	cmp	r3, #64	@ 0x40
 8009558:	d005      	beq.n	8009566 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800955a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800955e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009562:	2b00      	cmp	r3, #0
 8009564:	d04f      	beq.n	8009606 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fe69 	bl	800a23e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009576:	2b40      	cmp	r3, #64	@ 0x40
 8009578:	d141      	bne.n	80095fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3308      	adds	r3, #8
 8009580:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009584:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009588:	e853 3f00 	ldrex	r3, [r3]
 800958c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009590:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009598:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3308      	adds	r3, #8
 80095a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80095a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80095aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80095b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80095be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1d9      	bne.n	800957a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d013      	beq.n	80095f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095d2:	4a13      	ldr	r2, [pc, #76]	@ (8009620 <HAL_UART_IRQHandler+0x29c>)
 80095d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fb f9a8 	bl	8004930 <HAL_DMA_Abort_IT>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d017      	beq.n	8009616 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80095f0:	4610      	mov	r0, r2
 80095f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095f4:	e00f      	b.n	8009616 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f9c0 	bl	800997c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095fc:	e00b      	b.n	8009616 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f9bc 	bl	800997c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009604:	e007      	b.n	8009616 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f9b8 	bl	800997c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009614:	e193      	b.n	800993e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009616:	bf00      	nop
    return;
 8009618:	e191      	b.n	800993e <HAL_UART_IRQHandler+0x5ba>
 800961a:	bf00      	nop
 800961c:	04000120 	.word	0x04000120
 8009620:	0800a437 	.word	0x0800a437

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009628:	2b01      	cmp	r3, #1
 800962a:	f040 814c 	bne.w	80098c6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800962e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009632:	f003 0310 	and.w	r3, r3, #16
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 8145 	beq.w	80098c6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800963c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009640:	f003 0310 	and.w	r3, r3, #16
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 813e 	beq.w	80098c6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2210      	movs	r2, #16
 8009650:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800965c:	2b40      	cmp	r3, #64	@ 0x40
 800965e:	f040 80b6 	bne.w	80097ce <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800966e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 8165 	beq.w	8009942 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800967e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009682:	429a      	cmp	r2, r3
 8009684:	f080 815d 	bcs.w	8009942 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800968e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800969c:	f000 8086 	beq.w	80097ac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096ac:	e853 3f00 	ldrex	r3, [r3]
 80096b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80096b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	461a      	mov	r2, r3
 80096c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80096ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80096ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80096d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80096da:	e841 2300 	strex	r3, r2, [r1]
 80096de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80096e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1da      	bne.n	80096a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3308      	adds	r3, #8
 80096f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096f4:	e853 3f00 	ldrex	r3, [r3]
 80096f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80096fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096fc:	f023 0301 	bic.w	r3, r3, #1
 8009700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	3308      	adds	r3, #8
 800970a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800970e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009712:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009714:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009716:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009720:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e1      	bne.n	80096ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3308      	adds	r3, #8
 800972c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009736:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800973c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3308      	adds	r3, #8
 8009746:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800974a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800974c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009750:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e3      	bne.n	8009726 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2220      	movs	r2, #32
 8009762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009774:	e853 3f00 	ldrex	r3, [r3]
 8009778:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800977a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800977c:	f023 0310 	bic.w	r3, r3, #16
 8009780:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	461a      	mov	r2, r3
 800978a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800978e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009790:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009794:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800979c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1e4      	bne.n	800976c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fb f852 	bl	8004850 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2202      	movs	r2, #2
 80097b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80097be:	b29b      	uxth	r3, r3
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f8e2 	bl	8009990 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097cc:	e0b9      	b.n	8009942 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80097da:	b29b      	uxth	r3, r3
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f000 80ab 	beq.w	8009946 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80097f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 80a6 	beq.w	8009946 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800980a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800980e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800981c:	647b      	str	r3, [r7, #68]	@ 0x44
 800981e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009820:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009824:	e841 2300 	strex	r3, r2, [r1]
 8009828:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800982a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1e4      	bne.n	80097fa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	3308      	adds	r3, #8
 8009836:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983a:	e853 3f00 	ldrex	r3, [r3]
 800983e:	623b      	str	r3, [r7, #32]
   return(result);
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	f023 0301 	bic.w	r3, r3, #1
 8009846:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009854:	633a      	str	r2, [r7, #48]	@ 0x30
 8009856:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009858:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800985a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800985c:	e841 2300 	strex	r3, r2, [r1]
 8009860:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1e3      	bne.n	8009830 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2220      	movs	r2, #32
 800986c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	60fb      	str	r3, [r7, #12]
   return(result);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f023 0310 	bic.w	r3, r3, #16
 8009890:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	461a      	mov	r2, r3
 800989a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800989e:	61fb      	str	r3, [r7, #28]
 80098a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a2:	69b9      	ldr	r1, [r7, #24]
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	617b      	str	r3, [r7, #20]
   return(result);
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1e4      	bne.n	800987c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2202      	movs	r2, #2
 80098b6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f866 	bl	8009990 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098c4:	e03f      	b.n	8009946 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00e      	beq.n	80098f0 <HAL_UART_IRQHandler+0x56c>
 80098d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d008      	beq.n	80098f0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80098e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f85d 	bl	80099a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098ee:	e02d      	b.n	800994c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80098f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00e      	beq.n	800991a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80098fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009904:	2b00      	cmp	r3, #0
 8009906:	d008      	beq.n	800991a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800990c:	2b00      	cmp	r3, #0
 800990e:	d01c      	beq.n	800994a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
    }
    return;
 8009918:	e017      	b.n	800994a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800991a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800991e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009922:	2b00      	cmp	r3, #0
 8009924:	d012      	beq.n	800994c <HAL_UART_IRQHandler+0x5c8>
 8009926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800992a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00c      	beq.n	800994c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fd95 	bl	800a462 <UART_EndTransmit_IT>
    return;
 8009938:	e008      	b.n	800994c <HAL_UART_IRQHandler+0x5c8>
      return;
 800993a:	bf00      	nop
 800993c:	e006      	b.n	800994c <HAL_UART_IRQHandler+0x5c8>
    return;
 800993e:	bf00      	nop
 8009940:	e004      	b.n	800994c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009942:	bf00      	nop
 8009944:	e002      	b.n	800994c <HAL_UART_IRQHandler+0x5c8>
      return;
 8009946:	bf00      	nop
 8009948:	e000      	b.n	800994c <HAL_UART_IRQHandler+0x5c8>
    return;
 800994a:	bf00      	nop
  }

}
 800994c:	37e8      	adds	r7, #232	@ 0xe8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop

08009954 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b088      	sub	sp, #32
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	431a      	orrs	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	431a      	orrs	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	69db      	ldr	r3, [r3, #28]
 80099dc:	4313      	orrs	r3, r2
 80099de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	4ba6      	ldr	r3, [pc, #664]	@ (8009c80 <UART_SetConfig+0x2c4>)
 80099e8:	4013      	ands	r3, r2
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	6812      	ldr	r2, [r2, #0]
 80099ee:	6979      	ldr	r1, [r7, #20]
 80099f0:	430b      	orrs	r3, r1
 80099f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68da      	ldr	r2, [r3, #12]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	430a      	orrs	r2, r1
 8009a08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	699b      	ldr	r3, [r3, #24]
 8009a0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a1b      	ldr	r3, [r3, #32]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	430a      	orrs	r2, r1
 8009a2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a94      	ldr	r2, [pc, #592]	@ (8009c84 <UART_SetConfig+0x2c8>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d120      	bne.n	8009a7a <UART_SetConfig+0xbe>
 8009a38:	4b93      	ldr	r3, [pc, #588]	@ (8009c88 <UART_SetConfig+0x2cc>)
 8009a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a3e:	f003 0303 	and.w	r3, r3, #3
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d816      	bhi.n	8009a74 <UART_SetConfig+0xb8>
 8009a46:	a201      	add	r2, pc, #4	@ (adr r2, 8009a4c <UART_SetConfig+0x90>)
 8009a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4c:	08009a5d 	.word	0x08009a5d
 8009a50:	08009a69 	.word	0x08009a69
 8009a54:	08009a63 	.word	0x08009a63
 8009a58:	08009a6f 	.word	0x08009a6f
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	77fb      	strb	r3, [r7, #31]
 8009a60:	e150      	b.n	8009d04 <UART_SetConfig+0x348>
 8009a62:	2302      	movs	r3, #2
 8009a64:	77fb      	strb	r3, [r7, #31]
 8009a66:	e14d      	b.n	8009d04 <UART_SetConfig+0x348>
 8009a68:	2304      	movs	r3, #4
 8009a6a:	77fb      	strb	r3, [r7, #31]
 8009a6c:	e14a      	b.n	8009d04 <UART_SetConfig+0x348>
 8009a6e:	2308      	movs	r3, #8
 8009a70:	77fb      	strb	r3, [r7, #31]
 8009a72:	e147      	b.n	8009d04 <UART_SetConfig+0x348>
 8009a74:	2310      	movs	r3, #16
 8009a76:	77fb      	strb	r3, [r7, #31]
 8009a78:	e144      	b.n	8009d04 <UART_SetConfig+0x348>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a83      	ldr	r2, [pc, #524]	@ (8009c8c <UART_SetConfig+0x2d0>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d132      	bne.n	8009aea <UART_SetConfig+0x12e>
 8009a84:	4b80      	ldr	r3, [pc, #512]	@ (8009c88 <UART_SetConfig+0x2cc>)
 8009a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a8a:	f003 030c 	and.w	r3, r3, #12
 8009a8e:	2b0c      	cmp	r3, #12
 8009a90:	d828      	bhi.n	8009ae4 <UART_SetConfig+0x128>
 8009a92:	a201      	add	r2, pc, #4	@ (adr r2, 8009a98 <UART_SetConfig+0xdc>)
 8009a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a98:	08009acd 	.word	0x08009acd
 8009a9c:	08009ae5 	.word	0x08009ae5
 8009aa0:	08009ae5 	.word	0x08009ae5
 8009aa4:	08009ae5 	.word	0x08009ae5
 8009aa8:	08009ad9 	.word	0x08009ad9
 8009aac:	08009ae5 	.word	0x08009ae5
 8009ab0:	08009ae5 	.word	0x08009ae5
 8009ab4:	08009ae5 	.word	0x08009ae5
 8009ab8:	08009ad3 	.word	0x08009ad3
 8009abc:	08009ae5 	.word	0x08009ae5
 8009ac0:	08009ae5 	.word	0x08009ae5
 8009ac4:	08009ae5 	.word	0x08009ae5
 8009ac8:	08009adf 	.word	0x08009adf
 8009acc:	2300      	movs	r3, #0
 8009ace:	77fb      	strb	r3, [r7, #31]
 8009ad0:	e118      	b.n	8009d04 <UART_SetConfig+0x348>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	77fb      	strb	r3, [r7, #31]
 8009ad6:	e115      	b.n	8009d04 <UART_SetConfig+0x348>
 8009ad8:	2304      	movs	r3, #4
 8009ada:	77fb      	strb	r3, [r7, #31]
 8009adc:	e112      	b.n	8009d04 <UART_SetConfig+0x348>
 8009ade:	2308      	movs	r3, #8
 8009ae0:	77fb      	strb	r3, [r7, #31]
 8009ae2:	e10f      	b.n	8009d04 <UART_SetConfig+0x348>
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	77fb      	strb	r3, [r7, #31]
 8009ae8:	e10c      	b.n	8009d04 <UART_SetConfig+0x348>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a68      	ldr	r2, [pc, #416]	@ (8009c90 <UART_SetConfig+0x2d4>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d120      	bne.n	8009b36 <UART_SetConfig+0x17a>
 8009af4:	4b64      	ldr	r3, [pc, #400]	@ (8009c88 <UART_SetConfig+0x2cc>)
 8009af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009afa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009afe:	2b30      	cmp	r3, #48	@ 0x30
 8009b00:	d013      	beq.n	8009b2a <UART_SetConfig+0x16e>
 8009b02:	2b30      	cmp	r3, #48	@ 0x30
 8009b04:	d814      	bhi.n	8009b30 <UART_SetConfig+0x174>
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	d009      	beq.n	8009b1e <UART_SetConfig+0x162>
 8009b0a:	2b20      	cmp	r3, #32
 8009b0c:	d810      	bhi.n	8009b30 <UART_SetConfig+0x174>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d002      	beq.n	8009b18 <UART_SetConfig+0x15c>
 8009b12:	2b10      	cmp	r3, #16
 8009b14:	d006      	beq.n	8009b24 <UART_SetConfig+0x168>
 8009b16:	e00b      	b.n	8009b30 <UART_SetConfig+0x174>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	77fb      	strb	r3, [r7, #31]
 8009b1c:	e0f2      	b.n	8009d04 <UART_SetConfig+0x348>
 8009b1e:	2302      	movs	r3, #2
 8009b20:	77fb      	strb	r3, [r7, #31]
 8009b22:	e0ef      	b.n	8009d04 <UART_SetConfig+0x348>
 8009b24:	2304      	movs	r3, #4
 8009b26:	77fb      	strb	r3, [r7, #31]
 8009b28:	e0ec      	b.n	8009d04 <UART_SetConfig+0x348>
 8009b2a:	2308      	movs	r3, #8
 8009b2c:	77fb      	strb	r3, [r7, #31]
 8009b2e:	e0e9      	b.n	8009d04 <UART_SetConfig+0x348>
 8009b30:	2310      	movs	r3, #16
 8009b32:	77fb      	strb	r3, [r7, #31]
 8009b34:	e0e6      	b.n	8009d04 <UART_SetConfig+0x348>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a56      	ldr	r2, [pc, #344]	@ (8009c94 <UART_SetConfig+0x2d8>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d120      	bne.n	8009b82 <UART_SetConfig+0x1c6>
 8009b40:	4b51      	ldr	r3, [pc, #324]	@ (8009c88 <UART_SetConfig+0x2cc>)
 8009b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009b4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b4c:	d013      	beq.n	8009b76 <UART_SetConfig+0x1ba>
 8009b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b50:	d814      	bhi.n	8009b7c <UART_SetConfig+0x1c0>
 8009b52:	2b80      	cmp	r3, #128	@ 0x80
 8009b54:	d009      	beq.n	8009b6a <UART_SetConfig+0x1ae>
 8009b56:	2b80      	cmp	r3, #128	@ 0x80
 8009b58:	d810      	bhi.n	8009b7c <UART_SetConfig+0x1c0>
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d002      	beq.n	8009b64 <UART_SetConfig+0x1a8>
 8009b5e:	2b40      	cmp	r3, #64	@ 0x40
 8009b60:	d006      	beq.n	8009b70 <UART_SetConfig+0x1b4>
 8009b62:	e00b      	b.n	8009b7c <UART_SetConfig+0x1c0>
 8009b64:	2300      	movs	r3, #0
 8009b66:	77fb      	strb	r3, [r7, #31]
 8009b68:	e0cc      	b.n	8009d04 <UART_SetConfig+0x348>
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	77fb      	strb	r3, [r7, #31]
 8009b6e:	e0c9      	b.n	8009d04 <UART_SetConfig+0x348>
 8009b70:	2304      	movs	r3, #4
 8009b72:	77fb      	strb	r3, [r7, #31]
 8009b74:	e0c6      	b.n	8009d04 <UART_SetConfig+0x348>
 8009b76:	2308      	movs	r3, #8
 8009b78:	77fb      	strb	r3, [r7, #31]
 8009b7a:	e0c3      	b.n	8009d04 <UART_SetConfig+0x348>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	77fb      	strb	r3, [r7, #31]
 8009b80:	e0c0      	b.n	8009d04 <UART_SetConfig+0x348>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a44      	ldr	r2, [pc, #272]	@ (8009c98 <UART_SetConfig+0x2dc>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d125      	bne.n	8009bd8 <UART_SetConfig+0x21c>
 8009b8c:	4b3e      	ldr	r3, [pc, #248]	@ (8009c88 <UART_SetConfig+0x2cc>)
 8009b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b9a:	d017      	beq.n	8009bcc <UART_SetConfig+0x210>
 8009b9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ba0:	d817      	bhi.n	8009bd2 <UART_SetConfig+0x216>
 8009ba2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ba6:	d00b      	beq.n	8009bc0 <UART_SetConfig+0x204>
 8009ba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bac:	d811      	bhi.n	8009bd2 <UART_SetConfig+0x216>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <UART_SetConfig+0x1fe>
 8009bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bb6:	d006      	beq.n	8009bc6 <UART_SetConfig+0x20a>
 8009bb8:	e00b      	b.n	8009bd2 <UART_SetConfig+0x216>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	77fb      	strb	r3, [r7, #31]
 8009bbe:	e0a1      	b.n	8009d04 <UART_SetConfig+0x348>
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	77fb      	strb	r3, [r7, #31]
 8009bc4:	e09e      	b.n	8009d04 <UART_SetConfig+0x348>
 8009bc6:	2304      	movs	r3, #4
 8009bc8:	77fb      	strb	r3, [r7, #31]
 8009bca:	e09b      	b.n	8009d04 <UART_SetConfig+0x348>
 8009bcc:	2308      	movs	r3, #8
 8009bce:	77fb      	strb	r3, [r7, #31]
 8009bd0:	e098      	b.n	8009d04 <UART_SetConfig+0x348>
 8009bd2:	2310      	movs	r3, #16
 8009bd4:	77fb      	strb	r3, [r7, #31]
 8009bd6:	e095      	b.n	8009d04 <UART_SetConfig+0x348>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8009c9c <UART_SetConfig+0x2e0>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d125      	bne.n	8009c2e <UART_SetConfig+0x272>
 8009be2:	4b29      	ldr	r3, [pc, #164]	@ (8009c88 <UART_SetConfig+0x2cc>)
 8009be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009be8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009bec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bf0:	d017      	beq.n	8009c22 <UART_SetConfig+0x266>
 8009bf2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bf6:	d817      	bhi.n	8009c28 <UART_SetConfig+0x26c>
 8009bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bfc:	d00b      	beq.n	8009c16 <UART_SetConfig+0x25a>
 8009bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c02:	d811      	bhi.n	8009c28 <UART_SetConfig+0x26c>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d003      	beq.n	8009c10 <UART_SetConfig+0x254>
 8009c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c0c:	d006      	beq.n	8009c1c <UART_SetConfig+0x260>
 8009c0e:	e00b      	b.n	8009c28 <UART_SetConfig+0x26c>
 8009c10:	2301      	movs	r3, #1
 8009c12:	77fb      	strb	r3, [r7, #31]
 8009c14:	e076      	b.n	8009d04 <UART_SetConfig+0x348>
 8009c16:	2302      	movs	r3, #2
 8009c18:	77fb      	strb	r3, [r7, #31]
 8009c1a:	e073      	b.n	8009d04 <UART_SetConfig+0x348>
 8009c1c:	2304      	movs	r3, #4
 8009c1e:	77fb      	strb	r3, [r7, #31]
 8009c20:	e070      	b.n	8009d04 <UART_SetConfig+0x348>
 8009c22:	2308      	movs	r3, #8
 8009c24:	77fb      	strb	r3, [r7, #31]
 8009c26:	e06d      	b.n	8009d04 <UART_SetConfig+0x348>
 8009c28:	2310      	movs	r3, #16
 8009c2a:	77fb      	strb	r3, [r7, #31]
 8009c2c:	e06a      	b.n	8009d04 <UART_SetConfig+0x348>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a1b      	ldr	r2, [pc, #108]	@ (8009ca0 <UART_SetConfig+0x2e4>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d138      	bne.n	8009caa <UART_SetConfig+0x2ee>
 8009c38:	4b13      	ldr	r3, [pc, #76]	@ (8009c88 <UART_SetConfig+0x2cc>)
 8009c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c3e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009c42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c46:	d017      	beq.n	8009c78 <UART_SetConfig+0x2bc>
 8009c48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c4c:	d82a      	bhi.n	8009ca4 <UART_SetConfig+0x2e8>
 8009c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c52:	d00b      	beq.n	8009c6c <UART_SetConfig+0x2b0>
 8009c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c58:	d824      	bhi.n	8009ca4 <UART_SetConfig+0x2e8>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <UART_SetConfig+0x2aa>
 8009c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c62:	d006      	beq.n	8009c72 <UART_SetConfig+0x2b6>
 8009c64:	e01e      	b.n	8009ca4 <UART_SetConfig+0x2e8>
 8009c66:	2300      	movs	r3, #0
 8009c68:	77fb      	strb	r3, [r7, #31]
 8009c6a:	e04b      	b.n	8009d04 <UART_SetConfig+0x348>
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	77fb      	strb	r3, [r7, #31]
 8009c70:	e048      	b.n	8009d04 <UART_SetConfig+0x348>
 8009c72:	2304      	movs	r3, #4
 8009c74:	77fb      	strb	r3, [r7, #31]
 8009c76:	e045      	b.n	8009d04 <UART_SetConfig+0x348>
 8009c78:	2308      	movs	r3, #8
 8009c7a:	77fb      	strb	r3, [r7, #31]
 8009c7c:	e042      	b.n	8009d04 <UART_SetConfig+0x348>
 8009c7e:	bf00      	nop
 8009c80:	efff69f3 	.word	0xefff69f3
 8009c84:	40011000 	.word	0x40011000
 8009c88:	40023800 	.word	0x40023800
 8009c8c:	40004400 	.word	0x40004400
 8009c90:	40004800 	.word	0x40004800
 8009c94:	40004c00 	.word	0x40004c00
 8009c98:	40005000 	.word	0x40005000
 8009c9c:	40011400 	.word	0x40011400
 8009ca0:	40007800 	.word	0x40007800
 8009ca4:	2310      	movs	r3, #16
 8009ca6:	77fb      	strb	r3, [r7, #31]
 8009ca8:	e02c      	b.n	8009d04 <UART_SetConfig+0x348>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a72      	ldr	r2, [pc, #456]	@ (8009e78 <UART_SetConfig+0x4bc>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d125      	bne.n	8009d00 <UART_SetConfig+0x344>
 8009cb4:	4b71      	ldr	r3, [pc, #452]	@ (8009e7c <UART_SetConfig+0x4c0>)
 8009cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009cbe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009cc2:	d017      	beq.n	8009cf4 <UART_SetConfig+0x338>
 8009cc4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009cc8:	d817      	bhi.n	8009cfa <UART_SetConfig+0x33e>
 8009cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cce:	d00b      	beq.n	8009ce8 <UART_SetConfig+0x32c>
 8009cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cd4:	d811      	bhi.n	8009cfa <UART_SetConfig+0x33e>
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <UART_SetConfig+0x326>
 8009cda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cde:	d006      	beq.n	8009cee <UART_SetConfig+0x332>
 8009ce0:	e00b      	b.n	8009cfa <UART_SetConfig+0x33e>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	77fb      	strb	r3, [r7, #31]
 8009ce6:	e00d      	b.n	8009d04 <UART_SetConfig+0x348>
 8009ce8:	2302      	movs	r3, #2
 8009cea:	77fb      	strb	r3, [r7, #31]
 8009cec:	e00a      	b.n	8009d04 <UART_SetConfig+0x348>
 8009cee:	2304      	movs	r3, #4
 8009cf0:	77fb      	strb	r3, [r7, #31]
 8009cf2:	e007      	b.n	8009d04 <UART_SetConfig+0x348>
 8009cf4:	2308      	movs	r3, #8
 8009cf6:	77fb      	strb	r3, [r7, #31]
 8009cf8:	e004      	b.n	8009d04 <UART_SetConfig+0x348>
 8009cfa:	2310      	movs	r3, #16
 8009cfc:	77fb      	strb	r3, [r7, #31]
 8009cfe:	e001      	b.n	8009d04 <UART_SetConfig+0x348>
 8009d00:	2310      	movs	r3, #16
 8009d02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d0c:	d15b      	bne.n	8009dc6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009d0e:	7ffb      	ldrb	r3, [r7, #31]
 8009d10:	2b08      	cmp	r3, #8
 8009d12:	d828      	bhi.n	8009d66 <UART_SetConfig+0x3aa>
 8009d14:	a201      	add	r2, pc, #4	@ (adr r2, 8009d1c <UART_SetConfig+0x360>)
 8009d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1a:	bf00      	nop
 8009d1c:	08009d41 	.word	0x08009d41
 8009d20:	08009d49 	.word	0x08009d49
 8009d24:	08009d51 	.word	0x08009d51
 8009d28:	08009d67 	.word	0x08009d67
 8009d2c:	08009d57 	.word	0x08009d57
 8009d30:	08009d67 	.word	0x08009d67
 8009d34:	08009d67 	.word	0x08009d67
 8009d38:	08009d67 	.word	0x08009d67
 8009d3c:	08009d5f 	.word	0x08009d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d40:	f7fd fd44 	bl	80077cc <HAL_RCC_GetPCLK1Freq>
 8009d44:	61b8      	str	r0, [r7, #24]
        break;
 8009d46:	e013      	b.n	8009d70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d48:	f7fd fd54 	bl	80077f4 <HAL_RCC_GetPCLK2Freq>
 8009d4c:	61b8      	str	r0, [r7, #24]
        break;
 8009d4e:	e00f      	b.n	8009d70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d50:	4b4b      	ldr	r3, [pc, #300]	@ (8009e80 <UART_SetConfig+0x4c4>)
 8009d52:	61bb      	str	r3, [r7, #24]
        break;
 8009d54:	e00c      	b.n	8009d70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d56:	f7fd fc27 	bl	80075a8 <HAL_RCC_GetSysClockFreq>
 8009d5a:	61b8      	str	r0, [r7, #24]
        break;
 8009d5c:	e008      	b.n	8009d70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d62:	61bb      	str	r3, [r7, #24]
        break;
 8009d64:	e004      	b.n	8009d70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	77bb      	strb	r3, [r7, #30]
        break;
 8009d6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d074      	beq.n	8009e60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	005a      	lsls	r2, r3, #1
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	085b      	lsrs	r3, r3, #1
 8009d80:	441a      	add	r2, r3
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	2b0f      	cmp	r3, #15
 8009d90:	d916      	bls.n	8009dc0 <UART_SetConfig+0x404>
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d98:	d212      	bcs.n	8009dc0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	f023 030f 	bic.w	r3, r3, #15
 8009da2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	085b      	lsrs	r3, r3, #1
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	f003 0307 	and.w	r3, r3, #7
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	89fb      	ldrh	r3, [r7, #14]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	89fa      	ldrh	r2, [r7, #14]
 8009dbc:	60da      	str	r2, [r3, #12]
 8009dbe:	e04f      	b.n	8009e60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	77bb      	strb	r3, [r7, #30]
 8009dc4:	e04c      	b.n	8009e60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dc6:	7ffb      	ldrb	r3, [r7, #31]
 8009dc8:	2b08      	cmp	r3, #8
 8009dca:	d828      	bhi.n	8009e1e <UART_SetConfig+0x462>
 8009dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd4 <UART_SetConfig+0x418>)
 8009dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd2:	bf00      	nop
 8009dd4:	08009df9 	.word	0x08009df9
 8009dd8:	08009e01 	.word	0x08009e01
 8009ddc:	08009e09 	.word	0x08009e09
 8009de0:	08009e1f 	.word	0x08009e1f
 8009de4:	08009e0f 	.word	0x08009e0f
 8009de8:	08009e1f 	.word	0x08009e1f
 8009dec:	08009e1f 	.word	0x08009e1f
 8009df0:	08009e1f 	.word	0x08009e1f
 8009df4:	08009e17 	.word	0x08009e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009df8:	f7fd fce8 	bl	80077cc <HAL_RCC_GetPCLK1Freq>
 8009dfc:	61b8      	str	r0, [r7, #24]
        break;
 8009dfe:	e013      	b.n	8009e28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e00:	f7fd fcf8 	bl	80077f4 <HAL_RCC_GetPCLK2Freq>
 8009e04:	61b8      	str	r0, [r7, #24]
        break;
 8009e06:	e00f      	b.n	8009e28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e08:	4b1d      	ldr	r3, [pc, #116]	@ (8009e80 <UART_SetConfig+0x4c4>)
 8009e0a:	61bb      	str	r3, [r7, #24]
        break;
 8009e0c:	e00c      	b.n	8009e28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e0e:	f7fd fbcb 	bl	80075a8 <HAL_RCC_GetSysClockFreq>
 8009e12:	61b8      	str	r0, [r7, #24]
        break;
 8009e14:	e008      	b.n	8009e28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e1a:	61bb      	str	r3, [r7, #24]
        break;
 8009e1c:	e004      	b.n	8009e28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	77bb      	strb	r3, [r7, #30]
        break;
 8009e26:	bf00      	nop
    }

    if (pclk != 0U)
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d018      	beq.n	8009e60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	085a      	lsrs	r2, r3, #1
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	441a      	add	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	2b0f      	cmp	r3, #15
 8009e46:	d909      	bls.n	8009e5c <UART_SetConfig+0x4a0>
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e4e:	d205      	bcs.n	8009e5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	60da      	str	r2, [r3, #12]
 8009e5a:	e001      	b.n	8009e60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009e6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3720      	adds	r7, #32
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	40007c00 	.word	0x40007c00
 8009e7c:	40023800 	.word	0x40023800
 8009e80:	00f42400 	.word	0x00f42400

08009e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e90:	f003 0308 	and.w	r3, r3, #8
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00a      	beq.n	8009eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00a      	beq.n	8009ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	430a      	orrs	r2, r1
 8009ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed4:	f003 0302 	and.w	r3, r3, #2
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00a      	beq.n	8009ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef6:	f003 0304 	and.w	r3, r3, #4
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00a      	beq.n	8009f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	430a      	orrs	r2, r1
 8009f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f18:	f003 0310 	and.w	r3, r3, #16
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00a      	beq.n	8009f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f3a:	f003 0320 	and.w	r3, r3, #32
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00a      	beq.n	8009f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	430a      	orrs	r2, r1
 8009f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d01a      	beq.n	8009f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f82:	d10a      	bne.n	8009f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	430a      	orrs	r2, r1
 8009f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00a      	beq.n	8009fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	430a      	orrs	r2, r1
 8009fba:	605a      	str	r2, [r3, #4]
  }
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b098      	sub	sp, #96	@ 0x60
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fd8:	f7f9 fdc6 	bl	8003b68 <HAL_GetTick>
 8009fdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f003 0308 	and.w	r3, r3, #8
 8009fe8:	2b08      	cmp	r3, #8
 8009fea:	d12e      	bne.n	800a04a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f88c 	bl	800a118 <UART_WaitOnFlagUntilTimeout>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d021      	beq.n	800a04a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00e:	e853 3f00 	ldrex	r3, [r3]
 800a012:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a01a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	461a      	mov	r2, r3
 800a022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a024:	647b      	str	r3, [r7, #68]	@ 0x44
 800a026:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a028:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a02a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a02c:	e841 2300 	strex	r3, r2, [r1]
 800a030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1e6      	bne.n	800a006 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2220      	movs	r2, #32
 800a03c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e062      	b.n	800a110 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0304 	and.w	r3, r3, #4
 800a054:	2b04      	cmp	r3, #4
 800a056:	d149      	bne.n	800a0ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a058:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a060:	2200      	movs	r2, #0
 800a062:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f856 	bl	800a118 <UART_WaitOnFlagUntilTimeout>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d03c      	beq.n	800a0ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	623b      	str	r3, [r7, #32]
   return(result);
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a090:	633b      	str	r3, [r7, #48]	@ 0x30
 800a092:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e6      	bne.n	800a072 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f023 0301 	bic.w	r3, r3, #1
 800a0ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0c4:	61fa      	str	r2, [r7, #28]
 800a0c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	69b9      	ldr	r1, [r7, #24]
 800a0ca:	69fa      	ldr	r2, [r7, #28]
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e5      	bne.n	800a0a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e011      	b.n	800a110 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2220      	movs	r2, #32
 800a0f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3758      	adds	r7, #88	@ 0x58
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	603b      	str	r3, [r7, #0]
 800a124:	4613      	mov	r3, r2
 800a126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a128:	e04f      	b.n	800a1ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a130:	d04b      	beq.n	800a1ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a132:	f7f9 fd19 	bl	8003b68 <HAL_GetTick>
 800a136:	4602      	mov	r2, r0
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	69ba      	ldr	r2, [r7, #24]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d302      	bcc.n	800a148 <UART_WaitOnFlagUntilTimeout+0x30>
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	e04e      	b.n	800a1ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f003 0304 	and.w	r3, r3, #4
 800a156:	2b00      	cmp	r3, #0
 800a158:	d037      	beq.n	800a1ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	2b80      	cmp	r3, #128	@ 0x80
 800a15e:	d034      	beq.n	800a1ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2b40      	cmp	r3, #64	@ 0x40
 800a164:	d031      	beq.n	800a1ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	f003 0308 	and.w	r3, r3, #8
 800a170:	2b08      	cmp	r3, #8
 800a172:	d110      	bne.n	800a196 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2208      	movs	r2, #8
 800a17a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f000 f85e 	bl	800a23e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2208      	movs	r2, #8
 800a186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e029      	b.n	800a1ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	69db      	ldr	r3, [r3, #28]
 800a19c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1a4:	d111      	bne.n	800a1ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 f844 	bl	800a23e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e00f      	b.n	800a1ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	69da      	ldr	r2, [r3, #28]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	bf0c      	ite	eq
 800a1da:	2301      	moveq	r3, #1
 800a1dc:	2300      	movne	r3, #0
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d0a0      	beq.n	800a12a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b089      	sub	sp, #36	@ 0x24
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	e853 3f00 	ldrex	r3, [r3]
 800a206:	60bb      	str	r3, [r7, #8]
   return(result);
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a20e:	61fb      	str	r3, [r7, #28]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	461a      	mov	r2, r3
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	61bb      	str	r3, [r7, #24]
 800a21a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21c:	6979      	ldr	r1, [r7, #20]
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	e841 2300 	strex	r3, r2, [r1]
 800a224:	613b      	str	r3, [r7, #16]
   return(result);
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e6      	bne.n	800a1fa <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2220      	movs	r2, #32
 800a230:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a232:	bf00      	nop
 800a234:	3724      	adds	r7, #36	@ 0x24
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a23e:	b480      	push	{r7}
 800a240:	b095      	sub	sp, #84	@ 0x54
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a24e:	e853 3f00 	ldrex	r3, [r3]
 800a252:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a256:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a25a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	461a      	mov	r2, r3
 800a262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a264:	643b      	str	r3, [r7, #64]	@ 0x40
 800a266:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a268:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a26a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a26c:	e841 2300 	strex	r3, r2, [r1]
 800a270:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e6      	bne.n	800a246 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3308      	adds	r3, #8
 800a27e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	6a3b      	ldr	r3, [r7, #32]
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	61fb      	str	r3, [r7, #28]
   return(result);
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	f023 0301 	bic.w	r3, r3, #1
 800a28e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3308      	adds	r3, #8
 800a296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a29a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a29e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e5      	bne.n	800a278 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d118      	bne.n	800a2e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f023 0310 	bic.w	r3, r3, #16
 800a2c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2d2:	61bb      	str	r3, [r7, #24]
 800a2d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d6:	6979      	ldr	r1, [r7, #20]
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	e841 2300 	strex	r3, r2, [r1]
 800a2de:	613b      	str	r3, [r7, #16]
   return(result);
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1e6      	bne.n	800a2b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a2fa:	bf00      	nop
 800a2fc:	3754      	adds	r7, #84	@ 0x54
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b090      	sub	sp, #64	@ 0x40
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a312:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a31c:	d037      	beq.n	800a38e <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a31e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a320:	2200      	movs	r2, #0
 800a322:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3308      	adds	r3, #8
 800a32c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a330:	e853 3f00 	ldrex	r3, [r3]
 800a334:	623b      	str	r3, [r7, #32]
   return(result);
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a33c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3308      	adds	r3, #8
 800a344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a346:	633a      	str	r2, [r7, #48]	@ 0x30
 800a348:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a34c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a34e:	e841 2300 	strex	r3, r2, [r1]
 800a352:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1e5      	bne.n	800a326 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	e853 3f00 	ldrex	r3, [r3]
 800a366:	60fb      	str	r3, [r7, #12]
   return(result);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a36e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	461a      	mov	r2, r3
 800a376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a378:	61fb      	str	r3, [r7, #28]
 800a37a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a37c:	69b9      	ldr	r1, [r7, #24]
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	e841 2300 	strex	r3, r2, [r1]
 800a384:	617b      	str	r3, [r7, #20]
   return(result);
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1e6      	bne.n	800a35a <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a38c:	e002      	b.n	800a394 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a38e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a390:	f7ff fae0 	bl	8009954 <HAL_UART_TxCpltCallback>
}
 800a394:	bf00      	nop
 800a396:	3740      	adds	r7, #64	@ 0x40
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7ff fadc 	bl	8009968 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3b0:	bf00      	nop
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a3ca:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3d2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3de:	2b80      	cmp	r3, #128	@ 0x80
 800a3e0:	d109      	bne.n	800a3f6 <UART_DMAError+0x3e>
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	2b21      	cmp	r3, #33	@ 0x21
 800a3e6:	d106      	bne.n	800a3f6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800a3f0:	6978      	ldr	r0, [r7, #20]
 800a3f2:	f7ff fefe 	bl	800a1f2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a400:	2b40      	cmp	r3, #64	@ 0x40
 800a402:	d109      	bne.n	800a418 <UART_DMAError+0x60>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2b22      	cmp	r3, #34	@ 0x22
 800a408:	d106      	bne.n	800a418 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800a412:	6978      	ldr	r0, [r7, #20]
 800a414:	f7ff ff13 	bl	800a23e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a41e:	f043 0210 	orr.w	r2, r3, #16
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a428:	6978      	ldr	r0, [r7, #20]
 800a42a:	f7ff faa7 	bl	800997c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a42e:	bf00      	nop
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a442:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	f7ff fa91 	bl	800997c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a45a:	bf00      	nop
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b088      	sub	sp, #32
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	60bb      	str	r3, [r7, #8]
   return(result);
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a47e:	61fb      	str	r3, [r7, #28]
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	461a      	mov	r2, r3
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	61bb      	str	r3, [r7, #24]
 800a48a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	6979      	ldr	r1, [r7, #20]
 800a48e:	69ba      	ldr	r2, [r7, #24]
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	613b      	str	r3, [r7, #16]
   return(result);
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e6      	bne.n	800a46a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f7ff fa53 	bl	8009954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4ae:	bf00      	nop
 800a4b0:	3720      	adds	r7, #32
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b084      	sub	sp, #16
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	f107 001c 	add.w	r0, r7, #28
 800a4c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d121      	bne.n	800a516 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	4b21      	ldr	r3, [pc, #132]	@ (800a568 <USB_CoreInit+0xb0>)
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a4f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d105      	bne.n	800a50a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f001 fade 	bl	800bacc <USB_CoreReset>
 800a510:	4603      	mov	r3, r0
 800a512:	73fb      	strb	r3, [r7, #15]
 800a514:	e010      	b.n	800a538 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f001 fad2 	bl	800bacc <USB_CoreReset>
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a530:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800a538:	7fbb      	ldrb	r3, [r7, #30]
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d10b      	bne.n	800a556 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f043 0206 	orr.w	r2, r3, #6
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f043 0220 	orr.w	r2, r3, #32
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a562:	b004      	add	sp, #16
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	ffbdffbf 	.word	0xffbdffbf

0800a56c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b087      	sub	sp, #28
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	4613      	mov	r3, r2
 800a578:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d165      	bne.n	800a64c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	4a41      	ldr	r2, [pc, #260]	@ (800a688 <USB_SetTurnaroundTime+0x11c>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d906      	bls.n	800a596 <USB_SetTurnaroundTime+0x2a>
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	4a40      	ldr	r2, [pc, #256]	@ (800a68c <USB_SetTurnaroundTime+0x120>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d202      	bcs.n	800a596 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a590:	230f      	movs	r3, #15
 800a592:	617b      	str	r3, [r7, #20]
 800a594:	e062      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	4a3c      	ldr	r2, [pc, #240]	@ (800a68c <USB_SetTurnaroundTime+0x120>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d306      	bcc.n	800a5ac <USB_SetTurnaroundTime+0x40>
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	4a3b      	ldr	r2, [pc, #236]	@ (800a690 <USB_SetTurnaroundTime+0x124>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d202      	bcs.n	800a5ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a5a6:	230e      	movs	r3, #14
 800a5a8:	617b      	str	r3, [r7, #20]
 800a5aa:	e057      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4a38      	ldr	r2, [pc, #224]	@ (800a690 <USB_SetTurnaroundTime+0x124>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d306      	bcc.n	800a5c2 <USB_SetTurnaroundTime+0x56>
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	4a37      	ldr	r2, [pc, #220]	@ (800a694 <USB_SetTurnaroundTime+0x128>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d202      	bcs.n	800a5c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a5bc:	230d      	movs	r3, #13
 800a5be:	617b      	str	r3, [r7, #20]
 800a5c0:	e04c      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	4a33      	ldr	r2, [pc, #204]	@ (800a694 <USB_SetTurnaroundTime+0x128>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d306      	bcc.n	800a5d8 <USB_SetTurnaroundTime+0x6c>
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	4a32      	ldr	r2, [pc, #200]	@ (800a698 <USB_SetTurnaroundTime+0x12c>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d802      	bhi.n	800a5d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a5d2:	230c      	movs	r3, #12
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	e041      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	4a2f      	ldr	r2, [pc, #188]	@ (800a698 <USB_SetTurnaroundTime+0x12c>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d906      	bls.n	800a5ee <USB_SetTurnaroundTime+0x82>
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	4a2e      	ldr	r2, [pc, #184]	@ (800a69c <USB_SetTurnaroundTime+0x130>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d802      	bhi.n	800a5ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a5e8:	230b      	movs	r3, #11
 800a5ea:	617b      	str	r3, [r7, #20]
 800a5ec:	e036      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	4a2a      	ldr	r2, [pc, #168]	@ (800a69c <USB_SetTurnaroundTime+0x130>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d906      	bls.n	800a604 <USB_SetTurnaroundTime+0x98>
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	4a29      	ldr	r2, [pc, #164]	@ (800a6a0 <USB_SetTurnaroundTime+0x134>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d802      	bhi.n	800a604 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a5fe:	230a      	movs	r3, #10
 800a600:	617b      	str	r3, [r7, #20]
 800a602:	e02b      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	4a26      	ldr	r2, [pc, #152]	@ (800a6a0 <USB_SetTurnaroundTime+0x134>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d906      	bls.n	800a61a <USB_SetTurnaroundTime+0xae>
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	4a25      	ldr	r2, [pc, #148]	@ (800a6a4 <USB_SetTurnaroundTime+0x138>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d202      	bcs.n	800a61a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a614:	2309      	movs	r3, #9
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e020      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	4a21      	ldr	r2, [pc, #132]	@ (800a6a4 <USB_SetTurnaroundTime+0x138>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d306      	bcc.n	800a630 <USB_SetTurnaroundTime+0xc4>
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	4a20      	ldr	r2, [pc, #128]	@ (800a6a8 <USB_SetTurnaroundTime+0x13c>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d802      	bhi.n	800a630 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a62a:	2308      	movs	r3, #8
 800a62c:	617b      	str	r3, [r7, #20]
 800a62e:	e015      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	4a1d      	ldr	r2, [pc, #116]	@ (800a6a8 <USB_SetTurnaroundTime+0x13c>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d906      	bls.n	800a646 <USB_SetTurnaroundTime+0xda>
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	4a1c      	ldr	r2, [pc, #112]	@ (800a6ac <USB_SetTurnaroundTime+0x140>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d202      	bcs.n	800a646 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a640:	2307      	movs	r3, #7
 800a642:	617b      	str	r3, [r7, #20]
 800a644:	e00a      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a646:	2306      	movs	r3, #6
 800a648:	617b      	str	r3, [r7, #20]
 800a64a:	e007      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d102      	bne.n	800a658 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a652:	2309      	movs	r3, #9
 800a654:	617b      	str	r3, [r7, #20]
 800a656:	e001      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a658:	2309      	movs	r3, #9
 800a65a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	68da      	ldr	r2, [r3, #12]
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	029b      	lsls	r3, r3, #10
 800a670:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a674:	431a      	orrs	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	371c      	adds	r7, #28
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	00d8acbf 	.word	0x00d8acbf
 800a68c:	00e4e1c0 	.word	0x00e4e1c0
 800a690:	00f42400 	.word	0x00f42400
 800a694:	01067380 	.word	0x01067380
 800a698:	011a499f 	.word	0x011a499f
 800a69c:	01312cff 	.word	0x01312cff
 800a6a0:	014ca43f 	.word	0x014ca43f
 800a6a4:	016e3600 	.word	0x016e3600
 800a6a8:	01a6ab1f 	.word	0x01a6ab1f
 800a6ac:	01e84800 	.word	0x01e84800

0800a6b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f043 0201 	orr.w	r2, r3, #1
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f023 0201 	bic.w	r2, r3, #1
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a700:	2300      	movs	r3, #0
 800a702:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d115      	bne.n	800a742 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a722:	200a      	movs	r0, #10
 800a724:	f7f9 fa2c 	bl	8003b80 <HAL_Delay>
      ms += 10U;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	330a      	adds	r3, #10
 800a72c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f001 f93b 	bl	800b9aa <USB_GetMode>
 800a734:	4603      	mov	r3, r0
 800a736:	2b01      	cmp	r3, #1
 800a738:	d01e      	beq.n	800a778 <USB_SetCurrentMode+0x84>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a73e:	d9f0      	bls.n	800a722 <USB_SetCurrentMode+0x2e>
 800a740:	e01a      	b.n	800a778 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a742:	78fb      	ldrb	r3, [r7, #3]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d115      	bne.n	800a774 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a754:	200a      	movs	r0, #10
 800a756:	f7f9 fa13 	bl	8003b80 <HAL_Delay>
      ms += 10U;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	330a      	adds	r3, #10
 800a75e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 f922 	bl	800b9aa <USB_GetMode>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d005      	beq.n	800a778 <USB_SetCurrentMode+0x84>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2bc7      	cmp	r3, #199	@ 0xc7
 800a770:	d9f0      	bls.n	800a754 <USB_SetCurrentMode+0x60>
 800a772:	e001      	b.n	800a778 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e005      	b.n	800a784 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2bc8      	cmp	r3, #200	@ 0xc8
 800a77c:	d101      	bne.n	800a782 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e000      	b.n	800a784 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a78c:	b084      	sub	sp, #16
 800a78e:	b580      	push	{r7, lr}
 800a790:	b086      	sub	sp, #24
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a79a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	613b      	str	r3, [r7, #16]
 800a7aa:	e009      	b.n	800a7c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	3340      	adds	r3, #64	@ 0x40
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	613b      	str	r3, [r7, #16]
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	2b0e      	cmp	r3, #14
 800a7c4:	d9f2      	bls.n	800a7ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a7c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d11c      	bne.n	800a808 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7dc:	f043 0302 	orr.w	r3, r3, #2
 800a7e0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	601a      	str	r2, [r3, #0]
 800a806:	e005      	b.n	800a814 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a80c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a81a:	461a      	mov	r2, r3
 800a81c:	2300      	movs	r3, #0
 800a81e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a820:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a824:	2b01      	cmp	r3, #1
 800a826:	d10d      	bne.n	800a844 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d104      	bne.n	800a83a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a830:	2100      	movs	r1, #0
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f968 	bl	800ab08 <USB_SetDevSpeed>
 800a838:	e008      	b.n	800a84c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a83a:	2101      	movs	r1, #1
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 f963 	bl	800ab08 <USB_SetDevSpeed>
 800a842:	e003      	b.n	800a84c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a844:	2103      	movs	r1, #3
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 f95e 	bl	800ab08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a84c:	2110      	movs	r1, #16
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f8fa 	bl	800aa48 <USB_FlushTxFifo>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f924 	bl	800aaac <USB_FlushRxFifo>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a874:	461a      	mov	r2, r3
 800a876:	2300      	movs	r3, #0
 800a878:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a880:	461a      	mov	r2, r3
 800a882:	2300      	movs	r3, #0
 800a884:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a88c:	461a      	mov	r2, r3
 800a88e:	2300      	movs	r3, #0
 800a890:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a892:	2300      	movs	r3, #0
 800a894:	613b      	str	r3, [r7, #16]
 800a896:	e043      	b.n	800a920 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8ae:	d118      	bne.n	800a8e2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d10a      	bne.n	800a8cc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	015a      	lsls	r2, r3, #5
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	4413      	add	r3, r2
 800a8be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a8c8:	6013      	str	r3, [r2, #0]
 800a8ca:	e013      	b.n	800a8f4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d8:	461a      	mov	r2, r3
 800a8da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a8de:	6013      	str	r3, [r2, #0]
 800a8e0:	e008      	b.n	800a8f4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	015a      	lsls	r2, r3, #5
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a900:	461a      	mov	r2, r3
 800a902:	2300      	movs	r3, #0
 800a904:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a912:	461a      	mov	r2, r3
 800a914:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a918:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	3301      	adds	r3, #1
 800a91e:	613b      	str	r3, [r7, #16]
 800a920:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a924:	461a      	mov	r2, r3
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	4293      	cmp	r3, r2
 800a92a:	d3b5      	bcc.n	800a898 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a92c:	2300      	movs	r3, #0
 800a92e:	613b      	str	r3, [r7, #16]
 800a930:	e043      	b.n	800a9ba <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	015a      	lsls	r2, r3, #5
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	4413      	add	r3, r2
 800a93a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a944:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a948:	d118      	bne.n	800a97c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10a      	bne.n	800a966 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	4413      	add	r3, r2
 800a958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a95c:	461a      	mov	r2, r3
 800a95e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a962:	6013      	str	r3, [r2, #0]
 800a964:	e013      	b.n	800a98e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a972:	461a      	mov	r2, r3
 800a974:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a978:	6013      	str	r3, [r2, #0]
 800a97a:	e008      	b.n	800a98e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	015a      	lsls	r2, r3, #5
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4413      	add	r3, r2
 800a984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a988:	461a      	mov	r2, r3
 800a98a:	2300      	movs	r3, #0
 800a98c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a99a:	461a      	mov	r2, r3
 800a99c:	2300      	movs	r3, #0
 800a99e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	015a      	lsls	r2, r3, #5
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a9b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	613b      	str	r3, [r7, #16]
 800a9ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a9be:	461a      	mov	r2, r3
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d3b5      	bcc.n	800a932 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a9e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a9e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d105      	bne.n	800a9fc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	f043 0210 	orr.w	r2, r3, #16
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	699a      	ldr	r2, [r3, #24]
 800aa00:	4b0f      	ldr	r3, [pc, #60]	@ (800aa40 <USB_DevInit+0x2b4>)
 800aa02:	4313      	orrs	r3, r2
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa08:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d005      	beq.n	800aa1c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	f043 0208 	orr.w	r2, r3, #8
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aa1c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d105      	bne.n	800aa30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	699a      	ldr	r2, [r3, #24]
 800aa28:	4b06      	ldr	r3, [pc, #24]	@ (800aa44 <USB_DevInit+0x2b8>)
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa30:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3718      	adds	r7, #24
 800aa36:	46bd      	mov	sp, r7
 800aa38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa3c:	b004      	add	sp, #16
 800aa3e:	4770      	bx	lr
 800aa40:	803c3800 	.word	0x803c3800
 800aa44:	40000004 	.word	0x40000004

0800aa48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa62:	d901      	bls.n	800aa68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aa64:	2303      	movs	r3, #3
 800aa66:	e01b      	b.n	800aaa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	daf2      	bge.n	800aa56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aa70:	2300      	movs	r3, #0
 800aa72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	019b      	lsls	r3, r3, #6
 800aa78:	f043 0220 	orr.w	r2, r3, #32
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	3301      	adds	r3, #1
 800aa84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa8c:	d901      	bls.n	800aa92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e006      	b.n	800aaa0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	f003 0320 	and.w	r3, r3, #32
 800aa9a:	2b20      	cmp	r3, #32
 800aa9c:	d0f0      	beq.n	800aa80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aab4:	2300      	movs	r3, #0
 800aab6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3301      	adds	r3, #1
 800aabc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aac4:	d901      	bls.n	800aaca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aac6:	2303      	movs	r3, #3
 800aac8:	e018      	b.n	800aafc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	daf2      	bge.n	800aab8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aad2:	2300      	movs	r3, #0
 800aad4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2210      	movs	r2, #16
 800aada:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	3301      	adds	r3, #1
 800aae0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aae8:	d901      	bls.n	800aaee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aaea:	2303      	movs	r3, #3
 800aaec:	e006      	b.n	800aafc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	f003 0310 	and.w	r3, r3, #16
 800aaf6:	2b10      	cmp	r3, #16
 800aaf8:	d0f0      	beq.n	800aadc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	460b      	mov	r3, r1
 800ab12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	78fb      	ldrb	r3, [r7, #3]
 800ab22:	68f9      	ldr	r1, [r7, #12]
 800ab24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b087      	sub	sp, #28
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	f003 0306 	and.w	r3, r3, #6
 800ab52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d102      	bne.n	800ab60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	75fb      	strb	r3, [r7, #23]
 800ab5e:	e00a      	b.n	800ab76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d002      	beq.n	800ab6c <USB_GetDevSpeed+0x32>
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2b06      	cmp	r3, #6
 800ab6a:	d102      	bne.n	800ab72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	75fb      	strb	r3, [r7, #23]
 800ab70:	e001      	b.n	800ab76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ab72:	230f      	movs	r3, #15
 800ab74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ab76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	371c      	adds	r7, #28
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	785b      	ldrb	r3, [r3, #1]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d139      	bne.n	800ac14 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aba6:	69da      	ldr	r2, [r3, #28]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	f003 030f 	and.w	r3, r3, #15
 800abb0:	2101      	movs	r1, #1
 800abb2:	fa01 f303 	lsl.w	r3, r1, r3
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	68f9      	ldr	r1, [r7, #12]
 800abba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abbe:	4313      	orrs	r3, r2
 800abc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	015a      	lsls	r2, r3, #5
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	4413      	add	r3, r2
 800abca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d153      	bne.n	800ac80 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	791b      	ldrb	r3, [r3, #4]
 800abf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800abf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	059b      	lsls	r3, r3, #22
 800abfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800abfc:	431a      	orrs	r2, r3
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	0159      	lsls	r1, r3, #5
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	440b      	add	r3, r1
 800ac06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4b20      	ldr	r3, [pc, #128]	@ (800ac90 <USB_ActivateEndpoint+0x10c>)
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	600b      	str	r3, [r1, #0]
 800ac12:	e035      	b.n	800ac80 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac1a:	69da      	ldr	r2, [r3, #28]
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	f003 030f 	and.w	r3, r3, #15
 800ac24:	2101      	movs	r1, #1
 800ac26:	fa01 f303 	lsl.w	r3, r1, r3
 800ac2a:	041b      	lsls	r3, r3, #16
 800ac2c:	68f9      	ldr	r1, [r7, #12]
 800ac2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac32:	4313      	orrs	r3, r2
 800ac34:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	015a      	lsls	r2, r3, #5
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d119      	bne.n	800ac80 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	791b      	ldrb	r3, [r3, #4]
 800ac66:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ac68:	430b      	orrs	r3, r1
 800ac6a:	431a      	orrs	r2, r3
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	0159      	lsls	r1, r3, #5
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	440b      	add	r3, r1
 800ac74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac78:	4619      	mov	r1, r3
 800ac7a:	4b05      	ldr	r3, [pc, #20]	@ (800ac90 <USB_ActivateEndpoint+0x10c>)
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	10008000 	.word	0x10008000

0800ac94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	785b      	ldrb	r3, [r3, #1]
 800acac:	2b01      	cmp	r3, #1
 800acae:	d161      	bne.n	800ad74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	015a      	lsls	r2, r3, #5
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	4413      	add	r3, r2
 800acb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800acc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acc6:	d11f      	bne.n	800ad08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	015a      	lsls	r2, r3, #5
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	4413      	add	r3, r2
 800acd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	0151      	lsls	r1, r2, #5
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	440a      	add	r2, r1
 800acde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ace2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ace6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	015a      	lsls	r2, r3, #5
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	4413      	add	r3, r2
 800acf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	0151      	lsls	r1, r2, #5
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	440a      	add	r2, r1
 800acfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	f003 030f 	and.w	r3, r3, #15
 800ad18:	2101      	movs	r1, #1
 800ad1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	43db      	mvns	r3, r3
 800ad22:	68f9      	ldr	r1, [r7, #12]
 800ad24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad28:	4013      	ands	r3, r2
 800ad2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad32:	69da      	ldr	r2, [r3, #28]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	f003 030f 	and.w	r3, r3, #15
 800ad3c:	2101      	movs	r1, #1
 800ad3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	43db      	mvns	r3, r3
 800ad46:	68f9      	ldr	r1, [r7, #12]
 800ad48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	015a      	lsls	r2, r3, #5
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	4413      	add	r3, r2
 800ad58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	0159      	lsls	r1, r3, #5
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	440b      	add	r3, r1
 800ad66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	4b35      	ldr	r3, [pc, #212]	@ (800ae44 <USB_DeactivateEndpoint+0x1b0>)
 800ad6e:	4013      	ands	r3, r2
 800ad70:	600b      	str	r3, [r1, #0]
 800ad72:	e060      	b.n	800ae36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad8a:	d11f      	bne.n	800adcc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	015a      	lsls	r2, r3, #5
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	4413      	add	r3, r2
 800ad94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	0151      	lsls	r1, r2, #5
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	440a      	add	r2, r1
 800ada2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ada6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800adaa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	015a      	lsls	r2, r3, #5
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	4413      	add	r3, r2
 800adb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68ba      	ldr	r2, [r7, #8]
 800adbc:	0151      	lsls	r1, r2, #5
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	440a      	add	r2, r1
 800adc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adc6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800adca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800add2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	f003 030f 	and.w	r3, r3, #15
 800addc:	2101      	movs	r1, #1
 800adde:	fa01 f303 	lsl.w	r3, r1, r3
 800ade2:	041b      	lsls	r3, r3, #16
 800ade4:	43db      	mvns	r3, r3
 800ade6:	68f9      	ldr	r1, [r7, #12]
 800ade8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800adec:	4013      	ands	r3, r2
 800adee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adf6:	69da      	ldr	r2, [r3, #28]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	f003 030f 	and.w	r3, r3, #15
 800ae00:	2101      	movs	r1, #1
 800ae02:	fa01 f303 	lsl.w	r3, r1, r3
 800ae06:	041b      	lsls	r3, r3, #16
 800ae08:	43db      	mvns	r3, r3
 800ae0a:	68f9      	ldr	r1, [r7, #12]
 800ae0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae10:	4013      	ands	r3, r2
 800ae12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	0159      	lsls	r1, r3, #5
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	440b      	add	r3, r1
 800ae2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4b05      	ldr	r3, [pc, #20]	@ (800ae48 <USB_DeactivateEndpoint+0x1b4>)
 800ae32:	4013      	ands	r3, r2
 800ae34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3714      	adds	r7, #20
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr
 800ae44:	ec337800 	.word	0xec337800
 800ae48:	eff37800 	.word	0xeff37800

0800ae4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08a      	sub	sp, #40	@ 0x28
 800ae50:	af02      	add	r7, sp, #8
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	4613      	mov	r3, r2
 800ae58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	785b      	ldrb	r3, [r3, #1]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	f040 8181 	bne.w	800b170 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d132      	bne.n	800aedc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	015a      	lsls	r2, r3, #5
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae82:	691a      	ldr	r2, [r3, #16]
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	0159      	lsls	r1, r3, #5
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	440b      	add	r3, r1
 800ae8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae90:	4619      	mov	r1, r3
 800ae92:	4ba5      	ldr	r3, [pc, #660]	@ (800b128 <USB_EPStartXfer+0x2dc>)
 800ae94:	4013      	ands	r3, r2
 800ae96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	015a      	lsls	r2, r3, #5
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	4413      	add	r3, r2
 800aea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	0151      	lsls	r1, r2, #5
 800aeaa:	69fa      	ldr	r2, [r7, #28]
 800aeac:	440a      	add	r2, r1
 800aeae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aeb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	015a      	lsls	r2, r3, #5
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	4413      	add	r3, r2
 800aec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aec4:	691a      	ldr	r2, [r3, #16]
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	0159      	lsls	r1, r3, #5
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	440b      	add	r3, r1
 800aece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aed2:	4619      	mov	r1, r3
 800aed4:	4b95      	ldr	r3, [pc, #596]	@ (800b12c <USB_EPStartXfer+0x2e0>)
 800aed6:	4013      	ands	r3, r2
 800aed8:	610b      	str	r3, [r1, #16]
 800aeda:	e092      	b.n	800b002 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	015a      	lsls	r2, r3, #5
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	4413      	add	r3, r2
 800aee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aee8:	691a      	ldr	r2, [r3, #16]
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	0159      	lsls	r1, r3, #5
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	440b      	add	r3, r1
 800aef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aef6:	4619      	mov	r1, r3
 800aef8:	4b8c      	ldr	r3, [pc, #560]	@ (800b12c <USB_EPStartXfer+0x2e0>)
 800aefa:	4013      	ands	r3, r2
 800aefc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	015a      	lsls	r2, r3, #5
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	4413      	add	r3, r2
 800af06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af0a:	691a      	ldr	r2, [r3, #16]
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	0159      	lsls	r1, r3, #5
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	440b      	add	r3, r1
 800af14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af18:	4619      	mov	r1, r3
 800af1a:	4b83      	ldr	r3, [pc, #524]	@ (800b128 <USB_EPStartXfer+0x2dc>)
 800af1c:	4013      	ands	r3, r2
 800af1e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800af20:	69bb      	ldr	r3, [r7, #24]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d11a      	bne.n	800af5c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	691a      	ldr	r2, [r3, #16]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d903      	bls.n	800af3a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	689a      	ldr	r2, [r3, #8]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	015a      	lsls	r2, r3, #5
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	4413      	add	r3, r2
 800af42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	69ba      	ldr	r2, [r7, #24]
 800af4a:	0151      	lsls	r1, r2, #5
 800af4c:	69fa      	ldr	r2, [r7, #28]
 800af4e:	440a      	add	r2, r1
 800af50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af58:	6113      	str	r3, [r2, #16]
 800af5a:	e01b      	b.n	800af94 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	015a      	lsls	r2, r3, #5
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	4413      	add	r3, r2
 800af64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af68:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	6919      	ldr	r1, [r3, #16]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	440b      	add	r3, r1
 800af74:	1e59      	subs	r1, r3, #1
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	fbb1 f3f3 	udiv	r3, r1, r3
 800af7e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800af80:	4b6b      	ldr	r3, [pc, #428]	@ (800b130 <USB_EPStartXfer+0x2e4>)
 800af82:	400b      	ands	r3, r1
 800af84:	69b9      	ldr	r1, [r7, #24]
 800af86:	0148      	lsls	r0, r1, #5
 800af88:	69f9      	ldr	r1, [r7, #28]
 800af8a:	4401      	add	r1, r0
 800af8c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800af90:	4313      	orrs	r3, r2
 800af92:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afa0:	691a      	ldr	r2, [r3, #16]
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afaa:	69b9      	ldr	r1, [r7, #24]
 800afac:	0148      	lsls	r0, r1, #5
 800afae:	69f9      	ldr	r1, [r7, #28]
 800afb0:	4401      	add	r1, r0
 800afb2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800afb6:	4313      	orrs	r3, r2
 800afb8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	791b      	ldrb	r3, [r3, #4]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d11f      	bne.n	800b002 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	015a      	lsls	r2, r3, #5
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	4413      	add	r3, r2
 800afca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	69ba      	ldr	r2, [r7, #24]
 800afd2:	0151      	lsls	r1, r2, #5
 800afd4:	69fa      	ldr	r2, [r7, #28]
 800afd6:	440a      	add	r2, r1
 800afd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afdc:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800afe0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	015a      	lsls	r2, r3, #5
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	4413      	add	r3, r2
 800afea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	69ba      	ldr	r2, [r7, #24]
 800aff2:	0151      	lsls	r1, r2, #5
 800aff4:	69fa      	ldr	r2, [r7, #28]
 800aff6:	440a      	add	r2, r1
 800aff8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800affc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b000:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b002:	79fb      	ldrb	r3, [r7, #7]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d14b      	bne.n	800b0a0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	69db      	ldr	r3, [r3, #28]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d009      	beq.n	800b024 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b01c:	461a      	mov	r2, r3
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	791b      	ldrb	r3, [r3, #4]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d128      	bne.n	800b07e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d110      	bne.n	800b05e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	015a      	lsls	r2, r3, #5
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4413      	add	r3, r2
 800b044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	0151      	lsls	r1, r2, #5
 800b04e:	69fa      	ldr	r2, [r7, #28]
 800b050:	440a      	add	r2, r1
 800b052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b056:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b05a:	6013      	str	r3, [r2, #0]
 800b05c:	e00f      	b.n	800b07e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	015a      	lsls	r2, r3, #5
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	4413      	add	r3, r2
 800b066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	69ba      	ldr	r2, [r7, #24]
 800b06e:	0151      	lsls	r1, r2, #5
 800b070:	69fa      	ldr	r2, [r7, #28]
 800b072:	440a      	add	r2, r1
 800b074:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b07c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	015a      	lsls	r2, r3, #5
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	4413      	add	r3, r2
 800b086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	69ba      	ldr	r2, [r7, #24]
 800b08e:	0151      	lsls	r1, r2, #5
 800b090:	69fa      	ldr	r2, [r7, #28]
 800b092:	440a      	add	r2, r1
 800b094:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b098:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	e16a      	b.n	800b376 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	015a      	lsls	r2, r3, #5
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	0151      	lsls	r1, r2, #5
 800b0b2:	69fa      	ldr	r2, [r7, #28]
 800b0b4:	440a      	add	r2, r1
 800b0b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0ba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b0be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	791b      	ldrb	r3, [r3, #4]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d015      	beq.n	800b0f4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 8152 	beq.w	800b376 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	f003 030f 	and.w	r3, r3, #15
 800b0e2:	2101      	movs	r1, #1
 800b0e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b0e8:	69f9      	ldr	r1, [r7, #28]
 800b0ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	634b      	str	r3, [r1, #52]	@ 0x34
 800b0f2:	e140      	b.n	800b376 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b100:	2b00      	cmp	r3, #0
 800b102:	d117      	bne.n	800b134 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	015a      	lsls	r2, r3, #5
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	4413      	add	r3, r2
 800b10c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	69ba      	ldr	r2, [r7, #24]
 800b114:	0151      	lsls	r1, r2, #5
 800b116:	69fa      	ldr	r2, [r7, #28]
 800b118:	440a      	add	r2, r1
 800b11a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b11e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b122:	6013      	str	r3, [r2, #0]
 800b124:	e016      	b.n	800b154 <USB_EPStartXfer+0x308>
 800b126:	bf00      	nop
 800b128:	e007ffff 	.word	0xe007ffff
 800b12c:	fff80000 	.word	0xfff80000
 800b130:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	015a      	lsls	r2, r3, #5
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	4413      	add	r3, r2
 800b13c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	0151      	lsls	r1, r2, #5
 800b146:	69fa      	ldr	r2, [r7, #28]
 800b148:	440a      	add	r2, r1
 800b14a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b14e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b152:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	68d9      	ldr	r1, [r3, #12]
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	781a      	ldrb	r2, [r3, #0]
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	b298      	uxth	r0, r3
 800b162:	79fb      	ldrb	r3, [r7, #7]
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	4603      	mov	r3, r0
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f000 f9b9 	bl	800b4e0 <USB_WritePacket>
 800b16e:	e102      	b.n	800b376 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	4413      	add	r3, r2
 800b178:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b17c:	691a      	ldr	r2, [r3, #16]
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	0159      	lsls	r1, r3, #5
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	440b      	add	r3, r1
 800b186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b18a:	4619      	mov	r1, r3
 800b18c:	4b7c      	ldr	r3, [pc, #496]	@ (800b380 <USB_EPStartXfer+0x534>)
 800b18e:	4013      	ands	r3, r2
 800b190:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	015a      	lsls	r2, r3, #5
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	4413      	add	r3, r2
 800b19a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b19e:	691a      	ldr	r2, [r3, #16]
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	0159      	lsls	r1, r3, #5
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	440b      	add	r3, r1
 800b1a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4b75      	ldr	r3, [pc, #468]	@ (800b384 <USB_EPStartXfer+0x538>)
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d12f      	bne.n	800b21a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	689a      	ldr	r2, [r3, #8]
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	689a      	ldr	r2, [r3, #8]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	015a      	lsls	r2, r3, #5
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	4413      	add	r3, r2
 800b1da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1de:	691a      	ldr	r2, [r3, #16]
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	6a1b      	ldr	r3, [r3, #32]
 800b1e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1e8:	69b9      	ldr	r1, [r7, #24]
 800b1ea:	0148      	lsls	r0, r1, #5
 800b1ec:	69f9      	ldr	r1, [r7, #28]
 800b1ee:	4401      	add	r1, r0
 800b1f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	0151      	lsls	r1, r2, #5
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	440a      	add	r2, r1
 800b20e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b212:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b216:	6113      	str	r3, [r2, #16]
 800b218:	e05f      	b.n	800b2da <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d123      	bne.n	800b26a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b22e:	691a      	ldr	r2, [r3, #16]
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b238:	69b9      	ldr	r1, [r7, #24]
 800b23a:	0148      	lsls	r0, r1, #5
 800b23c:	69f9      	ldr	r1, [r7, #28]
 800b23e:	4401      	add	r1, r0
 800b240:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b244:	4313      	orrs	r3, r2
 800b246:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	015a      	lsls	r2, r3, #5
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	4413      	add	r3, r2
 800b250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	69ba      	ldr	r2, [r7, #24]
 800b258:	0151      	lsls	r1, r2, #5
 800b25a:	69fa      	ldr	r2, [r7, #28]
 800b25c:	440a      	add	r2, r1
 800b25e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b262:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b266:	6113      	str	r3, [r2, #16]
 800b268:	e037      	b.n	800b2da <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	691a      	ldr	r2, [r3, #16]
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	4413      	add	r3, r2
 800b274:	1e5a      	subs	r2, r3, #1
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	8afa      	ldrh	r2, [r7, #22]
 800b286:	fb03 f202 	mul.w	r2, r3, r2
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	015a      	lsls	r2, r3, #5
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	4413      	add	r3, r2
 800b296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b29a:	691a      	ldr	r2, [r3, #16]
 800b29c:	8afb      	ldrh	r3, [r7, #22]
 800b29e:	04d9      	lsls	r1, r3, #19
 800b2a0:	4b39      	ldr	r3, [pc, #228]	@ (800b388 <USB_EPStartXfer+0x53c>)
 800b2a2:	400b      	ands	r3, r1
 800b2a4:	69b9      	ldr	r1, [r7, #24]
 800b2a6:	0148      	lsls	r0, r1, #5
 800b2a8:	69f9      	ldr	r1, [r7, #28]
 800b2aa:	4401      	add	r1, r0
 800b2ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	015a      	lsls	r2, r3, #5
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2c0:	691a      	ldr	r2, [r3, #16]
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2ca:	69b9      	ldr	r1, [r7, #24]
 800b2cc:	0148      	lsls	r0, r1, #5
 800b2ce:	69f9      	ldr	r1, [r7, #28]
 800b2d0:	4401      	add	r1, r0
 800b2d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b2da:	79fb      	ldrb	r3, [r7, #7]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d10d      	bne.n	800b2fc <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d009      	beq.n	800b2fc <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	68d9      	ldr	r1, [r3, #12]
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	015a      	lsls	r2, r3, #5
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2f8:	460a      	mov	r2, r1
 800b2fa:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	791b      	ldrb	r3, [r3, #4]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d128      	bne.n	800b356 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b310:	2b00      	cmp	r3, #0
 800b312:	d110      	bne.n	800b336 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	015a      	lsls	r2, r3, #5
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	4413      	add	r3, r2
 800b31c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	69ba      	ldr	r2, [r7, #24]
 800b324:	0151      	lsls	r1, r2, #5
 800b326:	69fa      	ldr	r2, [r7, #28]
 800b328:	440a      	add	r2, r1
 800b32a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b32e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b332:	6013      	str	r3, [r2, #0]
 800b334:	e00f      	b.n	800b356 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	015a      	lsls	r2, r3, #5
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	4413      	add	r3, r2
 800b33e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	69ba      	ldr	r2, [r7, #24]
 800b346:	0151      	lsls	r1, r2, #5
 800b348:	69fa      	ldr	r2, [r7, #28]
 800b34a:	440a      	add	r2, r1
 800b34c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b354:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	015a      	lsls	r2, r3, #5
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	4413      	add	r3, r2
 800b35e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	0151      	lsls	r1, r2, #5
 800b368:	69fa      	ldr	r2, [r7, #28]
 800b36a:	440a      	add	r2, r1
 800b36c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b370:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b374:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3720      	adds	r7, #32
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	fff80000 	.word	0xfff80000
 800b384:	e007ffff 	.word	0xe007ffff
 800b388:	1ff80000 	.word	0x1ff80000

0800b38c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b396:	2300      	movs	r3, #0
 800b398:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	785b      	ldrb	r3, [r3, #1]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d14a      	bne.n	800b440 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	015a      	lsls	r2, r3, #5
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3c2:	f040 8086 	bne.w	800b4d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	015a      	lsls	r2, r3, #5
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	7812      	ldrb	r2, [r2, #0]
 800b3da:	0151      	lsls	r1, r2, #5
 800b3dc:	693a      	ldr	r2, [r7, #16]
 800b3de:	440a      	add	r2, r1
 800b3e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b3e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	683a      	ldr	r2, [r7, #0]
 800b3fc:	7812      	ldrb	r2, [r2, #0]
 800b3fe:	0151      	lsls	r1, r2, #5
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	440a      	add	r2, r1
 800b404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b408:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b40c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	3301      	adds	r3, #1
 800b412:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d902      	bls.n	800b424 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
 800b420:	75fb      	strb	r3, [r7, #23]
          break;
 800b422:	e056      	b.n	800b4d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	015a      	lsls	r2, r3, #5
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	4413      	add	r3, r2
 800b42e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b438:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b43c:	d0e7      	beq.n	800b40e <USB_EPStopXfer+0x82>
 800b43e:	e048      	b.n	800b4d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	015a      	lsls	r2, r3, #5
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	4413      	add	r3, r2
 800b44a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b458:	d13b      	bne.n	800b4d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	7812      	ldrb	r2, [r2, #0]
 800b46e:	0151      	lsls	r1, r2, #5
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	440a      	add	r2, r1
 800b474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b478:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b47c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	015a      	lsls	r2, r3, #5
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	4413      	add	r3, r2
 800b488:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	7812      	ldrb	r2, [r2, #0]
 800b492:	0151      	lsls	r1, r2, #5
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	440a      	add	r2, r1
 800b498:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b49c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b4a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d902      	bls.n	800b4b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b4b6:	e00c      	b.n	800b4d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	015a      	lsls	r2, r3, #5
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4d0:	d0e7      	beq.n	800b4a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b4d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	371c      	adds	r7, #28
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b089      	sub	sp, #36	@ 0x24
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	4611      	mov	r1, r2
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	71fb      	strb	r3, [r7, #7]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b4fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b502:	2b00      	cmp	r3, #0
 800b504:	d123      	bne.n	800b54e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b506:	88bb      	ldrh	r3, [r7, #4]
 800b508:	3303      	adds	r3, #3
 800b50a:	089b      	lsrs	r3, r3, #2
 800b50c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b50e:	2300      	movs	r3, #0
 800b510:	61bb      	str	r3, [r7, #24]
 800b512:	e018      	b.n	800b546 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	031a      	lsls	r2, r3, #12
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	4413      	add	r3, r2
 800b51c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b520:	461a      	mov	r2, r3
 800b522:	69fb      	ldr	r3, [r7, #28]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	3301      	adds	r3, #1
 800b52c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	3301      	adds	r3, #1
 800b532:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	3301      	adds	r3, #1
 800b538:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	3301      	adds	r3, #1
 800b53e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	3301      	adds	r3, #1
 800b544:	61bb      	str	r3, [r7, #24]
 800b546:	69ba      	ldr	r2, [r7, #24]
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d3e2      	bcc.n	800b514 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b54e:	2300      	movs	r3, #0
}
 800b550:	4618      	mov	r0, r3
 800b552:	3724      	adds	r7, #36	@ 0x24
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b08b      	sub	sp, #44	@ 0x2c
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	4613      	mov	r3, r2
 800b568:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b572:	88fb      	ldrh	r3, [r7, #6]
 800b574:	089b      	lsrs	r3, r3, #2
 800b576:	b29b      	uxth	r3, r3
 800b578:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b57a:	88fb      	ldrh	r3, [r7, #6]
 800b57c:	f003 0303 	and.w	r3, r3, #3
 800b580:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b582:	2300      	movs	r3, #0
 800b584:	623b      	str	r3, [r7, #32]
 800b586:	e014      	b.n	800b5b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b592:	601a      	str	r2, [r3, #0]
    pDest++;
 800b594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b596:	3301      	adds	r3, #1
 800b598:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59c:	3301      	adds	r3, #1
 800b59e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	623b      	str	r3, [r7, #32]
 800b5b2:	6a3a      	ldr	r2, [r7, #32]
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d3e6      	bcc.n	800b588 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b5ba:	8bfb      	ldrh	r3, [r7, #30]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d01e      	beq.n	800b5fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	f107 0310 	add.w	r3, r7, #16
 800b5d0:	6812      	ldr	r2, [r2, #0]
 800b5d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b5d4:	693a      	ldr	r2, [r7, #16]
 800b5d6:	6a3b      	ldr	r3, [r7, #32]
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	00db      	lsls	r3, r3, #3
 800b5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e4:	701a      	strb	r2, [r3, #0]
      i++;
 800b5e6:	6a3b      	ldr	r3, [r7, #32]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	623b      	str	r3, [r7, #32]
      pDest++;
 800b5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b5f2:	8bfb      	ldrh	r3, [r7, #30]
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b5f8:	8bfb      	ldrh	r3, [r7, #30]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1ea      	bne.n	800b5d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b600:	4618      	mov	r0, r3
 800b602:	372c      	adds	r7, #44	@ 0x2c
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	785b      	ldrb	r3, [r3, #1]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d12c      	bne.n	800b682 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	015a      	lsls	r2, r3, #5
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	4413      	add	r3, r2
 800b630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	db12      	blt.n	800b660 <USB_EPSetStall+0x54>
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00f      	beq.n	800b660 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	015a      	lsls	r2, r3, #5
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	4413      	add	r3, r2
 800b648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68ba      	ldr	r2, [r7, #8]
 800b650:	0151      	lsls	r1, r2, #5
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	440a      	add	r2, r1
 800b656:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b65a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b65e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	015a      	lsls	r2, r3, #5
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	4413      	add	r3, r2
 800b668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	68ba      	ldr	r2, [r7, #8]
 800b670:	0151      	lsls	r1, r2, #5
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	440a      	add	r2, r1
 800b676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b67a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b67e:	6013      	str	r3, [r2, #0]
 800b680:	e02b      	b.n	800b6da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	015a      	lsls	r2, r3, #5
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	4413      	add	r3, r2
 800b68a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	db12      	blt.n	800b6ba <USB_EPSetStall+0xae>
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00f      	beq.n	800b6ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	015a      	lsls	r2, r3, #5
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	0151      	lsls	r1, r2, #5
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	440a      	add	r2, r1
 800b6b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b6b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	015a      	lsls	r2, r3, #5
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	0151      	lsls	r1, r2, #5
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	440a      	add	r2, r1
 800b6d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b6d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	785b      	ldrb	r3, [r3, #1]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d128      	bne.n	800b756 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	015a      	lsls	r2, r3, #5
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	4413      	add	r3, r2
 800b70c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	0151      	lsls	r1, r2, #5
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	440a      	add	r2, r1
 800b71a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b71e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b722:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	791b      	ldrb	r3, [r3, #4]
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d003      	beq.n	800b734 <USB_EPClearStall+0x4c>
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	791b      	ldrb	r3, [r3, #4]
 800b730:	2b02      	cmp	r3, #2
 800b732:	d138      	bne.n	800b7a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	015a      	lsls	r2, r3, #5
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	4413      	add	r3, r2
 800b73c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	0151      	lsls	r1, r2, #5
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	440a      	add	r2, r1
 800b74a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b74e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b752:	6013      	str	r3, [r2, #0]
 800b754:	e027      	b.n	800b7a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	015a      	lsls	r2, r3, #5
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	4413      	add	r3, r2
 800b75e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	0151      	lsls	r1, r2, #5
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	440a      	add	r2, r1
 800b76c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b770:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b774:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	791b      	ldrb	r3, [r3, #4]
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d003      	beq.n	800b786 <USB_EPClearStall+0x9e>
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	791b      	ldrb	r3, [r3, #4]
 800b782:	2b02      	cmp	r3, #2
 800b784:	d10f      	bne.n	800b7a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	015a      	lsls	r2, r3, #5
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	4413      	add	r3, r2
 800b78e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	0151      	lsls	r1, r2, #5
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	440a      	add	r2, r1
 800b79c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b7d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b7d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	78fb      	ldrb	r3, [r7, #3]
 800b7e2:	011b      	lsls	r3, r3, #4
 800b7e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b7e8:	68f9      	ldr	r1, [r7, #12]
 800b7ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b800:	b480      	push	{r7}
 800b802:	b085      	sub	sp, #20
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b81a:	f023 0303 	bic.w	r3, r3, #3
 800b81e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b82e:	f023 0302 	bic.w	r3, r3, #2
 800b832:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b842:	b480      	push	{r7}
 800b844:	b085      	sub	sp, #20
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b85c:	f023 0303 	bic.w	r3, r3, #3
 800b860:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b870:	f043 0302 	orr.w	r3, r3, #2
 800b874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	699b      	ldr	r3, [r3, #24]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	4013      	ands	r3, r2
 800b89a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b89c:	68fb      	ldr	r3, [r7, #12]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b085      	sub	sp, #20
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8bc:	699b      	ldr	r3, [r3, #24]
 800b8be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8c6:	69db      	ldr	r3, [r3, #28]
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	0c1b      	lsrs	r3, r3, #16
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3714      	adds	r7, #20
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8de:	b480      	push	{r7}
 800b8e0:	b085      	sub	sp, #20
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8f0:	699b      	ldr	r3, [r3, #24]
 800b8f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8fa:	69db      	ldr	r3, [r3, #28]
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	4013      	ands	r3, r2
 800b900:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	b29b      	uxth	r3, r3
}
 800b906:	4618      	mov	r0, r3
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b912:	b480      	push	{r7}
 800b914:	b085      	sub	sp, #20
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	460b      	mov	r3, r1
 800b91c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b922:	78fb      	ldrb	r3, [r7, #3]
 800b924:	015a      	lsls	r2, r3, #5
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	4413      	add	r3, r2
 800b92a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b938:	695b      	ldr	r3, [r3, #20]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	4013      	ands	r3, r2
 800b93e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b940:	68bb      	ldr	r3, [r7, #8]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3714      	adds	r7, #20
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b94e:	b480      	push	{r7}
 800b950:	b087      	sub	sp, #28
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	460b      	mov	r3, r1
 800b958:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b96e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b970:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b972:	78fb      	ldrb	r3, [r7, #3]
 800b974:	f003 030f 	and.w	r3, r3, #15
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	fa22 f303 	lsr.w	r3, r2, r3
 800b97e:	01db      	lsls	r3, r3, #7
 800b980:	b2db      	uxtb	r3, r3
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	4313      	orrs	r3, r2
 800b986:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b988:	78fb      	ldrb	r3, [r7, #3]
 800b98a:	015a      	lsls	r2, r3, #5
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	4413      	add	r3, r2
 800b990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	4013      	ands	r3, r2
 800b99a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b99c:	68bb      	ldr	r3, [r7, #8]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	371c      	adds	r7, #28
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9aa:	b480      	push	{r7}
 800b9ac:	b083      	sub	sp, #12
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	f003 0301 	and.w	r3, r3, #1
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	370c      	adds	r7, #12
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
	...

0800b9c8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	4b09      	ldr	r3, [pc, #36]	@ (800ba0c <USB_ActivateSetup+0x44>)
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b9fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr
 800ba0c:	fffff800 	.word	0xfffff800

0800ba10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	607a      	str	r2, [r7, #4]
 800ba1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	333c      	adds	r3, #60	@ 0x3c
 800ba26:	3304      	adds	r3, #4
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	4a26      	ldr	r2, [pc, #152]	@ (800bac8 <USB_EP0_OutStart+0xb8>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d90a      	bls.n	800ba4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba44:	d101      	bne.n	800ba4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	e037      	b.n	800baba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba50:	461a      	mov	r2, r3
 800ba52:	2300      	movs	r3, #0
 800ba54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	697a      	ldr	r2, [r7, #20]
 800ba60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba78:	f043 0318 	orr.w	r3, r3, #24
 800ba7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	697a      	ldr	r2, [r7, #20]
 800ba88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba8c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ba90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ba92:	7afb      	ldrb	r3, [r7, #11]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d10f      	bne.n	800bab8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba9e:	461a      	mov	r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bab2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bab6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	371c      	adds	r7, #28
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop
 800bac8:	4f54300a 	.word	0x4f54300a

0800bacc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bad4:	2300      	movs	r3, #0
 800bad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	3301      	adds	r3, #1
 800badc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bae4:	d901      	bls.n	800baea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bae6:	2303      	movs	r3, #3
 800bae8:	e01b      	b.n	800bb22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	daf2      	bge.n	800bad8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800baf2:	2300      	movs	r3, #0
 800baf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	f043 0201 	orr.w	r2, r3, #1
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	3301      	adds	r3, #1
 800bb06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb0e:	d901      	bls.n	800bb14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb10:	2303      	movs	r3, #3
 800bb12:	e006      	b.n	800bb22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	f003 0301 	and.w	r3, r3, #1
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d0f0      	beq.n	800bb02 <USB_CoreReset+0x36>

  return HAL_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
	...

0800bb30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb3c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bb40:	f002 fd8c 	bl	800e65c <malloc>
 800bb44:	4603      	mov	r3, r0
 800bb46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d109      	bne.n	800bb62 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	32b0      	adds	r2, #176	@ 0xb0
 800bb58:	2100      	movs	r1, #0
 800bb5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bb5e:	2302      	movs	r3, #2
 800bb60:	e0d4      	b.n	800bd0c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bb62:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bb66:	2100      	movs	r1, #0
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f002 fe35 	bl	800e7d8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	32b0      	adds	r2, #176	@ 0xb0
 800bb78:	68f9      	ldr	r1, [r7, #12]
 800bb7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	32b0      	adds	r2, #176	@ 0xb0
 800bb88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	7c1b      	ldrb	r3, [r3, #16]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d138      	bne.n	800bc0c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bb9a:	4b5e      	ldr	r3, [pc, #376]	@ (800bd14 <USBD_CDC_Init+0x1e4>)
 800bb9c:	7819      	ldrb	r1, [r3, #0]
 800bb9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bba2:	2202      	movs	r2, #2
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f002 fbb6 	bl	800e316 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bbaa:	4b5a      	ldr	r3, [pc, #360]	@ (800bd14 <USBD_CDC_Init+0x1e4>)
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	f003 020f 	and.w	r2, r3, #15
 800bbb2:	6879      	ldr	r1, [r7, #4]
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	440b      	add	r3, r1
 800bbbe:	3324      	adds	r3, #36	@ 0x24
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bbc4:	4b54      	ldr	r3, [pc, #336]	@ (800bd18 <USBD_CDC_Init+0x1e8>)
 800bbc6:	7819      	ldrb	r1, [r3, #0]
 800bbc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbcc:	2202      	movs	r2, #2
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f002 fba1 	bl	800e316 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bbd4:	4b50      	ldr	r3, [pc, #320]	@ (800bd18 <USBD_CDC_Init+0x1e8>)
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	f003 020f 	and.w	r2, r3, #15
 800bbdc:	6879      	ldr	r1, [r7, #4]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	440b      	add	r3, r1
 800bbe8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bbec:	2201      	movs	r2, #1
 800bbee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bbf0:	4b4a      	ldr	r3, [pc, #296]	@ (800bd1c <USBD_CDC_Init+0x1ec>)
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	f003 020f 	and.w	r2, r3, #15
 800bbf8:	6879      	ldr	r1, [r7, #4]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4413      	add	r3, r2
 800bc00:	009b      	lsls	r3, r3, #2
 800bc02:	440b      	add	r3, r1
 800bc04:	3326      	adds	r3, #38	@ 0x26
 800bc06:	2210      	movs	r2, #16
 800bc08:	801a      	strh	r2, [r3, #0]
 800bc0a:	e035      	b.n	800bc78 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bc0c:	4b41      	ldr	r3, [pc, #260]	@ (800bd14 <USBD_CDC_Init+0x1e4>)
 800bc0e:	7819      	ldrb	r1, [r3, #0]
 800bc10:	2340      	movs	r3, #64	@ 0x40
 800bc12:	2202      	movs	r2, #2
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f002 fb7e 	bl	800e316 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bc1a:	4b3e      	ldr	r3, [pc, #248]	@ (800bd14 <USBD_CDC_Init+0x1e4>)
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	f003 020f 	and.w	r2, r3, #15
 800bc22:	6879      	ldr	r1, [r7, #4]
 800bc24:	4613      	mov	r3, r2
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	440b      	add	r3, r1
 800bc2e:	3324      	adds	r3, #36	@ 0x24
 800bc30:	2201      	movs	r2, #1
 800bc32:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc34:	4b38      	ldr	r3, [pc, #224]	@ (800bd18 <USBD_CDC_Init+0x1e8>)
 800bc36:	7819      	ldrb	r1, [r3, #0]
 800bc38:	2340      	movs	r3, #64	@ 0x40
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f002 fb6a 	bl	800e316 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bc42:	4b35      	ldr	r3, [pc, #212]	@ (800bd18 <USBD_CDC_Init+0x1e8>)
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	f003 020f 	and.w	r2, r3, #15
 800bc4a:	6879      	ldr	r1, [r7, #4]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	440b      	add	r3, r1
 800bc56:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bc5e:	4b2f      	ldr	r3, [pc, #188]	@ (800bd1c <USBD_CDC_Init+0x1ec>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	f003 020f 	and.w	r2, r3, #15
 800bc66:	6879      	ldr	r1, [r7, #4]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	440b      	add	r3, r1
 800bc72:	3326      	adds	r3, #38	@ 0x26
 800bc74:	2210      	movs	r2, #16
 800bc76:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc78:	4b28      	ldr	r3, [pc, #160]	@ (800bd1c <USBD_CDC_Init+0x1ec>)
 800bc7a:	7819      	ldrb	r1, [r3, #0]
 800bc7c:	2308      	movs	r3, #8
 800bc7e:	2203      	movs	r2, #3
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f002 fb48 	bl	800e316 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bc86:	4b25      	ldr	r3, [pc, #148]	@ (800bd1c <USBD_CDC_Init+0x1ec>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	f003 020f 	and.w	r2, r3, #15
 800bc8e:	6879      	ldr	r1, [r7, #4]
 800bc90:	4613      	mov	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	440b      	add	r3, r1
 800bc9a:	3324      	adds	r3, #36	@ 0x24
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	33b0      	adds	r3, #176	@ 0xb0
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4413      	add	r3, r2
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800bcd6:	2302      	movs	r3, #2
 800bcd8:	e018      	b.n	800bd0c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	7c1b      	ldrb	r3, [r3, #16]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10a      	bne.n	800bcf8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bce2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd18 <USBD_CDC_Init+0x1e8>)
 800bce4:	7819      	ldrb	r1, [r3, #0]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bcec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f002 fbff 	bl	800e4f4 <USBD_LL_PrepareReceive>
 800bcf6:	e008      	b.n	800bd0a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bcf8:	4b07      	ldr	r3, [pc, #28]	@ (800bd18 <USBD_CDC_Init+0x1e8>)
 800bcfa:	7819      	ldrb	r1, [r3, #0]
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd02:	2340      	movs	r3, #64	@ 0x40
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f002 fbf5 	bl	800e4f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd0a:	2300      	movs	r3, #0
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3710      	adds	r7, #16
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	2000009f 	.word	0x2000009f
 800bd18:	200000a0 	.word	0x200000a0
 800bd1c:	200000a1 	.word	0x200000a1

0800bd20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bd2c:	4b3a      	ldr	r3, [pc, #232]	@ (800be18 <USBD_CDC_DeInit+0xf8>)
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	4619      	mov	r1, r3
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f002 fb15 	bl	800e362 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bd38:	4b37      	ldr	r3, [pc, #220]	@ (800be18 <USBD_CDC_DeInit+0xf8>)
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	f003 020f 	and.w	r2, r3, #15
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	4613      	mov	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	440b      	add	r3, r1
 800bd4c:	3324      	adds	r3, #36	@ 0x24
 800bd4e:	2200      	movs	r2, #0
 800bd50:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bd52:	4b32      	ldr	r3, [pc, #200]	@ (800be1c <USBD_CDC_DeInit+0xfc>)
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f002 fb02 	bl	800e362 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bd5e:	4b2f      	ldr	r3, [pc, #188]	@ (800be1c <USBD_CDC_DeInit+0xfc>)
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	f003 020f 	and.w	r2, r3, #15
 800bd66:	6879      	ldr	r1, [r7, #4]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	4413      	add	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	440b      	add	r3, r1
 800bd72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bd76:	2200      	movs	r2, #0
 800bd78:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bd7a:	4b29      	ldr	r3, [pc, #164]	@ (800be20 <USBD_CDC_DeInit+0x100>)
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f002 faee 	bl	800e362 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bd86:	4b26      	ldr	r3, [pc, #152]	@ (800be20 <USBD_CDC_DeInit+0x100>)
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	f003 020f 	and.w	r2, r3, #15
 800bd8e:	6879      	ldr	r1, [r7, #4]
 800bd90:	4613      	mov	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4413      	add	r3, r2
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	440b      	add	r3, r1
 800bd9a:	3324      	adds	r3, #36	@ 0x24
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bda0:	4b1f      	ldr	r3, [pc, #124]	@ (800be20 <USBD_CDC_DeInit+0x100>)
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	f003 020f 	and.w	r2, r3, #15
 800bda8:	6879      	ldr	r1, [r7, #4]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4413      	add	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	440b      	add	r3, r1
 800bdb4:	3326      	adds	r3, #38	@ 0x26
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	32b0      	adds	r2, #176	@ 0xb0
 800bdc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d01f      	beq.n	800be0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	33b0      	adds	r3, #176	@ 0xb0
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4413      	add	r3, r2
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	32b0      	adds	r2, #176	@ 0xb0
 800bdea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f002 fc3c 	bl	800e66c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	32b0      	adds	r2, #176	@ 0xb0
 800bdfe:	2100      	movs	r1, #0
 800be00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	2000009f 	.word	0x2000009f
 800be1c:	200000a0 	.word	0x200000a0
 800be20:	200000a1 	.word	0x200000a1

0800be24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	32b0      	adds	r2, #176	@ 0xb0
 800be38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800be3e:	2300      	movs	r3, #0
 800be40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800be42:	2300      	movs	r3, #0
 800be44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800be50:	2303      	movs	r3, #3
 800be52:	e0bf      	b.n	800bfd4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d050      	beq.n	800bf02 <USBD_CDC_Setup+0xde>
 800be60:	2b20      	cmp	r3, #32
 800be62:	f040 80af 	bne.w	800bfc4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	88db      	ldrh	r3, [r3, #6]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d03a      	beq.n	800bee4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	b25b      	sxtb	r3, r3
 800be74:	2b00      	cmp	r3, #0
 800be76:	da1b      	bge.n	800beb0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	33b0      	adds	r3, #176	@ 0xb0
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4413      	add	r3, r2
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800be8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800be90:	683a      	ldr	r2, [r7, #0]
 800be92:	88d2      	ldrh	r2, [r2, #6]
 800be94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	88db      	ldrh	r3, [r3, #6]
 800be9a:	2b07      	cmp	r3, #7
 800be9c:	bf28      	it	cs
 800be9e:	2307      	movcs	r3, #7
 800bea0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	89fa      	ldrh	r2, [r7, #14]
 800bea6:	4619      	mov	r1, r3
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f001 fdbd 	bl	800da28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800beae:	e090      	b.n	800bfd2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	785a      	ldrb	r2, [r3, #1]
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	88db      	ldrh	r3, [r3, #6]
 800bebe:	2b3f      	cmp	r3, #63	@ 0x3f
 800bec0:	d803      	bhi.n	800beca <USBD_CDC_Setup+0xa6>
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	88db      	ldrh	r3, [r3, #6]
 800bec6:	b2da      	uxtb	r2, r3
 800bec8:	e000      	b.n	800becc <USBD_CDC_Setup+0xa8>
 800beca:	2240      	movs	r2, #64	@ 0x40
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bed2:	6939      	ldr	r1, [r7, #16]
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800beda:	461a      	mov	r2, r3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f001 fdcf 	bl	800da80 <USBD_CtlPrepareRx>
      break;
 800bee2:	e076      	b.n	800bfd2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	33b0      	adds	r3, #176	@ 0xb0
 800beee:	009b      	lsls	r3, r3, #2
 800bef0:	4413      	add	r3, r2
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	7850      	ldrb	r0, [r2, #1]
 800befa:	2200      	movs	r2, #0
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	4798      	blx	r3
      break;
 800bf00:	e067      	b.n	800bfd2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	785b      	ldrb	r3, [r3, #1]
 800bf06:	2b0b      	cmp	r3, #11
 800bf08:	d851      	bhi.n	800bfae <USBD_CDC_Setup+0x18a>
 800bf0a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf10 <USBD_CDC_Setup+0xec>)
 800bf0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf10:	0800bf41 	.word	0x0800bf41
 800bf14:	0800bfbd 	.word	0x0800bfbd
 800bf18:	0800bfaf 	.word	0x0800bfaf
 800bf1c:	0800bfaf 	.word	0x0800bfaf
 800bf20:	0800bfaf 	.word	0x0800bfaf
 800bf24:	0800bfaf 	.word	0x0800bfaf
 800bf28:	0800bfaf 	.word	0x0800bfaf
 800bf2c:	0800bfaf 	.word	0x0800bfaf
 800bf30:	0800bfaf 	.word	0x0800bfaf
 800bf34:	0800bfaf 	.word	0x0800bfaf
 800bf38:	0800bf6b 	.word	0x0800bf6b
 800bf3c:	0800bf95 	.word	0x0800bf95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d107      	bne.n	800bf5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf4c:	f107 030a 	add.w	r3, r7, #10
 800bf50:	2202      	movs	r2, #2
 800bf52:	4619      	mov	r1, r3
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 fd67 	bl	800da28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf5a:	e032      	b.n	800bfc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f001 fce5 	bl	800d92e <USBD_CtlError>
            ret = USBD_FAIL;
 800bf64:	2303      	movs	r3, #3
 800bf66:	75fb      	strb	r3, [r7, #23]
          break;
 800bf68:	e02b      	b.n	800bfc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b03      	cmp	r3, #3
 800bf74:	d107      	bne.n	800bf86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bf76:	f107 030d 	add.w	r3, r7, #13
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f001 fd52 	bl	800da28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf84:	e01d      	b.n	800bfc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f001 fcd0 	bl	800d92e <USBD_CtlError>
            ret = USBD_FAIL;
 800bf8e:	2303      	movs	r3, #3
 800bf90:	75fb      	strb	r3, [r7, #23]
          break;
 800bf92:	e016      	b.n	800bfc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	2b03      	cmp	r3, #3
 800bf9e:	d00f      	beq.n	800bfc0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f001 fcc3 	bl	800d92e <USBD_CtlError>
            ret = USBD_FAIL;
 800bfa8:	2303      	movs	r3, #3
 800bfaa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bfac:	e008      	b.n	800bfc0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bfae:	6839      	ldr	r1, [r7, #0]
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f001 fcbc 	bl	800d92e <USBD_CtlError>
          ret = USBD_FAIL;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	75fb      	strb	r3, [r7, #23]
          break;
 800bfba:	e002      	b.n	800bfc2 <USBD_CDC_Setup+0x19e>
          break;
 800bfbc:	bf00      	nop
 800bfbe:	e008      	b.n	800bfd2 <USBD_CDC_Setup+0x1ae>
          break;
 800bfc0:	bf00      	nop
      }
      break;
 800bfc2:	e006      	b.n	800bfd2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f001 fcb1 	bl	800d92e <USBD_CtlError>
      ret = USBD_FAIL;
 800bfcc:	2303      	movs	r3, #3
 800bfce:	75fb      	strb	r3, [r7, #23]
      break;
 800bfd0:	bf00      	nop
  }

  return (uint8_t)ret;
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3718      	adds	r7, #24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	32b0      	adds	r2, #176	@ 0xb0
 800bffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c002:	2303      	movs	r3, #3
 800c004:	e065      	b.n	800c0d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	32b0      	adds	r2, #176	@ 0xb0
 800c010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c014:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c016:	78fb      	ldrb	r3, [r7, #3]
 800c018:	f003 020f 	and.w	r2, r3, #15
 800c01c:	6879      	ldr	r1, [r7, #4]
 800c01e:	4613      	mov	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	4413      	add	r3, r2
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	440b      	add	r3, r1
 800c028:	3318      	adds	r3, #24
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d02f      	beq.n	800c090 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c030:	78fb      	ldrb	r3, [r7, #3]
 800c032:	f003 020f 	and.w	r2, r3, #15
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	4613      	mov	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	440b      	add	r3, r1
 800c042:	3318      	adds	r3, #24
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	78fb      	ldrb	r3, [r7, #3]
 800c048:	f003 010f 	and.w	r1, r3, #15
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	460b      	mov	r3, r1
 800c050:	00db      	lsls	r3, r3, #3
 800c052:	440b      	add	r3, r1
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	4403      	add	r3, r0
 800c058:	331c      	adds	r3, #28
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c060:	fb01 f303 	mul.w	r3, r1, r3
 800c064:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c066:	2b00      	cmp	r3, #0
 800c068:	d112      	bne.n	800c090 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c06a:	78fb      	ldrb	r3, [r7, #3]
 800c06c:	f003 020f 	and.w	r2, r3, #15
 800c070:	6879      	ldr	r1, [r7, #4]
 800c072:	4613      	mov	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4413      	add	r3, r2
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	440b      	add	r3, r1
 800c07c:	3318      	adds	r3, #24
 800c07e:	2200      	movs	r2, #0
 800c080:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c082:	78f9      	ldrb	r1, [r7, #3]
 800c084:	2300      	movs	r3, #0
 800c086:	2200      	movs	r2, #0
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f002 fa12 	bl	800e4b2 <USBD_LL_Transmit>
 800c08e:	e01f      	b.n	800c0d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	2200      	movs	r2, #0
 800c094:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	33b0      	adds	r3, #176	@ 0xb0
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	691b      	ldr	r3, [r3, #16]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d010      	beq.n	800c0d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	33b0      	adds	r3, #176	@ 0xb0
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	4413      	add	r3, r2
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c0c6:	68ba      	ldr	r2, [r7, #8]
 800c0c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c0cc:	78fa      	ldrb	r2, [r7, #3]
 800c0ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b084      	sub	sp, #16
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	32b0      	adds	r2, #176	@ 0xb0
 800c0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	32b0      	adds	r2, #176	@ 0xb0
 800c100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d101      	bne.n	800c10c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c108:	2303      	movs	r3, #3
 800c10a:	e01a      	b.n	800c142 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c10c:	78fb      	ldrb	r3, [r7, #3]
 800c10e:	4619      	mov	r1, r3
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f002 fa10 	bl	800e536 <USBD_LL_GetRxDataSize>
 800c116:	4602      	mov	r2, r0
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	33b0      	adds	r3, #176	@ 0xb0
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c13c:	4611      	mov	r1, r2
 800c13e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b084      	sub	sp, #16
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	32b0      	adds	r2, #176	@ 0xb0
 800c15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c160:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c168:	2303      	movs	r3, #3
 800c16a:	e024      	b.n	800c1b6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	33b0      	adds	r3, #176	@ 0xb0
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	4413      	add	r3, r2
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d019      	beq.n	800c1b4 <USBD_CDC_EP0_RxReady+0x6a>
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c186:	2bff      	cmp	r3, #255	@ 0xff
 800c188:	d014      	beq.n	800c1b4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	33b0      	adds	r3, #176	@ 0xb0
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	4413      	add	r3, r2
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	68fa      	ldr	r2, [r7, #12]
 800c19e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c1a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c1aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	22ff      	movs	r2, #255	@ 0xff
 800c1b0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
	...

0800c1c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c1c8:	2182      	movs	r1, #130	@ 0x82
 800c1ca:	4818      	ldr	r0, [pc, #96]	@ (800c22c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c1cc:	f000 fd4f 	bl	800cc6e <USBD_GetEpDesc>
 800c1d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c1d2:	2101      	movs	r1, #1
 800c1d4:	4815      	ldr	r0, [pc, #84]	@ (800c22c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c1d6:	f000 fd4a 	bl	800cc6e <USBD_GetEpDesc>
 800c1da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c1dc:	2181      	movs	r1, #129	@ 0x81
 800c1de:	4813      	ldr	r0, [pc, #76]	@ (800c22c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c1e0:	f000 fd45 	bl	800cc6e <USBD_GetEpDesc>
 800c1e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d002      	beq.n	800c1f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	2210      	movs	r2, #16
 800c1f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d006      	beq.n	800c206 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c200:	711a      	strb	r2, [r3, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d006      	beq.n	800c21a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2200      	movs	r2, #0
 800c210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c214:	711a      	strb	r2, [r3, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2243      	movs	r2, #67	@ 0x43
 800c21e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c220:	4b02      	ldr	r3, [pc, #8]	@ (800c22c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c222:	4618      	mov	r0, r3
 800c224:	3718      	adds	r7, #24
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	2000005c 	.word	0x2000005c

0800c230 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c238:	2182      	movs	r1, #130	@ 0x82
 800c23a:	4818      	ldr	r0, [pc, #96]	@ (800c29c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c23c:	f000 fd17 	bl	800cc6e <USBD_GetEpDesc>
 800c240:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c242:	2101      	movs	r1, #1
 800c244:	4815      	ldr	r0, [pc, #84]	@ (800c29c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c246:	f000 fd12 	bl	800cc6e <USBD_GetEpDesc>
 800c24a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c24c:	2181      	movs	r1, #129	@ 0x81
 800c24e:	4813      	ldr	r0, [pc, #76]	@ (800c29c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c250:	f000 fd0d 	bl	800cc6e <USBD_GetEpDesc>
 800c254:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	2210      	movs	r2, #16
 800c260:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d006      	beq.n	800c276 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	2200      	movs	r2, #0
 800c26c:	711a      	strb	r2, [r3, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	f042 0202 	orr.w	r2, r2, #2
 800c274:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d006      	beq.n	800c28a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	711a      	strb	r2, [r3, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	f042 0202 	orr.w	r2, r2, #2
 800c288:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2243      	movs	r2, #67	@ 0x43
 800c28e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c290:	4b02      	ldr	r3, [pc, #8]	@ (800c29c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c292:	4618      	mov	r0, r3
 800c294:	3718      	adds	r7, #24
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	2000005c 	.word	0x2000005c

0800c2a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c2a8:	2182      	movs	r1, #130	@ 0x82
 800c2aa:	4818      	ldr	r0, [pc, #96]	@ (800c30c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c2ac:	f000 fcdf 	bl	800cc6e <USBD_GetEpDesc>
 800c2b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	4815      	ldr	r0, [pc, #84]	@ (800c30c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c2b6:	f000 fcda 	bl	800cc6e <USBD_GetEpDesc>
 800c2ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c2bc:	2181      	movs	r1, #129	@ 0x81
 800c2be:	4813      	ldr	r0, [pc, #76]	@ (800c30c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c2c0:	f000 fcd5 	bl	800cc6e <USBD_GetEpDesc>
 800c2c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	2210      	movs	r2, #16
 800c2d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d006      	beq.n	800c2e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2e0:	711a      	strb	r2, [r3, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d006      	beq.n	800c2fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2f4:	711a      	strb	r2, [r3, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2243      	movs	r2, #67	@ 0x43
 800c2fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c300:	4b02      	ldr	r3, [pc, #8]	@ (800c30c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c302:	4618      	mov	r0, r3
 800c304:	3718      	adds	r7, #24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	2000005c 	.word	0x2000005c

0800c310 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	220a      	movs	r2, #10
 800c31c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c31e:	4b03      	ldr	r3, [pc, #12]	@ (800c32c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c320:	4618      	mov	r0, r3
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr
 800c32c:	20000018 	.word	0x20000018

0800c330 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d101      	bne.n	800c344 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c340:	2303      	movs	r3, #3
 800c342:	e009      	b.n	800c358 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	33b0      	adds	r3, #176	@ 0xb0
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4413      	add	r3, r2
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c364:	b480      	push	{r7}
 800c366:	b087      	sub	sp, #28
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	32b0      	adds	r2, #176	@ 0xb0
 800c37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c37e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c386:	2303      	movs	r3, #3
 800c388:	e008      	b.n	800c39c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	68ba      	ldr	r2, [r7, #8]
 800c38e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	371c      	adds	r7, #28
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	32b0      	adds	r2, #176	@ 0xb0
 800c3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d101      	bne.n	800c3cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	e004      	b.n	800c3d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	683a      	ldr	r2, [r7, #0]
 800c3d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
	...

0800c3e4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	32b0      	adds	r2, #176	@ 0xb0
 800c3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3fa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c406:	2303      	movs	r3, #3
 800c408:	e025      	b.n	800c456 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c410:	2b00      	cmp	r3, #0
 800c412:	d11f      	bne.n	800c454 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2201      	movs	r2, #1
 800c418:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c41c:	4b10      	ldr	r3, [pc, #64]	@ (800c460 <USBD_CDC_TransmitPacket+0x7c>)
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	f003 020f 	and.w	r2, r3, #15
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	4613      	mov	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4413      	add	r3, r2
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	4403      	add	r3, r0
 800c436:	3318      	adds	r3, #24
 800c438:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c43a:	4b09      	ldr	r3, [pc, #36]	@ (800c460 <USBD_CDC_TransmitPacket+0x7c>)
 800c43c:	7819      	ldrb	r1, [r3, #0]
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f002 f831 	bl	800e4b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	2000009f 	.word	0x2000009f

0800c464 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	32b0      	adds	r2, #176	@ 0xb0
 800c476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c47a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	32b0      	adds	r2, #176	@ 0xb0
 800c486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d101      	bne.n	800c492 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c48e:	2303      	movs	r3, #3
 800c490:	e018      	b.n	800c4c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7c1b      	ldrb	r3, [r3, #16]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10a      	bne.n	800c4b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c49a:	4b0c      	ldr	r3, [pc, #48]	@ (800c4cc <USBD_CDC_ReceivePacket+0x68>)
 800c49c:	7819      	ldrb	r1, [r3, #0]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c4a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f002 f823 	bl	800e4f4 <USBD_LL_PrepareReceive>
 800c4ae:	e008      	b.n	800c4c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c4b0:	4b06      	ldr	r3, [pc, #24]	@ (800c4cc <USBD_CDC_ReceivePacket+0x68>)
 800c4b2:	7819      	ldrb	r1, [r3, #0]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c4ba:	2340      	movs	r3, #64	@ 0x40
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f002 f819 	bl	800e4f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	200000a0 	.word	0x200000a0

0800c4d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	e01f      	b.n	800c528 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d003      	beq.n	800c50e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2201      	movs	r2, #1
 800c512:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	79fa      	ldrb	r2, [r7, #7]
 800c51a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	f001 fe93 	bl	800e248 <USBD_LL_Init>
 800c522:	4603      	mov	r3, r0
 800c524:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c526:	7dfb      	ldrb	r3, [r7, #23]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3718      	adds	r7, #24
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c53a:	2300      	movs	r3, #0
 800c53c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d101      	bne.n	800c548 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c544:	2303      	movs	r3, #3
 800c546:	e025      	b.n	800c594 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	32ae      	adds	r2, #174	@ 0xae
 800c55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00f      	beq.n	800c584 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	32ae      	adds	r2, #174	@ 0xae
 800c56e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c574:	f107 020e 	add.w	r2, r7, #14
 800c578:	4610      	mov	r0, r2
 800c57a:	4798      	blx	r3
 800c57c:	4602      	mov	r2, r0
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c58a:	1c5a      	adds	r2, r3, #1
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	3710      	adds	r7, #16
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f001 fe9b 	bl	800e2e0 <USBD_LL_Start>
 800c5aa:	4603      	mov	r3, r0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3708      	adds	r7, #8
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c5bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b084      	sub	sp, #16
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d009      	beq.n	800c5f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	78fa      	ldrb	r2, [r7, #3]
 800c5ee:	4611      	mov	r1, r2
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	4798      	blx	r3
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	460b      	mov	r3, r1
 800c60c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c60e:	2300      	movs	r3, #0
 800c610:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	78fa      	ldrb	r2, [r7, #3]
 800c61c:	4611      	mov	r1, r2
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	4798      	blx	r3
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d001      	beq.n	800c62c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c628:	2303      	movs	r3, #3
 800c62a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c646:	6839      	ldr	r1, [r7, #0]
 800c648:	4618      	mov	r0, r3
 800c64a:	f001 f936 	bl	800d8ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2201      	movs	r2, #1
 800c652:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c65c:	461a      	mov	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c66a:	f003 031f 	and.w	r3, r3, #31
 800c66e:	2b02      	cmp	r3, #2
 800c670:	d01a      	beq.n	800c6a8 <USBD_LL_SetupStage+0x72>
 800c672:	2b02      	cmp	r3, #2
 800c674:	d822      	bhi.n	800c6bc <USBD_LL_SetupStage+0x86>
 800c676:	2b00      	cmp	r3, #0
 800c678:	d002      	beq.n	800c680 <USBD_LL_SetupStage+0x4a>
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d00a      	beq.n	800c694 <USBD_LL_SetupStage+0x5e>
 800c67e:	e01d      	b.n	800c6bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c686:	4619      	mov	r1, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 fb63 	bl	800cd54 <USBD_StdDevReq>
 800c68e:	4603      	mov	r3, r0
 800c690:	73fb      	strb	r3, [r7, #15]
      break;
 800c692:	e020      	b.n	800c6d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c69a:	4619      	mov	r1, r3
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fbcb 	bl	800ce38 <USBD_StdItfReq>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	73fb      	strb	r3, [r7, #15]
      break;
 800c6a6:	e016      	b.n	800c6d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fc2d 	bl	800cf10 <USBD_StdEPReq>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c6ba:	e00c      	b.n	800c6d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c6c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f001 fe68 	bl	800e3a0 <USBD_LL_StallEP>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c6d4:	bf00      	nop
  }

  return ret;
 800c6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3710      	adds	r7, #16
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	607a      	str	r2, [r7, #4]
 800c6ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c6f2:	7afb      	ldrb	r3, [r7, #11]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d16e      	bne.n	800c7d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c6fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c706:	2b03      	cmp	r3, #3
 800c708:	f040 8098 	bne.w	800c83c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	689a      	ldr	r2, [r3, #8]
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	429a      	cmp	r2, r3
 800c716:	d913      	bls.n	800c740 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	689a      	ldr	r2, [r3, #8]
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	1ad2      	subs	r2, r2, r3
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	68da      	ldr	r2, [r3, #12]
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	4293      	cmp	r3, r2
 800c730:	bf28      	it	cs
 800c732:	4613      	movcs	r3, r2
 800c734:	461a      	mov	r2, r3
 800c736:	6879      	ldr	r1, [r7, #4]
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f001 f9be 	bl	800daba <USBD_CtlContinueRx>
 800c73e:	e07d      	b.n	800c83c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c746:	f003 031f 	and.w	r3, r3, #31
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	d014      	beq.n	800c778 <USBD_LL_DataOutStage+0x98>
 800c74e:	2b02      	cmp	r3, #2
 800c750:	d81d      	bhi.n	800c78e <USBD_LL_DataOutStage+0xae>
 800c752:	2b00      	cmp	r3, #0
 800c754:	d002      	beq.n	800c75c <USBD_LL_DataOutStage+0x7c>
 800c756:	2b01      	cmp	r3, #1
 800c758:	d003      	beq.n	800c762 <USBD_LL_DataOutStage+0x82>
 800c75a:	e018      	b.n	800c78e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c75c:	2300      	movs	r3, #0
 800c75e:	75bb      	strb	r3, [r7, #22]
            break;
 800c760:	e018      	b.n	800c794 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	4619      	mov	r1, r3
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f000 fa64 	bl	800cc3a <USBD_CoreFindIF>
 800c772:	4603      	mov	r3, r0
 800c774:	75bb      	strb	r3, [r7, #22]
            break;
 800c776:	e00d      	b.n	800c794 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	4619      	mov	r1, r3
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f000 fa66 	bl	800cc54 <USBD_CoreFindEP>
 800c788:	4603      	mov	r3, r0
 800c78a:	75bb      	strb	r3, [r7, #22]
            break;
 800c78c:	e002      	b.n	800c794 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c78e:	2300      	movs	r3, #0
 800c790:	75bb      	strb	r3, [r7, #22]
            break;
 800c792:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c794:	7dbb      	ldrb	r3, [r7, #22]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d119      	bne.n	800c7ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	2b03      	cmp	r3, #3
 800c7a4:	d113      	bne.n	800c7ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c7a6:	7dba      	ldrb	r2, [r7, #22]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	32ae      	adds	r2, #174	@ 0xae
 800c7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00b      	beq.n	800c7ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c7b6:	7dba      	ldrb	r2, [r7, #22]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c7be:	7dba      	ldrb	r2, [r7, #22]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	32ae      	adds	r2, #174	@ 0xae
 800c7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c8:	691b      	ldr	r3, [r3, #16]
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	f001 f984 	bl	800dadc <USBD_CtlSendStatus>
 800c7d4:	e032      	b.n	800c83c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c7d6:	7afb      	ldrb	r3, [r7, #11]
 800c7d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	4619      	mov	r1, r3
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 fa37 	bl	800cc54 <USBD_CoreFindEP>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7ea:	7dbb      	ldrb	r3, [r7, #22]
 800c7ec:	2bff      	cmp	r3, #255	@ 0xff
 800c7ee:	d025      	beq.n	800c83c <USBD_LL_DataOutStage+0x15c>
 800c7f0:	7dbb      	ldrb	r3, [r7, #22]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d122      	bne.n	800c83c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	d117      	bne.n	800c832 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c802:	7dba      	ldrb	r2, [r7, #22]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	32ae      	adds	r2, #174	@ 0xae
 800c808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d00f      	beq.n	800c832 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c812:	7dba      	ldrb	r2, [r7, #22]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c81a:	7dba      	ldrb	r2, [r7, #22]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	32ae      	adds	r2, #174	@ 0xae
 800c820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	7afa      	ldrb	r2, [r7, #11]
 800c828:	4611      	mov	r1, r2
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	4798      	blx	r3
 800c82e:	4603      	mov	r3, r0
 800c830:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c832:	7dfb      	ldrb	r3, [r7, #23]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d001      	beq.n	800c83c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c838:	7dfb      	ldrb	r3, [r7, #23]
 800c83a:	e000      	b.n	800c83e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3718      	adds	r7, #24
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b086      	sub	sp, #24
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	60f8      	str	r0, [r7, #12]
 800c84e:	460b      	mov	r3, r1
 800c850:	607a      	str	r2, [r7, #4]
 800c852:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c854:	7afb      	ldrb	r3, [r7, #11]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d16f      	bne.n	800c93a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	3314      	adds	r3, #20
 800c85e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c866:	2b02      	cmp	r3, #2
 800c868:	d15a      	bne.n	800c920 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	689a      	ldr	r2, [r3, #8]
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	429a      	cmp	r2, r3
 800c874:	d914      	bls.n	800c8a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	689a      	ldr	r2, [r3, #8]
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	1ad2      	subs	r2, r2, r3
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	461a      	mov	r2, r3
 800c88a:	6879      	ldr	r1, [r7, #4]
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f001 f8e6 	bl	800da5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c892:	2300      	movs	r3, #0
 800c894:	2200      	movs	r2, #0
 800c896:	2100      	movs	r1, #0
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f001 fe2b 	bl	800e4f4 <USBD_LL_PrepareReceive>
 800c89e:	e03f      	b.n	800c920 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	68da      	ldr	r2, [r3, #12]
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d11c      	bne.n	800c8e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	685a      	ldr	r2, [r3, #4]
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d316      	bcc.n	800c8e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	685a      	ldr	r2, [r3, #4]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	d20f      	bcs.n	800c8e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f001 f8c7 	bl	800da5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8d8:	2300      	movs	r3, #0
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2100      	movs	r1, #0
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f001 fe08 	bl	800e4f4 <USBD_LL_PrepareReceive>
 800c8e4:	e01c      	b.n	800c920 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	2b03      	cmp	r3, #3
 800c8f0:	d10f      	bne.n	800c912 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d009      	beq.n	800c912 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2200      	movs	r2, #0
 800c902:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c912:	2180      	movs	r1, #128	@ 0x80
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f001 fd43 	bl	800e3a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f001 f8f1 	bl	800db02 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c926:	2b00      	cmp	r3, #0
 800c928:	d03a      	beq.n	800c9a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f7ff fe42 	bl	800c5b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c938:	e032      	b.n	800c9a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c93a:	7afb      	ldrb	r3, [r7, #11]
 800c93c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c940:	b2db      	uxtb	r3, r3
 800c942:	4619      	mov	r1, r3
 800c944:	68f8      	ldr	r0, [r7, #12]
 800c946:	f000 f985 	bl	800cc54 <USBD_CoreFindEP>
 800c94a:	4603      	mov	r3, r0
 800c94c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	2bff      	cmp	r3, #255	@ 0xff
 800c952:	d025      	beq.n	800c9a0 <USBD_LL_DataInStage+0x15a>
 800c954:	7dfb      	ldrb	r3, [r7, #23]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d122      	bne.n	800c9a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c960:	b2db      	uxtb	r3, r3
 800c962:	2b03      	cmp	r3, #3
 800c964:	d11c      	bne.n	800c9a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c966:	7dfa      	ldrb	r2, [r7, #23]
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	32ae      	adds	r2, #174	@ 0xae
 800c96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c970:	695b      	ldr	r3, [r3, #20]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d014      	beq.n	800c9a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c976:	7dfa      	ldrb	r2, [r7, #23]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c97e:	7dfa      	ldrb	r2, [r7, #23]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	32ae      	adds	r2, #174	@ 0xae
 800c984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	7afa      	ldrb	r2, [r7, #11]
 800c98c:	4611      	mov	r1, r2
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	4798      	blx	r3
 800c992:	4603      	mov	r3, r0
 800c994:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c996:	7dbb      	ldrb	r3, [r7, #22]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c99c:	7dbb      	ldrb	r3, [r7, #22]
 800c99e:	e000      	b.n	800c9a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3718      	adds	r7, #24
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b084      	sub	sp, #16
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d014      	beq.n	800ca10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00e      	beq.n	800ca10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	6852      	ldr	r2, [r2, #4]
 800c9fe:	b2d2      	uxtb	r2, r2
 800ca00:	4611      	mov	r1, r2
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	4798      	blx	r3
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d001      	beq.n	800ca10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca10:	2340      	movs	r3, #64	@ 0x40
 800ca12:	2200      	movs	r2, #0
 800ca14:	2100      	movs	r1, #0
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f001 fc7d 	bl	800e316 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2240      	movs	r2, #64	@ 0x40
 800ca28:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca2c:	2340      	movs	r3, #64	@ 0x40
 800ca2e:	2200      	movs	r2, #0
 800ca30:	2180      	movs	r1, #128	@ 0x80
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f001 fc6f 	bl	800e316 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2240      	movs	r2, #64	@ 0x40
 800ca42:	621a      	str	r2, [r3, #32]

  return ret;
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}

0800ca4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ca4e:	b480      	push	{r7}
 800ca50:	b083      	sub	sp, #12
 800ca52:	af00      	add	r7, sp, #0
 800ca54:	6078      	str	r0, [r7, #4]
 800ca56:	460b      	mov	r3, r1
 800ca58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	78fa      	ldrb	r2, [r7, #3]
 800ca5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	370c      	adds	r7, #12
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b04      	cmp	r3, #4
 800ca80:	d006      	beq.n	800ca90 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2204      	movs	r2, #4
 800ca94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr

0800caa6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b083      	sub	sp, #12
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	2b04      	cmp	r3, #4
 800cab8:	d106      	bne.n	800cac8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cac0:	b2da      	uxtb	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	370c      	adds	r7, #12
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b082      	sub	sp, #8
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	2b03      	cmp	r3, #3
 800cae8:	d110      	bne.n	800cb0c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d00b      	beq.n	800cb0c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cafa:	69db      	ldr	r3, [r3, #28]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d005      	beq.n	800cb0c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb06:	69db      	ldr	r3, [r3, #28]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cb0c:	2300      	movs	r3, #0
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3708      	adds	r7, #8
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b082      	sub	sp, #8
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	460b      	mov	r3, r1
 800cb20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	32ae      	adds	r2, #174	@ 0xae
 800cb2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d101      	bne.n	800cb38 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cb34:	2303      	movs	r3, #3
 800cb36:	e01c      	b.n	800cb72 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b03      	cmp	r3, #3
 800cb42:	d115      	bne.n	800cb70 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	32ae      	adds	r2, #174	@ 0xae
 800cb4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb52:	6a1b      	ldr	r3, [r3, #32]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d00b      	beq.n	800cb70 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	32ae      	adds	r2, #174	@ 0xae
 800cb62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb66:	6a1b      	ldr	r3, [r3, #32]
 800cb68:	78fa      	ldrb	r2, [r7, #3]
 800cb6a:	4611      	mov	r1, r2
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3708      	adds	r7, #8
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}

0800cb7a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b082      	sub	sp, #8
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
 800cb82:	460b      	mov	r3, r1
 800cb84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	32ae      	adds	r2, #174	@ 0xae
 800cb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d101      	bne.n	800cb9c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cb98:	2303      	movs	r3, #3
 800cb9a:	e01c      	b.n	800cbd6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	2b03      	cmp	r3, #3
 800cba6:	d115      	bne.n	800cbd4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	32ae      	adds	r2, #174	@ 0xae
 800cbb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00b      	beq.n	800cbd4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	32ae      	adds	r2, #174	@ 0xae
 800cbc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbcc:	78fa      	ldrb	r2, [r7, #3]
 800cbce:	4611      	mov	r1, r2
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cbd4:	2300      	movs	r3, #0
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cbde:	b480      	push	{r7}
 800cbe0:	b083      	sub	sp, #12
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	370c      	adds	r7, #12
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2201      	movs	r2, #1
 800cc04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00e      	beq.n	800cc30 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	6852      	ldr	r2, [r2, #4]
 800cc1e:	b2d2      	uxtb	r2, r2
 800cc20:	4611      	mov	r1, r2
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	4798      	blx	r3
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cc3a:	b480      	push	{r7}
 800cc3c:	b083      	sub	sp, #12
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
 800cc42:	460b      	mov	r3, r1
 800cc44:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc46:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc60:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	370c      	adds	r7, #12
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b086      	sub	sp, #24
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	460b      	mov	r3, r1
 800cc78:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cc82:	2300      	movs	r3, #0
 800cc84:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	885b      	ldrh	r3, [r3, #2]
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	7812      	ldrb	r2, [r2, #0]
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d91f      	bls.n	800ccd4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cc9a:	e013      	b.n	800ccc4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cc9c:	f107 030a 	add.w	r3, r7, #10
 800cca0:	4619      	mov	r1, r3
 800cca2:	6978      	ldr	r0, [r7, #20]
 800cca4:	f000 f81b 	bl	800ccde <USBD_GetNextDesc>
 800cca8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	785b      	ldrb	r3, [r3, #1]
 800ccae:	2b05      	cmp	r3, #5
 800ccb0:	d108      	bne.n	800ccc4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	789b      	ldrb	r3, [r3, #2]
 800ccba:	78fa      	ldrb	r2, [r7, #3]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d008      	beq.n	800ccd2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	885b      	ldrh	r3, [r3, #2]
 800ccc8:	b29a      	uxth	r2, r3
 800ccca:	897b      	ldrh	r3, [r7, #10]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d8e5      	bhi.n	800cc9c <USBD_GetEpDesc+0x2e>
 800ccd0:	e000      	b.n	800ccd4 <USBD_GetEpDesc+0x66>
          break;
 800ccd2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ccd4:	693b      	ldr	r3, [r7, #16]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3718      	adds	r7, #24
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ccde:	b480      	push	{r7}
 800cce0:	b085      	sub	sp, #20
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	881b      	ldrh	r3, [r3, #0]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	7812      	ldrb	r2, [r2, #0]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	461a      	mov	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4413      	add	r3, r2
 800cd06:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cd08:	68fb      	ldr	r3, [r7, #12]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3714      	adds	r7, #20
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cd16:	b480      	push	{r7}
 800cd18:	b087      	sub	sp, #28
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cd34:	8a3b      	ldrh	r3, [r7, #16]
 800cd36:	021b      	lsls	r3, r3, #8
 800cd38:	b21a      	sxth	r2, r3
 800cd3a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	b21b      	sxth	r3, r3
 800cd42:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cd44:	89fb      	ldrh	r3, [r7, #14]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	371c      	adds	r7, #28
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd50:	4770      	bx	lr
	...

0800cd54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd6a:	2b40      	cmp	r3, #64	@ 0x40
 800cd6c:	d005      	beq.n	800cd7a <USBD_StdDevReq+0x26>
 800cd6e:	2b40      	cmp	r3, #64	@ 0x40
 800cd70:	d857      	bhi.n	800ce22 <USBD_StdDevReq+0xce>
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00f      	beq.n	800cd96 <USBD_StdDevReq+0x42>
 800cd76:	2b20      	cmp	r3, #32
 800cd78:	d153      	bne.n	800ce22 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	32ae      	adds	r2, #174	@ 0xae
 800cd84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	6839      	ldr	r1, [r7, #0]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	4798      	blx	r3
 800cd90:	4603      	mov	r3, r0
 800cd92:	73fb      	strb	r3, [r7, #15]
      break;
 800cd94:	e04a      	b.n	800ce2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	785b      	ldrb	r3, [r3, #1]
 800cd9a:	2b09      	cmp	r3, #9
 800cd9c:	d83b      	bhi.n	800ce16 <USBD_StdDevReq+0xc2>
 800cd9e:	a201      	add	r2, pc, #4	@ (adr r2, 800cda4 <USBD_StdDevReq+0x50>)
 800cda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda4:	0800cdf9 	.word	0x0800cdf9
 800cda8:	0800ce0d 	.word	0x0800ce0d
 800cdac:	0800ce17 	.word	0x0800ce17
 800cdb0:	0800ce03 	.word	0x0800ce03
 800cdb4:	0800ce17 	.word	0x0800ce17
 800cdb8:	0800cdd7 	.word	0x0800cdd7
 800cdbc:	0800cdcd 	.word	0x0800cdcd
 800cdc0:	0800ce17 	.word	0x0800ce17
 800cdc4:	0800cdef 	.word	0x0800cdef
 800cdc8:	0800cde1 	.word	0x0800cde1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cdcc:	6839      	ldr	r1, [r7, #0]
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 fa3c 	bl	800d24c <USBD_GetDescriptor>
          break;
 800cdd4:	e024      	b.n	800ce20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f000 fbcb 	bl	800d574 <USBD_SetAddress>
          break;
 800cdde:	e01f      	b.n	800ce20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cde0:	6839      	ldr	r1, [r7, #0]
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	f000 fc0a 	bl	800d5fc <USBD_SetConfig>
 800cde8:	4603      	mov	r3, r0
 800cdea:	73fb      	strb	r3, [r7, #15]
          break;
 800cdec:	e018      	b.n	800ce20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cdee:	6839      	ldr	r1, [r7, #0]
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 fcad 	bl	800d750 <USBD_GetConfig>
          break;
 800cdf6:	e013      	b.n	800ce20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 fcde 	bl	800d7bc <USBD_GetStatus>
          break;
 800ce00:	e00e      	b.n	800ce20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ce02:	6839      	ldr	r1, [r7, #0]
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 fd0d 	bl	800d824 <USBD_SetFeature>
          break;
 800ce0a:	e009      	b.n	800ce20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ce0c:	6839      	ldr	r1, [r7, #0]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 fd31 	bl	800d876 <USBD_ClrFeature>
          break;
 800ce14:	e004      	b.n	800ce20 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ce16:	6839      	ldr	r1, [r7, #0]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 fd88 	bl	800d92e <USBD_CtlError>
          break;
 800ce1e:	bf00      	nop
      }
      break;
 800ce20:	e004      	b.n	800ce2c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 fd82 	bl	800d92e <USBD_CtlError>
      break;
 800ce2a:	bf00      	nop
  }

  return ret;
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop

0800ce38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ce4e:	2b40      	cmp	r3, #64	@ 0x40
 800ce50:	d005      	beq.n	800ce5e <USBD_StdItfReq+0x26>
 800ce52:	2b40      	cmp	r3, #64	@ 0x40
 800ce54:	d852      	bhi.n	800cefc <USBD_StdItfReq+0xc4>
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d001      	beq.n	800ce5e <USBD_StdItfReq+0x26>
 800ce5a:	2b20      	cmp	r3, #32
 800ce5c:	d14e      	bne.n	800cefc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce64:	b2db      	uxtb	r3, r3
 800ce66:	3b01      	subs	r3, #1
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d840      	bhi.n	800ceee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	889b      	ldrh	r3, [r3, #4]
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	2b01      	cmp	r3, #1
 800ce74:	d836      	bhi.n	800cee4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	889b      	ldrh	r3, [r3, #4]
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7ff fedb 	bl	800cc3a <USBD_CoreFindIF>
 800ce84:	4603      	mov	r3, r0
 800ce86:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce88:	7bbb      	ldrb	r3, [r7, #14]
 800ce8a:	2bff      	cmp	r3, #255	@ 0xff
 800ce8c:	d01d      	beq.n	800ceca <USBD_StdItfReq+0x92>
 800ce8e:	7bbb      	ldrb	r3, [r7, #14]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d11a      	bne.n	800ceca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ce94:	7bba      	ldrb	r2, [r7, #14]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	32ae      	adds	r2, #174	@ 0xae
 800ce9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce9e:	689b      	ldr	r3, [r3, #8]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00f      	beq.n	800cec4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cea4:	7bba      	ldrb	r2, [r7, #14]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ceac:	7bba      	ldrb	r2, [r7, #14]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	32ae      	adds	r2, #174	@ 0xae
 800ceb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	6839      	ldr	r1, [r7, #0]
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	4798      	blx	r3
 800cebe:	4603      	mov	r3, r0
 800cec0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cec2:	e004      	b.n	800cece <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cec4:	2303      	movs	r3, #3
 800cec6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cec8:	e001      	b.n	800cece <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ceca:	2303      	movs	r3, #3
 800cecc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	88db      	ldrh	r3, [r3, #6]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d110      	bne.n	800cef8 <USBD_StdItfReq+0xc0>
 800ced6:	7bfb      	ldrb	r3, [r7, #15]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10d      	bne.n	800cef8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 fdfd 	bl	800dadc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cee2:	e009      	b.n	800cef8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cee4:	6839      	ldr	r1, [r7, #0]
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 fd21 	bl	800d92e <USBD_CtlError>
          break;
 800ceec:	e004      	b.n	800cef8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f000 fd1c 	bl	800d92e <USBD_CtlError>
          break;
 800cef6:	e000      	b.n	800cefa <USBD_StdItfReq+0xc2>
          break;
 800cef8:	bf00      	nop
      }
      break;
 800cefa:	e004      	b.n	800cf06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cefc:	6839      	ldr	r1, [r7, #0]
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fd15 	bl	800d92e <USBD_CtlError>
      break;
 800cf04:	bf00      	nop
  }

  return ret;
 800cf06:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3710      	adds	r7, #16
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	889b      	ldrh	r3, [r3, #4]
 800cf22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf2c:	2b40      	cmp	r3, #64	@ 0x40
 800cf2e:	d007      	beq.n	800cf40 <USBD_StdEPReq+0x30>
 800cf30:	2b40      	cmp	r3, #64	@ 0x40
 800cf32:	f200 817f 	bhi.w	800d234 <USBD_StdEPReq+0x324>
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d02a      	beq.n	800cf90 <USBD_StdEPReq+0x80>
 800cf3a:	2b20      	cmp	r3, #32
 800cf3c:	f040 817a 	bne.w	800d234 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cf40:	7bbb      	ldrb	r3, [r7, #14]
 800cf42:	4619      	mov	r1, r3
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7ff fe85 	bl	800cc54 <USBD_CoreFindEP>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf4e:	7b7b      	ldrb	r3, [r7, #13]
 800cf50:	2bff      	cmp	r3, #255	@ 0xff
 800cf52:	f000 8174 	beq.w	800d23e <USBD_StdEPReq+0x32e>
 800cf56:	7b7b      	ldrb	r3, [r7, #13]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f040 8170 	bne.w	800d23e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cf5e:	7b7a      	ldrb	r2, [r7, #13]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cf66:	7b7a      	ldrb	r2, [r7, #13]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	32ae      	adds	r2, #174	@ 0xae
 800cf6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f000 8163 	beq.w	800d23e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cf78:	7b7a      	ldrb	r2, [r7, #13]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	32ae      	adds	r2, #174	@ 0xae
 800cf7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	4798      	blx	r3
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cf8e:	e156      	b.n	800d23e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	785b      	ldrb	r3, [r3, #1]
 800cf94:	2b03      	cmp	r3, #3
 800cf96:	d008      	beq.n	800cfaa <USBD_StdEPReq+0x9a>
 800cf98:	2b03      	cmp	r3, #3
 800cf9a:	f300 8145 	bgt.w	800d228 <USBD_StdEPReq+0x318>
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f000 809b 	beq.w	800d0da <USBD_StdEPReq+0x1ca>
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d03c      	beq.n	800d022 <USBD_StdEPReq+0x112>
 800cfa8:	e13e      	b.n	800d228 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	2b02      	cmp	r3, #2
 800cfb4:	d002      	beq.n	800cfbc <USBD_StdEPReq+0xac>
 800cfb6:	2b03      	cmp	r3, #3
 800cfb8:	d016      	beq.n	800cfe8 <USBD_StdEPReq+0xd8>
 800cfba:	e02c      	b.n	800d016 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cfbc:	7bbb      	ldrb	r3, [r7, #14]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00d      	beq.n	800cfde <USBD_StdEPReq+0xce>
 800cfc2:	7bbb      	ldrb	r3, [r7, #14]
 800cfc4:	2b80      	cmp	r3, #128	@ 0x80
 800cfc6:	d00a      	beq.n	800cfde <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cfc8:	7bbb      	ldrb	r3, [r7, #14]
 800cfca:	4619      	mov	r1, r3
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f001 f9e7 	bl	800e3a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfd2:	2180      	movs	r1, #128	@ 0x80
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f001 f9e3 	bl	800e3a0 <USBD_LL_StallEP>
 800cfda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cfdc:	e020      	b.n	800d020 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cfde:	6839      	ldr	r1, [r7, #0]
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f000 fca4 	bl	800d92e <USBD_CtlError>
              break;
 800cfe6:	e01b      	b.n	800d020 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	885b      	ldrh	r3, [r3, #2]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10e      	bne.n	800d00e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cff0:	7bbb      	ldrb	r3, [r7, #14]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d00b      	beq.n	800d00e <USBD_StdEPReq+0xfe>
 800cff6:	7bbb      	ldrb	r3, [r7, #14]
 800cff8:	2b80      	cmp	r3, #128	@ 0x80
 800cffa:	d008      	beq.n	800d00e <USBD_StdEPReq+0xfe>
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	88db      	ldrh	r3, [r3, #6]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d104      	bne.n	800d00e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d004:	7bbb      	ldrb	r3, [r7, #14]
 800d006:	4619      	mov	r1, r3
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f001 f9c9 	bl	800e3a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 fd64 	bl	800dadc <USBD_CtlSendStatus>

              break;
 800d014:	e004      	b.n	800d020 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d016:	6839      	ldr	r1, [r7, #0]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 fc88 	bl	800d92e <USBD_CtlError>
              break;
 800d01e:	bf00      	nop
          }
          break;
 800d020:	e107      	b.n	800d232 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	2b02      	cmp	r3, #2
 800d02c:	d002      	beq.n	800d034 <USBD_StdEPReq+0x124>
 800d02e:	2b03      	cmp	r3, #3
 800d030:	d016      	beq.n	800d060 <USBD_StdEPReq+0x150>
 800d032:	e04b      	b.n	800d0cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d034:	7bbb      	ldrb	r3, [r7, #14]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00d      	beq.n	800d056 <USBD_StdEPReq+0x146>
 800d03a:	7bbb      	ldrb	r3, [r7, #14]
 800d03c:	2b80      	cmp	r3, #128	@ 0x80
 800d03e:	d00a      	beq.n	800d056 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d040:	7bbb      	ldrb	r3, [r7, #14]
 800d042:	4619      	mov	r1, r3
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f001 f9ab 	bl	800e3a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d04a:	2180      	movs	r1, #128	@ 0x80
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f001 f9a7 	bl	800e3a0 <USBD_LL_StallEP>
 800d052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d054:	e040      	b.n	800d0d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d056:	6839      	ldr	r1, [r7, #0]
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 fc68 	bl	800d92e <USBD_CtlError>
              break;
 800d05e:	e03b      	b.n	800d0d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	885b      	ldrh	r3, [r3, #2]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d136      	bne.n	800d0d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d068:	7bbb      	ldrb	r3, [r7, #14]
 800d06a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d004      	beq.n	800d07c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d072:	7bbb      	ldrb	r3, [r7, #14]
 800d074:	4619      	mov	r1, r3
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f001 f9b1 	bl	800e3de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 fd2d 	bl	800dadc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d082:	7bbb      	ldrb	r3, [r7, #14]
 800d084:	4619      	mov	r1, r3
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f7ff fde4 	bl	800cc54 <USBD_CoreFindEP>
 800d08c:	4603      	mov	r3, r0
 800d08e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d090:	7b7b      	ldrb	r3, [r7, #13]
 800d092:	2bff      	cmp	r3, #255	@ 0xff
 800d094:	d01f      	beq.n	800d0d6 <USBD_StdEPReq+0x1c6>
 800d096:	7b7b      	ldrb	r3, [r7, #13]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d11c      	bne.n	800d0d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d09c:	7b7a      	ldrb	r2, [r7, #13]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d0a4:	7b7a      	ldrb	r2, [r7, #13]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	32ae      	adds	r2, #174	@ 0xae
 800d0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d010      	beq.n	800d0d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d0b4:	7b7a      	ldrb	r2, [r7, #13]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	32ae      	adds	r2, #174	@ 0xae
 800d0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	6839      	ldr	r1, [r7, #0]
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	4798      	blx	r3
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d0ca:	e004      	b.n	800d0d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 fc2d 	bl	800d92e <USBD_CtlError>
              break;
 800d0d4:	e000      	b.n	800d0d8 <USBD_StdEPReq+0x1c8>
              break;
 800d0d6:	bf00      	nop
          }
          break;
 800d0d8:	e0ab      	b.n	800d232 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	d002      	beq.n	800d0ec <USBD_StdEPReq+0x1dc>
 800d0e6:	2b03      	cmp	r3, #3
 800d0e8:	d032      	beq.n	800d150 <USBD_StdEPReq+0x240>
 800d0ea:	e097      	b.n	800d21c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0ec:	7bbb      	ldrb	r3, [r7, #14]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d007      	beq.n	800d102 <USBD_StdEPReq+0x1f2>
 800d0f2:	7bbb      	ldrb	r3, [r7, #14]
 800d0f4:	2b80      	cmp	r3, #128	@ 0x80
 800d0f6:	d004      	beq.n	800d102 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f000 fc17 	bl	800d92e <USBD_CtlError>
                break;
 800d100:	e091      	b.n	800d226 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d102:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d106:	2b00      	cmp	r3, #0
 800d108:	da0b      	bge.n	800d122 <USBD_StdEPReq+0x212>
 800d10a:	7bbb      	ldrb	r3, [r7, #14]
 800d10c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d110:	4613      	mov	r3, r2
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	4413      	add	r3, r2
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	3310      	adds	r3, #16
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	4413      	add	r3, r2
 800d11e:	3304      	adds	r3, #4
 800d120:	e00b      	b.n	800d13a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d122:	7bbb      	ldrb	r3, [r7, #14]
 800d124:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d128:	4613      	mov	r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	4413      	add	r3, r2
 800d12e:	009b      	lsls	r3, r3, #2
 800d130:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	4413      	add	r3, r2
 800d138:	3304      	adds	r3, #4
 800d13a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	2200      	movs	r2, #0
 800d140:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	2202      	movs	r2, #2
 800d146:	4619      	mov	r1, r3
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 fc6d 	bl	800da28 <USBD_CtlSendData>
              break;
 800d14e:	e06a      	b.n	800d226 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d154:	2b00      	cmp	r3, #0
 800d156:	da11      	bge.n	800d17c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d158:	7bbb      	ldrb	r3, [r7, #14]
 800d15a:	f003 020f 	and.w	r2, r3, #15
 800d15e:	6879      	ldr	r1, [r7, #4]
 800d160:	4613      	mov	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4413      	add	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	440b      	add	r3, r1
 800d16a:	3324      	adds	r3, #36	@ 0x24
 800d16c:	881b      	ldrh	r3, [r3, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d117      	bne.n	800d1a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d172:	6839      	ldr	r1, [r7, #0]
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f000 fbda 	bl	800d92e <USBD_CtlError>
                  break;
 800d17a:	e054      	b.n	800d226 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d17c:	7bbb      	ldrb	r3, [r7, #14]
 800d17e:	f003 020f 	and.w	r2, r3, #15
 800d182:	6879      	ldr	r1, [r7, #4]
 800d184:	4613      	mov	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4413      	add	r3, r2
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	440b      	add	r3, r1
 800d18e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d192:	881b      	ldrh	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d104      	bne.n	800d1a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d198:	6839      	ldr	r1, [r7, #0]
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fbc7 	bl	800d92e <USBD_CtlError>
                  break;
 800d1a0:	e041      	b.n	800d226 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	da0b      	bge.n	800d1c2 <USBD_StdEPReq+0x2b2>
 800d1aa:	7bbb      	ldrb	r3, [r7, #14]
 800d1ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	4413      	add	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	3310      	adds	r3, #16
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	4413      	add	r3, r2
 800d1be:	3304      	adds	r3, #4
 800d1c0:	e00b      	b.n	800d1da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d1c2:	7bbb      	ldrb	r3, [r7, #14]
 800d1c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	4413      	add	r3, r2
 800d1d8:	3304      	adds	r3, #4
 800d1da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d1dc:	7bbb      	ldrb	r3, [r7, #14]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d002      	beq.n	800d1e8 <USBD_StdEPReq+0x2d8>
 800d1e2:	7bbb      	ldrb	r3, [r7, #14]
 800d1e4:	2b80      	cmp	r3, #128	@ 0x80
 800d1e6:	d103      	bne.n	800d1f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	601a      	str	r2, [r3, #0]
 800d1ee:	e00e      	b.n	800d20e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d1f0:	7bbb      	ldrb	r3, [r7, #14]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f001 f911 	bl	800e41c <USBD_LL_IsStallEP>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d003      	beq.n	800d208 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	2201      	movs	r2, #1
 800d204:	601a      	str	r2, [r3, #0]
 800d206:	e002      	b.n	800d20e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	2200      	movs	r2, #0
 800d20c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	2202      	movs	r2, #2
 800d212:	4619      	mov	r1, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fc07 	bl	800da28 <USBD_CtlSendData>
              break;
 800d21a:	e004      	b.n	800d226 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d21c:	6839      	ldr	r1, [r7, #0]
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 fb85 	bl	800d92e <USBD_CtlError>
              break;
 800d224:	bf00      	nop
          }
          break;
 800d226:	e004      	b.n	800d232 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d228:	6839      	ldr	r1, [r7, #0]
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f000 fb7f 	bl	800d92e <USBD_CtlError>
          break;
 800d230:	bf00      	nop
      }
      break;
 800d232:	e005      	b.n	800d240 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d234:	6839      	ldr	r1, [r7, #0]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 fb79 	bl	800d92e <USBD_CtlError>
      break;
 800d23c:	e000      	b.n	800d240 <USBD_StdEPReq+0x330>
      break;
 800d23e:	bf00      	nop
  }

  return ret;
 800d240:	7bfb      	ldrb	r3, [r7, #15]
}
 800d242:	4618      	mov	r0, r3
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
	...

0800d24c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d256:	2300      	movs	r3, #0
 800d258:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d25a:	2300      	movs	r3, #0
 800d25c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d25e:	2300      	movs	r3, #0
 800d260:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	885b      	ldrh	r3, [r3, #2]
 800d266:	0a1b      	lsrs	r3, r3, #8
 800d268:	b29b      	uxth	r3, r3
 800d26a:	3b01      	subs	r3, #1
 800d26c:	2b0e      	cmp	r3, #14
 800d26e:	f200 8152 	bhi.w	800d516 <USBD_GetDescriptor+0x2ca>
 800d272:	a201      	add	r2, pc, #4	@ (adr r2, 800d278 <USBD_GetDescriptor+0x2c>)
 800d274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d278:	0800d2e9 	.word	0x0800d2e9
 800d27c:	0800d301 	.word	0x0800d301
 800d280:	0800d341 	.word	0x0800d341
 800d284:	0800d517 	.word	0x0800d517
 800d288:	0800d517 	.word	0x0800d517
 800d28c:	0800d4b7 	.word	0x0800d4b7
 800d290:	0800d4e3 	.word	0x0800d4e3
 800d294:	0800d517 	.word	0x0800d517
 800d298:	0800d517 	.word	0x0800d517
 800d29c:	0800d517 	.word	0x0800d517
 800d2a0:	0800d517 	.word	0x0800d517
 800d2a4:	0800d517 	.word	0x0800d517
 800d2a8:	0800d517 	.word	0x0800d517
 800d2ac:	0800d517 	.word	0x0800d517
 800d2b0:	0800d2b5 	.word	0x0800d2b5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2ba:	69db      	ldr	r3, [r3, #28]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d00b      	beq.n	800d2d8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2c6:	69db      	ldr	r3, [r3, #28]
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	7c12      	ldrb	r2, [r2, #16]
 800d2cc:	f107 0108 	add.w	r1, r7, #8
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	4798      	blx	r3
 800d2d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d2d6:	e126      	b.n	800d526 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d2d8:	6839      	ldr	r1, [r7, #0]
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 fb27 	bl	800d92e <USBD_CtlError>
        err++;
 800d2e0:	7afb      	ldrb	r3, [r7, #11]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	72fb      	strb	r3, [r7, #11]
      break;
 800d2e6:	e11e      	b.n	800d526 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	7c12      	ldrb	r2, [r2, #16]
 800d2f4:	f107 0108 	add.w	r1, r7, #8
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	4798      	blx	r3
 800d2fc:	60f8      	str	r0, [r7, #12]
      break;
 800d2fe:	e112      	b.n	800d526 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	7c1b      	ldrb	r3, [r3, #16]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10d      	bne.n	800d324 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d310:	f107 0208 	add.w	r2, r7, #8
 800d314:	4610      	mov	r0, r2
 800d316:	4798      	blx	r3
 800d318:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	3301      	adds	r3, #1
 800d31e:	2202      	movs	r2, #2
 800d320:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d322:	e100      	b.n	800d526 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d32a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d32c:	f107 0208 	add.w	r2, r7, #8
 800d330:	4610      	mov	r0, r2
 800d332:	4798      	blx	r3
 800d334:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	3301      	adds	r3, #1
 800d33a:	2202      	movs	r2, #2
 800d33c:	701a      	strb	r2, [r3, #0]
      break;
 800d33e:	e0f2      	b.n	800d526 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	885b      	ldrh	r3, [r3, #2]
 800d344:	b2db      	uxtb	r3, r3
 800d346:	2b05      	cmp	r3, #5
 800d348:	f200 80ac 	bhi.w	800d4a4 <USBD_GetDescriptor+0x258>
 800d34c:	a201      	add	r2, pc, #4	@ (adr r2, 800d354 <USBD_GetDescriptor+0x108>)
 800d34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d352:	bf00      	nop
 800d354:	0800d36d 	.word	0x0800d36d
 800d358:	0800d3a1 	.word	0x0800d3a1
 800d35c:	0800d3d5 	.word	0x0800d3d5
 800d360:	0800d409 	.word	0x0800d409
 800d364:	0800d43d 	.word	0x0800d43d
 800d368:	0800d471 	.word	0x0800d471
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00b      	beq.n	800d390 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	7c12      	ldrb	r2, [r2, #16]
 800d384:	f107 0108 	add.w	r1, r7, #8
 800d388:	4610      	mov	r0, r2
 800d38a:	4798      	blx	r3
 800d38c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d38e:	e091      	b.n	800d4b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d390:	6839      	ldr	r1, [r7, #0]
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 facb 	bl	800d92e <USBD_CtlError>
            err++;
 800d398:	7afb      	ldrb	r3, [r7, #11]
 800d39a:	3301      	adds	r3, #1
 800d39c:	72fb      	strb	r3, [r7, #11]
          break;
 800d39e:	e089      	b.n	800d4b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00b      	beq.n	800d3c4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	7c12      	ldrb	r2, [r2, #16]
 800d3b8:	f107 0108 	add.w	r1, r7, #8
 800d3bc:	4610      	mov	r0, r2
 800d3be:	4798      	blx	r3
 800d3c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3c2:	e077      	b.n	800d4b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3c4:	6839      	ldr	r1, [r7, #0]
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 fab1 	bl	800d92e <USBD_CtlError>
            err++;
 800d3cc:	7afb      	ldrb	r3, [r7, #11]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d3d2:	e06f      	b.n	800d4b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00b      	beq.n	800d3f8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	687a      	ldr	r2, [r7, #4]
 800d3ea:	7c12      	ldrb	r2, [r2, #16]
 800d3ec:	f107 0108 	add.w	r1, r7, #8
 800d3f0:	4610      	mov	r0, r2
 800d3f2:	4798      	blx	r3
 800d3f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3f6:	e05d      	b.n	800d4b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d3f8:	6839      	ldr	r1, [r7, #0]
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 fa97 	bl	800d92e <USBD_CtlError>
            err++;
 800d400:	7afb      	ldrb	r3, [r7, #11]
 800d402:	3301      	adds	r3, #1
 800d404:	72fb      	strb	r3, [r7, #11]
          break;
 800d406:	e055      	b.n	800d4b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00b      	beq.n	800d42c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	7c12      	ldrb	r2, [r2, #16]
 800d420:	f107 0108 	add.w	r1, r7, #8
 800d424:	4610      	mov	r0, r2
 800d426:	4798      	blx	r3
 800d428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d42a:	e043      	b.n	800d4b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d42c:	6839      	ldr	r1, [r7, #0]
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 fa7d 	bl	800d92e <USBD_CtlError>
            err++;
 800d434:	7afb      	ldrb	r3, [r7, #11]
 800d436:	3301      	adds	r3, #1
 800d438:	72fb      	strb	r3, [r7, #11]
          break;
 800d43a:	e03b      	b.n	800d4b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d442:	695b      	ldr	r3, [r3, #20]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d00b      	beq.n	800d460 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d44e:	695b      	ldr	r3, [r3, #20]
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	7c12      	ldrb	r2, [r2, #16]
 800d454:	f107 0108 	add.w	r1, r7, #8
 800d458:	4610      	mov	r0, r2
 800d45a:	4798      	blx	r3
 800d45c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d45e:	e029      	b.n	800d4b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d460:	6839      	ldr	r1, [r7, #0]
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 fa63 	bl	800d92e <USBD_CtlError>
            err++;
 800d468:	7afb      	ldrb	r3, [r7, #11]
 800d46a:	3301      	adds	r3, #1
 800d46c:	72fb      	strb	r3, [r7, #11]
          break;
 800d46e:	e021      	b.n	800d4b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d476:	699b      	ldr	r3, [r3, #24]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00b      	beq.n	800d494 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d482:	699b      	ldr	r3, [r3, #24]
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	7c12      	ldrb	r2, [r2, #16]
 800d488:	f107 0108 	add.w	r1, r7, #8
 800d48c:	4610      	mov	r0, r2
 800d48e:	4798      	blx	r3
 800d490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d492:	e00f      	b.n	800d4b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d494:	6839      	ldr	r1, [r7, #0]
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 fa49 	bl	800d92e <USBD_CtlError>
            err++;
 800d49c:	7afb      	ldrb	r3, [r7, #11]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	72fb      	strb	r3, [r7, #11]
          break;
 800d4a2:	e007      	b.n	800d4b4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d4a4:	6839      	ldr	r1, [r7, #0]
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 fa41 	bl	800d92e <USBD_CtlError>
          err++;
 800d4ac:	7afb      	ldrb	r3, [r7, #11]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d4b2:	bf00      	nop
      }
      break;
 800d4b4:	e037      	b.n	800d526 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	7c1b      	ldrb	r3, [r3, #16]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d109      	bne.n	800d4d2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4c6:	f107 0208 	add.w	r2, r7, #8
 800d4ca:	4610      	mov	r0, r2
 800d4cc:	4798      	blx	r3
 800d4ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4d0:	e029      	b.n	800d526 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 fa2a 	bl	800d92e <USBD_CtlError>
        err++;
 800d4da:	7afb      	ldrb	r3, [r7, #11]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	72fb      	strb	r3, [r7, #11]
      break;
 800d4e0:	e021      	b.n	800d526 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	7c1b      	ldrb	r3, [r3, #16]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10d      	bne.n	800d506 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4f2:	f107 0208 	add.w	r2, r7, #8
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	4798      	blx	r3
 800d4fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	3301      	adds	r3, #1
 800d500:	2207      	movs	r2, #7
 800d502:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d504:	e00f      	b.n	800d526 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d506:	6839      	ldr	r1, [r7, #0]
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 fa10 	bl	800d92e <USBD_CtlError>
        err++;
 800d50e:	7afb      	ldrb	r3, [r7, #11]
 800d510:	3301      	adds	r3, #1
 800d512:	72fb      	strb	r3, [r7, #11]
      break;
 800d514:	e007      	b.n	800d526 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d516:	6839      	ldr	r1, [r7, #0]
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 fa08 	bl	800d92e <USBD_CtlError>
      err++;
 800d51e:	7afb      	ldrb	r3, [r7, #11]
 800d520:	3301      	adds	r3, #1
 800d522:	72fb      	strb	r3, [r7, #11]
      break;
 800d524:	bf00      	nop
  }

  if (err != 0U)
 800d526:	7afb      	ldrb	r3, [r7, #11]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d11e      	bne.n	800d56a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	88db      	ldrh	r3, [r3, #6]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d016      	beq.n	800d562 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d534:	893b      	ldrh	r3, [r7, #8]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00e      	beq.n	800d558 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	88da      	ldrh	r2, [r3, #6]
 800d53e:	893b      	ldrh	r3, [r7, #8]
 800d540:	4293      	cmp	r3, r2
 800d542:	bf28      	it	cs
 800d544:	4613      	movcs	r3, r2
 800d546:	b29b      	uxth	r3, r3
 800d548:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d54a:	893b      	ldrh	r3, [r7, #8]
 800d54c:	461a      	mov	r2, r3
 800d54e:	68f9      	ldr	r1, [r7, #12]
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 fa69 	bl	800da28 <USBD_CtlSendData>
 800d556:	e009      	b.n	800d56c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d558:	6839      	ldr	r1, [r7, #0]
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 f9e7 	bl	800d92e <USBD_CtlError>
 800d560:	e004      	b.n	800d56c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 faba 	bl	800dadc <USBD_CtlSendStatus>
 800d568:	e000      	b.n	800d56c <USBD_GetDescriptor+0x320>
    return;
 800d56a:	bf00      	nop
  }
}
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop

0800d574 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	889b      	ldrh	r3, [r3, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d131      	bne.n	800d5ea <USBD_SetAddress+0x76>
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	88db      	ldrh	r3, [r3, #6]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d12d      	bne.n	800d5ea <USBD_SetAddress+0x76>
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	885b      	ldrh	r3, [r3, #2]
 800d592:	2b7f      	cmp	r3, #127	@ 0x7f
 800d594:	d829      	bhi.n	800d5ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	885b      	ldrh	r3, [r3, #2]
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	2b03      	cmp	r3, #3
 800d5ac:	d104      	bne.n	800d5b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d5ae:	6839      	ldr	r1, [r7, #0]
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 f9bc 	bl	800d92e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5b6:	e01d      	b.n	800d5f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	7bfa      	ldrb	r2, [r7, #15]
 800d5bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d5c0:	7bfb      	ldrb	r3, [r7, #15]
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 ff55 	bl	800e474 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 fa86 	bl	800dadc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d5d0:	7bfb      	ldrb	r3, [r7, #15]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d004      	beq.n	800d5e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2202      	movs	r2, #2
 800d5da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5de:	e009      	b.n	800d5f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5e8:	e004      	b.n	800d5f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d5ea:	6839      	ldr	r1, [r7, #0]
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 f99e 	bl	800d92e <USBD_CtlError>
  }
}
 800d5f2:	bf00      	nop
 800d5f4:	bf00      	nop
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d606:	2300      	movs	r3, #0
 800d608:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	885b      	ldrh	r3, [r3, #2]
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	4b4e      	ldr	r3, [pc, #312]	@ (800d74c <USBD_SetConfig+0x150>)
 800d612:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d614:	4b4d      	ldr	r3, [pc, #308]	@ (800d74c <USBD_SetConfig+0x150>)
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d905      	bls.n	800d628 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d61c:	6839      	ldr	r1, [r7, #0]
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f985 	bl	800d92e <USBD_CtlError>
    return USBD_FAIL;
 800d624:	2303      	movs	r3, #3
 800d626:	e08c      	b.n	800d742 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	2b02      	cmp	r3, #2
 800d632:	d002      	beq.n	800d63a <USBD_SetConfig+0x3e>
 800d634:	2b03      	cmp	r3, #3
 800d636:	d029      	beq.n	800d68c <USBD_SetConfig+0x90>
 800d638:	e075      	b.n	800d726 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d63a:	4b44      	ldr	r3, [pc, #272]	@ (800d74c <USBD_SetConfig+0x150>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d020      	beq.n	800d684 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d642:	4b42      	ldr	r3, [pc, #264]	@ (800d74c <USBD_SetConfig+0x150>)
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	461a      	mov	r2, r3
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d64c:	4b3f      	ldr	r3, [pc, #252]	@ (800d74c <USBD_SetConfig+0x150>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	4619      	mov	r1, r3
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7fe ffb9 	bl	800c5ca <USBD_SetClassConfig>
 800d658:	4603      	mov	r3, r0
 800d65a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d65c:	7bfb      	ldrb	r3, [r7, #15]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d008      	beq.n	800d674 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d662:	6839      	ldr	r1, [r7, #0]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 f962 	bl	800d92e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2202      	movs	r2, #2
 800d66e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d672:	e065      	b.n	800d740 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fa31 	bl	800dadc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2203      	movs	r2, #3
 800d67e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d682:	e05d      	b.n	800d740 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fa29 	bl	800dadc <USBD_CtlSendStatus>
      break;
 800d68a:	e059      	b.n	800d740 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d68c:	4b2f      	ldr	r3, [pc, #188]	@ (800d74c <USBD_SetConfig+0x150>)
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d112      	bne.n	800d6ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2202      	movs	r2, #2
 800d698:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d69c:	4b2b      	ldr	r3, [pc, #172]	@ (800d74c <USBD_SetConfig+0x150>)
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d6a6:	4b29      	ldr	r3, [pc, #164]	@ (800d74c <USBD_SetConfig+0x150>)
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f7fe ffa8 	bl	800c602 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 fa12 	bl	800dadc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d6b8:	e042      	b.n	800d740 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d6ba:	4b24      	ldr	r3, [pc, #144]	@ (800d74c <USBD_SetConfig+0x150>)
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	461a      	mov	r2, r3
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d02a      	beq.n	800d71e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7fe ff96 	bl	800c602 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d6d6:	4b1d      	ldr	r3, [pc, #116]	@ (800d74c <USBD_SetConfig+0x150>)
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d6e0:	4b1a      	ldr	r3, [pc, #104]	@ (800d74c <USBD_SetConfig+0x150>)
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7fe ff6f 	bl	800c5ca <USBD_SetClassConfig>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00f      	beq.n	800d716 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d6f6:	6839      	ldr	r1, [r7, #0]
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f918 	bl	800d92e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	b2db      	uxtb	r3, r3
 800d704:	4619      	mov	r1, r3
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7fe ff7b 	bl	800c602 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2202      	movs	r2, #2
 800d710:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d714:	e014      	b.n	800d740 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 f9e0 	bl	800dadc <USBD_CtlSendStatus>
      break;
 800d71c:	e010      	b.n	800d740 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 f9dc 	bl	800dadc <USBD_CtlSendStatus>
      break;
 800d724:	e00c      	b.n	800d740 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d726:	6839      	ldr	r1, [r7, #0]
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 f900 	bl	800d92e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d72e:	4b07      	ldr	r3, [pc, #28]	@ (800d74c <USBD_SetConfig+0x150>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	4619      	mov	r1, r3
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7fe ff64 	bl	800c602 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d73a:	2303      	movs	r3, #3
 800d73c:	73fb      	strb	r3, [r7, #15]
      break;
 800d73e:	bf00      	nop
  }

  return ret;
 800d740:	7bfb      	ldrb	r3, [r7, #15]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	2006ea88 	.word	0x2006ea88

0800d750 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	88db      	ldrh	r3, [r3, #6]
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d004      	beq.n	800d76c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d762:	6839      	ldr	r1, [r7, #0]
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f000 f8e2 	bl	800d92e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d76a:	e023      	b.n	800d7b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d772:	b2db      	uxtb	r3, r3
 800d774:	2b02      	cmp	r3, #2
 800d776:	dc02      	bgt.n	800d77e <USBD_GetConfig+0x2e>
 800d778:	2b00      	cmp	r3, #0
 800d77a:	dc03      	bgt.n	800d784 <USBD_GetConfig+0x34>
 800d77c:	e015      	b.n	800d7aa <USBD_GetConfig+0x5a>
 800d77e:	2b03      	cmp	r3, #3
 800d780:	d00b      	beq.n	800d79a <USBD_GetConfig+0x4a>
 800d782:	e012      	b.n	800d7aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2200      	movs	r2, #0
 800d788:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	3308      	adds	r3, #8
 800d78e:	2201      	movs	r2, #1
 800d790:	4619      	mov	r1, r3
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f000 f948 	bl	800da28 <USBD_CtlSendData>
        break;
 800d798:	e00c      	b.n	800d7b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	3304      	adds	r3, #4
 800d79e:	2201      	movs	r2, #1
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 f940 	bl	800da28 <USBD_CtlSendData>
        break;
 800d7a8:	e004      	b.n	800d7b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d7aa:	6839      	ldr	r1, [r7, #0]
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 f8be 	bl	800d92e <USBD_CtlError>
        break;
 800d7b2:	bf00      	nop
}
 800d7b4:	bf00      	nop
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	3b01      	subs	r3, #1
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d81e      	bhi.n	800d812 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	88db      	ldrh	r3, [r3, #6]
 800d7d8:	2b02      	cmp	r3, #2
 800d7da:	d004      	beq.n	800d7e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 f8a5 	bl	800d92e <USBD_CtlError>
        break;
 800d7e4:	e01a      	b.n	800d81c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d005      	beq.n	800d802 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	f043 0202 	orr.w	r2, r3, #2
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	330c      	adds	r3, #12
 800d806:	2202      	movs	r2, #2
 800d808:	4619      	mov	r1, r3
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 f90c 	bl	800da28 <USBD_CtlSendData>
      break;
 800d810:	e004      	b.n	800d81c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d812:	6839      	ldr	r1, [r7, #0]
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 f88a 	bl	800d92e <USBD_CtlError>
      break;
 800d81a:	bf00      	nop
  }
}
 800d81c:	bf00      	nop
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	885b      	ldrh	r3, [r3, #2]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d107      	bne.n	800d846 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 f94c 	bl	800dadc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d844:	e013      	b.n	800d86e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	885b      	ldrh	r3, [r3, #2]
 800d84a:	2b02      	cmp	r3, #2
 800d84c:	d10b      	bne.n	800d866 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	889b      	ldrh	r3, [r3, #4]
 800d852:	0a1b      	lsrs	r3, r3, #8
 800d854:	b29b      	uxth	r3, r3
 800d856:	b2da      	uxtb	r2, r3
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f000 f93c 	bl	800dadc <USBD_CtlSendStatus>
}
 800d864:	e003      	b.n	800d86e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d866:	6839      	ldr	r1, [r7, #0]
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f860 	bl	800d92e <USBD_CtlError>
}
 800d86e:	bf00      	nop
 800d870:	3708      	adds	r7, #8
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}

0800d876 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d876:	b580      	push	{r7, lr}
 800d878:	b082      	sub	sp, #8
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d886:	b2db      	uxtb	r3, r3
 800d888:	3b01      	subs	r3, #1
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d80b      	bhi.n	800d8a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	885b      	ldrh	r3, [r3, #2]
 800d892:	2b01      	cmp	r3, #1
 800d894:	d10c      	bne.n	800d8b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f91c 	bl	800dadc <USBD_CtlSendStatus>
      }
      break;
 800d8a4:	e004      	b.n	800d8b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d8a6:	6839      	ldr	r1, [r7, #0]
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 f840 	bl	800d92e <USBD_CtlError>
      break;
 800d8ae:	e000      	b.n	800d8b2 <USBD_ClrFeature+0x3c>
      break;
 800d8b0:	bf00      	nop
  }
}
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b084      	sub	sp, #16
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
 800d8c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	781a      	ldrb	r2, [r3, #0]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	781a      	ldrb	r2, [r3, #0]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	f7ff fa16 	bl	800cd16 <SWAPBYTE>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f7ff fa09 	bl	800cd16 <SWAPBYTE>
 800d904:	4603      	mov	r3, r0
 800d906:	461a      	mov	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	3301      	adds	r3, #1
 800d910:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	3301      	adds	r3, #1
 800d916:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	f7ff f9fc 	bl	800cd16 <SWAPBYTE>
 800d91e:	4603      	mov	r3, r0
 800d920:	461a      	mov	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	80da      	strh	r2, [r3, #6]
}
 800d926:	bf00      	nop
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b082      	sub	sp, #8
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
 800d936:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d938:	2180      	movs	r1, #128	@ 0x80
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f000 fd30 	bl	800e3a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d940:	2100      	movs	r1, #0
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fd2c 	bl	800e3a0 <USBD_LL_StallEP>
}
 800d948:	bf00      	nop
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b086      	sub	sp, #24
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d95c:	2300      	movs	r3, #0
 800d95e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d042      	beq.n	800d9ec <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d96a:	6938      	ldr	r0, [r7, #16]
 800d96c:	f000 f842 	bl	800d9f4 <USBD_GetLen>
 800d970:	4603      	mov	r3, r0
 800d972:	3301      	adds	r3, #1
 800d974:	005b      	lsls	r3, r3, #1
 800d976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d97a:	d808      	bhi.n	800d98e <USBD_GetString+0x3e>
 800d97c:	6938      	ldr	r0, [r7, #16]
 800d97e:	f000 f839 	bl	800d9f4 <USBD_GetLen>
 800d982:	4603      	mov	r3, r0
 800d984:	3301      	adds	r3, #1
 800d986:	b29b      	uxth	r3, r3
 800d988:	005b      	lsls	r3, r3, #1
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	e001      	b.n	800d992 <USBD_GetString+0x42>
 800d98e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d996:	7dfb      	ldrb	r3, [r7, #23]
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	4413      	add	r3, r2
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	7812      	ldrb	r2, [r2, #0]
 800d9a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d9a2:	7dfb      	ldrb	r3, [r7, #23]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d9a8:	7dfb      	ldrb	r3, [r7, #23]
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	2203      	movs	r2, #3
 800d9b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d9b2:	7dfb      	ldrb	r3, [r7, #23]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d9b8:	e013      	b.n	800d9e2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
 800d9bc:	68ba      	ldr	r2, [r7, #8]
 800d9be:	4413      	add	r3, r2
 800d9c0:	693a      	ldr	r2, [r7, #16]
 800d9c2:	7812      	ldrb	r2, [r2, #0]
 800d9c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	613b      	str	r3, [r7, #16]
    idx++;
 800d9cc:	7dfb      	ldrb	r3, [r7, #23]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d9d2:	7dfb      	ldrb	r3, [r7, #23]
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	2200      	movs	r2, #0
 800d9da:	701a      	strb	r2, [r3, #0]
    idx++;
 800d9dc:	7dfb      	ldrb	r3, [r7, #23]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1e7      	bne.n	800d9ba <USBD_GetString+0x6a>
 800d9ea:	e000      	b.n	800d9ee <USBD_GetString+0x9e>
    return;
 800d9ec:	bf00      	nop
  }
}
 800d9ee:	3718      	adds	r7, #24
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b085      	sub	sp, #20
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800da04:	e005      	b.n	800da12 <USBD_GetLen+0x1e>
  {
    len++;
 800da06:	7bfb      	ldrb	r3, [r7, #15]
 800da08:	3301      	adds	r3, #1
 800da0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	3301      	adds	r3, #1
 800da10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1f5      	bne.n	800da06 <USBD_GetLen+0x12>
  }

  return len;
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3714      	adds	r7, #20
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2202      	movs	r2, #2
 800da38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	68ba      	ldr	r2, [r7, #8]
 800da4c:	2100      	movs	r1, #0
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f000 fd2f 	bl	800e4b2 <USBD_LL_Transmit>

  return USBD_OK;
 800da54:	2300      	movs	r3, #0
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}

0800da5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800da5e:	b580      	push	{r7, lr}
 800da60:	b084      	sub	sp, #16
 800da62:	af00      	add	r7, sp, #0
 800da64:	60f8      	str	r0, [r7, #12]
 800da66:	60b9      	str	r1, [r7, #8]
 800da68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	68ba      	ldr	r2, [r7, #8]
 800da6e:	2100      	movs	r1, #0
 800da70:	68f8      	ldr	r0, [r7, #12]
 800da72:	f000 fd1e 	bl	800e4b2 <USBD_LL_Transmit>

  return USBD_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2203      	movs	r2, #3
 800da90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68ba      	ldr	r2, [r7, #8]
 800daa8:	2100      	movs	r1, #0
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	f000 fd22 	bl	800e4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b084      	sub	sp, #16
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	60f8      	str	r0, [r7, #12]
 800dac2:	60b9      	str	r1, [r7, #8]
 800dac4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	68ba      	ldr	r2, [r7, #8]
 800daca:	2100      	movs	r1, #0
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f000 fd11 	bl	800e4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2204      	movs	r2, #4
 800dae8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800daec:	2300      	movs	r3, #0
 800daee:	2200      	movs	r2, #0
 800daf0:	2100      	movs	r1, #0
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 fcdd 	bl	800e4b2 <USBD_LL_Transmit>

  return USBD_OK;
 800daf8:	2300      	movs	r3, #0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800db02:	b580      	push	{r7, lr}
 800db04:	b082      	sub	sp, #8
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2205      	movs	r2, #5
 800db0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db12:	2300      	movs	r3, #0
 800db14:	2200      	movs	r2, #0
 800db16:	2100      	movs	r1, #0
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f000 fceb 	bl	800e4f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3708      	adds	r7, #8
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db2c:	2200      	movs	r2, #0
 800db2e:	4912      	ldr	r1, [pc, #72]	@ (800db78 <MX_USB_DEVICE_Init+0x50>)
 800db30:	4812      	ldr	r0, [pc, #72]	@ (800db7c <MX_USB_DEVICE_Init+0x54>)
 800db32:	f7fe fccd 	bl	800c4d0 <USBD_Init>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d001      	beq.n	800db40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db3c:	f7f5 f8f8 	bl	8002d30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800db40:	490f      	ldr	r1, [pc, #60]	@ (800db80 <MX_USB_DEVICE_Init+0x58>)
 800db42:	480e      	ldr	r0, [pc, #56]	@ (800db7c <MX_USB_DEVICE_Init+0x54>)
 800db44:	f7fe fcf4 	bl	800c530 <USBD_RegisterClass>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db4e:	f7f5 f8ef 	bl	8002d30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800db52:	490c      	ldr	r1, [pc, #48]	@ (800db84 <MX_USB_DEVICE_Init+0x5c>)
 800db54:	4809      	ldr	r0, [pc, #36]	@ (800db7c <MX_USB_DEVICE_Init+0x54>)
 800db56:	f7fe fbeb 	bl	800c330 <USBD_CDC_RegisterInterface>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db60:	f7f5 f8e6 	bl	8002d30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db64:	4805      	ldr	r0, [pc, #20]	@ (800db7c <MX_USB_DEVICE_Init+0x54>)
 800db66:	f7fe fd19 	bl	800c59c <USBD_Start>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d001      	beq.n	800db74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800db70:	f7f5 f8de 	bl	8002d30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db74:	bf00      	nop
 800db76:	bd80      	pop	{r7, pc}
 800db78:	200000b8 	.word	0x200000b8
 800db7c:	2006ea8c 	.word	0x2006ea8c
 800db80:	20000024 	.word	0x20000024
 800db84:	200000a4 	.word	0x200000a4

0800db88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db8c:	2200      	movs	r2, #0
 800db8e:	4905      	ldr	r1, [pc, #20]	@ (800dba4 <CDC_Init_FS+0x1c>)
 800db90:	4805      	ldr	r0, [pc, #20]	@ (800dba8 <CDC_Init_FS+0x20>)
 800db92:	f7fe fbe7 	bl	800c364 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db96:	4905      	ldr	r1, [pc, #20]	@ (800dbac <CDC_Init_FS+0x24>)
 800db98:	4803      	ldr	r0, [pc, #12]	@ (800dba8 <CDC_Init_FS+0x20>)
 800db9a:	f7fe fc05 	bl	800c3a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800db9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	2006f568 	.word	0x2006f568
 800dba8:	2006ea8c 	.word	0x2006ea8c
 800dbac:	2006ed68 	.word	0x2006ed68

0800dbb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dbb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	6039      	str	r1, [r7, #0]
 800dbca:	71fb      	strb	r3, [r7, #7]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dbd0:	79fb      	ldrb	r3, [r7, #7]
 800dbd2:	2b23      	cmp	r3, #35	@ 0x23
 800dbd4:	d84a      	bhi.n	800dc6c <CDC_Control_FS+0xac>
 800dbd6:	a201      	add	r2, pc, #4	@ (adr r2, 800dbdc <CDC_Control_FS+0x1c>)
 800dbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbdc:	0800dc6d 	.word	0x0800dc6d
 800dbe0:	0800dc6d 	.word	0x0800dc6d
 800dbe4:	0800dc6d 	.word	0x0800dc6d
 800dbe8:	0800dc6d 	.word	0x0800dc6d
 800dbec:	0800dc6d 	.word	0x0800dc6d
 800dbf0:	0800dc6d 	.word	0x0800dc6d
 800dbf4:	0800dc6d 	.word	0x0800dc6d
 800dbf8:	0800dc6d 	.word	0x0800dc6d
 800dbfc:	0800dc6d 	.word	0x0800dc6d
 800dc00:	0800dc6d 	.word	0x0800dc6d
 800dc04:	0800dc6d 	.word	0x0800dc6d
 800dc08:	0800dc6d 	.word	0x0800dc6d
 800dc0c:	0800dc6d 	.word	0x0800dc6d
 800dc10:	0800dc6d 	.word	0x0800dc6d
 800dc14:	0800dc6d 	.word	0x0800dc6d
 800dc18:	0800dc6d 	.word	0x0800dc6d
 800dc1c:	0800dc6d 	.word	0x0800dc6d
 800dc20:	0800dc6d 	.word	0x0800dc6d
 800dc24:	0800dc6d 	.word	0x0800dc6d
 800dc28:	0800dc6d 	.word	0x0800dc6d
 800dc2c:	0800dc6d 	.word	0x0800dc6d
 800dc30:	0800dc6d 	.word	0x0800dc6d
 800dc34:	0800dc6d 	.word	0x0800dc6d
 800dc38:	0800dc6d 	.word	0x0800dc6d
 800dc3c:	0800dc6d 	.word	0x0800dc6d
 800dc40:	0800dc6d 	.word	0x0800dc6d
 800dc44:	0800dc6d 	.word	0x0800dc6d
 800dc48:	0800dc6d 	.word	0x0800dc6d
 800dc4c:	0800dc6d 	.word	0x0800dc6d
 800dc50:	0800dc6d 	.word	0x0800dc6d
 800dc54:	0800dc6d 	.word	0x0800dc6d
 800dc58:	0800dc6d 	.word	0x0800dc6d
 800dc5c:	0800dc6d 	.word	0x0800dc6d
 800dc60:	0800dc6d 	.word	0x0800dc6d
 800dc64:	0800dc6d 	.word	0x0800dc6d
 800dc68:	0800dc6d 	.word	0x0800dc6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc6c:	bf00      	nop
  }

  return (USBD_OK);
 800dc6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
 CDC_Receive_FS_App(Buf, Len); // <----  ADD THIS LINE HERE!  Call your callback function
 800dc86:	6839      	ldr	r1, [r7, #0]
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f7f5 fe9d 	bl	80039c8 <CDC_Receive_FS_App>
 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dc8e:	6879      	ldr	r1, [r7, #4]
 800dc90:	4805      	ldr	r0, [pc, #20]	@ (800dca8 <CDC_Receive_FS+0x2c>)
 800dc92:	f7fe fb89 	bl	800c3a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dc96:	4804      	ldr	r0, [pc, #16]	@ (800dca8 <CDC_Receive_FS+0x2c>)
 800dc98:	f7fe fbe4 	bl	800c464 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dc9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	2006ea8c 	.word	0x2006ea8c

0800dcac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	460b      	mov	r3, r1
 800dcb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dcbc:	4b0d      	ldr	r3, [pc, #52]	@ (800dcf4 <CDC_Transmit_FS+0x48>)
 800dcbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dcc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d001      	beq.n	800dcd2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e00b      	b.n	800dcea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dcd2:	887b      	ldrh	r3, [r7, #2]
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	6879      	ldr	r1, [r7, #4]
 800dcd8:	4806      	ldr	r0, [pc, #24]	@ (800dcf4 <CDC_Transmit_FS+0x48>)
 800dcda:	f7fe fb43 	bl	800c364 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dcde:	4805      	ldr	r0, [pc, #20]	@ (800dcf4 <CDC_Transmit_FS+0x48>)
 800dce0:	f7fe fb80 	bl	800c3e4 <USBD_CDC_TransmitPacket>
 800dce4:	4603      	mov	r3, r0
 800dce6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	2006ea8c 	.word	0x2006ea8c

0800dcf8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b087      	sub	sp, #28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	4613      	mov	r3, r2
 800dd04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dd06:	2300      	movs	r3, #0
 800dd08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dd0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	371c      	adds	r7, #28
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr
	...

0800dd1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	6039      	str	r1, [r7, #0]
 800dd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	2212      	movs	r2, #18
 800dd2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dd2e:	4b03      	ldr	r3, [pc, #12]	@ (800dd3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr
 800dd3c:	200000d8 	.word	0x200000d8

0800dd40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	4603      	mov	r3, r0
 800dd48:	6039      	str	r1, [r7, #0]
 800dd4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	2204      	movs	r2, #4
 800dd50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd52:	4b03      	ldr	r3, [pc, #12]	@ (800dd60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	200000f8 	.word	0x200000f8

0800dd64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	6039      	str	r1, [r7, #0]
 800dd6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd70:	79fb      	ldrb	r3, [r7, #7]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d105      	bne.n	800dd82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	4907      	ldr	r1, [pc, #28]	@ (800dd98 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd7a:	4808      	ldr	r0, [pc, #32]	@ (800dd9c <USBD_FS_ProductStrDescriptor+0x38>)
 800dd7c:	f7ff fde8 	bl	800d950 <USBD_GetString>
 800dd80:	e004      	b.n	800dd8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd82:	683a      	ldr	r2, [r7, #0]
 800dd84:	4904      	ldr	r1, [pc, #16]	@ (800dd98 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd86:	4805      	ldr	r0, [pc, #20]	@ (800dd9c <USBD_FS_ProductStrDescriptor+0x38>)
 800dd88:	f7ff fde2 	bl	800d950 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd8c:	4b02      	ldr	r3, [pc, #8]	@ (800dd98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	2006fd68 	.word	0x2006fd68
 800dd9c:	0800ec18 	.word	0x0800ec18

0800dda0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	4603      	mov	r3, r0
 800dda8:	6039      	str	r1, [r7, #0]
 800ddaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ddac:	683a      	ldr	r2, [r7, #0]
 800ddae:	4904      	ldr	r1, [pc, #16]	@ (800ddc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ddb0:	4804      	ldr	r0, [pc, #16]	@ (800ddc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ddb2:	f7ff fdcd 	bl	800d950 <USBD_GetString>
  return USBD_StrDesc;
 800ddb6:	4b02      	ldr	r3, [pc, #8]	@ (800ddc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	2006fd68 	.word	0x2006fd68
 800ddc4:	0800ec30 	.word	0x0800ec30

0800ddc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	6039      	str	r1, [r7, #0]
 800ddd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	221a      	movs	r2, #26
 800ddd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ddda:	f000 f855 	bl	800de88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ddde:	4b02      	ldr	r3, [pc, #8]	@ (800dde8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	200000fc 	.word	0x200000fc

0800ddec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	6039      	str	r1, [r7, #0]
 800ddf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddf8:	79fb      	ldrb	r3, [r7, #7]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d105      	bne.n	800de0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddfe:	683a      	ldr	r2, [r7, #0]
 800de00:	4907      	ldr	r1, [pc, #28]	@ (800de20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de02:	4808      	ldr	r0, [pc, #32]	@ (800de24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de04:	f7ff fda4 	bl	800d950 <USBD_GetString>
 800de08:	e004      	b.n	800de14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	4904      	ldr	r1, [pc, #16]	@ (800de20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de0e:	4805      	ldr	r0, [pc, #20]	@ (800de24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de10:	f7ff fd9e 	bl	800d950 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de14:	4b02      	ldr	r3, [pc, #8]	@ (800de20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800de16:	4618      	mov	r0, r3
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	2006fd68 	.word	0x2006fd68
 800de24:	0800ec44 	.word	0x0800ec44

0800de28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	4603      	mov	r3, r0
 800de30:	6039      	str	r1, [r7, #0]
 800de32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de34:	79fb      	ldrb	r3, [r7, #7]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d105      	bne.n	800de46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de3a:	683a      	ldr	r2, [r7, #0]
 800de3c:	4907      	ldr	r1, [pc, #28]	@ (800de5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de3e:	4808      	ldr	r0, [pc, #32]	@ (800de60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de40:	f7ff fd86 	bl	800d950 <USBD_GetString>
 800de44:	e004      	b.n	800de50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de46:	683a      	ldr	r2, [r7, #0]
 800de48:	4904      	ldr	r1, [pc, #16]	@ (800de5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de4a:	4805      	ldr	r0, [pc, #20]	@ (800de60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de4c:	f7ff fd80 	bl	800d950 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de50:	4b02      	ldr	r3, [pc, #8]	@ (800de5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de52:	4618      	mov	r0, r3
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	2006fd68 	.word	0x2006fd68
 800de60:	0800ec50 	.word	0x0800ec50

0800de64 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
 800de6a:	4603      	mov	r3, r0
 800de6c:	6039      	str	r1, [r7, #0]
 800de6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	220c      	movs	r2, #12
 800de74:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800de76:	4b03      	ldr	r3, [pc, #12]	@ (800de84 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800de78:	4618      	mov	r0, r3
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr
 800de84:	200000ec 	.word	0x200000ec

0800de88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de8e:	4b0f      	ldr	r3, [pc, #60]	@ (800decc <Get_SerialNum+0x44>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de94:	4b0e      	ldr	r3, [pc, #56]	@ (800ded0 <Get_SerialNum+0x48>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de9a:	4b0e      	ldr	r3, [pc, #56]	@ (800ded4 <Get_SerialNum+0x4c>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4413      	add	r3, r2
 800dea6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d009      	beq.n	800dec2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800deae:	2208      	movs	r2, #8
 800deb0:	4909      	ldr	r1, [pc, #36]	@ (800ded8 <Get_SerialNum+0x50>)
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f000 f814 	bl	800dee0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800deb8:	2204      	movs	r2, #4
 800deba:	4908      	ldr	r1, [pc, #32]	@ (800dedc <Get_SerialNum+0x54>)
 800debc:	68b8      	ldr	r0, [r7, #8]
 800debe:	f000 f80f 	bl	800dee0 <IntToUnicode>
  }
}
 800dec2:	bf00      	nop
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	1ff0f420 	.word	0x1ff0f420
 800ded0:	1ff0f424 	.word	0x1ff0f424
 800ded4:	1ff0f428 	.word	0x1ff0f428
 800ded8:	200000fe 	.word	0x200000fe
 800dedc:	2000010e 	.word	0x2000010e

0800dee0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b087      	sub	sp, #28
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	4613      	mov	r3, r2
 800deec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800deee:	2300      	movs	r3, #0
 800def0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800def2:	2300      	movs	r3, #0
 800def4:	75fb      	strb	r3, [r7, #23]
 800def6:	e027      	b.n	800df48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	0f1b      	lsrs	r3, r3, #28
 800defc:	2b09      	cmp	r3, #9
 800defe:	d80b      	bhi.n	800df18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	0f1b      	lsrs	r3, r3, #28
 800df04:	b2da      	uxtb	r2, r3
 800df06:	7dfb      	ldrb	r3, [r7, #23]
 800df08:	005b      	lsls	r3, r3, #1
 800df0a:	4619      	mov	r1, r3
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	440b      	add	r3, r1
 800df10:	3230      	adds	r2, #48	@ 0x30
 800df12:	b2d2      	uxtb	r2, r2
 800df14:	701a      	strb	r2, [r3, #0]
 800df16:	e00a      	b.n	800df2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	0f1b      	lsrs	r3, r3, #28
 800df1c:	b2da      	uxtb	r2, r3
 800df1e:	7dfb      	ldrb	r3, [r7, #23]
 800df20:	005b      	lsls	r3, r3, #1
 800df22:	4619      	mov	r1, r3
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	440b      	add	r3, r1
 800df28:	3237      	adds	r2, #55	@ 0x37
 800df2a:	b2d2      	uxtb	r2, r2
 800df2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	011b      	lsls	r3, r3, #4
 800df32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df34:	7dfb      	ldrb	r3, [r7, #23]
 800df36:	005b      	lsls	r3, r3, #1
 800df38:	3301      	adds	r3, #1
 800df3a:	68ba      	ldr	r2, [r7, #8]
 800df3c:	4413      	add	r3, r2
 800df3e:	2200      	movs	r2, #0
 800df40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800df42:	7dfb      	ldrb	r3, [r7, #23]
 800df44:	3301      	adds	r3, #1
 800df46:	75fb      	strb	r3, [r7, #23]
 800df48:	7dfa      	ldrb	r2, [r7, #23]
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d3d3      	bcc.n	800def8 <IntToUnicode+0x18>
  }
}
 800df50:	bf00      	nop
 800df52:	bf00      	nop
 800df54:	371c      	adds	r7, #28
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr
	...

0800df60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b0ae      	sub	sp, #184	@ 0xb8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800df6c:	2200      	movs	r2, #0
 800df6e:	601a      	str	r2, [r3, #0]
 800df70:	605a      	str	r2, [r3, #4]
 800df72:	609a      	str	r2, [r3, #8]
 800df74:	60da      	str	r2, [r3, #12]
 800df76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800df78:	f107 0314 	add.w	r3, r7, #20
 800df7c:	2290      	movs	r2, #144	@ 0x90
 800df7e:	2100      	movs	r1, #0
 800df80:	4618      	mov	r0, r3
 800df82:	f000 fc29 	bl	800e7d8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800df8e:	d161      	bne.n	800e054 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800df90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800df94:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800df96:	2300      	movs	r3, #0
 800df98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800df9c:	f107 0314 	add.w	r3, r7, #20
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7f9 fc3b 	bl	800781c <HAL_RCCEx_PeriphCLKConfig>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d001      	beq.n	800dfb0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800dfac:	f7f4 fec0 	bl	8002d30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfb0:	4b2a      	ldr	r3, [pc, #168]	@ (800e05c <HAL_PCD_MspInit+0xfc>)
 800dfb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfb4:	4a29      	ldr	r2, [pc, #164]	@ (800e05c <HAL_PCD_MspInit+0xfc>)
 800dfb6:	f043 0301 	orr.w	r3, r3, #1
 800dfba:	6313      	str	r3, [r2, #48]	@ 0x30
 800dfbc:	4b27      	ldr	r3, [pc, #156]	@ (800e05c <HAL_PCD_MspInit+0xfc>)
 800dfbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfc0:	f003 0301 	and.w	r3, r3, #1
 800dfc4:	613b      	str	r3, [r7, #16]
 800dfc6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800dfc8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800dfcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfd0:	2302      	movs	r3, #2
 800dfd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dfe2:	230a      	movs	r3, #10
 800dfe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfe8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800dfec:	4619      	mov	r1, r3
 800dfee:	481c      	ldr	r0, [pc, #112]	@ (800e060 <HAL_PCD_MspInit+0x100>)
 800dff0:	f7f7 fa78 	bl	80054e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800dff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dff8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dffc:	2300      	movs	r3, #0
 800dffe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e002:	2300      	movs	r3, #0
 800e004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800e008:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800e00c:	4619      	mov	r1, r3
 800e00e:	4814      	ldr	r0, [pc, #80]	@ (800e060 <HAL_PCD_MspInit+0x100>)
 800e010:	f7f7 fa68 	bl	80054e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e014:	4b11      	ldr	r3, [pc, #68]	@ (800e05c <HAL_PCD_MspInit+0xfc>)
 800e016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e018:	4a10      	ldr	r2, [pc, #64]	@ (800e05c <HAL_PCD_MspInit+0xfc>)
 800e01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e01e:	6353      	str	r3, [r2, #52]	@ 0x34
 800e020:	4b0e      	ldr	r3, [pc, #56]	@ (800e05c <HAL_PCD_MspInit+0xfc>)
 800e022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e028:	60fb      	str	r3, [r7, #12]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	4b0b      	ldr	r3, [pc, #44]	@ (800e05c <HAL_PCD_MspInit+0xfc>)
 800e02e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e030:	4a0a      	ldr	r2, [pc, #40]	@ (800e05c <HAL_PCD_MspInit+0xfc>)
 800e032:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e036:	6453      	str	r3, [r2, #68]	@ 0x44
 800e038:	4b08      	ldr	r3, [pc, #32]	@ (800e05c <HAL_PCD_MspInit+0xfc>)
 800e03a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e03c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e040:	60bb      	str	r3, [r7, #8]
 800e042:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e044:	2200      	movs	r2, #0
 800e046:	2100      	movs	r1, #0
 800e048:	2043      	movs	r0, #67	@ 0x43
 800e04a:	f7f6 fabc 	bl	80045c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e04e:	2043      	movs	r0, #67	@ 0x43
 800e050:	f7f6 fad5 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e054:	bf00      	nop
 800e056:	37b8      	adds	r7, #184	@ 0xb8
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	40023800 	.word	0x40023800
 800e060:	40020000 	.word	0x40020000

0800e064 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e078:	4619      	mov	r1, r3
 800e07a:	4610      	mov	r0, r2
 800e07c:	f7fe fadb 	bl	800c636 <USBD_LL_SetupStage>
}
 800e080:	bf00      	nop
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	460b      	mov	r3, r1
 800e092:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800e09a:	78fa      	ldrb	r2, [r7, #3]
 800e09c:	6879      	ldr	r1, [r7, #4]
 800e09e:	4613      	mov	r3, r2
 800e0a0:	00db      	lsls	r3, r3, #3
 800e0a2:	4413      	add	r3, r2
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	440b      	add	r3, r1
 800e0a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e0ac:	681a      	ldr	r2, [r3, #0]
 800e0ae:	78fb      	ldrb	r3, [r7, #3]
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	f7fe fb15 	bl	800c6e0 <USBD_LL_DataOutStage>
}
 800e0b6:	bf00      	nop
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	460b      	mov	r3, r1
 800e0c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800e0d0:	78fa      	ldrb	r2, [r7, #3]
 800e0d2:	6879      	ldr	r1, [r7, #4]
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	00db      	lsls	r3, r3, #3
 800e0d8:	4413      	add	r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	440b      	add	r3, r1
 800e0de:	3320      	adds	r3, #32
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	78fb      	ldrb	r3, [r7, #3]
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	f7fe fbae 	bl	800c846 <USBD_LL_DataInStage>
}
 800e0ea:	bf00      	nop
 800e0ec:	3708      	adds	r7, #8
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b082      	sub	sp, #8
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e100:	4618      	mov	r0, r3
 800e102:	f7fe fce8 	bl	800cad6 <USBD_LL_SOF>
}
 800e106:	bf00      	nop
 800e108:	3708      	adds	r7, #8
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b084      	sub	sp, #16
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e116:	2301      	movs	r3, #1
 800e118:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	79db      	ldrb	r3, [r3, #7]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d102      	bne.n	800e128 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e122:	2300      	movs	r3, #0
 800e124:	73fb      	strb	r3, [r7, #15]
 800e126:	e008      	b.n	800e13a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	79db      	ldrb	r3, [r3, #7]
 800e12c:	2b02      	cmp	r3, #2
 800e12e:	d102      	bne.n	800e136 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e130:	2301      	movs	r3, #1
 800e132:	73fb      	strb	r3, [r7, #15]
 800e134:	e001      	b.n	800e13a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e136:	f7f4 fdfb 	bl	8002d30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e140:	7bfa      	ldrb	r2, [r7, #15]
 800e142:	4611      	mov	r1, r2
 800e144:	4618      	mov	r0, r3
 800e146:	f7fe fc82 	bl	800ca4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e150:	4618      	mov	r0, r3
 800e152:	f7fe fc2a 	bl	800c9aa <USBD_LL_Reset>
}
 800e156:	bf00      	nop
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
	...

0800e160 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fe fc7d 	bl	800ca6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	6812      	ldr	r2, [r2, #0]
 800e182:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e186:	f043 0301 	orr.w	r3, r3, #1
 800e18a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	7adb      	ldrb	r3, [r3, #11]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d005      	beq.n	800e1a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e194:	4b04      	ldr	r3, [pc, #16]	@ (800e1a8 <HAL_PCD_SuspendCallback+0x48>)
 800e196:	691b      	ldr	r3, [r3, #16]
 800e198:	4a03      	ldr	r2, [pc, #12]	@ (800e1a8 <HAL_PCD_SuspendCallback+0x48>)
 800e19a:	f043 0306 	orr.w	r3, r3, #6
 800e19e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e1a0:	bf00      	nop
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	e000ed00 	.word	0xe000ed00

0800e1ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fe fc73 	bl	800caa6 <USBD_LL_Resume>
}
 800e1c0:	bf00      	nop
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e1da:	78fa      	ldrb	r2, [r7, #3]
 800e1dc:	4611      	mov	r1, r2
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe fccb 	bl	800cb7a <USBD_LL_IsoOUTIncomplete>
}
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e1fe:	78fa      	ldrb	r2, [r7, #3]
 800e200:	4611      	mov	r1, r2
 800e202:	4618      	mov	r0, r3
 800e204:	f7fe fc87 	bl	800cb16 <USBD_LL_IsoINIncomplete>
}
 800e208:	bf00      	nop
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fe fcdd 	bl	800cbde <USBD_LL_DevConnected>
}
 800e224:	bf00      	nop
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7fe fcda 	bl	800cbf4 <USBD_LL_DevDisconnected>
}
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d13c      	bne.n	800e2d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e258:	4a20      	ldr	r2, [pc, #128]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4a1e      	ldr	r2, [pc, #120]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e264:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e268:	4b1c      	ldr	r3, [pc, #112]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e26a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e26e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e270:	4b1a      	ldr	r3, [pc, #104]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e272:	2206      	movs	r2, #6
 800e274:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e276:	4b19      	ldr	r3, [pc, #100]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e278:	2202      	movs	r2, #2
 800e27a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e27c:	4b17      	ldr	r3, [pc, #92]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e27e:	2200      	movs	r2, #0
 800e280:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e282:	4b16      	ldr	r3, [pc, #88]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e284:	2202      	movs	r2, #2
 800e286:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800e288:	4b14      	ldr	r3, [pc, #80]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e28a:	2201      	movs	r2, #1
 800e28c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e28e:	4b13      	ldr	r3, [pc, #76]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e290:	2200      	movs	r2, #0
 800e292:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e294:	4b11      	ldr	r3, [pc, #68]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e296:	2200      	movs	r2, #0
 800e298:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e29a:	4b10      	ldr	r3, [pc, #64]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e29c:	2201      	movs	r2, #1
 800e29e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e2a0:	4b0e      	ldr	r3, [pc, #56]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e2a6:	480d      	ldr	r0, [pc, #52]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e2a8:	f7f7 fafb 	bl	80058a2 <HAL_PCD_Init>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e2b2:	f7f4 fd3d 	bl	8002d30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e2b6:	2180      	movs	r1, #128	@ 0x80
 800e2b8:	4808      	ldr	r0, [pc, #32]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e2ba:	f7f8 fd46 	bl	8006d4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e2be:	2240      	movs	r2, #64	@ 0x40
 800e2c0:	2100      	movs	r1, #0
 800e2c2:	4806      	ldr	r0, [pc, #24]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e2c4:	f7f8 fcfa 	bl	8006cbc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e2c8:	2280      	movs	r2, #128	@ 0x80
 800e2ca:	2101      	movs	r1, #1
 800e2cc:	4803      	ldr	r0, [pc, #12]	@ (800e2dc <USBD_LL_Init+0x94>)
 800e2ce:	f7f8 fcf5 	bl	8006cbc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	2006ff68 	.word	0x2006ff68

0800e2e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7f7 fbe9 	bl	8005ace <HAL_PCD_Start>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e300:	7bfb      	ldrb	r3, [r7, #15]
 800e302:	4618      	mov	r0, r3
 800e304:	f000 f97e 	bl	800e604 <USBD_Get_USB_Status>
 800e308:	4603      	mov	r3, r0
 800e30a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e30c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}

0800e316 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b084      	sub	sp, #16
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	6078      	str	r0, [r7, #4]
 800e31e:	4608      	mov	r0, r1
 800e320:	4611      	mov	r1, r2
 800e322:	461a      	mov	r2, r3
 800e324:	4603      	mov	r3, r0
 800e326:	70fb      	strb	r3, [r7, #3]
 800e328:	460b      	mov	r3, r1
 800e32a:	70bb      	strb	r3, [r7, #2]
 800e32c:	4613      	mov	r3, r2
 800e32e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e330:	2300      	movs	r3, #0
 800e332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e334:	2300      	movs	r3, #0
 800e336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e33e:	78bb      	ldrb	r3, [r7, #2]
 800e340:	883a      	ldrh	r2, [r7, #0]
 800e342:	78f9      	ldrb	r1, [r7, #3]
 800e344:	f7f8 f8d7 	bl	80064f6 <HAL_PCD_EP_Open>
 800e348:	4603      	mov	r3, r0
 800e34a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e34c:	7bfb      	ldrb	r3, [r7, #15]
 800e34e:	4618      	mov	r0, r3
 800e350:	f000 f958 	bl	800e604 <USBD_Get_USB_Status>
 800e354:	4603      	mov	r3, r0
 800e356:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e358:	7bbb      	ldrb	r3, [r7, #14]
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b084      	sub	sp, #16
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
 800e36a:	460b      	mov	r3, r1
 800e36c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e372:	2300      	movs	r3, #0
 800e374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e37c:	78fa      	ldrb	r2, [r7, #3]
 800e37e:	4611      	mov	r1, r2
 800e380:	4618      	mov	r0, r3
 800e382:	f7f8 f920 	bl	80065c6 <HAL_PCD_EP_Close>
 800e386:	4603      	mov	r3, r0
 800e388:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e38a:	7bfb      	ldrb	r3, [r7, #15]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 f939 	bl	800e604 <USBD_Get_USB_Status>
 800e392:	4603      	mov	r3, r0
 800e394:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e396:	7bbb      	ldrb	r3, [r7, #14]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	460b      	mov	r3, r1
 800e3aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3ba:	78fa      	ldrb	r2, [r7, #3]
 800e3bc:	4611      	mov	r1, r2
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7f8 f9d8 	bl	8006774 <HAL_PCD_EP_SetStall>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3c8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f000 f91a 	bl	800e604 <USBD_Get_USB_Status>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}

0800e3de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3de:	b580      	push	{r7, lr}
 800e3e0:	b084      	sub	sp, #16
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	6078      	str	r0, [r7, #4]
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3f8:	78fa      	ldrb	r2, [r7, #3]
 800e3fa:	4611      	mov	r1, r2
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7f8 fa1c 	bl	800683a <HAL_PCD_EP_ClrStall>
 800e402:	4603      	mov	r3, r0
 800e404:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e406:	7bfb      	ldrb	r3, [r7, #15]
 800e408:	4618      	mov	r0, r3
 800e40a:	f000 f8fb 	bl	800e604 <USBD_Get_USB_Status>
 800e40e:	4603      	mov	r3, r0
 800e410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e412:	7bbb      	ldrb	r3, [r7, #14]
}
 800e414:	4618      	mov	r0, r3
 800e416:	3710      	adds	r7, #16
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b085      	sub	sp, #20
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	460b      	mov	r3, r1
 800e426:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e42e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e434:	2b00      	cmp	r3, #0
 800e436:	da0b      	bge.n	800e450 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e438:	78fb      	ldrb	r3, [r7, #3]
 800e43a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e43e:	68f9      	ldr	r1, [r7, #12]
 800e440:	4613      	mov	r3, r2
 800e442:	00db      	lsls	r3, r3, #3
 800e444:	4413      	add	r3, r2
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	440b      	add	r3, r1
 800e44a:	3316      	adds	r3, #22
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	e00b      	b.n	800e468 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e450:	78fb      	ldrb	r3, [r7, #3]
 800e452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e456:	68f9      	ldr	r1, [r7, #12]
 800e458:	4613      	mov	r3, r2
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	4413      	add	r3, r2
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	440b      	add	r3, r1
 800e462:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e466:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3714      	adds	r7, #20
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	460b      	mov	r3, r1
 800e47e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e480:	2300      	movs	r3, #0
 800e482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e484:	2300      	movs	r3, #0
 800e486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e48e:	78fa      	ldrb	r2, [r7, #3]
 800e490:	4611      	mov	r1, r2
 800e492:	4618      	mov	r0, r3
 800e494:	f7f8 f80b 	bl	80064ae <HAL_PCD_SetAddress>
 800e498:	4603      	mov	r3, r0
 800e49a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e49c:	7bfb      	ldrb	r3, [r7, #15]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f000 f8b0 	bl	800e604 <USBD_Get_USB_Status>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b086      	sub	sp, #24
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	60f8      	str	r0, [r7, #12]
 800e4ba:	607a      	str	r2, [r7, #4]
 800e4bc:	603b      	str	r3, [r7, #0]
 800e4be:	460b      	mov	r3, r1
 800e4c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e4d0:	7af9      	ldrb	r1, [r7, #11]
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	f7f8 f913 	bl	8006700 <HAL_PCD_EP_Transmit>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4de:	7dfb      	ldrb	r3, [r7, #23]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f000 f88f 	bl	800e604 <USBD_Get_USB_Status>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3718      	adds	r7, #24
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b086      	sub	sp, #24
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	607a      	str	r2, [r7, #4]
 800e4fe:	603b      	str	r3, [r7, #0]
 800e500:	460b      	mov	r3, r1
 800e502:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e504:	2300      	movs	r3, #0
 800e506:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e508:	2300      	movs	r3, #0
 800e50a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e512:	7af9      	ldrb	r1, [r7, #11]
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	f7f8 f89f 	bl	800665a <HAL_PCD_EP_Receive>
 800e51c:	4603      	mov	r3, r0
 800e51e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e520:	7dfb      	ldrb	r3, [r7, #23]
 800e522:	4618      	mov	r0, r3
 800e524:	f000 f86e 	bl	800e604 <USBD_Get_USB_Status>
 800e528:	4603      	mov	r3, r0
 800e52a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e52c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3718      	adds	r7, #24
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b082      	sub	sp, #8
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	460b      	mov	r3, r1
 800e540:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e548:	78fa      	ldrb	r2, [r7, #3]
 800e54a:	4611      	mov	r1, r2
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7f8 f8bf 	bl	80066d0 <HAL_PCD_EP_GetRxCount>
 800e552:	4603      	mov	r3, r0
}
 800e554:	4618      	mov	r0, r3
 800e556:	3708      	adds	r7, #8
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}

0800e55c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b082      	sub	sp, #8
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
 800e564:	460b      	mov	r3, r1
 800e566:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e568:	78fb      	ldrb	r3, [r7, #3]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d002      	beq.n	800e574 <HAL_PCDEx_LPM_Callback+0x18>
 800e56e:	2b01      	cmp	r3, #1
 800e570:	d01f      	beq.n	800e5b2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e572:	e03b      	b.n	800e5ec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	7adb      	ldrb	r3, [r3, #11]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d007      	beq.n	800e58c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e57c:	f000 f83c 	bl	800e5f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e580:	4b1c      	ldr	r3, [pc, #112]	@ (800e5f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e582:	691b      	ldr	r3, [r3, #16]
 800e584:	4a1b      	ldr	r2, [pc, #108]	@ (800e5f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e586:	f023 0306 	bic.w	r3, r3, #6
 800e58a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	6812      	ldr	r2, [r2, #0]
 800e59a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e59e:	f023 0301 	bic.w	r3, r3, #1
 800e5a2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fe fa7b 	bl	800caa6 <USBD_LL_Resume>
    break;
 800e5b0:	e01c      	b.n	800e5ec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	687a      	ldr	r2, [r7, #4]
 800e5be:	6812      	ldr	r2, [r2, #0]
 800e5c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e5c4:	f043 0301 	orr.w	r3, r3, #1
 800e5c8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fe fa4c 	bl	800ca6e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	7adb      	ldrb	r3, [r3, #11]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d005      	beq.n	800e5ea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5de:	4b05      	ldr	r3, [pc, #20]	@ (800e5f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5e0:	691b      	ldr	r3, [r3, #16]
 800e5e2:	4a04      	ldr	r2, [pc, #16]	@ (800e5f4 <HAL_PCDEx_LPM_Callback+0x98>)
 800e5e4:	f043 0306 	orr.w	r3, r3, #6
 800e5e8:	6113      	str	r3, [r2, #16]
    break;
 800e5ea:	bf00      	nop
}
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	e000ed00 	.word	0xe000ed00

0800e5f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e5fc:	f7f3 ffa6 	bl	800254c <SystemClock_Config>
}
 800e600:	bf00      	nop
 800e602:	bd80      	pop	{r7, pc}

0800e604 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e604:	b480      	push	{r7}
 800e606:	b085      	sub	sp, #20
 800e608:	af00      	add	r7, sp, #0
 800e60a:	4603      	mov	r3, r0
 800e60c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e60e:	2300      	movs	r3, #0
 800e610:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e612:	79fb      	ldrb	r3, [r7, #7]
 800e614:	2b03      	cmp	r3, #3
 800e616:	d817      	bhi.n	800e648 <USBD_Get_USB_Status+0x44>
 800e618:	a201      	add	r2, pc, #4	@ (adr r2, 800e620 <USBD_Get_USB_Status+0x1c>)
 800e61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e61e:	bf00      	nop
 800e620:	0800e631 	.word	0x0800e631
 800e624:	0800e637 	.word	0x0800e637
 800e628:	0800e63d 	.word	0x0800e63d
 800e62c:	0800e643 	.word	0x0800e643
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e630:	2300      	movs	r3, #0
 800e632:	73fb      	strb	r3, [r7, #15]
    break;
 800e634:	e00b      	b.n	800e64e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e636:	2303      	movs	r3, #3
 800e638:	73fb      	strb	r3, [r7, #15]
    break;
 800e63a:	e008      	b.n	800e64e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e63c:	2301      	movs	r3, #1
 800e63e:	73fb      	strb	r3, [r7, #15]
    break;
 800e640:	e005      	b.n	800e64e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e642:	2303      	movs	r3, #3
 800e644:	73fb      	strb	r3, [r7, #15]
    break;
 800e646:	e002      	b.n	800e64e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e648:	2303      	movs	r3, #3
 800e64a:	73fb      	strb	r3, [r7, #15]
    break;
 800e64c:	bf00      	nop
  }
  return usb_status;
 800e64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e650:	4618      	mov	r0, r3
 800e652:	3714      	adds	r7, #20
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <malloc>:
 800e65c:	4b02      	ldr	r3, [pc, #8]	@ (800e668 <malloc+0xc>)
 800e65e:	4601      	mov	r1, r0
 800e660:	6818      	ldr	r0, [r3, #0]
 800e662:	f000 b82d 	b.w	800e6c0 <_malloc_r>
 800e666:	bf00      	nop
 800e668:	20000118 	.word	0x20000118

0800e66c <free>:
 800e66c:	4b02      	ldr	r3, [pc, #8]	@ (800e678 <free+0xc>)
 800e66e:	4601      	mov	r1, r0
 800e670:	6818      	ldr	r0, [r3, #0]
 800e672:	f000 b997 	b.w	800e9a4 <_free_r>
 800e676:	bf00      	nop
 800e678:	20000118 	.word	0x20000118

0800e67c <sbrk_aligned>:
 800e67c:	b570      	push	{r4, r5, r6, lr}
 800e67e:	4e0f      	ldr	r6, [pc, #60]	@ (800e6bc <sbrk_aligned+0x40>)
 800e680:	460c      	mov	r4, r1
 800e682:	6831      	ldr	r1, [r6, #0]
 800e684:	4605      	mov	r5, r0
 800e686:	b911      	cbnz	r1, 800e68e <sbrk_aligned+0x12>
 800e688:	f000 f8ae 	bl	800e7e8 <_sbrk_r>
 800e68c:	6030      	str	r0, [r6, #0]
 800e68e:	4621      	mov	r1, r4
 800e690:	4628      	mov	r0, r5
 800e692:	f000 f8a9 	bl	800e7e8 <_sbrk_r>
 800e696:	1c43      	adds	r3, r0, #1
 800e698:	d103      	bne.n	800e6a2 <sbrk_aligned+0x26>
 800e69a:	f04f 34ff 	mov.w	r4, #4294967295
 800e69e:	4620      	mov	r0, r4
 800e6a0:	bd70      	pop	{r4, r5, r6, pc}
 800e6a2:	1cc4      	adds	r4, r0, #3
 800e6a4:	f024 0403 	bic.w	r4, r4, #3
 800e6a8:	42a0      	cmp	r0, r4
 800e6aa:	d0f8      	beq.n	800e69e <sbrk_aligned+0x22>
 800e6ac:	1a21      	subs	r1, r4, r0
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	f000 f89a 	bl	800e7e8 <_sbrk_r>
 800e6b4:	3001      	adds	r0, #1
 800e6b6:	d1f2      	bne.n	800e69e <sbrk_aligned+0x22>
 800e6b8:	e7ef      	b.n	800e69a <sbrk_aligned+0x1e>
 800e6ba:	bf00      	nop
 800e6bc:	20070448 	.word	0x20070448

0800e6c0 <_malloc_r>:
 800e6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6c4:	1ccd      	adds	r5, r1, #3
 800e6c6:	f025 0503 	bic.w	r5, r5, #3
 800e6ca:	3508      	adds	r5, #8
 800e6cc:	2d0c      	cmp	r5, #12
 800e6ce:	bf38      	it	cc
 800e6d0:	250c      	movcc	r5, #12
 800e6d2:	2d00      	cmp	r5, #0
 800e6d4:	4606      	mov	r6, r0
 800e6d6:	db01      	blt.n	800e6dc <_malloc_r+0x1c>
 800e6d8:	42a9      	cmp	r1, r5
 800e6da:	d904      	bls.n	800e6e6 <_malloc_r+0x26>
 800e6dc:	230c      	movs	r3, #12
 800e6de:	6033      	str	r3, [r6, #0]
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e7bc <_malloc_r+0xfc>
 800e6ea:	f000 f869 	bl	800e7c0 <__malloc_lock>
 800e6ee:	f8d8 3000 	ldr.w	r3, [r8]
 800e6f2:	461c      	mov	r4, r3
 800e6f4:	bb44      	cbnz	r4, 800e748 <_malloc_r+0x88>
 800e6f6:	4629      	mov	r1, r5
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	f7ff ffbf 	bl	800e67c <sbrk_aligned>
 800e6fe:	1c43      	adds	r3, r0, #1
 800e700:	4604      	mov	r4, r0
 800e702:	d158      	bne.n	800e7b6 <_malloc_r+0xf6>
 800e704:	f8d8 4000 	ldr.w	r4, [r8]
 800e708:	4627      	mov	r7, r4
 800e70a:	2f00      	cmp	r7, #0
 800e70c:	d143      	bne.n	800e796 <_malloc_r+0xd6>
 800e70e:	2c00      	cmp	r4, #0
 800e710:	d04b      	beq.n	800e7aa <_malloc_r+0xea>
 800e712:	6823      	ldr	r3, [r4, #0]
 800e714:	4639      	mov	r1, r7
 800e716:	4630      	mov	r0, r6
 800e718:	eb04 0903 	add.w	r9, r4, r3
 800e71c:	f000 f864 	bl	800e7e8 <_sbrk_r>
 800e720:	4581      	cmp	r9, r0
 800e722:	d142      	bne.n	800e7aa <_malloc_r+0xea>
 800e724:	6821      	ldr	r1, [r4, #0]
 800e726:	1a6d      	subs	r5, r5, r1
 800e728:	4629      	mov	r1, r5
 800e72a:	4630      	mov	r0, r6
 800e72c:	f7ff ffa6 	bl	800e67c <sbrk_aligned>
 800e730:	3001      	adds	r0, #1
 800e732:	d03a      	beq.n	800e7aa <_malloc_r+0xea>
 800e734:	6823      	ldr	r3, [r4, #0]
 800e736:	442b      	add	r3, r5
 800e738:	6023      	str	r3, [r4, #0]
 800e73a:	f8d8 3000 	ldr.w	r3, [r8]
 800e73e:	685a      	ldr	r2, [r3, #4]
 800e740:	bb62      	cbnz	r2, 800e79c <_malloc_r+0xdc>
 800e742:	f8c8 7000 	str.w	r7, [r8]
 800e746:	e00f      	b.n	800e768 <_malloc_r+0xa8>
 800e748:	6822      	ldr	r2, [r4, #0]
 800e74a:	1b52      	subs	r2, r2, r5
 800e74c:	d420      	bmi.n	800e790 <_malloc_r+0xd0>
 800e74e:	2a0b      	cmp	r2, #11
 800e750:	d917      	bls.n	800e782 <_malloc_r+0xc2>
 800e752:	1961      	adds	r1, r4, r5
 800e754:	42a3      	cmp	r3, r4
 800e756:	6025      	str	r5, [r4, #0]
 800e758:	bf18      	it	ne
 800e75a:	6059      	strne	r1, [r3, #4]
 800e75c:	6863      	ldr	r3, [r4, #4]
 800e75e:	bf08      	it	eq
 800e760:	f8c8 1000 	streq.w	r1, [r8]
 800e764:	5162      	str	r2, [r4, r5]
 800e766:	604b      	str	r3, [r1, #4]
 800e768:	4630      	mov	r0, r6
 800e76a:	f000 f82f 	bl	800e7cc <__malloc_unlock>
 800e76e:	f104 000b 	add.w	r0, r4, #11
 800e772:	1d23      	adds	r3, r4, #4
 800e774:	f020 0007 	bic.w	r0, r0, #7
 800e778:	1ac2      	subs	r2, r0, r3
 800e77a:	bf1c      	itt	ne
 800e77c:	1a1b      	subne	r3, r3, r0
 800e77e:	50a3      	strne	r3, [r4, r2]
 800e780:	e7af      	b.n	800e6e2 <_malloc_r+0x22>
 800e782:	6862      	ldr	r2, [r4, #4]
 800e784:	42a3      	cmp	r3, r4
 800e786:	bf0c      	ite	eq
 800e788:	f8c8 2000 	streq.w	r2, [r8]
 800e78c:	605a      	strne	r2, [r3, #4]
 800e78e:	e7eb      	b.n	800e768 <_malloc_r+0xa8>
 800e790:	4623      	mov	r3, r4
 800e792:	6864      	ldr	r4, [r4, #4]
 800e794:	e7ae      	b.n	800e6f4 <_malloc_r+0x34>
 800e796:	463c      	mov	r4, r7
 800e798:	687f      	ldr	r7, [r7, #4]
 800e79a:	e7b6      	b.n	800e70a <_malloc_r+0x4a>
 800e79c:	461a      	mov	r2, r3
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	42a3      	cmp	r3, r4
 800e7a2:	d1fb      	bne.n	800e79c <_malloc_r+0xdc>
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	6053      	str	r3, [r2, #4]
 800e7a8:	e7de      	b.n	800e768 <_malloc_r+0xa8>
 800e7aa:	230c      	movs	r3, #12
 800e7ac:	6033      	str	r3, [r6, #0]
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	f000 f80c 	bl	800e7cc <__malloc_unlock>
 800e7b4:	e794      	b.n	800e6e0 <_malloc_r+0x20>
 800e7b6:	6005      	str	r5, [r0, #0]
 800e7b8:	e7d6      	b.n	800e768 <_malloc_r+0xa8>
 800e7ba:	bf00      	nop
 800e7bc:	2007044c 	.word	0x2007044c

0800e7c0 <__malloc_lock>:
 800e7c0:	4801      	ldr	r0, [pc, #4]	@ (800e7c8 <__malloc_lock+0x8>)
 800e7c2:	f000 b84b 	b.w	800e85c <__retarget_lock_acquire_recursive>
 800e7c6:	bf00      	nop
 800e7c8:	2007058c 	.word	0x2007058c

0800e7cc <__malloc_unlock>:
 800e7cc:	4801      	ldr	r0, [pc, #4]	@ (800e7d4 <__malloc_unlock+0x8>)
 800e7ce:	f000 b846 	b.w	800e85e <__retarget_lock_release_recursive>
 800e7d2:	bf00      	nop
 800e7d4:	2007058c 	.word	0x2007058c

0800e7d8 <memset>:
 800e7d8:	4402      	add	r2, r0
 800e7da:	4603      	mov	r3, r0
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d100      	bne.n	800e7e2 <memset+0xa>
 800e7e0:	4770      	bx	lr
 800e7e2:	f803 1b01 	strb.w	r1, [r3], #1
 800e7e6:	e7f9      	b.n	800e7dc <memset+0x4>

0800e7e8 <_sbrk_r>:
 800e7e8:	b538      	push	{r3, r4, r5, lr}
 800e7ea:	4d06      	ldr	r5, [pc, #24]	@ (800e804 <_sbrk_r+0x1c>)
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	4604      	mov	r4, r0
 800e7f0:	4608      	mov	r0, r1
 800e7f2:	602b      	str	r3, [r5, #0]
 800e7f4:	f7f4 fff6 	bl	80037e4 <_sbrk>
 800e7f8:	1c43      	adds	r3, r0, #1
 800e7fa:	d102      	bne.n	800e802 <_sbrk_r+0x1a>
 800e7fc:	682b      	ldr	r3, [r5, #0]
 800e7fe:	b103      	cbz	r3, 800e802 <_sbrk_r+0x1a>
 800e800:	6023      	str	r3, [r4, #0]
 800e802:	bd38      	pop	{r3, r4, r5, pc}
 800e804:	20070588 	.word	0x20070588

0800e808 <__errno>:
 800e808:	4b01      	ldr	r3, [pc, #4]	@ (800e810 <__errno+0x8>)
 800e80a:	6818      	ldr	r0, [r3, #0]
 800e80c:	4770      	bx	lr
 800e80e:	bf00      	nop
 800e810:	20000118 	.word	0x20000118

0800e814 <__libc_init_array>:
 800e814:	b570      	push	{r4, r5, r6, lr}
 800e816:	4d0d      	ldr	r5, [pc, #52]	@ (800e84c <__libc_init_array+0x38>)
 800e818:	4c0d      	ldr	r4, [pc, #52]	@ (800e850 <__libc_init_array+0x3c>)
 800e81a:	1b64      	subs	r4, r4, r5
 800e81c:	10a4      	asrs	r4, r4, #2
 800e81e:	2600      	movs	r6, #0
 800e820:	42a6      	cmp	r6, r4
 800e822:	d109      	bne.n	800e838 <__libc_init_array+0x24>
 800e824:	4d0b      	ldr	r5, [pc, #44]	@ (800e854 <__libc_init_array+0x40>)
 800e826:	4c0c      	ldr	r4, [pc, #48]	@ (800e858 <__libc_init_array+0x44>)
 800e828:	f000 f9e8 	bl	800ebfc <_init>
 800e82c:	1b64      	subs	r4, r4, r5
 800e82e:	10a4      	asrs	r4, r4, #2
 800e830:	2600      	movs	r6, #0
 800e832:	42a6      	cmp	r6, r4
 800e834:	d105      	bne.n	800e842 <__libc_init_array+0x2e>
 800e836:	bd70      	pop	{r4, r5, r6, pc}
 800e838:	f855 3b04 	ldr.w	r3, [r5], #4
 800e83c:	4798      	blx	r3
 800e83e:	3601      	adds	r6, #1
 800e840:	e7ee      	b.n	800e820 <__libc_init_array+0xc>
 800e842:	f855 3b04 	ldr.w	r3, [r5], #4
 800e846:	4798      	blx	r3
 800e848:	3601      	adds	r6, #1
 800e84a:	e7f2      	b.n	800e832 <__libc_init_array+0x1e>
 800e84c:	0800efc8 	.word	0x0800efc8
 800e850:	0800efc8 	.word	0x0800efc8
 800e854:	0800efc8 	.word	0x0800efc8
 800e858:	0800efcc 	.word	0x0800efcc

0800e85c <__retarget_lock_acquire_recursive>:
 800e85c:	4770      	bx	lr

0800e85e <__retarget_lock_release_recursive>:
 800e85e:	4770      	bx	lr

0800e860 <memcpy>:
 800e860:	440a      	add	r2, r1
 800e862:	4291      	cmp	r1, r2
 800e864:	f100 33ff 	add.w	r3, r0, #4294967295
 800e868:	d100      	bne.n	800e86c <memcpy+0xc>
 800e86a:	4770      	bx	lr
 800e86c:	b510      	push	{r4, lr}
 800e86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e872:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e876:	4291      	cmp	r1, r2
 800e878:	d1f9      	bne.n	800e86e <memcpy+0xe>
 800e87a:	bd10      	pop	{r4, pc}

0800e87c <ldexpf>:
 800e87c:	b510      	push	{r4, lr}
 800e87e:	ed2d 8b02 	vpush	{d8}
 800e882:	4604      	mov	r4, r0
 800e884:	eeb0 8a40 	vmov.f32	s16, s0
 800e888:	f000 f882 	bl	800e990 <finitef>
 800e88c:	b1b8      	cbz	r0, 800e8be <ldexpf+0x42>
 800e88e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e896:	d012      	beq.n	800e8be <ldexpf+0x42>
 800e898:	eeb0 0a48 	vmov.f32	s0, s16
 800e89c:	4620      	mov	r0, r4
 800e89e:	f000 f813 	bl	800e8c8 <scalbnf>
 800e8a2:	eeb0 8a40 	vmov.f32	s16, s0
 800e8a6:	f000 f873 	bl	800e990 <finitef>
 800e8aa:	b120      	cbz	r0, 800e8b6 <ldexpf+0x3a>
 800e8ac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b4:	d103      	bne.n	800e8be <ldexpf+0x42>
 800e8b6:	f7ff ffa7 	bl	800e808 <__errno>
 800e8ba:	2322      	movs	r3, #34	@ 0x22
 800e8bc:	6003      	str	r3, [r0, #0]
 800e8be:	eeb0 0a48 	vmov.f32	s0, s16
 800e8c2:	ecbd 8b02 	vpop	{d8}
 800e8c6:	bd10      	pop	{r4, pc}

0800e8c8 <scalbnf>:
 800e8c8:	ee10 3a10 	vmov	r3, s0
 800e8cc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e8d0:	d02a      	beq.n	800e928 <scalbnf+0x60>
 800e8d2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e8d6:	d302      	bcc.n	800e8de <scalbnf+0x16>
 800e8d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e8dc:	4770      	bx	lr
 800e8de:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e8e2:	d122      	bne.n	800e92a <scalbnf+0x62>
 800e8e4:	4b23      	ldr	r3, [pc, #140]	@ (800e974 <scalbnf+0xac>)
 800e8e6:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800e978 <scalbnf+0xb0>
 800e8ea:	4298      	cmp	r0, r3
 800e8ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e8f0:	db16      	blt.n	800e920 <scalbnf+0x58>
 800e8f2:	ee10 3a10 	vmov	r3, s0
 800e8f6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e8fa:	3a19      	subs	r2, #25
 800e8fc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e900:	4288      	cmp	r0, r1
 800e902:	dd14      	ble.n	800e92e <scalbnf+0x66>
 800e904:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 800e97c <scalbnf+0xb4>
 800e908:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800e980 <scalbnf+0xb8>
 800e90c:	ee10 3a10 	vmov	r3, s0
 800e910:	eeb0 7a67 	vmov.f32	s14, s15
 800e914:	2b00      	cmp	r3, #0
 800e916:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800e91a:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e91e:	4770      	bx	lr
 800e920:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800e984 <scalbnf+0xbc>
 800e924:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e928:	4770      	bx	lr
 800e92a:	0dd2      	lsrs	r2, r2, #23
 800e92c:	e7e6      	b.n	800e8fc <scalbnf+0x34>
 800e92e:	4410      	add	r0, r2
 800e930:	28fe      	cmp	r0, #254	@ 0xfe
 800e932:	dce7      	bgt.n	800e904 <scalbnf+0x3c>
 800e934:	2800      	cmp	r0, #0
 800e936:	dd06      	ble.n	800e946 <scalbnf+0x7e>
 800e938:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e93c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e940:	ee00 3a10 	vmov	s0, r3
 800e944:	4770      	bx	lr
 800e946:	f110 0f16 	cmn.w	r0, #22
 800e94a:	da09      	bge.n	800e960 <scalbnf+0x98>
 800e94c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e984 <scalbnf+0xbc>
 800e950:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800e988 <scalbnf+0xc0>
 800e954:	ee10 3a10 	vmov	r3, s0
 800e958:	eeb0 7a67 	vmov.f32	s14, s15
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	e7da      	b.n	800e916 <scalbnf+0x4e>
 800e960:	3019      	adds	r0, #25
 800e962:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e966:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e96a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e98c <scalbnf+0xc4>
 800e96e:	ee07 3a90 	vmov	s15, r3
 800e972:	e7d7      	b.n	800e924 <scalbnf+0x5c>
 800e974:	ffff3cb0 	.word	0xffff3cb0
 800e978:	4c000000 	.word	0x4c000000
 800e97c:	7149f2ca 	.word	0x7149f2ca
 800e980:	f149f2ca 	.word	0xf149f2ca
 800e984:	0da24260 	.word	0x0da24260
 800e988:	8da24260 	.word	0x8da24260
 800e98c:	33000000 	.word	0x33000000

0800e990 <finitef>:
 800e990:	ee10 3a10 	vmov	r3, s0
 800e994:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800e998:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800e99c:	bfac      	ite	ge
 800e99e:	2000      	movge	r0, #0
 800e9a0:	2001      	movlt	r0, #1
 800e9a2:	4770      	bx	lr

0800e9a4 <_free_r>:
 800e9a4:	b538      	push	{r3, r4, r5, lr}
 800e9a6:	4605      	mov	r5, r0
 800e9a8:	2900      	cmp	r1, #0
 800e9aa:	d041      	beq.n	800ea30 <_free_r+0x8c>
 800e9ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9b0:	1f0c      	subs	r4, r1, #4
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	bfb8      	it	lt
 800e9b6:	18e4      	addlt	r4, r4, r3
 800e9b8:	f7ff ff02 	bl	800e7c0 <__malloc_lock>
 800e9bc:	4a1d      	ldr	r2, [pc, #116]	@ (800ea34 <_free_r+0x90>)
 800e9be:	6813      	ldr	r3, [r2, #0]
 800e9c0:	b933      	cbnz	r3, 800e9d0 <_free_r+0x2c>
 800e9c2:	6063      	str	r3, [r4, #4]
 800e9c4:	6014      	str	r4, [r2, #0]
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9cc:	f7ff befe 	b.w	800e7cc <__malloc_unlock>
 800e9d0:	42a3      	cmp	r3, r4
 800e9d2:	d908      	bls.n	800e9e6 <_free_r+0x42>
 800e9d4:	6820      	ldr	r0, [r4, #0]
 800e9d6:	1821      	adds	r1, r4, r0
 800e9d8:	428b      	cmp	r3, r1
 800e9da:	bf01      	itttt	eq
 800e9dc:	6819      	ldreq	r1, [r3, #0]
 800e9de:	685b      	ldreq	r3, [r3, #4]
 800e9e0:	1809      	addeq	r1, r1, r0
 800e9e2:	6021      	streq	r1, [r4, #0]
 800e9e4:	e7ed      	b.n	800e9c2 <_free_r+0x1e>
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	b10b      	cbz	r3, 800e9f0 <_free_r+0x4c>
 800e9ec:	42a3      	cmp	r3, r4
 800e9ee:	d9fa      	bls.n	800e9e6 <_free_r+0x42>
 800e9f0:	6811      	ldr	r1, [r2, #0]
 800e9f2:	1850      	adds	r0, r2, r1
 800e9f4:	42a0      	cmp	r0, r4
 800e9f6:	d10b      	bne.n	800ea10 <_free_r+0x6c>
 800e9f8:	6820      	ldr	r0, [r4, #0]
 800e9fa:	4401      	add	r1, r0
 800e9fc:	1850      	adds	r0, r2, r1
 800e9fe:	4283      	cmp	r3, r0
 800ea00:	6011      	str	r1, [r2, #0]
 800ea02:	d1e0      	bne.n	800e9c6 <_free_r+0x22>
 800ea04:	6818      	ldr	r0, [r3, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	6053      	str	r3, [r2, #4]
 800ea0a:	4408      	add	r0, r1
 800ea0c:	6010      	str	r0, [r2, #0]
 800ea0e:	e7da      	b.n	800e9c6 <_free_r+0x22>
 800ea10:	d902      	bls.n	800ea18 <_free_r+0x74>
 800ea12:	230c      	movs	r3, #12
 800ea14:	602b      	str	r3, [r5, #0]
 800ea16:	e7d6      	b.n	800e9c6 <_free_r+0x22>
 800ea18:	6820      	ldr	r0, [r4, #0]
 800ea1a:	1821      	adds	r1, r4, r0
 800ea1c:	428b      	cmp	r3, r1
 800ea1e:	bf04      	itt	eq
 800ea20:	6819      	ldreq	r1, [r3, #0]
 800ea22:	685b      	ldreq	r3, [r3, #4]
 800ea24:	6063      	str	r3, [r4, #4]
 800ea26:	bf04      	itt	eq
 800ea28:	1809      	addeq	r1, r1, r0
 800ea2a:	6021      	streq	r1, [r4, #0]
 800ea2c:	6054      	str	r4, [r2, #4]
 800ea2e:	e7ca      	b.n	800e9c6 <_free_r+0x22>
 800ea30:	bd38      	pop	{r3, r4, r5, pc}
 800ea32:	bf00      	nop
 800ea34:	2007044c 	.word	0x2007044c

0800ea38 <sinf_poly>:
 800ea38:	07cb      	lsls	r3, r1, #31
 800ea3a:	d412      	bmi.n	800ea62 <sinf_poly+0x2a>
 800ea3c:	ee21 5b00 	vmul.f64	d5, d1, d0
 800ea40:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800ea44:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800ea48:	eea6 7b01 	vfma.f64	d7, d6, d1
 800ea4c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800ea50:	ee21 1b05 	vmul.f64	d1, d1, d5
 800ea54:	eea6 0b05 	vfma.f64	d0, d6, d5
 800ea58:	eea7 0b01 	vfma.f64	d0, d7, d1
 800ea5c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ea60:	4770      	bx	lr
 800ea62:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800ea66:	ee21 5b01 	vmul.f64	d5, d1, d1
 800ea6a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800ea6e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800ea72:	eea1 7b06 	vfma.f64	d7, d1, d6
 800ea76:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800ea7a:	eea1 0b06 	vfma.f64	d0, d1, d6
 800ea7e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800ea82:	ee21 1b05 	vmul.f64	d1, d1, d5
 800ea86:	eea5 0b06 	vfma.f64	d0, d5, d6
 800ea8a:	e7e5      	b.n	800ea58 <sinf_poly+0x20>
 800ea8c:	0000      	movs	r0, r0
	...

0800ea90 <sinf>:
 800ea90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea92:	ee10 4a10 	vmov	r4, s0
 800ea96:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800ea9a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800ea9e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800eaa2:	eef0 7a40 	vmov.f32	s15, s0
 800eaa6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800eaaa:	d218      	bcs.n	800eade <sinf+0x4e>
 800eaac:	ee26 1b06 	vmul.f64	d1, d6, d6
 800eab0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800eab4:	d20a      	bcs.n	800eacc <sinf+0x3c>
 800eab6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 800eaba:	d103      	bne.n	800eac4 <sinf+0x34>
 800eabc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800eac0:	ed8d 1a01 	vstr	s2, [sp, #4]
 800eac4:	eeb0 0a67 	vmov.f32	s0, s15
 800eac8:	b003      	add	sp, #12
 800eaca:	bd30      	pop	{r4, r5, pc}
 800eacc:	483a      	ldr	r0, [pc, #232]	@ (800ebb8 <sinf+0x128>)
 800eace:	eeb0 0b46 	vmov.f64	d0, d6
 800ead2:	2100      	movs	r1, #0
 800ead4:	b003      	add	sp, #12
 800ead6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eada:	f7ff bfad 	b.w	800ea38 <sinf_poly>
 800eade:	f240 422e 	movw	r2, #1070	@ 0x42e
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d824      	bhi.n	800eb30 <sinf+0xa0>
 800eae6:	4b34      	ldr	r3, [pc, #208]	@ (800ebb8 <sinf+0x128>)
 800eae8:	ed93 7b08 	vldr	d7, [r3, #32]
 800eaec:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eaf0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800eaf4:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800eaf8:	ee17 1a90 	vmov	r1, s15
 800eafc:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800eb00:	1609      	asrs	r1, r1, #24
 800eb02:	ee07 1a90 	vmov	s15, r1
 800eb06:	f001 0203 	and.w	r2, r1, #3
 800eb0a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800eb0e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800eb12:	ed92 0b00 	vldr	d0, [r2]
 800eb16:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800eb1a:	f011 0f02 	tst.w	r1, #2
 800eb1e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800eb22:	bf08      	it	eq
 800eb24:	4618      	moveq	r0, r3
 800eb26:	ee26 1b06 	vmul.f64	d1, d6, d6
 800eb2a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800eb2e:	e7d1      	b.n	800ead4 <sinf+0x44>
 800eb30:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800eb34:	d237      	bcs.n	800eba6 <sinf+0x116>
 800eb36:	4921      	ldr	r1, [pc, #132]	@ (800ebbc <sinf+0x12c>)
 800eb38:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800eb3c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800eb40:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800eb44:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800eb48:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800eb4c:	6a10      	ldr	r0, [r2, #32]
 800eb4e:	6912      	ldr	r2, [r2, #16]
 800eb50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800eb54:	40ab      	lsls	r3, r5
 800eb56:	fba0 5003 	umull	r5, r0, r0, r3
 800eb5a:	4359      	muls	r1, r3
 800eb5c:	fbe3 0102 	umlal	r0, r1, r3, r2
 800eb60:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800eb64:	0f9d      	lsrs	r5, r3, #30
 800eb66:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800eb6a:	1ac9      	subs	r1, r1, r3
 800eb6c:	f7f1 fcf2 	bl	8000554 <__aeabi_l2d>
 800eb70:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800eb74:	4b10      	ldr	r3, [pc, #64]	@ (800ebb8 <sinf+0x128>)
 800eb76:	f004 0203 	and.w	r2, r4, #3
 800eb7a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800eb7e:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 800ebb0 <sinf+0x120>
 800eb82:	ed92 0b00 	vldr	d0, [r2]
 800eb86:	ec41 0b17 	vmov	d7, r0, r1
 800eb8a:	f014 0f02 	tst.w	r4, #2
 800eb8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eb92:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800eb96:	4629      	mov	r1, r5
 800eb98:	bf08      	it	eq
 800eb9a:	4618      	moveq	r0, r3
 800eb9c:	ee27 1b07 	vmul.f64	d1, d7, d7
 800eba0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eba4:	e796      	b.n	800ead4 <sinf+0x44>
 800eba6:	b003      	add	sp, #12
 800eba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebac:	f000 b816 	b.w	800ebdc <__math_invalidf>
 800ebb0:	54442d18 	.word	0x54442d18
 800ebb4:	3c1921fb 	.word	0x3c1921fb
 800ebb8:	0800eee0 	.word	0x0800eee0
 800ebbc:	0800ee80 	.word	0x0800ee80

0800ebc0 <with_errnof>:
 800ebc0:	b510      	push	{r4, lr}
 800ebc2:	ed2d 8b02 	vpush	{d8}
 800ebc6:	eeb0 8a40 	vmov.f32	s16, s0
 800ebca:	4604      	mov	r4, r0
 800ebcc:	f7ff fe1c 	bl	800e808 <__errno>
 800ebd0:	eeb0 0a48 	vmov.f32	s0, s16
 800ebd4:	ecbd 8b02 	vpop	{d8}
 800ebd8:	6004      	str	r4, [r0, #0]
 800ebda:	bd10      	pop	{r4, pc}

0800ebdc <__math_invalidf>:
 800ebdc:	eef0 7a40 	vmov.f32	s15, s0
 800ebe0:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ebe4:	eef4 7a67 	vcmp.f32	s15, s15
 800ebe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebec:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ebf0:	d602      	bvs.n	800ebf8 <__math_invalidf+0x1c>
 800ebf2:	2021      	movs	r0, #33	@ 0x21
 800ebf4:	f7ff bfe4 	b.w	800ebc0 <with_errnof>
 800ebf8:	4770      	bx	lr
	...

0800ebfc <_init>:
 800ebfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebfe:	bf00      	nop
 800ec00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec02:	bc08      	pop	{r3}
 800ec04:	469e      	mov	lr, r3
 800ec06:	4770      	bx	lr

0800ec08 <_fini>:
 800ec08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec0a:	bf00      	nop
 800ec0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec0e:	bc08      	pop	{r3}
 800ec10:	469e      	mov	lr, r3
 800ec12:	4770      	bx	lr
